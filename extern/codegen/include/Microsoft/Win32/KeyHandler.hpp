// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: Microsoft::Win32
namespace Microsoft::Win32 {
  // Forward declaring type: RegistryKey
  class RegistryKey;
  // Forward declaring type: RegistryValueOptions
  struct RegistryValueOptions;
}
// Forward declaring namespace: System::Security
namespace System::Security {
  // Forward declaring type: SecurityElement
  class SecurityElement;
}
// Completed forward declares
// Type namespace: Microsoft.Win32
namespace Microsoft::Win32 {
  // Autogenerated type: Microsoft.Win32.KeyHandler
  class KeyHandler : public ::Il2CppObject {
    public:
    // public System.String Dir
    // Offset: 0x10
    ::Il2CppString* Dir;
    // private System.String ActualDir
    // Offset: 0x18
    ::Il2CppString* ActualDir;
    // public System.Boolean IsVolatile
    // Offset: 0x20
    bool IsVolatile;
    // private System.Collections.Hashtable values
    // Offset: 0x28
    System::Collections::Hashtable* values;
    // private System.String file
    // Offset: 0x30
    ::Il2CppString* file;
    // private System.Boolean dirty
    // Offset: 0x38
    bool dirty;
    // Get static field: static private System.Collections.Hashtable key_to_handler
    static System::Collections::Hashtable* _get_key_to_handler();
    // Set static field: static private System.Collections.Hashtable key_to_handler
    static void _set_key_to_handler(System::Collections::Hashtable* value);
    // Get static field: static private System.Collections.Hashtable dir_to_handler
    static System::Collections::Hashtable* _get_dir_to_handler();
    // Set static field: static private System.Collections.Hashtable dir_to_handler
    static void _set_dir_to_handler(System::Collections::Hashtable* value);
    // Get static field: static private System.String user_store
    static ::Il2CppString* _get_user_store();
    // Set static field: static private System.String user_store
    static void _set_user_store(::Il2CppString* value);
    // Get static field: static private System.String machine_store
    static ::Il2CppString* _get_machine_store();
    // Set static field: static private System.String machine_store
    static void _set_machine_store(::Il2CppString* value);
    // static private System.Void .cctor()
    // Offset: 0x10A8A98
    static void _cctor();
    // private System.Void .ctor(Microsoft.Win32.RegistryKey rkey, System.String basedir)
    // Offset: 0x10A8DE8
    static KeyHandler* New_ctor(Microsoft::Win32::RegistryKey* rkey, ::Il2CppString* basedir);
    // private System.Void .ctor(Microsoft.Win32.RegistryKey rkey, System.String basedir, System.Boolean is_volatile)
    // Offset: 0x10A8DF0
    static KeyHandler* New_ctor(Microsoft::Win32::RegistryKey* rkey, ::Il2CppString* basedir, bool is_volatile);
    // public System.Void Load()
    // Offset: 0x10A90B0
    void Load();
    // private System.Void LoadKey(System.Security.SecurityElement se)
    // Offset: 0x10A9724
    void LoadKey(System::Security::SecurityElement* se);
    // public Microsoft.Win32.RegistryKey Ensure(Microsoft.Win32.RegistryKey rkey, System.String extra, System.Boolean writable, System.Boolean is_volatile)
    // Offset: 0x10A9DD8
    Microsoft::Win32::RegistryKey* Ensure(Microsoft::Win32::RegistryKey* rkey, ::Il2CppString* extra, bool writable, bool is_volatile);
    // public Microsoft.Win32.RegistryKey Probe(Microsoft.Win32.RegistryKey rkey, System.String extra, System.Boolean writable)
    // Offset: 0x10AA198
    Microsoft::Win32::RegistryKey* Probe(Microsoft::Win32::RegistryKey* rkey, ::Il2CppString* extra, bool writable);
    // static private System.String CombineName(Microsoft.Win32.RegistryKey rkey, System.String extra)
    // Offset: 0x10AA098
    static ::Il2CppString* CombineName(Microsoft::Win32::RegistryKey* rkey, ::Il2CppString* extra);
    // static private System.Int64 GetSystemBootTime()
    // Offset: 0x10AA744
    static int64_t GetSystemBootTime();
    // static private System.Int64 GetRegisteredBootTime(System.String path)
    // Offset: 0x10AAA60
    static int64_t GetRegisteredBootTime(::Il2CppString* path);
    // static private System.Void SaveRegisteredBootTime(System.String path, System.Int64 btime)
    // Offset: 0x10AAD34
    static void SaveRegisteredBootTime(::Il2CppString* path, int64_t btime);
    // static private System.Void CleanVolatileKeys()
    // Offset: 0x10A8BA4
    static void CleanVolatileKeys();
    // static public System.Boolean VolatileKeyExists(System.String dir)
    // Offset: 0x10AA524
    static bool VolatileKeyExists(::Il2CppString* dir);
    // static public System.String GetVolatileDir(System.String dir)
    // Offset: 0x10A8FF0
    static ::Il2CppString* GetVolatileDir(::Il2CppString* dir);
    // static public Microsoft.Win32.KeyHandler Lookup(Microsoft.Win32.RegistryKey rkey, System.Boolean createNonExisting)
    // Offset: 0x10AB330
    static Microsoft::Win32::KeyHandler* Lookup(Microsoft::Win32::RegistryKey* rkey, bool createNonExisting);
    // static private System.String GetRootFromDir(System.String dir)
    // Offset: 0x10AB1F0
    static ::Il2CppString* GetRootFromDir(::Il2CppString* dir);
    // static public System.Void Drop(Microsoft.Win32.RegistryKey rkey)
    // Offset: 0x10AB86C
    static void Drop(Microsoft::Win32::RegistryKey* rkey);
    // public System.Object GetValue(System.String name, Microsoft.Win32.RegistryValueOptions options)
    // Offset: 0x10ABD0C
    ::Il2CppObject* GetValue(::Il2CppString* name, Microsoft::Win32::RegistryValueOptions options);
    // public System.String[] GetSubKeyNames()
    // Offset: 0x10ABF24
    ::Array<::Il2CppString*>* GetSubKeyNames();
    // public System.Void Flush()
    // Offset: 0x10AC370
    void Flush();
    // public System.Boolean ValueExists(System.String name)
    // Offset: 0x10ACE80
    bool ValueExists(::Il2CppString* name);
    // public System.Boolean get_IsMarkedForDeletion()
    // Offset: 0x10ABE94
    bool get_IsMarkedForDeletion();
    // private System.Void Save()
    // Offset: 0x10AC488
    void Save();
    // static private System.String get_UserStore()
    // Offset: 0x10AAF34
    static ::Il2CppString* get_UserStore();
    // static private System.String get_MachineStore()
    // Offset: 0x10AB044
    static ::Il2CppString* get_MachineStore();
    // protected override System.Void Finalize()
    // Offset: 0x10ACF90
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // Microsoft.Win32.KeyHandler
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Microsoft::Win32::KeyHandler*, "Microsoft.Win32", "KeyHandler");
#pragma pack(pop)
