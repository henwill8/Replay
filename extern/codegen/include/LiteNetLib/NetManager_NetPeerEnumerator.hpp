// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.NetManager
#include "LiteNetLib/NetManager.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LiteNetLib
namespace LiteNetLib {
  // Forward declaring type: NetPeer
  class NetPeer;
}
// Completed forward declares
// Type namespace: LiteNetLib
namespace LiteNetLib {
  // Autogenerated type: LiteNetLib.NetManager/NetPeerEnumerator
  struct NetManager::NetPeerEnumerator : public System::ValueType/*, public System::Collections::Generic::IEnumerator_1<LiteNetLib::NetPeer*>*/ {
    public:
    // private readonly LiteNetLib.NetPeer _initialPeer
    // Offset: 0x0
    LiteNetLib::NetPeer* initialPeer;
    // private LiteNetLib.NetPeer _p
    // Offset: 0x8
    LiteNetLib::NetPeer* p;
    // Creating value type constructor for type: NetPeerEnumerator
    constexpr NetPeerEnumerator(LiteNetLib::NetPeer* initialPeer_ = {}, LiteNetLib::NetPeer* p_ = {}) noexcept : initialPeer{initialPeer_}, p{p_} {}
    // Creating interface conversion operator: operator System::Collections::Generic::IEnumerator_1<LiteNetLib::NetPeer*>
    operator System::Collections::Generic::IEnumerator_1<LiteNetLib::NetPeer*>() noexcept {
      return *reinterpret_cast<System::Collections::Generic::IEnumerator_1<LiteNetLib::NetPeer*>*>(this);
    }
    // public System.Void .ctor(LiteNetLib.NetPeer p)
    // Offset: 0xE8C510
    NetPeerEnumerator(LiteNetLib::NetPeer* p);
    // public System.Void Dispose()
    // Offset: 0xE8C540
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
    // public System.Boolean MoveNext()
    // Offset: 0xE8C544
    // Implemented from: System.Collections.IEnumerator
    // Base method: System.Boolean IEnumerator::MoveNext()
    bool MoveNext();
    // Creating proxy method: System_Collections_IEnumerator_MoveNext
    // Maps to method: MoveNext
    bool System_Collections_IEnumerator_MoveNext();
    // public System.Void Reset()
    // Offset: 0xE8C54C
    // Implemented from: System.Collections.IEnumerator
    // Base method: System.Void IEnumerator::Reset()
    void Reset();
    // Creating proxy method: System_Collections_IEnumerator_Reset
    // Maps to method: Reset
    void System_Collections_IEnumerator_Reset();
    // public LiteNetLib.NetPeer get_Current()
    // Offset: 0xE8C558
    // Implemented from: System.Collections.Generic.IEnumerator`1
    // Base method: T IEnumerator_1::get_Current()
    LiteNetLib::NetPeer* get_Current();
    // Creating proxy method: System_Collections_Generic_IEnumerator_1_get_Current
    // Maps to method: get_Current
    LiteNetLib::NetPeer* System_Collections_Generic_IEnumerator_1_get_Current();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0xE8C560
    // Implemented from: System.Collections.IEnumerator
    // Base method: System.Object IEnumerator::get_Current()
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
  }; // LiteNetLib.NetManager/NetPeerEnumerator
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(LiteNetLib::NetManager::NetPeerEnumerator, "LiteNetLib", "NetManager/NetPeerEnumerator");
#pragma pack(pop)
