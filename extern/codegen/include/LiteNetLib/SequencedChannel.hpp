// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.BaseChannel
#include "LiteNetLib/BaseChannel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LiteNetLib
namespace LiteNetLib {
  // Forward declaring type: NetPacket
  class NetPacket;
  // Forward declaring type: NetPeer
  class NetPeer;
}
// Completed forward declares
// Type namespace: LiteNetLib
namespace LiteNetLib {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: LiteNetLib.SequencedChannel
  // [] Offset: FFFFFFFF
  class SequencedChannel : public LiteNetLib::BaseChannel {
    public:
    // private System.Int32 _localSequence
    // Size: 0x4
    // Offset: 0x28
    int localSequence;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.UInt16 _remoteSequence
    // Size: 0x2
    // Offset: 0x2C
    uint16_t remoteSequence;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // private readonly System.Boolean _reliable
    // Size: 0x1
    // Offset: 0x2E
    bool reliable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: reliable and: lastPacket
    char __padding2[0x1] = {};
    // private LiteNetLib.NetPacket _lastPacket
    // Size: 0x8
    // Offset: 0x30
    LiteNetLib::NetPacket* lastPacket;
    // Field size check
    static_assert(sizeof(LiteNetLib::NetPacket*) == 0x8);
    // private readonly LiteNetLib.NetPacket _ackPacket
    // Size: 0x8
    // Offset: 0x38
    LiteNetLib::NetPacket* ackPacket;
    // Field size check
    static_assert(sizeof(LiteNetLib::NetPacket*) == 0x8);
    // private System.Boolean _mustSendAck
    // Size: 0x1
    // Offset: 0x40
    bool mustSendAck;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly System.Byte _id
    // Size: 0x1
    // Offset: 0x41
    uint8_t id;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: id and: lastPacketSendTime
    char __padding6[0x6] = {};
    // private System.Int64 _lastPacketSendTime
    // Size: 0x8
    // Offset: 0x48
    int64_t lastPacketSendTime;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // Creating value type constructor for type: SequencedChannel
    SequencedChannel(int localSequence_ = {}, uint16_t remoteSequence_ = {}, bool reliable_ = {}, LiteNetLib::NetPacket* lastPacket_ = {}, LiteNetLib::NetPacket* ackPacket_ = {}, bool mustSendAck_ = {}, uint8_t id_ = {}, int64_t lastPacketSendTime_ = {}) noexcept : localSequence{localSequence_}, remoteSequence{remoteSequence_}, reliable{reliable_}, lastPacket{lastPacket_}, ackPacket{ackPacket_}, mustSendAck{mustSendAck_}, id{id_}, lastPacketSendTime{lastPacketSendTime_} {}
    // public System.Void .ctor(LiteNetLib.NetPeer peer, System.Boolean reliable, System.Byte id)
    // Offset: 0x1AA2FFC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SequencedChannel* New_ctor(LiteNetLib::NetPeer* peer, bool reliable, uint8_t id) {
      static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::SequencedChannel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SequencedChannel*, creationType>(peer, reliable, id)));
    }
    // public override System.Void SendNextPackets()
    // Offset: 0x1AA75CC
    // Implemented from: LiteNetLib.BaseChannel
    // Base method: System.Void BaseChannel::SendNextPackets()
    void SendNextPackets();
    // public override System.Boolean ProcessPacket(LiteNetLib.NetPacket packet)
    // Offset: 0x1AA78D0
    // Implemented from: LiteNetLib.BaseChannel
    // Base method: System.Boolean BaseChannel::ProcessPacket(LiteNetLib.NetPacket packet)
    bool ProcessPacket(LiteNetLib::NetPacket* packet);
  }; // LiteNetLib.SequencedChannel
  #pragma pack(pop)
  static check_size<sizeof(SequencedChannel), 72 + sizeof(int64_t)> __LiteNetLib_SequencedChannelSizeCheck;
  static_assert(sizeof(SequencedChannel) == 0x50);
}
DEFINE_IL2CPP_ARG_TYPE(LiteNetLib::SequencedChannel*, "LiteNetLib", "SequencedChannel");
