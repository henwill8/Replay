// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.ConnectionRequestResult
#include "LiteNetLib/ConnectionRequestResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LiteNetLib
namespace LiteNetLib {
  // Forward declaring type: NetManager
  class NetManager;
  // Forward declaring type: NetConnectRequestPacket
  class NetConnectRequestPacket;
  // Forward declaring type: NetPeer
  class NetPeer;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataReader
  class NetDataReader;
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
}
// Completed forward declares
// Type namespace: LiteNetLib
namespace LiteNetLib {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: LiteNetLib.ConnectionRequest
  // [] Offset: FFFFFFFF
  class ConnectionRequest : public ::Il2CppObject {
    public:
    // private readonly LiteNetLib.NetManager _listener
    // Size: 0x8
    // Offset: 0x10
    LiteNetLib::NetManager* listener;
    // Field size check
    static_assert(sizeof(LiteNetLib::NetManager*) == 0x8);
    // private System.Int32 _used
    // Size: 0x4
    // Offset: 0x18
    int used;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: used and: Data
    char __padding1[0x4] = {};
    // public readonly LiteNetLib.Utils.NetDataReader Data
    // Size: 0x8
    // Offset: 0x20
    LiteNetLib::Utils::NetDataReader* Data;
    // Field size check
    static_assert(sizeof(LiteNetLib::Utils::NetDataReader*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD0BFC8
    // private LiteNetLib.ConnectionRequestResult <Result>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    LiteNetLib::ConnectionRequestResult Result;
    // Field size check
    static_assert(sizeof(LiteNetLib::ConnectionRequestResult) == 0x4);
    // Padding between fields: Result and: ConnectionTime
    char __padding3[0x4] = {};
    // System.Int64 ConnectionTime
    // Size: 0x8
    // Offset: 0x30
    int64_t ConnectionTime;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // System.Byte ConnectionNumber
    // Size: 0x1
    // Offset: 0x38
    uint8_t ConnectionNumber;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: ConnectionNumber and: RemoteEndPoint
    char __padding5[0x7] = {};
    // public readonly System.Net.IPEndPoint RemoteEndPoint
    // Size: 0x8
    // Offset: 0x40
    System::Net::IPEndPoint* RemoteEndPoint;
    // Field size check
    static_assert(sizeof(System::Net::IPEndPoint*) == 0x8);
    // Creating value type constructor for type: ConnectionRequest
    ConnectionRequest(LiteNetLib::NetManager* listener_ = {}, int used_ = {}, LiteNetLib::Utils::NetDataReader* Data_ = {}, LiteNetLib::ConnectionRequestResult Result_ = {}, int64_t ConnectionTime_ = {}, uint8_t ConnectionNumber_ = {}, System::Net::IPEndPoint* RemoteEndPoint_ = {}) noexcept : listener{listener_}, used{used_}, Data{Data_}, Result{Result_}, ConnectionTime{ConnectionTime_}, ConnectionNumber{ConnectionNumber_}, RemoteEndPoint{RemoteEndPoint_} {}
    // LiteNetLib.ConnectionRequestResult get_Result()
    // Offset: 0x1A94B00
    LiteNetLib::ConnectionRequestResult get_Result();
    // private System.Void set_Result(LiteNetLib.ConnectionRequestResult value)
    // Offset: 0x1A94B08
    void set_Result(LiteNetLib::ConnectionRequestResult value);
    // private System.Boolean TryActivate()
    // Offset: 0x1A94B10
    bool TryActivate();
    // System.Void UpdateRequest(LiteNetLib.NetConnectRequestPacket connRequest)
    // Offset: 0x1A94B3C
    void UpdateRequest(LiteNetLib::NetConnectRequestPacket* connRequest);
    // System.Void .ctor(System.Int64 connectionId, System.Byte connectionNumber, LiteNetLib.Utils.NetDataReader netDataReader, System.Net.IPEndPoint endPoint, LiteNetLib.NetManager listener)
    // Offset: 0x1A94B6C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConnectionRequest* New_ctor(int64_t connectionId, uint8_t connectionNumber, LiteNetLib::Utils::NetDataReader* netDataReader, System::Net::IPEndPoint* endPoint, LiteNetLib::NetManager* listener) {
      static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::ConnectionRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConnectionRequest*, creationType>(connectionId, connectionNumber, netDataReader, endPoint, listener)));
    }
    // public LiteNetLib.NetPeer AcceptIfKey(System.String key)
    // Offset: 0x1A94BE8
    LiteNetLib::NetPeer* AcceptIfKey(::Il2CppString* key);
    // public LiteNetLib.NetPeer Accept()
    // Offset: 0x1A95318
    LiteNetLib::NetPeer* Accept();
    // public System.Void Reject(System.Byte[] rejectData, System.Int32 start, System.Int32 length, System.Boolean force)
    // Offset: 0x1A95380
    void Reject(::Array<uint8_t>* rejectData, int start, int length, bool force);
    // public System.Void Reject(System.Byte[] rejectData, System.Int32 start, System.Int32 length)
    // Offset: 0x1A95418
    void Reject(::Array<uint8_t>* rejectData, int start, int length);
    // public System.Void RejectForce(System.Byte[] rejectData, System.Int32 start, System.Int32 length)
    // Offset: 0x1A95420
    void RejectForce(::Array<uint8_t>* rejectData, int start, int length);
    // public System.Void RejectForce()
    // Offset: 0x1A95428
    void RejectForce();
    // public System.Void RejectForce(System.Byte[] rejectData)
    // Offset: 0x1A9543C
    void RejectForce(::Array<uint8_t>* rejectData);
    // public System.Void RejectForce(LiteNetLib.Utils.NetDataWriter rejectData)
    // Offset: 0x1A9545C
    void RejectForce(LiteNetLib::Utils::NetDataWriter* rejectData);
    // public System.Void Reject()
    // Offset: 0x1A95484
    void Reject();
    // public System.Void Reject(System.Byte[] rejectData)
    // Offset: 0x1A95498
    void Reject(::Array<uint8_t>* rejectData);
    // public System.Void Reject(LiteNetLib.Utils.NetDataWriter rejectData)
    // Offset: 0x1A954B8
    void Reject(LiteNetLib::Utils::NetDataWriter* rejectData);
  }; // LiteNetLib.ConnectionRequest
  #pragma pack(pop)
  static check_size<sizeof(ConnectionRequest), 64 + sizeof(System::Net::IPEndPoint*)> __LiteNetLib_ConnectionRequestSizeCheck;
  static_assert(sizeof(ConnectionRequest) == 0x48);
}
DEFINE_IL2CPP_ARG_TYPE(LiteNetLib::ConnectionRequest*, "LiteNetLib", "ConnectionRequest");
