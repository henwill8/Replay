// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.ConnectionRequestResult
#include "LiteNetLib/ConnectionRequestResult.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LiteNetLib
namespace LiteNetLib {
  // Forward declaring type: NetManager
  class NetManager;
  // Forward declaring type: NetConnectRequestPacket
  class NetConnectRequestPacket;
  // Forward declaring type: NetPeer
  class NetPeer;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataReader
  class NetDataReader;
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
}
// Completed forward declares
// Type namespace: LiteNetLib
namespace LiteNetLib {
  // Autogenerated type: LiteNetLib.ConnectionRequest
  class ConnectionRequest : public ::Il2CppObject {
    public:
    // private readonly LiteNetLib.NetManager _listener
    // Offset: 0x10
    LiteNetLib::NetManager* listener;
    // private System.Int32 _used
    // Offset: 0x18
    int used;
    // public readonly LiteNetLib.Utils.NetDataReader Data
    // Offset: 0x20
    LiteNetLib::Utils::NetDataReader* Data;
    // private LiteNetLib.ConnectionRequestResult <Result>k__BackingField
    // Offset: 0x28
    LiteNetLib::ConnectionRequestResult Result;
    // System.Int64 ConnectionTime
    // Offset: 0x30
    int64_t ConnectionTime;
    // System.Byte ConnectionNumber
    // Offset: 0x38
    uint8_t ConnectionNumber;
    // public readonly System.Net.IPEndPoint RemoteEndPoint
    // Offset: 0x40
    System::Net::IPEndPoint* RemoteEndPoint;
    // LiteNetLib.ConnectionRequestResult get_Result()
    // Offset: 0x1DBF9DC
    LiteNetLib::ConnectionRequestResult get_Result();
    // private System.Void set_Result(LiteNetLib.ConnectionRequestResult value)
    // Offset: 0x1DBF9E4
    void set_Result(LiteNetLib::ConnectionRequestResult value);
    // private System.Boolean TryActivate()
    // Offset: 0x1DBF9EC
    bool TryActivate();
    // System.Void UpdateRequest(LiteNetLib.NetConnectRequestPacket connRequest)
    // Offset: 0x1DBFA18
    void UpdateRequest(LiteNetLib::NetConnectRequestPacket* connRequest);
    // System.Void .ctor(System.Int64 connectionId, System.Byte connectionNumber, LiteNetLib.Utils.NetDataReader netDataReader, System.Net.IPEndPoint endPoint, LiteNetLib.NetManager listener)
    // Offset: 0x1DBFA48
    static ConnectionRequest* New_ctor(int64_t connectionId, uint8_t connectionNumber, LiteNetLib::Utils::NetDataReader* netDataReader, System::Net::IPEndPoint* endPoint, LiteNetLib::NetManager* listener);
    // public LiteNetLib.NetPeer AcceptIfKey(System.String key)
    // Offset: 0x1DBFAC4
    LiteNetLib::NetPeer* AcceptIfKey(::Il2CppString* key);
    // public LiteNetLib.NetPeer Accept()
    // Offset: 0x1DC01F4
    LiteNetLib::NetPeer* Accept();
    // public System.Void Reject(System.Byte[] rejectData, System.Int32 start, System.Int32 length, System.Boolean force)
    // Offset: 0x1DC025C
    void Reject(::Array<uint8_t>* rejectData, int start, int length, bool force);
    // public System.Void Reject(System.Byte[] rejectData, System.Int32 start, System.Int32 length)
    // Offset: 0x1DC02F4
    void Reject(::Array<uint8_t>* rejectData, int start, int length);
    // public System.Void RejectForce(System.Byte[] rejectData, System.Int32 start, System.Int32 length)
    // Offset: 0x1DC02FC
    void RejectForce(::Array<uint8_t>* rejectData, int start, int length);
    // public System.Void RejectForce()
    // Offset: 0x1DC0304
    void RejectForce();
    // public System.Void RejectForce(System.Byte[] rejectData)
    // Offset: 0x1DC0318
    void RejectForce(::Array<uint8_t>* rejectData);
    // public System.Void RejectForce(LiteNetLib.Utils.NetDataWriter rejectData)
    // Offset: 0x1DC0338
    void RejectForce(LiteNetLib::Utils::NetDataWriter* rejectData);
    // public System.Void Reject()
    // Offset: 0x1DC0360
    void Reject();
    // public System.Void Reject(System.Byte[] rejectData)
    // Offset: 0x1DC0374
    void Reject(::Array<uint8_t>* rejectData);
    // public System.Void Reject(LiteNetLib.Utils.NetDataWriter rejectData)
    // Offset: 0x1DC0394
    void Reject(LiteNetLib::Utils::NetDataWriter* rejectData);
  }; // LiteNetLib.ConnectionRequest
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(LiteNetLib::ConnectionRequest*, "LiteNetLib", "ConnectionRequest");
#pragma pack(pop)
