// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: INetSerializable
  class INetSerializable;
  // Forward declaring type: NetDataReader
  class NetDataReader;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: ValueType
  class ValueType;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Completed forward declares
// Type namespace: LiteNetLib.Utils
namespace LiteNetLib::Utils {
  // Autogenerated type: LiteNetLib.Utils.NetSerializer
  class NetSerializer : public ::Il2CppObject {
    public:
    // Nested type: LiteNetLib::Utils::NetSerializer::FastCall_1<T>
    template<typename T>
    class FastCall_1;
    // Nested type: LiteNetLib::Utils::NetSerializer::FastCallSpecific_2<TClass, TProperty>
    template<typename TClass, typename TProperty>
    class FastCallSpecific_2;
    // Nested type: LiteNetLib::Utils::NetSerializer::FastCallSpecificAuto_2<TClass, TProperty>
    template<typename TClass, typename TProperty>
    class FastCallSpecificAuto_2;
    // Nested type: LiteNetLib::Utils::NetSerializer::FastCallStatic_2<TClass, TProperty>
    template<typename TClass, typename TProperty>
    class FastCallStatic_2;
    // Nested type: LiteNetLib::Utils::NetSerializer::FastCallStruct_2<TClass, TProperty>
    template<typename TClass, typename TProperty>
    class FastCallStruct_2;
    // Nested type: LiteNetLib::Utils::NetSerializer::FastCallClass_2<TClass, TProperty>
    template<typename TClass, typename TProperty>
    class FastCallClass_2;
    // Nested type: LiteNetLib::Utils::NetSerializer::IntSerializer_1<T>
    template<typename T>
    class IntSerializer_1;
    // Nested type: LiteNetLib::Utils::NetSerializer::UIntSerializer_1<T>
    template<typename T>
    class UIntSerializer_1;
    // Nested type: LiteNetLib::Utils::NetSerializer::ShortSerializer_1<T>
    template<typename T>
    class ShortSerializer_1;
    // Nested type: LiteNetLib::Utils::NetSerializer::UShortSerializer_1<T>
    template<typename T>
    class UShortSerializer_1;
    // Nested type: LiteNetLib::Utils::NetSerializer::LongSerializer_1<T>
    template<typename T>
    class LongSerializer_1;
    // Nested type: LiteNetLib::Utils::NetSerializer::ULongSerializer_1<T>
    template<typename T>
    class ULongSerializer_1;
    // Nested type: LiteNetLib::Utils::NetSerializer::ByteSerializer_1<T>
    template<typename T>
    class ByteSerializer_1;
    // Nested type: LiteNetLib::Utils::NetSerializer::SByteSerializer_1<T>
    template<typename T>
    class SByteSerializer_1;
    // Nested type: LiteNetLib::Utils::NetSerializer::FloatSerializer_1<T>
    template<typename T>
    class FloatSerializer_1;
    // Nested type: LiteNetLib::Utils::NetSerializer::DoubleSerializer_1<T>
    template<typename T>
    class DoubleSerializer_1;
    // Nested type: LiteNetLib::Utils::NetSerializer::BoolSerializer_1<T>
    template<typename T>
    class BoolSerializer_1;
    // Nested type: LiteNetLib::Utils::NetSerializer::CharSerializer_1<T>
    template<typename T>
    class CharSerializer_1;
    // Nested type: LiteNetLib::Utils::NetSerializer::IPEndPointSerializer_1<T>
    template<typename T>
    class IPEndPointSerializer_1;
    // Nested type: LiteNetLib::Utils::NetSerializer::StringSerializer_1<T>
    template<typename T>
    class StringSerializer_1;
    // Nested type: LiteNetLib::Utils::NetSerializer::EnumByteSerializer_1<T>
    template<typename T>
    class EnumByteSerializer_1;
    // Nested type: LiteNetLib::Utils::NetSerializer::EnumIntSerializer_1<T>
    template<typename T>
    class EnumIntSerializer_1;
    // Nested type: LiteNetLib::Utils::NetSerializer::ClassInfo_1<T>
    template<typename T>
    class ClassInfo_1;
    // Nested type: LiteNetLib::Utils::NetSerializer::CustomType
    class CustomType;
    // Nested type: LiteNetLib::Utils::NetSerializer::CustomTypeStruct_1<TProperty>
    template<typename TProperty>
    class CustomTypeStruct_1;
    // Nested type: LiteNetLib::Utils::NetSerializer::CustomTypeClass_1<TProperty>
    template<typename TProperty>
    class CustomTypeClass_1;
    // Nested type: LiteNetLib::Utils::NetSerializer::CustomTypeStatic_1<TProperty>
    template<typename TProperty>
    class CustomTypeStatic_1;
    // private LiteNetLib.Utils.NetDataWriter _writer
    // Offset: 0x10
    LiteNetLib::Utils::NetDataWriter* writer;
    // private readonly System.Int32 _maxStringLength
    // Offset: 0x18
    int maxStringLength;
    // private readonly System.Collections.Generic.Dictionary`2<System.Type,LiteNetLib.Utils.NetSerializer/CustomType> _registeredTypes
    // Offset: 0x20
    System::Collections::Generic::Dictionary_2<System::Type*, LiteNetLib::Utils::NetSerializer::CustomType*>* registeredTypes;
    // public System.Void RegisterNestedType()
    // Offset: 0xFFFFFFFF
    template<class T>
    void RegisterNestedType() {
      static_assert(std::is_base_of_v<LiteNetLib::Utils::INetSerializable, std::remove_pointer_t<T>> && is_value_type_v<T>);
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "RegisterNestedType", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
    }
    // public System.Void RegisterNestedType(System.Func`1<T> constructor)
    // Offset: 0xFFFFFFFF
    template<class T>
    void RegisterNestedType(System::Func_1<T>* constructor) {
      static_assert(std::is_base_of_v<LiteNetLib::Utils::INetSerializable, std::remove_pointer_t<T>>);
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "RegisterNestedType", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, constructor));
    }
    // public System.Void RegisterNestedType(System.Action`2<LiteNetLib.Utils.NetDataWriter,T> writer, System.Func`2<LiteNetLib.Utils.NetDataReader,T> reader)
    // Offset: 0xFFFFFFFF
    template<class T>
    void RegisterNestedType(System::Action_2<LiteNetLib::Utils::NetDataWriter*, T>* writer, System::Func_2<LiteNetLib::Utils::NetDataReader*, T>* reader) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "RegisterNestedType", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, writer, reader));
    }
    // public System.Void .ctor(System.Int32 maxStringLength)
    // Offset: 0x22B5010
    static NetSerializer* New_ctor(int maxStringLength);
    // private LiteNetLib.Utils.NetSerializer/ClassInfo`1<T> RegisterInternal()
    // Offset: 0xFFFFFFFF
    template<class T>
    LiteNetLib::Utils::NetSerializer::ClassInfo_1<T>* RegisterInternal() {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<LiteNetLib::Utils::NetSerializer::ClassInfo_1<T>*>(this, "RegisterInternal", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()})));
    }
    // public System.Void Register()
    // Offset: 0xFFFFFFFF
    template<class T>
    void Register() {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "Register", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
    }
    // public T Deserialize(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0xFFFFFFFF
    template<class T>
    T Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>(this, "Deserialize", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, reader)));
    }
    // public System.Boolean Deserialize(LiteNetLib.Utils.NetDataReader reader, T target)
    // Offset: 0xFFFFFFFF
    template<class T>
    bool Deserialize(LiteNetLib::Utils::NetDataReader* reader, T target) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<bool>(this, "Deserialize", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, reader, target)));
    }
    // public System.Void Serialize(LiteNetLib.Utils.NetDataWriter writer, T obj)
    // Offset: 0xFFFFFFFF
    template<class T>
    void Serialize(LiteNetLib::Utils::NetDataWriter* writer, T obj) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "Serialize", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, writer, obj));
    }
    // public System.Byte[] Serialize(T obj)
    // Offset: 0xFFFFFFFF
    template<class T>
    ::Array<uint8_t>* Serialize(T obj) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<::Array<uint8_t>*>(this, "Serialize", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, obj)));
    }
    // public System.Void .ctor()
    // Offset: 0x22B4F28
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static NetSerializer* New_ctor();
  }; // LiteNetLib.Utils.NetSerializer
}
DEFINE_IL2CPP_ARG_TYPE(LiteNetLib::Utils::NetSerializer*, "LiteNetLib.Utils", "NetSerializer");
#pragma pack(pop)
