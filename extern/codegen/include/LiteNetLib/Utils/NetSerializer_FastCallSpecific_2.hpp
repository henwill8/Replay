// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.Utils.NetSerializer
#include "LiteNetLib/Utils/NetSerializer.hpp"
// Including type: LiteNetLib.Utils.NetSerializer/FastCall`1
#include "LiteNetLib/Utils/NetSerializer_FastCall_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataReader
  class NetDataReader;
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MethodInfo
  class MethodInfo;
}
// Completed forward declares
// Type namespace: LiteNetLib.Utils
namespace LiteNetLib::Utils {
  // Autogenerated type: LiteNetLib.Utils.NetSerializer/FastCallSpecific`2
  template<typename TClass, typename TProperty>
  class NetSerializer::FastCallSpecific_2 : public LiteNetLib::Utils::NetSerializer::FastCall_1<TClass> {
    public:
    // protected System.Func`2<TClass,TProperty> Getter
    // Offset: 0x0
    System::Func_2<TClass, TProperty>* Getter;
    // protected System.Action`2<TClass,TProperty> Setter
    // Offset: 0x0
    System::Action_2<TClass, TProperty>* Setter;
    // protected System.Func`2<TClass,TProperty[]> GetterArr
    // Offset: 0x0
    System::Func_2<TClass, ::Array<TProperty>*>* GetterArr;
    // protected System.Action`2<TClass,TProperty[]> SetterArr
    // Offset: 0x0
    System::Action_2<TClass, ::Array<TProperty>*>* SetterArr;
    // Deleting conversion operator: operator bool
    constexpr operator bool() const noexcept = delete;
    // protected TProperty[] ReadArrayHelper(TClass inf, LiteNetLib.Utils.NetDataReader r)
    // Offset: 0xFFFFFFFF
    ::Array<TProperty>* ReadArrayHelper(TClass inf, LiteNetLib::Utils::NetDataReader* r) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<TProperty>*>(this, "ReadArrayHelper", inf, r));
    }
    // protected TProperty[] WriteArrayHelper(TClass inf, LiteNetLib.Utils.NetDataWriter w)
    // Offset: 0xFFFFFFFF
    ::Array<TProperty>* WriteArrayHelper(TClass inf, LiteNetLib::Utils::NetDataWriter* w) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<TProperty>*>(this, "WriteArrayHelper", inf, w));
    }
    // public override System.Void Init(System.Reflection.MethodInfo getMethod, System.Reflection.MethodInfo setMethod, System.Boolean isArray)
    // Offset: 0xFFFFFFFF
    // Implemented from: LiteNetLib.Utils.NetSerializer/FastCall`1
    // Base method: System.Void FastCall_1::Init(System.Reflection.MethodInfo getMethod, System.Reflection.MethodInfo setMethod, System.Boolean isArray)
    void Init(System::Reflection::MethodInfo* getMethod, System::Reflection::MethodInfo* setMethod, bool isArray) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Init", getMethod, setMethod, isArray));
    }
    // protected System.Void .ctor()
    // Offset: 0xFFFFFFFF
    // Implemented from: LiteNetLib.Utils.NetSerializer/FastCall`1
    // Base method: System.Void FastCall_1::.ctor()
    // Base method: System.Void Object::.ctor()
    static NetSerializer::FastCallSpecific_2<TClass, TProperty>* New_ctor() {
      return THROW_UNLESS((il2cpp_utils::New<NetSerializer::FastCallSpecific_2<TClass, TProperty>*>()));
    }
  }; // LiteNetLib.Utils.NetSerializer/FastCallSpecific`2
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(LiteNetLib::Utils::NetSerializer::FastCallSpecific_2, "LiteNetLib.Utils", "NetSerializer/FastCallSpecific`2");
#pragma pack(pop)
