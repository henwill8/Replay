// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.UInt32
#include "System/UInt32.hpp"
// Completed includes
// Type namespace: LiteNetLib.Utils
namespace LiteNetLib::Utils {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: LiteNetLib.Utils.CRC32C
  // [] Offset: FFFFFFFF
  class CRC32C : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: CRC32C
    CRC32C() noexcept {}
    // static field const value: static public System.Int32 ChecksumSize
    static constexpr const int ChecksumSize = 4;
    // Get static field: static public System.Int32 ChecksumSize
    static int _get_ChecksumSize();
    // Set static field: static public System.Int32 ChecksumSize
    static void _set_ChecksumSize(int value);
    // static field const value: static private System.UInt32 Poly
    static constexpr const uint Poly = 2197175160u;
    // Get static field: static private System.UInt32 Poly
    static uint _get_Poly();
    // Set static field: static private System.UInt32 Poly
    static void _set_Poly(uint value);
    // Get static field: static private readonly System.UInt32[] Table
    static ::Array<uint>* _get_Table();
    // Set static field: static private readonly System.UInt32[] Table
    static void _set_Table(::Array<uint>* value);
    // static private System.Void .cctor()
    // Offset: 0x1AA7C1C
    static void _cctor();
    // static public System.UInt32 Compute(System.Byte[] input, System.Int32 offset, System.Int32 length)
    // Offset: 0x1A9935C
    static uint Compute(::Array<uint8_t>* input, int offset, int length);
  }; // LiteNetLib.Utils.CRC32C
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(LiteNetLib::Utils::CRC32C*, "LiteNetLib.Utils", "CRC32C");
