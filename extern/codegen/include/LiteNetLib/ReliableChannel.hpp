// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.BaseChannel
#include "LiteNetLib/BaseChannel.hpp"
// Including type: LiteNetLib.DeliveryMethod
#include "LiteNetLib/DeliveryMethod.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LiteNetLib
namespace LiteNetLib {
  // Forward declaring type: NetPacket
  class NetPacket;
  // Forward declaring type: NetPeer
  class NetPeer;
}
// Completed forward declares
// Type namespace: LiteNetLib
namespace LiteNetLib {
  // Autogenerated type: LiteNetLib.ReliableChannel
  class ReliableChannel : public LiteNetLib::BaseChannel {
    public:
    // Nested type: LiteNetLib::ReliableChannel::PendingPacket
    struct PendingPacket;
    // private readonly LiteNetLib.NetPacket _outgoingAcks
    // Offset: 0x28
    LiteNetLib::NetPacket* outgoingAcks;
    // private readonly LiteNetLib.ReliableChannel/PendingPacket[] _pendingPackets
    // Offset: 0x30
    ::Array<LiteNetLib::ReliableChannel::PendingPacket>* pendingPackets;
    // private readonly LiteNetLib.NetPacket[] _receivedPackets
    // Offset: 0x38
    ::Array<LiteNetLib::NetPacket*>* receivedPackets;
    // private readonly System.Boolean[] _earlyReceived
    // Offset: 0x40
    ::Array<bool>* earlyReceived;
    // private System.Int32 _localSeqence
    // Offset: 0x48
    int localSeqence;
    // private System.Int32 _remoteSequence
    // Offset: 0x4C
    int remoteSequence;
    // private System.Int32 _localWindowStart
    // Offset: 0x50
    int localWindowStart;
    // private System.Int32 _remoteWindowStart
    // Offset: 0x54
    int remoteWindowStart;
    // private System.Boolean _mustSendAcks
    // Offset: 0x58
    bool mustSendAcks;
    // private readonly LiteNetLib.DeliveryMethod _deliveryMethod
    // Offset: 0x59
    LiteNetLib::DeliveryMethod deliveryMethod;
    // private readonly System.Boolean _ordered
    // Offset: 0x5A
    bool ordered;
    // private readonly System.Int32 _windowSize
    // Offset: 0x5C
    int windowSize;
    // private readonly System.Byte _id
    // Offset: 0x60
    uint8_t id;
    // static field const value: static private System.Int32 BitsInByte
    static constexpr const int BitsInByte = 8;
    // Get static field: static private System.Int32 BitsInByte
    static int _get_BitsInByte();
    // Set static field: static private System.Int32 BitsInByte
    static void _set_BitsInByte(int value);
    // public System.Void .ctor(LiteNetLib.NetPeer peer, System.Boolean ordered, System.Byte id)
    // Offset: 0x1DCDD30
    static ReliableChannel* New_ctor(LiteNetLib::NetPeer* peer, bool ordered, uint8_t id);
    // private System.Void ProcessAck(LiteNetLib.NetPacket packet)
    // Offset: 0x1DD1630
    void ProcessAck(LiteNetLib::NetPacket* packet);
    // public override System.Void SendNextPackets()
    // Offset: 0x1DD19F8
    // Implemented from: LiteNetLib.BaseChannel
    // Base method: System.Void BaseChannel::SendNextPackets()
    void SendNextPackets();
    // public override System.Boolean ProcessPacket(LiteNetLib.NetPacket packet)
    // Offset: 0x1DD1F10
    // Implemented from: LiteNetLib.BaseChannel
    // Base method: System.Boolean BaseChannel::ProcessPacket(LiteNetLib.NetPacket packet)
    bool ProcessPacket(LiteNetLib::NetPacket* packet);
  }; // LiteNetLib.ReliableChannel
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(LiteNetLib::ReliableChannel*, "LiteNetLib", "ReliableChannel");
#pragma pack(pop)
