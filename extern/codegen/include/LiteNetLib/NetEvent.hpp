// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Sockets.SocketError
#include "System/Net/Sockets/SocketError.hpp"
// Including type: LiteNetLib.DisconnectReason
#include "LiteNetLib/DisconnectReason.hpp"
// Including type: LiteNetLib.DeliveryMethod
#include "LiteNetLib/DeliveryMethod.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LiteNetLib
namespace LiteNetLib {
  // Forward declaring type: NetPeer
  class NetPeer;
  // Forward declaring type: ConnectionRequest
  class ConnectionRequest;
  // Forward declaring type: NetPacketReader
  class NetPacketReader;
  // Forward declaring type: NetManager
  class NetManager;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
}
// Completed forward declares
// Type namespace: LiteNetLib
namespace LiteNetLib {
  // Autogenerated type: LiteNetLib.NetEvent
  class NetEvent : public ::Il2CppObject {
    public:
    // Nested type: LiteNetLib::NetEvent::EType
    struct EType;
    // Autogenerated type: LiteNetLib.NetEvent/EType
    struct EType : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: EType
      constexpr EType(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public LiteNetLib.NetEvent/EType Connect
      static constexpr const int Connect = 0;
      // Get static field: static public LiteNetLib.NetEvent/EType Connect
      static LiteNetLib::NetEvent::EType _get_Connect();
      // Set static field: static public LiteNetLib.NetEvent/EType Connect
      static void _set_Connect(LiteNetLib::NetEvent::EType value);
      // static field const value: static public LiteNetLib.NetEvent/EType Disconnect
      static constexpr const int Disconnect = 1;
      // Get static field: static public LiteNetLib.NetEvent/EType Disconnect
      static LiteNetLib::NetEvent::EType _get_Disconnect();
      // Set static field: static public LiteNetLib.NetEvent/EType Disconnect
      static void _set_Disconnect(LiteNetLib::NetEvent::EType value);
      // static field const value: static public LiteNetLib.NetEvent/EType Receive
      static constexpr const int Receive = 2;
      // Get static field: static public LiteNetLib.NetEvent/EType Receive
      static LiteNetLib::NetEvent::EType _get_Receive();
      // Set static field: static public LiteNetLib.NetEvent/EType Receive
      static void _set_Receive(LiteNetLib::NetEvent::EType value);
      // static field const value: static public LiteNetLib.NetEvent/EType ReceiveUnconnected
      static constexpr const int ReceiveUnconnected = 3;
      // Get static field: static public LiteNetLib.NetEvent/EType ReceiveUnconnected
      static LiteNetLib::NetEvent::EType _get_ReceiveUnconnected();
      // Set static field: static public LiteNetLib.NetEvent/EType ReceiveUnconnected
      static void _set_ReceiveUnconnected(LiteNetLib::NetEvent::EType value);
      // static field const value: static public LiteNetLib.NetEvent/EType Error
      static constexpr const int Error = 4;
      // Get static field: static public LiteNetLib.NetEvent/EType Error
      static LiteNetLib::NetEvent::EType _get_Error();
      // Set static field: static public LiteNetLib.NetEvent/EType Error
      static void _set_Error(LiteNetLib::NetEvent::EType value);
      // static field const value: static public LiteNetLib.NetEvent/EType ConnectionLatencyUpdated
      static constexpr const int ConnectionLatencyUpdated = 5;
      // Get static field: static public LiteNetLib.NetEvent/EType ConnectionLatencyUpdated
      static LiteNetLib::NetEvent::EType _get_ConnectionLatencyUpdated();
      // Set static field: static public LiteNetLib.NetEvent/EType ConnectionLatencyUpdated
      static void _set_ConnectionLatencyUpdated(LiteNetLib::NetEvent::EType value);
      // static field const value: static public LiteNetLib.NetEvent/EType Broadcast
      static constexpr const int Broadcast = 6;
      // Get static field: static public LiteNetLib.NetEvent/EType Broadcast
      static LiteNetLib::NetEvent::EType _get_Broadcast();
      // Set static field: static public LiteNetLib.NetEvent/EType Broadcast
      static void _set_Broadcast(LiteNetLib::NetEvent::EType value);
      // static field const value: static public LiteNetLib.NetEvent/EType ConnectionRequest
      static constexpr const int ConnectionRequest = 7;
      // Get static field: static public LiteNetLib.NetEvent/EType ConnectionRequest
      static LiteNetLib::NetEvent::EType _get_ConnectionRequest();
      // Set static field: static public LiteNetLib.NetEvent/EType ConnectionRequest
      static void _set_ConnectionRequest(LiteNetLib::NetEvent::EType value);
      // static field const value: static public LiteNetLib.NetEvent/EType MessageDelivered
      static constexpr const int MessageDelivered = 8;
      // Get static field: static public LiteNetLib.NetEvent/EType MessageDelivered
      static LiteNetLib::NetEvent::EType _get_MessageDelivered();
      // Set static field: static public LiteNetLib.NetEvent/EType MessageDelivered
      static void _set_MessageDelivered(LiteNetLib::NetEvent::EType value);
    }; // LiteNetLib.NetEvent/EType
    // public LiteNetLib.NetEvent/EType Type
    // Offset: 0x10
    LiteNetLib::NetEvent::EType Type;
    // public LiteNetLib.NetPeer Peer
    // Offset: 0x18
    LiteNetLib::NetPeer* Peer;
    // public System.Net.IPEndPoint RemoteEndPoint
    // Offset: 0x20
    System::Net::IPEndPoint* RemoteEndPoint;
    // public System.Object UserData
    // Offset: 0x28
    ::Il2CppObject* UserData;
    // public System.Int32 Latency
    // Offset: 0x30
    int Latency;
    // public System.Net.Sockets.SocketError ErrorCode
    // Offset: 0x34
    System::Net::Sockets::SocketError ErrorCode;
    // public LiteNetLib.DisconnectReason DisconnectReason
    // Offset: 0x38
    LiteNetLib::DisconnectReason DisconnectReason;
    // public LiteNetLib.ConnectionRequest ConnectionRequest
    // Offset: 0x40
    LiteNetLib::ConnectionRequest* ConnectionRequest;
    // public LiteNetLib.DeliveryMethod DeliveryMethod
    // Offset: 0x48
    LiteNetLib::DeliveryMethod DeliveryMethod;
    // public readonly LiteNetLib.NetPacketReader DataReader
    // Offset: 0x50
    LiteNetLib::NetPacketReader* DataReader;
    // public System.Void .ctor(LiteNetLib.NetManager manager)
    // Offset: 0x1DC6C08
    static NetEvent* New_ctor(LiteNetLib::NetManager* manager);
  }; // LiteNetLib.NetEvent
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(LiteNetLib::NetEvent*, "LiteNetLib", "NetEvent");
DEFINE_IL2CPP_ARG_TYPE(LiteNetLib::NetEvent::EType, "LiteNetLib", "NetEvent/EType");
#pragma pack(pop)
