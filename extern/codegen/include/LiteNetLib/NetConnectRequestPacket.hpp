// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataReader
  class NetDataReader;
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
}
// Forward declaring namespace: LiteNetLib
namespace LiteNetLib {
  // Forward declaring type: NetPacket
  class NetPacket;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: SocketAddress
  class SocketAddress;
}
// Completed forward declares
// Type namespace: LiteNetLib
namespace LiteNetLib {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: LiteNetLib.NetConnectRequestPacket
  // [] Offset: FFFFFFFF
  class NetConnectRequestPacket : public ::Il2CppObject {
    public:
    // public readonly System.Int64 ConnectionTime
    // Size: 0x8
    // Offset: 0x10
    int64_t ConnectionTime;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public readonly System.Byte ConnectionNumber
    // Size: 0x1
    // Offset: 0x18
    uint8_t ConnectionNumber;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: ConnectionNumber and: TargetAddress
    char __padding1[0x7] = {};
    // public readonly System.Byte[] TargetAddress
    // Size: 0x8
    // Offset: 0x20
    ::Array<uint8_t>* TargetAddress;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // public readonly LiteNetLib.Utils.NetDataReader Data
    // Size: 0x8
    // Offset: 0x28
    LiteNetLib::Utils::NetDataReader* Data;
    // Field size check
    static_assert(sizeof(LiteNetLib::Utils::NetDataReader*) == 0x8);
    // Creating value type constructor for type: NetConnectRequestPacket
    NetConnectRequestPacket(int64_t ConnectionTime_ = {}, uint8_t ConnectionNumber_ = {}, ::Array<uint8_t>* TargetAddress_ = {}, LiteNetLib::Utils::NetDataReader* Data_ = {}) noexcept : ConnectionTime{ConnectionTime_}, ConnectionNumber{ConnectionNumber_}, TargetAddress{TargetAddress_}, Data{Data_} {}
    // static field const value: static public System.Int32 HeaderSize
    static constexpr const int HeaderSize = 14;
    // Get static field: static public System.Int32 HeaderSize
    static int _get_HeaderSize();
    // Set static field: static public System.Int32 HeaderSize
    static void _set_HeaderSize(int value);
    // private System.Void .ctor(System.Int64 connectionTime, System.Byte connectionNumber, System.Byte[] targetAddress, LiteNetLib.Utils.NetDataReader data)
    // Offset: 0x1A9B348
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetConnectRequestPacket* New_ctor(int64_t connectionTime, uint8_t connectionNumber, ::Array<uint8_t>* targetAddress, LiteNetLib::Utils::NetDataReader* data) {
      static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConnectRequestPacket::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetConnectRequestPacket*, creationType>(connectionTime, connectionNumber, targetAddress, data)));
    }
    // static public System.Int32 GetProtocolId(LiteNetLib.NetPacket packet)
    // Offset: 0x1A9B3B0
    static int GetProtocolId(LiteNetLib::NetPacket* packet);
    // static public LiteNetLib.NetConnectRequestPacket FromData(LiteNetLib.NetPacket packet)
    // Offset: 0x1A9B428
    static LiteNetLib::NetConnectRequestPacket* FromData(LiteNetLib::NetPacket* packet);
    // static public LiteNetLib.NetPacket Make(LiteNetLib.Utils.NetDataWriter connectData, System.Net.SocketAddress addressBytes, System.Int64 connectId)
    // Offset: 0x1A9B670
    static LiteNetLib::NetPacket* Make(LiteNetLib::Utils::NetDataWriter* connectData, System::Net::SocketAddress* addressBytes, int64_t connectId);
  }; // LiteNetLib.NetConnectRequestPacket
  #pragma pack(pop)
  static check_size<sizeof(NetConnectRequestPacket), 40 + sizeof(LiteNetLib::Utils::NetDataReader*)> __LiteNetLib_NetConnectRequestPacketSizeCheck;
  static_assert(sizeof(NetConnectRequestPacket) == 0x30);
}
DEFINE_IL2CPP_ARG_TYPE(LiteNetLib::NetConnectRequestPacket*, "LiteNetLib", "NetConnectRequestPacket");
