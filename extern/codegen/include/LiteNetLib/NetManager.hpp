// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.INetSocketListener
#include "LiteNetLib/INetSocketListener.hpp"
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
// Including type: System.Threading.ThreadPriority
#include "System/Threading/ThreadPriority.hpp"
// Including type: LiteNetLib.NetEvent
#include "LiteNetLib/NetEvent.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LiteNetLib
namespace LiteNetLib {
  // Forward declaring type: NetPeer
  class NetPeer;
  // Forward declaring type: NetSocket
  class NetSocket;
  // Skipping declaration: DeliveryMethod because it is already included!
  // Forward declaring type: INetEventListener
  class INetEventListener;
  // Forward declaring type: IDeliveryEventListener
  class IDeliveryEventListener;
  // Forward declaring type: ConnectionRequest
  class ConnectionRequest;
  // Forward declaring type: NetPacketPool
  class NetPacketPool;
  // Forward declaring type: NetStatistics
  class NetStatistics;
  // Forward declaring type: NatPunchModule
  class NatPunchModule;
  // Forward declaring type: NetPacket
  class NetPacket;
  // Skipping declaration: DisconnectReason because it is already included!
  // Forward declaring type: NetConnectRequestPacket
  class NetConnectRequestPacket;
  // Forward declaring type: ConnectionState
  struct ConnectionState;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: Thread
  class Thread;
  // Forward declaring type: ReaderWriterLockSlim
  class ReaderWriterLockSlim;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
  // Forward declaring type: Stack`1<T>
  template<typename T>
  class Stack_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
  // Forward declaring type: IPAddress
  class IPAddress;
}
// Forward declaring namespace: LiteNetLib::Layers
namespace LiteNetLib::Layers {
  // Forward declaring type: PacketLayerBase
  class PacketLayerBase;
}
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Skipping declaration: SocketError because it is already included!
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: LiteNetLib
namespace LiteNetLib {
  // Autogenerated type: LiteNetLib.NetManager
  class NetManager : public ::Il2CppObject/*, public LiteNetLib::INetSocketListener, public System::Collections::Generic::IEnumerable_1<LiteNetLib::NetPeer*>*/ {
    public:
    // Nested type: LiteNetLib::NetManager::IPEndPointComparer
    class IPEndPointComparer;
    // Nested type: LiteNetLib::NetManager::NetPeerEnumerator
    struct NetPeerEnumerator;
    // private readonly LiteNetLib.NetSocket _socket
    // Offset: 0x10
    LiteNetLib::NetSocket* socket;
    // private System.Threading.Thread _logicThread
    // Offset: 0x18
    System::Threading::Thread* logicThread;
    // private readonly System.Collections.Generic.Queue`1<LiteNetLib.NetEvent> _netEventsQueue
    // Offset: 0x20
    System::Collections::Generic::Queue_1<LiteNetLib::NetEvent*>* netEventsQueue;
    // private readonly System.Collections.Generic.Stack`1<LiteNetLib.NetEvent> _netEventsPool
    // Offset: 0x28
    System::Collections::Generic::Stack_1<LiteNetLib::NetEvent*>* netEventsPool;
    // private readonly LiteNetLib.INetEventListener _netEventListener
    // Offset: 0x30
    LiteNetLib::INetEventListener* netEventListener;
    // private readonly LiteNetLib.IDeliveryEventListener _deliveryEventListener
    // Offset: 0x38
    LiteNetLib::IDeliveryEventListener* deliveryEventListener;
    // private readonly System.Collections.Generic.Dictionary`2<System.Net.IPEndPoint,LiteNetLib.NetPeer> _peersDict
    // Offset: 0x40
    System::Collections::Generic::Dictionary_2<System::Net::IPEndPoint*, LiteNetLib::NetPeer*>* peersDict;
    // private readonly System.Collections.Generic.Dictionary`2<System.Net.IPEndPoint,LiteNetLib.ConnectionRequest> _requestsDict
    // Offset: 0x48
    System::Collections::Generic::Dictionary_2<System::Net::IPEndPoint*, LiteNetLib::ConnectionRequest*>* requestsDict;
    // private readonly System.Threading.ReaderWriterLockSlim _peersLock
    // Offset: 0x50
    System::Threading::ReaderWriterLockSlim* peersLock;
    // private LiteNetLib.NetPeer _headPeer
    // Offset: 0x58
    LiteNetLib::NetPeer* headPeer;
    // private System.Int32 _connectedPeersCount
    // Offset: 0x60
    int connectedPeersCount;
    // private readonly System.Collections.Generic.List`1<LiteNetLib.NetPeer> _connectedPeerListCache
    // Offset: 0x68
    System::Collections::Generic::List_1<LiteNetLib::NetPeer*>* connectedPeerListCache;
    // private LiteNetLib.NetPeer[] _peersArray
    // Offset: 0x70
    ::Array<LiteNetLib::NetPeer*>* peersArray;
    // readonly LiteNetLib.Layers.PacketLayerBase _extraPacketLayer
    // Offset: 0x78
    LiteNetLib::Layers::PacketLayerBase* extraPacketLayer;
    // private System.Int32 _lastPeerId
    // Offset: 0x80
    int lastPeerId;
    // private readonly System.Collections.Generic.Queue`1<System.Int32> _peerIds
    // Offset: 0x88
    System::Collections::Generic::Queue_1<int>* peerIds;
    // private System.Byte _channelsCount
    // Offset: 0x90
    uint8_t channelsCount;
    // readonly LiteNetLib.NetPacketPool NetPacketPool
    // Offset: 0x98
    LiteNetLib::NetPacketPool* NetPacketPool;
    // public System.Boolean UnconnectedMessagesEnabled
    // Offset: 0xA0
    bool UnconnectedMessagesEnabled;
    // public System.Boolean NatPunchEnabled
    // Offset: 0xA1
    bool NatPunchEnabled;
    // public System.Int32 UpdateTime
    // Offset: 0xA4
    int UpdateTime;
    // public System.Int32 PingInterval
    // Offset: 0xA8
    int PingInterval;
    // public System.Int32 DisconnectTimeout
    // Offset: 0xAC
    int DisconnectTimeout;
    // public System.Boolean SimulatePacketLoss
    // Offset: 0xB0
    bool SimulatePacketLoss;
    // public System.Boolean SimulateLatency
    // Offset: 0xB1
    bool SimulateLatency;
    // public System.Int32 SimulationPacketLossChance
    // Offset: 0xB4
    int SimulationPacketLossChance;
    // public System.Int32 SimulationMinLatency
    // Offset: 0xB8
    int SimulationMinLatency;
    // public System.Int32 SimulationMaxLatency
    // Offset: 0xBC
    int SimulationMaxLatency;
    // public System.Boolean UnsyncedEvents
    // Offset: 0xC0
    bool UnsyncedEvents;
    // public System.Boolean UnsyncedDeliveryEvent
    // Offset: 0xC1
    bool UnsyncedDeliveryEvent;
    // public System.Boolean BroadcastReceiveEnabled
    // Offset: 0xC2
    bool BroadcastReceiveEnabled;
    // public System.Int32 ReconnectDelay
    // Offset: 0xC4
    int ReconnectDelay;
    // public System.Int32 MaxConnectAttempts
    // Offset: 0xC8
    int MaxConnectAttempts;
    // public System.Boolean ReuseAddress
    // Offset: 0xCC
    bool ReuseAddress;
    // public readonly LiteNetLib.NetStatistics Statistics
    // Offset: 0xD0
    LiteNetLib::NetStatistics* Statistics;
    // public System.Boolean EnableStatistics
    // Offset: 0xD8
    bool EnableStatistics;
    // public readonly LiteNetLib.NatPunchModule NatPunchModule
    // Offset: 0xE0
    LiteNetLib::NatPunchModule* NatPunchModule;
    // public System.Boolean AutoRecycle
    // Offset: 0xE8
    bool AutoRecycle;
    // public System.Boolean IPv6Enabled
    // Offset: 0xE9
    bool IPv6Enabled;
    // public System.Threading.ThreadPriority ThreadPriority
    // Offset: 0xEC
    System::Threading::ThreadPriority ThreadPriority;
    // Creating interface conversion operator: operator LiteNetLib::INetSocketListener
    operator LiteNetLib::INetSocketListener() noexcept {
      return *reinterpret_cast<LiteNetLib::INetSocketListener*>(this);
    }
    // Creating interface conversion operator: operator System::Collections::Generic::IEnumerable_1<LiteNetLib::NetPeer*>
    operator System::Collections::Generic::IEnumerable_1<LiteNetLib::NetPeer*>() noexcept {
      return *reinterpret_cast<System::Collections::Generic::IEnumerable_1<LiteNetLib::NetPeer*>*>(this);
    }
    // public System.Boolean get_IsRunning()
    // Offset: 0x1DC6CDC
    bool get_IsRunning();
    // public System.Int32 get_LocalPort()
    // Offset: 0x1DC6D0C
    int get_LocalPort();
    // public LiteNetLib.NetPeer get_FirstPeer()
    // Offset: 0x1DC6D28
    LiteNetLib::NetPeer* get_FirstPeer();
    // public System.Byte get_ChannelsCount()
    // Offset: 0x1DC6D4C
    uint8_t get_ChannelsCount();
    // public System.Void set_ChannelsCount(System.Byte value)
    // Offset: 0x1DC6D54
    void set_ChannelsCount(uint8_t value);
    // public System.Collections.Generic.List`1<LiteNetLib.NetPeer> get_ConnectedPeerList()
    // Offset: 0x1DC6DF0
    System::Collections::Generic::List_1<LiteNetLib::NetPeer*>* get_ConnectedPeerList();
    // public LiteNetLib.NetPeer GetPeerById(System.Int32 id)
    // Offset: 0x1DC6EE8
    LiteNetLib::NetPeer* GetPeerById(int id);
    // public System.Int32 get_ConnectedPeersCount()
    // Offset: 0x1DC6F24
    int get_ConnectedPeersCount();
    // private System.Boolean TryGetPeer(System.Net.IPEndPoint endPoint, out LiteNetLib.NetPeer peer)
    // Offset: 0x1DC6F48
    bool TryGetPeer(System::Net::IPEndPoint* endPoint, LiteNetLib::NetPeer*& peer);
    // private System.Void AddPeer(LiteNetLib.NetPeer peer)
    // Offset: 0x1DC6FE8
    void AddPeer(LiteNetLib::NetPeer* peer);
    // private System.Void RemovePeer(LiteNetLib.NetPeer peer)
    // Offset: 0x1DC7170
    void RemovePeer(LiteNetLib::NetPeer* peer);
    // private System.Void RemovePeerInternal(LiteNetLib.NetPeer peer)
    // Offset: 0x1DC71BC
    void RemovePeerInternal(LiteNetLib::NetPeer* peer);
    // public System.Void .ctor(LiteNetLib.INetEventListener listener, LiteNetLib.Layers.PacketLayerBase extraPacketLayer)
    // Offset: 0x1DC7390
    static NetManager* New_ctor(LiteNetLib::INetEventListener* listener, LiteNetLib::Layers::PacketLayerBase* extraPacketLayer);
    // System.Void ConnectionLatencyUpdated(LiteNetLib.NetPeer fromPeer, System.Int32 latency)
    // Offset: 0x1DC77E0
    void ConnectionLatencyUpdated(LiteNetLib::NetPeer* fromPeer, int latency);
    // System.Void MessageDelivered(LiteNetLib.NetPeer fromPeer, System.Object userData)
    // Offset: 0x1DC7B08
    void MessageDelivered(LiteNetLib::NetPeer* fromPeer, ::Il2CppObject* userData);
    // System.Int32 SendRawAndRecycle(LiteNetLib.NetPacket packet, System.Net.IPEndPoint remoteEndPoint)
    // Offset: 0x1DC7B58
    int SendRawAndRecycle(LiteNetLib::NetPacket* packet, System::Net::IPEndPoint* remoteEndPoint);
    // System.Int32 SendRaw(LiteNetLib.NetPacket packet, System.Net.IPEndPoint remoteEndPoint)
    // Offset: 0x1DC7F84
    int SendRaw(LiteNetLib::NetPacket* packet, System::Net::IPEndPoint* remoteEndPoint);
    // System.Int32 SendRaw(System.Byte[] message, System.Int32 start, System.Int32 length, System.Net.IPEndPoint remoteEndPoint)
    // Offset: 0x1DC7BB0
    int SendRaw(::Array<uint8_t>* message, int start, int length, System::Net::IPEndPoint* remoteEndPoint);
    // System.Void DisconnectPeerForce(LiteNetLib.NetPeer peer, LiteNetLib.DisconnectReason reason, System.Net.Sockets.SocketError socketErrorCode, LiteNetLib.NetPacket eventData)
    // Offset: 0x1DC8138
    void DisconnectPeerForce(LiteNetLib::NetPeer* peer, LiteNetLib::DisconnectReason reason, System::Net::Sockets::SocketError socketErrorCode, LiteNetLib::NetPacket* eventData);
    // private System.Void DisconnectPeer(LiteNetLib.NetPeer peer, LiteNetLib.DisconnectReason reason, System.Net.Sockets.SocketError socketErrorCode, System.Boolean force, System.Byte[] data, System.Int32 start, System.Int32 count, LiteNetLib.NetPacket eventData)
    // Offset: 0x1DC8184
    void DisconnectPeer(LiteNetLib::NetPeer* peer, LiteNetLib::DisconnectReason reason, System::Net::Sockets::SocketError socketErrorCode, bool force, ::Array<uint8_t>* data, int start, int count, LiteNetLib::NetPacket* eventData);
    // private System.Void CreateEvent(LiteNetLib.NetEvent/EType type, LiteNetLib.NetPeer peer, System.Net.IPEndPoint remoteEndPoint, System.Net.Sockets.SocketError errorCode, System.Int32 latency, LiteNetLib.DisconnectReason disconnectReason, LiteNetLib.ConnectionRequest connectionRequest, LiteNetLib.DeliveryMethod deliveryMethod, LiteNetLib.NetPacket readerSource, System.Object userData)
    // Offset: 0x1DC7824
    void CreateEvent(LiteNetLib::NetEvent::EType type, LiteNetLib::NetPeer* peer, System::Net::IPEndPoint* remoteEndPoint, System::Net::Sockets::SocketError errorCode, int latency, LiteNetLib::DisconnectReason disconnectReason, LiteNetLib::ConnectionRequest* connectionRequest, LiteNetLib::DeliveryMethod deliveryMethod, LiteNetLib::NetPacket* readerSource, ::Il2CppObject* userData);
    // private System.Void ProcessEvent(LiteNetLib.NetEvent evt)
    // Offset: 0x1DC85B4
    void ProcessEvent(LiteNetLib::NetEvent* evt);
    // System.Void RecycleEvent(LiteNetLib.NetEvent evt)
    // Offset: 0x1DC8B28
    void RecycleEvent(LiteNetLib::NetEvent* evt);
    // private System.Void UpdateLogic()
    // Offset: 0x1DC8CB0
    void UpdateLogic();
    // LiteNetLib.NetPeer OnConnectionSolved(LiteNetLib.ConnectionRequest request, System.Byte[] rejectData, System.Int32 start, System.Int32 length)
    // Offset: 0x1DBFE04
    LiteNetLib::NetPeer* OnConnectionSolved(LiteNetLib::ConnectionRequest* request, ::Array<uint8_t>* rejectData, int start, int length);
    // private System.Int32 GetNextPeerId()
    // Offset: 0x1DC9ACC
    int GetNextPeerId();
    // private System.Void ProcessConnectRequest(System.Net.IPEndPoint remoteEndPoint, LiteNetLib.NetPeer netPeer, LiteNetLib.NetConnectRequestPacket connRequest)
    // Offset: 0x1DC9FB8
    void ProcessConnectRequest(System::Net::IPEndPoint* remoteEndPoint, LiteNetLib::NetPeer* netPeer, LiteNetLib::NetConnectRequestPacket* connRequest);
    // private System.Void DataReceived(System.Byte[] reusableBuffer, System.Int32 count, System.Net.IPEndPoint remoteEndPoint)
    // Offset: 0x1DC940C
    void DataReceived(::Array<uint8_t>* reusableBuffer, int count, System::Net::IPEndPoint* remoteEndPoint);
    // System.Void CreateReceiveEvent(LiteNetLib.NetPacket packet, LiteNetLib.DeliveryMethod method, LiteNetLib.NetPeer fromPeer)
    // Offset: 0x1DCAD08
    void CreateReceiveEvent(LiteNetLib::NetPacket* packet, LiteNetLib::DeliveryMethod method, LiteNetLib::NetPeer* fromPeer);
    // public System.Void SendToAll(LiteNetLib.Utils.NetDataWriter writer, LiteNetLib.DeliveryMethod options)
    // Offset: 0x1DCAF50
    void SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod options);
    // public System.Void SendToAll(System.Byte[] data, LiteNetLib.DeliveryMethod options)
    // Offset: 0x1DCAF88
    void SendToAll(::Array<uint8_t>* data, LiteNetLib::DeliveryMethod options);
    // public System.Void SendToAll(System.Byte[] data, System.Int32 start, System.Int32 length, LiteNetLib.DeliveryMethod options)
    // Offset: 0x1DCAF7C
    void SendToAll(::Array<uint8_t>* data, int start, int length, LiteNetLib::DeliveryMethod options);
    // public System.Void SendToAll(LiteNetLib.Utils.NetDataWriter writer, System.Byte channelNumber, LiteNetLib.DeliveryMethod options)
    // Offset: 0x1DCB0A0
    void SendToAll(LiteNetLib::Utils::NetDataWriter* writer, uint8_t channelNumber, LiteNetLib::DeliveryMethod options);
    // public System.Void SendToAll(System.Byte[] data, System.Byte channelNumber, LiteNetLib.DeliveryMethod options)
    // Offset: 0x1DCB0CC
    void SendToAll(::Array<uint8_t>* data, uint8_t channelNumber, LiteNetLib::DeliveryMethod options);
    // public System.Void SendToAll(System.Byte[] data, System.Int32 start, System.Int32 length, System.Byte channelNumber, LiteNetLib.DeliveryMethod options)
    // Offset: 0x1DCAFAC
    void SendToAll(::Array<uint8_t>* data, int start, int length, uint8_t channelNumber, LiteNetLib::DeliveryMethod options);
    // public System.Void SendToAll(LiteNetLib.Utils.NetDataWriter writer, LiteNetLib.DeliveryMethod options, LiteNetLib.NetPeer excludePeer)
    // Offset: 0x1DCB0F8
    void SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer);
    // public System.Void SendToAll(System.Byte[] data, LiteNetLib.DeliveryMethod options, LiteNetLib.NetPeer excludePeer)
    // Offset: 0x1DCB228
    void SendToAll(::Array<uint8_t>* data, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer);
    // public System.Void SendToAll(System.Byte[] data, System.Int32 start, System.Int32 length, LiteNetLib.DeliveryMethod options, LiteNetLib.NetPeer excludePeer)
    // Offset: 0x1DCB250
    void SendToAll(::Array<uint8_t>* data, int start, int length, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer);
    // public System.Void SendToAll(LiteNetLib.Utils.NetDataWriter writer, System.Byte channelNumber, LiteNetLib.DeliveryMethod options, LiteNetLib.NetPeer excludePeer)
    // Offset: 0x1DCB260
    void SendToAll(LiteNetLib::Utils::NetDataWriter* writer, uint8_t channelNumber, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer);
    // public System.Void SendToAll(System.Byte[] data, System.Byte channelNumber, LiteNetLib.DeliveryMethod options, LiteNetLib.NetPeer excludePeer)
    // Offset: 0x1DCB290
    void SendToAll(::Array<uint8_t>* data, uint8_t channelNumber, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer);
    // public System.Void SendToAll(System.Byte[] data, System.Int32 start, System.Int32 length, System.Byte channelNumber, LiteNetLib.DeliveryMethod options, LiteNetLib.NetPeer excludePeer)
    // Offset: 0x1DCB128
    void SendToAll(::Array<uint8_t>* data, int start, int length, uint8_t channelNumber, LiteNetLib::DeliveryMethod options, LiteNetLib::NetPeer* excludePeer);
    // public System.Boolean Start()
    // Offset: 0x1DCB2B8
    bool Start();
    // public System.Boolean Start(System.Net.IPAddress addressIPv4, System.Net.IPAddress addressIPv6, System.Int32 port)
    // Offset: 0x1DCB344
    bool Start(System::Net::IPAddress* addressIPv4, System::Net::IPAddress* addressIPv6, int port);
    // public System.Boolean Start(System.String addressIPv4, System.String addressIPv6, System.Int32 port)
    // Offset: 0x1DCB86C
    bool Start(::Il2CppString* addressIPv4, ::Il2CppString* addressIPv6, int port);
    // public System.Boolean Start(System.Int32 port)
    // Offset: 0x1DCB2C0
    bool Start(int port);
    // public System.Boolean SendUnconnectedMessage(System.Byte[] message, System.Net.IPEndPoint remoteEndPoint)
    // Offset: 0x1DCBAD4
    bool SendUnconnectedMessage(::Array<uint8_t>* message, System::Net::IPEndPoint* remoteEndPoint);
    // public System.Boolean SendUnconnectedMessage(LiteNetLib.Utils.NetDataWriter writer, System.Net.IPEndPoint remoteEndPoint)
    // Offset: 0x1DCBB4C
    bool SendUnconnectedMessage(LiteNetLib::Utils::NetDataWriter* writer, System::Net::IPEndPoint* remoteEndPoint);
    // public System.Boolean SendUnconnectedMessage(System.Byte[] message, System.Int32 start, System.Int32 length, System.Net.IPEndPoint remoteEndPoint)
    // Offset: 0x1DCBAF4
    bool SendUnconnectedMessage(::Array<uint8_t>* message, int start, int length, System::Net::IPEndPoint* remoteEndPoint);
    // public System.Boolean SendBroadcast(LiteNetLib.Utils.NetDataWriter writer, System.Int32 port)
    // Offset: 0x1DCBC5C
    bool SendBroadcast(LiteNetLib::Utils::NetDataWriter* writer, int port);
    // public System.Boolean SendBroadcast(System.Byte[] data, System.Int32 port)
    // Offset: 0x1DCBDFC
    bool SendBroadcast(::Array<uint8_t>* data, int port);
    // public System.Boolean SendBroadcast(System.Byte[] data, System.Int32 start, System.Int32 length, System.Int32 port)
    // Offset: 0x1DCBC84
    bool SendBroadcast(::Array<uint8_t>* data, int start, int length, int port);
    // public System.Void Flush()
    // Offset: 0x1DCC18C
    void Flush();
    // public System.Void PollEvents()
    // Offset: 0x1DCC3F0
    void PollEvents();
    // public LiteNetLib.NetPeer Connect(System.String address, System.Int32 port, System.String key)
    // Offset: 0x1DCC564
    LiteNetLib::NetPeer* Connect(::Il2CppString* address, int port, ::Il2CppString* key);
    // public LiteNetLib.NetPeer Connect(System.String address, System.Int32 port, LiteNetLib.Utils.NetDataWriter connectionData)
    // Offset: 0x1DCC620
    LiteNetLib::NetPeer* Connect(::Il2CppString* address, int port, LiteNetLib::Utils::NetDataWriter* connectionData);
    // public LiteNetLib.NetPeer Connect(System.Net.IPEndPoint target, System.String key)
    // Offset: 0x1DCC924
    LiteNetLib::NetPeer* Connect(System::Net::IPEndPoint* target, ::Il2CppString* key);
    // public LiteNetLib.NetPeer Connect(System.Net.IPEndPoint target, LiteNetLib.Utils.NetDataWriter connectionData)
    // Offset: 0x1DCC778
    LiteNetLib::NetPeer* Connect(System::Net::IPEndPoint* target, LiteNetLib::Utils::NetDataWriter* connectionData);
    // public System.Void Stop()
    // Offset: 0x1DCCA88
    void Stop();
    // public System.Void Stop(System.Boolean sendDisconnectMessages)
    // Offset: 0x1DCCA90
    void Stop(bool sendDisconnectMessages);
    // public System.Int32 GetPeersCount(LiteNetLib.ConnectionState peerState)
    // Offset: 0x1DCCE1C
    int GetPeersCount(LiteNetLib::ConnectionState peerState);
    // public System.Void GetPeersNonAlloc(System.Collections.Generic.List`1<LiteNetLib.NetPeer> peers, LiteNetLib.ConnectionState peerState)
    // Offset: 0x1DC6E1C
    void GetPeersNonAlloc(System::Collections::Generic::List_1<LiteNetLib::NetPeer*>* peers, LiteNetLib::ConnectionState peerState);
    // public System.Void DisconnectAll()
    // Offset: 0x1DCCE94
    void DisconnectAll();
    // public System.Void DisconnectAll(System.Byte[] data, System.Int32 start, System.Int32 count)
    // Offset: 0x1DCCEA4
    void DisconnectAll(::Array<uint8_t>* data, int start, int count);
    // public System.Void DisconnectPeerForce(LiteNetLib.NetPeer peer)
    // Offset: 0x1DCCF40
    void DisconnectPeerForce(LiteNetLib::NetPeer* peer);
    // public System.Void DisconnectPeer(LiteNetLib.NetPeer peer)
    // Offset: 0x1DCCF78
    void DisconnectPeer(LiteNetLib::NetPeer* peer);
    // public System.Void DisconnectPeer(LiteNetLib.NetPeer peer, System.Byte[] data)
    // Offset: 0x1DCCFE8
    void DisconnectPeer(LiteNetLib::NetPeer* peer, ::Array<uint8_t>* data);
    // public System.Void DisconnectPeer(LiteNetLib.NetPeer peer, LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0x1DCD028
    void DisconnectPeer(LiteNetLib::NetPeer* peer, LiteNetLib::Utils::NetDataWriter* writer);
    // public System.Void DisconnectPeer(LiteNetLib.NetPeer peer, System.Byte[] data, System.Int32 start, System.Int32 count)
    // Offset: 0x1DCCFB0
    void DisconnectPeer(LiteNetLib::NetPeer* peer, ::Array<uint8_t>* data, int start, int count);
    // public LiteNetLib.NetManager/NetPeerEnumerator GetEnumerator()
    // Offset: 0x1DCD068
    LiteNetLib::NetManager::NetPeerEnumerator GetEnumerator();
    // private System.Void LiteNetLib.INetSocketListener.OnMessageReceived(System.Byte[] data, System.Int32 length, System.Net.Sockets.SocketError errorCode, System.Net.IPEndPoint remoteEndPoint)
    // Offset: 0x1DC914C
    // Implemented from: LiteNetLib.INetSocketListener
    // Base method: System.Void INetSocketListener::OnMessageReceived(System.Byte[] data, System.Int32 length, System.Net.Sockets.SocketError errorCode, System.Net.IPEndPoint remoteEndPoint)
    void LiteNetLib_INetSocketListener_OnMessageReceived(::Array<uint8_t>* data, int length, System::Net::Sockets::SocketError errorCode, System::Net::IPEndPoint* remoteEndPoint);
    // private System.Collections.Generic.IEnumerator`1<LiteNetLib.NetPeer> System.Collections.Generic.IEnumerable<LiteNetLib.NetPeer>.GetEnumerator()
    // Offset: 0x1DCD0EC
    // Implemented from: System.Collections.Generic.IEnumerable`1
    // Base method: System.Collections.Generic.IEnumerator`1<T> IEnumerable_1::GetEnumerator()
    System::Collections::Generic::IEnumerator_1<LiteNetLib::NetPeer*>* System_Collections_Generic_IEnumerable_1_GetEnumerator();
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x1DCD180
    // Implemented from: System.Collections.IEnumerable
    // Base method: System.Collections.IEnumerator IEnumerable::GetEnumerator()
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
  }; // LiteNetLib.NetManager
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(LiteNetLib::NetManager*, "LiteNetLib", "NetManager");
#pragma pack(pop)
