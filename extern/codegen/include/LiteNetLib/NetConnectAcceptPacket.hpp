// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LiteNetLib
namespace LiteNetLib {
  // Forward declaring type: NetPacket
  class NetPacket;
}
// Completed forward declares
// Type namespace: LiteNetLib
namespace LiteNetLib {
  // Size: 0x1A
  #pragma pack(push, 1)
  // Autogenerated type: LiteNetLib.NetConnectAcceptPacket
  // [] Offset: FFFFFFFF
  class NetConnectAcceptPacket : public ::Il2CppObject {
    public:
    // public readonly System.Int64 ConnectionId
    // Size: 0x8
    // Offset: 0x10
    int64_t ConnectionId;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public readonly System.Byte ConnectionNumber
    // Size: 0x1
    // Offset: 0x18
    uint8_t ConnectionNumber;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // public readonly System.Boolean IsReusedPeer
    // Size: 0x1
    // Offset: 0x19
    bool IsReusedPeer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: NetConnectAcceptPacket
    NetConnectAcceptPacket(int64_t ConnectionId_ = {}, uint8_t ConnectionNumber_ = {}, bool IsReusedPeer_ = {}) noexcept : ConnectionId{ConnectionId_}, ConnectionNumber{ConnectionNumber_}, IsReusedPeer{IsReusedPeer_} {}
    // static field const value: static public System.Int32 Size
    static constexpr const int Size = 11;
    // Get static field: static public System.Int32 Size
    static int _get_Size();
    // Set static field: static public System.Int32 Size
    static void _set_Size(int value);
    // private System.Void .ctor(System.Int64 connectionId, System.Byte connectionNumber, System.Boolean isReusedPeer)
    // Offset: 0x1A9B044
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetConnectAcceptPacket* New_ctor(int64_t connectionId, uint8_t connectionNumber, bool isReusedPeer) {
      static auto ___internal__logger = ::Logger::get().WithContext("LiteNetLib::NetConnectAcceptPacket::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetConnectAcceptPacket*, creationType>(connectionId, connectionNumber, isReusedPeer)));
    }
    // static public LiteNetLib.NetConnectAcceptPacket FromData(LiteNetLib.NetPacket packet)
    // Offset: 0x1A9B08C
    static LiteNetLib::NetConnectAcceptPacket* FromData(LiteNetLib::NetPacket* packet);
    // static public LiteNetLib.NetPacket Make(System.Int64 connectId, System.Byte connectNum, System.Boolean reusedPeer)
    // Offset: 0x1A9B19C
    static LiteNetLib::NetPacket* Make(int64_t connectId, uint8_t connectNum, bool reusedPeer);
  }; // LiteNetLib.NetConnectAcceptPacket
  #pragma pack(pop)
  static check_size<sizeof(NetConnectAcceptPacket), 25 + sizeof(bool)> __LiteNetLib_NetConnectAcceptPacketSizeCheck;
  static_assert(sizeof(NetConnectAcceptPacket) == 0x1A);
}
DEFINE_IL2CPP_ARG_TYPE(LiteNetLib::NetConnectAcceptPacket*, "LiteNetLib", "NetConnectAcceptPacket");
