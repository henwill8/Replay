// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: ZenjectException
  class ZenjectException;
}
// Completed forward declares
// Type namespace: ModestTree
namespace ModestTree {
  // Autogenerated type: ModestTree.Assert
  class Assert : public ::Il2CppObject {
    public:
    // static public System.Void That(System.Boolean condition)
    // Offset: 0xD60478
    static void That(bool condition);
    // static public System.Void IsNotEmpty(System.String str)
    // Offset: 0xD60540
    static void IsNotEmpty(::Il2CppString* str);
    // static public System.Void IsEmpty(System.Collections.Generic.IList`1<T> list)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void IsEmpty(System::Collections::Generic::IList_1<T>* list) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod("ModestTree", "Assert", "IsEmpty", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, list));
    }
    // static public System.Void IsEmpty(System.Collections.Generic.IEnumerable`1<T> sequence)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void IsEmpty(System::Collections::Generic::IEnumerable_1<T>* sequence) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod("ModestTree", "Assert", "IsEmpty", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, sequence));
    }
    // static public System.Void IsType(System.Object obj)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void IsType(::Il2CppObject* obj) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod("ModestTree", "Assert", "IsType", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, obj));
    }
    // static public System.Void IsType(System.Object obj, System.String message)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void IsType(::Il2CppObject* obj, ::Il2CppString* message) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod("ModestTree", "Assert", "IsType", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, obj, message));
    }
    // static public System.Void DerivesFrom(System.Type type)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void DerivesFrom(System::Type* type) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod("ModestTree", "Assert", "DerivesFrom", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, type));
    }
    // static public System.Void DerivesFromOrEqual(System.Type type)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void DerivesFromOrEqual(System::Type* type) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod("ModestTree", "Assert", "DerivesFromOrEqual", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, type));
    }
    // static public System.Void DerivesFrom(System.Type childType, System.Type parentType)
    // Offset: 0xD605B0
    static void DerivesFrom(System::Type* childType, System::Type* parentType);
    // static public System.Void DerivesFromOrEqual(System.Type childType, System.Type parentType)
    // Offset: 0xD60828
    static void DerivesFromOrEqual(System::Type* childType, System::Type* parentType);
    // static public System.Void IsEqual(System.Object left, System.Object right)
    // Offset: 0xD60A10
    static void IsEqual(::Il2CppObject* left, ::Il2CppObject* right);
    // static public System.Void IsEqual(System.Object left, System.Object right, System.Func`1<System.String> messageGenerator)
    // Offset: 0xD60B94
    static void IsEqual(::Il2CppObject* left, ::Il2CppObject* right, System::Func_1<::Il2CppString*>* messageGenerator);
    // static public System.Void IsApproximately(System.Single left, System.Single right, System.Single epsilon)
    // Offset: 0xD60CE0
    static void IsApproximately(float left, float right, float epsilon);
    // static public System.Void IsEqual(System.Object left, System.Object right, System.String message)
    // Offset: 0xD60A70
    static void IsEqual(::Il2CppObject* left, ::Il2CppObject* right, ::Il2CppString* message);
    // static public System.Void IsNotEqual(System.Object left, System.Object right)
    // Offset: 0xD60E28
    static void IsNotEqual(::Il2CppObject* left, ::Il2CppObject* right);
    // static public System.Void IsNotEqual(System.Object left, System.Object right, System.Func`1<System.String> messageGenerator)
    // Offset: 0xD60F80
    static void IsNotEqual(::Il2CppObject* left, ::Il2CppObject* right, System::Func_1<::Il2CppString*>* messageGenerator);
    // static public System.Void IsNull(System.Object val)
    // Offset: 0xD610CC
    static void IsNull(::Il2CppObject* val);
    // static public System.Void IsNull(System.Object val, System.String message)
    // Offset: 0xD6116C
    static void IsNull(::Il2CppObject* val, ::Il2CppString* message);
    // static public System.Void IsNull(System.Object val, System.String message, System.Object p1)
    // Offset: 0xD61218
    static void IsNull(::Il2CppObject* val, ::Il2CppString* message, ::Il2CppObject* p1);
    // static public System.Void IsNotNull(System.Object val)
    // Offset: 0xD614F0
    static void IsNotNull(::Il2CppObject* val);
    // static public System.Void IsNotNull(System.Object val, System.String message)
    // Offset: 0xD61554
    static void IsNotNull(::Il2CppObject* val, ::Il2CppString* message);
    // static public System.Void IsNotNull(System.Object val, System.String message, System.Object p1)
    // Offset: 0xD61600
    static void IsNotNull(::Il2CppObject* val, ::Il2CppString* message, ::Il2CppObject* p1);
    // static public System.Void IsNotNull(System.Object val, System.String message, System.Object p1, System.Object p2)
    // Offset: 0xD616F8
    static void IsNotNull(::Il2CppObject* val, ::Il2CppString* message, ::Il2CppObject* p1, ::Il2CppObject* p2);
    // static public System.Void IsNotEmpty(System.Collections.Generic.IEnumerable`1<T> val, System.String message)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void IsNotEmpty(System::Collections::Generic::IEnumerable_1<T>* val, ::Il2CppString* message) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod("ModestTree", "Assert", "IsNotEmpty", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, val, message));
    }
    // static public System.Void IsNotEqual(System.Object left, System.Object right, System.String message)
    // Offset: 0xD60E88
    static void IsNotEqual(::Il2CppObject* left, ::Il2CppObject* right, ::Il2CppString* message);
    // static public System.Void Warn(System.Boolean condition)
    // Offset: 0xD61820
    static void Warn(bool condition);
    // static public System.Void Warn(System.Boolean condition, System.Func`1<System.String> messageGenerator)
    // Offset: 0xD61990
    static void Warn(bool condition, System::Func_1<::Il2CppString*>* messageGenerator);
    // static public System.Void That(System.Boolean condition, System.String message)
    // Offset: 0xD61ABC
    static void That(bool condition, ::Il2CppString* message);
    // static public System.Void That(System.Boolean condition, System.String message, System.Object p1)
    // Offset: 0xD61B38
    static void That(bool condition, ::Il2CppString* message, ::Il2CppObject* p1);
    // static public System.Void That(System.Boolean condition, System.String message, System.Object p1, System.Object p2)
    // Offset: 0xD61C00
    static void That(bool condition, ::Il2CppString* message, ::Il2CppObject* p1, ::Il2CppObject* p2);
    // static public System.Void That(System.Boolean condition, System.String message, System.Object p1, System.Object p2, System.Object p3)
    // Offset: 0xD61CF8
    static void That(bool condition, ::Il2CppString* message, ::Il2CppObject* p1, ::Il2CppObject* p2, ::Il2CppObject* p3);
    // static public System.Void Warn(System.Boolean condition, System.String message)
    // Offset: 0xD61E18
    static void Warn(bool condition, ::Il2CppString* message);
    // static public System.Void Throws(System.Action action)
    // Offset: 0xD61F24
    static void Throws(System::Action* action);
    // static public System.Void Throws(System.Action action)
    // Offset: 0xFFFFFFFF
    template<class TException>
    static void Throws(System::Action* action) {
      static_assert(std::is_convertible_v<TException, System::Exception*>);
      THROW_UNLESS(il2cpp_utils::RunGenericMethod("ModestTree", "Assert", "Throws", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TException>::get()}, action));
    }
    // static public Zenject.ZenjectException CreateException()
    // Offset: 0xD61F74
    static Zenject::ZenjectException* CreateException();
    // static public Zenject.ZenjectException CreateException(System.String message)
    // Offset: 0xD604DC
    static Zenject::ZenjectException* CreateException(::Il2CppString* message);
    // static public Zenject.ZenjectException CreateException(System.String message, params System.Object[] parameters)
    // Offset: 0xD607A4
    static Zenject::ZenjectException* CreateException(::Il2CppString* message, ::Array<::Il2CppObject*>* parameters);
    // Creating initializer_list -> params proxy for: Zenject.ZenjectException CreateException(System.String message, params System.Object[] parameters)
    static Zenject::ZenjectException* CreateException(::Il2CppString* message, std::initializer_list<::Il2CppObject*> parameters);
    // Creating TArgs -> initializer_list proxy for: Zenject.ZenjectException CreateException(System.String message, params System.Object[] parameters)
    template<class ...TParams>
    static Zenject::ZenjectException* CreateException(::Il2CppString* message, TParams&&... parameters) {
      return CreateException(message, {parameters...});
    }
    // static public Zenject.ZenjectException CreateException(System.Exception innerException, System.String message, params System.Object[] parameters)
    // Offset: 0xD61FDC
    static Zenject::ZenjectException* CreateException(System::Exception* innerException, ::Il2CppString* message, ::Array<::Il2CppObject*>* parameters);
    // Creating initializer_list -> params proxy for: Zenject.ZenjectException CreateException(System.Exception innerException, System.String message, params System.Object[] parameters)
    static Zenject::ZenjectException* CreateException(System::Exception* innerException, ::Il2CppString* message, std::initializer_list<::Il2CppObject*> parameters);
    // Creating TArgs -> initializer_list proxy for: Zenject.ZenjectException CreateException(System.Exception innerException, System.String message, params System.Object[] parameters)
    template<class ...TParams>
    static Zenject::ZenjectException* CreateException(System::Exception* innerException, ::Il2CppString* message, TParams&&... parameters) {
      return CreateException(innerException, message, {parameters...});
    }
  }; // ModestTree.Assert
}
DEFINE_IL2CPP_ARG_TYPE(ModestTree::Assert*, "ModestTree", "Assert");
#pragma pack(pop)
