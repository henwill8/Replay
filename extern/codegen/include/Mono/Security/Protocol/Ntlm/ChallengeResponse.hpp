// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Completed includes
// Type namespace: Mono.Security.Protocol.Ntlm
namespace Mono::Security::Protocol::Ntlm {
  // Autogenerated type: Mono.Security.Protocol.Ntlm.ChallengeResponse
  class ChallengeResponse : public ::Il2CppObject/*, public System::IDisposable*/ {
    public:
    // private System.Boolean _disposed
    // Offset: 0x10
    bool disposed;
    // private System.Byte[] _challenge
    // Offset: 0x18
    ::Array<uint8_t>* challenge;
    // private System.Byte[] _lmpwd
    // Offset: 0x20
    ::Array<uint8_t>* lmpwd;
    // private System.Byte[] _ntpwd
    // Offset: 0x28
    ::Array<uint8_t>* ntpwd;
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // Get static field: static private System.Byte[] magic
    static ::Array<uint8_t>* _get_magic();
    // Set static field: static private System.Byte[] magic
    static void _set_magic(::Array<uint8_t>* value);
    // Get static field: static private System.Byte[] nullEncMagic
    static ::Array<uint8_t>* _get_nullEncMagic();
    // Set static field: static private System.Byte[] nullEncMagic
    static void _set_nullEncMagic(::Array<uint8_t>* value);
    // public System.Void .ctor(System.String password, System.Byte[] challenge)
    // Offset: 0x17B8FFC
    static ChallengeResponse* New_ctor(::Il2CppString* password, ::Array<uint8_t>* challenge);
    // public System.Void set_Password(System.String value)
    // Offset: 0x17B9040
    void set_Password(::Il2CppString* value);
    // public System.Void set_Challenge(System.Byte[] value)
    // Offset: 0x17B946C
    void set_Challenge(::Array<uint8_t>* value);
    // public System.Byte[] get_LM()
    // Offset: 0x17B97A8
    ::Array<uint8_t>* get_LM();
    // public System.Byte[] get_NT()
    // Offset: 0x17B9B28
    ::Array<uint8_t>* get_NT();
    // private System.Void Dispose(System.Boolean disposing)
    // Offset: 0x17B9BB4
    void Dispose(bool disposing);
    // private System.Byte[] GetResponse(System.Byte[] pwd)
    // Offset: 0x17B9834
    ::Array<uint8_t>* GetResponse(::Array<uint8_t>* pwd);
    // private System.Byte[] PrepareDESKey(System.Byte[] key56bits, System.Int32 position)
    // Offset: 0x17B9C2C
    ::Array<uint8_t>* PrepareDESKey(::Array<uint8_t>* key56bits, int position);
    // private System.Byte[] PasswordToKey(System.String password, System.Int32 position)
    // Offset: 0x17B965C
    ::Array<uint8_t>* PasswordToKey(::Il2CppString* password, int position);
    // static private System.Void .cctor()
    // Offset: 0x17B9E34
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x17B8F70
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static ChallengeResponse* New_ctor();
    // protected override System.Void Finalize()
    // Offset: 0x17B9574
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
    // public System.Void Dispose()
    // Offset: 0x17B95E8
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
  }; // Mono.Security.Protocol.Ntlm.ChallengeResponse
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Mono::Security::Protocol::Ntlm::ChallengeResponse*, "Mono.Security.Protocol.Ntlm", "ChallengeResponse");
#pragma pack(pop)
