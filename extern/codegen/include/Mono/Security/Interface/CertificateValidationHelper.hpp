// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security::Interface
namespace Mono::Security::Interface {
  // Forward declaring type: ICertificateValidator2
  class ICertificateValidator2;
  // Forward declaring type: MonoTlsSettings
  class MonoTlsSettings;
  // Forward declaring type: MonoTlsProvider
  class MonoTlsProvider;
}
// Completed forward declares
// Type namespace: Mono.Security.Interface
namespace Mono::Security::Interface {
  // Autogenerated type: Mono.Security.Interface.CertificateValidationHelper
  class CertificateValidationHelper : public ::Il2CppObject {
    public:
    // Get static field: static private readonly System.Boolean noX509Chain
    static bool _get_noX509Chain();
    // Set static field: static private readonly System.Boolean noX509Chain
    static void _set_noX509Chain(bool value);
    // Get static field: static private readonly System.Boolean supportsTrustAnchors
    static bool _get_supportsTrustAnchors();
    // Set static field: static private readonly System.Boolean supportsTrustAnchors
    static void _set_supportsTrustAnchors(bool value);
    // static private System.Void .cctor()
    // Offset: 0x17B763C
    static void _cctor();
    // static Mono.Security.Interface.ICertificateValidator2 GetInternalValidator(Mono.Security.Interface.MonoTlsSettings settings, Mono.Security.Interface.MonoTlsProvider provider)
    // Offset: 0x17B76B0
    static Mono::Security::Interface::ICertificateValidator2* GetInternalValidator(Mono::Security::Interface::MonoTlsSettings* settings, Mono::Security::Interface::MonoTlsProvider* provider);
  }; // Mono.Security.Interface.CertificateValidationHelper
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Mono::Security::Interface::CertificateValidationHelper*, "Mono.Security.Interface", "CertificateValidationHelper");
#pragma pack(pop)
