// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Security.X509.PKCS12
#include "Mono/Security/X509/PKCS12.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Mono.Security.X509
namespace Mono::Security::X509 {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.X509.PKCS12/DeriveBytes
  // [] Offset: FFFFFFFF
  class PKCS12::DeriveBytes : public ::Il2CppObject {
    public:
    // private System.String _hashName
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* hashName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Int32 _iterations
    // Size: 0x4
    // Offset: 0x18
    int iterations;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: iterations and: password
    char __padding1[0x4] = {};
    // private System.Byte[] _password
    // Size: 0x8
    // Offset: 0x20
    ::Array<uint8_t>* password;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Byte[] _salt
    // Size: 0x8
    // Offset: 0x28
    ::Array<uint8_t>* salt;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // Creating value type constructor for type: DeriveBytes
    DeriveBytes(::Il2CppString* hashName_ = {}, int iterations_ = {}, ::Array<uint8_t>* password_ = {}, ::Array<uint8_t>* salt_ = {}) noexcept : hashName{hashName_}, iterations{iterations_}, password{password_}, salt{salt_} {}
    // Get static field: static private System.Byte[] keyDiversifier
    static ::Array<uint8_t>* _get_keyDiversifier();
    // Set static field: static private System.Byte[] keyDiversifier
    static void _set_keyDiversifier(::Array<uint8_t>* value);
    // Get static field: static private System.Byte[] ivDiversifier
    static ::Array<uint8_t>* _get_ivDiversifier();
    // Set static field: static private System.Byte[] ivDiversifier
    static void _set_ivDiversifier(::Array<uint8_t>* value);
    // Get static field: static private System.Byte[] macDiversifier
    static ::Array<uint8_t>* _get_macDiversifier();
    // Set static field: static private System.Byte[] macDiversifier
    static void _set_macDiversifier(::Array<uint8_t>* value);
    // public System.Void set_HashName(System.String value)
    // Offset: 0x228EA1C
    void set_HashName(::Il2CppString* value);
    // public System.Void set_IterationCount(System.Int32 value)
    // Offset: 0x228EA24
    void set_IterationCount(int value);
    // public System.Void set_Password(System.Byte[] value)
    // Offset: 0x228EA2C
    void set_Password(::Array<uint8_t>* value);
    // public System.Void set_Salt(System.Byte[] value)
    // Offset: 0x228EAE4
    void set_Salt(::Array<uint8_t>* value);
    // private System.Void Adjust(System.Byte[] a, System.Int32 aOff, System.Byte[] b)
    // Offset: 0x228EB8C
    void Adjust(::Array<uint8_t>* a, int aOff, ::Array<uint8_t>* b);
    // private System.Byte[] Derive(System.Byte[] diversifier, System.Int32 n)
    // Offset: 0x228EC74
    ::Array<uint8_t>* Derive(::Array<uint8_t>* diversifier, int n);
    // public System.Byte[] DeriveKey(System.Int32 size)
    // Offset: 0x228F0C0
    ::Array<uint8_t>* DeriveKey(int size);
    // public System.Byte[] DeriveIV(System.Int32 size)
    // Offset: 0x228F140
    ::Array<uint8_t>* DeriveIV(int size);
    // public System.Byte[] DeriveMAC(System.Int32 size)
    // Offset: 0x228F1C0
    ::Array<uint8_t>* DeriveMAC(int size);
    // static private System.Void .cctor()
    // Offset: 0x228F240
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x228EA14
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PKCS12::DeriveBytes* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Mono::Security::X509::PKCS12::DeriveBytes::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PKCS12::DeriveBytes*, creationType>()));
    }
  }; // Mono.Security.X509.PKCS12/DeriveBytes
  #pragma pack(pop)
  static check_size<sizeof(PKCS12::DeriveBytes), 40 + sizeof(::Array<uint8_t>*)> __Mono_Security_X509_PKCS12_DeriveBytesSizeCheck;
  static_assert(sizeof(PKCS12::DeriveBytes) == 0x30);
}
DEFINE_IL2CPP_ARG_TYPE(Mono::Security::X509::PKCS12::DeriveBytes*, "Mono.Security.X509", "PKCS12/DeriveBytes");
