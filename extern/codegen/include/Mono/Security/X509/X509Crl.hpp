// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security::X509
namespace Mono::Security::X509 {
  // Forward declaring type: X509ExtensionCollection
  class X509ExtensionCollection;
  // Forward declaring type: X509Certificate
  class X509Certificate;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: DSA
  class DSA;
  // Forward declaring type: RSA
  class RSA;
  // Forward declaring type: AsymmetricAlgorithm
  class AsymmetricAlgorithm;
}
// Completed forward declares
// Type namespace: Mono.Security.X509
namespace Mono::Security::X509 {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.X509.X509Crl
  // [] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: CB4960
  class X509Crl : public ::Il2CppObject {
    public:
    // Nested type: Mono::Security::X509::X509Crl::X509CrlEntry
    class X509CrlEntry;
    // private System.String issuer
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* issuer;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Byte version
    // Size: 0x1
    // Offset: 0x18
    uint8_t version;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: version and: thisUpdate
    char __padding1[0x7] = {};
    // private System.DateTime thisUpdate
    // Size: 0x8
    // Offset: 0x20
    System::DateTime thisUpdate;
    // Field size check
    static_assert(sizeof(System::DateTime) == 0x8);
    // private System.DateTime nextUpdate
    // Size: 0x8
    // Offset: 0x28
    System::DateTime nextUpdate;
    // Field size check
    static_assert(sizeof(System::DateTime) == 0x8);
    // private System.Collections.ArrayList entries
    // Size: 0x8
    // Offset: 0x30
    System::Collections::ArrayList* entries;
    // Field size check
    static_assert(sizeof(System::Collections::ArrayList*) == 0x8);
    // private System.String signatureOID
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppString* signatureOID;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Byte[] signature
    // Size: 0x8
    // Offset: 0x40
    ::Array<uint8_t>* signature;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private Mono.Security.X509.X509ExtensionCollection extensions
    // Size: 0x8
    // Offset: 0x48
    Mono::Security::X509::X509ExtensionCollection* extensions;
    // Field size check
    static_assert(sizeof(Mono::Security::X509::X509ExtensionCollection*) == 0x8);
    // private System.Byte[] encoded
    // Size: 0x8
    // Offset: 0x50
    ::Array<uint8_t>* encoded;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Byte[] hash_value
    // Size: 0x8
    // Offset: 0x58
    ::Array<uint8_t>* hash_value;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // Creating value type constructor for type: X509Crl
    X509Crl(::Il2CppString* issuer_ = {}, uint8_t version_ = {}, System::DateTime thisUpdate_ = {}, System::DateTime nextUpdate_ = {}, System::Collections::ArrayList* entries_ = {}, ::Il2CppString* signatureOID_ = {}, ::Array<uint8_t>* signature_ = {}, Mono::Security::X509::X509ExtensionCollection* extensions_ = {}, ::Array<uint8_t>* encoded_ = {}, ::Array<uint8_t>* hash_value_ = {}) noexcept : issuer{issuer_}, version{version_}, thisUpdate{thisUpdate_}, nextUpdate{nextUpdate_}, entries{entries_}, signatureOID{signatureOID_}, signature{signature_}, extensions{extensions_}, encoded{encoded_}, hash_value{hash_value_} {}
    // public System.Void .ctor(System.Byte[] crl)
    // Offset: 0x2292880
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static X509Crl* New_ctor(::Array<uint8_t>* crl) {
      static auto ___internal__logger = ::Logger::get().WithContext("Mono::Security::X509::X509Crl::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<X509Crl*, creationType>(crl)));
    }
    // private System.Void Parse(System.Byte[] crl)
    // Offset: 0x2292968
    void Parse(::Array<uint8_t>* crl);
    // public Mono.Security.X509.X509ExtensionCollection get_Extensions()
    // Offset: 0x2293134
    Mono::Security::X509::X509ExtensionCollection* get_Extensions();
    // public System.Byte[] get_Hash()
    // Offset: 0x229313C
    ::Array<uint8_t>* get_Hash();
    // public System.String get_IssuerName()
    // Offset: 0x22932F4
    ::Il2CppString* get_IssuerName();
    // public System.DateTime get_NextUpdate()
    // Offset: 0x22932FC
    System::DateTime get_NextUpdate();
    // private System.Boolean Compare(System.Byte[] array1, System.Byte[] array2)
    // Offset: 0x2293304
    bool Compare(::Array<uint8_t>* array1, ::Array<uint8_t>* array2);
    // public Mono.Security.X509.X509Crl/X509CrlEntry GetCrlEntry(Mono.Security.X509.X509Certificate x509)
    // Offset: 0x2293384
    Mono::Security::X509::X509Crl::X509CrlEntry* GetCrlEntry(Mono::Security::X509::X509Certificate* x509);
    // public Mono.Security.X509.X509Crl/X509CrlEntry GetCrlEntry(System.Byte[] serialNumber)
    // Offset: 0x229342C
    Mono::Security::X509::X509Crl::X509CrlEntry* GetCrlEntry(::Array<uint8_t>* serialNumber);
    // System.Boolean VerifySignature(System.Security.Cryptography.DSA dsa)
    // Offset: 0x22935F4
    bool VerifySignature(System::Security::Cryptography::DSA* dsa);
    // System.Boolean VerifySignature(System.Security.Cryptography.RSA rsa)
    // Offset: 0x2293890
    bool VerifySignature(System::Security::Cryptography::RSA* rsa);
    // public System.Boolean VerifySignature(System.Security.Cryptography.AsymmetricAlgorithm aa)
    // Offset: 0x2293968
    bool VerifySignature(System::Security::Cryptography::AsymmetricAlgorithm* aa);
  }; // Mono.Security.X509.X509Crl
  #pragma pack(pop)
  static check_size<sizeof(X509Crl), 88 + sizeof(::Array<uint8_t>*)> __Mono_Security_X509_X509CrlSizeCheck;
  static_assert(sizeof(X509Crl) == 0x60);
}
DEFINE_IL2CPP_ARG_TYPE(Mono::Security::X509::X509Crl*, "Mono.Security.X509", "X509Crl");
