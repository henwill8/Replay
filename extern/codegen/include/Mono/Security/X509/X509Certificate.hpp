// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security
namespace Mono::Security {
  // Forward declaring type: ASN1
  class ASN1;
}
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: RSA
  class RSA;
  // Forward declaring type: DSA
  class DSA;
  // Forward declaring type: AsymmetricAlgorithm
  class AsymmetricAlgorithm;
}
// Forward declaring namespace: Mono::Security::X509
namespace Mono::Security::X509 {
  // Forward declaring type: X509ExtensionCollection
  class X509ExtensionCollection;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
  // Forward declaring type: StreamingContext
  struct StreamingContext;
}
// Completed forward declares
// Type namespace: Mono.Security.X509
namespace Mono::Security::X509 {
  // Autogenerated type: Mono.Security.X509.X509Certificate
  class X509Certificate : public ::Il2CppObject/*, public System::Runtime::Serialization::ISerializable*/ {
    public:
    // private Mono.Security.ASN1 decoder
    // Offset: 0x10
    Mono::Security::ASN1* decoder;
    // private System.Byte[] m_encodedcert
    // Offset: 0x18
    ::Array<uint8_t>* m_encodedcert;
    // private System.DateTime m_from
    // Offset: 0x20
    System::DateTime m_from;
    // private System.DateTime m_until
    // Offset: 0x28
    System::DateTime m_until;
    // private Mono.Security.ASN1 issuer
    // Offset: 0x30
    Mono::Security::ASN1* issuer;
    // private System.String m_issuername
    // Offset: 0x38
    ::Il2CppString* m_issuername;
    // private System.String m_keyalgo
    // Offset: 0x40
    ::Il2CppString* m_keyalgo;
    // private System.Byte[] m_keyalgoparams
    // Offset: 0x48
    ::Array<uint8_t>* m_keyalgoparams;
    // private Mono.Security.ASN1 subject
    // Offset: 0x50
    Mono::Security::ASN1* subject;
    // private System.String m_subject
    // Offset: 0x58
    ::Il2CppString* m_subject;
    // private System.Byte[] m_publickey
    // Offset: 0x60
    ::Array<uint8_t>* m_publickey;
    // private System.Byte[] signature
    // Offset: 0x68
    ::Array<uint8_t>* signature;
    // private System.String m_signaturealgo
    // Offset: 0x70
    ::Il2CppString* m_signaturealgo;
    // private System.Byte[] m_signaturealgoparams
    // Offset: 0x78
    ::Array<uint8_t>* m_signaturealgoparams;
    // private System.Byte[] certhash
    // Offset: 0x80
    ::Array<uint8_t>* certhash;
    // private System.Security.Cryptography.RSA _rsa
    // Offset: 0x88
    System::Security::Cryptography::RSA* rsa;
    // private System.Security.Cryptography.DSA _dsa
    // Offset: 0x90
    System::Security::Cryptography::DSA* dsa;
    // private System.Int32 version
    // Offset: 0x98
    int version;
    // private System.Byte[] serialnumber
    // Offset: 0xA0
    ::Array<uint8_t>* serialnumber;
    // private System.Byte[] issuerUniqueID
    // Offset: 0xA8
    ::Array<uint8_t>* issuerUniqueID;
    // private System.Byte[] subjectUniqueID
    // Offset: 0xB0
    ::Array<uint8_t>* subjectUniqueID;
    // private Mono.Security.X509.X509ExtensionCollection extensions
    // Offset: 0xB8
    Mono::Security::X509::X509ExtensionCollection* extensions;
    // Creating interface conversion operator: operator System::Runtime::Serialization::ISerializable
    operator System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<System::Runtime::Serialization::ISerializable*>(this);
    }
    // Get static field: static private System.String encoding_error
    static ::Il2CppString* _get_encoding_error();
    // Set static field: static private System.String encoding_error
    static void _set_encoding_error(::Il2CppString* value);
    // private System.Void Parse(System.Byte[] data)
    // Offset: 0x19C1848
    void Parse(::Array<uint8_t>* data);
    // public System.Void .ctor(System.Byte[] data)
    // Offset: 0x19C2390
    static X509Certificate* New_ctor(::Array<uint8_t>* data);
    // private System.Byte[] GetUnsignedBigInteger(System.Byte[] integer)
    // Offset: 0x19C2658
    ::Array<uint8_t>* GetUnsignedBigInteger(::Array<uint8_t>* integer);
    // public System.Security.Cryptography.DSA get_DSA()
    // Offset: 0x19C2704
    System::Security::Cryptography::DSA* get_DSA();
    // public System.Void set_DSA(System.Security.Cryptography.DSA value)
    // Offset: 0x19C2A0C
    void set_DSA(System::Security::Cryptography::DSA* value);
    // public Mono.Security.X509.X509ExtensionCollection get_Extensions()
    // Offset: 0x19C2A50
    Mono::Security::X509::X509ExtensionCollection* get_Extensions();
    // public System.Byte[] get_Hash()
    // Offset: 0x19C2A58
    ::Array<uint8_t>* get_Hash();
    // public System.String get_IssuerName()
    // Offset: 0x19C2C80
    ::Il2CppString* get_IssuerName();
    // public System.String get_KeyAlgorithm()
    // Offset: 0x19C2C88
    ::Il2CppString* get_KeyAlgorithm();
    // public System.Byte[] get_KeyAlgorithmParameters()
    // Offset: 0x19C2C90
    ::Array<uint8_t>* get_KeyAlgorithmParameters();
    // public System.Void set_KeyAlgorithmParameters(System.Byte[] value)
    // Offset: 0x19C2D0C
    void set_KeyAlgorithmParameters(::Array<uint8_t>* value);
    // public System.Byte[] get_PublicKey()
    // Offset: 0x19C2D14
    ::Array<uint8_t>* get_PublicKey();
    // public System.Security.Cryptography.RSA get_RSA()
    // Offset: 0x19C2D90
    System::Security::Cryptography::RSA* get_RSA();
    // public System.Void set_RSA(System.Security.Cryptography.RSA value)
    // Offset: 0x19C2F60
    void set_RSA(System::Security::Cryptography::RSA* value);
    // public System.Byte[] get_RawData()
    // Offset: 0x19C2FA0
    ::Array<uint8_t>* get_RawData();
    // public System.Byte[] get_SerialNumber()
    // Offset: 0x19C301C
    ::Array<uint8_t>* get_SerialNumber();
    // public System.Byte[] get_Signature()
    // Offset: 0x19C3098
    ::Array<uint8_t>* get_Signature();
    // public System.String get_SignatureAlgorithm()
    // Offset: 0x19C345C
    ::Il2CppString* get_SignatureAlgorithm();
    // public System.String get_SubjectName()
    // Offset: 0x19C3464
    ::Il2CppString* get_SubjectName();
    // public System.DateTime get_ValidFrom()
    // Offset: 0x19C346C
    System::DateTime get_ValidFrom();
    // public System.DateTime get_ValidUntil()
    // Offset: 0x19C3474
    System::DateTime get_ValidUntil();
    // public System.Int32 get_Version()
    // Offset: 0x19C347C
    int get_Version();
    // System.Boolean VerifySignature(System.Security.Cryptography.DSA dsa)
    // Offset: 0x19C3484
    bool VerifySignature(System::Security::Cryptography::DSA* dsa);
    // System.Boolean VerifySignature(System.Security.Cryptography.RSA rsa)
    // Offset: 0x19C3548
    bool VerifySignature(System::Security::Cryptography::RSA* rsa);
    // public System.Boolean VerifySignature(System.Security.Cryptography.AsymmetricAlgorithm aa)
    // Offset: 0x19C3668
    bool VerifySignature(System::Security::Cryptography::AsymmetricAlgorithm* aa);
    // public Mono.Security.ASN1 GetIssuerName()
    // Offset: 0x19C37E4
    Mono::Security::ASN1* GetIssuerName();
    // public Mono.Security.ASN1 GetSubjectName()
    // Offset: 0x19C37EC
    Mono::Security::ASN1* GetSubjectName();
    // static private System.Byte[] PEM(System.String type, System.Byte[] data)
    // Offset: 0x19C252C
    static ::Array<uint8_t>* PEM(::Il2CppString* type, ::Array<uint8_t>* data);
    // static private System.Void .cctor()
    // Offset: 0x19C3860
    static void _cctor();
    // public System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x19C37F4
    // Implemented from: System.Runtime.Serialization.ISerializable
    // Base method: System.Void ISerializable::GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
    // Creating proxy method: System_Runtime_Serialization_ISerializable_GetObjectData
    // Maps to method: GetObjectData
    void System_Runtime_Serialization_ISerializable_GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
  }; // Mono.Security.X509.X509Certificate
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Mono::Security::X509::X509Certificate*, "Mono.Security.X509", "X509Certificate");
#pragma pack(pop)
