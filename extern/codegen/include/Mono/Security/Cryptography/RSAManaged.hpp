// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.RSA
#include "System/Security/Cryptography/RSA.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security::Cryptography
namespace Mono::Security::Cryptography {
}
// Forward declaring namespace: Mono::Math
namespace Mono::Math {
  // Forward declaring type: BigInteger
  class BigInteger;
}
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: RSAParameters
  struct RSAParameters;
}
// Completed forward declares
// Type namespace: Mono.Security.Cryptography
namespace Mono::Security::Cryptography {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Security.Cryptography.RSAManaged
  // [] Offset: FFFFFFFF
  class RSAManaged : public System::Security::Cryptography::RSA {
    public:
    // Nested type: Mono::Security::Cryptography::RSAManaged::KeyGeneratedEventHandler
    class KeyGeneratedEventHandler;
    // private System.Boolean isCRTpossible
    // Size: 0x1
    // Offset: 0x20
    bool isCRTpossible;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean keypairGenerated
    // Size: 0x1
    // Offset: 0x21
    bool keypairGenerated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_disposed
    // Size: 0x1
    // Offset: 0x22
    bool m_disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_disposed and: d
    char __padding2[0x5] = {};
    // private Mono.Math.BigInteger d
    // Size: 0x8
    // Offset: 0x28
    Mono::Math::BigInteger* d;
    // Field size check
    static_assert(sizeof(Mono::Math::BigInteger*) == 0x8);
    // private Mono.Math.BigInteger p
    // Size: 0x8
    // Offset: 0x30
    Mono::Math::BigInteger* p;
    // Field size check
    static_assert(sizeof(Mono::Math::BigInteger*) == 0x8);
    // private Mono.Math.BigInteger q
    // Size: 0x8
    // Offset: 0x38
    Mono::Math::BigInteger* q;
    // Field size check
    static_assert(sizeof(Mono::Math::BigInteger*) == 0x8);
    // private Mono.Math.BigInteger dp
    // Size: 0x8
    // Offset: 0x40
    Mono::Math::BigInteger* dp;
    // Field size check
    static_assert(sizeof(Mono::Math::BigInteger*) == 0x8);
    // private Mono.Math.BigInteger dq
    // Size: 0x8
    // Offset: 0x48
    Mono::Math::BigInteger* dq;
    // Field size check
    static_assert(sizeof(Mono::Math::BigInteger*) == 0x8);
    // private Mono.Math.BigInteger qInv
    // Size: 0x8
    // Offset: 0x50
    Mono::Math::BigInteger* qInv;
    // Field size check
    static_assert(sizeof(Mono::Math::BigInteger*) == 0x8);
    // private Mono.Math.BigInteger n
    // Size: 0x8
    // Offset: 0x58
    Mono::Math::BigInteger* n;
    // Field size check
    static_assert(sizeof(Mono::Math::BigInteger*) == 0x8);
    // private Mono.Math.BigInteger e
    // Size: 0x8
    // Offset: 0x60
    Mono::Math::BigInteger* e;
    // Field size check
    static_assert(sizeof(Mono::Math::BigInteger*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xCB4B54
    // private Mono.Security.Cryptography.RSAManaged/KeyGeneratedEventHandler KeyGenerated
    // Size: 0x8
    // Offset: 0x68
    Mono::Security::Cryptography::RSAManaged::KeyGeneratedEventHandler* KeyGenerated;
    // Field size check
    static_assert(sizeof(Mono::Security::Cryptography::RSAManaged::KeyGeneratedEventHandler*) == 0x8);
    // Creating value type constructor for type: RSAManaged
    RSAManaged(bool isCRTpossible_ = {}, bool keypairGenerated_ = {}, bool m_disposed_ = {}, Mono::Math::BigInteger* d_ = {}, Mono::Math::BigInteger* p_ = {}, Mono::Math::BigInteger* q_ = {}, Mono::Math::BigInteger* dp_ = {}, Mono::Math::BigInteger* dq_ = {}, Mono::Math::BigInteger* qInv_ = {}, Mono::Math::BigInteger* n_ = {}, Mono::Math::BigInteger* e_ = {}, Mono::Security::Cryptography::RSAManaged::KeyGeneratedEventHandler* KeyGenerated_ = {}) noexcept : isCRTpossible{isCRTpossible_}, keypairGenerated{keypairGenerated_}, m_disposed{m_disposed_}, d{d_}, p{p_}, q{q_}, dp{dp_}, dq{dq_}, qInv{qInv_}, n{n_}, e{e_}, KeyGenerated{KeyGenerated_} {}
    // private System.Void GenerateKeyPair()
    // Offset: 0x1BEEC78
    void GenerateKeyPair();
    // public System.Boolean get_PublicOnly()
    // Offset: 0x1BEF3C4
    bool get_PublicOnly();
    // private System.Byte[] GetPaddedValue(Mono.Math.BigInteger value, System.Int32 length)
    // Offset: 0x1BEF830
    ::Array<uint8_t>* GetPaddedValue(Mono::Math::BigInteger* value, int length);
    // public override System.Security.Cryptography.RSAParameters ExportParameters(System.Boolean includePrivateParameters)
    // Offset: 0x1BEF488
    // Implemented from: System.Security.Cryptography.RSA
    // Base method: System.Security.Cryptography.RSAParameters RSA::ExportParameters(System.Boolean includePrivateParameters)
    System::Security::Cryptography::RSAParameters ExportParameters(bool includePrivateParameters);
    // public override System.Void ImportParameters(System.Security.Cryptography.RSAParameters parameters)
    // Offset: 0x1BEF8F0
    // Implemented from: System.Security.Cryptography.RSA
    // Base method: System.Void RSA::ImportParameters(System.Security.Cryptography.RSAParameters parameters)
    void ImportParameters(System::Security::Cryptography::RSAParameters parameters);
  }; // Mono.Security.Cryptography.RSAManaged
  #pragma pack(pop)
  static check_size<sizeof(RSAManaged), 104 + sizeof(Mono::Security::Cryptography::RSAManaged::KeyGeneratedEventHandler*)> __Mono_Security_Cryptography_RSAManagedSizeCheck;
  static_assert(sizeof(RSAManaged) == 0x70);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Mono::Security::Cryptography::RSAManaged*, "Mono.Security.Cryptography", "RSAManaged");
