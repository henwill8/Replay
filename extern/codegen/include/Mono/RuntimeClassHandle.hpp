// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Mono.RuntimeStructs
#include "Mono/RuntimeStructs.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: RuntimeTypeHandle
  struct RuntimeTypeHandle;
}
// Completed forward declares
// Type namespace: Mono
namespace Mono {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: Mono.RuntimeClassHandle
  // [] Offset: FFFFFFFF
  struct RuntimeClassHandle/*, public System::ValueType*/ {
    public:
    // private Mono.RuntimeStructs/MonoClass* value
    // Size: 0x8
    // Offset: 0x0
    Mono::RuntimeStructs::MonoClass* value;
    // Field size check
    static_assert(sizeof(Mono::RuntimeStructs::MonoClass*) == 0x8);
    // Creating value type constructor for type: RuntimeClassHandle
    constexpr RuntimeClassHandle(Mono::RuntimeStructs::MonoClass* value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating conversion operator: operator Mono::RuntimeStructs::MonoClass*
    constexpr operator Mono::RuntimeStructs::MonoClass*() const noexcept {
      return value;
    }
    // System.Void .ctor(Mono.RuntimeStructs/MonoClass* value)
    // Offset: 0xE0EAF8
    // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    // ABORTED: conflicts with another method.  RuntimeClassHandle(Mono::RuntimeStructs::MonoClass* value)
    // System.Void .ctor(System.IntPtr ptr)
    // Offset: 0xE0EB00
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    RuntimeClassHandle(System::IntPtr ptr) {
      static auto ___internal__logger = ::Logger::get().WithContext("Mono::RuntimeClassHandle::.ctor");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ptr)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, ptr);
    }
    // Mono.RuntimeStructs/MonoClass* get_Value()
    // Offset: 0xE0EB2C
    Mono::RuntimeStructs::MonoClass* get_Value();
    // static System.IntPtr GetTypeFromClass(Mono.RuntimeStructs/MonoClass* klass)
    // Offset: 0x18944B4
    static System::IntPtr GetTypeFromClass(Mono::RuntimeStructs::MonoClass* klass);
    // System.RuntimeTypeHandle GetTypeHandle()
    // Offset: 0xE0EB70
    System::RuntimeTypeHandle GetTypeHandle();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xE0EB34
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xE0EB3C
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // Mono.RuntimeClassHandle
  #pragma pack(pop)
  static check_size<sizeof(RuntimeClassHandle), 0 + sizeof(Mono::RuntimeStructs::MonoClass*)> __Mono_RuntimeClassHandleSizeCheck;
  static_assert(sizeof(RuntimeClassHandle) == 0x8);
}
DEFINE_IL2CPP_ARG_TYPE(Mono::RuntimeClassHandle, "Mono", "RuntimeClassHandle");
