// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Security.Authentication.SslProtocols
#include "System/Security/Authentication/SslProtocols.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Net::Security
namespace Mono::Net::Security {
  // Forward declaring type: MobileAuthenticatedStream
  class MobileAuthenticatedStream;
}
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509Certificate
  class X509Certificate;
  // Forward declaring type: X509CertificateCollection
  class X509CertificateCollection;
  // Forward declaring type: X509Chain
  class X509Chain;
}
// Forward declaring namespace: Mono::Security::Interface
namespace Mono::Security::Interface {
  // Forward declaring type: ICertificateValidator2
  class ICertificateValidator2;
  // Forward declaring type: MonoTlsSettings
  class MonoTlsSettings;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: ValueTuple`2<T1, T2>
  template<typename T1, typename T2>
  struct ValueTuple_2;
}
// Completed forward declares
// Type namespace: Mono.Net.Security
namespace Mono::Net::Security {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Net.Security.MobileTlsContext
  // [] Offset: FFFFFFFF
  class MobileTlsContext : public ::Il2CppObject/*, public System::IDisposable*/ {
    public:
    // private Mono.Net.Security.MobileAuthenticatedStream parent
    // Size: 0x8
    // Offset: 0x10
    Mono::Net::Security::MobileAuthenticatedStream* parent;
    // Field size check
    static_assert(sizeof(Mono::Net::Security::MobileAuthenticatedStream*) == 0x8);
    // private System.Boolean serverMode
    // Size: 0x1
    // Offset: 0x18
    bool serverMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: serverMode and: targetHost
    char __padding1[0x7] = {};
    // private System.String targetHost
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppString* targetHost;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String serverName
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppString* serverName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Security.Authentication.SslProtocols enabledProtocols
    // Size: 0x4
    // Offset: 0x30
    System::Security::Authentication::SslProtocols enabledProtocols;
    // Field size check
    static_assert(sizeof(System::Security::Authentication::SslProtocols) == 0x4);
    // Padding between fields: enabledProtocols and: serverCertificate
    char __padding4[0x4] = {};
    // private System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate
    // Size: 0x8
    // Offset: 0x38
    System::Security::Cryptography::X509Certificates::X509Certificate* serverCertificate;
    // Field size check
    static_assert(sizeof(System::Security::Cryptography::X509Certificates::X509Certificate*) == 0x8);
    // private System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates
    // Size: 0x8
    // Offset: 0x40
    System::Security::Cryptography::X509Certificates::X509CertificateCollection* clientCertificates;
    // Field size check
    static_assert(sizeof(System::Security::Cryptography::X509Certificates::X509CertificateCollection*) == 0x8);
    // private System.Boolean askForClientCert
    // Size: 0x1
    // Offset: 0x48
    bool askForClientCert;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: askForClientCert and: certificateValidator
    char __padding7[0x7] = {};
    // private Mono.Security.Interface.ICertificateValidator2 certificateValidator
    // Size: 0x8
    // Offset: 0x50
    Mono::Security::Interface::ICertificateValidator2* certificateValidator;
    // Field size check
    static_assert(sizeof(Mono::Security::Interface::ICertificateValidator2*) == 0x8);
    // Creating value type constructor for type: MobileTlsContext
    MobileTlsContext(Mono::Net::Security::MobileAuthenticatedStream* parent_ = {}, bool serverMode_ = {}, ::Il2CppString* targetHost_ = {}, ::Il2CppString* serverName_ = {}, System::Security::Authentication::SslProtocols enabledProtocols_ = {}, System::Security::Cryptography::X509Certificates::X509Certificate* serverCertificate_ = {}, System::Security::Cryptography::X509Certificates::X509CertificateCollection* clientCertificates_ = {}, bool askForClientCert_ = {}, Mono::Security::Interface::ICertificateValidator2* certificateValidator_ = {}) noexcept : parent{parent_}, serverMode{serverMode_}, targetHost{targetHost_}, serverName{serverName_}, enabledProtocols{enabledProtocols_}, serverCertificate{serverCertificate_}, clientCertificates{clientCertificates_}, askForClientCert{askForClientCert_}, certificateValidator{certificateValidator_} {}
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // public System.Void .ctor(Mono.Net.Security.MobileAuthenticatedStream parent, System.Boolean serverMode, System.String targetHost, System.Security.Authentication.SslProtocols enabledProtocols, System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Boolean askForClientCert)
    // Offset: 0x14A7340
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MobileTlsContext* New_ctor(Mono::Net::Security::MobileAuthenticatedStream* parent, bool serverMode, ::Il2CppString* targetHost, System::Security::Authentication::SslProtocols enabledProtocols, System::Security::Cryptography::X509Certificates::X509Certificate* serverCertificate, System::Security::Cryptography::X509Certificates::X509CertificateCollection* clientCertificates, bool askForClientCert) {
      static auto ___internal__logger = ::Logger::get().WithContext("Mono::Net::Security::MobileTlsContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MobileTlsContext*, creationType>(parent, serverMode, targetHost, enabledProtocols, serverCertificate, clientCertificates, askForClientCert)));
    }
    // Mono.Net.Security.MobileAuthenticatedStream get_Parent()
    // Offset: 0x14A74CC
    Mono::Net::Security::MobileAuthenticatedStream* get_Parent();
    // public Mono.Security.Interface.MonoTlsSettings get_Settings()
    // Offset: 0x14A74D4
    Mono::Security::Interface::MonoTlsSettings* get_Settings();
    // public System.Boolean get_IsAuthenticated()
    // Offset: 0xFFFFFFFF
    bool get_IsAuthenticated();
    // public System.Boolean get_IsServer()
    // Offset: 0x14A74F0
    bool get_IsServer();
    // protected System.String get_TargetHost()
    // Offset: 0x14A74F8
    ::Il2CppString* get_TargetHost();
    // protected System.String get_ServerName()
    // Offset: 0x14A7500
    ::Il2CppString* get_ServerName();
    // protected System.Security.Cryptography.X509Certificates.X509CertificateCollection get_ClientCertificates()
    // Offset: 0x14A7508
    System::Security::Cryptography::X509Certificates::X509CertificateCollection* get_ClientCertificates();
    // public System.Void StartHandshake()
    // Offset: 0xFFFFFFFF
    void StartHandshake();
    // public System.Boolean ProcessHandshake()
    // Offset: 0xFFFFFFFF
    bool ProcessHandshake();
    // public System.Void FinishHandshake()
    // Offset: 0xFFFFFFFF
    void FinishHandshake();
    // System.Security.Cryptography.X509Certificates.X509Certificate get_LocalServerCertificate()
    // Offset: 0x14A7510
    System::Security::Cryptography::X509Certificates::X509Certificate* get_LocalServerCertificate();
    // System.Security.Cryptography.X509Certificates.X509Certificate get_LocalClientCertificate()
    // Offset: 0xFFFFFFFF
    System::Security::Cryptography::X509Certificates::X509Certificate* get_LocalClientCertificate();
    // public System.ValueTuple`2<System.Int32,System.Boolean> Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0xFFFFFFFF
    System::ValueTuple_2<int, bool> Read(::Array<uint8_t>* buffer, int offset, int count);
    // public System.ValueTuple`2<System.Int32,System.Boolean> Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0xFFFFFFFF
    System::ValueTuple_2<int, bool> Write(::Array<uint8_t>* buffer, int offset, int count);
    // public System.Void Shutdown()
    // Offset: 0xFFFFFFFF
    void Shutdown();
    // protected System.Boolean ValidateCertificate(System.Security.Cryptography.X509Certificates.X509Certificate leaf, System.Security.Cryptography.X509Certificates.X509Chain chain)
    // Offset: 0x14A7518
    bool ValidateCertificate(System::Security::Cryptography::X509Certificates::X509Certificate* leaf, System::Security::Cryptography::X509Certificates::X509Chain* chain);
    // protected System.Boolean ValidateCertificate(System.Security.Cryptography.X509Certificates.X509CertificateCollection certificates)
    // Offset: 0x14A7620
    bool ValidateCertificate(System::Security::Cryptography::X509Certificates::X509CertificateCollection* certificates);
    // protected System.Security.Cryptography.X509Certificates.X509Certificate SelectClientCertificate(System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, System.String[] acceptableIssuers)
    // Offset: 0x14A771C
    System::Security::Cryptography::X509Certificates::X509Certificate* SelectClientCertificate(System::Security::Cryptography::X509Certificates::X509Certificate* serverCertificate, ::Array<::Il2CppString*>* acceptableIssuers);
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x14A7898
    void Dispose(bool disposing);
    // public System.Void Dispose()
    // Offset: 0x14A5740
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
    // protected override System.Void Finalize()
    // Offset: 0x14A789C
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // Mono.Net.Security.MobileTlsContext
  #pragma pack(pop)
  static check_size<sizeof(MobileTlsContext), 80 + sizeof(Mono::Security::Interface::ICertificateValidator2*)> __Mono_Net_Security_MobileTlsContextSizeCheck;
  static_assert(sizeof(MobileTlsContext) == 0x58);
}
DEFINE_IL2CPP_ARG_TYPE(Mono::Net::Security::MobileTlsContext*, "Mono.Net.Security", "MobileTlsContext");
