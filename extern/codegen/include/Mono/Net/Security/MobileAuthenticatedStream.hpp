// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Security.AuthenticatedStream
#include "System/Net/Security/AuthenticatedStream.hpp"
// Including type: Mono.Security.Interface.IMonoSslStream
#include "Mono/Security/Interface/IMonoSslStream.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Net::Security
namespace Mono::Net::Security {
  // Forward declaring type: MobileTlsContext
  class MobileTlsContext;
  // Forward declaring type: AsyncProtocolRequest
  class AsyncProtocolRequest;
  // Forward declaring type: BufferOffsetSize2
  class BufferOffsetSize2;
  // Forward declaring type: BufferOffsetSize
  class BufferOffsetSize;
  // Forward declaring type: AsyncOperationStatus
  struct AsyncOperationStatus;
}
// Forward declaring namespace: System::Runtime::ExceptionServices
namespace System::Runtime::ExceptionServices {
  // Forward declaring type: ExceptionDispatchInfo
  class ExceptionDispatchInfo;
}
// Forward declaring namespace: System::Net::Security
namespace System::Net::Security {
  // Forward declaring type: SslStream
  class SslStream;
}
// Forward declaring namespace: Mono::Security::Interface
namespace Mono::Security::Interface {
  // Forward declaring type: MonoTlsSettings
  class MonoTlsSettings;
  // Forward declaring type: MonoTlsProvider
  class MonoTlsProvider;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Skipping declaration: Stream because it is already included!
  // Forward declaring type: SeekOrigin
  struct SeekOrigin;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: ValueTuple`2<T1, T2>
  template<typename T1, typename T2>
  struct ValueTuple_2;
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System::Security::Authentication
namespace System::Security::Authentication {
  // Forward declaring type: SslProtocols
  struct SslProtocols;
}
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509Certificate
  class X509Certificate;
  // Forward declaring type: X509CertificateCollection
  class X509CertificateCollection;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Completed forward declares
// Type namespace: Mono.Net.Security
namespace Mono::Net::Security {
  // Autogenerated type: Mono.Net.Security.MobileAuthenticatedStream
  class MobileAuthenticatedStream : public System::Net::Security::AuthenticatedStream/*, public Mono::Security::Interface::IMonoSslStream*/ {
    public:
    // Nested type: Mono::Net::Security::MobileAuthenticatedStream::OperationType
    struct OperationType;
    // Nested type: Mono::Net::Security::MobileAuthenticatedStream::$ProcessAuthentication$d__47
    struct $ProcessAuthentication$d__47;
    // Nested type: Mono::Net::Security::MobileAuthenticatedStream::$StartOperation$d__58
    struct $StartOperation$d__58;
    // Nested type: Mono::Net::Security::MobileAuthenticatedStream::$$c__DisplayClass66_0
    class $$c__DisplayClass66_0;
    // Nested type: Mono::Net::Security::MobileAuthenticatedStream::$InnerRead$d__66
    struct $InnerRead$d__66;
    // Nested type: Mono::Net::Security::MobileAuthenticatedStream::$InnerWrite$d__67
    struct $InnerWrite$d__67;
    // private Mono.Net.Security.MobileTlsContext xobileTlsContext
    // Offset: 0x38
    Mono::Net::Security::MobileTlsContext* xobileTlsContext;
    // private System.Runtime.ExceptionServices.ExceptionDispatchInfo lastException
    // Offset: 0x40
    System::Runtime::ExceptionServices::ExceptionDispatchInfo* lastException;
    // private Mono.Net.Security.AsyncProtocolRequest asyncHandshakeRequest
    // Offset: 0x48
    Mono::Net::Security::AsyncProtocolRequest* asyncHandshakeRequest;
    // private Mono.Net.Security.AsyncProtocolRequest asyncReadRequest
    // Offset: 0x50
    Mono::Net::Security::AsyncProtocolRequest* asyncReadRequest;
    // private Mono.Net.Security.AsyncProtocolRequest asyncWriteRequest
    // Offset: 0x58
    Mono::Net::Security::AsyncProtocolRequest* asyncWriteRequest;
    // private Mono.Net.Security.BufferOffsetSize2 readBuffer
    // Offset: 0x60
    Mono::Net::Security::BufferOffsetSize2* readBuffer;
    // private Mono.Net.Security.BufferOffsetSize2 writeBuffer
    // Offset: 0x68
    Mono::Net::Security::BufferOffsetSize2* writeBuffer;
    // private System.Object ioLock
    // Offset: 0x70
    ::Il2CppObject* ioLock;
    // private System.Int32 closeRequested
    // Offset: 0x78
    int closeRequested;
    // private System.Boolean shutdown
    // Offset: 0x7C
    bool shutdown;
    // private readonly System.Net.Security.SslStream <SslStream>k__BackingField
    // Offset: 0x80
    System::Net::Security::SslStream* SslStream;
    // private readonly Mono.Security.Interface.MonoTlsSettings <Settings>k__BackingField
    // Offset: 0x88
    Mono::Security::Interface::MonoTlsSettings* Settings;
    // private readonly Mono.Security.Interface.MonoTlsProvider <Provider>k__BackingField
    // Offset: 0x90
    Mono::Security::Interface::MonoTlsProvider* Provider;
    // readonly System.Int32 ID
    // Offset: 0x98
    int ID;
    // Creating interface conversion operator: operator Mono::Security::Interface::IMonoSslStream
    operator Mono::Security::Interface::IMonoSslStream() noexcept {
      return *reinterpret_cast<Mono::Security::Interface::IMonoSslStream*>(this);
    }
    // Get static field: static private System.Int32 uniqueNameInteger
    static int _get_uniqueNameInteger();
    // Set static field: static private System.Int32 uniqueNameInteger
    static void _set_uniqueNameInteger(int value);
    // Get static field: static private System.Int32 nextId
    static int _get_nextId();
    // Set static field: static private System.Int32 nextId
    static void _set_nextId(int value);
    // public System.Void .ctor(System.IO.Stream innerStream, System.Boolean leaveInnerStreamOpen, System.Net.Security.SslStream owner, Mono.Security.Interface.MonoTlsSettings settings, Mono.Security.Interface.MonoTlsProvider provider)
    // Offset: 0x12672E4
    static MobileAuthenticatedStream* New_ctor(System::IO::Stream* innerStream, bool leaveInnerStreamOpen, System::Net::Security::SslStream* owner, Mono::Security::Interface::MonoTlsSettings* settings, Mono::Security::Interface::MonoTlsProvider* provider);
    // public Mono.Security.Interface.MonoTlsSettings get_Settings()
    // Offset: 0x1267444
    Mono::Security::Interface::MonoTlsSettings* get_Settings();
    // public Mono.Security.Interface.MonoTlsProvider get_Provider()
    // Offset: 0x126744C
    Mono::Security::Interface::MonoTlsProvider* get_Provider();
    // System.Void CheckThrow(System.Boolean authSuccessCheck, System.Boolean shutdownCheck)
    // Offset: 0x1267454
    void CheckThrow(bool authSuccessCheck, bool shutdownCheck);
    // static System.Exception GetSSPIException(System.Exception e)
    // Offset: 0x1265500
    static System::Exception* GetSSPIException(System::Exception* e);
    // static System.Exception GetIOException(System.Exception e, System.String message)
    // Offset: 0x1267534
    static System::Exception* GetIOException(System::Exception* e, ::Il2CppString* message);
    // System.Runtime.ExceptionServices.ExceptionDispatchInfo SetException(System.Exception e)
    // Offset: 0x1265634
    System::Runtime::ExceptionServices::ExceptionDispatchInfo* SetException(System::Exception* e);
    // private System.Threading.Tasks.Task ProcessAuthentication(System.Boolean runSynchronously, System.Boolean serverMode, System.String targetHost, System.Security.Authentication.SslProtocols enabledProtocols, System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Boolean clientCertRequired)
    // Offset: 0x12676B0
    System::Threading::Tasks::Task* ProcessAuthentication(bool runSynchronously, bool serverMode, ::Il2CppString* targetHost, System::Security::Authentication::SslProtocols enabledProtocols, System::Security::Cryptography::X509Certificates::X509Certificate* serverCertificate, System::Security::Cryptography::X509Certificates::X509CertificateCollection* clientCertificates, bool clientCertRequired);
    // protected Mono.Net.Security.MobileTlsContext CreateContext(System.Boolean serverMode, System.String targetHost, System.Security.Authentication.SslProtocols enabledProtocols, System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Boolean askForClientCert)
    // Offset: 0xFFFFFFFF
    Mono::Net::Security::MobileTlsContext* CreateContext(bool serverMode, ::Il2CppString* targetHost, System::Security::Authentication::SslProtocols enabledProtocols, System::Security::Cryptography::X509Certificates::X509Certificate* serverCertificate, System::Security::Cryptography::X509Certificates::X509CertificateCollection* clientCertificates, bool askForClientCert);
    // private System.Threading.Tasks.Task`1<System.Int32> StartOperation(Mono.Net.Security.MobileAuthenticatedStream/OperationType type, Mono.Net.Security.AsyncProtocolRequest asyncRequest, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x12679CC
    System::Threading::Tasks::Task_1<int>* StartOperation(Mono::Net::Security::MobileAuthenticatedStream::OperationType type, Mono::Net::Security::AsyncProtocolRequest* asyncRequest, System::Threading::CancellationToken cancellationToken);
    // System.Int32 InternalRead(System.Byte[] buffer, System.Int32 offset, System.Int32 size, out System.Boolean outWantMore)
    // Offset: 0x1267F44
    int InternalRead(::Array<uint8_t>* buffer, int offset, int size, bool& outWantMore);
    // private System.ValueTuple`2<System.Int32,System.Boolean> InternalRead(Mono.Net.Security.AsyncProtocolRequest asyncRequest, Mono.Net.Security.BufferOffsetSize internalBuffer, System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    // Offset: 0x1268094
    System::ValueTuple_2<int, bool> InternalRead(Mono::Net::Security::AsyncProtocolRequest* asyncRequest, Mono::Net::Security::BufferOffsetSize* internalBuffer, ::Array<uint8_t>* buffer, int offset, int size);
    // System.Boolean InternalWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    // Offset: 0x1268214
    bool InternalWrite(::Array<uint8_t>* buffer, int offset, int size);
    // private System.Boolean InternalWrite(Mono.Net.Security.AsyncProtocolRequest asyncRequest, Mono.Net.Security.BufferOffsetSize2 internalBuffer, System.Byte[] buffer, System.Int32 offset, System.Int32 size)
    // Offset: 0x1268358
    bool InternalWrite(Mono::Net::Security::AsyncProtocolRequest* asyncRequest, Mono::Net::Security::BufferOffsetSize2* internalBuffer, ::Array<uint8_t>* buffer, int offset, int size);
    // System.Threading.Tasks.Task`1<System.Int32> InnerRead(System.Boolean sync, System.Int32 requestedSize, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1264AD0
    System::Threading::Tasks::Task_1<int>* InnerRead(bool sync, int requestedSize, System::Threading::CancellationToken cancellationToken);
    // System.Threading.Tasks.Task InnerWrite(System.Boolean sync, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1265038
    System::Threading::Tasks::Task* InnerWrite(bool sync, System::Threading::CancellationToken cancellationToken);
    // Mono.Net.Security.AsyncOperationStatus ProcessHandshake(Mono.Net.Security.AsyncOperationStatus status)
    // Offset: 0x12640D0
    Mono::Net::Security::AsyncOperationStatus ProcessHandshake(Mono::Net::Security::AsyncOperationStatus status);
    // System.ValueTuple`2<System.Int32,System.Boolean> ProcessRead(Mono.Net.Security.BufferOffsetSize userBuffer)
    // Offset: 0x12659F8
    System::ValueTuple_2<int, bool> ProcessRead(Mono::Net::Security::BufferOffsetSize* userBuffer);
    // System.ValueTuple`2<System.Int32,System.Boolean> ProcessWrite(Mono.Net.Security.BufferOffsetSize userBuffer)
    // Offset: 0x1265B90
    System::ValueTuple_2<int, bool> ProcessWrite(Mono::Net::Security::BufferOffsetSize* userBuffer);
    // private System.Void <InnerWrite>b__67_0()
    // Offset: 0x1268B10
    void $InnerWrite$b__67_0();
    // public System.Void AuthenticateAsClient(System.String targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Authentication.SslProtocols enabledSslProtocols, System.Boolean checkCertificateRevocation)
    // Offset: 0x126766C
    // Implemented from: Mono.Security.Interface.IMonoSslStream
    // Base method: System.Void IMonoSslStream::AuthenticateAsClient(System.String targetHost, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Security.Authentication.SslProtocols enabledSslProtocols, System.Boolean checkCertificateRevocation)
    void AuthenticateAsClient(::Il2CppString* targetHost, System::Security::Cryptography::X509Certificates::X509CertificateCollection* clientCertificates, System::Security::Authentication::SslProtocols enabledSslProtocols, bool checkCertificateRevocation);
    // public System.Void AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, System.Boolean clientCertificateRequired, System.Security.Authentication.SslProtocols enabledSslProtocols, System.Boolean checkCertificateRevocation)
    // Offset: 0x1267844
    // Implemented from: Mono.Security.Interface.IMonoSslStream
    // Base method: System.Void IMonoSslStream::AuthenticateAsServer(System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, System.Boolean clientCertificateRequired, System.Security.Authentication.SslProtocols enabledSslProtocols, System.Boolean checkCertificateRevocation)
    void AuthenticateAsServer(System::Security::Cryptography::X509Certificates::X509Certificate* serverCertificate, bool clientCertificateRequired, System::Security::Authentication::SslProtocols enabledSslProtocols, bool checkCertificateRevocation);
    // public System.Net.Security.AuthenticatedStream get_AuthenticatedStream()
    // Offset: 0x12678E8
    // Implemented from: Mono.Security.Interface.IMonoSslStream
    // Base method: System.Net.Security.AuthenticatedStream IMonoSslStream::get_AuthenticatedStream()
    System::Net::Security::AuthenticatedStream* get_AuthenticatedStream();
    // public override System.IAsyncResult BeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback asyncCallback, System.Object asyncState)
    // Offset: 0x12678EC
    // Implemented from: System.IO.Stream
    // Base method: System.IAsyncResult Stream::BeginRead(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback asyncCallback, System.Object asyncState)
    System::IAsyncResult* BeginRead(::Array<uint8_t>* buffer, int offset, int count, System::AsyncCallback* asyncCallback, ::Il2CppObject* asyncState);
    // public override System.Int32 EndRead(System.IAsyncResult asyncResult)
    // Offset: 0x1267B28
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::EndRead(System.IAsyncResult asyncResult)
    int EndRead(System::IAsyncResult* asyncResult);
    // public override System.IAsyncResult BeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback asyncCallback, System.Object asyncState)
    // Offset: 0x1267B78
    // Implemented from: System.IO.Stream
    // Base method: System.IAsyncResult Stream::BeginWrite(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.AsyncCallback asyncCallback, System.Object asyncState)
    System::IAsyncResult* BeginWrite(::Array<uint8_t>* buffer, int offset, int count, System::AsyncCallback* asyncCallback, ::Il2CppObject* asyncState);
    // public override System.Void EndWrite(System.IAsyncResult asyncResult)
    // Offset: 0x1267C58
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::EndWrite(System.IAsyncResult asyncResult)
    void EndWrite(System::IAsyncResult* asyncResult);
    // public override System.Int32 Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x1267C64
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    int Read(::Array<uint8_t>* buffer, int offset, int count);
    // public override System.Void Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x1267D3C
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    void Write(::Array<uint8_t>* buffer, int offset, int count);
    // public override System.Threading.Tasks.Task`1<System.Int32> ReadAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1267E0C
    // Implemented from: System.IO.Stream
    // Base method: System.Threading.Tasks.Task`1<System.Int32> Stream::ReadAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)
    System::Threading::Tasks::Task_1<int>* ReadAsync(::Array<uint8_t>* buffer, int offset, int count, System::Threading::CancellationToken cancellationToken);
    // public override System.Threading.Tasks.Task WriteAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1267EA8
    // Implemented from: System.IO.Stream
    // Base method: System.Threading.Tasks.Task Stream::WriteAsync(System.Byte[] buffer, System.Int32 offset, System.Int32 count, System.Threading.CancellationToken cancellationToken)
    System::Threading::Tasks::Task* WriteAsync(::Array<uint8_t>* buffer, int offset, int count, System::Threading::CancellationToken cancellationToken);
    // public override System.Boolean get_IsAuthenticated()
    // Offset: 0x1268484
    // Implemented from: System.Net.Security.AuthenticatedStream
    // Base method: System.Boolean AuthenticatedStream::get_IsAuthenticated()
    bool get_IsAuthenticated();
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x1268558
    // Implemented from: System.Net.Security.AuthenticatedStream
    // Base method: System.Void AuthenticatedStream::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // public override System.Void Flush()
    // Offset: 0x1268760
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Flush()
    void Flush();
    // public System.Security.Cryptography.X509Certificates.X509Certificate get_InternalLocalCertificate()
    // Offset: 0x1268784
    // Implemented from: Mono.Security.Interface.IMonoSslStream
    // Base method: System.Security.Cryptography.X509Certificates.X509Certificate IMonoSslStream::get_InternalLocalCertificate()
    System::Security::Cryptography::X509Certificates::X509Certificate* get_InternalLocalCertificate();
    // public override System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin origin)
    // Offset: 0x126888C
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::Seek(System.Int64 offset, System.IO.SeekOrigin origin)
    int64_t Seek(int64_t offset, System::IO::SeekOrigin origin);
    // public override System.Void SetLength(System.Int64 value)
    // Offset: 0x12688EC
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::SetLength(System.Int64 value)
    void SetLength(int64_t value);
    // public override System.Boolean get_CanRead()
    // Offset: 0x1268910
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanRead()
    bool get_CanRead();
    // public override System.Boolean get_CanWrite()
    // Offset: 0x1268964
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanWrite()
    bool get_CanWrite();
    // public override System.Boolean get_CanSeek()
    // Offset: 0x12689CC
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanSeek()
    bool get_CanSeek();
    // public override System.Int64 get_Length()
    // Offset: 0x12689D4
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Length()
    int64_t get_Length();
    // public override System.Int64 get_Position()
    // Offset: 0x12689F4
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Position()
    int64_t get_Position();
    // public override System.Void set_Position(System.Int64 value)
    // Offset: 0x1268A14
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::set_Position(System.Int64 value)
    void set_Position(int64_t value);
    // public override System.Int32 get_ReadTimeout()
    // Offset: 0x1268A74
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::get_ReadTimeout()
    int get_ReadTimeout();
    // public override System.Int32 get_WriteTimeout()
    // Offset: 0x1268A98
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::get_WriteTimeout()
    int get_WriteTimeout();
    // static private System.Void .cctor()
    // Offset: 0x1268ABC
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::.cctor()
    static void _cctor();
  }; // Mono.Net.Security.MobileAuthenticatedStream
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Mono::Net::Security::MobileAuthenticatedStream*, "Mono.Net.Security", "MobileAuthenticatedStream");
#pragma pack(pop)
