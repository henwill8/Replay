// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Math.BigInteger
#include "Mono/Math/BigInteger.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Mono.Math
namespace Mono::Math {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Mono.Math.BigInteger/ModulusRing
  // [] Offset: FFFFFFFF
  class BigInteger::ModulusRing : public ::Il2CppObject {
    public:
    // private Mono.Math.BigInteger mod
    // Size: 0x8
    // Offset: 0x10
    Mono::Math::BigInteger* mod;
    // Field size check
    static_assert(sizeof(Mono::Math::BigInteger*) == 0x8);
    // private Mono.Math.BigInteger constant
    // Size: 0x8
    // Offset: 0x18
    Mono::Math::BigInteger* constant;
    // Field size check
    static_assert(sizeof(Mono::Math::BigInteger*) == 0x8);
    // Creating value type constructor for type: ModulusRing
    ModulusRing(Mono::Math::BigInteger* mod_ = {}, Mono::Math::BigInteger* constant_ = {}) noexcept : mod{mod_}, constant{constant_} {}
    // public System.Void .ctor(Mono.Math.BigInteger modulus)
    // Offset: 0x1BE6034
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BigInteger::ModulusRing* New_ctor(Mono::Math::BigInteger* modulus) {
      static auto ___internal__logger = ::Logger::get().WithContext("Mono::Math::BigInteger::ModulusRing::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BigInteger::ModulusRing*, creationType>(modulus)));
    }
    // public System.Void BarrettReduction(Mono.Math.BigInteger x)
    // Offset: 0x1BE6368
    void BarrettReduction(Mono::Math::BigInteger* x);
    // public Mono.Math.BigInteger Multiply(Mono.Math.BigInteger a, Mono.Math.BigInteger b)
    // Offset: 0x1BE65D8
    Mono::Math::BigInteger* Multiply(Mono::Math::BigInteger* a, Mono::Math::BigInteger* b);
    // public Mono.Math.BigInteger Difference(Mono.Math.BigInteger a, Mono.Math.BigInteger b)
    // Offset: 0x1BE6158
    Mono::Math::BigInteger* Difference(Mono::Math::BigInteger* a, Mono::Math::BigInteger* b);
    // public Mono.Math.BigInteger Pow(Mono.Math.BigInteger a, Mono.Math.BigInteger k)
    // Offset: 0x1BE67A8
    Mono::Math::BigInteger* Pow(Mono::Math::BigInteger* a, Mono::Math::BigInteger* k);
    // public Mono.Math.BigInteger Pow(System.UInt32 b, Mono.Math.BigInteger exp)
    // Offset: 0x1BE68C4
    Mono::Math::BigInteger* Pow(uint b, Mono::Math::BigInteger* exp);
  }; // Mono.Math.BigInteger/ModulusRing
  #pragma pack(pop)
  static check_size<sizeof(BigInteger::ModulusRing), 24 + sizeof(Mono::Math::BigInteger*)> __Mono_Math_BigInteger_ModulusRingSizeCheck;
  static_assert(sizeof(BigInteger::ModulusRing) == 0x20);
}
DEFINE_IL2CPP_ARG_TYPE(Mono::Math::BigInteger::ModulusRing*, "Mono.Math", "BigInteger/ModulusRing");
