// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Net.Security.MobileTlsContext
#include "Mono/Net/Security/MobileTlsContext.hpp"
// Including type: Mono.Unity.UnityTls
#include "Mono/Unity/UnityTls.hpp"
// Including type: System.Runtime.InteropServices.GCHandle
#include "System/Runtime/InteropServices/GCHandle.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509Certificate
  class X509Certificate;
  // Forward declaring type: X509CertificateCollection
  class X509CertificateCollection;
}
// Forward declaring namespace: Mono::Security::Interface
namespace Mono::Security::Interface {
  // Forward declaring type: MonoTlsConnectionInfo
  class MonoTlsConnectionInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: IntPtr
  struct IntPtr;
  // Forward declaring type: ValueTuple`2<T1, T2>
  template<typename T1, typename T2>
  struct ValueTuple_2;
}
// Forward declaring namespace: Mono::Net::Security
namespace Mono::Net::Security {
  // Forward declaring type: MobileAuthenticatedStream
  class MobileAuthenticatedStream;
}
// Forward declaring namespace: System::Security::Authentication
namespace System::Security::Authentication {
  // Skipping declaration: SslProtocols because it is already included!
}
// Completed forward declares
// Type namespace: Mono.Unity
namespace Mono::Unity {
  // Autogenerated type: Mono.Unity.UnityTlsContext
  class UnityTlsContext : public Mono::Net::Security::MobileTlsContext {
    public:
    // private Mono.Unity.UnityTls/unitytls_tlsctx* tlsContext
    // Offset: 0x58
    Mono::Unity::UnityTls::unitytls_tlsctx* tlsContext;
    // private Mono.Unity.UnityTls/unitytls_x509list* requestedClientCertChain
    // Offset: 0x60
    Mono::Unity::UnityTls::unitytls_x509list* requestedClientCertChain;
    // private Mono.Unity.UnityTls/unitytls_key* requestedClientKey
    // Offset: 0x68
    Mono::Unity::UnityTls::unitytls_key* requestedClientKey;
    // private Mono.Unity.UnityTls/unitytls_tlsctx_read_callback readCallback
    // Offset: 0x70
    Mono::Unity::UnityTls::unitytls_tlsctx_read_callback* readCallback;
    // private Mono.Unity.UnityTls/unitytls_tlsctx_write_callback writeCallback
    // Offset: 0x78
    Mono::Unity::UnityTls::unitytls_tlsctx_write_callback* writeCallback;
    // private Mono.Unity.UnityTls/unitytls_tlsctx_certificate_callback certificateCallback
    // Offset: 0x80
    Mono::Unity::UnityTls::unitytls_tlsctx_certificate_callback* certificateCallback;
    // private Mono.Unity.UnityTls/unitytls_tlsctx_x509verify_callback verifyCallback
    // Offset: 0x88
    Mono::Unity::UnityTls::unitytls_tlsctx_x509verify_callback* verifyCallback;
    // private System.Security.Cryptography.X509Certificates.X509Certificate localClientCertificate
    // Offset: 0x90
    System::Security::Cryptography::X509Certificates::X509Certificate* localClientCertificate;
    // private System.Security.Cryptography.X509Certificates.X509Certificate remoteCertificate
    // Offset: 0x98
    System::Security::Cryptography::X509Certificates::X509Certificate* remoteCertificate;
    // private Mono.Security.Interface.MonoTlsConnectionInfo connectioninfo
    // Offset: 0xA0
    Mono::Security::Interface::MonoTlsConnectionInfo* connectioninfo;
    // private System.Boolean isAuthenticated
    // Offset: 0xA8
    bool isAuthenticated;
    // private System.Boolean hasContext
    // Offset: 0xA9
    bool hasContext;
    // private System.Boolean closedGraceful
    // Offset: 0xAA
    bool closedGraceful;
    // private System.Byte[] writeBuffer
    // Offset: 0xB0
    ::Array<uint8_t>* writeBuffer;
    // private System.Byte[] readBuffer
    // Offset: 0xB8
    ::Array<uint8_t>* readBuffer;
    // private System.Runtime.InteropServices.GCHandle handle
    // Offset: 0xC0
    System::Runtime::InteropServices::GCHandle handle;
    // private System.Exception lastException
    // Offset: 0xC8
    System::Exception* lastException;
    // static private System.Void ExtractNativeKeyAndChainFromManagedCertificate(System.Security.Cryptography.X509Certificates.X509Certificate cert, Mono.Unity.UnityTls/unitytls_errorstate* errorState, out Mono.Unity.UnityTls/unitytls_x509list* nativeCertChain, out Mono.Unity.UnityTls/unitytls_key* nativeKey)
    // Offset: 0x1274C90
    static void ExtractNativeKeyAndChainFromManagedCertificate(System::Security::Cryptography::X509Certificates::X509Certificate* cert, Mono::Unity::UnityTls::unitytls_errorstate* errorState, Mono::Unity::UnityTls::unitytls_x509list*& nativeCertChain, Mono::Unity::UnityTls::unitytls_key*& nativeKey);
    // static private System.IntPtr WriteCallback(System.Void* userData, System.Byte* data, System.IntPtr bufferLen, Mono.Unity.UnityTls/unitytls_errorstate* errorState)
    // Offset: 0x12742C8
    static System::IntPtr WriteCallback(void* userData, uint8_t* data, System::IntPtr bufferLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState);
    // private System.IntPtr WriteCallback(System.Byte* data, System.IntPtr bufferLen, Mono.Unity.UnityTls/unitytls_errorstate* errorState)
    // Offset: 0x12758A0
    System::IntPtr WriteCallback(uint8_t* data, System::IntPtr bufferLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState);
    // static private System.IntPtr ReadCallback(System.Void* userData, System.Byte* buffer, System.IntPtr bufferLen, Mono.Unity.UnityTls/unitytls_errorstate* errorState)
    // Offset: 0x1274398
    static System::IntPtr ReadCallback(void* userData, uint8_t* buffer, System::IntPtr bufferLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState);
    // private System.IntPtr ReadCallback(System.Byte* buffer, System.IntPtr bufferLen, Mono.Unity.UnityTls/unitytls_errorstate* errorState)
    // Offset: 0x1275B04
    System::IntPtr ReadCallback(uint8_t* buffer, System::IntPtr bufferLen, Mono::Unity::UnityTls::unitytls_errorstate* errorState);
    // static private Mono.Unity.UnityTls/unitytls_x509verify_result VerifyCallback(System.Void* userData, Mono.Unity.UnityTls/unitytls_x509list_ref chain, Mono.Unity.UnityTls/unitytls_errorstate* errorState)
    // Offset: 0x1274468
    static Mono::Unity::UnityTls::unitytls_x509verify_result VerifyCallback(void* userData, Mono::Unity::UnityTls::unitytls_x509list_ref chain, Mono::Unity::UnityTls::unitytls_errorstate* errorState);
    // private Mono.Unity.UnityTls/unitytls_x509verify_result VerifyCallback(Mono.Unity.UnityTls/unitytls_x509list_ref chain, Mono.Unity.UnityTls/unitytls_errorstate* errorState)
    // Offset: 0x1275DE8
    Mono::Unity::UnityTls::unitytls_x509verify_result VerifyCallback(Mono::Unity::UnityTls::unitytls_x509list_ref chain, Mono::Unity::UnityTls::unitytls_errorstate* errorState);
    // static private System.Void CertificateCallback(System.Void* userData, Mono.Unity.UnityTls/unitytls_tlsctx* ctx, System.Byte* cn, System.IntPtr cnLen, Mono.Unity.UnityTls/unitytls_x509name* caList, System.IntPtr caListLen, Mono.Unity.UnityTls/unitytls_x509list_ref* chain, Mono.Unity.UnityTls/unitytls_key_ref* key, Mono.Unity.UnityTls/unitytls_errorstate* errorState)
    // Offset: 0x1274530
    static void CertificateCallback(void* userData, Mono::Unity::UnityTls::unitytls_tlsctx* ctx, uint8_t* cn, System::IntPtr cnLen, Mono::Unity::UnityTls::unitytls_x509name* caList, System::IntPtr caListLen, Mono::Unity::UnityTls::unitytls_x509list_ref* chain, Mono::Unity::UnityTls::unitytls_key_ref* key, Mono::Unity::UnityTls::unitytls_errorstate* errorState);
    // private System.Void CertificateCallback(Mono.Unity.UnityTls/unitytls_tlsctx* ctx, System.Byte* cn, System.IntPtr cnLen, Mono.Unity.UnityTls/unitytls_x509name* caList, System.IntPtr caListLen, Mono.Unity.UnityTls/unitytls_x509list_ref* chain, Mono.Unity.UnityTls/unitytls_key_ref* key, Mono.Unity.UnityTls/unitytls_errorstate* errorState)
    // Offset: 0x1275F48
    void CertificateCallback(Mono::Unity::UnityTls::unitytls_tlsctx* ctx, uint8_t* cn, System::IntPtr cnLen, Mono::Unity::UnityTls::unitytls_x509name* caList, System::IntPtr caListLen, Mono::Unity::UnityTls::unitytls_x509list_ref* chain, Mono::Unity::UnityTls::unitytls_key_ref* key, Mono::Unity::UnityTls::unitytls_errorstate* errorState);
    // public System.Void .ctor(Mono.Net.Security.MobileAuthenticatedStream parent, System.Boolean serverMode, System.String targetHost, System.Security.Authentication.SslProtocols enabledProtocols, System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Boolean askForClientCert)
    // Offset: 0x1274600
    // Implemented from: Mono.Net.Security.MobileTlsContext
    // Base method: System.Void MobileTlsContext::.ctor(Mono.Net.Security.MobileAuthenticatedStream parent, System.Boolean serverMode, System.String targetHost, System.Security.Authentication.SslProtocols enabledProtocols, System.Security.Cryptography.X509Certificates.X509Certificate serverCertificate, System.Security.Cryptography.X509Certificates.X509CertificateCollection clientCertificates, System.Boolean askForClientCert)
    static UnityTlsContext* New_ctor(Mono::Net::Security::MobileAuthenticatedStream* parent, bool serverMode, ::Il2CppString* targetHost, System::Security::Authentication::SslProtocols enabledProtocols, System::Security::Cryptography::X509Certificates::X509Certificate* serverCertificate, System::Security::Cryptography::X509Certificates::X509CertificateCollection* clientCertificates, bool askForClientCert);
    // public override System.Boolean get_IsAuthenticated()
    // Offset: 0x1274F94
    // Implemented from: Mono.Net.Security.MobileTlsContext
    // Base method: System.Boolean MobileTlsContext::get_IsAuthenticated()
    bool get_IsAuthenticated();
    // override System.Security.Cryptography.X509Certificates.X509Certificate get_LocalClientCertificate()
    // Offset: 0x1274F9C
    // Implemented from: Mono.Net.Security.MobileTlsContext
    // Base method: System.Security.Cryptography.X509Certificates.X509Certificate MobileTlsContext::get_LocalClientCertificate()
    System::Security::Cryptography::X509Certificates::X509Certificate* get_LocalClientCertificate();
    // public override System.ValueTuple`2<System.Int32,System.Boolean> Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x1274FA4
    // Implemented from: Mono.Net.Security.MobileTlsContext
    // Base method: System.ValueTuple`2<System.Int32,System.Boolean> MobileTlsContext::Read(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    System::ValueTuple_2<int, bool> Read(::Array<uint8_t>* buffer, int offset, int count);
    // public override System.ValueTuple`2<System.Int32,System.Boolean> Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x1275158
    // Implemented from: Mono.Net.Security.MobileTlsContext
    // Base method: System.ValueTuple`2<System.Int32,System.Boolean> MobileTlsContext::Write(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    System::ValueTuple_2<int, bool> Write(::Array<uint8_t>* buffer, int offset, int count);
    // public override System.Void Shutdown()
    // Offset: 0x1275300
    // Implemented from: Mono.Net.Security.MobileTlsContext
    // Base method: System.Void MobileTlsContext::Shutdown()
    void Shutdown();
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x12753C8
    // Implemented from: Mono.Net.Security.MobileTlsContext
    // Base method: System.Void MobileTlsContext::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // public override System.Void StartHandshake()
    // Offset: 0x12754BC
    // Implemented from: Mono.Net.Security.MobileTlsContext
    // Base method: System.Void MobileTlsContext::StartHandshake()
    void StartHandshake();
    // public override System.Boolean ProcessHandshake()
    // Offset: 0x127562C
    // Implemented from: Mono.Net.Security.MobileTlsContext
    // Base method: System.Boolean MobileTlsContext::ProcessHandshake()
    bool ProcessHandshake();
    // public override System.Void FinishHandshake()
    // Offset: 0x1275790
    // Implemented from: Mono.Net.Security.MobileTlsContext
    // Base method: System.Void MobileTlsContext::FinishHandshake()
    void FinishHandshake();
  }; // Mono.Unity.UnityTlsContext
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Mono::Unity::UnityTlsContext*, "Mono.Unity", "UnityTlsContext");
#pragma pack(pop)
