// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.StringComparer
#include "System/StringComparer.hpp"
// Including type: System.Globalization.CompareOptions
#include "System/Globalization/CompareOptions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CompareInfo
  class CompareInfo;
  // Forward declaring type: CultureInfo
  class CultureInfo;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.CultureAwareComparer
  // [] Offset: FFFFFFFF
  class CultureAwareComparer : public System::StringComparer {
    public:
    // private System.Globalization.CompareInfo _compareInfo
    // Size: 0x8
    // Offset: 0x10
    System::Globalization::CompareInfo* compareInfo;
    // Field size check
    static_assert(sizeof(System::Globalization::CompareInfo*) == 0x8);
    // private System.Boolean _ignoreCase
    // Size: 0x1
    // Offset: 0x18
    bool ignoreCase;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: ignoreCase and: options
    char __padding1[0x3] = {};
    // [OptionalFieldAttribute] Offset: 0xCAEA60
    // private System.Globalization.CompareOptions _options
    // Size: 0x4
    // Offset: 0x1C
    System::Globalization::CompareOptions options;
    // Field size check
    static_assert(sizeof(System::Globalization::CompareOptions) == 0x4);
    // Creating value type constructor for type: CultureAwareComparer
    CultureAwareComparer(System::Globalization::CompareInfo* compareInfo_ = {}, bool ignoreCase_ = {}, System::Globalization::CompareOptions options_ = {}) noexcept : compareInfo{compareInfo_}, ignoreCase{ignoreCase_}, options{options_} {}
    // System.Void .ctor(System.Globalization.CultureInfo culture, System.Boolean ignoreCase)
    // Offset: 0x18AB16C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CultureAwareComparer* New_ctor(System::Globalization::CultureInfo* culture, bool ignoreCase) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::CultureAwareComparer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CultureAwareComparer*, creationType>(culture, ignoreCase)));
    }
    // public override System.Int32 Compare(System.String x, System.String y)
    // Offset: 0x18AB220
    // Implemented from: System.StringComparer
    // Base method: System.Int32 StringComparer::Compare(System.String x, System.String y)
    int Compare(::Il2CppString* x, ::Il2CppString* y);
    // public override System.Boolean Equals(System.String x, System.String y)
    // Offset: 0x18AB270
    // Implemented from: System.StringComparer
    // Base method: System.Boolean StringComparer::Equals(System.String x, System.String y)
    bool Equals(::Il2CppString* x, ::Il2CppString* y);
    // public override System.Int32 GetHashCode(System.String obj)
    // Offset: 0x18AB2C4
    // Implemented from: System.StringComparer
    // Base method: System.Int32 StringComparer::GetHashCode(System.String obj)
    int GetHashCode(::Il2CppString* obj);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x18AB368
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x18AB430
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
  }; // System.CultureAwareComparer
  #pragma pack(pop)
  static check_size<sizeof(CultureAwareComparer), 28 + sizeof(System::Globalization::CompareOptions)> __System_CultureAwareComparerSizeCheck;
  static_assert(sizeof(CultureAwareComparer) == 0x20);
}
DEFINE_IL2CPP_ARG_TYPE(System::CultureAwareComparer*, "System", "CultureAwareComparer");
