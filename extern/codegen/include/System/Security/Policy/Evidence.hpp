// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Collections.ICollection
#include "System/Collections/ICollection.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Policy
namespace System::Security::Policy {
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
}
// Completed forward declares
// Type namespace: System.Security.Policy
namespace System::Security::Policy {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.Policy.Evidence
  // [] Offset: FFFFFFFF
  // [MonoTODOAttribute] Offset: CAAC48
  // [ComVisibleAttribute] Offset: CAAC48
  class Evidence : public ::Il2CppObject/*, public System::Collections::ICollection*/ {
    public:
    // Nested type: System::Security::Policy::Evidence::EvidenceEnumerator
    class EvidenceEnumerator;
    // private System.Boolean _locked
    // Size: 0x1
    // Offset: 0x10
    bool locked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: locked and: hostEvidenceList
    char __padding0[0x7] = {};
    // private System.Collections.ArrayList hostEvidenceList
    // Size: 0x8
    // Offset: 0x18
    System::Collections::ArrayList* hostEvidenceList;
    // Field size check
    static_assert(sizeof(System::Collections::ArrayList*) == 0x8);
    // private System.Collections.ArrayList assemblyEvidenceList
    // Size: 0x8
    // Offset: 0x20
    System::Collections::ArrayList* assemblyEvidenceList;
    // Field size check
    static_assert(sizeof(System::Collections::ArrayList*) == 0x8);
    // Creating value type constructor for type: Evidence
    Evidence(bool locked_ = {}, System::Collections::ArrayList* hostEvidenceList_ = {}, System::Collections::ArrayList* assemblyEvidenceList_ = {}) noexcept : locked{locked_}, hostEvidenceList{hostEvidenceList_}, assemblyEvidenceList{assemblyEvidenceList_} {}
    // Creating interface conversion operator: operator System::Collections::ICollection
    operator System::Collections::ICollection() noexcept {
      return *reinterpret_cast<System::Collections::ICollection*>(this);
    }
    // public System.Void .ctor()
    // Offset: 0x14D01E8
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Evidence* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Policy::Evidence::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Evidence*, creationType>()));
    }
    // public System.Int32 get_Count()
    // Offset: 0x14D01F0
    // Implemented from: System.Collections.ICollection
    // Base method: System.Int32 ICollection::get_Count()
    int get_Count();
    // Creating proxy method: System_Collections_ICollection_get_Count
    // Maps to method: get_Count
    int System_Collections_ICollection_get_Count();
    // public System.Void CopyTo(System.Array array, System.Int32 index)
    // Offset: 0x14D0250
    // Implemented from: System.Collections.ICollection
    // Base method: System.Void ICollection::CopyTo(System.Array array, System.Int32 index)
    void CopyTo(System::Array* array, int index);
    // Creating proxy method: System_Collections_ICollection_CopyTo
    // Maps to method: CopyTo
    void System_Collections_ICollection_CopyTo(System::Array* array, int index);
    // public System.Collections.IEnumerator GetEnumerator()
    // Offset: 0x14D0318
    // Implemented from: System.Collections.IEnumerable
    // Base method: System.Collections.IEnumerator IEnumerable::GetEnumerator()
    System::Collections::IEnumerator* GetEnumerator();
    // Creating proxy method: System_Collections_IEnumerable_GetEnumerator
    // Maps to method: GetEnumerator
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
  }; // System.Security.Policy.Evidence
  #pragma pack(pop)
  static check_size<sizeof(Evidence), 32 + sizeof(System::Collections::ArrayList*)> __System_Security_Policy_EvidenceSizeCheck;
  static_assert(sizeof(Evidence) == 0x28);
}
DEFINE_IL2CPP_ARG_TYPE(System::Security::Policy::Evidence*, "System.Security.Policy", "Evidence");
