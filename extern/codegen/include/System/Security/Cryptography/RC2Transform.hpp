// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Security.Cryptography.SymmetricTransform
#include "Mono/Security/Cryptography/SymmetricTransform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: RC2
  class RC2;
}
// Completed forward declares
// Type namespace: System.Security.Cryptography
namespace System::Security::Cryptography {
  // Size: 0x6C
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.Cryptography.RC2Transform
  // [] Offset: FFFFFFFF
  class RC2Transform : public Mono::Security::Cryptography::SymmetricTransform {
    public:
    // private System.UInt16 R0
    // Size: 0x2
    // Offset: 0x58
    uint16_t R0;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // private System.UInt16 R1
    // Size: 0x2
    // Offset: 0x5A
    uint16_t R1;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // private System.UInt16 R2
    // Size: 0x2
    // Offset: 0x5C
    uint16_t R2;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // private System.UInt16 R3
    // Size: 0x2
    // Offset: 0x5E
    uint16_t R3;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // private System.UInt16[] K
    // Size: 0x8
    // Offset: 0x60
    ::Array<uint16_t>* K;
    // Field size check
    static_assert(sizeof(::Array<uint16_t>*) == 0x8);
    // private System.Int32 j
    // Size: 0x4
    // Offset: 0x68
    int j;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: RC2Transform
    RC2Transform(uint16_t R0_ = {}, uint16_t R1_ = {}, uint16_t R2_ = {}, uint16_t R3_ = {}, ::Array<uint16_t>* K_ = {}, int j_ = {}) noexcept : R0{R0_}, R1{R1_}, R2{R2_}, R3{R3_}, K{K_}, j{j_} {}
    // Get static field: static private readonly System.Byte[] pitable
    static ::Array<uint8_t>* _get_pitable();
    // Set static field: static private readonly System.Byte[] pitable
    static void _set_pitable(::Array<uint8_t>* value);
    // public System.Void .ctor(System.Security.Cryptography.RC2 rc2Algo, System.Boolean encryption, System.Byte[] key, System.Byte[] iv)
    // Offset: 0x1A48870
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RC2Transform* New_ctor(System::Security::Cryptography::RC2* rc2Algo, bool encryption, ::Array<uint8_t>* key, ::Array<uint8_t>* iv) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::RC2Transform::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RC2Transform*, creationType>(rc2Algo, encryption, key, iv)));
    }
    // static private System.Void .cctor()
    // Offset: 0x1A49A34
    static void _cctor();
    // protected override System.Void ECB(System.Byte[] input, System.Byte[] output)
    // Offset: 0x1A490F8
    // Implemented from: Mono.Security.Cryptography.SymmetricTransform
    // Base method: System.Void SymmetricTransform::ECB(System.Byte[] input, System.Byte[] output)
    void ECB(::Array<uint8_t>* input, ::Array<uint8_t>* output);
  }; // System.Security.Cryptography.RC2Transform
  #pragma pack(pop)
  static check_size<sizeof(RC2Transform), 104 + sizeof(int)> __System_Security_Cryptography_RC2TransformSizeCheck;
  static_assert(sizeof(RC2Transform) == 0x6C);
}
DEFINE_IL2CPP_ARG_TYPE(System::Security::Cryptography::RC2Transform*, "System.Security.Cryptography", "RC2Transform");
