// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Mono.Security.Cryptography.SymmetricTransform
#include "Mono/Security/Cryptography/SymmetricTransform.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: RC2
  class RC2;
}
// Completed forward declares
// Type namespace: System.Security.Cryptography
namespace System::Security::Cryptography {
  // Autogenerated type: System.Security.Cryptography.RC2Transform
  class RC2Transform : public Mono::Security::Cryptography::SymmetricTransform {
    public:
    // private System.UInt16 R0
    // Offset: 0x58
    uint16_t R0;
    // private System.UInt16 R1
    // Offset: 0x5A
    uint16_t R1;
    // private System.UInt16 R2
    // Offset: 0x5C
    uint16_t R2;
    // private System.UInt16 R3
    // Offset: 0x5E
    uint16_t R3;
    // private System.UInt16[] K
    // Offset: 0x60
    ::Array<uint16_t>* K;
    // private System.Int32 j
    // Offset: 0x68
    int j;
    // Get static field: static private readonly System.Byte[] pitable
    static ::Array<uint8_t>* _get_pitable();
    // Set static field: static private readonly System.Byte[] pitable
    static void _set_pitable(::Array<uint8_t>* value);
    // public System.Void .ctor(System.Security.Cryptography.RC2 rc2Algo, System.Boolean encryption, System.Byte[] key, System.Byte[] iv)
    // Offset: 0x169A904
    static RC2Transform* New_ctor(System::Security::Cryptography::RC2* rc2Algo, bool encryption, ::Array<uint8_t>* key, ::Array<uint8_t>* iv);
    // static private System.Void .cctor()
    // Offset: 0x169BAC8
    static void _cctor();
    // protected override System.Void ECB(System.Byte[] input, System.Byte[] output)
    // Offset: 0x169B18C
    // Implemented from: Mono.Security.Cryptography.SymmetricTransform
    // Base method: System.Void SymmetricTransform::ECB(System.Byte[] input, System.Byte[] output)
    void ECB(::Array<uint8_t>* input, ::Array<uint8_t>* output);
  }; // System.Security.Cryptography.RC2Transform
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Security::Cryptography::RC2Transform*, "System.Security.Cryptography", "RC2Transform");
#pragma pack(pop)
