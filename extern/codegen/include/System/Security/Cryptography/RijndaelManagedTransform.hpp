// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.ICryptoTransform
#include "System/Security/Cryptography/ICryptoTransform.hpp"
// Including type: System.Security.Cryptography.CipherMode
#include "System/Security/Cryptography/CipherMode.hpp"
// Including type: System.Security.Cryptography.PaddingMode
#include "System/Security/Cryptography/PaddingMode.hpp"
// Including type: System.Security.Cryptography.RijndaelManagedTransformMode
#include "System/Security/Cryptography/RijndaelManagedTransformMode.hpp"
// Completed includes
// Type namespace: System.Security.Cryptography
namespace System::Security::Cryptography {
  // Autogenerated type: System.Security.Cryptography.RijndaelManagedTransform
  class RijndaelManagedTransform : public ::Il2CppObject/*, public System::Security::Cryptography::ICryptoTransform*/ {
    public:
    // private System.Security.Cryptography.CipherMode m_cipherMode
    // Offset: 0x10
    System::Security::Cryptography::CipherMode m_cipherMode;
    // private System.Security.Cryptography.PaddingMode m_paddingValue
    // Offset: 0x14
    System::Security::Cryptography::PaddingMode m_paddingValue;
    // private System.Security.Cryptography.RijndaelManagedTransformMode m_transformMode
    // Offset: 0x18
    System::Security::Cryptography::RijndaelManagedTransformMode m_transformMode;
    // private System.Int32 m_blockSizeBits
    // Offset: 0x1C
    int m_blockSizeBits;
    // private System.Int32 m_blockSizeBytes
    // Offset: 0x20
    int m_blockSizeBytes;
    // private System.Int32 m_inputBlockSize
    // Offset: 0x24
    int m_inputBlockSize;
    // private System.Int32 m_outputBlockSize
    // Offset: 0x28
    int m_outputBlockSize;
    // private System.Int32[] m_encryptKeyExpansion
    // Offset: 0x30
    ::Array<int>* m_encryptKeyExpansion;
    // private System.Int32[] m_decryptKeyExpansion
    // Offset: 0x38
    ::Array<int>* m_decryptKeyExpansion;
    // private System.Int32 m_Nr
    // Offset: 0x40
    int m_Nr;
    // private System.Int32 m_Nb
    // Offset: 0x44
    int m_Nb;
    // private System.Int32 m_Nk
    // Offset: 0x48
    int m_Nk;
    // private System.Int32[] m_encryptindex
    // Offset: 0x50
    ::Array<int>* m_encryptindex;
    // private System.Int32[] m_decryptindex
    // Offset: 0x58
    ::Array<int>* m_decryptindex;
    // private System.Int32[] m_IV
    // Offset: 0x60
    ::Array<int>* m_IV;
    // private System.Int32[] m_lastBlockBuffer
    // Offset: 0x68
    ::Array<int>* m_lastBlockBuffer;
    // private System.Byte[] m_depadBuffer
    // Offset: 0x70
    ::Array<uint8_t>* m_depadBuffer;
    // private System.Byte[] m_shiftRegister
    // Offset: 0x78
    ::Array<uint8_t>* m_shiftRegister;
    // Creating interface conversion operator: operator System::Security::Cryptography::ICryptoTransform
    operator System::Security::Cryptography::ICryptoTransform() noexcept {
      return *reinterpret_cast<System::Security::Cryptography::ICryptoTransform*>(this);
    }
    // Get static field: static private readonly System.Byte[] s_Sbox
    static ::Array<uint8_t>* _get_s_Sbox();
    // Set static field: static private readonly System.Byte[] s_Sbox
    static void _set_s_Sbox(::Array<uint8_t>* value);
    // Get static field: static private readonly System.Int32[] s_Rcon
    static ::Array<int>* _get_s_Rcon();
    // Set static field: static private readonly System.Int32[] s_Rcon
    static void _set_s_Rcon(::Array<int>* value);
    // Get static field: static private readonly System.Int32[] s_T
    static ::Array<int>* _get_s_T();
    // Set static field: static private readonly System.Int32[] s_T
    static void _set_s_T(::Array<int>* value);
    // Get static field: static private readonly System.Int32[] s_TF
    static ::Array<int>* _get_s_TF();
    // Set static field: static private readonly System.Int32[] s_TF
    static void _set_s_TF(::Array<int>* value);
    // Get static field: static private readonly System.Int32[] s_iT
    static ::Array<int>* _get_s_iT();
    // Set static field: static private readonly System.Int32[] s_iT
    static void _set_s_iT(::Array<int>* value);
    // Get static field: static private readonly System.Int32[] s_iTF
    static ::Array<int>* _get_s_iTF();
    // Set static field: static private readonly System.Int32[] s_iTF
    static void _set_s_iTF(::Array<int>* value);
    // System.Void .ctor(System.Byte[] rgbKey, System.Security.Cryptography.CipherMode mode, System.Byte[] rgbIV, System.Int32 blockSize, System.Int32 feedbackSize, System.Security.Cryptography.PaddingMode PaddingValue, System.Security.Cryptography.RijndaelManagedTransformMode transformMode)
    // Offset: 0x16A04C4
    static RijndaelManagedTransform* New_ctor(::Array<uint8_t>* rgbKey, System::Security::Cryptography::CipherMode mode, ::Array<uint8_t>* rgbIV, int blockSize, int feedbackSize, System::Security::Cryptography::PaddingMode PaddingValue, System::Security::Cryptography::RijndaelManagedTransformMode transformMode);
    // private System.Void Dispose(System.Boolean disposing)
    // Offset: 0x16A10F4
    void Dispose(bool disposing);
    // public System.Void Reset()
    // Offset: 0x16A2D68
    void Reset();
    // private System.Int32 EncryptData(System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount, ref System.Byte[] outputBuffer, System.Int32 outputOffset, System.Security.Cryptography.PaddingMode paddingMode, System.Boolean fLast)
    // Offset: 0x16A1504
    int EncryptData(::Array<uint8_t>* inputBuffer, int inputOffset, int inputCount, ::Array<uint8_t>*& outputBuffer, int outputOffset, System::Security::Cryptography::PaddingMode paddingMode, bool fLast);
    // private System.Int32 DecryptData(System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount, ref System.Byte[] outputBuffer, System.Int32 outputOffset, System.Security.Cryptography.PaddingMode paddingMode, System.Boolean fLast)
    // Offset: 0x16A2030
    int DecryptData(::Array<uint8_t>* inputBuffer, int inputOffset, int inputCount, ::Array<uint8_t>*& outputBuffer, int outputOffset, System::Security::Cryptography::PaddingMode paddingMode, bool fLast);
    // private System.Void Enc(System.Int32* encryptindex, System.Int32* encryptKeyExpansion, System.Int32* T, System.Int32* TF, System.Int32* work, System.Int32* temp)
    // Offset: 0x16A2DF0
    void Enc(int* encryptindex, int* encryptKeyExpansion, int* T, int* TF, int* work, int* temp);
    // private System.Void Dec(System.Int32* decryptindex, System.Int32* decryptKeyExpansion, System.Int32* iT, System.Int32* iTF, System.Int32* work, System.Int32* temp)
    // Offset: 0x16A2FAC
    void Dec(int* decryptindex, int* decryptKeyExpansion, int* iT, int* iTF, int* work, int* temp);
    // private System.Void GenerateKeyExpansion(System.Byte[] rgbKey)
    // Offset: 0x16A0B14
    void GenerateKeyExpansion(::Array<uint8_t>* rgbKey);
    // static private System.Int32 rot1(System.Int32 val)
    // Offset: 0x16A328C
    static int rot1(int val);
    // static private System.Int32 rot2(System.Int32 val)
    // Offset: 0x16A3284
    static int rot2(int val);
    // static private System.Int32 rot3(System.Int32 val)
    // Offset: 0x16A317C
    static int rot3(int val);
    // static private System.Int32 SubWord(System.Int32 a)
    // Offset: 0x16A3184
    static int SubWord(int a);
    // static private System.Int32 MulX(System.Int32 x)
    // Offset: 0x16A3260
    static int MulX(int x);
    // static private System.Void .cctor()
    // Offset: 0x16A3294
    static void _cctor();
    // public System.Void Dispose()
    // Offset: 0x16A10EC
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
    // public System.Int32 get_InputBlockSize()
    // Offset: 0x16A1220
    // Implemented from: System.Security.Cryptography.ICryptoTransform
    // Base method: System.Int32 ICryptoTransform::get_InputBlockSize()
    int get_InputBlockSize();
    // public System.Int32 get_OutputBlockSize()
    // Offset: 0x16A1228
    // Implemented from: System.Security.Cryptography.ICryptoTransform
    // Base method: System.Int32 ICryptoTransform::get_OutputBlockSize()
    int get_OutputBlockSize();
    // public System.Boolean get_CanTransformMultipleBlocks()
    // Offset: 0x16A1230
    // Implemented from: System.Security.Cryptography.ICryptoTransform
    // Base method: System.Boolean ICryptoTransform::get_CanTransformMultipleBlocks()
    bool get_CanTransformMultipleBlocks();
    // public System.Int32 TransformBlock(System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount, System.Byte[] outputBuffer, System.Int32 outputOffset)
    // Offset: 0x16A1238
    // Implemented from: System.Security.Cryptography.ICryptoTransform
    // Base method: System.Int32 ICryptoTransform::TransformBlock(System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount, System.Byte[] outputBuffer, System.Int32 outputOffset)
    int TransformBlock(::Array<uint8_t>* inputBuffer, int inputOffset, int inputCount, ::Array<uint8_t>* outputBuffer, int outputOffset);
    // public System.Byte[] TransformFinalBlock(System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount)
    // Offset: 0x16A2AA0
    // Implemented from: System.Security.Cryptography.ICryptoTransform
    // Base method: System.Byte[] ICryptoTransform::TransformFinalBlock(System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount)
    ::Array<uint8_t>* TransformFinalBlock(::Array<uint8_t>* inputBuffer, int inputOffset, int inputCount);
  }; // System.Security.Cryptography.RijndaelManagedTransform
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Security::Cryptography::RijndaelManagedTransform*, "System.Security.Cryptography", "RijndaelManagedTransform");
#pragma pack(pop)
