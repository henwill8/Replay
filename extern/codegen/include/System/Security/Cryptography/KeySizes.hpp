// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Security.Cryptography
namespace System::Security::Cryptography {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.Cryptography.KeySizes
  // [] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: CAAE34
  class KeySizes : public ::Il2CppObject {
    public:
    // private System.Int32 m_minSize
    // Size: 0x4
    // Offset: 0x10
    int m_minSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_maxSize
    // Size: 0x4
    // Offset: 0x14
    int m_maxSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_skipSize
    // Size: 0x4
    // Offset: 0x18
    int m_skipSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: KeySizes
    KeySizes(int m_minSize_ = {}, int m_maxSize_ = {}, int m_skipSize_ = {}) noexcept : m_minSize{m_minSize_}, m_maxSize{m_maxSize_}, m_skipSize{m_skipSize_} {}
    // public System.Int32 get_MinSize()
    // Offset: 0x1A46738
    int get_MinSize();
    // public System.Int32 get_MaxSize()
    // Offset: 0x1A46740
    int get_MaxSize();
    // public System.Int32 get_SkipSize()
    // Offset: 0x1A46748
    int get_SkipSize();
    // public System.Void .ctor(System.Int32 minSize, System.Int32 maxSize, System.Int32 skipSize)
    // Offset: 0x1A41D60
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static KeySizes* New_ctor(int minSize, int maxSize, int skipSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::KeySizes::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<KeySizes*, creationType>(minSize, maxSize, skipSize)));
    }
    // System.Boolean IsLegal(System.Int32 keySize)
    // Offset: 0x1A46750
    bool IsLegal(int keySize);
    // static System.Boolean IsLegalKeySize(System.Security.Cryptography.KeySizes[] legalKeys, System.Int32 size)
    // Offset: 0x1A4679C
    static bool IsLegalKeySize(::Array<System::Security::Cryptography::KeySizes*>* legalKeys, int size);
  }; // System.Security.Cryptography.KeySizes
  #pragma pack(pop)
  static check_size<sizeof(KeySizes), 24 + sizeof(int)> __System_Security_Cryptography_KeySizesSizeCheck;
  static_assert(sizeof(KeySizes) == 0x1C);
}
DEFINE_IL2CPP_ARG_TYPE(System::Security::Cryptography::KeySizes*, "System.Security.Cryptography", "KeySizes");
