// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.ICryptoTransform
#include "System/Security/Cryptography/ICryptoTransform.hpp"
// Completed includes
// Type namespace: System.Security.Cryptography
namespace System::Security::Cryptography {
  // Autogenerated type: System.Security.Cryptography.HashAlgorithm
  class HashAlgorithm : public ::Il2CppObject/*, public System::Security::Cryptography::ICryptoTransform*/ {
    public:
    // protected System.Int32 HashSizeValue
    // Offset: 0x10
    int HashSizeValue;
    // protected internal System.Byte[] HashValue
    // Offset: 0x18
    ::Array<uint8_t>* HashValue;
    // protected System.Int32 State
    // Offset: 0x20
    int State;
    // private System.Boolean m_bDisposed
    // Offset: 0x24
    bool m_bDisposed;
    // Creating interface conversion operator: operator System::Security::Cryptography::ICryptoTransform
    operator System::Security::Cryptography::ICryptoTransform() noexcept {
      return *reinterpret_cast<System::Security::Cryptography::ICryptoTransform*>(this);
    }
    // public System.Int32 get_HashSize()
    // Offset: 0x16980F4
    int get_HashSize();
    // public System.Byte[] get_Hash()
    // Offset: 0x16980FC
    ::Array<uint8_t>* get_Hash();
    // static public System.Security.Cryptography.HashAlgorithm Create(System.String hashName)
    // Offset: 0x169820C
    static System::Security::Cryptography::HashAlgorithm* Create(::Il2CppString* hashName);
    // public System.Byte[] ComputeHash(System.Byte[] buffer)
    // Offset: 0x1696D28
    ::Array<uint8_t>* ComputeHash(::Array<uint8_t>* buffer);
    // public System.Byte[] ComputeHash(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x1698294
    ::Array<uint8_t>* ComputeHash(::Array<uint8_t>* buffer, int offset, int count);
    // public System.Void Clear()
    // Offset: 0x169855C
    void Clear();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x1698600
    void Dispose(bool disposing);
    // public System.Void Initialize()
    // Offset: 0xFFFFFFFF
    void Initialize();
    // protected System.Void HashCore(System.Byte[] array, System.Int32 ibStart, System.Int32 cbSize)
    // Offset: 0xFFFFFFFF
    void HashCore(::Array<uint8_t>* array, int ibStart, int cbSize);
    // protected System.Byte[] HashFinal()
    // Offset: 0xFFFFFFFF
    ::Array<uint8_t>* HashFinal();
    // protected System.Void .ctor()
    // Offset: 0x16980EC
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static HashAlgorithm* New_ctor();
    // public System.Int32 get_InputBlockSize()
    // Offset: 0x16984C4
    // Implemented from: System.Security.Cryptography.ICryptoTransform
    // Base method: System.Int32 ICryptoTransform::get_InputBlockSize()
    int get_InputBlockSize();
    // public System.Int32 get_OutputBlockSize()
    // Offset: 0x16984CC
    // Implemented from: System.Security.Cryptography.ICryptoTransform
    // Base method: System.Int32 ICryptoTransform::get_OutputBlockSize()
    int get_OutputBlockSize();
    // public System.Boolean get_CanTransformMultipleBlocks()
    // Offset: 0x16984D4
    // Implemented from: System.Security.Cryptography.ICryptoTransform
    // Base method: System.Boolean ICryptoTransform::get_CanTransformMultipleBlocks()
    bool get_CanTransformMultipleBlocks();
    // public System.Int32 TransformBlock(System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount, System.Byte[] outputBuffer, System.Int32 outputOffset)
    // Offset: 0x1697128
    // Implemented from: System.Security.Cryptography.ICryptoTransform
    // Base method: System.Int32 ICryptoTransform::TransformBlock(System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount, System.Byte[] outputBuffer, System.Int32 outputOffset)
    int TransformBlock(::Array<uint8_t>* inputBuffer, int inputOffset, int inputCount, ::Array<uint8_t>* outputBuffer, int outputOffset);
    // public System.Byte[] TransformFinalBlock(System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount)
    // Offset: 0x1697468
    // Implemented from: System.Security.Cryptography.ICryptoTransform
    // Base method: System.Byte[] ICryptoTransform::TransformFinalBlock(System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount)
    ::Array<uint8_t>* TransformFinalBlock(::Array<uint8_t>* inputBuffer, int inputOffset, int inputCount);
    // public System.Void Dispose()
    // Offset: 0x16984DC
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
  }; // System.Security.Cryptography.HashAlgorithm
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Security::Cryptography::HashAlgorithm*, "System.Security.Cryptography", "HashAlgorithm");
#pragma pack(pop)
