// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.ICryptoTransform
#include "System/Security/Cryptography/ICryptoTransform.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Security.Cryptography
namespace System::Security::Cryptography {
  // Size: 0x25
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.Cryptography.HashAlgorithm
  // [] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: CAAF80
  class HashAlgorithm : public ::Il2CppObject/*, public System::Security::Cryptography::ICryptoTransform*/ {
    public:
    // protected System.Int32 HashSizeValue
    // Size: 0x4
    // Offset: 0x10
    int HashSizeValue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: HashSizeValue and: HashValue
    char __padding0[0x4] = {};
    // protected internal System.Byte[] HashValue
    // Size: 0x8
    // Offset: 0x18
    ::Array<uint8_t>* HashValue;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // protected System.Int32 State
    // Size: 0x4
    // Offset: 0x20
    int State;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_bDisposed
    // Size: 0x1
    // Offset: 0x24
    bool m_bDisposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: HashAlgorithm
    HashAlgorithm(int HashSizeValue_ = {}, ::Array<uint8_t>* HashValue_ = {}, int State_ = {}, bool m_bDisposed_ = {}) noexcept : HashSizeValue{HashSizeValue_}, HashValue{HashValue_}, State{State_}, m_bDisposed{m_bDisposed_} {}
    // Creating interface conversion operator: operator System::Security::Cryptography::ICryptoTransform
    operator System::Security::Cryptography::ICryptoTransform() noexcept {
      return *reinterpret_cast<System::Security::Cryptography::ICryptoTransform*>(this);
    }
    // public System.Int32 get_HashSize()
    // Offset: 0x1A46060
    int get_HashSize();
    // public System.Byte[] get_Hash()
    // Offset: 0x1A46068
    ::Array<uint8_t>* get_Hash();
    // static public System.Security.Cryptography.HashAlgorithm Create(System.String hashName)
    // Offset: 0x1A46178
    static System::Security::Cryptography::HashAlgorithm* Create(::Il2CppString* hashName);
    // public System.Byte[] ComputeHash(System.Byte[] buffer)
    // Offset: 0x1A44C94
    ::Array<uint8_t>* ComputeHash(::Array<uint8_t>* buffer);
    // public System.Byte[] ComputeHash(System.Byte[] buffer, System.Int32 offset, System.Int32 count)
    // Offset: 0x1A46200
    ::Array<uint8_t>* ComputeHash(::Array<uint8_t>* buffer, int offset, int count);
    // public System.Void Clear()
    // Offset: 0x1A464C8
    void Clear();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x1A4656C
    void Dispose(bool disposing);
    // public System.Void Initialize()
    // Offset: 0xFFFFFFFF
    void Initialize();
    // protected System.Void HashCore(System.Byte[] array, System.Int32 ibStart, System.Int32 cbSize)
    // Offset: 0xFFFFFFFF
    void HashCore(::Array<uint8_t>* array, int ibStart, int cbSize);
    // protected System.Byte[] HashFinal()
    // Offset: 0xFFFFFFFF
    ::Array<uint8_t>* HashFinal();
    // protected System.Void .ctor()
    // Offset: 0x1A46058
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HashAlgorithm* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::HashAlgorithm::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HashAlgorithm*, creationType>()));
    }
    // public System.Int32 get_InputBlockSize()
    // Offset: 0x1A46430
    // Implemented from: System.Security.Cryptography.ICryptoTransform
    // Base method: System.Int32 ICryptoTransform::get_InputBlockSize()
    int get_InputBlockSize();
    // public System.Int32 get_OutputBlockSize()
    // Offset: 0x1A46438
    // Implemented from: System.Security.Cryptography.ICryptoTransform
    // Base method: System.Int32 ICryptoTransform::get_OutputBlockSize()
    int get_OutputBlockSize();
    // public System.Boolean get_CanTransformMultipleBlocks()
    // Offset: 0x1A46440
    // Implemented from: System.Security.Cryptography.ICryptoTransform
    // Base method: System.Boolean ICryptoTransform::get_CanTransformMultipleBlocks()
    bool get_CanTransformMultipleBlocks();
    // public System.Int32 TransformBlock(System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount, System.Byte[] outputBuffer, System.Int32 outputOffset)
    // Offset: 0x1A45094
    // Implemented from: System.Security.Cryptography.ICryptoTransform
    // Base method: System.Int32 ICryptoTransform::TransformBlock(System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount, System.Byte[] outputBuffer, System.Int32 outputOffset)
    int TransformBlock(::Array<uint8_t>* inputBuffer, int inputOffset, int inputCount, ::Array<uint8_t>* outputBuffer, int outputOffset);
    // public System.Byte[] TransformFinalBlock(System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount)
    // Offset: 0x1A453D4
    // Implemented from: System.Security.Cryptography.ICryptoTransform
    // Base method: System.Byte[] ICryptoTransform::TransformFinalBlock(System.Byte[] inputBuffer, System.Int32 inputOffset, System.Int32 inputCount)
    ::Array<uint8_t>* TransformFinalBlock(::Array<uint8_t>* inputBuffer, int inputOffset, int inputCount);
    // public System.Void Dispose()
    // Offset: 0x1A46448
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
  }; // System.Security.Cryptography.HashAlgorithm
  #pragma pack(pop)
  static check_size<sizeof(HashAlgorithm), 36 + sizeof(bool)> __System_Security_Cryptography_HashAlgorithmSizeCheck;
  static_assert(sizeof(HashAlgorithm) == 0x25);
}
DEFINE_IL2CPP_ARG_TYPE(System::Security::Cryptography::HashAlgorithm*, "System.Security.Cryptography", "HashAlgorithm");
