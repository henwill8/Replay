// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: AsymmetricAlgorithm
  class AsymmetricAlgorithm;
  // Forward declaring type: AsnEncodedData
  class AsnEncodedData;
  // Forward declaring type: Oid
  class Oid;
  // Forward declaring type: DSA
  class DSA;
  // Forward declaring type: RSA
  class RSA;
}
// Forward declaring namespace: Mono::Security::X509
namespace Mono::Security::X509 {
  // Forward declaring type: X509Certificate
  class X509Certificate;
}
// Completed forward declares
// Type namespace: System.Security.Cryptography.X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Autogenerated type: System.Security.Cryptography.X509Certificates.PublicKey
  class PublicKey : public ::Il2CppObject {
    public:
    // private System.Security.Cryptography.AsymmetricAlgorithm _key
    // Offset: 0x10
    System::Security::Cryptography::AsymmetricAlgorithm* key;
    // private System.Security.Cryptography.AsnEncodedData _keyValue
    // Offset: 0x18
    System::Security::Cryptography::AsnEncodedData* keyValue;
    // private System.Security.Cryptography.AsnEncodedData _params
    // Offset: 0x20
    System::Security::Cryptography::AsnEncodedData* params;
    // private System.Security.Cryptography.Oid _oid
    // Offset: 0x28
    System::Security::Cryptography::Oid* oid;
    // Get static field: static private System.Byte[] Empty
    static ::Array<uint8_t>* _get_Empty();
    // Set static field: static private System.Byte[] Empty
    static void _set_Empty(::Array<uint8_t>* value);
    // System.Void .ctor(Mono.Security.X509.X509Certificate certificate)
    // Offset: 0x145C3F8
    static PublicKey* New_ctor(Mono::Security::X509::X509Certificate* certificate);
    // public System.Security.Cryptography.AsnEncodedData get_EncodedKeyValue()
    // Offset: 0x145C830
    System::Security::Cryptography::AsnEncodedData* get_EncodedKeyValue();
    // public System.Security.Cryptography.AsnEncodedData get_EncodedParameters()
    // Offset: 0x145C838
    System::Security::Cryptography::AsnEncodedData* get_EncodedParameters();
    // public System.Security.Cryptography.AsymmetricAlgorithm get_Key()
    // Offset: 0x145C840
    System::Security::Cryptography::AsymmetricAlgorithm* get_Key();
    // public System.Security.Cryptography.Oid get_Oid()
    // Offset: 0x145D27C
    System::Security::Cryptography::Oid* get_Oid();
    // static private System.Byte[] GetUnsignedBigInteger(System.Byte[] integer)
    // Offset: 0x145D284
    static ::Array<uint8_t>* GetUnsignedBigInteger(::Array<uint8_t>* integer);
    // static System.Security.Cryptography.DSA DecodeDSA(System.Byte[] rawPublicKey, System.Byte[] rawParameters)
    // Offset: 0x145CDC0
    static System::Security::Cryptography::DSA* DecodeDSA(::Array<uint8_t>* rawPublicKey, ::Array<uint8_t>* rawParameters);
    // static System.Security.Cryptography.RSA DecodeRSA(System.Byte[] rawPublicKey)
    // Offset: 0x145CA0C
    static System::Security::Cryptography::RSA* DecodeRSA(::Array<uint8_t>* rawPublicKey);
    // static private System.Void .cctor()
    // Offset: 0x145D330
    static void _cctor();
  }; // System.Security.Cryptography.X509Certificates.PublicKey
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Security::Cryptography::X509Certificates::PublicKey*, "System.Security.Cryptography.X509Certificates", "PublicKey");
#pragma pack(pop)
