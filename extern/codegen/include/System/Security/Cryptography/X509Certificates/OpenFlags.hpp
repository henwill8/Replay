// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: System.Security.Cryptography.X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Autogenerated type: System.Security.Cryptography.X509Certificates.OpenFlags
  struct OpenFlags : public System::Enum {
    public:
    // public System.Int32 value__
    // Offset: 0x0
    int value;
    // Creating value type constructor for type: OpenFlags
    constexpr OpenFlags(int value_ = {}) noexcept : value{value_} {}
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public System.Security.Cryptography.X509Certificates.OpenFlags ReadOnly
    static constexpr const int ReadOnly = 0;
    // Get static field: static public System.Security.Cryptography.X509Certificates.OpenFlags ReadOnly
    static System::Security::Cryptography::X509Certificates::OpenFlags _get_ReadOnly();
    // Set static field: static public System.Security.Cryptography.X509Certificates.OpenFlags ReadOnly
    static void _set_ReadOnly(System::Security::Cryptography::X509Certificates::OpenFlags value);
    // static field const value: static public System.Security.Cryptography.X509Certificates.OpenFlags ReadWrite
    static constexpr const int ReadWrite = 1;
    // Get static field: static public System.Security.Cryptography.X509Certificates.OpenFlags ReadWrite
    static System::Security::Cryptography::X509Certificates::OpenFlags _get_ReadWrite();
    // Set static field: static public System.Security.Cryptography.X509Certificates.OpenFlags ReadWrite
    static void _set_ReadWrite(System::Security::Cryptography::X509Certificates::OpenFlags value);
    // static field const value: static public System.Security.Cryptography.X509Certificates.OpenFlags MaxAllowed
    static constexpr const int MaxAllowed = 2;
    // Get static field: static public System.Security.Cryptography.X509Certificates.OpenFlags MaxAllowed
    static System::Security::Cryptography::X509Certificates::OpenFlags _get_MaxAllowed();
    // Set static field: static public System.Security.Cryptography.X509Certificates.OpenFlags MaxAllowed
    static void _set_MaxAllowed(System::Security::Cryptography::X509Certificates::OpenFlags value);
    // static field const value: static public System.Security.Cryptography.X509Certificates.OpenFlags OpenExistingOnly
    static constexpr const int OpenExistingOnly = 4;
    // Get static field: static public System.Security.Cryptography.X509Certificates.OpenFlags OpenExistingOnly
    static System::Security::Cryptography::X509Certificates::OpenFlags _get_OpenExistingOnly();
    // Set static field: static public System.Security.Cryptography.X509Certificates.OpenFlags OpenExistingOnly
    static void _set_OpenExistingOnly(System::Security::Cryptography::X509Certificates::OpenFlags value);
    // static field const value: static public System.Security.Cryptography.X509Certificates.OpenFlags IncludeArchived
    static constexpr const int IncludeArchived = 8;
    // Get static field: static public System.Security.Cryptography.X509Certificates.OpenFlags IncludeArchived
    static System::Security::Cryptography::X509Certificates::OpenFlags _get_IncludeArchived();
    // Set static field: static public System.Security.Cryptography.X509Certificates.OpenFlags IncludeArchived
    static void _set_IncludeArchived(System::Security::Cryptography::X509Certificates::OpenFlags value);
  }; // System.Security.Cryptography.X509Certificates.OpenFlags
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Security::Cryptography::X509Certificates::OpenFlags, "System.Security.Cryptography.X509Certificates", "OpenFlags");
#pragma pack(pop)
