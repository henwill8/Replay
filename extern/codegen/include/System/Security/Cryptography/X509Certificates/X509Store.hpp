// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Security.Cryptography.X509Certificates.StoreLocation
#include "System/Security/Cryptography/X509Certificates/StoreLocation.hpp"
// Including type: System.Security.Cryptography.X509Certificates.OpenFlags
#include "System/Security/Cryptography/X509Certificates/OpenFlags.hpp"
// Including type: System.Security.Cryptography.X509Certificates.StoreName
#include "System/Security/Cryptography/X509Certificates/StoreName.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509Certificate2Collection
  class X509Certificate2Collection;
}
// Forward declaring namespace: Mono::Security::X509
namespace Mono::Security::X509 {
  // Forward declaring type: X509Store
  class X509Store;
  // Forward declaring type: X509Stores
  class X509Stores;
}
// Completed forward declares
// Type namespace: System.Security.Cryptography.X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.Cryptography.X509Certificates.X509Store
  // [] Offset: FFFFFFFF
  class X509Store : public ::Il2CppObject/*, public System::IDisposable*/ {
    public:
    // private System.String _name
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* name;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Security.Cryptography.X509Certificates.StoreLocation _location
    // Size: 0x4
    // Offset: 0x18
    System::Security::Cryptography::X509Certificates::StoreLocation location;
    // Field size check
    static_assert(sizeof(System::Security::Cryptography::X509Certificates::StoreLocation) == 0x4);
    // Padding between fields: location and: list
    char __padding1[0x4] = {};
    // private System.Security.Cryptography.X509Certificates.X509Certificate2Collection list
    // Size: 0x8
    // Offset: 0x20
    System::Security::Cryptography::X509Certificates::X509Certificate2Collection* list;
    // Field size check
    static_assert(sizeof(System::Security::Cryptography::X509Certificates::X509Certificate2Collection*) == 0x8);
    // private System.Security.Cryptography.X509Certificates.OpenFlags _flags
    // Size: 0x4
    // Offset: 0x28
    System::Security::Cryptography::X509Certificates::OpenFlags flags;
    // Field size check
    static_assert(sizeof(System::Security::Cryptography::X509Certificates::OpenFlags) == 0x4);
    // Padding between fields: flags and: store
    char __padding3[0x4] = {};
    // private Mono.Security.X509.X509Store store
    // Size: 0x8
    // Offset: 0x30
    Mono::Security::X509::X509Store* store;
    // Field size check
    static_assert(sizeof(Mono::Security::X509::X509Store*) == 0x8);
    // Creating value type constructor for type: X509Store
    X509Store(::Il2CppString* name_ = {}, System::Security::Cryptography::X509Certificates::StoreLocation location_ = {}, System::Security::Cryptography::X509Certificates::X509Certificate2Collection* list_ = {}, System::Security::Cryptography::X509Certificates::OpenFlags flags_ = {}, Mono::Security::X509::X509Store* store_ = {}) noexcept : name{name_}, location{location_}, list{list_}, flags{flags_}, store{store_} {}
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // public System.Void .ctor(System.Security.Cryptography.X509Certificates.StoreName storeName, System.Security.Cryptography.X509Certificates.StoreLocation storeLocation)
    // Offset: 0x177C188
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static X509Store* New_ctor(System::Security::Cryptography::X509Certificates::StoreName storeName, System::Security::Cryptography::X509Certificates::StoreLocation storeLocation) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::X509Certificates::X509Store::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<X509Store*, creationType>(storeName, storeLocation)));
    }
    // public System.Security.Cryptography.X509Certificates.X509Certificate2Collection get_Certificates()
    // Offset: 0x177BE1C
    System::Security::Cryptography::X509Certificates::X509Certificate2Collection* get_Certificates();
    // private Mono.Security.X509.X509Stores get_Factory()
    // Offset: 0x1780570
    Mono::Security::X509::X509Stores* get_Factory();
    // Mono.Security.X509.X509Store get_Store()
    // Offset: 0x178058C
    Mono::Security::X509::X509Store* get_Store();
    // public System.Void Close()
    // Offset: 0x177BAFC
    void Close();
    // public System.Void Open(System.Security.Cryptography.X509Certificates.OpenFlags flags)
    // Offset: 0x177C2D4
    void Open(System::Security::Cryptography::X509Certificates::OpenFlags flags);
    // public System.Void Dispose()
    // Offset: 0x1780594
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
  }; // System.Security.Cryptography.X509Certificates.X509Store
  #pragma pack(pop)
  static check_size<sizeof(X509Store), 48 + sizeof(Mono::Security::X509::X509Store*)> __System_Security_Cryptography_X509Certificates_X509StoreSizeCheck;
  static_assert(sizeof(X509Store) == 0x38);
}
DEFINE_IL2CPP_ARG_TYPE(System::Security::Cryptography::X509Certificates::X509Store*, "System.Security.Cryptography.X509Certificates", "X509Store");
