// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.X509Certificates.X509ChainStatusFlags
#include "System/Security/Cryptography/X509Certificates/X509ChainStatusFlags.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509Certificate2
  class X509Certificate2;
  // Forward declaring type: X509ChainStatus
  struct X509ChainStatus;
}
// Completed forward declares
// Type namespace: System.Security.Cryptography.X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Autogenerated type: System.Security.Cryptography.X509Certificates.X509ChainElement
  class X509ChainElement : public ::Il2CppObject {
    public:
    // private System.Security.Cryptography.X509Certificates.X509Certificate2 certificate
    // Offset: 0x10
    System::Security::Cryptography::X509Certificates::X509Certificate2* certificate;
    // private System.Security.Cryptography.X509Certificates.X509ChainStatus[] status
    // Offset: 0x18
    ::Array<System::Security::Cryptography::X509Certificates::X509ChainStatus>* status;
    // private System.String info
    // Offset: 0x20
    ::Il2CppString* info;
    // private System.Security.Cryptography.X509Certificates.X509ChainStatusFlags compressed_status_flags
    // Offset: 0x28
    System::Security::Cryptography::X509Certificates::X509ChainStatusFlags compressed_status_flags;
    // System.Void .ctor(System.Security.Cryptography.X509Certificates.X509Certificate2 certificate)
    // Offset: 0x1465814
    static X509ChainElement* New_ctor(System::Security::Cryptography::X509Certificates::X509Certificate2* certificate);
    // public System.Security.Cryptography.X509Certificates.X509Certificate2 get_Certificate()
    // Offset: 0x1465898
    System::Security::Cryptography::X509Certificates::X509Certificate2* get_Certificate();
    // public System.Security.Cryptography.X509Certificates.X509ChainStatus[] get_ChainElementStatus()
    // Offset: 0x14658A0
    ::Array<System::Security::Cryptography::X509Certificates::X509ChainStatus>* get_ChainElementStatus();
    // System.Security.Cryptography.X509Certificates.X509ChainStatusFlags get_StatusFlags()
    // Offset: 0x14658A8
    System::Security::Cryptography::X509Certificates::X509ChainStatusFlags get_StatusFlags();
    // System.Void set_StatusFlags(System.Security.Cryptography.X509Certificates.X509ChainStatusFlags value)
    // Offset: 0x14658B0
    void set_StatusFlags(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags value);
    // private System.Int32 Count(System.Security.Cryptography.X509Certificates.X509ChainStatusFlags flags)
    // Offset: 0x14658B8
    int Count(System::Security::Cryptography::X509Certificates::X509ChainStatusFlags flags);
    // private System.Void Set(System.Security.Cryptography.X509Certificates.X509ChainStatus[] status, ref System.Int32 position, System.Security.Cryptography.X509Certificates.X509ChainStatusFlags flags, System.Security.Cryptography.X509Certificates.X509ChainStatusFlags mask)
    // Offset: 0x14658DC
    void Set(::Array<System::Security::Cryptography::X509Certificates::X509ChainStatus>* status, int& position, System::Security::Cryptography::X509Certificates::X509ChainStatusFlags flags, System::Security::Cryptography::X509Certificates::X509ChainStatusFlags mask);
    // System.Void UncompressFlags()
    // Offset: 0x1465B24
    void UncompressFlags();
  }; // System.Security.Cryptography.X509Certificates.X509ChainElement
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Security::Cryptography::X509Certificates::X509ChainElement*, "System.Security.Cryptography.X509Certificates", "X509ChainElement");
#pragma pack(pop)
