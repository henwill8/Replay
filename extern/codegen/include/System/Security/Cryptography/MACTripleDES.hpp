// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.KeyedHashAlgorithm
#include "System/Security/Cryptography/KeyedHashAlgorithm.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Skipping declaration: ICryptoTransform because it is already included!
  // Forward declaring type: CryptoStream
  class CryptoStream;
  // Forward declaring type: TailStream
  class TailStream;
  // Forward declaring type: TripleDES
  class TripleDES;
}
// Completed forward declares
// Type namespace: System.Security.Cryptography
namespace System::Security::Cryptography {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.Cryptography.MACTripleDES
  // [] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: CAB048
  class MACTripleDES : public System::Security::Cryptography::KeyedHashAlgorithm {
    public:
    // private System.Security.Cryptography.ICryptoTransform m_encryptor
    // Size: 0x8
    // Offset: 0x30
    System::Security::Cryptography::ICryptoTransform* m_encryptor;
    // Field size check
    static_assert(sizeof(System::Security::Cryptography::ICryptoTransform*) == 0x8);
    // private System.Security.Cryptography.CryptoStream _cs
    // Size: 0x8
    // Offset: 0x38
    System::Security::Cryptography::CryptoStream* cs;
    // Field size check
    static_assert(sizeof(System::Security::Cryptography::CryptoStream*) == 0x8);
    // private System.Security.Cryptography.TailStream _ts
    // Size: 0x8
    // Offset: 0x40
    System::Security::Cryptography::TailStream* ts;
    // Field size check
    static_assert(sizeof(System::Security::Cryptography::TailStream*) == 0x8);
    // private System.Int32 m_bytesPerBlock
    // Size: 0x4
    // Offset: 0x48
    int m_bytesPerBlock;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_bytesPerBlock and: des
    char __padding3[0x4] = {};
    // private System.Security.Cryptography.TripleDES des
    // Size: 0x8
    // Offset: 0x50
    System::Security::Cryptography::TripleDES* des;
    // Field size check
    static_assert(sizeof(System::Security::Cryptography::TripleDES*) == 0x8);
    // Creating value type constructor for type: MACTripleDES
    MACTripleDES(System::Security::Cryptography::ICryptoTransform* m_encryptor_ = {}, System::Security::Cryptography::CryptoStream* cs_ = {}, System::Security::Cryptography::TailStream* ts_ = {}, int m_bytesPerBlock_ = {}, System::Security::Cryptography::TripleDES* des_ = {}) noexcept : m_encryptor{m_encryptor_}, cs{cs_}, ts{ts_}, m_bytesPerBlock{m_bytesPerBlock_}, des{des_} {}
    // Deleting conversion operator: operator ::Array<uint8_t>*
    constexpr operator ::Array<uint8_t>*() const noexcept = delete;
    // public System.Void .ctor()
    // Offset: 0x1A469A4
    // Implemented from: System.Security.Cryptography.KeyedHashAlgorithm
    // Base method: System.Void KeyedHashAlgorithm::.ctor()
    // Base method: System.Void HashAlgorithm::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MACTripleDES* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Cryptography::MACTripleDES::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MACTripleDES*, creationType>()));
    }
    // public override System.Void Initialize()
    // Offset: 0x1A46B0C
    // Implemented from: System.Security.Cryptography.HashAlgorithm
    // Base method: System.Void HashAlgorithm::Initialize()
    void Initialize();
    // protected override System.Void HashCore(System.Byte[] rgbData, System.Int32 ibStart, System.Int32 cbSize)
    // Offset: 0x1A46B18
    // Implemented from: System.Security.Cryptography.HashAlgorithm
    // Base method: System.Void HashAlgorithm::HashCore(System.Byte[] rgbData, System.Int32 ibStart, System.Int32 cbSize)
    void HashCore(::Array<uint8_t>* rgbData, int ibStart, int cbSize);
    // protected override System.Byte[] HashFinal()
    // Offset: 0x1A46CA8
    // Implemented from: System.Security.Cryptography.HashAlgorithm
    // Base method: System.Byte[] HashAlgorithm::HashFinal()
    ::Array<uint8_t>* HashFinal();
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x1A46E24
    // Implemented from: System.Security.Cryptography.KeyedHashAlgorithm
    // Base method: System.Void KeyedHashAlgorithm::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
  }; // System.Security.Cryptography.MACTripleDES
  #pragma pack(pop)
  static check_size<sizeof(MACTripleDES), 80 + sizeof(System::Security::Cryptography::TripleDES*)> __System_Security_Cryptography_MACTripleDESSizeCheck;
  static_assert(sizeof(MACTripleDES) == 0x58);
}
DEFINE_IL2CPP_ARG_TYPE(System::Security::Cryptography::MACTripleDES*, "System.Security.Cryptography", "MACTripleDES");
