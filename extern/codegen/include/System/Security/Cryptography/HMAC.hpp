// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.KeyedHashAlgorithm
#include "System/Security/Cryptography/KeyedHashAlgorithm.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Skipping declaration: HashAlgorithm because it is already included!
}
// Completed forward declares
// Type namespace: System.Security.Cryptography
namespace System::Security::Cryptography {
  // Autogenerated type: System.Security.Cryptography.HMAC
  class HMAC : public System::Security::Cryptography::KeyedHashAlgorithm {
    public:
    // private System.Int32 blockSizeValue
    // Offset: 0x30
    int blockSizeValue;
    // System.String m_hashName
    // Offset: 0x38
    ::Il2CppString* m_hashName;
    // System.Security.Cryptography.HashAlgorithm m_hash1
    // Offset: 0x40
    System::Security::Cryptography::HashAlgorithm* m_hash1;
    // System.Security.Cryptography.HashAlgorithm m_hash2
    // Offset: 0x48
    System::Security::Cryptography::HashAlgorithm* m_hash2;
    // private System.Byte[] m_inner
    // Offset: 0x50
    ::Array<uint8_t>* m_inner;
    // private System.Byte[] m_outer
    // Offset: 0x58
    ::Array<uint8_t>* m_outer;
    // private System.Boolean m_hashing
    // Offset: 0x60
    bool m_hashing;
    // Deleting conversion operator: operator ::Array<uint8_t>*
    constexpr operator ::Array<uint8_t>*() const noexcept = delete;
    // protected System.Int32 get_BlockSizeValue()
    // Offset: 0x1696A88
    int get_BlockSizeValue();
    // protected System.Void set_BlockSizeValue(System.Int32 value)
    // Offset: 0x1696A90
    void set_BlockSizeValue(int value);
    // private System.Void UpdateIOPadBuffers()
    // Offset: 0x1696A98
    void UpdateIOPadBuffers();
    // System.Void InitializeKey(System.Byte[] key)
    // Offset: 0x1696C3C
    void InitializeKey(::Array<uint8_t>* key);
    // static public System.Security.Cryptography.HMAC Create()
    // Offset: 0x1696FAC
    static System::Security::Cryptography::HMAC* Create();
    // public override System.Byte[] get_Key()
    // Offset: 0x1696E84
    // Implemented from: System.Security.Cryptography.KeyedHashAlgorithm
    // Base method: System.Byte[] KeyedHashAlgorithm::get_Key()
    ::Array<uint8_t>* get_Key();
    // public override System.Void set_Key(System.Byte[] value)
    // Offset: 0x1696F04
    // Implemented from: System.Security.Cryptography.KeyedHashAlgorithm
    // Base method: System.Void KeyedHashAlgorithm::set_Key(System.Byte[] value)
    void set_Key(::Array<uint8_t>* value);
    // public override System.Void Initialize()
    // Offset: 0x1697050
    // Implemented from: System.Security.Cryptography.HashAlgorithm
    // Base method: System.Void HashAlgorithm::Initialize()
    void Initialize();
    // protected override System.Void HashCore(System.Byte[] rgb, System.Int32 ib, System.Int32 cb)
    // Offset: 0x16970A4
    // Implemented from: System.Security.Cryptography.HashAlgorithm
    // Base method: System.Void HashAlgorithm::HashCore(System.Byte[] rgb, System.Int32 ib, System.Int32 cb)
    void HashCore(::Array<uint8_t>* rgb, int ib, int cb);
    // protected override System.Byte[] HashFinal()
    // Offset: 0x1697320
    // Implemented from: System.Security.Cryptography.HashAlgorithm
    // Base method: System.Byte[] HashAlgorithm::HashFinal()
    ::Array<uint8_t>* HashFinal();
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x16976AC
    // Implemented from: System.Security.Cryptography.KeyedHashAlgorithm
    // Base method: System.Void KeyedHashAlgorithm::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // protected System.Void .ctor()
    // Offset: 0x1697874
    // Implemented from: System.Security.Cryptography.KeyedHashAlgorithm
    // Base method: System.Void KeyedHashAlgorithm::.ctor()
    // Base method: System.Void HashAlgorithm::.ctor()
    // Base method: System.Void Object::.ctor()
    static HMAC* New_ctor();
  }; // System.Security.Cryptography.HMAC
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Security::Cryptography::HMAC*, "System.Security.Cryptography", "HMAC");
#pragma pack(pop)
