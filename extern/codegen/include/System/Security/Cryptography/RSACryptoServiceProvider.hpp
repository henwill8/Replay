// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Cryptography.RSA
#include "System/Security/Cryptography/RSA.hpp"
// Including type: System.Security.Cryptography.CspProviderFlags
#include "System/Security/Cryptography/CspProviderFlags.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Mono::Security::Cryptography
namespace Mono::Security::Cryptography {
  // Forward declaring type: KeyPairPersistence
  class KeyPairPersistence;
  // Forward declaring type: RSAManaged
  class RSAManaged;
}
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: HashAlgorithmName
  struct HashAlgorithmName;
  // Forward declaring type: CspParameters
  class CspParameters;
  // Forward declaring type: HashAlgorithm
  class HashAlgorithm;
  // Forward declaring type: RSASignaturePadding
  class RSASignaturePadding;
  // Forward declaring type: RSAParameters
  struct RSAParameters;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: EventArgs
  class EventArgs;
}
// Completed forward declares
// Type namespace: System.Security.Cryptography
namespace System::Security::Cryptography {
  // Autogenerated type: System.Security.Cryptography.RSACryptoServiceProvider
  class RSACryptoServiceProvider : public System::Security::Cryptography::RSA {
    public:
    // private Mono.Security.Cryptography.KeyPairPersistence store
    // Offset: 0x20
    Mono::Security::Cryptography::KeyPairPersistence* store;
    // private System.Boolean persistKey
    // Offset: 0x28
    bool persistKey;
    // private System.Boolean persisted
    // Offset: 0x29
    bool persisted;
    // private System.Boolean privateKeyExportable
    // Offset: 0x2A
    bool privateKeyExportable;
    // private System.Boolean m_disposed
    // Offset: 0x2B
    bool m_disposed;
    // private Mono.Security.Cryptography.RSAManaged rsa
    // Offset: 0x30
    Mono::Security::Cryptography::RSAManaged* rsa;
    // Get static field: static private System.Security.Cryptography.CspProviderFlags s_UseMachineKeyStore
    static System::Security::Cryptography::CspProviderFlags _get_s_UseMachineKeyStore();
    // Set static field: static private System.Security.Cryptography.CspProviderFlags s_UseMachineKeyStore
    static void _set_s_UseMachineKeyStore(System::Security::Cryptography::CspProviderFlags value);
    // static public System.Boolean get_UseMachineKeyStore()
    // Offset: 0x169E8F0
    static bool get_UseMachineKeyStore();
    // static private System.Int32 GetAlgorithmId(System.Security.Cryptography.HashAlgorithmName hashAlgorithm)
    // Offset: 0x169E994
    static int GetAlgorithmId(System::Security::Cryptography::HashAlgorithmName hashAlgorithm);
    // static private System.Exception PaddingModeNotSupported()
    // Offset: 0x169ED54
    static System::Exception* PaddingModeNotSupported();
    // public System.Void .ctor(System.Security.Cryptography.CspParameters parameters)
    // Offset: 0x169EEC0
    static RSACryptoServiceProvider* New_ctor(System::Security::Cryptography::CspParameters* parameters);
    // public System.Void .ctor(System.Int32 dwKeySize)
    // Offset: 0x169EE84
    static RSACryptoServiceProvider* New_ctor(int dwKeySize);
    // public System.Void .ctor(System.Int32 dwKeySize, System.Security.Cryptography.CspParameters parameters)
    // Offset: 0x169EECC
    static RSACryptoServiceProvider* New_ctor(int dwKeySize, System::Security::Cryptography::CspParameters* parameters);
    // private System.Void Common(System.Int32 dwKeySize, System.Boolean parameters)
    // Offset: 0x169EF38
    void Common(int dwKeySize, bool parameters);
    // private System.Void Common(System.Security.Cryptography.CspParameters p)
    // Offset: 0x169F16C
    void Common(System::Security::Cryptography::CspParameters* p);
    // public System.Boolean get_PublicOnly()
    // Offset: 0x169F328
    bool get_PublicOnly();
    // static private System.Security.Cryptography.HashAlgorithm InternalHashToHashAlgorithm(System.Int32 calgHash)
    // Offset: 0x169F54C
    static System::Security::Cryptography::HashAlgorithm* InternalHashToHashAlgorithm(int calgHash);
    // private System.Boolean VerifyHash(System.Byte[] rgbHash, System.Int32 calgHash, System.Byte[] rgbSignature)
    // Offset: 0x169EDE4
    bool VerifyHash(::Array<uint8_t>* rgbHash, int calgHash, ::Array<uint8_t>* rgbSignature);
    // private System.Void OnKeyGenerated(System.Object sender, System.EventArgs e)
    // Offset: 0x169F698
    void OnKeyGenerated(::Il2CppObject* sender, System::EventArgs* e);
    // protected override System.Byte[] HashData(System.Byte[] data, System.Int32 offset, System.Int32 count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm)
    // Offset: 0x169E94C
    // Implemented from: System.Security.Cryptography.RSA
    // Base method: System.Byte[] RSA::HashData(System.Byte[] data, System.Int32 offset, System.Int32 count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm)
    ::Array<uint8_t>* HashData(::Array<uint8_t>* data, int offset, int count, System::Security::Cryptography::HashAlgorithmName hashAlgorithm);
    // public override System.Boolean VerifyHash(System.Byte[] hash, System.Byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding)
    // Offset: 0x169EB0C
    // Implemented from: System.Security.Cryptography.RSA
    // Base method: System.Boolean RSA::VerifyHash(System.Byte[] hash, System.Byte[] signature, System.Security.Cryptography.HashAlgorithmName hashAlgorithm, System.Security.Cryptography.RSASignaturePadding padding)
    bool VerifyHash(::Array<uint8_t>* hash, ::Array<uint8_t>* signature, System::Security::Cryptography::HashAlgorithmName hashAlgorithm, System::Security::Cryptography::RSASignaturePadding* padding);
    // public System.Void .ctor()
    // Offset: 0x169DC64
    // Implemented from: System.Security.Cryptography.RSA
    // Base method: System.Void RSA::.ctor()
    // Base method: System.Void AsymmetricAlgorithm::.ctor()
    // Base method: System.Void Object::.ctor()
    static RSACryptoServiceProvider* New_ctor();
    // protected override System.Void Finalize()
    // Offset: 0x169F294
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
    // public override System.Int32 get_KeySize()
    // Offset: 0x169F308
    // Implemented from: System.Security.Cryptography.AsymmetricAlgorithm
    // Base method: System.Int32 AsymmetricAlgorithm::get_KeySize()
    int get_KeySize();
    // public override System.Byte[] EncryptValue(System.Byte[] rgb)
    // Offset: 0x169F344
    // Implemented from: System.Security.Cryptography.RSA
    // Base method: System.Byte[] RSA::EncryptValue(System.Byte[] rgb)
    ::Array<uint8_t>* EncryptValue(::Array<uint8_t>* rgb);
    // public override System.Security.Cryptography.RSAParameters ExportParameters(System.Boolean includePrivateParameters)
    // Offset: 0x169F368
    // Implemented from: System.Security.Cryptography.RSA
    // Base method: System.Security.Cryptography.RSAParameters RSA::ExportParameters(System.Boolean includePrivateParameters)
    System::Security::Cryptography::RSAParameters ExportParameters(bool includePrivateParameters);
    // public override System.Void ImportParameters(System.Security.Cryptography.RSAParameters parameters)
    // Offset: 0x169F4F4
    // Implemented from: System.Security.Cryptography.RSA
    // Base method: System.Void RSA::ImportParameters(System.Security.Cryptography.RSAParameters parameters)
    void ImportParameters(System::Security::Cryptography::RSAParameters parameters);
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x169F638
    // Implemented from: System.Security.Cryptography.AsymmetricAlgorithm
    // Base method: System.Void AsymmetricAlgorithm::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
  }; // System.Security.Cryptography.RSACryptoServiceProvider
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Security::Cryptography::RSACryptoServiceProvider*, "System.Security.Cryptography", "RSACryptoServiceProvider");
#pragma pack(pop)
