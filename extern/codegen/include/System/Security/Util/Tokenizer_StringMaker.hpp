// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Util.Tokenizer
#include "System/Security/Util/Tokenizer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: System.Security.Util
namespace System::Security::Util {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.Util.Tokenizer/StringMaker
  // [] Offset: FFFFFFFF
  class Tokenizer::StringMaker : public ::Il2CppObject {
    public:
    // private System.String[] aStrings
    // Size: 0x8
    // Offset: 0x10
    ::Array<::Il2CppString*>* aStrings;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // private System.UInt32 cStringsMax
    // Size: 0x4
    // Offset: 0x18
    uint cStringsMax;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 cStringsUsed
    // Size: 0x4
    // Offset: 0x1C
    uint cStringsUsed;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.Text.StringBuilder _outStringBuilder
    // Size: 0x8
    // Offset: 0x20
    System::Text::StringBuilder* outStringBuilder;
    // Field size check
    static_assert(sizeof(System::Text::StringBuilder*) == 0x8);
    // public System.Char[] _outChars
    // Size: 0x8
    // Offset: 0x28
    ::Array<::Il2CppChar>* outChars;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppChar>*) == 0x8);
    // public System.Int32 _outIndex
    // Size: 0x4
    // Offset: 0x30
    int outIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: StringMaker
    StringMaker(::Array<::Il2CppString*>* aStrings_ = {}, uint cStringsMax_ = {}, uint cStringsUsed_ = {}, System::Text::StringBuilder* outStringBuilder_ = {}, ::Array<::Il2CppChar>* outChars_ = {}, int outIndex_ = {}) noexcept : aStrings{aStrings_}, cStringsMax{cStringsMax_}, cStringsUsed{cStringsUsed_}, outStringBuilder{outStringBuilder_}, outChars{outChars_}, outIndex{outIndex_} {}
    // static private System.UInt32 HashString(System.String str)
    // Offset: 0x14D79E8
    static uint HashString(::Il2CppString* str);
    // static private System.UInt32 HashCharArray(System.Char[] a, System.Int32 l)
    // Offset: 0x14D7A54
    static uint HashCharArray(::Array<::Il2CppChar>* a, int l);
    // private System.Boolean CompareStringAndChars(System.String str, System.Char[] a, System.Int32 l)
    // Offset: 0x14D7B58
    bool CompareStringAndChars(::Il2CppString* str, ::Array<::Il2CppChar>* a, int l);
    // public System.String MakeString()
    // Offset: 0x14D2720
    ::Il2CppString* MakeString();
    // public System.Void .ctor()
    // Offset: 0x14D7ABC
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Tokenizer::StringMaker* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Util::Tokenizer::StringMaker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Tokenizer::StringMaker*, creationType>()));
    }
  }; // System.Security.Util.Tokenizer/StringMaker
  #pragma pack(pop)
  static check_size<sizeof(Tokenizer::StringMaker), 48 + sizeof(int)> __System_Security_Util_Tokenizer_StringMakerSizeCheck;
  static_assert(sizeof(Tokenizer::StringMaker) == 0x34);
}
DEFINE_IL2CPP_ARG_TYPE(System::Security::Util::Tokenizer::StringMaker*, "System.Security.Util", "Tokenizer/StringMaker");
