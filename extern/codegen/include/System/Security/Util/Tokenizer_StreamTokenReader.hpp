// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Util.Tokenizer
#include "System/Security/Util/Tokenizer.hpp"
// Including type: System.Security.Util.Tokenizer/ITokenReader
#include "System/Security/Util/Tokenizer_ITokenReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: StreamReader
  class StreamReader;
}
// Completed forward declares
// Type namespace: System.Security.Util
namespace System::Security::Util {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.Util.Tokenizer/StreamTokenReader
  // [] Offset: FFFFFFFF
  class Tokenizer::StreamTokenReader : public ::Il2CppObject/*, public System::Security::Util::Tokenizer::ITokenReader*/ {
    public:
    // System.IO.StreamReader _in
    // Size: 0x8
    // Offset: 0x10
    System::IO::StreamReader* in;
    // Field size check
    static_assert(sizeof(System::IO::StreamReader*) == 0x8);
    // System.Int32 _numCharRead
    // Size: 0x4
    // Offset: 0x18
    int numCharRead;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: StreamTokenReader
    StreamTokenReader(System::IO::StreamReader* in_ = {}, int numCharRead_ = {}) noexcept : in{in_}, numCharRead{numCharRead_} {}
    // Creating interface conversion operator: operator System::Security::Util::Tokenizer::ITokenReader
    operator System::Security::Util::Tokenizer::ITokenReader() noexcept {
      return *reinterpret_cast<System::Security::Util::Tokenizer::ITokenReader*>(this);
    }
    // System.Void .ctor(System.IO.StreamReader input)
    // Offset: 0x14D72F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Tokenizer::StreamTokenReader* New_ctor(System::IO::StreamReader* input) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Util::Tokenizer::StreamTokenReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Tokenizer::StreamTokenReader*, creationType>(input)));
    }
    // System.Int32 get_NumCharEncountered()
    // Offset: 0x14D79E0
    int get_NumCharEncountered();
    // public System.Int32 Read()
    // Offset: 0x14D7998
    // Implemented from: System.Security.Util.Tokenizer/ITokenReader
    // Base method: System.Int32 ITokenReader::Read()
    int Read();
  }; // System.Security.Util.Tokenizer/StreamTokenReader
  #pragma pack(pop)
  static check_size<sizeof(Tokenizer::StreamTokenReader), 24 + sizeof(int)> __System_Security_Util_Tokenizer_StreamTokenReaderSizeCheck;
  static_assert(sizeof(Tokenizer::StreamTokenReader) == 0x1C);
}
DEFINE_IL2CPP_ARG_TYPE(System::Security::Util::Tokenizer::StreamTokenReader*, "System.Security.Util", "Tokenizer/StreamTokenReader");
