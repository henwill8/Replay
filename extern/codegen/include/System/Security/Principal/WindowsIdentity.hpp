// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Security.Claims.ClaimsIdentity
#include "System/Security/Claims/ClaimsIdentity.hpp"
// Including type: System.Runtime.Serialization.IDeserializationCallback
#include "System/Runtime/Serialization/IDeserializationCallback.hpp"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: System.Security.Principal.WindowsAccountType
#include "System/Security/Principal/WindowsAccountType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Forward declaring namespace: System::Security::Principal
namespace System::Security::Principal {
  // Forward declaring type: WindowsImpersonationContext
  class WindowsImpersonationContext;
}
// Completed forward declares
// Type namespace: System.Security.Principal
namespace System::Security::Principal {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.Principal.WindowsIdentity
  // [] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: CAAD24
  class WindowsIdentity : public System::Security::Claims::ClaimsIdentity/*, public System::Runtime::Serialization::IDeserializationCallback, public System::Runtime::Serialization::ISerializable, public System::IDisposable*/ {
    public:
    // private System.IntPtr _token
    // Size: 0x8
    // Offset: 0x78
    System::IntPtr token;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // private System.String _type
    // Size: 0x8
    // Offset: 0x80
    ::Il2CppString* type;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Security.Principal.WindowsAccountType _account
    // Size: 0x4
    // Offset: 0x88
    System::Security::Principal::WindowsAccountType account;
    // Field size check
    static_assert(sizeof(System::Security::Principal::WindowsAccountType) == 0x4);
    // private System.Boolean _authenticated
    // Size: 0x1
    // Offset: 0x8C
    bool authenticated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: authenticated and: name
    char __padding3[0x3] = {};
    // private System.String _name
    // Size: 0x8
    // Offset: 0x90
    ::Il2CppString* name;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Runtime.Serialization.SerializationInfo _info
    // Size: 0x8
    // Offset: 0x98
    System::Runtime::Serialization::SerializationInfo* info;
    // Field size check
    static_assert(sizeof(System::Runtime::Serialization::SerializationInfo*) == 0x8);
    // Creating value type constructor for type: WindowsIdentity
    WindowsIdentity(System::IntPtr token_ = {}, ::Il2CppString* type_ = {}, System::Security::Principal::WindowsAccountType account_ = {}, bool authenticated_ = {}, ::Il2CppString* name_ = {}, System::Runtime::Serialization::SerializationInfo* info_ = {}) noexcept : token{token_}, type{type_}, account{account_}, authenticated{authenticated_}, name{name_}, info{info_} {}
    // Creating interface conversion operator: operator System::Runtime::Serialization::IDeserializationCallback
    operator System::Runtime::Serialization::IDeserializationCallback() noexcept {
      return *reinterpret_cast<System::Runtime::Serialization::IDeserializationCallback*>(this);
    }
    // Creating interface conversion operator: operator System::Runtime::Serialization::ISerializable
    operator System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // Get static field: static private System.IntPtr invalidWindows
    static System::IntPtr _get_invalidWindows();
    // Set static field: static private System.IntPtr invalidWindows
    static void _set_invalidWindows(System::IntPtr value);
    // public System.Void .ctor(System.IntPtr userToken, System.String type, System.Security.Principal.WindowsAccountType acctType, System.Boolean isAuthenticated)
    // Offset: 0x14D0E5C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WindowsIdentity* New_ctor(System::IntPtr userToken, ::Il2CppString* type, System::Security::Principal::WindowsAccountType acctType, bool isAuthenticated) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Principal::WindowsIdentity::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WindowsIdentity*, creationType>(userToken, type, acctType, isAuthenticated)));
    }
    // System.Void .ctor(System.Security.Claims.ClaimsIdentity claimsIdentity, System.IntPtr userToken)
    // Offset: 0x14D105C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WindowsIdentity* New_ctor(System::Security::Claims::ClaimsIdentity* claimsIdentity, System::IntPtr userToken) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Principal::WindowsIdentity::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WindowsIdentity*, creationType>(claimsIdentity, userToken)));
    }
    // static public System.Security.Principal.WindowsIdentity GetCurrent()
    // Offset: 0x14D1140
    static System::Security::Principal::WindowsIdentity* GetCurrent();
    // public System.Security.Principal.WindowsImpersonationContext Impersonate()
    // Offset: 0x14D11D0
    System::Security::Principal::WindowsImpersonationContext* Impersonate();
    // System.Security.Claims.ClaimsIdentity CloneAsBase()
    // Offset: 0x14D1760
    System::Security::Claims::ClaimsIdentity* CloneAsBase();
    // System.IntPtr GetTokenInternal()
    // Offset: 0x14D1768
    System::IntPtr GetTokenInternal();
    // private System.Void SetToken(System.IntPtr token)
    // Offset: 0x14D0ED4
    void SetToken(System::IntPtr token);
    // static System.IntPtr GetCurrentToken()
    // Offset: 0x14D11CC
    static System::IntPtr GetCurrentToken();
    // static private System.String GetTokenName(System.IntPtr token)
    // Offset: 0x14D1374
    static ::Il2CppString* GetTokenName(System::IntPtr token);
    // static private System.Void .cctor()
    // Offset: 0x14D1770
    static void _cctor();
    // public System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x14D1028
    // Implemented from: System.Security.Claims.ClaimsIdentity
    // Base method: System.Void ClaimsIdentity::.ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WindowsIdentity* New_ctor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Principal::WindowsIdentity::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WindowsIdentity*, creationType>(info, context)));
    }
    // public System.Void Dispose()
    // Offset: 0x14D10FC
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
    // public override System.String get_AuthenticationType()
    // Offset: 0x14D12E0
    // Implemented from: System.Security.Claims.ClaimsIdentity
    // Base method: System.String ClaimsIdentity::get_AuthenticationType()
    ::Il2CppString* get_AuthenticationType();
    // public override System.String get_Name()
    // Offset: 0x14D12E8
    // Implemented from: System.Security.Claims.ClaimsIdentity
    // Base method: System.String ClaimsIdentity::get_Name()
    ::Il2CppString* get_Name();
    // private System.Void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object sender)
    // Offset: 0x14D1378
    // Implemented from: System.Runtime.Serialization.IDeserializationCallback
    // Base method: System.Void IDeserializationCallback::OnDeserialization(System.Object sender)
    void System_Runtime_Serialization_IDeserializationCallback_OnDeserialization(::Il2CppObject* sender);
    // private System.Void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x14D1640
    // Implemented from: System.Runtime.Serialization.ISerializable
    // Base method: System.Void ISerializable::GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    void System_Runtime_Serialization_ISerializable_GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
  }; // System.Security.Principal.WindowsIdentity
  #pragma pack(pop)
  static check_size<sizeof(WindowsIdentity), 152 + sizeof(System::Runtime::Serialization::SerializationInfo*)> __System_Security_Principal_WindowsIdentitySizeCheck;
  static_assert(sizeof(WindowsIdentity) == 0xA0);
}
DEFINE_IL2CPP_ARG_TYPE(System::Security::Principal::WindowsIdentity*, "System.Security.Principal", "WindowsIdentity");
