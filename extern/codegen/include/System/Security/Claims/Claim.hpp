// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IDictionary_2;
}
// Forward declaring namespace: System::Security::Claims
namespace System::Security::Claims {
  // Forward declaring type: ClaimsIdentity
  class ClaimsIdentity;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: StreamingContext
  struct StreamingContext;
}
// Completed forward declares
// Type namespace: System.Security.Claims
namespace System::Security::Claims {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: System.Security.Claims.Claim
  // [] Offset: FFFFFFFF
  class Claim : public ::Il2CppObject {
    public:
    // private System.String m_issuer
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* m_issuer;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String m_originalIssuer
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* m_originalIssuer;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String m_type
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppString* m_type;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String m_value
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppString* m_value;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String m_valueType
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppString* m_valueType;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Byte[] m_userSerializationData
    // Size: 0x8
    // Offset: 0x38
    ::Array<uint8_t>* m_userSerializationData;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,System.String> m_properties
    // Size: 0x8
    // Offset: 0x40
    System::Collections::Generic::Dictionary_2<::Il2CppString*, ::Il2CppString*>* m_properties;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<::Il2CppString*, ::Il2CppString*>*) == 0x8);
    // private System.Object m_propertyLock
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppObject* m_propertyLock;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Security.Claims.ClaimsIdentity m_subject
    // Size: 0x8
    // Offset: 0x50
    System::Security::Claims::ClaimsIdentity* m_subject;
    // Field size check
    static_assert(sizeof(System::Security::Claims::ClaimsIdentity*) == 0x8);
    // Creating value type constructor for type: Claim
    Claim(::Il2CppString* m_issuer_ = {}, ::Il2CppString* m_originalIssuer_ = {}, ::Il2CppString* m_type_ = {}, ::Il2CppString* m_value_ = {}, ::Il2CppString* m_valueType_ = {}, ::Array<uint8_t>* m_userSerializationData_ = {}, System::Collections::Generic::Dictionary_2<::Il2CppString*, ::Il2CppString*>* m_properties_ = {}, ::Il2CppObject* m_propertyLock_ = {}, System::Security::Claims::ClaimsIdentity* m_subject_ = {}) noexcept : m_issuer{m_issuer_}, m_originalIssuer{m_originalIssuer_}, m_type{m_type_}, m_value{m_value_}, m_valueType{m_valueType_}, m_userSerializationData{m_userSerializationData_}, m_properties{m_properties_}, m_propertyLock{m_propertyLock_}, m_subject{m_subject_} {}
    // public System.Void .ctor(System.String type, System.String value, System.String valueType, System.String issuer, System.String originalIssuer, System.Security.Claims.ClaimsIdentity subject)
    // Offset: 0x176798C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Claim* New_ctor(::Il2CppString* type, ::Il2CppString* value, ::Il2CppString* valueType, ::Il2CppString* issuer, ::Il2CppString* originalIssuer, System::Security::Claims::ClaimsIdentity* subject) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Claims::Claim::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Claim*, creationType>(type, value, valueType, issuer, originalIssuer, subject)));
    }
    // System.Void .ctor(System.String type, System.String value, System.String valueType, System.String issuer, System.String originalIssuer, System.Security.Claims.ClaimsIdentity subject, System.String propertyKey, System.String propertyValue)
    // Offset: 0x17679B0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Claim* New_ctor(::Il2CppString* type, ::Il2CppString* value, ::Il2CppString* valueType, ::Il2CppString* issuer, ::Il2CppString* originalIssuer, System::Security::Claims::ClaimsIdentity* subject, ::Il2CppString* propertyKey, ::Il2CppString* propertyValue) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Claims::Claim::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Claim*, creationType>(type, value, valueType, issuer, originalIssuer, subject, propertyKey, propertyValue)));
    }
    // protected System.Void .ctor(System.Security.Claims.Claim other, System.Security.Claims.ClaimsIdentity subject)
    // Offset: 0x1767D4C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Claim* New_ctor(System::Security::Claims::Claim* other, System::Security::Claims::ClaimsIdentity* subject) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Security::Claims::Claim::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Claim*, creationType>(other, subject)));
    }
    // private System.Void OnDeserializedMethod(System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x1768000
    void OnDeserializedMethod(System::Runtime::Serialization::StreamingContext context);
    // public System.Collections.Generic.IDictionary`2<System.String,System.String> get_Properties()
    // Offset: 0x1767C3C
    System::Collections::Generic::IDictionary_2<::Il2CppString*, ::Il2CppString*>* get_Properties();
    // public System.Security.Claims.ClaimsIdentity get_Subject()
    // Offset: 0x1768068
    System::Security::Claims::ClaimsIdentity* get_Subject();
    // System.Void set_Subject(System.Security.Claims.ClaimsIdentity value)
    // Offset: 0x1768070
    void set_Subject(System::Security::Claims::ClaimsIdentity* value);
    // public System.String get_Type()
    // Offset: 0x1768078
    ::Il2CppString* get_Type();
    // public System.String get_Value()
    // Offset: 0x1768080
    ::Il2CppString* get_Value();
    // public System.Security.Claims.Claim Clone(System.Security.Claims.ClaimsIdentity identity)
    // Offset: 0x1768088
    System::Security::Claims::Claim* Clone(System::Security::Claims::ClaimsIdentity* identity);
    // public override System.String ToString()
    // Offset: 0x17680F8
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
  }; // System.Security.Claims.Claim
  #pragma pack(pop)
  static check_size<sizeof(Claim), 80 + sizeof(System::Security::Claims::ClaimsIdentity*)> __System_Security_Claims_ClaimSizeCheck;
  static_assert(sizeof(Claim) == 0x58);
}
DEFINE_IL2CPP_ARG_TYPE(System::Security::Claims::Claim*, "System.Security.Claims", "Claim");
