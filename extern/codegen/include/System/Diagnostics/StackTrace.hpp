// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Diagnostics
namespace System::Diagnostics {
  // Forward declaring type: StackFrame
  class StackFrame;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MethodBase
  class MethodBase;
}
// Completed forward declares
// Type namespace: System.Diagnostics
namespace System::Diagnostics {
  // Size: 0x21
  #pragma pack(push, 1)
  // Autogenerated type: System.Diagnostics.StackTrace
  // [] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: CAE504
  // [MonoTODOAttribute] Offset: CAE504
  class StackTrace : public ::Il2CppObject {
    public:
    // Nested type: System::Diagnostics::StackTrace::TraceFormat
    struct TraceFormat;
    // private System.Diagnostics.StackFrame[] frames
    // Size: 0x8
    // Offset: 0x10
    ::Array<System::Diagnostics::StackFrame*>* frames;
    // Field size check
    static_assert(sizeof(::Array<System::Diagnostics::StackFrame*>*) == 0x8);
    // private readonly System.Diagnostics.StackTrace[] captured_traces
    // Size: 0x8
    // Offset: 0x18
    ::Array<System::Diagnostics::StackTrace*>* captured_traces;
    // Field size check
    static_assert(sizeof(::Array<System::Diagnostics::StackTrace*>*) == 0x8);
    // private System.Boolean debug_info
    // Size: 0x1
    // Offset: 0x20
    bool debug_info;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: StackTrace
    StackTrace(::Array<System::Diagnostics::StackFrame*>* frames_ = {}, ::Array<System::Diagnostics::StackTrace*>* captured_traces_ = {}, bool debug_info_ = {}) noexcept : frames{frames_}, captured_traces{captured_traces_}, debug_info{debug_info_} {}
    // static field const value: static public System.Int32 METHODS_TO_SKIP
    static constexpr const int METHODS_TO_SKIP = 0;
    // Get static field: static public System.Int32 METHODS_TO_SKIP
    static int _get_METHODS_TO_SKIP();
    // Set static field: static public System.Int32 METHODS_TO_SKIP
    static void _set_METHODS_TO_SKIP(int value);
    // Get static field: static private System.Boolean isAotidSet
    static bool _get_isAotidSet();
    // Set static field: static private System.Boolean isAotidSet
    static void _set_isAotidSet(bool value);
    // Get static field: static private System.String aotid
    static ::Il2CppString* _get_aotid();
    // Set static field: static private System.String aotid
    static void _set_aotid(::Il2CppString* value);
    // public System.Void .ctor(System.Boolean fNeedFileInfo)
    // Offset: 0x1A0F9CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StackTrace* New_ctor(bool fNeedFileInfo) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::StackTrace::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StackTrace*, creationType>(fNeedFileInfo)));
    }
    // public System.Void .ctor(System.Int32 skipFrames, System.Boolean fNeedFileInfo)
    // Offset: 0x1A0FA00
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StackTrace* New_ctor(int skipFrames, bool fNeedFileInfo) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::StackTrace::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StackTrace*, creationType>(skipFrames, fNeedFileInfo)));
    }
    // private System.Void init_frames(System.Int32 skipFrames, System.Boolean fNeedFileInfo)
    // Offset: 0x1A0F830
    void init_frames(int skipFrames, bool fNeedFileInfo);
    // static private System.Diagnostics.StackFrame[] get_trace(System.Exception e, System.Int32 skipFrames, System.Boolean fNeedFileInfo)
    // Offset: 0x1A0FA40
    static ::Array<System::Diagnostics::StackFrame*>* get_trace(System::Exception* e, int skipFrames, bool fNeedFileInfo);
    // public System.Void .ctor(System.Exception e, System.Boolean fNeedFileInfo)
    // Offset: 0x1A0FA48
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StackTrace* New_ctor(System::Exception* e, bool fNeedFileInfo) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::StackTrace::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StackTrace*, creationType>(e, fNeedFileInfo)));
    }
    // public System.Void .ctor(System.Exception e, System.Int32 skipFrames, System.Boolean fNeedFileInfo)
    // Offset: 0x1A0FA54
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StackTrace* New_ctor(System::Exception* e, int skipFrames, bool fNeedFileInfo) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::StackTrace::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StackTrace*, creationType>(e, skipFrames, fNeedFileInfo)));
    }
    // public System.Int32 get_FrameCount()
    // Offset: 0x1A0FB64
    int get_FrameCount();
    // public System.Diagnostics.StackFrame GetFrame(System.Int32 index)
    // Offset: 0x1A0FB7C
    System::Diagnostics::StackFrame* GetFrame(int index);
    // static private System.String GetAotId()
    // Offset: 0x1A0FBE8
    static ::Il2CppString* GetAotId();
    // private System.Boolean AddFrames(System.Text.StringBuilder sb)
    // Offset: 0x1A0FCDC
    bool AddFrames(System::Text::StringBuilder* sb);
    // System.Void GetFullNameForStackTrace(System.Text.StringBuilder sb, System.Reflection.MethodBase mi)
    // Offset: 0x1A10168
    void GetFullNameForStackTrace(System::Text::StringBuilder* sb, System::Reflection::MethodBase* mi);
    // System.String ToString(System.Diagnostics.StackTrace/TraceFormat traceFormat)
    // Offset: 0x1A106AC
    ::Il2CppString* ToString(System::Diagnostics::StackTrace::TraceFormat traceFormat);
    // public System.Void .ctor()
    // Offset: 0x1A0F800
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StackTrace* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::StackTrace::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StackTrace*, creationType>()));
    }
    // public override System.String ToString()
    // Offset: 0x1A10580
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
  }; // System.Diagnostics.StackTrace
  #pragma pack(pop)
  static check_size<sizeof(StackTrace), 32 + sizeof(bool)> __System_Diagnostics_StackTraceSizeCheck;
  static_assert(sizeof(StackTrace) == 0x21);
}
DEFINE_IL2CPP_ARG_TYPE(System::Diagnostics::StackTrace*, "System.Diagnostics", "StackTrace");
