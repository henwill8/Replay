// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: System.Diagnostics.Tracing.EventLevel
#include "System/Diagnostics/Tracing/EventLevel.hpp"
// Including type: System.Diagnostics.Tracing.EventKeywords
#include "System/Diagnostics/Tracing/EventKeywords.hpp"
// Including type: System.Diagnostics.Tracing.EventTask
#include "System/Diagnostics/Tracing/EventTask.hpp"
// Including type: System.Diagnostics.Tracing.EventTags
#include "System/Diagnostics/Tracing/EventTags.hpp"
// Including type: System.Diagnostics.Tracing.EventActivityOptions
#include "System/Diagnostics/Tracing/EventActivityOptions.hpp"
// Including type: System.Diagnostics.Tracing.EventOpcode
#include "System/Diagnostics/Tracing/EventOpcode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Size: 0x3D
  #pragma pack(push, 1)
  // Autogenerated type: System.Diagnostics.Tracing.EventAttribute
  // [] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: CAE6B4
  class EventAttribute : public System::Attribute {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xCAFDDC
    // private System.Int32 <EventId>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int EventId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xCAFDEC
    // private System.Diagnostics.Tracing.EventLevel <Level>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    System::Diagnostics::Tracing::EventLevel Level;
    // Field size check
    static_assert(sizeof(System::Diagnostics::Tracing::EventLevel) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xCAFDFC
    // private System.Diagnostics.Tracing.EventKeywords <Keywords>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    System::Diagnostics::Tracing::EventKeywords Keywords;
    // Field size check
    static_assert(sizeof(System::Diagnostics::Tracing::EventKeywords) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xCAFE0C
    // private System.Diagnostics.Tracing.EventTask <Task>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    System::Diagnostics::Tracing::EventTask Task;
    // Field size check
    static_assert(sizeof(System::Diagnostics::Tracing::EventTask) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xCAFE1C
    // private System.Byte <Version>k__BackingField
    // Size: 0x1
    // Offset: 0x24
    uint8_t Version;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: Version and: Message
    char __padding4[0x3] = {};
    // [CompilerGeneratedAttribute] Offset: 0xCAFE2C
    // private System.String <Message>k__BackingField
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppString* Message;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xCAFE3C
    // private System.Diagnostics.Tracing.EventTags <Tags>k__BackingField
    // Size: 0x4
    // Offset: 0x30
    System::Diagnostics::Tracing::EventTags Tags;
    // Field size check
    static_assert(sizeof(System::Diagnostics::Tracing::EventTags) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xCAFE4C
    // private System.Diagnostics.Tracing.EventActivityOptions <ActivityOptions>k__BackingField
    // Size: 0x4
    // Offset: 0x34
    System::Diagnostics::Tracing::EventActivityOptions ActivityOptions;
    // Field size check
    static_assert(sizeof(System::Diagnostics::Tracing::EventActivityOptions) == 0x4);
    // private System.Diagnostics.Tracing.EventOpcode m_opcode
    // Size: 0x4
    // Offset: 0x38
    System::Diagnostics::Tracing::EventOpcode m_opcode;
    // Field size check
    static_assert(sizeof(System::Diagnostics::Tracing::EventOpcode) == 0x4);
    // private System.Boolean m_opcodeSet
    // Size: 0x1
    // Offset: 0x3C
    bool m_opcodeSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: EventAttribute
    EventAttribute(int EventId_ = {}, System::Diagnostics::Tracing::EventLevel Level_ = {}, System::Diagnostics::Tracing::EventKeywords Keywords_ = {}, System::Diagnostics::Tracing::EventTask Task_ = {}, uint8_t Version_ = {}, ::Il2CppString* Message_ = {}, System::Diagnostics::Tracing::EventTags Tags_ = {}, System::Diagnostics::Tracing::EventActivityOptions ActivityOptions_ = {}, System::Diagnostics::Tracing::EventOpcode m_opcode_ = {}, bool m_opcodeSet_ = {}) noexcept : EventId{EventId_}, Level{Level_}, Keywords{Keywords_}, Task{Task_}, Version{Version_}, Message{Message_}, Tags{Tags_}, ActivityOptions{ActivityOptions_}, m_opcode{m_opcode_}, m_opcodeSet{m_opcodeSet_} {}
    // public System.Void .ctor(System.Int32 eventId)
    // Offset: 0x151559C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EventAttribute* New_ctor(int eventId) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Tracing::EventAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EventAttribute*, creationType>(eventId)));
    }
    // public System.Int32 get_EventId()
    // Offset: 0x15155D0
    int get_EventId();
    // private System.Void set_EventId(System.Int32 value)
    // Offset: 0x15155D8
    void set_EventId(int value);
    // public System.Diagnostics.Tracing.EventLevel get_Level()
    // Offset: 0x15155E0
    System::Diagnostics::Tracing::EventLevel get_Level();
    // public System.Void set_Level(System.Diagnostics.Tracing.EventLevel value)
    // Offset: 0x15155E8
    void set_Level(System::Diagnostics::Tracing::EventLevel value);
    // public System.Diagnostics.Tracing.EventKeywords get_Keywords()
    // Offset: 0x15155F0
    System::Diagnostics::Tracing::EventKeywords get_Keywords();
    // public System.Diagnostics.Tracing.EventOpcode get_Opcode()
    // Offset: 0x15155F8
    System::Diagnostics::Tracing::EventOpcode get_Opcode();
    // public System.Void set_Opcode(System.Diagnostics.Tracing.EventOpcode value)
    // Offset: 0x1515600
    void set_Opcode(System::Diagnostics::Tracing::EventOpcode value);
    // System.Boolean get_IsOpcodeSet()
    // Offset: 0x1515610
    bool get_IsOpcodeSet();
    // public System.Diagnostics.Tracing.EventTask get_Task()
    // Offset: 0x1515618
    System::Diagnostics::Tracing::EventTask get_Task();
    // public System.Void set_Task(System.Diagnostics.Tracing.EventTask value)
    // Offset: 0x1515620
    void set_Task(System::Diagnostics::Tracing::EventTask value);
    // public System.Byte get_Version()
    // Offset: 0x1515628
    uint8_t get_Version();
    // public System.String get_Message()
    // Offset: 0x1515630
    ::Il2CppString* get_Message();
    // public System.Void set_Message(System.String value)
    // Offset: 0x1515638
    void set_Message(::Il2CppString* value);
    // public System.Diagnostics.Tracing.EventTags get_Tags()
    // Offset: 0x1515640
    System::Diagnostics::Tracing::EventTags get_Tags();
    // public System.Diagnostics.Tracing.EventActivityOptions get_ActivityOptions()
    // Offset: 0x1515648
    System::Diagnostics::Tracing::EventActivityOptions get_ActivityOptions();
    // public System.Void set_ActivityOptions(System.Diagnostics.Tracing.EventActivityOptions value)
    // Offset: 0x1515650
    void set_ActivityOptions(System::Diagnostics::Tracing::EventActivityOptions value);
  }; // System.Diagnostics.Tracing.EventAttribute
  #pragma pack(pop)
  static check_size<sizeof(EventAttribute), 60 + sizeof(bool)> __System_Diagnostics_Tracing_EventAttributeSizeCheck;
  static_assert(sizeof(EventAttribute) == 0x3D);
}
DEFINE_IL2CPP_ARG_TYPE(System::Diagnostics::Tracing::EventAttribute*, "System.Diagnostics.Tracing", "EventAttribute");
