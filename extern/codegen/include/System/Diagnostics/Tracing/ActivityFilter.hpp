// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Diagnostics::Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: EventSource
  class EventSource;
  // Forward declaring type: EventKeywords
  struct EventKeywords;
}
// Forward declaring namespace: System::Collections::Concurrent
namespace System::Collections::Concurrent {
  // Forward declaring type: ConcurrentDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class ConcurrentDictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Tuple`2<T1, T2>
  template<typename T1, typename T2>
  class Tuple_2;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: System.Diagnostics.Tracing.ActivityFilter
  // [] Offset: FFFFFFFF
  class ActivityFilter : public ::Il2CppObject/*, public System::IDisposable*/ {
    public:
    // Nested type: System::Diagnostics::Tracing::ActivityFilter::$GetFilterAsTuple$d__7
    class $GetFilterAsTuple$d__7;
    // Nested type: System::Diagnostics::Tracing::ActivityFilter::$$c__DisplayClass11_0
    class $$c__DisplayClass11_0;
    // Nested type: System::Diagnostics::Tracing::ActivityFilter::$$c__DisplayClass13_0
    class $$c__DisplayClass13_0;
    // private System.Collections.Concurrent.ConcurrentDictionary`2<System.Guid,System.Int32> m_activeActivities
    // Size: 0x8
    // Offset: 0x10
    System::Collections::Concurrent::ConcurrentDictionary_2<System::Guid, int>* m_activeActivities;
    // Field size check
    static_assert(sizeof(System::Collections::Concurrent::ConcurrentDictionary_2<System::Guid, int>*) == 0x8);
    // private System.Collections.Concurrent.ConcurrentDictionary`2<System.Guid,System.Tuple`2<System.Guid,System.Int32>> m_rootActiveActivities
    // Size: 0x8
    // Offset: 0x18
    System::Collections::Concurrent::ConcurrentDictionary_2<System::Guid, System::Tuple_2<System::Guid, int>*>* m_rootActiveActivities;
    // Field size check
    static_assert(sizeof(System::Collections::Concurrent::ConcurrentDictionary_2<System::Guid, System::Tuple_2<System::Guid, int>*>*) == 0x8);
    // private System.Guid m_providerGuid
    // Size: 0x10
    // Offset: 0x20
    System::Guid m_providerGuid;
    // Field size check
    static_assert(sizeof(System::Guid) == 0x10);
    // private System.Int32 m_eventId
    // Size: 0x4
    // Offset: 0x30
    int m_eventId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_samplingFreq
    // Size: 0x4
    // Offset: 0x34
    int m_samplingFreq;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_curSampleCount
    // Size: 0x4
    // Offset: 0x38
    int m_curSampleCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_perEventSourceSessionId
    // Size: 0x4
    // Offset: 0x3C
    int m_perEventSourceSessionId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Diagnostics.Tracing.ActivityFilter m_next
    // Size: 0x8
    // Offset: 0x40
    System::Diagnostics::Tracing::ActivityFilter* m_next;
    // Field size check
    static_assert(sizeof(System::Diagnostics::Tracing::ActivityFilter*) == 0x8);
    // private System.Action`1<System.Guid> m_myActivityDelegate
    // Size: 0x8
    // Offset: 0x48
    System::Action_1<System::Guid>* m_myActivityDelegate;
    // Field size check
    static_assert(sizeof(System::Action_1<System::Guid>*) == 0x8);
    // Creating value type constructor for type: ActivityFilter
    ActivityFilter(System::Collections::Concurrent::ConcurrentDictionary_2<System::Guid, int>* m_activeActivities_ = {}, System::Collections::Concurrent::ConcurrentDictionary_2<System::Guid, System::Tuple_2<System::Guid, int>*>* m_rootActiveActivities_ = {}, System::Guid m_providerGuid_ = {}, int m_eventId_ = {}, int m_samplingFreq_ = {}, int m_curSampleCount_ = {}, int m_perEventSourceSessionId_ = {}, System::Diagnostics::Tracing::ActivityFilter* m_next_ = {}, System::Action_1<System::Guid>* m_myActivityDelegate_ = {}) noexcept : m_activeActivities{m_activeActivities_}, m_rootActiveActivities{m_rootActiveActivities_}, m_providerGuid{m_providerGuid_}, m_eventId{m_eventId_}, m_samplingFreq{m_samplingFreq_}, m_curSampleCount{m_curSampleCount_}, m_perEventSourceSessionId{m_perEventSourceSessionId_}, m_next{m_next_}, m_myActivityDelegate{m_myActivityDelegate_} {}
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // static public System.Void DisableFilter(ref System.Diagnostics.Tracing.ActivityFilter filterList, System.Diagnostics.Tracing.EventSource source)
    // Offset: 0x1510AD4
    static void DisableFilter(System::Diagnostics::Tracing::ActivityFilter*& filterList, System::Diagnostics::Tracing::EventSource* source);
    // static public System.Void UpdateFilter(ref System.Diagnostics.Tracing.ActivityFilter filterList, System.Diagnostics.Tracing.EventSource source, System.Int32 perEventSourceSessionId, System.String startEvents)
    // Offset: 0x1510EE4
    static void UpdateFilter(System::Diagnostics::Tracing::ActivityFilter*& filterList, System::Diagnostics::Tracing::EventSource* source, int perEventSourceSessionId, ::Il2CppString* startEvents);
    // static public System.Boolean PassesActivityFilter(System.Diagnostics.Tracing.ActivityFilter filterList, System.Guid* childActivityID, System.Boolean triggeringEvent, System.Diagnostics.Tracing.EventSource source, System.Int32 eventId)
    // Offset: 0x1511444
    static bool PassesActivityFilter(System::Diagnostics::Tracing::ActivityFilter* filterList, System::Guid* childActivityID, bool triggeringEvent, System::Diagnostics::Tracing::EventSource* source, int eventId);
    // static public System.Void FlowActivityIfNeeded(System.Diagnostics.Tracing.ActivityFilter filterList, System.Guid* currentActivityId, System.Guid* childActivityID)
    // Offset: 0x1511900
    static void FlowActivityIfNeeded(System::Diagnostics::Tracing::ActivityFilter* filterList, System::Guid* currentActivityId, System::Guid* childActivityID);
    // static public System.Void UpdateKwdTriggers(System.Diagnostics.Tracing.ActivityFilter activityFilter, System.Guid sourceGuid, System.Diagnostics.Tracing.EventSource source, System.Diagnostics.Tracing.EventKeywords sessKeywords)
    // Offset: 0x1511BCC
    static void UpdateKwdTriggers(System::Diagnostics::Tracing::ActivityFilter* activityFilter, System::Guid sourceGuid, System::Diagnostics::Tracing::EventSource* source, System::Diagnostics::Tracing::EventKeywords sessKeywords);
    // public System.Collections.Generic.IEnumerable`1<System.Tuple`2<System.Int32,System.Int32>> GetFilterAsTuple(System.Guid sourceGuid)
    // Offset: 0x1511D1C
    System::Collections::Generic::IEnumerable_1<System::Tuple_2<int, int>*>* GetFilterAsTuple(System::Guid sourceGuid);
    // private System.Void .ctor(System.Diagnostics.Tracing.EventSource source, System.Int32 perEventSourceSessionId, System.Int32 eventId, System.Int32 samplingFreq, System.Diagnostics.Tracing.ActivityFilter existingFilter)
    // Offset: 0x1511DF4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ActivityFilter* New_ctor(System::Diagnostics::Tracing::EventSource* source, int perEventSourceSessionId, int eventId, int samplingFreq, System::Diagnostics::Tracing::ActivityFilter* existingFilter) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Tracing::ActivityFilter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ActivityFilter*, creationType>(source, perEventSourceSessionId, eventId, samplingFreq, existingFilter)));
    }
    // static private System.Void EnsureActivityCleanupDelegate(System.Diagnostics.Tracing.ActivityFilter filterList)
    // Offset: 0x1510DF0
    static void EnsureActivityCleanupDelegate(System::Diagnostics::Tracing::ActivityFilter* filterList);
    // static private System.Action`1<System.Guid> GetActivityDyingDelegate(System.Diagnostics.Tracing.ActivityFilter filterList)
    // Offset: 0x1511FC0
    static System::Action_1<System::Guid>* GetActivityDyingDelegate(System::Diagnostics::Tracing::ActivityFilter* filterList);
    // static private System.Boolean EnableFilter(ref System.Diagnostics.Tracing.ActivityFilter filterList, System.Diagnostics.Tracing.EventSource source, System.Int32 perEventSourceSessionId, System.Int32 eventId, System.Int32 samplingFreq)
    // Offset: 0x151133C
    static bool EnableFilter(System::Diagnostics::Tracing::ActivityFilter*& filterList, System::Diagnostics::Tracing::EventSource* source, int perEventSourceSessionId, int eventId, int samplingFreq);
    // static private System.Void TrimActiveActivityStore(System.Collections.Concurrent.ConcurrentDictionary`2<System.Guid,System.Int32> activities)
    // Offset: 0x1511A4C
    static void TrimActiveActivityStore(System::Collections::Concurrent::ConcurrentDictionary_2<System::Guid, int>* activities);
    // static private System.Collections.Concurrent.ConcurrentDictionary`2<System.Guid,System.Int32> GetActiveActivities(System.Diagnostics.Tracing.ActivityFilter filterList)
    // Offset: 0x15118E0
    static System::Collections::Concurrent::ConcurrentDictionary_2<System::Guid, int>* GetActiveActivities(System::Diagnostics::Tracing::ActivityFilter* filterList);
    // public System.Void Dispose()
    // Offset: 0x1510D18
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
  }; // System.Diagnostics.Tracing.ActivityFilter
  #pragma pack(pop)
  static check_size<sizeof(ActivityFilter), 72 + sizeof(System::Action_1<System::Guid>*)> __System_Diagnostics_Tracing_ActivityFilterSizeCheck;
  static_assert(sizeof(ActivityFilter) == 0x50);
}
DEFINE_IL2CPP_ARG_TYPE(System::Diagnostics::Tracing::ActivityFilter*, "System.Diagnostics.Tracing", "ActivityFilter");
