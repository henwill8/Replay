// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Diagnostics::Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: ConcurrentSetItem`2<KeyType, ItemType>
  template<typename KeyType, typename ItemType>
  class ConcurrentSetItem_2;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
template<class T>
struct Array;
// Completed il2cpp-utils forward declares
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Diagnostics.Tracing.ConcurrentSet`2
  // [] Offset: FFFFFFFF
  template<typename KeyType, typename ItemType>
  struct ConcurrentSet_2/*, public System::ValueType*/ {
    public:
    // private ItemType[] items
    // Size: 0x8
    // Offset: 0x0
    ::Array<ItemType>* items;
    // Field size check
    static_assert(sizeof(::Array<ItemType>*) == 0x8);
    // Creating value type constructor for type: ConcurrentSet_2
    constexpr ConcurrentSet_2(::Array<ItemType>* items_ = {}) noexcept : items{items_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::Array<ItemType>*
    constexpr operator ::Array<ItemType>*() const noexcept {
      return items;
    }
    // public ItemType TryGet(KeyType key)
    // Offset: 0xFFFFFFFF
    ItemType TryGet(KeyType key) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Tracing::ConcurrentSet_2::TryGet");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "TryGet", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(key)));
      return ::il2cpp_utils::RunMethodThrow<ItemType, false>(*this, ___internal__method, key);
    }
    // public ItemType GetOrAdd(ItemType newItem)
    // Offset: 0xFFFFFFFF
    ItemType GetOrAdd(ItemType newItem) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Tracing::ConcurrentSet_2::GetOrAdd");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "GetOrAdd", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(newItem)));
      return ::il2cpp_utils::RunMethodThrow<ItemType, false>(*this, ___internal__method, newItem);
    }
  }; // System.Diagnostics.Tracing.ConcurrentSet`2
  // Could not write size check! Type: System.Diagnostics.Tracing.ConcurrentSet`2 is generic, or has no fields that are valid for size checks!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(System::Diagnostics::Tracing::ConcurrentSet_2, "System.Diagnostics.Tracing", "ConcurrentSet`2");
