// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Explicit may not be correctly taken into account!
  // Autogenerated type: System.Diagnostics.Tracing.EventDescriptor
  // [] Offset: FFFFFFFF
  struct EventDescriptor/*, public System::ValueType*/ {
    public:
    struct SmallCollection {
      // private System.UInt16 m_id
      // Size: 0x2
      // Offset: 0x0
      uint16_t m_id;
      // Field size check
      static_assert(sizeof(uint16_t) == 0x2);
      // private System.Byte m_version
      // Size: 0x1
      // Offset: 0x2
      uint8_t m_version;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      // private System.Byte m_channel
      // Size: 0x1
      // Offset: 0x3
      uint8_t m_channel;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
    };
    // Creating union for fields at offset: 0x0
    union {
      // private System.Int32 m_traceloggingId
      // Size: 0x4
      // Offset: 0x0
      int m_traceloggingId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // WARNING: Manual field
      SmallCollection data;
      // WARNING: Manual field size check
      static_assert(sizeof(SmallCollection) == 0x4);
    };
    // private System.Byte m_level
    // Size: 0x1
    // Offset: 0x4
    uint8_t m_level;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_opcode
    // Size: 0x1
    // Offset: 0x5
    uint8_t m_opcode;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.UInt16 m_task
    // Size: 0x2
    // Offset: 0x6
    uint16_t m_task;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // private System.Int64 m_keywords
    // Size: 0x8
    // Offset: 0x8
    int64_t m_keywords;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // Creating value type constructor for type: EventDescriptor
    constexpr EventDescriptor(int m_traceloggingId_ = {}, uint8_t m_level_ = {}, uint8_t m_opcode_ = {}, uint16_t m_task_ = {}, int64_t m_keywords_ = {}) noexcept : m_traceloggingId{m_traceloggingId_}, m_level{m_level_}, m_opcode{m_opcode_}, m_task{m_task_}, m_keywords{m_keywords_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // public System.Void .ctor(System.Int32 traceloggingId, System.Byte level, System.Byte opcode, System.Int64 keywords)
    // Offset: 0xE07728
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    EventDescriptor(int traceloggingId, uint8_t level, uint8_t opcode, int64_t keywords) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Tracing::EventDescriptor::.ctor");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(traceloggingId, level, opcode, keywords)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, traceloggingId, level, opcode, keywords);
    }
    // public System.Void .ctor(System.Int32 id, System.Byte version, System.Byte channel, System.Byte level, System.Byte opcode, System.Int32 task, System.Int64 keywords)
    // Offset: 0xE07740
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    EventDescriptor(int id, uint8_t version, uint8_t channel, uint8_t level, uint8_t opcode, int task, int64_t keywords) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Tracing::EventDescriptor::.ctor");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(id, version, channel, level, opcode, task, keywords)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, id, version, channel, level, opcode, task, keywords);
    }
    // public System.Int32 get_EventId()
    // Offset: 0xE07748
    int get_EventId();
    // public System.Byte get_Version()
    // Offset: 0xE07750
    uint8_t get_Version();
    // public System.Byte get_Channel()
    // Offset: 0xE07758
    uint8_t get_Channel();
    // public System.Byte get_Level()
    // Offset: 0xE07760
    uint8_t get_Level();
    // public System.Byte get_Opcode()
    // Offset: 0xE07768
    uint8_t get_Opcode();
    // public System.Int32 get_Task()
    // Offset: 0xE07770
    int get_Task();
    // public System.Int64 get_Keywords()
    // Offset: 0xE07778
    int64_t get_Keywords();
    // public System.Boolean Equals(System.Diagnostics.Tracing.EventDescriptor other)
    // Offset: 0xE077C0
    bool Equals(System::Diagnostics::Tracing::EventDescriptor other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xE07780
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xE07788
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // System.Diagnostics.Tracing.EventDescriptor
  #pragma pack(pop)
  static check_size<sizeof(EventDescriptor), 8 + sizeof(int64_t)> __System_Diagnostics_Tracing_EventDescriptorSizeCheck;
  static_assert(sizeof(EventDescriptor) == 0x10);
}
DEFINE_IL2CPP_ARG_TYPE(System::Diagnostics::Tracing::EventDescriptor, "System.Diagnostics.Tracing", "EventDescriptor");
