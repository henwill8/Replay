// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Diagnostics.Tracing.ActivityTracker
#include "System/Diagnostics/Tracing/ActivityTracker.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
// Including type: System.Diagnostics.Tracing.EventActivityOptions
#include "System/Diagnostics/Tracing/EventActivityOptions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: System.Diagnostics.Tracing.ActivityTracker/ActivityInfo
  // [] Offset: FFFFFFFF
  class ActivityTracker::ActivityInfo : public ::Il2CppObject {
    public:
    // readonly System.String m_name
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* m_name;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private readonly System.Int64 m_uniqueId
    // Size: 0x8
    // Offset: 0x18
    int64_t m_uniqueId;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // readonly System.Guid m_guid
    // Size: 0x10
    // Offset: 0x20
    System::Guid m_guid;
    // Field size check
    static_assert(sizeof(System::Guid) == 0x10);
    // readonly System.Int32 m_activityPathGuidOffset
    // Size: 0x4
    // Offset: 0x30
    int m_activityPathGuidOffset;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // readonly System.Int32 m_level
    // Size: 0x4
    // Offset: 0x34
    int m_level;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // readonly System.Diagnostics.Tracing.EventActivityOptions m_eventOptions
    // Size: 0x4
    // Offset: 0x38
    System::Diagnostics::Tracing::EventActivityOptions m_eventOptions;
    // Field size check
    static_assert(sizeof(System::Diagnostics::Tracing::EventActivityOptions) == 0x4);
    // Padding between fields: m_eventOptions and: m_lastChildID
    char __padding5[0x4] = {};
    // System.Int64 m_lastChildID
    // Size: 0x8
    // Offset: 0x40
    int64_t m_lastChildID;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // System.Int32 m_stopped
    // Size: 0x4
    // Offset: 0x48
    int m_stopped;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_stopped and: m_creator
    char __padding7[0x4] = {};
    // readonly System.Diagnostics.Tracing.ActivityTracker/ActivityInfo m_creator
    // Size: 0x8
    // Offset: 0x50
    System::Diagnostics::Tracing::ActivityTracker::ActivityInfo* m_creator;
    // Field size check
    static_assert(sizeof(System::Diagnostics::Tracing::ActivityTracker::ActivityInfo*) == 0x8);
    // readonly System.Guid m_activityIdToRestore
    // Size: 0x10
    // Offset: 0x58
    System::Guid m_activityIdToRestore;
    // Field size check
    static_assert(sizeof(System::Guid) == 0x10);
    // Creating value type constructor for type: ActivityInfo
    ActivityInfo(::Il2CppString* m_name_ = {}, int64_t m_uniqueId_ = {}, System::Guid m_guid_ = {}, int m_activityPathGuidOffset_ = {}, int m_level_ = {}, System::Diagnostics::Tracing::EventActivityOptions m_eventOptions_ = {}, int64_t m_lastChildID_ = {}, int m_stopped_ = {}, System::Diagnostics::Tracing::ActivityTracker::ActivityInfo* m_creator_ = {}, System::Guid m_activityIdToRestore_ = {}) noexcept : m_name{m_name_}, m_uniqueId{m_uniqueId_}, m_guid{m_guid_}, m_activityPathGuidOffset{m_activityPathGuidOffset_}, m_level{m_level_}, m_eventOptions{m_eventOptions_}, m_lastChildID{m_lastChildID_}, m_stopped{m_stopped_}, m_creator{m_creator_}, m_activityIdToRestore{m_activityIdToRestore_} {}
    // public System.Void .ctor(System.String name, System.Int64 uniqueId, System.Diagnostics.Tracing.ActivityTracker/ActivityInfo creator, System.Guid activityIDToRestore, System.Diagnostics.Tracing.EventActivityOptions options)
    // Offset: 0x1512D84
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ActivityTracker::ActivityInfo* New_ctor(::Il2CppString* name, int64_t uniqueId, System::Diagnostics::Tracing::ActivityTracker::ActivityInfo* creator, System::Guid activityIDToRestore, System::Diagnostics::Tracing::EventActivityOptions options) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Tracing::ActivityTracker::ActivityInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ActivityTracker::ActivityInfo*, creationType>(name, uniqueId, creator, activityIDToRestore, options)));
    }
    // public System.Guid get_ActivityId()
    // Offset: 0x15132A0
    System::Guid get_ActivityId();
    // static public System.String Path(System.Diagnostics.Tracing.ActivityTracker/ActivityInfo activityInfo)
    // Offset: 0x15132AC
    static ::Il2CppString* Path(System::Diagnostics::Tracing::ActivityTracker::ActivityInfo* activityInfo);
    // static public System.String LiveActivities(System.Diagnostics.Tracing.ActivityTracker/ActivityInfo list)
    // Offset: 0x15129A4
    static ::Il2CppString* LiveActivities(System::Diagnostics::Tracing::ActivityTracker::ActivityInfo* list);
    // public System.Boolean CanBeOrphan()
    // Offset: 0x1512E2C
    bool CanBeOrphan();
    // private System.Void CreateActivityPathGuid(out System.Guid idRet, out System.Int32 activityPathGuidOffset)
    // Offset: 0x1513208
    void CreateActivityPathGuid(System::Guid& idRet, int& activityPathGuidOffset);
    // private System.Void CreateOverflowGuid(System.Guid* outPtr)
    // Offset: 0x1513670
    void CreateOverflowGuid(System::Guid* outPtr);
    // static private System.Int32 AddIdToGuid(System.Guid* outPtr, System.Int32 whereToAddId, System.UInt32 id, System.Boolean overflow)
    // Offset: 0x1513524
    static int AddIdToGuid(System::Guid* outPtr, int whereToAddId, uint id, bool overflow);
    // static private System.Void WriteNibble(ref System.Byte* ptr, System.Byte* endPtr, System.UInt32 value)
    // Offset: 0x15136D8
    static void WriteNibble(uint8_t*& ptr, uint8_t* endPtr, uint value);
    // public override System.String ToString()
    // Offset: 0x151334C
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
  }; // System.Diagnostics.Tracing.ActivityTracker/ActivityInfo
  #pragma pack(pop)
  static check_size<sizeof(ActivityTracker::ActivityInfo), 88 + sizeof(System::Guid)> __System_Diagnostics_Tracing_ActivityTracker_ActivityInfoSizeCheck;
  static_assert(sizeof(ActivityTracker::ActivityInfo) == 0x68);
}
DEFINE_IL2CPP_ARG_TYPE(System::Diagnostics::Tracing::ActivityTracker::ActivityInfo*, "System.Diagnostics.Tracing", "ActivityTracker/ActivityInfo");
