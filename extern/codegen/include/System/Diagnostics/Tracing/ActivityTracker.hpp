// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Diagnostics::Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: EventActivityOptions
  struct EventActivityOptions;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: AsyncLocal`1<T>
  template<typename T>
  class AsyncLocal_1;
  // Forward declaring type: AsyncLocalValueChangedArgs`1<T>
  template<typename T>
  struct AsyncLocalValueChangedArgs_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Guid
  struct Guid;
}
// Completed forward declares
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Size: 0x19
  #pragma pack(push, 1)
  // Autogenerated type: System.Diagnostics.Tracing.ActivityTracker
  // [] Offset: FFFFFFFF
  class ActivityTracker : public ::Il2CppObject {
    public:
    // Nested type: System::Diagnostics::Tracing::ActivityTracker::ActivityInfo
    class ActivityInfo;
    // private System.Threading.AsyncLocal`1<System.Diagnostics.Tracing.ActivityTracker/ActivityInfo> m_current
    // Size: 0x8
    // Offset: 0x10
    System::Threading::AsyncLocal_1<System::Diagnostics::Tracing::ActivityTracker::ActivityInfo*>* m_current;
    // Field size check
    static_assert(sizeof(System::Threading::AsyncLocal_1<System::Diagnostics::Tracing::ActivityTracker::ActivityInfo*>*) == 0x8);
    // private System.Boolean m_checkedForEnable
    // Size: 0x1
    // Offset: 0x18
    bool m_checkedForEnable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: ActivityTracker
    ActivityTracker(System::Threading::AsyncLocal_1<System::Diagnostics::Tracing::ActivityTracker::ActivityInfo*>* m_current_ = {}, bool m_checkedForEnable_ = {}) noexcept : m_current{m_current_}, m_checkedForEnable{m_checkedForEnable_} {}
    // Get static field: static private System.Diagnostics.Tracing.ActivityTracker s_activityTrackerInstance
    static System::Diagnostics::Tracing::ActivityTracker* _get_s_activityTrackerInstance();
    // Set static field: static private System.Diagnostics.Tracing.ActivityTracker s_activityTrackerInstance
    static void _set_s_activityTrackerInstance(System::Diagnostics::Tracing::ActivityTracker* value);
    // Get static field: static private System.Int64 m_nextId
    static int64_t _get_m_nextId();
    // Set static field: static private System.Int64 m_nextId
    static void _set_m_nextId(int64_t value);
    // public System.Void OnStart(System.String providerName, System.String activityName, System.Int32 task, ref System.Guid activityId, ref System.Guid relatedActivityId, System.Diagnostics.Tracing.EventActivityOptions options)
    // Offset: 0x1512418
    void OnStart(::Il2CppString* providerName, ::Il2CppString* activityName, int task, System::Guid& activityId, System::Guid& relatedActivityId, System::Diagnostics::Tracing::EventActivityOptions options);
    // public System.Void OnStop(System.String providerName, System.String activityName, System.Int32 task, ref System.Guid activityId)
    // Offset: 0x1512A84
    void OnStop(::Il2CppString* providerName, ::Il2CppString* activityName, int task, System::Guid& activityId);
    // public System.Void Enable()
    // Offset: 0x15127D4
    void Enable();
    // static public System.Diagnostics.Tracing.ActivityTracker get_Instance()
    // Offset: 0x1512E38
    static System::Diagnostics::Tracing::ActivityTracker* get_Instance();
    // private System.Diagnostics.Tracing.ActivityTracker/ActivityInfo FindActiveActivity(System.String name, System.Diagnostics.Tracing.ActivityTracker/ActivityInfo startLocation)
    // Offset: 0x1512A38
    System::Diagnostics::Tracing::ActivityTracker::ActivityInfo* FindActiveActivity(::Il2CppString* name, System::Diagnostics::Tracing::ActivityTracker::ActivityInfo* startLocation);
    // private System.String NormalizeActivityName(System.String providerName, System.String activityName, System.Int32 task)
    // Offset: 0x15128A0
    ::Il2CppString* NormalizeActivityName(::Il2CppString* providerName, ::Il2CppString* activityName, int task);
    // private System.Void ActivityChanging(System.Threading.AsyncLocalValueChangedArgs`1<System.Diagnostics.Tracing.ActivityTracker/ActivityInfo> args)
    // Offset: 0x1512EA0
    void ActivityChanging(System::Threading::AsyncLocalValueChangedArgs_1<System::Diagnostics::Tracing::ActivityTracker::ActivityInfo*> args);
    // static private System.Void .cctor()
    // Offset: 0x1513190
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x1513188
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ActivityTracker* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Tracing::ActivityTracker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ActivityTracker*, creationType>()));
    }
  }; // System.Diagnostics.Tracing.ActivityTracker
  #pragma pack(pop)
  static check_size<sizeof(ActivityTracker), 24 + sizeof(bool)> __System_Diagnostics_Tracing_ActivityTrackerSizeCheck;
  static_assert(sizeof(ActivityTracker) == 0x19);
}
DEFINE_IL2CPP_ARG_TYPE(System::Diagnostics::Tracing::ActivityTracker*, "System.Diagnostics.Tracing", "ActivityTracker");
