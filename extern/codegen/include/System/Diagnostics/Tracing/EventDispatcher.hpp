// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Diagnostics::Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: EventListener
  class EventListener;
}
// Completed forward declares
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: System.Diagnostics.Tracing.EventDispatcher
  // [] Offset: FFFFFFFF
  class EventDispatcher : public ::Il2CppObject {
    public:
    // readonly System.Diagnostics.Tracing.EventListener m_Listener
    // Size: 0x8
    // Offset: 0x10
    System::Diagnostics::Tracing::EventListener* m_Listener;
    // Field size check
    static_assert(sizeof(System::Diagnostics::Tracing::EventListener*) == 0x8);
    // System.Boolean[] m_EventEnabled
    // Size: 0x8
    // Offset: 0x18
    ::Array<bool>* m_EventEnabled;
    // Field size check
    static_assert(sizeof(::Array<bool>*) == 0x8);
    // System.Boolean m_activityFilteringEnabled
    // Size: 0x1
    // Offset: 0x20
    bool m_activityFilteringEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_activityFilteringEnabled and: m_Next
    char __padding2[0x7] = {};
    // System.Diagnostics.Tracing.EventDispatcher m_Next
    // Size: 0x8
    // Offset: 0x28
    System::Diagnostics::Tracing::EventDispatcher* m_Next;
    // Field size check
    static_assert(sizeof(System::Diagnostics::Tracing::EventDispatcher*) == 0x8);
    // Creating value type constructor for type: EventDispatcher
    EventDispatcher(System::Diagnostics::Tracing::EventListener* m_Listener_ = {}, ::Array<bool>* m_EventEnabled_ = {}, bool m_activityFilteringEnabled_ = {}, System::Diagnostics::Tracing::EventDispatcher* m_Next_ = {}) noexcept : m_Listener{m_Listener_}, m_EventEnabled{m_EventEnabled_}, m_activityFilteringEnabled{m_activityFilteringEnabled_}, m_Next{m_Next_} {}
    // System.Void .ctor(System.Diagnostics.Tracing.EventDispatcher next, System.Boolean[] eventEnabled, System.Diagnostics.Tracing.EventListener listener)
    // Offset: 0x1515BE0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EventDispatcher* New_ctor(System::Diagnostics::Tracing::EventDispatcher* next, ::Array<bool>* eventEnabled, System::Diagnostics::Tracing::EventListener* listener) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Tracing::EventDispatcher::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EventDispatcher*, creationType>(next, eventEnabled, listener)));
    }
  }; // System.Diagnostics.Tracing.EventDispatcher
  #pragma pack(pop)
  static check_size<sizeof(EventDispatcher), 40 + sizeof(System::Diagnostics::Tracing::EventDispatcher*)> __System_Diagnostics_Tracing_EventDispatcherSizeCheck;
  static_assert(sizeof(EventDispatcher) == 0x30);
}
DEFINE_IL2CPP_ARG_TYPE(System::Diagnostics::Tracing::EventDispatcher*, "System.Diagnostics.Tracing", "EventDispatcher");
