// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Diagnostics.Tracing.EventSource
#include "System/Diagnostics/Tracing/EventSource.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Diagnostics.Tracing.EventSource/Sha1ForNonSecretPurposes
  // [] Offset: FFFFFFFF
  struct EventSource::Sha1ForNonSecretPurposes/*, public System::ValueType*/ {
    public:
    // private System.Int64 length
    // Size: 0x8
    // Offset: 0x0
    int64_t length;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.UInt32[] w
    // Size: 0x8
    // Offset: 0x8
    ::Array<uint>* w;
    // Field size check
    static_assert(sizeof(::Array<uint>*) == 0x8);
    // private System.Int32 pos
    // Size: 0x4
    // Offset: 0x10
    int pos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: Sha1ForNonSecretPurposes
    constexpr Sha1ForNonSecretPurposes(int64_t length_ = {}, ::Array<uint>* w_ = {}, int pos_ = {}) noexcept : length{length_}, w{w_}, pos{pos_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // public System.Void Start()
    // Offset: 0xE079C8
    void Start();
    // public System.Void Append(System.Byte input)
    // Offset: 0xE079D0
    void Append(uint8_t input);
    // public System.Void Append(System.Byte[] input)
    // Offset: 0xE079D8
    void Append(::Array<uint8_t>* input);
    // public System.Void Finish(System.Byte[] output)
    // Offset: 0xE079E0
    void Finish(::Array<uint8_t>* output);
    // private System.Void Drain()
    // Offset: 0xE079E8
    void Drain();
    // static private System.UInt32 Rol1(System.UInt32 input)
    // Offset: 0x152759C
    static uint Rol1(uint input);
    // static private System.UInt32 Rol5(System.UInt32 input)
    // Offset: 0x15275A4
    static uint Rol5(uint input);
    // static private System.UInt32 Rol30(System.UInt32 input)
    // Offset: 0x15275AC
    static uint Rol30(uint input);
  }; // System.Diagnostics.Tracing.EventSource/Sha1ForNonSecretPurposes
  #pragma pack(pop)
  static check_size<sizeof(EventSource::Sha1ForNonSecretPurposes), 16 + sizeof(int)> __System_Diagnostics_Tracing_EventSource_Sha1ForNonSecretPurposesSizeCheck;
  static_assert(sizeof(EventSource::Sha1ForNonSecretPurposes) == 0x14);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes, "System.Diagnostics.Tracing", "EventSource/Sha1ForNonSecretPurposes");
