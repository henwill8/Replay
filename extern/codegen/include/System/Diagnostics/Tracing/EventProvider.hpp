// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
// Including type: System.Diagnostics.Tracing.EventDescriptor
#include "System/Diagnostics/Tracing/EventDescriptor.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Microsoft.Win32.UnsafeNativeMethods/ManifestEtw
#include "Microsoft/Win32/UnsafeNativeMethods_ManifestEtw.hpp"
// Including type: System.Runtime.InteropServices.GCHandle
#include "System/Runtime/InteropServices/GCHandle.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Diagnostics::Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: ControllerCommand
  struct ControllerCommand;
  // Forward declaring type: EventLevel
  struct EventLevel;
  // Forward declaring type: EventKeywords
  struct EventKeywords;
  // Skipping declaration: WriteEventErrorCode because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IDictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Tuple`2<T1, T2>
  template<typename T1, typename T2>
  class Tuple_2;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Skipping declaration: IntPtr because it is already included!
}
// Completed forward declares
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Size: 0x5D
  #pragma pack(push, 1)
  // Autogenerated type: System.Diagnostics.Tracing.EventProvider
  // [] Offset: FFFFFFFF
  class EventProvider : public ::Il2CppObject/*, public System::IDisposable*/ {
    public:
    // Nested type: System::Diagnostics::Tracing::EventProvider::EventData
    struct EventData;
    // Nested type: System::Diagnostics::Tracing::EventProvider::SessionInfo
    struct SessionInfo;
    // Nested type: System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode
    struct WriteEventErrorCode;
    // Nested type: System::Diagnostics::Tracing::EventProvider::MonoPInvokeCallbackAttribute
    class MonoPInvokeCallbackAttribute;
    // Nested type: System::Diagnostics::Tracing::EventProvider::$$c__DisplayClass44_0
    class $$c__DisplayClass44_0;
    // Size: 0x8
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Diagnostics.Tracing.EventProvider/SessionInfo
    // [] Offset: FFFFFFFF
    struct SessionInfo/*, public System::ValueType*/ {
      public:
      // System.Int32 sessionIdBit
      // Size: 0x4
      // Offset: 0x0
      int sessionIdBit;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // System.Int32 etwSessionId
      // Size: 0x4
      // Offset: 0x4
      int etwSessionId;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: SessionInfo
      constexpr SessionInfo(int sessionIdBit_ = {}, int etwSessionId_ = {}) noexcept : sessionIdBit{sessionIdBit_}, etwSessionId{etwSessionId_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
      // System.Void .ctor(System.Int32 sessionIdBit_, System.Int32 etwSessionId_)
      // Offset: 0xE07850
      // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      // ABORTED: conflicts with another method.  SessionInfo(int sessionIdBit_, int etwSessionId_)
    }; // System.Diagnostics.Tracing.EventProvider/SessionInfo
    #pragma pack(pop)
    static check_size<sizeof(EventProvider::SessionInfo), 4 + sizeof(int)> __System_Diagnostics_Tracing_EventProvider_SessionInfoSizeCheck;
    static_assert(sizeof(EventProvider::SessionInfo) == 0x8);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Diagnostics.Tracing.EventProvider/WriteEventErrorCode
    // [] Offset: FFFFFFFF
    struct WriteEventErrorCode/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: WriteEventErrorCode
      constexpr WriteEventErrorCode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Diagnostics.Tracing.EventProvider/WriteEventErrorCode NoError
      static constexpr const int NoError = 0;
      // Get static field: static public System.Diagnostics.Tracing.EventProvider/WriteEventErrorCode NoError
      static System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode _get_NoError();
      // Set static field: static public System.Diagnostics.Tracing.EventProvider/WriteEventErrorCode NoError
      static void _set_NoError(System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode value);
      // static field const value: static public System.Diagnostics.Tracing.EventProvider/WriteEventErrorCode NoFreeBuffers
      static constexpr const int NoFreeBuffers = 1;
      // Get static field: static public System.Diagnostics.Tracing.EventProvider/WriteEventErrorCode NoFreeBuffers
      static System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode _get_NoFreeBuffers();
      // Set static field: static public System.Diagnostics.Tracing.EventProvider/WriteEventErrorCode NoFreeBuffers
      static void _set_NoFreeBuffers(System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode value);
      // static field const value: static public System.Diagnostics.Tracing.EventProvider/WriteEventErrorCode EventTooBig
      static constexpr const int EventTooBig = 2;
      // Get static field: static public System.Diagnostics.Tracing.EventProvider/WriteEventErrorCode EventTooBig
      static System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode _get_EventTooBig();
      // Set static field: static public System.Diagnostics.Tracing.EventProvider/WriteEventErrorCode EventTooBig
      static void _set_EventTooBig(System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode value);
      // static field const value: static public System.Diagnostics.Tracing.EventProvider/WriteEventErrorCode NullInput
      static constexpr const int NullInput = 3;
      // Get static field: static public System.Diagnostics.Tracing.EventProvider/WriteEventErrorCode NullInput
      static System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode _get_NullInput();
      // Set static field: static public System.Diagnostics.Tracing.EventProvider/WriteEventErrorCode NullInput
      static void _set_NullInput(System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode value);
      // static field const value: static public System.Diagnostics.Tracing.EventProvider/WriteEventErrorCode TooManyArgs
      static constexpr const int TooManyArgs = 4;
      // Get static field: static public System.Diagnostics.Tracing.EventProvider/WriteEventErrorCode TooManyArgs
      static System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode _get_TooManyArgs();
      // Set static field: static public System.Diagnostics.Tracing.EventProvider/WriteEventErrorCode TooManyArgs
      static void _set_TooManyArgs(System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode value);
      // static field const value: static public System.Diagnostics.Tracing.EventProvider/WriteEventErrorCode Other
      static constexpr const int Other = 5;
      // Get static field: static public System.Diagnostics.Tracing.EventProvider/WriteEventErrorCode Other
      static System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode _get_Other();
      // Set static field: static public System.Diagnostics.Tracing.EventProvider/WriteEventErrorCode Other
      static void _set_Other(System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode value);
    }; // System.Diagnostics.Tracing.EventProvider/WriteEventErrorCode
    #pragma pack(pop)
    static check_size<sizeof(EventProvider::WriteEventErrorCode), 0 + sizeof(int)> __System_Diagnostics_Tracing_EventProvider_WriteEventErrorCodeSizeCheck;
    static_assert(sizeof(EventProvider::WriteEventErrorCode) == 0x4);
    // private Microsoft.Win32.UnsafeNativeMethods/ManifestEtw/EtwEnableCallback m_etwCallback
    // Size: 0x8
    // Offset: 0x10
    Microsoft::Win32::UnsafeNativeMethods::ManifestEtw::EtwEnableCallback* m_etwCallback;
    // Field size check
    static_assert(sizeof(Microsoft::Win32::UnsafeNativeMethods::ManifestEtw::EtwEnableCallback*) == 0x8);
    // private System.Runtime.InteropServices.GCHandle m_thisGCHandle
    // Size: 0x4
    // Offset: 0x18
    System::Runtime::InteropServices::GCHandle m_thisGCHandle;
    // Field size check
    static_assert(sizeof(System::Runtime::InteropServices::GCHandle) == 0x4);
    // Padding between fields: m_thisGCHandle and: m_regHandle
    char __padding1[0x4] = {};
    // private System.Int64 m_regHandle
    // Size: 0x8
    // Offset: 0x20
    int64_t m_regHandle;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Byte m_level
    // Size: 0x1
    // Offset: 0x28
    uint8_t m_level;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: m_level and: m_anyKeywordMask
    char __padding3[0x7] = {};
    // private System.Int64 m_anyKeywordMask
    // Size: 0x8
    // Offset: 0x30
    int64_t m_anyKeywordMask;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 m_allKeywordMask
    // Size: 0x8
    // Offset: 0x38
    int64_t m_allKeywordMask;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Collections.Generic.List`1<System.Diagnostics.Tracing.EventProvider/SessionInfo> m_liveSessions
    // Size: 0x8
    // Offset: 0x40
    System::Collections::Generic::List_1<System::Diagnostics::Tracing::EventProvider::SessionInfo>* m_liveSessions;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<System::Diagnostics::Tracing::EventProvider::SessionInfo>*) == 0x8);
    // private System.Boolean m_enabled
    // Size: 0x1
    // Offset: 0x48
    bool m_enabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_enabled and: m_providerId
    char __padding7[0x3] = {};
    // private System.Guid m_providerId
    // Size: 0x10
    // Offset: 0x4C
    System::Guid m_providerId;
    // Field size check
    static_assert(sizeof(System::Guid) == 0x10);
    // System.Boolean m_disposed
    // Size: 0x1
    // Offset: 0x5C
    bool m_disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: EventProvider
    EventProvider(Microsoft::Win32::UnsafeNativeMethods::ManifestEtw::EtwEnableCallback* m_etwCallback_ = {}, System::Runtime::InteropServices::GCHandle m_thisGCHandle_ = {}, int64_t m_regHandle_ = {}, uint8_t m_level_ = {}, int64_t m_anyKeywordMask_ = {}, int64_t m_allKeywordMask_ = {}, System::Collections::Generic::List_1<System::Diagnostics::Tracing::EventProvider::SessionInfo>* m_liveSessions_ = {}, bool m_enabled_ = {}, System::Guid m_providerId_ = {}, bool m_disposed_ = {}) noexcept : m_etwCallback{m_etwCallback_}, m_thisGCHandle{m_thisGCHandle_}, m_regHandle{m_regHandle_}, m_level{m_level_}, m_anyKeywordMask{m_anyKeywordMask_}, m_allKeywordMask{m_allKeywordMask_}, m_liveSessions{m_liveSessions_}, m_enabled{m_enabled_}, m_providerId{m_providerId_}, m_disposed{m_disposed_} {}
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // Get static field: static private System.Boolean m_setInformationMissing
    static bool _get_m_setInformationMissing();
    // Set static field: static private System.Boolean m_setInformationMissing
    static void _set_m_setInformationMissing(bool value);
    // [ThreadStaticAttribute] Offset: 0xCAFD1C
    // Get static field: static private System.Diagnostics.Tracing.EventProvider/WriteEventErrorCode s_returnCode
    static System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode _get_s_returnCode();
    // Set static field: static private System.Diagnostics.Tracing.EventProvider/WriteEventErrorCode s_returnCode
    static void _set_s_returnCode(System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode value);
    // Get static field: static private System.Int32[] nibblebits
    static ::Array<int>* _get_nibblebits();
    // Set static field: static private System.Int32[] nibblebits
    static void _set_nibblebits(::Array<int>* value);
    // System.Void Register(System.Guid providerGuid)
    // Offset: 0x1517514
    void Register(System::Guid providerGuid);
    // System.Int32 SetInformation(Microsoft.Win32.UnsafeNativeMethods/ManifestEtw/EVENT_INFO_CLASS eventInfoClass, System.Void* data, System.Int32 dataSize)
    // Offset: 0x15176E8
    int SetInformation(Microsoft::Win32::UnsafeNativeMethods::ManifestEtw::EVENT_INFO_CLASS eventInfoClass, void* data, int dataSize);
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x15178A8
    void Dispose(bool disposing);
    // private System.Void Deregister()
    // Offset: 0x15179EC
    void Deregister();
    // static private System.Void EtwEnableCallBack(in System.Guid sourceId, in System.Int32 controlCode, in System.Byte setLevel, in System.Int64 anyKeyword, in System.Int64 allKeyword, in Microsoft.Win32.UnsafeNativeMethods/ManifestEtw/EVENT_FILTER_DESCRIPTOR* filterData, in System.Void* callbackContext)
    // Offset: 0x151742C
    static void EtwEnableCallBack(System::Guid& sourceId, int& controlCode, uint8_t& setLevel, int64_t& anyKeyword, int64_t& allKeyword, Microsoft::Win32::UnsafeNativeMethods::ManifestEtw::EVENT_FILTER_DESCRIPTOR*& filterData, void*& callbackContext);
    // private System.Void EtwEnableCallBackImpl(in System.Int32 controlCode, in System.Byte setLevel, in System.Int64 anyKeyword, in System.Int64 allKeyword, in Microsoft.Win32.UnsafeNativeMethods/ManifestEtw/EVENT_FILTER_DESCRIPTOR* filterData)
    // Offset: 0x1517AD0
    void EtwEnableCallBackImpl(int& controlCode, uint8_t& setLevel, int64_t& anyKeyword, int64_t& allKeyword, Microsoft::Win32::UnsafeNativeMethods::ManifestEtw::EVENT_FILTER_DESCRIPTOR*& filterData);
    // protected System.Void OnControllerCommand(System.Diagnostics.Tracing.ControllerCommand command, System.Collections.Generic.IDictionary`2<System.String,System.String> arguments, System.Int32 sessionId, System.Int32 etwSessionId)
    // Offset: 0x1518520
    void OnControllerCommand(System::Diagnostics::Tracing::ControllerCommand command, System::Collections::Generic::IDictionary_2<::Il2CppString*, ::Il2CppString*>* arguments, int sessionId, int etwSessionId);
    // protected System.Diagnostics.Tracing.EventLevel get_Level()
    // Offset: 0x1518524
    System::Diagnostics::Tracing::EventLevel get_Level();
    // protected System.Diagnostics.Tracing.EventKeywords get_MatchAnyKeyword()
    // Offset: 0x151852C
    System::Diagnostics::Tracing::EventKeywords get_MatchAnyKeyword();
    // static private System.Int32 FindNull(System.Byte[] buffer, System.Int32 idx)
    // Offset: 0x15184CC
    static int FindNull(::Array<uint8_t>* buffer, int idx);
    // private System.Collections.Generic.List`1<System.Tuple`2<System.Diagnostics.Tracing.EventProvider/SessionInfo,System.Boolean>> GetSessions()
    // Offset: 0x1517FF0
    System::Collections::Generic::List_1<System::Tuple_2<System::Diagnostics::Tracing::EventProvider::SessionInfo, bool>*>* GetSessions();
    // static private System.Void GetSessionInfoCallback(System.Int32 etwSessionId, System.Int64 matchAllKeywords, ref System.Collections.Generic.List`1<System.Diagnostics.Tracing.EventProvider/SessionInfo> sessionList)
    // Offset: 0x15187AC
    static void GetSessionInfoCallback(int etwSessionId, int64_t matchAllKeywords, System::Collections::Generic::List_1<System::Diagnostics::Tracing::EventProvider::SessionInfo>*& sessionList);
    // private System.Void GetSessionInfo(System.Action`2<System.Int32,System.Int64> action)
    // Offset: 0x151853C
    void GetSessionInfo(System::Action_2<int, int64_t>* action);
    // static private System.Int32 IndexOfSessionInList(System.Collections.Generic.List`1<System.Diagnostics.Tracing.EventProvider/SessionInfo> sessions, System.Int32 etwSessionId)
    // Offset: 0x1518710
    static int IndexOfSessionInList(System::Collections::Generic::List_1<System::Diagnostics::Tracing::EventProvider::SessionInfo>* sessions, int etwSessionId);
    // private System.Boolean GetDataFromController(System.Int32 etwSessionId, Microsoft.Win32.UnsafeNativeMethods/ManifestEtw/EVENT_FILTER_DESCRIPTOR* filterData, out System.Diagnostics.Tracing.ControllerCommand command, out System.Byte[] data, out System.Int32 dataStart)
    // Offset: 0x15183B4
    bool GetDataFromController(int etwSessionId, Microsoft::Win32::UnsafeNativeMethods::ManifestEtw::EVENT_FILTER_DESCRIPTOR* filterData, System::Diagnostics::Tracing::ControllerCommand& command, ::Array<uint8_t>*& data, int& dataStart);
    // public System.Boolean IsEnabled()
    // Offset: 0x1518A48
    bool IsEnabled();
    // public System.Boolean IsEnabled(System.Byte level, System.Int64 keywords)
    // Offset: 0x1518A50
    bool IsEnabled(uint8_t level, int64_t keywords);
    // static public System.Diagnostics.Tracing.EventProvider/WriteEventErrorCode GetLastWriteEventError()
    // Offset: 0x1518A94
    static System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode GetLastWriteEventError();
    // static private System.Void SetLastError(System.Int32 error)
    // Offset: 0x1518AFC
    static void SetLastError(int error);
    // static private System.Object EncodeObject(ref System.Object data, ref System.Diagnostics.Tracing.EventProvider/EventData* dataDescriptor, ref System.Byte* dataBuffer, ref System.UInt32 totalEventSize)
    // Offset: 0x1518BB0
    static ::Il2CppObject* EncodeObject(::Il2CppObject*& data, System::Diagnostics::Tracing::EventProvider::EventData*& dataDescriptor, uint8_t*& dataBuffer, uint& totalEventSize);
    // System.Boolean WriteEvent(ref System.Diagnostics.Tracing.EventDescriptor eventDescriptor, System.Guid* activityID, System.Guid* childActivityID, params System.Object[] eventPayload)
    // Offset: 0x15194AC
    bool WriteEvent(System::Diagnostics::Tracing::EventDescriptor& eventDescriptor, System::Guid* activityID, System::Guid* childActivityID, ::Array<::Il2CppObject*>* eventPayload);
    // Creating initializer_list -> params proxy for: System.Boolean WriteEvent(ref System.Diagnostics.Tracing.EventDescriptor eventDescriptor, System.Guid* activityID, System.Guid* childActivityID, params System.Object[] eventPayload)
    bool WriteEvent(System::Diagnostics::Tracing::EventDescriptor& eventDescriptor, System::Guid* activityID, System::Guid* childActivityID, std::initializer_list<::Il2CppObject*> eventPayload);
    // Creating TArgs -> initializer_list proxy for: System.Boolean WriteEvent(ref System.Diagnostics.Tracing.EventDescriptor eventDescriptor, System.Guid* activityID, System.Guid* childActivityID, params System.Object[] eventPayload)
    template<class ...TParams>
    bool WriteEvent(System::Diagnostics::Tracing::EventDescriptor& eventDescriptor, System::Guid* activityID, System::Guid* childActivityID, TParams&&... eventPayload) {
      return WriteEvent(eventDescriptor, activityID, childActivityID, {eventPayload...});
    }
    // protected internal System.Boolean WriteEvent(ref System.Diagnostics.Tracing.EventDescriptor eventDescriptor, System.Guid* activityID, System.Guid* childActivityID, System.Int32 dataCount, System.IntPtr data)
    // Offset: 0x1519F7C
    bool WriteEvent(System::Diagnostics::Tracing::EventDescriptor& eventDescriptor, System::Guid* activityID, System::Guid* childActivityID, int dataCount, System::IntPtr data);
    // System.Boolean WriteEventRaw(ref System.Diagnostics.Tracing.EventDescriptor eventDescriptor, System.Guid* activityID, System.Guid* relatedActivityID, System.Int32 dataCount, System.IntPtr data)
    // Offset: 0x151A054
    bool WriteEventRaw(System::Diagnostics::Tracing::EventDescriptor& eventDescriptor, System::Guid* activityID, System::Guid* relatedActivityID, int dataCount, System::IntPtr data);
    // private System.UInt32 EventUnregister()
    // Offset: 0x1517AA4
    uint EventUnregister();
    // static private System.Int32 bitcount(System.UInt32 n)
    // Offset: 0x1518960
    static int bitcount(uint n);
    // static private System.Int32 bitindex(System.UInt32 n)
    // Offset: 0x1518A20
    static int bitindex(uint n);
    // static private System.Void .cctor()
    // Offset: 0x151A12C
    static void _cctor();
    // System.Void .ctor()
    // Offset: 0x151750C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EventProvider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Tracing::EventProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EventProvider*, creationType>()));
    }
    // public System.Void Dispose()
    // Offset: 0x151782C
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
    // protected override System.Void Finalize()
    // Offset: 0x1517A30
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // System.Diagnostics.Tracing.EventProvider
  #pragma pack(pop)
  static check_size<sizeof(EventProvider), 92 + sizeof(bool)> __System_Diagnostics_Tracing_EventProviderSizeCheck;
  static_assert(sizeof(EventProvider) == 0x5D);
}
DEFINE_IL2CPP_ARG_TYPE(System::Diagnostics::Tracing::EventProvider*, "System.Diagnostics.Tracing", "EventProvider");
DEFINE_IL2CPP_ARG_TYPE(System::Diagnostics::Tracing::EventProvider::SessionInfo, "System.Diagnostics.Tracing", "EventProvider/SessionInfo");
DEFINE_IL2CPP_ARG_TYPE(System::Diagnostics::Tracing::EventProvider::WriteEventErrorCode, "System.Diagnostics.Tracing", "EventProvider/WriteEventErrorCode");
