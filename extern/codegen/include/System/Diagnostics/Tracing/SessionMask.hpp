// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Diagnostics.Tracing.SessionMask
  // [] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: CAE72C
  struct SessionMask/*, public System::ValueType*/ {
    public:
    // private System.UInt32 m_mask
    // Size: 0x4
    // Offset: 0x0
    uint m_mask;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Creating value type constructor for type: SessionMask
    constexpr SessionMask(uint m_mask_ = {}) noexcept : m_mask{m_mask_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating conversion operator: operator uint
    constexpr operator uint() const noexcept {
      return m_mask;
    }
    // public System.Void .ctor(System.UInt32 mask)
    // Offset: 0xDF8CD8
    // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    // ABORTED: conflicts with another method.  SessionMask(uint mask)
    // public System.Boolean IsEqualOrSupersetOf(System.Diagnostics.Tracing.SessionMask m)
    // Offset: 0xDF8CE4
    bool IsEqualOrSupersetOf(System::Diagnostics::Tracing::SessionMask m);
    // static public System.Diagnostics.Tracing.SessionMask get_All()
    // Offset: 0x12A6614
    static System::Diagnostics::Tracing::SessionMask get_All();
    // static public System.Diagnostics.Tracing.SessionMask FromId(System.Int32 perEventSourceSessionId)
    // Offset: 0x12A661C
    static System::Diagnostics::Tracing::SessionMask FromId(int perEventSourceSessionId);
    // public System.UInt64 ToEventKeywords()
    // Offset: 0xDF8CF8
    uint64_t ToEventKeywords();
    // static public System.Diagnostics.Tracing.SessionMask FromEventKeywords(System.UInt64 m)
    // Offset: 0x12A6638
    static System::Diagnostics::Tracing::SessionMask FromEventKeywords(uint64_t m);
    // public System.Boolean get_Item(System.Int32 perEventSourceSessionId)
    // Offset: 0xDF8D04
    bool get_Item(int perEventSourceSessionId);
    // public System.Void set_Item(System.Int32 perEventSourceSessionId, System.Boolean value)
    // Offset: 0xDF8D20
    void set_Item(int perEventSourceSessionId, bool value);
    // static public System.UInt64 op_Explicit(System.Diagnostics.Tracing.SessionMask m)
    // Offset: 0x12A6680
    explicit operator uint64_t();
    // static public System.UInt32 op_Explicit(System.Diagnostics.Tracing.SessionMask m)
    // Offset: 0x12A6688
    // ABORTED: conflicts with another method.  explicit operator uint();
  }; // System.Diagnostics.Tracing.SessionMask
  #pragma pack(pop)
  static check_size<sizeof(SessionMask), 0 + sizeof(uint)> __System_Diagnostics_Tracing_SessionMaskSizeCheck;
  static_assert(sizeof(SessionMask) == 0x4);
}
DEFINE_IL2CPP_ARG_TYPE(System::Diagnostics::Tracing::SessionMask, "System.Diagnostics.Tracing", "SessionMask");
