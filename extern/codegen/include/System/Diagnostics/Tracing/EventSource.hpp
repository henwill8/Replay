// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
// Including type: System.Diagnostics.Tracing.EventDescriptor
#include "System/Diagnostics/Tracing/EventDescriptor.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Guid
#include "System/Guid.hpp"
// Including type: System.Diagnostics.Tracing.EventSourceSettings
#include "System/Diagnostics/Tracing/EventSourceSettings.hpp"
// Including type: System.Diagnostics.Tracing.EventLevel
#include "System/Diagnostics/Tracing/EventLevel.hpp"
// Including type: System.Diagnostics.Tracing.EventKeywords
#include "System/Diagnostics/Tracing/EventKeywords.hpp"
// Including type: System.Diagnostics.Tracing.SessionMask
#include "System/Diagnostics/Tracing/SessionMask.hpp"
// Including type: System.Diagnostics.Tracing.EventSourceOptions
#include "System/Diagnostics/Tracing/EventSourceOptions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Diagnostics::Tracing
namespace System::Diagnostics::Tracing {
  // Forward declaring type: EventCommandEventArgs
  class EventCommandEventArgs;
  // Forward declaring type: EventDispatcher
  class EventDispatcher;
  // Forward declaring type: EtwSession
  class EtwSession;
  // Forward declaring type: ActivityTracker
  class ActivityTracker;
  // Forward declaring type: TraceLoggingEventTypes
  class TraceLoggingEventTypes;
  // Forward declaring type: NameInfo
  class NameInfo;
  // Forward declaring type: EventChannel
  struct EventChannel;
  // Forward declaring type: EventListener
  class EventListener;
  // Forward declaring type: EventManifestOptions
  struct EventManifestOptions;
  // Forward declaring type: EventWrittenEventArgs
  class EventWrittenEventArgs;
  // Skipping declaration: EventMetadata because it is already included!
  // Forward declaring type: EventOpcode
  struct EventOpcode;
  // Forward declaring type: EventCommand
  struct EventCommand;
  // Forward declaring type: ManifestBuilder
  class ManifestBuilder;
  // Forward declaring type: EventAttribute
  class EventAttribute;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: EventHandler`1<TEventArgs>
  template<typename TEventArgs>
  class EventHandler_1;
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: IntPtr
  struct IntPtr;
  // Forward declaring type: Attribute
  class Attribute;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class IDictionary_2;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Runtime::InteropServices
namespace System::Runtime::InteropServices {
  // Forward declaring type: GCHandle
  struct GCHandle;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: ParameterInfo
  class ParameterInfo;
  // Forward declaring type: MemberInfo
  class MemberInfo;
  // Forward declaring type: FieldInfo
  class FieldInfo;
  // Forward declaring type: MethodInfo
  class MethodInfo;
}
// Completed forward declares
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Size: 0xD0
  #pragma pack(push, 1)
  // Autogenerated type: System.Diagnostics.Tracing.EventSource
  // [] Offset: FFFFFFFF
  class EventSource : public ::Il2CppObject/*, public System::IDisposable*/ {
    public:
    // Nested type: System::Diagnostics::Tracing::EventSource::EventData
    struct EventData;
    // Nested type: System::Diagnostics::Tracing::EventSource::Sha1ForNonSecretPurposes
    struct Sha1ForNonSecretPurposes;
    // Nested type: System::Diagnostics::Tracing::EventSource::OverideEventProvider
    class OverideEventProvider;
    // Nested type: System::Diagnostics::Tracing::EventSource::EventMetadata
    struct EventMetadata;
    // Size: 0x3C
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Diagnostics.Tracing.EventSource/EventMetadata
    // [] Offset: FFFFFFFF
    struct EventMetadata/*, public System::ValueType*/ {
      public:
      // public System.Diagnostics.Tracing.EventDescriptor Descriptor
      // Size: 0x10
      // Offset: 0x0
      System::Diagnostics::Tracing::EventDescriptor Descriptor;
      // Field size check
      static_assert(sizeof(System::Diagnostics::Tracing::EventDescriptor) == 0x10);
      // public System.Diagnostics.Tracing.EventTags Tags
      // Size: 0x4
      // Offset: 0x10
      System::Diagnostics::Tracing::EventTags Tags;
      // Field size check
      static_assert(sizeof(System::Diagnostics::Tracing::EventTags) == 0x4);
      // public System.Boolean EnabledForAnyListener
      // Size: 0x1
      // Offset: 0x14
      bool EnabledForAnyListener;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // public System.Boolean EnabledForETW
      // Size: 0x1
      // Offset: 0x15
      bool EnabledForETW;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // public System.Boolean HasRelatedActivityID
      // Size: 0x1
      // Offset: 0x16
      bool HasRelatedActivityID;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // public System.Byte TriggersActivityTracking
      // Size: 0x1
      // Offset: 0x17
      uint8_t TriggersActivityTracking;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      // public System.String Name
      // Size: 0x8
      // Offset: 0x18
      ::Il2CppString* Name;
      // Field size check
      static_assert(sizeof(::Il2CppString*) == 0x8);
      // public System.String Message
      // Size: 0x8
      // Offset: 0x20
      ::Il2CppString* Message;
      // Field size check
      static_assert(sizeof(::Il2CppString*) == 0x8);
      // public System.Reflection.ParameterInfo[] Parameters
      // Size: 0x8
      // Offset: 0x28
      ::Array<System::Reflection::ParameterInfo*>* Parameters;
      // Field size check
      static_assert(sizeof(::Array<System::Reflection::ParameterInfo*>*) == 0x8);
      // public System.Diagnostics.Tracing.TraceLoggingEventTypes TraceLoggingEventTypes
      // Size: 0x8
      // Offset: 0x30
      System::Diagnostics::Tracing::TraceLoggingEventTypes* TraceLoggingEventTypes;
      // Field size check
      static_assert(sizeof(System::Diagnostics::Tracing::TraceLoggingEventTypes*) == 0x8);
      // public System.Diagnostics.Tracing.EventActivityOptions ActivityOptions
      // Size: 0x4
      // Offset: 0x38
      System::Diagnostics::Tracing::EventActivityOptions ActivityOptions;
      // Field size check
      static_assert(sizeof(System::Diagnostics::Tracing::EventActivityOptions) == 0x4);
      // Creating value type constructor for type: EventMetadata
      constexpr EventMetadata(System::Diagnostics::Tracing::EventDescriptor Descriptor_ = {}, System::Diagnostics::Tracing::EventTags Tags_ = {}, bool EnabledForAnyListener_ = {}, bool EnabledForETW_ = {}, bool HasRelatedActivityID_ = {}, uint8_t TriggersActivityTracking_ = {}, ::Il2CppString* Name_ = {}, ::Il2CppString* Message_ = {}, ::Array<System::Reflection::ParameterInfo*>* Parameters_ = {}, System::Diagnostics::Tracing::TraceLoggingEventTypes* TraceLoggingEventTypes_ = {}, System::Diagnostics::Tracing::EventActivityOptions ActivityOptions_ = {}) noexcept : Descriptor{Descriptor_}, Tags{Tags_}, EnabledForAnyListener{EnabledForAnyListener_}, EnabledForETW{EnabledForETW_}, HasRelatedActivityID{HasRelatedActivityID_}, TriggersActivityTracking{TriggersActivityTracking_}, Name{Name_}, Message{Message_}, Parameters{Parameters_}, TraceLoggingEventTypes{TraceLoggingEventTypes_}, ActivityOptions{ActivityOptions_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
    }; // System.Diagnostics.Tracing.EventSource/EventMetadata
    #pragma pack(pop)
    static check_size<sizeof(EventSource::EventMetadata), 56 + sizeof(System::Diagnostics::Tracing::EventActivityOptions)> __System_Diagnostics_Tracing_EventSource_EventMetadataSizeCheck;
    static_assert(sizeof(EventSource::EventMetadata) == 0x3C);
    // private System.Byte[] providerMetadata
    // Size: 0x8
    // Offset: 0x10
    ::Array<uint8_t>* providerMetadata;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.String m_name
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* m_name;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // System.Int32 m_id
    // Size: 0x4
    // Offset: 0x20
    int m_id;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Guid m_guid
    // Size: 0x10
    // Offset: 0x24
    System::Guid m_guid;
    // Field size check
    static_assert(sizeof(System::Guid) == 0x10);
    // Padding between fields: m_guid and: m_eventData
    char __padding3[0x4] = {};
    // System.Diagnostics.Tracing.EventSource/EventMetadata[] m_eventData
    // Size: 0x8
    // Offset: 0x38
    ::Array<System::Diagnostics::Tracing::EventSource::EventMetadata>* m_eventData;
    // Field size check
    static_assert(sizeof(::Array<System::Diagnostics::Tracing::EventSource::EventMetadata>*) == 0x8);
    // private System.Byte[] m_rawManifest
    // Size: 0x8
    // Offset: 0x40
    ::Array<uint8_t>* m_rawManifest;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.EventHandler`1<System.Diagnostics.Tracing.EventCommandEventArgs> m_eventCommandExecuted
    // Size: 0x8
    // Offset: 0x48
    System::EventHandler_1<System::Diagnostics::Tracing::EventCommandEventArgs*>* m_eventCommandExecuted;
    // Field size check
    static_assert(sizeof(System::EventHandler_1<System::Diagnostics::Tracing::EventCommandEventArgs*>*) == 0x8);
    // private System.Diagnostics.Tracing.EventSourceSettings m_config
    // Size: 0x4
    // Offset: 0x50
    System::Diagnostics::Tracing::EventSourceSettings m_config;
    // Field size check
    static_assert(sizeof(System::Diagnostics::Tracing::EventSourceSettings) == 0x4);
    // private System.Boolean m_eventSourceEnabled
    // Size: 0x1
    // Offset: 0x54
    bool m_eventSourceEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_eventSourceEnabled and: m_level
    char __padding8[0x3] = {};
    // System.Diagnostics.Tracing.EventLevel m_level
    // Size: 0x4
    // Offset: 0x58
    System::Diagnostics::Tracing::EventLevel m_level;
    // Field size check
    static_assert(sizeof(System::Diagnostics::Tracing::EventLevel) == 0x4);
    // Padding between fields: m_level and: m_matchAnyKeyword
    char __padding9[0x4] = {};
    // System.Diagnostics.Tracing.EventKeywords m_matchAnyKeyword
    // Size: 0x8
    // Offset: 0x60
    System::Diagnostics::Tracing::EventKeywords m_matchAnyKeyword;
    // Field size check
    static_assert(sizeof(System::Diagnostics::Tracing::EventKeywords) == 0x8);
    // System.Diagnostics.Tracing.EventDispatcher m_Dispatchers
    // Size: 0x8
    // Offset: 0x68
    System::Diagnostics::Tracing::EventDispatcher* m_Dispatchers;
    // Field size check
    static_assert(sizeof(System::Diagnostics::Tracing::EventDispatcher*) == 0x8);
    // private System.Diagnostics.Tracing.EventSource/OverideEventProvider m_provider
    // Size: 0x8
    // Offset: 0x70
    System::Diagnostics::Tracing::EventSource::OverideEventProvider* m_provider;
    // Field size check
    static_assert(sizeof(System::Diagnostics::Tracing::EventSource::OverideEventProvider*) == 0x8);
    // private System.Boolean m_completelyInited
    // Size: 0x1
    // Offset: 0x78
    bool m_completelyInited;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_completelyInited and: m_constructionException
    char __padding13[0x7] = {};
    // private System.Exception m_constructionException
    // Size: 0x8
    // Offset: 0x80
    System::Exception* m_constructionException;
    // Field size check
    static_assert(sizeof(System::Exception*) == 0x8);
    // private System.Byte m_outOfBandMessageCount
    // Size: 0x1
    // Offset: 0x88
    uint8_t m_outOfBandMessageCount;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: m_outOfBandMessageCount and: m_deferredCommands
    char __padding15[0x7] = {};
    // private System.Diagnostics.Tracing.EventCommandEventArgs m_deferredCommands
    // Size: 0x8
    // Offset: 0x90
    System::Diagnostics::Tracing::EventCommandEventArgs* m_deferredCommands;
    // Field size check
    static_assert(sizeof(System::Diagnostics::Tracing::EventCommandEventArgs*) == 0x8);
    // private System.String[] m_traits
    // Size: 0x8
    // Offset: 0x98
    ::Array<::Il2CppString*>* m_traits;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // private System.Diagnostics.Tracing.SessionMask m_curLiveSessions
    // Size: 0x4
    // Offset: 0xA0
    System::Diagnostics::Tracing::SessionMask m_curLiveSessions;
    // Field size check
    static_assert(sizeof(System::Diagnostics::Tracing::SessionMask) == 0x4);
    // Padding between fields: m_curLiveSessions and: m_etwSessionIdMap
    char __padding18[0x4] = {};
    // private System.Diagnostics.Tracing.EtwSession[] m_etwSessionIdMap
    // Size: 0x8
    // Offset: 0xA8
    ::Array<System::Diagnostics::Tracing::EtwSession*>* m_etwSessionIdMap;
    // Field size check
    static_assert(sizeof(::Array<System::Diagnostics::Tracing::EtwSession*>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Diagnostics.Tracing.EtwSession> m_legacySessions
    // Size: 0x8
    // Offset: 0xB0
    System::Collections::Generic::List_1<System::Diagnostics::Tracing::EtwSession*>* m_legacySessions;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<System::Diagnostics::Tracing::EtwSession*>*) == 0x8);
    // System.Int64 m_keywordTriggers
    // Size: 0x8
    // Offset: 0xB8
    int64_t m_keywordTriggers;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // System.Diagnostics.Tracing.SessionMask m_activityFilteringForETWEnabled
    // Size: 0x4
    // Offset: 0xC0
    System::Diagnostics::Tracing::SessionMask m_activityFilteringForETWEnabled;
    // Field size check
    static_assert(sizeof(System::Diagnostics::Tracing::SessionMask) == 0x4);
    // Padding between fields: m_activityFilteringForETWEnabled and: m_activityTracker
    char __padding22[0x4] = {};
    // private System.Diagnostics.Tracing.ActivityTracker m_activityTracker
    // Size: 0x8
    // Offset: 0xC8
    System::Diagnostics::Tracing::ActivityTracker* m_activityTracker;
    // Field size check
    static_assert(sizeof(System::Diagnostics::Tracing::ActivityTracker*) == 0x8);
    // Creating value type constructor for type: EventSource
    EventSource(::Array<uint8_t>* providerMetadata_ = {}, ::Il2CppString* m_name_ = {}, int m_id_ = {}, System::Guid m_guid_ = {}, ::Array<System::Diagnostics::Tracing::EventSource::EventMetadata>* m_eventData_ = {}, ::Array<uint8_t>* m_rawManifest_ = {}, System::EventHandler_1<System::Diagnostics::Tracing::EventCommandEventArgs*>* m_eventCommandExecuted_ = {}, System::Diagnostics::Tracing::EventSourceSettings m_config_ = {}, bool m_eventSourceEnabled_ = {}, System::Diagnostics::Tracing::EventLevel m_level_ = {}, System::Diagnostics::Tracing::EventKeywords m_matchAnyKeyword_ = {}, System::Diagnostics::Tracing::EventDispatcher* m_Dispatchers_ = {}, System::Diagnostics::Tracing::EventSource::OverideEventProvider* m_provider_ = {}, bool m_completelyInited_ = {}, System::Exception* m_constructionException_ = {}, uint8_t m_outOfBandMessageCount_ = {}, System::Diagnostics::Tracing::EventCommandEventArgs* m_deferredCommands_ = {}, ::Array<::Il2CppString*>* m_traits_ = {}, System::Diagnostics::Tracing::SessionMask m_curLiveSessions_ = {}, ::Array<System::Diagnostics::Tracing::EtwSession*>* m_etwSessionIdMap_ = {}, System::Collections::Generic::List_1<System::Diagnostics::Tracing::EtwSession*>* m_legacySessions_ = {}, int64_t m_keywordTriggers_ = {}, System::Diagnostics::Tracing::SessionMask m_activityFilteringForETWEnabled_ = {}, System::Diagnostics::Tracing::ActivityTracker* m_activityTracker_ = {}) noexcept : providerMetadata{providerMetadata_}, m_name{m_name_}, m_id{m_id_}, m_guid{m_guid_}, m_eventData{m_eventData_}, m_rawManifest{m_rawManifest_}, m_eventCommandExecuted{m_eventCommandExecuted_}, m_config{m_config_}, m_eventSourceEnabled{m_eventSourceEnabled_}, m_level{m_level_}, m_matchAnyKeyword{m_matchAnyKeyword_}, m_Dispatchers{m_Dispatchers_}, m_provider{m_provider_}, m_completelyInited{m_completelyInited_}, m_constructionException{m_constructionException_}, m_outOfBandMessageCount{m_outOfBandMessageCount_}, m_deferredCommands{m_deferredCommands_}, m_traits{m_traits_}, m_curLiveSessions{m_curLiveSessions_}, m_etwSessionIdMap{m_etwSessionIdMap_}, m_legacySessions{m_legacySessions_}, m_keywordTriggers{m_keywordTriggers_}, m_activityFilteringForETWEnabled{m_activityFilteringForETWEnabled_}, m_activityTracker{m_activityTracker_} {}
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // Get static field: static System.UInt32 s_currentPid
    static uint _get_s_currentPid();
    // Set static field: static System.UInt32 s_currentPid
    static void _set_s_currentPid(uint value);
    // [ThreadStaticAttribute] Offset: 0xCAFCFC
    // Get static field: static private System.Byte m_EventSourceExceptionRecurenceCount
    static uint8_t _get_m_EventSourceExceptionRecurenceCount();
    // Set static field: static private System.Byte m_EventSourceExceptionRecurenceCount
    static void _set_m_EventSourceExceptionRecurenceCount(uint8_t value);
    // Get static field: static System.Action`1<System.Guid> s_activityDying
    static System::Action_1<System::Guid>* _get_s_activityDying();
    // Set static field: static System.Action`1<System.Guid> s_activityDying
    static void _set_s_activityDying(System::Action_1<System::Guid>* value);
    // Get static field: static private readonly System.Byte[] namespaceBytes
    static ::Array<uint8_t>* _get_namespaceBytes();
    // Set static field: static private readonly System.Byte[] namespaceBytes
    static void _set_namespaceBytes(::Array<uint8_t>* value);
    // Get static field: static private readonly System.Guid AspNetEventSourceGuid
    static System::Guid _get_AspNetEventSourceGuid();
    // Set static field: static private readonly System.Guid AspNetEventSourceGuid
    static void _set_AspNetEventSourceGuid(System::Guid value);
    // private System.Void WriteMultiMerge(System.String eventName, ref System.Diagnostics.Tracing.EventSourceOptions options, System.Diagnostics.Tracing.TraceLoggingEventTypes eventTypes, System.Guid* activityID, System.Guid* childActivityID, params System.Object[] values)
    // Offset: 0x151A234
    void WriteMultiMerge(::Il2CppString* eventName, System::Diagnostics::Tracing::EventSourceOptions& options, System::Diagnostics::Tracing::TraceLoggingEventTypes* eventTypes, System::Guid* activityID, System::Guid* childActivityID, ::Array<::Il2CppObject*>* values);
    // Creating initializer_list -> params proxy for: System.Void WriteMultiMerge(System.String eventName, ref System.Diagnostics.Tracing.EventSourceOptions options, System.Diagnostics.Tracing.TraceLoggingEventTypes eventTypes, System.Guid* activityID, System.Guid* childActivityID, params System.Object[] values)
    void WriteMultiMerge(::Il2CppString* eventName, System::Diagnostics::Tracing::EventSourceOptions& options, System::Diagnostics::Tracing::TraceLoggingEventTypes* eventTypes, System::Guid* activityID, System::Guid* childActivityID, std::initializer_list<::Il2CppObject*> values);
    // Creating TArgs -> initializer_list proxy for: System.Void WriteMultiMerge(System.String eventName, ref System.Diagnostics.Tracing.EventSourceOptions options, System.Diagnostics.Tracing.TraceLoggingEventTypes eventTypes, System.Guid* activityID, System.Guid* childActivityID, params System.Object[] values)
    template<class ...TParams>
    void WriteMultiMerge(::Il2CppString* eventName, System::Diagnostics::Tracing::EventSourceOptions& options, System::Diagnostics::Tracing::TraceLoggingEventTypes* eventTypes, System::Guid* activityID, System::Guid* childActivityID, TParams&&... values) {
      WriteMultiMerge(eventName, options, eventTypes, activityID, childActivityID, {values...});
    }
    // private System.Void WriteMultiMergeInner(System.String eventName, ref System.Diagnostics.Tracing.EventSourceOptions options, System.Diagnostics.Tracing.TraceLoggingEventTypes eventTypes, System.Guid* activityID, System.Guid* childActivityID, params System.Object[] values)
    // Offset: 0x151A2E8
    void WriteMultiMergeInner(::Il2CppString* eventName, System::Diagnostics::Tracing::EventSourceOptions& options, System::Diagnostics::Tracing::TraceLoggingEventTypes* eventTypes, System::Guid* activityID, System::Guid* childActivityID, ::Array<::Il2CppObject*>* values);
    // Creating initializer_list -> params proxy for: System.Void WriteMultiMergeInner(System.String eventName, ref System.Diagnostics.Tracing.EventSourceOptions options, System.Diagnostics.Tracing.TraceLoggingEventTypes eventTypes, System.Guid* activityID, System.Guid* childActivityID, params System.Object[] values)
    void WriteMultiMergeInner(::Il2CppString* eventName, System::Diagnostics::Tracing::EventSourceOptions& options, System::Diagnostics::Tracing::TraceLoggingEventTypes* eventTypes, System::Guid* activityID, System::Guid* childActivityID, std::initializer_list<::Il2CppObject*> values);
    // Creating TArgs -> initializer_list proxy for: System.Void WriteMultiMergeInner(System.String eventName, ref System.Diagnostics.Tracing.EventSourceOptions options, System.Diagnostics.Tracing.TraceLoggingEventTypes eventTypes, System.Guid* activityID, System.Guid* childActivityID, params System.Object[] values)
    template<class ...TParams>
    void WriteMultiMergeInner(::Il2CppString* eventName, System::Diagnostics::Tracing::EventSourceOptions& options, System::Diagnostics::Tracing::TraceLoggingEventTypes* eventTypes, System::Guid* activityID, System::Guid* childActivityID, TParams&&... values) {
      WriteMultiMergeInner(eventName, options, eventTypes, activityID, childActivityID, {values...});
    }
    // System.Void WriteMultiMerge(System.String eventName, ref System.Diagnostics.Tracing.EventSourceOptions options, System.Diagnostics.Tracing.TraceLoggingEventTypes eventTypes, System.Guid* activityID, System.Guid* childActivityID, System.Diagnostics.Tracing.EventSource/EventData* data)
    // Offset: 0x151A8C4
    void WriteMultiMerge(::Il2CppString* eventName, System::Diagnostics::Tracing::EventSourceOptions& options, System::Diagnostics::Tracing::TraceLoggingEventTypes* eventTypes, System::Guid* activityID, System::Guid* childActivityID, System::Diagnostics::Tracing::EventSource::EventData* data);
    // private System.Void WriteCleanup(System.Runtime.InteropServices.GCHandle* pPins, System.Int32 cPins)
    // Offset: 0x151A818
    void WriteCleanup(System::Runtime::InteropServices::GCHandle* pPins, int cPins);
    // private System.Void InitializeProviderMetadata()
    // Offset: 0x151AD04
    void InitializeProviderMetadata();
    // static private System.Int32 AddValueToMetaData(System.Collections.Generic.List`1<System.Byte> metaData, System.String value)
    // Offset: 0x151B15C
    static int AddValueToMetaData(System::Collections::Generic::List_1<uint8_t>* metaData, ::Il2CppString* value);
    // static private System.Int32 HexDigit(System.Char c)
    // Offset: 0x151B430
    static int HexDigit(::Il2CppChar c);
    // private System.Diagnostics.Tracing.NameInfo UpdateDescriptor(System.String name, System.Diagnostics.Tracing.TraceLoggingEventTypes eventInfo, ref System.Diagnostics.Tracing.EventSourceOptions options, out System.Diagnostics.Tracing.EventDescriptor descriptor)
    // Offset: 0x151AC08
    System::Diagnostics::Tracing::NameInfo* UpdateDescriptor(::Il2CppString* name, System::Diagnostics::Tracing::TraceLoggingEventTypes* eventInfo, System::Diagnostics::Tracing::EventSourceOptions& options, System::Diagnostics::Tracing::EventDescriptor& descriptor);
    // public System.String get_Name()
    // Offset: 0x151B570
    ::Il2CppString* get_Name();
    // public System.Guid get_Guid()
    // Offset: 0x151B578
    System::Guid get_Guid();
    // public System.Boolean IsEnabled()
    // Offset: 0x151B588
    bool IsEnabled();
    // public System.Boolean IsEnabled(System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords keywords)
    // Offset: 0x151A2B0
    bool IsEnabled(System::Diagnostics::Tracing::EventLevel level, System::Diagnostics::Tracing::EventKeywords keywords);
    // public System.Boolean IsEnabled(System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords keywords, System.Diagnostics.Tracing.EventChannel channel)
    // Offset: 0x151B590
    bool IsEnabled(System::Diagnostics::Tracing::EventLevel level, System::Diagnostics::Tracing::EventKeywords keywords, System::Diagnostics::Tracing::EventChannel channel);
    // static public System.Guid GetGuid(System.Type eventSourceType)
    // Offset: 0x151B604
    static System::Guid GetGuid(System::Type* eventSourceType);
    // static public System.String GetName(System.Type eventSourceType)
    // Offset: 0x151C464
    static ::Il2CppString* GetName(System::Type* eventSourceType);
    // static public System.Void SetCurrentThreadActivityId(System.Guid activityId)
    // Offset: 0x1512FAC
    static void SetCurrentThreadActivityId(System::Guid activityId);
    // static public System.Guid get_CurrentThreadActivityId()
    // Offset: 0x1512D54
    static System::Guid get_CurrentThreadActivityId();
    // static System.Guid get_InternalCurrentThreadActivityId()
    // Offset: 0x15117F0
    static System::Guid get_InternalCurrentThreadActivityId();
    // static System.Guid get_FallbackActivityId()
    // Offset: 0x151C63C
    static System::Guid get_FallbackActivityId();
    // protected System.Void .ctor(System.Diagnostics.Tracing.EventSourceSettings settings)
    // Offset: 0x151C840
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EventSource* New_ctor(System::Diagnostics::Tracing::EventSourceSettings settings) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Tracing::EventSource::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EventSource*, creationType>(settings)));
    }
    // protected System.Void .ctor(System.Diagnostics.Tracing.EventSourceSettings settings, params System.String[] traits)
    // Offset: 0x151C848
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EventSource* New_ctor(System::Diagnostics::Tracing::EventSourceSettings settings, ::Array<::Il2CppString*>* traits) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Tracing::EventSource::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EventSource*, creationType>(settings, traits)));
    }
    // Creating initializer_list -> params proxy for: System.Void .ctor(System.Diagnostics.Tracing.EventSourceSettings settings, params System.String[] traits)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EventSource* New_ctor(System::Diagnostics::Tracing::EventSourceSettings settings, std::initializer_list<::Il2CppString*> traits) {
      return New_ctor<creationType>(settings, ::Array<::Il2CppString*>::New(traits));
    }
    // Creating TArgs -> initializer_list proxy for: System.Void .ctor(System.Diagnostics.Tracing.EventSourceSettings settings, params System.String[] traits)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary, class ...TParams>
    static EventSource* New_ctor(System::Diagnostics::Tracing::EventSourceSettings settings, TParams&&... traits) {
      return New_ctor<creationType>(settings, {traits...});
    }
    // protected System.Void OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs command)
    // Offset: 0x151CFF0
    void OnEventCommand(System::Diagnostics::Tracing::EventCommandEventArgs* command);
    // protected System.Void WriteEvent(System.Int32 eventId, System.Int32 arg1)
    // Offset: 0x151CFF4
    void WriteEvent(int eventId, int arg1);
    // protected System.Void WriteEvent(System.Int32 eventId, System.String arg1, System.String arg2)
    // Offset: 0x151D0D8
    void WriteEvent(int eventId, ::Il2CppString* arg1, ::Il2CppString* arg2);
    // protected System.Void WriteEvent(System.Int32 eventId, System.String arg1, System.String arg2, System.String arg3)
    // Offset: 0x151D21C
    void WriteEvent(int eventId, ::Il2CppString* arg1, ::Il2CppString* arg2, ::Il2CppString* arg3);
    // protected System.Void WriteEventCore(System.Int32 eventId, System.Int32 eventDataCount, System.Diagnostics.Tracing.EventSource/EventData* data)
    // Offset: 0x151D0C8
    void WriteEventCore(int eventId, int eventDataCount, System::Diagnostics::Tracing::EventSource::EventData* data);
    // protected System.Void WriteEventWithRelatedActivityIdCore(System.Int32 eventId, System.Guid* relatedActivityId, System.Int32 eventDataCount, System.Diagnostics.Tracing.EventSource/EventData* data)
    // Offset: 0x151D3BC
    void WriteEventWithRelatedActivityIdCore(int eventId, System::Guid* relatedActivityId, int eventDataCount, System::Diagnostics::Tracing::EventSource::EventData* data);
    // protected System.Void WriteEvent(System.Int32 eventId, params System.Object[] args)
    // Offset: 0x151EE10
    void WriteEvent(int eventId, ::Array<::Il2CppObject*>* args);
    // Creating initializer_list -> params proxy for: System.Void WriteEvent(System.Int32 eventId, params System.Object[] args)
    void WriteEvent(int eventId, std::initializer_list<::Il2CppObject*> args);
    // Creating TArgs -> initializer_list proxy for: System.Void WriteEvent(System.Int32 eventId, params System.Object[] args)
    template<class ...TParams>
    void WriteEvent(int eventId, TParams&&... args) {
      WriteEvent(eventId, {args...});
    }
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x151FBCC
    void Dispose(bool disposing);
    // System.Void WriteStringToListener(System.Diagnostics.Tracing.EventListener listener, System.String msg, System.Diagnostics.Tracing.SessionMask m)
    // Offset: 0x152004C
    void WriteStringToListener(System::Diagnostics::Tracing::EventListener* listener, ::Il2CppString* msg, System::Diagnostics::Tracing::SessionMask m);
    // private System.Void WriteEventRaw(System.String eventName, ref System.Diagnostics.Tracing.EventDescriptor eventDescriptor, System.Guid* activityID, System.Guid* relatedActivityID, System.Int32 dataCount, System.IntPtr data)
    // Offset: 0x151A76C
    void WriteEventRaw(::Il2CppString* eventName, System::Diagnostics::Tracing::EventDescriptor& eventDescriptor, System::Guid* activityID, System::Guid* relatedActivityID, int dataCount, System::IntPtr data);
    // private System.Void Initialize(System.Guid eventSourceGuid, System.String eventSourceName, System.String[] traits)
    // Offset: 0x151C9CC
    void Initialize(System::Guid eventSourceGuid, ::Il2CppString* eventSourceName, ::Array<::Il2CppString*>* traits);
    // static private System.String GetName(System.Type eventSourceType, System.Diagnostics.Tracing.EventManifestOptions flags)
    // Offset: 0x151C4CC
    static ::Il2CppString* GetName(System::Type* eventSourceType, System::Diagnostics::Tracing::EventManifestOptions flags);
    // static private System.Guid GenerateGuidFromName(System.String name)
    // Offset: 0x151C32C
    static System::Guid GenerateGuidFromName(::Il2CppString* name);
    // private System.Object DecodeObject(System.Int32 eventId, System.Int32 parameterId, ref System.Diagnostics.Tracing.EventSource/EventData* data)
    // Offset: 0x15213DC
    ::Il2CppObject* DecodeObject(int eventId, int parameterId, System::Diagnostics::Tracing::EventSource::EventData*& data);
    // private System.Diagnostics.Tracing.EventDispatcher GetDispatcher(System.Diagnostics.Tracing.EventListener listener)
    // Offset: 0x1521D0C
    System::Diagnostics::Tracing::EventDispatcher* GetDispatcher(System::Diagnostics::Tracing::EventListener* listener);
    // private System.Void WriteEventVarargs(System.Int32 eventId, System.Guid* childActivityID, System.Object[] args)
    // Offset: 0x151EE1C
    void WriteEventVarargs(int eventId, System::Guid* childActivityID, ::Array<::Il2CppObject*>* args);
    // private System.Object[] SerializeEventArgs(System.Int32 eventId, System.Object[] args)
    // Offset: 0x15220C4
    ::Array<::Il2CppObject*>* SerializeEventArgs(int eventId, ::Array<::Il2CppObject*>* args);
    // private System.Void LogEventArgsMismatches(System.Reflection.ParameterInfo[] infos, System.Object[] args)
    // Offset: 0x1521D4C
    void LogEventArgsMismatches(::Array<System::Reflection::ParameterInfo*>* infos, ::Array<::Il2CppObject*>* args);
    // private System.Int32 GetParamLengthIncludingByteArray(System.Reflection.ParameterInfo[] parameters)
    // Offset: 0x15222C4
    int GetParamLengthIncludingByteArray(::Array<System::Reflection::ParameterInfo*>* parameters);
    // private System.Void WriteToAllListeners(System.Int32 eventId, System.Guid* childActivityID, System.Int32 eventDataCount, System.Diagnostics.Tracing.EventSource/EventData* data)
    // Offset: 0x151EB24
    void WriteToAllListeners(int eventId, System::Guid* childActivityID, int eventDataCount, System::Diagnostics::Tracing::EventSource::EventData* data);
    // private System.Void WriteToAllListeners(System.Int32 eventId, System.Guid* childActivityID, params System.Object[] args)
    // Offset: 0x1521F7C
    void WriteToAllListeners(int eventId, System::Guid* childActivityID, ::Array<::Il2CppObject*>* args);
    // Creating initializer_list -> params proxy for: System.Void WriteToAllListeners(System.Int32 eventId, System.Guid* childActivityID, params System.Object[] args)
    void WriteToAllListeners(int eventId, System::Guid* childActivityID, std::initializer_list<::Il2CppObject*> args);
    // Creating TArgs -> initializer_list proxy for: System.Void WriteToAllListeners(System.Int32 eventId, System.Guid* childActivityID, params System.Object[] args)
    template<class ...TParams>
    void WriteToAllListeners(int eventId, System::Guid* childActivityID, TParams&&... args) {
      WriteToAllListeners(eventId, childActivityID, {args...});
    }
    // private System.Void DispatchToAllListeners(System.Int32 eventId, System.Guid* childActivityID, System.Diagnostics.Tracing.EventWrittenEventArgs eventCallbackArgs)
    // Offset: 0x15223E0
    void DispatchToAllListeners(int eventId, System::Guid* childActivityID, System::Diagnostics::Tracing::EventWrittenEventArgs* eventCallbackArgs);
    // private System.Void WriteEventString(System.Diagnostics.Tracing.EventLevel level, System.Int64 keywords, System.String msgString)
    // Offset: 0x1520198
    void WriteEventString(System::Diagnostics::Tracing::EventLevel level, int64_t keywords, ::Il2CppString* msgString);
    // private System.Void WriteStringToAllListeners(System.String eventName, System.String msg)
    // Offset: 0x152269C
    void WriteStringToAllListeners(::Il2CppString* eventName, ::Il2CppString* msg);
    // private System.Diagnostics.Tracing.SessionMask GetEtwSessionMask(System.Int32 eventId, System.Guid* childActivityID)
    // Offset: 0x151E0C8
    System::Diagnostics::Tracing::SessionMask GetEtwSessionMask(int eventId, System::Guid* childActivityID);
    // private System.Boolean IsEnabledByDefault(System.Int32 eventNum, System.Boolean enable, System.Diagnostics.Tracing.EventLevel currentLevel, System.Diagnostics.Tracing.EventKeywords currentMatchAnyKeyword)
    // Offset: 0x1522928
    bool IsEnabledByDefault(int eventNum, bool enable, System::Diagnostics::Tracing::EventLevel currentLevel, System::Diagnostics::Tracing::EventKeywords currentMatchAnyKeyword);
    // private System.Boolean IsEnabledCommon(System.Boolean enabled, System.Diagnostics.Tracing.EventLevel currentLevel, System.Diagnostics.Tracing.EventKeywords currentMatchAnyKeyword, System.Diagnostics.Tracing.EventLevel eventLevel, System.Diagnostics.Tracing.EventKeywords eventKeywords, System.Diagnostics.Tracing.EventChannel eventChannel)
    // Offset: 0x151B5C8
    bool IsEnabledCommon(bool enabled, System::Diagnostics::Tracing::EventLevel currentLevel, System::Diagnostics::Tracing::EventKeywords currentMatchAnyKeyword, System::Diagnostics::Tracing::EventLevel eventLevel, System::Diagnostics::Tracing::EventKeywords eventKeywords, System::Diagnostics::Tracing::EventChannel eventChannel);
    // private System.Void ThrowEventSourceException(System.String eventName, System.Exception innerEx)
    // Offset: 0x151E344
    void ThrowEventSourceException(::Il2CppString* eventName, System::Exception* innerEx);
    // private System.Void ValidateEventOpcodeForTransfer(ref System.Diagnostics.Tracing.EventSource/EventMetadata eventData, System.String eventName)
    // Offset: 0x151E09C
    void ValidateEventOpcodeForTransfer(System::Diagnostics::Tracing::EventSource::EventMetadata& eventData, ::Il2CppString* eventName);
    // static System.Diagnostics.Tracing.EventOpcode GetOpcodeWithDefault(System.Diagnostics.Tracing.EventOpcode opcode, System.String eventName)
    // Offset: 0x1522AA4
    static System::Diagnostics::Tracing::EventOpcode GetOpcodeWithDefault(System::Diagnostics::Tracing::EventOpcode opcode, ::Il2CppString* eventName);
    // System.Void SendCommand(System.Diagnostics.Tracing.EventListener listener, System.Int32 perEventSourceSessionId, System.Int32 etwSessionId, System.Diagnostics.Tracing.EventCommand command, System.Boolean enable, System.Diagnostics.Tracing.EventLevel level, System.Diagnostics.Tracing.EventKeywords matchAnyKeyword, System.Collections.Generic.IDictionary`2<System.String,System.String> commandArguments)
    // Offset: 0x1522B40
    void SendCommand(System::Diagnostics::Tracing::EventListener* listener, int perEventSourceSessionId, int etwSessionId, System::Diagnostics::Tracing::EventCommand command, bool enable, System::Diagnostics::Tracing::EventLevel level, System::Diagnostics::Tracing::EventKeywords matchAnyKeyword, System::Collections::Generic::IDictionary_2<::Il2CppString*, ::Il2CppString*>* commandArguments);
    // System.Void DoCommand(System.Diagnostics.Tracing.EventCommandEventArgs commandArgs)
    // Offset: 0x1520670
    void DoCommand(System::Diagnostics::Tracing::EventCommandEventArgs* commandArgs);
    // System.Void UpdateEtwSession(System.Int32 sessionIdBit, System.Int32 etwSessionId, System.Boolean bEnable, System.String activityFilters, System.Boolean participateInSampling)
    // Offset: 0x15234B0
    void UpdateEtwSession(int sessionIdBit, int etwSessionId, bool bEnable, ::Il2CppString* activityFilters, bool participateInSampling);
    // static System.Boolean ParseCommandArgs(System.Collections.Generic.IDictionary`2<System.String,System.String> commandArguments, out System.Boolean participateInSampling, out System.String activityFilters, out System.Int32 sessionIdBit)
    // Offset: 0x152321C
    static bool ParseCommandArgs(System::Collections::Generic::IDictionary_2<::Il2CppString*, ::Il2CppString*>* commandArguments, bool& participateInSampling, ::Il2CppString*& activityFilters, int& sessionIdBit);
    // System.Void UpdateKwdTriggers(System.Boolean enable)
    // Offset: 0x1523898
    void UpdateKwdTriggers(bool enable);
    // System.Boolean EnableEventForDispatcher(System.Diagnostics.Tracing.EventDispatcher dispatcher, System.Int32 eventId, System.Boolean value)
    // Offset: 0x152312C
    bool EnableEventForDispatcher(System::Diagnostics::Tracing::EventDispatcher* dispatcher, int eventId, bool value);
    // private System.Boolean AnyEventEnabled()
    // Offset: 0x15237DC
    bool AnyEventEnabled();
    // private System.Boolean get_IsDisposed()
    // Offset: 0x1523E3C
    bool get_IsDisposed();
    // private System.Void EnsureDescriptorsInitialized()
    // Offset: 0x1522D30
    void EnsureDescriptorsInitialized();
    // private System.Boolean SendManifest(System.Byte[] rawManifest)
    // Offset: 0x151FCEC
    bool SendManifest(::Array<uint8_t>* rawManifest);
    // static System.Attribute GetCustomAttributeHelper(System.Reflection.MemberInfo member, System.Type attributeType, System.Diagnostics.Tracing.EventManifestOptions flags)
    // Offset: 0x151B86C
    static System::Attribute* GetCustomAttributeHelper(System::Reflection::MemberInfo* member, System::Type* attributeType, System::Diagnostics::Tracing::EventManifestOptions flags);
    // static private System.Boolean AttributeTypeNamesMatch(System.Type attributeType, System.Type reflectedAttributeType)
    // Offset: 0x15259A4
    static bool AttributeTypeNamesMatch(System::Type* attributeType, System::Type* reflectedAttributeType);
    // static private System.Type GetEventSourceBaseType(System.Type eventSourceType, System.Boolean allowEventSourceOverride, System.Boolean reflectionOnly)
    // Offset: 0x1525B1C
    static System::Type* GetEventSourceBaseType(System::Type* eventSourceType, bool allowEventSourceOverride, bool reflectionOnly);
    // static private System.Byte[] CreateManifestAndDescriptors(System.Type eventSourceType, System.String eventSourceDllName, System.Diagnostics.Tracing.EventSource source, System.Diagnostics.Tracing.EventManifestOptions flags)
    // Offset: 0x1523E88
    static ::Array<uint8_t>* CreateManifestAndDescriptors(System::Type* eventSourceType, ::Il2CppString* eventSourceDllName, System::Diagnostics::Tracing::EventSource* source, System::Diagnostics::Tracing::EventManifestOptions flags);
    // static private System.Boolean RemoveFirstArgIfRelatedActivityId(ref System.Reflection.ParameterInfo[] args)
    // Offset: 0x1526310
    static bool RemoveFirstArgIfRelatedActivityId(::Array<System::Reflection::ParameterInfo*>*& args);
    // static private System.Void AddProviderEnumKind(System.Diagnostics.Tracing.ManifestBuilder manifest, System.Reflection.FieldInfo staticField, System.String providerEnumKind)
    // Offset: 0x1525D38
    static void AddProviderEnumKind(System::Diagnostics::Tracing::ManifestBuilder* manifest, System::Reflection::FieldInfo* staticField, ::Il2CppString* providerEnumKind);
    // static private System.Void AddEventDescriptor(ref System.Diagnostics.Tracing.EventSource/EventMetadata[] eventData, System.String eventName, System.Diagnostics.Tracing.EventAttribute eventAttribute, System.Reflection.ParameterInfo[] eventParameters, System.Boolean hasRelatedActivityID)
    // Offset: 0x1526BA4
    static void AddEventDescriptor(::Array<System::Diagnostics::Tracing::EventSource::EventMetadata>*& eventData, ::Il2CppString* eventName, System::Diagnostics::Tracing::EventAttribute* eventAttribute, ::Array<System::Reflection::ParameterInfo*>* eventParameters, bool hasRelatedActivityID);
    // static private System.Void TrimEventDescriptors(ref System.Diagnostics.Tracing.EventSource/EventMetadata[] eventData)
    // Offset: 0x1526E28
    static void TrimEventDescriptors(::Array<System::Diagnostics::Tracing::EventSource::EventMetadata>*& eventData);
    // System.Void AddListener(System.Diagnostics.Tracing.EventListener listener)
    // Offset: 0x1516324
    void AddListener(System::Diagnostics::Tracing::EventListener* listener);
    // static private System.Void DebugCheckEvent(ref System.Collections.Generic.Dictionary`2<System.String,System.String> eventsByName, System.Diagnostics.Tracing.EventSource/EventMetadata[] eventData, System.Reflection.MethodInfo method, System.Diagnostics.Tracing.EventAttribute eventAttribute, System.Diagnostics.Tracing.ManifestBuilder manifest, System.Diagnostics.Tracing.EventManifestOptions options)
    // Offset: 0x1526490
    static void DebugCheckEvent(System::Collections::Generic::Dictionary_2<::Il2CppString*, ::Il2CppString*>*& eventsByName, ::Array<System::Diagnostics::Tracing::EventSource::EventMetadata>* eventData, System::Reflection::MethodInfo* method, System::Diagnostics::Tracing::EventAttribute* eventAttribute, System::Diagnostics::Tracing::ManifestBuilder* manifest, System::Diagnostics::Tracing::EventManifestOptions options);
    // static private System.Int32 GetHelperCallFirstArg(System.Reflection.MethodInfo method)
    // Offset: 0x1526F04
    static int GetHelperCallFirstArg(System::Reflection::MethodInfo* method);
    // System.Void ReportOutOfBandMessage(System.String msg, System.Boolean flush)
    // Offset: 0x15111C0
    void ReportOutOfBandMessage(::Il2CppString* msg, bool flush);
    // private System.Diagnostics.Tracing.EventSourceSettings ValidateSettings(System.Diagnostics.Tracing.EventSourceSettings settings)
    // Offset: 0x151C918
    System::Diagnostics::Tracing::EventSourceSettings ValidateSettings(System::Diagnostics::Tracing::EventSourceSettings settings);
    // private System.Boolean get_ThrowOnEventWriteErrors()
    // Offset: 0x1522A18
    bool get_ThrowOnEventWriteErrors();
    // private System.Boolean get_SelfDescribingEvents()
    // Offset: 0x151E338
    bool get_SelfDescribingEvents();
    // private System.Void ReportActivitySamplingInfo(System.Diagnostics.Tracing.EventListener listener, System.Diagnostics.Tracing.SessionMask sessions)
    // Offset: 0x1523930
    void ReportActivitySamplingInfo(System::Diagnostics::Tracing::EventListener* listener, System::Diagnostics::Tracing::SessionMask sessions);
    // static private System.Void .cctor()
    // Offset: 0x15270EC
    static void _cctor();
    // public override System.String ToString()
    // Offset: 0x151C708
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
    // protected System.Void .ctor()
    // Offset: 0x151C834
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EventSource* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::Tracing::EventSource::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EventSource*, creationType>()));
    }
    // public System.Void Dispose()
    // Offset: 0x15166DC
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
    // protected override System.Void Finalize()
    // Offset: 0x151FFD8
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // System.Diagnostics.Tracing.EventSource
  #pragma pack(pop)
  static check_size<sizeof(EventSource), 200 + sizeof(System::Diagnostics::Tracing::ActivityTracker*)> __System_Diagnostics_Tracing_EventSourceSizeCheck;
  static_assert(sizeof(EventSource) == 0xD0);
}
DEFINE_IL2CPP_ARG_TYPE(System::Diagnostics::Tracing::EventSource*, "System.Diagnostics.Tracing", "EventSource");
DEFINE_IL2CPP_ARG_TYPE(System::Diagnostics::Tracing::EventSource::EventMetadata, "System.Diagnostics.Tracing", "EventSource/EventMetadata");
