// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Diagnostics.Tracing.EventSource
#include "System/Diagnostics/Tracing/EventSource.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Completed forward declares
// Type namespace: System.Diagnostics.Tracing
namespace System::Diagnostics::Tracing {
  // Autogenerated type: System.Diagnostics.Tracing.EventSource/EventData
  struct EventSource::EventData : public System::ValueType {
    public:
    // System.Int64 m_Ptr
    // Offset: 0x0
    int64_t m_Ptr;
    // System.Int32 m_Size
    // Offset: 0x8
    int m_Size;
    // System.Int32 m_Reserved
    // Offset: 0xC
    int m_Reserved;
    // Creating value type constructor for type: EventData
    constexpr EventData(int64_t m_Ptr_ = {}, int m_Size_ = {}, int m_Reserved_ = {}) noexcept : m_Ptr{m_Ptr_}, m_Size{m_Size_}, m_Reserved{m_Reserved_} {}
    // public System.IntPtr get_DataPointer()
    // Offset: 0xA2FF08
    System::IntPtr get_DataPointer();
    // public System.Void set_DataPointer(System.IntPtr value)
    // Offset: 0xA2FF14
    void set_DataPointer(System::IntPtr value);
    // public System.Void set_Size(System.Int32 value)
    // Offset: 0xA2FF40
    void set_Size(int value);
    // System.Void SetMetadata(System.Byte* pointer, System.Int32 size, System.Int32 reserved)
    // Offset: 0xA2FF48
    void SetMetadata(uint8_t* pointer, int size, int reserved);
  }; // System.Diagnostics.Tracing.EventSource/EventData
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Diagnostics::Tracing::EventSource::EventData, "System.Diagnostics.Tracing", "EventSource/EventData");
#pragma pack(pop)
