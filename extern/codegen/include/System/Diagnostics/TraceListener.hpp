// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.MarshalByRefObject
#include "System/MarshalByRefObject.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Diagnostics
namespace System::Diagnostics {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: System.Diagnostics.TraceListener
  // [] Offset: FFFFFFFF
  class TraceListener : public System::MarshalByRefObject/*, public System::IDisposable*/ {
    public:
    // private System.Int32 indentLevel
    // Size: 0x4
    // Offset: 0x18
    int indentLevel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 indentSize
    // Size: 0x4
    // Offset: 0x1C
    int indentSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean needIndent
    // Size: 0x1
    // Offset: 0x20
    bool needIndent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: needIndent and: listenerName
    char __padding2[0x7] = {};
    // private System.String listenerName
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppString* listenerName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // Creating value type constructor for type: TraceListener
    TraceListener(int indentLevel_ = {}, int indentSize_ = {}, bool needIndent_ = {}, ::Il2CppString* listenerName_ = {}) noexcept : indentLevel{indentLevel_}, indentSize{indentSize_}, needIndent{needIndent_}, listenerName{listenerName_} {}
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // Deleting conversion operator: operator ::Il2CppObject*
    constexpr operator ::Il2CppObject*() const noexcept = delete;
    // protected System.Void .ctor(System.String name)
    // Offset: 0x1798198
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TraceListener* New_ctor(::Il2CppString* name) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Diagnostics::TraceListener::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TraceListener*, creationType>(name)));
    }
    // public System.Boolean get_IsThreadSafe()
    // Offset: 0x179BA4C
    bool get_IsThreadSafe();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x179BAD0
    void Dispose(bool disposing);
    // public System.Void Flush()
    // Offset: 0x179BAD4
    void Flush();
    // public System.Void set_IndentLevel(System.Int32 value)
    // Offset: 0x179AE3C
    void set_IndentLevel(int value);
    // public System.Void set_IndentSize(System.Int32 value)
    // Offset: 0x179AE58
    void set_IndentSize(int value);
    // protected System.Boolean get_NeedIndent()
    // Offset: 0x179BAD8
    bool get_NeedIndent();
    // protected System.Void set_NeedIndent(System.Boolean value)
    // Offset: 0x179BAE0
    void set_NeedIndent(bool value);
    // public System.Void Fail(System.String message)
    // Offset: 0x17981F4
    void Fail(::Il2CppString* message);
    // public System.Void Fail(System.String message, System.String detailMessage)
    // Offset: 0x17982AC
    void Fail(::Il2CppString* message, ::Il2CppString* detailMessage);
    // public System.Void Write(System.String message)
    // Offset: 0xFFFFFFFF
    void Write(::Il2CppString* message);
    // protected System.Void WriteIndent()
    // Offset: 0x179BAEC
    void WriteIndent();
    // public System.Void WriteLine(System.String message)
    // Offset: 0xFFFFFFFF
    void WriteLine(::Il2CppString* message);
    // public System.Void Dispose()
    // Offset: 0x179BA54
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
  }; // System.Diagnostics.TraceListener
  #pragma pack(pop)
  static check_size<sizeof(TraceListener), 40 + sizeof(::Il2CppString*)> __System_Diagnostics_TraceListenerSizeCheck;
  static_assert(sizeof(TraceListener) == 0x30);
}
DEFINE_IL2CPP_ARG_TYPE(System::Diagnostics::TraceListener*, "System.Diagnostics", "TraceListener");
