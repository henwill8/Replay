// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.PlatformID
#include "System/PlatformID.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Version
  class Version;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.OperatingSystem
  // [] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: CA8924
  class OperatingSystem : public ::Il2CppObject/*, public System::ICloneable, public System::Runtime::Serialization::ISerializable*/ {
    public:
    // private System.PlatformID _platform
    // Size: 0x4
    // Offset: 0x10
    System::PlatformID platform;
    // Field size check
    static_assert(sizeof(System::PlatformID) == 0x4);
    // Padding between fields: platform and: version
    char __padding0[0x4] = {};
    // private System.Version _version
    // Size: 0x8
    // Offset: 0x18
    System::Version* version;
    // Field size check
    static_assert(sizeof(System::Version*) == 0x8);
    // private System.String _servicePack
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppString* servicePack;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // Creating value type constructor for type: OperatingSystem
    OperatingSystem(System::PlatformID platform_ = {}, System::Version* version_ = {}, ::Il2CppString* servicePack_ = {}) noexcept : platform{platform_}, version{version_}, servicePack{servicePack_} {}
    // Creating interface conversion operator: operator System::ICloneable
    operator System::ICloneable() noexcept {
      return *reinterpret_cast<System::ICloneable*>(this);
    }
    // Creating interface conversion operator: operator System::Runtime::Serialization::ISerializable
    operator System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<System::Runtime::Serialization::ISerializable*>(this);
    }
    // public System.Void .ctor(System.PlatformID platform, System.Version version)
    // Offset: 0x1B216A8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OperatingSystem* New_ctor(System::PlatformID platform, System::Version* version) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::OperatingSystem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OperatingSystem*, creationType>(platform, version)));
    }
    // private System.Void .ctor(System.Runtime.Serialization.SerializationInfo information, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x1B21808
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OperatingSystem* New_ctor(System::Runtime::Serialization::SerializationInfo* information, System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::OperatingSystem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OperatingSystem*, creationType>(information, context)));
    }
    // public System.PlatformID get_Platform()
    // Offset: 0x1B21994
    System::PlatformID get_Platform();
    // public System.Version get_Version()
    // Offset: 0x1B2199C
    System::Version* get_Version();
    // public System.String get_ServicePack()
    // Offset: 0x1B219A4
    ::Il2CppString* get_ServicePack();
    // public System.Object Clone()
    // Offset: 0x1B219AC
    // Implemented from: System.ICloneable
    // Base method: System.Object ICloneable::Clone()
    ::Il2CppObject* Clone();
    // Creating proxy method: System_ICloneable_Clone
    // Maps to method: Clone
    ::Il2CppObject* System_ICloneable_Clone();
    // public System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x1B21A20
    // Implemented from: System.Runtime.Serialization.ISerializable
    // Base method: System.Void ISerializable::GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
    // Creating proxy method: System_Runtime_Serialization_ISerializable_GetObjectData
    // Maps to method: GetObjectData
    void System_Runtime_Serialization_ISerializable_GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
    // public override System.String ToString()
    // Offset: 0x1B21AE4
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
  }; // System.OperatingSystem
  #pragma pack(pop)
  static check_size<sizeof(OperatingSystem), 32 + sizeof(::Il2CppString*)> __System_OperatingSystemSizeCheck;
  static_assert(sizeof(OperatingSystem) == 0x28);
}
DEFINE_IL2CPP_ARG_TYPE(System::OperatingSystem*, "System", "OperatingSystem");
