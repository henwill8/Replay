// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: ManualResetEvent
  class ManualResetEvent;
  // Forward declaring type: WaitHandle
  class WaitHandle;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Size: 0x2A
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.IOAsyncResult
  // [] Offset: FFFFFFFF
  class IOAsyncResult : public ::Il2CppObject/*, public System::IAsyncResult*/ {
    public:
    // private System.AsyncCallback async_callback
    // Size: 0x8
    // Offset: 0x10
    System::AsyncCallback* async_callback;
    // Field size check
    static_assert(sizeof(System::AsyncCallback*) == 0x8);
    // private System.Object async_state
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* async_state;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Threading.ManualResetEvent wait_handle
    // Size: 0x8
    // Offset: 0x20
    System::Threading::ManualResetEvent* wait_handle;
    // Field size check
    static_assert(sizeof(System::Threading::ManualResetEvent*) == 0x8);
    // private System.Boolean completed_synchronously
    // Size: 0x1
    // Offset: 0x28
    bool completed_synchronously;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean completed
    // Size: 0x1
    // Offset: 0x29
    bool completed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: IOAsyncResult
    IOAsyncResult(System::AsyncCallback* async_callback_ = {}, ::Il2CppObject* async_state_ = {}, System::Threading::ManualResetEvent* wait_handle_ = {}, bool completed_synchronously_ = {}, bool completed_ = {}) noexcept : async_callback{async_callback_}, async_state{async_state_}, wait_handle{wait_handle_}, completed_synchronously{completed_synchronously_}, completed{completed_} {}
    // Creating interface conversion operator: operator System::IAsyncResult
    operator System::IAsyncResult() noexcept {
      return *reinterpret_cast<System::IAsyncResult*>(this);
    }
    // protected System.Void Init(System.AsyncCallback async_callback, System.Object async_state)
    // Offset: 0x17A5604
    void Init(System::AsyncCallback* async_callback, ::Il2CppObject* async_state);
    // protected System.Void .ctor(System.AsyncCallback async_callback, System.Object async_state)
    // Offset: 0x17A5658
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IOAsyncResult* New_ctor(System::AsyncCallback* async_callback, ::Il2CppObject* async_state) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::IOAsyncResult::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IOAsyncResult*, creationType>(async_callback, async_state)));
    }
    // public System.AsyncCallback get_AsyncCallback()
    // Offset: 0x17A56A8
    System::AsyncCallback* get_AsyncCallback();
    // protected System.Void set_CompletedSynchronously(System.Boolean value)
    // Offset: 0x17A57CC
    void set_CompletedSynchronously(bool value);
    // protected System.Void set_IsCompleted(System.Boolean value)
    // Offset: 0x17A57E0
    void set_IsCompleted(bool value);
    // System.Void CompleteDisposed()
    // Offset: 0xFFFFFFFF
    void CompleteDisposed();
    // protected System.Void .ctor()
    // Offset: 0x17A55FC
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IOAsyncResult* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::IOAsyncResult::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IOAsyncResult*, creationType>()));
    }
    // public System.Object get_AsyncState()
    // Offset: 0x17A56B0
    // Implemented from: System.IAsyncResult
    // Base method: System.Object IAsyncResult::get_AsyncState()
    ::Il2CppObject* get_AsyncState();
    // Creating proxy method: System_IAsyncResult_get_AsyncState
    // Maps to method: get_AsyncState
    ::Il2CppObject* System_IAsyncResult_get_AsyncState();
    // public System.Threading.WaitHandle get_AsyncWaitHandle()
    // Offset: 0x17A56B8
    // Implemented from: System.IAsyncResult
    // Base method: System.Threading.WaitHandle IAsyncResult::get_AsyncWaitHandle()
    System::Threading::WaitHandle* get_AsyncWaitHandle();
    // Creating proxy method: System_IAsyncResult_get_AsyncWaitHandle
    // Maps to method: get_AsyncWaitHandle
    System::Threading::WaitHandle* System_IAsyncResult_get_AsyncWaitHandle();
    // public System.Boolean get_CompletedSynchronously()
    // Offset: 0x17A57C4
    // Implemented from: System.IAsyncResult
    // Base method: System.Boolean IAsyncResult::get_CompletedSynchronously()
    bool get_CompletedSynchronously();
    // Creating proxy method: System_IAsyncResult_get_CompletedSynchronously
    // Maps to method: get_CompletedSynchronously
    bool System_IAsyncResult_get_CompletedSynchronously();
    // public System.Boolean get_IsCompleted()
    // Offset: 0x17A57D8
    // Implemented from: System.IAsyncResult
    // Base method: System.Boolean IAsyncResult::get_IsCompleted()
    bool get_IsCompleted();
    // Creating proxy method: System_IAsyncResult_get_IsCompleted
    // Maps to method: get_IsCompleted
    bool System_IAsyncResult_get_IsCompleted();
  }; // System.IOAsyncResult
  #pragma pack(pop)
  static check_size<sizeof(IOAsyncResult), 41 + sizeof(bool)> __System_IOAsyncResultSizeCheck;
  static_assert(sizeof(IOAsyncResult) == 0x2A);
}
DEFINE_IL2CPP_ARG_TYPE(System::IOAsyncResult*, "System", "IOAsyncResult");
