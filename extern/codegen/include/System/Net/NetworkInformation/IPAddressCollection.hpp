// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Collections.Generic.ICollection`1
#include "System/Collections/Generic/ICollection_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPAddress
  class IPAddress;
}
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: Collection`1<T>
  template<typename T>
  class Collection_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: System.Net.NetworkInformation
namespace System::Net::NetworkInformation {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.NetworkInformation.IPAddressCollection
  // [] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: CB7588
  class IPAddressCollection : public ::Il2CppObject/*, public System::Collections::Generic::ICollection_1<System::Net::IPAddress*>*/ {
    public:
    // private System.Collections.ObjectModel.Collection`1<System.Net.IPAddress> addresses
    // Size: 0x8
    // Offset: 0x10
    System::Collections::ObjectModel::Collection_1<System::Net::IPAddress*>* addresses;
    // Field size check
    static_assert(sizeof(System::Collections::ObjectModel::Collection_1<System::Net::IPAddress*>*) == 0x8);
    // Creating value type constructor for type: IPAddressCollection
    IPAddressCollection(System::Collections::ObjectModel::Collection_1<System::Net::IPAddress*>* addresses_ = {}) noexcept : addresses{addresses_} {}
    // Creating interface conversion operator: operator System::Collections::Generic::ICollection_1<System::Net::IPAddress*>
    operator System::Collections::Generic::ICollection_1<System::Net::IPAddress*>() noexcept {
      return *reinterpret_cast<System::Collections::Generic::ICollection_1<System::Net::IPAddress*>*>(this);
    }
    // Creating conversion operator: operator System::Collections::ObjectModel::Collection_1<System::Net::IPAddress*>*
    constexpr operator System::Collections::ObjectModel::Collection_1<System::Net::IPAddress*>*() const noexcept {
      return addresses;
    }
    // public System.Void CopyTo(System.Net.IPAddress[] array, System.Int32 offset)
    // Offset: 0x1353620
    void CopyTo(::Array<System::Net::IPAddress*>* array, int offset);
    // System.Void InternalAdd(System.Net.IPAddress address)
    // Offset: 0x1353770
    void InternalAdd(System::Net::IPAddress* address);
    // public System.Collections.Generic.IEnumerator`1<System.Net.IPAddress> GetEnumerator()
    // Offset: 0x1353850
    System::Collections::Generic::IEnumerator_1<System::Net::IPAddress*>* GetEnumerator();
    // protected internal System.Void .ctor()
    // Offset: 0x13535A4
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IPAddressCollection* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::NetworkInformation::IPAddressCollection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IPAddressCollection*, creationType>()));
    }
    // public System.Int32 get_Count()
    // Offset: 0x1353690
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Int32 ICollection_1::get_Count()
    int get_Count();
    // Creating proxy method: System_Collections_Generic_ICollection_1_get_Count
    // Maps to method: get_Count
    int System_Collections_Generic_ICollection_1_get_Count();
    // public System.Boolean get_IsReadOnly()
    // Offset: 0x13536E8
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Boolean ICollection_1::get_IsReadOnly()
    bool get_IsReadOnly();
    // Creating proxy method: System_Collections_Generic_ICollection_1_get_IsReadOnly
    // Maps to method: get_IsReadOnly
    bool System_Collections_Generic_ICollection_1_get_IsReadOnly();
    // public System.Void Add(System.Net.IPAddress address)
    // Offset: 0x13536F0
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Void ICollection_1::Add(System.Net.IPAddress address)
    void Add(System::Net::IPAddress* address);
    // Creating proxy method: System_Collections_Generic_ICollection_1_Add
    // Maps to method: Add
    void System_Collections_Generic_ICollection_1_Add(System::Net::IPAddress* address);
    // public System.Boolean Contains(System.Net.IPAddress address)
    // Offset: 0x13537D8
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Boolean ICollection_1::Contains(System.Net.IPAddress address)
    bool Contains(System::Net::IPAddress* address);
    // Creating proxy method: System_Collections_Generic_ICollection_1_Contains
    // Maps to method: Contains
    bool System_Collections_Generic_ICollection_1_Contains(System::Net::IPAddress* address);
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x1353840
    // Implemented from: System.Collections.IEnumerable
    // Base method: System.Collections.IEnumerator IEnumerable::GetEnumerator()
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // public System.Boolean Remove(System.Net.IPAddress address)
    // Offset: 0x13538A8
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Boolean ICollection_1::Remove(System.Net.IPAddress address)
    bool Remove(System::Net::IPAddress* address);
    // Creating proxy method: System_Collections_Generic_ICollection_1_Remove
    // Maps to method: Remove
    bool System_Collections_Generic_ICollection_1_Remove(System::Net::IPAddress* address);
    // public System.Void Clear()
    // Offset: 0x1353928
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Void ICollection_1::Clear()
    void Clear();
    // Creating proxy method: System_Collections_Generic_ICollection_1_Clear
    // Maps to method: Clear
    void System_Collections_Generic_ICollection_1_Clear();
  }; // System.Net.NetworkInformation.IPAddressCollection
  #pragma pack(pop)
  static check_size<sizeof(IPAddressCollection), 16 + sizeof(System::Collections::ObjectModel::Collection_1<System::Net::IPAddress*>*)> __System_Net_NetworkInformation_IPAddressCollectionSizeCheck;
  static_assert(sizeof(IPAddressCollection) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(System::Net::NetworkInformation::IPAddressCollection*, "System.Net.NetworkInformation", "IPAddressCollection");
