// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.NetworkInformation.UnixNetworkInterface
#include "System/Net/NetworkInformation/UnixNetworkInterface.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net::NetworkInformation
namespace System::Net::NetworkInformation {
  // Forward declaring type: IPInterfaceProperties
  class IPInterfaceProperties;
  // Forward declaring type: OperationalStatus
  struct OperationalStatus;
}
// Completed forward declares
// Type namespace: System.Net.NetworkInformation
namespace System::Net::NetworkInformation {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.NetworkInformation.LinuxNetworkInterface
  // [] Offset: FFFFFFFF
  class LinuxNetworkInterface : public System::Net::NetworkInformation::UnixNetworkInterface {
    public:
    // Writing base type padding for base size: 0x34 to desired offset: 0x38
    char ___base_padding[0x4] = {};
    // private System.String iface_path
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppString* iface_path;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String iface_operstate_path
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppString* iface_operstate_path;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String iface_flags_path
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppString* iface_flags_path;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // Creating value type constructor for type: LinuxNetworkInterface
    LinuxNetworkInterface(::Il2CppString* iface_path_ = {}, ::Il2CppString* iface_operstate_path_ = {}, ::Il2CppString* iface_flags_path_ = {}) noexcept : iface_path{iface_path_}, iface_operstate_path{iface_operstate_path_}, iface_flags_path{iface_flags_path_} {}
    // System.String get_IfacePath()
    // Offset: 0x1354478
    ::Il2CppString* get_IfacePath();
    // static System.String ReadLine(System.String path)
    // Offset: 0x13548F8
    static ::Il2CppString* ReadLine(::Il2CppString* path);
    // System.Void .ctor(System.String name)
    // Offset: 0x1354480
    // Implemented from: System.Net.NetworkInformation.UnixNetworkInterface
    // Base method: System.Void UnixNetworkInterface::.ctor(System.String name)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LinuxNetworkInterface* New_ctor(::Il2CppString* name) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::NetworkInformation::LinuxNetworkInterface::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LinuxNetworkInterface*, creationType>(name)));
    }
    // public override System.Net.NetworkInformation.IPInterfaceProperties GetIPProperties()
    // Offset: 0x13545F0
    // Implemented from: System.Net.NetworkInformation.NetworkInterface
    // Base method: System.Net.NetworkInformation.IPInterfaceProperties NetworkInterface::GetIPProperties()
    System::Net::NetworkInformation::IPInterfaceProperties* GetIPProperties();
    // public override System.Net.NetworkInformation.OperationalStatus get_OperationalStatus()
    // Offset: 0x135467C
    // Implemented from: System.Net.NetworkInformation.NetworkInterface
    // Base method: System.Net.NetworkInformation.OperationalStatus NetworkInterface::get_OperationalStatus()
    System::Net::NetworkInformation::OperationalStatus get_OperationalStatus();
  }; // System.Net.NetworkInformation.LinuxNetworkInterface
  #pragma pack(pop)
  static check_size<sizeof(LinuxNetworkInterface), 72 + sizeof(::Il2CppString*)> __System_Net_NetworkInformation_LinuxNetworkInterfaceSizeCheck;
  static_assert(sizeof(LinuxNetworkInterface) == 0x50);
}
DEFINE_IL2CPP_ARG_TYPE(System::Net::NetworkInformation::LinuxNetworkInterface*, "System.Net.NetworkInformation", "LinuxNetworkInterface");
