// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: System.Net.NetworkInformation
namespace System::Net::NetworkInformation {
  // Autogenerated type: System.Net.NetworkInformation.DuplicateAddressDetectionState
  struct DuplicateAddressDetectionState : public System::Enum {
    public:
    // public System.Int32 value__
    // Offset: 0x0
    int value;
    // Creating value type constructor for type: DuplicateAddressDetectionState
    constexpr DuplicateAddressDetectionState(int value_ = {}) noexcept : value{value_} {}
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return value;
    }
    // static field const value: static public System.Net.NetworkInformation.DuplicateAddressDetectionState Invalid
    static constexpr const int Invalid = 0;
    // Get static field: static public System.Net.NetworkInformation.DuplicateAddressDetectionState Invalid
    static System::Net::NetworkInformation::DuplicateAddressDetectionState _get_Invalid();
    // Set static field: static public System.Net.NetworkInformation.DuplicateAddressDetectionState Invalid
    static void _set_Invalid(System::Net::NetworkInformation::DuplicateAddressDetectionState value);
    // static field const value: static public System.Net.NetworkInformation.DuplicateAddressDetectionState Tentative
    static constexpr const int Tentative = 1;
    // Get static field: static public System.Net.NetworkInformation.DuplicateAddressDetectionState Tentative
    static System::Net::NetworkInformation::DuplicateAddressDetectionState _get_Tentative();
    // Set static field: static public System.Net.NetworkInformation.DuplicateAddressDetectionState Tentative
    static void _set_Tentative(System::Net::NetworkInformation::DuplicateAddressDetectionState value);
    // static field const value: static public System.Net.NetworkInformation.DuplicateAddressDetectionState Duplicate
    static constexpr const int Duplicate = 2;
    // Get static field: static public System.Net.NetworkInformation.DuplicateAddressDetectionState Duplicate
    static System::Net::NetworkInformation::DuplicateAddressDetectionState _get_Duplicate();
    // Set static field: static public System.Net.NetworkInformation.DuplicateAddressDetectionState Duplicate
    static void _set_Duplicate(System::Net::NetworkInformation::DuplicateAddressDetectionState value);
    // static field const value: static public System.Net.NetworkInformation.DuplicateAddressDetectionState Deprecated
    static constexpr const int Deprecated = 3;
    // Get static field: static public System.Net.NetworkInformation.DuplicateAddressDetectionState Deprecated
    static System::Net::NetworkInformation::DuplicateAddressDetectionState _get_Deprecated();
    // Set static field: static public System.Net.NetworkInformation.DuplicateAddressDetectionState Deprecated
    static void _set_Deprecated(System::Net::NetworkInformation::DuplicateAddressDetectionState value);
    // static field const value: static public System.Net.NetworkInformation.DuplicateAddressDetectionState Preferred
    static constexpr const int Preferred = 4;
    // Get static field: static public System.Net.NetworkInformation.DuplicateAddressDetectionState Preferred
    static System::Net::NetworkInformation::DuplicateAddressDetectionState _get_Preferred();
    // Set static field: static public System.Net.NetworkInformation.DuplicateAddressDetectionState Preferred
    static void _set_Preferred(System::Net::NetworkInformation::DuplicateAddressDetectionState value);
  }; // System.Net.NetworkInformation.DuplicateAddressDetectionState
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Net::NetworkInformation::DuplicateAddressDetectionState, "System.Net.NetworkInformation", "DuplicateAddressDetectionState");
#pragma pack(pop)
