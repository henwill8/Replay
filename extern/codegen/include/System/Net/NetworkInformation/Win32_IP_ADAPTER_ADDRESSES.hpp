// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Net.NetworkInformation.AlignmentUnion
#include "System/Net/NetworkInformation/AlignmentUnion.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: System.Net.NetworkInformation.NetworkInterfaceType
#include "System/Net/NetworkInformation/NetworkInterfaceType.hpp"
// Including type: System.Net.NetworkInformation.OperationalStatus
#include "System/Net/NetworkInformation/OperationalStatus.hpp"
// Including type: System.Net.NetworkInformation.Win32_SOCKET_ADDRESS
#include "System/Net/NetworkInformation/Win32_SOCKET_ADDRESS.hpp"
// Completed includes
// Type namespace: System.Net.NetworkInformation
namespace System::Net::NetworkInformation {
  // Size: 0x108
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Net.NetworkInformation.Win32_IP_ADAPTER_ADDRESSES
  // [] Offset: FFFFFFFF
  struct Win32_IP_ADAPTER_ADDRESSES/*, public System::ValueType*/ {
    public:
    // public System.Net.NetworkInformation.AlignmentUnion Alignment
    // Size: 0x8
    // Offset: 0x0
    System::Net::NetworkInformation::AlignmentUnion Alignment;
    // Field size check
    static_assert(sizeof(System::Net::NetworkInformation::AlignmentUnion) == 0x8);
    // public System.IntPtr Next
    // Size: 0x8
    // Offset: 0x8
    System::IntPtr Next;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // public System.String AdapterName
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* AdapterName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public System.IntPtr FirstUnicastAddress
    // Size: 0x8
    // Offset: 0x18
    System::IntPtr FirstUnicastAddress;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // public System.IntPtr FirstAnycastAddress
    // Size: 0x8
    // Offset: 0x20
    System::IntPtr FirstAnycastAddress;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // public System.IntPtr FirstMulticastAddress
    // Size: 0x8
    // Offset: 0x28
    System::IntPtr FirstMulticastAddress;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // public System.IntPtr FirstDnsServerAddress
    // Size: 0x8
    // Offset: 0x30
    System::IntPtr FirstDnsServerAddress;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // public System.String DnsSuffix
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppString* DnsSuffix;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public System.String Description
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppString* Description;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public System.String FriendlyName
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppString* FriendlyName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public System.Byte[] PhysicalAddress
    // Size: 0x8
    // Offset: 0x50
    ::Array<uint8_t>* PhysicalAddress;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // public System.UInt32 PhysicalAddressLength
    // Size: 0x4
    // Offset: 0x58
    uint PhysicalAddressLength;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 Flags
    // Size: 0x4
    // Offset: 0x5C
    uint Flags;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 Mtu
    // Size: 0x4
    // Offset: 0x60
    uint Mtu;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.Net.NetworkInformation.NetworkInterfaceType IfType
    // Size: 0x4
    // Offset: 0x64
    System::Net::NetworkInformation::NetworkInterfaceType IfType;
    // Field size check
    static_assert(sizeof(System::Net::NetworkInformation::NetworkInterfaceType) == 0x4);
    // public System.Net.NetworkInformation.OperationalStatus OperStatus
    // Size: 0x4
    // Offset: 0x68
    System::Net::NetworkInformation::OperationalStatus OperStatus;
    // Field size check
    static_assert(sizeof(System::Net::NetworkInformation::OperationalStatus) == 0x4);
    // public System.Int32 Ipv6IfIndex
    // Size: 0x4
    // Offset: 0x6C
    int Ipv6IfIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.UInt32[] ZoneIndices
    // Size: 0x8
    // Offset: 0x70
    ::Array<uint>* ZoneIndices;
    // Field size check
    static_assert(sizeof(::Array<uint>*) == 0x8);
    // public System.IntPtr FirstPrefix
    // Size: 0x8
    // Offset: 0x78
    System::IntPtr FirstPrefix;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // public System.UInt64 TransmitLinkSpeed
    // Size: 0x8
    // Offset: 0x80
    uint64_t TransmitLinkSpeed;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.UInt64 ReceiveLinkSpeed
    // Size: 0x8
    // Offset: 0x88
    uint64_t ReceiveLinkSpeed;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.IntPtr FirstWinsServerAddress
    // Size: 0x8
    // Offset: 0x90
    System::IntPtr FirstWinsServerAddress;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // public System.IntPtr FirstGatewayAddress
    // Size: 0x8
    // Offset: 0x98
    System::IntPtr FirstGatewayAddress;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // public System.UInt32 Ipv4Metric
    // Size: 0x4
    // Offset: 0xA0
    uint Ipv4Metric;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt32 Ipv6Metric
    // Size: 0x4
    // Offset: 0xA4
    uint Ipv6Metric;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // public System.UInt64 Luid
    // Size: 0x8
    // Offset: 0xA8
    uint64_t Luid;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.Net.NetworkInformation.Win32_SOCKET_ADDRESS Dhcpv4Server
    // Size: 0xC
    // Offset: 0xB0
    System::Net::NetworkInformation::Win32_SOCKET_ADDRESS Dhcpv4Server;
    // Field size check
    static_assert(sizeof(System::Net::NetworkInformation::Win32_SOCKET_ADDRESS) == 0xC);
    // Padding between fields: Dhcpv4Server and: CompartmentId
    char __padding26[0x4] = {};
    // public System.UInt32 CompartmentId
    // Size: 0x4
    // Offset: 0xC0
    uint CompartmentId;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: CompartmentId and: NetworkGuid
    char __padding27[0x4] = {};
    // public System.UInt64 NetworkGuid
    // Size: 0x8
    // Offset: 0xC8
    uint64_t NetworkGuid;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.Int32 ConnectionType
    // Size: 0x4
    // Offset: 0xD0
    int ConnectionType;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Int32 TunnelType
    // Size: 0x4
    // Offset: 0xD4
    int TunnelType;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Net.NetworkInformation.Win32_SOCKET_ADDRESS Dhcpv6Server
    // Size: 0xC
    // Offset: 0xD8
    System::Net::NetworkInformation::Win32_SOCKET_ADDRESS Dhcpv6Server;
    // Field size check
    static_assert(sizeof(System::Net::NetworkInformation::Win32_SOCKET_ADDRESS) == 0xC);
    // Padding between fields: Dhcpv6Server and: Dhcpv6ClientDuid
    char __padding31[0x4] = {};
    // public System.Byte[] Dhcpv6ClientDuid
    // Size: 0x8
    // Offset: 0xE8
    ::Array<uint8_t>* Dhcpv6ClientDuid;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // public System.UInt64 Dhcpv6ClientDuidLength
    // Size: 0x8
    // Offset: 0xF0
    uint64_t Dhcpv6ClientDuidLength;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.UInt64 Dhcpv6Iaid
    // Size: 0x8
    // Offset: 0xF8
    uint64_t Dhcpv6Iaid;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // public System.IntPtr FirstDnsSuffix
    // Size: 0x8
    // Offset: 0x100
    System::IntPtr FirstDnsSuffix;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // Creating value type constructor for type: Win32_IP_ADAPTER_ADDRESSES
    constexpr Win32_IP_ADAPTER_ADDRESSES(System::Net::NetworkInformation::AlignmentUnion Alignment_ = {}, System::IntPtr Next_ = {}, ::Il2CppString* AdapterName_ = {}, System::IntPtr FirstUnicastAddress_ = {}, System::IntPtr FirstAnycastAddress_ = {}, System::IntPtr FirstMulticastAddress_ = {}, System::IntPtr FirstDnsServerAddress_ = {}, ::Il2CppString* DnsSuffix_ = {}, ::Il2CppString* Description_ = {}, ::Il2CppString* FriendlyName_ = {}, ::Array<uint8_t>* PhysicalAddress_ = {}, uint PhysicalAddressLength_ = {}, uint Flags_ = {}, uint Mtu_ = {}, System::Net::NetworkInformation::NetworkInterfaceType IfType_ = {}, System::Net::NetworkInformation::OperationalStatus OperStatus_ = {}, int Ipv6IfIndex_ = {}, ::Array<uint>* ZoneIndices_ = {}, System::IntPtr FirstPrefix_ = {}, uint64_t TransmitLinkSpeed_ = {}, uint64_t ReceiveLinkSpeed_ = {}, System::IntPtr FirstWinsServerAddress_ = {}, System::IntPtr FirstGatewayAddress_ = {}, uint Ipv4Metric_ = {}, uint Ipv6Metric_ = {}, uint64_t Luid_ = {}, System::Net::NetworkInformation::Win32_SOCKET_ADDRESS Dhcpv4Server_ = {}, uint CompartmentId_ = {}, uint64_t NetworkGuid_ = {}, int ConnectionType_ = {}, int TunnelType_ = {}, System::Net::NetworkInformation::Win32_SOCKET_ADDRESS Dhcpv6Server_ = {}, ::Array<uint8_t>* Dhcpv6ClientDuid_ = {}, uint64_t Dhcpv6ClientDuidLength_ = {}, uint64_t Dhcpv6Iaid_ = {}, System::IntPtr FirstDnsSuffix_ = {}) noexcept : Alignment{Alignment_}, Next{Next_}, AdapterName{AdapterName_}, FirstUnicastAddress{FirstUnicastAddress_}, FirstAnycastAddress{FirstAnycastAddress_}, FirstMulticastAddress{FirstMulticastAddress_}, FirstDnsServerAddress{FirstDnsServerAddress_}, DnsSuffix{DnsSuffix_}, Description{Description_}, FriendlyName{FriendlyName_}, PhysicalAddress{PhysicalAddress_}, PhysicalAddressLength{PhysicalAddressLength_}, Flags{Flags_}, Mtu{Mtu_}, IfType{IfType_}, OperStatus{OperStatus_}, Ipv6IfIndex{Ipv6IfIndex_}, ZoneIndices{ZoneIndices_}, FirstPrefix{FirstPrefix_}, TransmitLinkSpeed{TransmitLinkSpeed_}, ReceiveLinkSpeed{ReceiveLinkSpeed_}, FirstWinsServerAddress{FirstWinsServerAddress_}, FirstGatewayAddress{FirstGatewayAddress_}, Ipv4Metric{Ipv4Metric_}, Ipv6Metric{Ipv6Metric_}, Luid{Luid_}, Dhcpv4Server{Dhcpv4Server_}, CompartmentId{CompartmentId_}, NetworkGuid{NetworkGuid_}, ConnectionType{ConnectionType_}, TunnelType{TunnelType_}, Dhcpv6Server{Dhcpv6Server_}, Dhcpv6ClientDuid{Dhcpv6ClientDuid_}, Dhcpv6ClientDuidLength{Dhcpv6ClientDuidLength_}, Dhcpv6Iaid{Dhcpv6Iaid_}, FirstDnsSuffix{FirstDnsSuffix_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
  }; // System.Net.NetworkInformation.Win32_IP_ADAPTER_ADDRESSES
  #pragma pack(pop)
  static check_size<sizeof(Win32_IP_ADAPTER_ADDRESSES), 256 + sizeof(System::IntPtr)> __System_Net_NetworkInformation_Win32_IP_ADAPTER_ADDRESSESSizeCheck;
  static_assert(sizeof(Win32_IP_ADAPTER_ADDRESSES) == 0x108);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Net::NetworkInformation::Win32_IP_ADAPTER_ADDRESSES, "System.Net.NetworkInformation", "Win32_IP_ADAPTER_ADDRESSES");
