// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: System.Net.NetworkInformation
namespace System::Net::NetworkInformation {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Net.NetworkInformation.sockaddr_in
  // [] Offset: FFFFFFFF
  struct sockaddr_in/*, public System::ValueType*/ {
    public:
    // public System.UInt16 sin_family
    // Size: 0x2
    // Offset: 0x0
    uint16_t sin_family;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt16 sin_port
    // Size: 0x2
    // Offset: 0x2
    uint16_t sin_port;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // public System.UInt32 sin_addr
    // Size: 0x4
    // Offset: 0x4
    uint sin_addr;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Creating value type constructor for type: sockaddr_in
    constexpr sockaddr_in(uint16_t sin_family_ = {}, uint16_t sin_port_ = {}, uint sin_addr_ = {}) noexcept : sin_family{sin_family_}, sin_port{sin_port_}, sin_addr{sin_addr_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
  }; // System.Net.NetworkInformation.sockaddr_in
  #pragma pack(pop)
  static check_size<sizeof(sockaddr_in), 4 + sizeof(uint)> __System_Net_NetworkInformation_sockaddr_inSizeCheck;
  static_assert(sizeof(sockaddr_in) == 0x8);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Net::NetworkInformation::sockaddr_in, "System.Net.NetworkInformation", "sockaddr_in");
