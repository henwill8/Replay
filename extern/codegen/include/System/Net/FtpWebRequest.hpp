// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
// Including type: System.Net.WebRequest
#include "System/Net/WebRequest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: FtpAsyncResult
  class FtpAsyncResult;
  // Forward declaring type: ServicePoint
  class ServicePoint;
  // Forward declaring type: NetworkCredential
  class NetworkCredential;
  // Forward declaring type: IPHostEntry
  class IPHostEntry;
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
  // Forward declaring type: IWebProxy
  class IWebProxy;
  // Forward declaring type: FtpWebResponse
  class FtpWebResponse;
  // Skipping declaration: RequestState because it is already included!
  // Forward declaring type: FtpStatus
  class FtpStatus;
  // Forward declaring type: IPAddress
  class IPAddress;
  // Forward declaring type: ICredentials
  class ICredentials;
  // Forward declaring type: WebHeaderCollection
  class WebHeaderCollection;
  // Forward declaring type: WebResponse
  class WebResponse;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
  // Forward declaring type: StreamReader
  class StreamReader;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
}
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: Socket
  class Socket;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Size: 0xE0
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.FtpWebRequest
  // [] Offset: FFFFFFFF
  class FtpWebRequest : public System::Net::WebRequest {
    public:
    // Nested type: System::Net::FtpWebRequest::RequestState
    struct RequestState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Net.FtpWebRequest/RequestState
    // [] Offset: FFFFFFFF
    struct RequestState/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: RequestState
      constexpr RequestState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Net.FtpWebRequest/RequestState Before
      static constexpr const int Before = 0;
      // Get static field: static public System.Net.FtpWebRequest/RequestState Before
      static System::Net::FtpWebRequest::RequestState _get_Before();
      // Set static field: static public System.Net.FtpWebRequest/RequestState Before
      static void _set_Before(System::Net::FtpWebRequest::RequestState value);
      // static field const value: static public System.Net.FtpWebRequest/RequestState Scheduled
      static constexpr const int Scheduled = 1;
      // Get static field: static public System.Net.FtpWebRequest/RequestState Scheduled
      static System::Net::FtpWebRequest::RequestState _get_Scheduled();
      // Set static field: static public System.Net.FtpWebRequest/RequestState Scheduled
      static void _set_Scheduled(System::Net::FtpWebRequest::RequestState value);
      // static field const value: static public System.Net.FtpWebRequest/RequestState Connecting
      static constexpr const int Connecting = 2;
      // Get static field: static public System.Net.FtpWebRequest/RequestState Connecting
      static System::Net::FtpWebRequest::RequestState _get_Connecting();
      // Set static field: static public System.Net.FtpWebRequest/RequestState Connecting
      static void _set_Connecting(System::Net::FtpWebRequest::RequestState value);
      // static field const value: static public System.Net.FtpWebRequest/RequestState Authenticating
      static constexpr const int Authenticating = 3;
      // Get static field: static public System.Net.FtpWebRequest/RequestState Authenticating
      static System::Net::FtpWebRequest::RequestState _get_Authenticating();
      // Set static field: static public System.Net.FtpWebRequest/RequestState Authenticating
      static void _set_Authenticating(System::Net::FtpWebRequest::RequestState value);
      // static field const value: static public System.Net.FtpWebRequest/RequestState OpeningData
      static constexpr const int OpeningData = 4;
      // Get static field: static public System.Net.FtpWebRequest/RequestState OpeningData
      static System::Net::FtpWebRequest::RequestState _get_OpeningData();
      // Set static field: static public System.Net.FtpWebRequest/RequestState OpeningData
      static void _set_OpeningData(System::Net::FtpWebRequest::RequestState value);
      // static field const value: static public System.Net.FtpWebRequest/RequestState TransferInProgress
      static constexpr const int TransferInProgress = 5;
      // Get static field: static public System.Net.FtpWebRequest/RequestState TransferInProgress
      static System::Net::FtpWebRequest::RequestState _get_TransferInProgress();
      // Set static field: static public System.Net.FtpWebRequest/RequestState TransferInProgress
      static void _set_TransferInProgress(System::Net::FtpWebRequest::RequestState value);
      // static field const value: static public System.Net.FtpWebRequest/RequestState Finished
      static constexpr const int Finished = 6;
      // Get static field: static public System.Net.FtpWebRequest/RequestState Finished
      static System::Net::FtpWebRequest::RequestState _get_Finished();
      // Set static field: static public System.Net.FtpWebRequest/RequestState Finished
      static void _set_Finished(System::Net::FtpWebRequest::RequestState value);
      // static field const value: static public System.Net.FtpWebRequest/RequestState Aborted
      static constexpr const int Aborted = 7;
      // Get static field: static public System.Net.FtpWebRequest/RequestState Aborted
      static System::Net::FtpWebRequest::RequestState _get_Aborted();
      // Set static field: static public System.Net.FtpWebRequest/RequestState Aborted
      static void _set_Aborted(System::Net::FtpWebRequest::RequestState value);
      // static field const value: static public System.Net.FtpWebRequest/RequestState Error
      static constexpr const int Error = 8;
      // Get static field: static public System.Net.FtpWebRequest/RequestState Error
      static System::Net::FtpWebRequest::RequestState _get_Error();
      // Set static field: static public System.Net.FtpWebRequest/RequestState Error
      static void _set_Error(System::Net::FtpWebRequest::RequestState value);
    }; // System.Net.FtpWebRequest/RequestState
    #pragma pack(pop)
    static check_size<sizeof(FtpWebRequest::RequestState), 0 + sizeof(int)> __System_Net_FtpWebRequest_RequestStateSizeCheck;
    static_assert(sizeof(FtpWebRequest::RequestState) == 0x4);
    // private System.Uri requestUri
    // Size: 0x8
    // Offset: 0x20
    System::Uri* requestUri;
    // Field size check
    static_assert(sizeof(System::Uri*) == 0x8);
    // private System.String file_name
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppString* file_name;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Net.ServicePoint servicePoint
    // Size: 0x8
    // Offset: 0x30
    System::Net::ServicePoint* servicePoint;
    // Field size check
    static_assert(sizeof(System::Net::ServicePoint*) == 0x8);
    // private System.IO.Stream origDataStream
    // Size: 0x8
    // Offset: 0x38
    System::IO::Stream* origDataStream;
    // Field size check
    static_assert(sizeof(System::IO::Stream*) == 0x8);
    // private System.IO.Stream dataStream
    // Size: 0x8
    // Offset: 0x40
    System::IO::Stream* dataStream;
    // Field size check
    static_assert(sizeof(System::IO::Stream*) == 0x8);
    // private System.IO.Stream controlStream
    // Size: 0x8
    // Offset: 0x48
    System::IO::Stream* controlStream;
    // Field size check
    static_assert(sizeof(System::IO::Stream*) == 0x8);
    // private System.IO.StreamReader controlReader
    // Size: 0x8
    // Offset: 0x50
    System::IO::StreamReader* controlReader;
    // Field size check
    static_assert(sizeof(System::IO::StreamReader*) == 0x8);
    // private System.Net.NetworkCredential credentials
    // Size: 0x8
    // Offset: 0x58
    System::Net::NetworkCredential* credentials;
    // Field size check
    static_assert(sizeof(System::Net::NetworkCredential*) == 0x8);
    // private System.Net.IPHostEntry hostEntry
    // Size: 0x8
    // Offset: 0x60
    System::Net::IPHostEntry* hostEntry;
    // Field size check
    static_assert(sizeof(System::Net::IPHostEntry*) == 0x8);
    // private System.Net.IPEndPoint localEndPoint
    // Size: 0x8
    // Offset: 0x68
    System::Net::IPEndPoint* localEndPoint;
    // Field size check
    static_assert(sizeof(System::Net::IPEndPoint*) == 0x8);
    // private System.Net.IPEndPoint remoteEndPoint
    // Size: 0x8
    // Offset: 0x70
    System::Net::IPEndPoint* remoteEndPoint;
    // Field size check
    static_assert(sizeof(System::Net::IPEndPoint*) == 0x8);
    // private System.Net.IWebProxy proxy
    // Size: 0x8
    // Offset: 0x78
    System::Net::IWebProxy* proxy;
    // Field size check
    static_assert(sizeof(System::Net::IWebProxy*) == 0x8);
    // private System.Int32 timeout
    // Size: 0x4
    // Offset: 0x80
    int timeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 rwTimeout
    // Size: 0x4
    // Offset: 0x84
    int rwTimeout;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int64 offset
    // Size: 0x8
    // Offset: 0x88
    int64_t offset;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Boolean binary
    // Size: 0x1
    // Offset: 0x90
    bool binary;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean enableSsl
    // Size: 0x1
    // Offset: 0x91
    bool enableSsl;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean usePassive
    // Size: 0x1
    // Offset: 0x92
    bool usePassive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean keepAlive
    // Size: 0x1
    // Offset: 0x93
    bool keepAlive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: keepAlive and: method
    char __padding18[0x4] = {};
    // private System.String method
    // Size: 0x8
    // Offset: 0x98
    ::Il2CppString* method;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String renameTo
    // Size: 0x8
    // Offset: 0xA0
    ::Il2CppString* renameTo;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Object locker
    // Size: 0x8
    // Offset: 0xA8
    ::Il2CppObject* locker;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Net.FtpWebRequest/RequestState requestState
    // Size: 0x4
    // Offset: 0xB0
    System::Net::FtpWebRequest::RequestState requestState;
    // Field size check
    static_assert(sizeof(System::Net::FtpWebRequest::RequestState) == 0x4);
    // Padding between fields: requestState and: asyncResult
    char __padding22[0x4] = {};
    // private System.Net.FtpAsyncResult asyncResult
    // Size: 0x8
    // Offset: 0xB8
    System::Net::FtpAsyncResult* asyncResult;
    // Field size check
    static_assert(sizeof(System::Net::FtpAsyncResult*) == 0x8);
    // private System.Net.FtpWebResponse ftpResponse
    // Size: 0x8
    // Offset: 0xC0
    System::Net::FtpWebResponse* ftpResponse;
    // Field size check
    static_assert(sizeof(System::Net::FtpWebResponse*) == 0x8);
    // private System.IO.Stream requestStream
    // Size: 0x8
    // Offset: 0xC8
    System::IO::Stream* requestStream;
    // Field size check
    static_assert(sizeof(System::IO::Stream*) == 0x8);
    // private System.String initial_path
    // Size: 0x8
    // Offset: 0xD0
    ::Il2CppString* initial_path;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Text.Encoding dataEncoding
    // Size: 0x8
    // Offset: 0xD8
    System::Text::Encoding* dataEncoding;
    // Field size check
    static_assert(sizeof(System::Text::Encoding*) == 0x8);
    // Creating value type constructor for type: FtpWebRequest
    FtpWebRequest(System::Uri* requestUri_ = {}, ::Il2CppString* file_name_ = {}, System::Net::ServicePoint* servicePoint_ = {}, System::IO::Stream* origDataStream_ = {}, System::IO::Stream* dataStream_ = {}, System::IO::Stream* controlStream_ = {}, System::IO::StreamReader* controlReader_ = {}, System::Net::NetworkCredential* credentials_ = {}, System::Net::IPHostEntry* hostEntry_ = {}, System::Net::IPEndPoint* localEndPoint_ = {}, System::Net::IPEndPoint* remoteEndPoint_ = {}, System::Net::IWebProxy* proxy_ = {}, int timeout_ = {}, int rwTimeout_ = {}, int64_t offset_ = {}, bool binary_ = {}, bool enableSsl_ = {}, bool usePassive_ = {}, bool keepAlive_ = {}, ::Il2CppString* method_ = {}, ::Il2CppString* renameTo_ = {}, ::Il2CppObject* locker_ = {}, System::Net::FtpWebRequest::RequestState requestState_ = {}, System::Net::FtpAsyncResult* asyncResult_ = {}, System::Net::FtpWebResponse* ftpResponse_ = {}, System::IO::Stream* requestStream_ = {}, ::Il2CppString* initial_path_ = {}, System::Text::Encoding* dataEncoding_ = {}) noexcept : requestUri{requestUri_}, file_name{file_name_}, servicePoint{servicePoint_}, origDataStream{origDataStream_}, dataStream{dataStream_}, controlStream{controlStream_}, controlReader{controlReader_}, credentials{credentials_}, hostEntry{hostEntry_}, localEndPoint{localEndPoint_}, remoteEndPoint{remoteEndPoint_}, proxy{proxy_}, timeout{timeout_}, rwTimeout{rwTimeout_}, offset{offset_}, binary{binary_}, enableSsl{enableSsl_}, usePassive{usePassive_}, keepAlive{keepAlive_}, method{method_}, renameTo{renameTo_}, locker{locker_}, requestState{requestState_}, asyncResult{asyncResult_}, ftpResponse{ftpResponse_}, requestStream{requestStream_}, initial_path{initial_path_}, dataEncoding{dataEncoding_} {}
    // Get static field: static private readonly System.String[] supportedCommands
    static ::Array<::Il2CppString*>* _get_supportedCommands();
    // Set static field: static private readonly System.String[] supportedCommands
    static void _set_supportedCommands(::Array<::Il2CppString*>* value);
    // System.Void .ctor(System.Uri uri)
    // Offset: 0x156F9C8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FtpWebRequest* New_ctor(System::Uri* uri) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::FtpWebRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FtpWebRequest*, creationType>(uri)));
    }
    // static private System.Exception GetMustImplement()
    // Offset: 0x156FB34
    static System::Exception* GetMustImplement();
    // public System.Boolean get_EnableSsl()
    // Offset: 0x156FD78
    bool get_EnableSsl();
    // public System.Int32 get_ReadWriteTimeout()
    // Offset: 0x156FFA8
    int get_ReadWriteTimeout();
    // public System.Net.ServicePoint get_ServicePoint()
    // Offset: 0x156FFB8
    System::Net::ServicePoint* get_ServicePoint();
    // private System.String get_DataType()
    // Offset: 0x157012C
    ::Il2CppString* get_DataType();
    // private System.Net.FtpWebRequest/RequestState get_State()
    // Offset: 0x157018C
    System::Net::FtpWebRequest::RequestState get_State();
    // private System.Void set_State(System.Net.FtpWebRequest/RequestState value)
    // Offset: 0x1570230
    void set_State(System::Net::FtpWebRequest::RequestState value);
    // private System.Net.ServicePoint GetServicePoint()
    // Offset: 0x156FFBC
    System::Net::ServicePoint* GetServicePoint();
    // private System.Void ResolveHost()
    // Offset: 0x1570FF0
    void ResolveHost();
    // private System.Void ProcessRequest()
    // Offset: 0x157111C
    void ProcessRequest();
    // private System.Void SetType()
    // Offset: 0x1571AA0
    void SetType();
    // private System.String GetRemoteFolderPath(System.Uri uri)
    // Offset: 0x1571CD8
    ::Il2CppString* GetRemoteFolderPath(System::Uri* uri);
    // private System.Void CWDAndSetFileName(System.Uri uri)
    // Offset: 0x1571EAC
    void CWDAndSetFileName(System::Uri* uri);
    // private System.Void ProcessMethod()
    // Offset: 0x157130C
    void ProcessMethod();
    // private System.Void CloseControlConnection()
    // Offset: 0x1572C90
    void CloseControlConnection();
    // System.Void CloseDataConnection()
    // Offset: 0x156E1B4
    void CloseDataConnection();
    // private System.Void CloseConnection()
    // Offset: 0x1572DC0
    void CloseConnection();
    // private System.Void ProcessSimpleMethod()
    // Offset: 0x15726DC
    void ProcessSimpleMethod();
    // private System.Void UploadData()
    // Offset: 0x1572628
    void UploadData();
    // private System.Void DownloadData()
    // Offset: 0x1572580
    void DownloadData();
    // private System.Void CheckRequestStarted()
    // Offset: 0x156FCF0
    void CheckRequestStarted();
    // private System.Void OpenControlConnection()
    // Offset: 0x1572050
    void OpenControlConnection();
    // static private System.String GetInitialPath(System.Net.FtpStatus status)
    // Offset: 0x1573694
    static ::Il2CppString* GetInitialPath(System::Net::FtpStatus* status);
    // private System.Net.Sockets.Socket SetupPassiveConnection(System.String statusDescription, System.Boolean ipv6)
    // Offset: 0x157381C
    System::Net::Sockets::Socket* SetupPassiveConnection(::Il2CppString* statusDescription, bool ipv6);
    // private System.Int32 GetPortV4(System.String responseString)
    // Offset: 0x15739EC
    int GetPortV4(::Il2CppString* responseString);
    // private System.Int32 GetPortV6(System.String responseString)
    // Offset: 0x1573C28
    int GetPortV6(::Il2CppString* responseString);
    // private System.String FormatAddress(System.Net.IPAddress address, System.Int32 Port)
    // Offset: 0x1573DF8
    ::Il2CppString* FormatAddress(System::Net::IPAddress* address, int Port);
    // private System.String FormatAddressV6(System.Net.IPAddress address, System.Int32 port)
    // Offset: 0x1573F3C
    ::Il2CppString* FormatAddressV6(System::Net::IPAddress* address, int port);
    // private System.Exception CreateExceptionFromResponse(System.Net.FtpStatus status)
    // Offset: 0x1571BF8
    System::Exception* CreateExceptionFromResponse(System::Net::FtpStatus* status);
    // System.Void SetTransferCompleted()
    // Offset: 0x156E200
    void SetTransferCompleted();
    // System.Void OperationCompleted()
    // Offset: 0x1574048
    void OperationCompleted();
    // private System.Void SetCompleteWithError(System.Exception exc)
    // Offset: 0x15717BC
    void SetCompleteWithError(System::Exception* exc);
    // private System.Net.Sockets.Socket InitDataConnection()
    // Offset: 0x1574078
    System::Net::Sockets::Socket* InitDataConnection();
    // private System.Void OpenDataConnection()
    // Offset: 0x1572DE4
    void OpenDataConnection();
    // private System.Void Authenticate()
    // Offset: 0x1573248
    void Authenticate();
    // private System.Net.FtpStatus SendCommand(System.String command, params System.String[] parameters)
    // Offset: 0x1571BE8
    System::Net::FtpStatus* SendCommand(::Il2CppString* command, ::Array<::Il2CppString*>* parameters);
    // Creating initializer_list -> params proxy for: System.Net.FtpStatus SendCommand(System.String command, params System.String[] parameters)
    System::Net::FtpStatus* SendCommand(::Il2CppString* command, std::initializer_list<::Il2CppString*> parameters);
    // Creating TArgs -> initializer_list proxy for: System.Net.FtpStatus SendCommand(System.String command, params System.String[] parameters)
    template<class ...TParams>
    System::Net::FtpStatus* SendCommand(::Il2CppString* command, TParams&&... parameters) {
      return SendCommand(command, {parameters...});
    }
    // private System.Net.FtpStatus SendCommand(System.Boolean waitResponse, System.String command, params System.String[] parameters)
    // Offset: 0x1570554
    System::Net::FtpStatus* SendCommand(bool waitResponse, ::Il2CppString* command, ::Array<::Il2CppString*>* parameters);
    // Creating initializer_list -> params proxy for: System.Net.FtpStatus SendCommand(System.Boolean waitResponse, System.String command, params System.String[] parameters)
    System::Net::FtpStatus* SendCommand(bool waitResponse, ::Il2CppString* command, std::initializer_list<::Il2CppString*> parameters);
    // Creating TArgs -> initializer_list proxy for: System.Net.FtpStatus SendCommand(System.Boolean waitResponse, System.String command, params System.String[] parameters)
    template<class ...TParams>
    System::Net::FtpStatus* SendCommand(bool waitResponse, ::Il2CppString* command, TParams&&... parameters) {
      return SendCommand(waitResponse, command, {parameters...});
    }
    // static System.Net.FtpStatus ServiceNotAvailable()
    // Offset: 0x1574790
    static System::Net::FtpStatus* ServiceNotAvailable();
    // System.Net.FtpStatus GetResponseStatus()
    // Offset: 0x1571814
    System::Net::FtpStatus* GetResponseStatus();
    // private System.Void InitiateSecureConnection(ref System.IO.Stream stream)
    // Offset: 0x1574680
    void InitiateSecureConnection(System::IO::Stream*& stream);
    // System.Boolean ChangeToSSLSocket(ref System.IO.Stream stream)
    // Offset: 0x1574498
    bool ChangeToSSLSocket(System::IO::Stream*& stream);
    // private System.Boolean InFinalState()
    // Offset: 0x157073C
    bool InFinalState();
    // private System.Boolean InProgress()
    // Offset: 0x15717D8
    bool InProgress();
    // System.Void CheckIfAborted()
    // Offset: 0x156E124
    void CheckIfAborted();
    // private System.Void CheckFinalState()
    // Offset: 0x15702E0
    void CheckFinalState();
    // public override System.Void set_ConnectionGroupName(System.String value)
    // Offset: 0x156FB90
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_ConnectionGroupName(System.String value)
    void set_ConnectionGroupName(::Il2CppString* value);
    // public override System.Int64 get_ContentLength()
    // Offset: 0x156FBF4
    // Implemented from: System.Net.WebRequest
    // Base method: System.Int64 WebRequest::get_ContentLength()
    int64_t get_ContentLength();
    // public override System.Void set_ContentLength(System.Int64 value)
    // Offset: 0x156FBFC
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_ContentLength(System.Int64 value)
    void set_ContentLength(int64_t value);
    // public override System.Net.ICredentials get_Credentials()
    // Offset: 0x156FC00
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.ICredentials WebRequest::get_Credentials()
    System::Net::ICredentials* get_Credentials();
    // public override System.Void set_Credentials(System.Net.ICredentials value)
    // Offset: 0x156FC08
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_Credentials(System.Net.ICredentials value)
    void set_Credentials(System::Net::ICredentials* value);
    // public override System.Net.WebHeaderCollection get_Headers()
    // Offset: 0x156FD80
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.WebHeaderCollection WebRequest::get_Headers()
    System::Net::WebHeaderCollection* get_Headers();
    // public override System.String get_Method()
    // Offset: 0x156FDE4
    // Implemented from: System.Net.WebRequest
    // Base method: System.String WebRequest::get_Method()
    ::Il2CppString* get_Method();
    // public override System.Void set_Method(System.String value)
    // Offset: 0x156FDEC
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_Method(System.String value)
    void set_Method(::Il2CppString* value);
    // public override System.Void set_PreAuthenticate(System.Boolean value)
    // Offset: 0x156FF10
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_PreAuthenticate(System.Boolean value)
    void set_PreAuthenticate(bool value);
    // public override System.Net.IWebProxy get_Proxy()
    // Offset: 0x156FF70
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.IWebProxy WebRequest::get_Proxy()
    System::Net::IWebProxy* get_Proxy();
    // public override System.Void set_Proxy(System.Net.IWebProxy value)
    // Offset: 0x156FF78
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_Proxy(System.Net.IWebProxy value)
    void set_Proxy(System::Net::IWebProxy* value);
    // public override System.Uri get_RequestUri()
    // Offset: 0x156FFB0
    // Implemented from: System.Net.WebRequest
    // Base method: System.Uri WebRequest::get_RequestUri()
    System::Uri* get_RequestUri();
    // public override System.Boolean get_UseDefaultCredentials()
    // Offset: 0x157005C
    // Implemented from: System.Net.WebRequest
    // Base method: System.Boolean WebRequest::get_UseDefaultCredentials()
    bool get_UseDefaultCredentials();
    // public override System.Void set_UseDefaultCredentials(System.Boolean value)
    // Offset: 0x15700C0
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::set_UseDefaultCredentials(System.Boolean value)
    void set_UseDefaultCredentials(bool value);
    // public override System.Int32 get_Timeout()
    // Offset: 0x1570124
    // Implemented from: System.Net.WebRequest
    // Base method: System.Int32 WebRequest::get_Timeout()
    int get_Timeout();
    // public override System.Void Abort()
    // Offset: 0x1570368
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::Abort()
    void Abort();
    // public override System.IAsyncResult BeginGetResponse(System.AsyncCallback callback, System.Object state)
    // Offset: 0x157078C
    // Implemented from: System.Net.WebRequest
    // Base method: System.IAsyncResult WebRequest::BeginGetResponse(System.AsyncCallback callback, System.Object state)
    System::IAsyncResult* BeginGetResponse(System::AsyncCallback* callback, ::Il2CppObject* state);
    // public override System.Net.WebResponse EndGetResponse(System.IAsyncResult asyncResult)
    // Offset: 0x15709D8
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.WebResponse WebRequest::EndGetResponse(System.IAsyncResult asyncResult)
    System::Net::WebResponse* EndGetResponse(System::IAsyncResult* asyncResult);
    // public override System.Net.WebResponse GetResponse()
    // Offset: 0x1570B4C
    // Implemented from: System.Net.WebRequest
    // Base method: System.Net.WebResponse WebRequest::GetResponse()
    System::Net::WebResponse* GetResponse();
    // public override System.IAsyncResult BeginGetRequestStream(System.AsyncCallback callback, System.Object state)
    // Offset: 0x1570B94
    // Implemented from: System.Net.WebRequest
    // Base method: System.IAsyncResult WebRequest::BeginGetRequestStream(System.AsyncCallback callback, System.Object state)
    System::IAsyncResult* BeginGetRequestStream(System::AsyncCallback* callback, ::Il2CppObject* state);
    // public override System.IO.Stream EndGetRequestStream(System.IAsyncResult asyncResult)
    // Offset: 0x1570DF8
    // Implemented from: System.Net.WebRequest
    // Base method: System.IO.Stream WebRequest::EndGetRequestStream(System.IAsyncResult asyncResult)
    System::IO::Stream* EndGetRequestStream(System::IAsyncResult* asyncResult);
    // static private System.Void .cctor()
    // Offset: 0x1574820
    // Implemented from: System.Net.WebRequest
    // Base method: System.Void WebRequest::.cctor()
    static void _cctor();
  }; // System.Net.FtpWebRequest
  #pragma pack(pop)
  static check_size<sizeof(FtpWebRequest), 216 + sizeof(System::Text::Encoding*)> __System_Net_FtpWebRequestSizeCheck;
  static_assert(sizeof(FtpWebRequest) == 0xE0);
}
DEFINE_IL2CPP_ARG_TYPE(System::Net::FtpWebRequest*, "System.Net", "FtpWebRequest");
DEFINE_IL2CPP_ARG_TYPE(System::Net::FtpWebRequest::RequestState, "System.Net", "FtpWebRequest/RequestState");
