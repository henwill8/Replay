// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.MarshalByRefObject
#include "System/MarshalByRefObject.hpp"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.Net.Security.AuthenticationLevel
#include "System/Net/Security/AuthenticationLevel.hpp"
// Including type: System.Security.Principal.TokenImpersonationLevel
#include "System/Security/Principal/TokenImpersonationLevel.hpp"
// Including type: System.Net.TimerThread
#include "System/Net/TimerThread.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IWebProxy
  class IWebProxy;
  // Forward declaring type: WebHeaderCollection
  class WebHeaderCollection;
  // Forward declaring type: ICredentials
  class ICredentials;
  // Forward declaring type: WebResponse
  class WebResponse;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System::Security::Principal
namespace System::Security::Principal {
  // Forward declaring type: WindowsIdentity
  class WindowsIdentity;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.WebRequest
  // [] Offset: FFFFFFFF
  class WebRequest : public System::MarshalByRefObject/*, public System::Runtime::Serialization::ISerializable*/ {
    public:
    // Nested type: System::Net::WebRequest::DesignerWebRequestCreate
    class DesignerWebRequestCreate;
    // Nested type: System::Net::WebRequest::WebProxyWrapperOpaque
    class WebProxyWrapperOpaque;
    // Nested type: System::Net::WebRequest::WebProxyWrapper
    class WebProxyWrapper;
    // Nested type: System::Net::WebRequest::$$c__DisplayClass78_0
    class $$c__DisplayClass78_0;
    // Nested type: System::Net::WebRequest::$$c__DisplayClass79_0
    class $$c__DisplayClass79_0;
    // private System.Net.Security.AuthenticationLevel m_AuthenticationLevel
    // Size: 0x4
    // Offset: 0x18
    System::Net::Security::AuthenticationLevel m_AuthenticationLevel;
    // Field size check
    static_assert(sizeof(System::Net::Security::AuthenticationLevel) == 0x4);
    // private System.Security.Principal.TokenImpersonationLevel m_ImpersonationLevel
    // Size: 0x4
    // Offset: 0x1C
    System::Security::Principal::TokenImpersonationLevel m_ImpersonationLevel;
    // Field size check
    static_assert(sizeof(System::Security::Principal::TokenImpersonationLevel) == 0x4);
    // Creating value type constructor for type: WebRequest
    WebRequest(System::Net::Security::AuthenticationLevel m_AuthenticationLevel_ = {}, System::Security::Principal::TokenImpersonationLevel m_ImpersonationLevel_ = {}) noexcept : m_AuthenticationLevel{m_AuthenticationLevel_}, m_ImpersonationLevel{m_ImpersonationLevel_} {}
    // Creating interface conversion operator: operator System::Runtime::Serialization::ISerializable
    operator System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<System::Runtime::Serialization::ISerializable*>(this);
    }
    // Deleting conversion operator: operator ::Il2CppObject*
    constexpr operator ::Il2CppObject*() const noexcept = delete;
    // Get static field: static private System.Collections.ArrayList s_PrefixList
    static System::Collections::ArrayList* _get_s_PrefixList();
    // Set static field: static private System.Collections.ArrayList s_PrefixList
    static void _set_s_PrefixList(System::Collections::ArrayList* value);
    // Get static field: static private System.Object s_InternalSyncObject
    static ::Il2CppObject* _get_s_InternalSyncObject();
    // Set static field: static private System.Object s_InternalSyncObject
    static void _set_s_InternalSyncObject(::Il2CppObject* value);
    // Get static field: static private System.Net.TimerThread/Queue s_DefaultTimerQueue
    static System::Net::TimerThread::Queue* _get_s_DefaultTimerQueue();
    // Set static field: static private System.Net.TimerThread/Queue s_DefaultTimerQueue
    static void _set_s_DefaultTimerQueue(System::Net::TimerThread::Queue* value);
    // Get static field: static private System.Net.WebRequest/DesignerWebRequestCreate webRequestCreate
    static System::Net::WebRequest::DesignerWebRequestCreate* _get_webRequestCreate();
    // Set static field: static private System.Net.WebRequest/DesignerWebRequestCreate webRequestCreate
    static void _set_webRequestCreate(System::Net::WebRequest::DesignerWebRequestCreate* value);
    // Get static field: static private System.Net.IWebProxy s_DefaultWebProxy
    static System::Net::IWebProxy* _get_s_DefaultWebProxy();
    // Set static field: static private System.Net.IWebProxy s_DefaultWebProxy
    static void _set_s_DefaultWebProxy(System::Net::IWebProxy* value);
    // Get static field: static private System.Boolean s_DefaultWebProxyInitialized
    static bool _get_s_DefaultWebProxyInitialized();
    // Set static field: static private System.Boolean s_DefaultWebProxyInitialized
    static void _set_s_DefaultWebProxyInitialized(bool value);
    // static private System.Object get_InternalSyncObject()
    // Offset: 0x1444530
    static ::Il2CppObject* get_InternalSyncObject();
    // static private System.Net.WebRequest Create(System.Uri requestUri, System.Boolean useUriBase)
    // Offset: 0x1444610
    static System::Net::WebRequest* Create(System::Uri* requestUri, bool useUriBase);
    // static public System.Net.WebRequest Create(System.String requestUriString)
    // Offset: 0x1436544
    static System::Net::WebRequest* Create(::Il2CppString* requestUriString);
    // static public System.Net.WebRequest Create(System.Uri requestUri)
    // Offset: 0x1444BC8
    static System::Net::WebRequest* Create(System::Uri* requestUri);
    // static System.Collections.ArrayList get_PrefixList()
    // Offset: 0x1444868
    static System::Collections::ArrayList* get_PrefixList();
    // static private System.Collections.ArrayList PopulatePrefixList()
    // Offset: 0x1444CA0
    static System::Collections::ArrayList* PopulatePrefixList();
    // protected System.Void .ctor(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    // Offset: 0x1444EC8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WebRequest* New_ctor(System::Runtime::Serialization::SerializationInfo* serializationInfo, System::Runtime::Serialization::StreamingContext streamingContext) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::WebRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WebRequest*, creationType>(serializationInfo, streamingContext)));
    }
    // protected System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    // Offset: 0x1444EDC
    void GetObjectData(System::Runtime::Serialization::SerializationInfo* serializationInfo, System::Runtime::Serialization::StreamingContext streamingContext);
    // public System.String get_Method()
    // Offset: 0x1444EE0
    ::Il2CppString* get_Method();
    // public System.Void set_Method(System.String value)
    // Offset: 0x1444F28
    void set_Method(::Il2CppString* value);
    // public System.Uri get_RequestUri()
    // Offset: 0x1444F70
    System::Uri* get_RequestUri();
    // public System.Void set_ConnectionGroupName(System.String value)
    // Offset: 0x1444FB8
    void set_ConnectionGroupName(::Il2CppString* value);
    // public System.Net.WebHeaderCollection get_Headers()
    // Offset: 0x1445000
    System::Net::WebHeaderCollection* get_Headers();
    // public System.Int64 get_ContentLength()
    // Offset: 0x1445048
    int64_t get_ContentLength();
    // public System.Void set_ContentLength(System.Int64 value)
    // Offset: 0x1445090
    void set_ContentLength(int64_t value);
    // public System.Net.ICredentials get_Credentials()
    // Offset: 0x14450D8
    System::Net::ICredentials* get_Credentials();
    // public System.Void set_Credentials(System.Net.ICredentials value)
    // Offset: 0x1445120
    void set_Credentials(System::Net::ICredentials* value);
    // public System.Boolean get_UseDefaultCredentials()
    // Offset: 0x1445168
    bool get_UseDefaultCredentials();
    // public System.Void set_UseDefaultCredentials(System.Boolean value)
    // Offset: 0x14451B0
    void set_UseDefaultCredentials(bool value);
    // public System.Net.IWebProxy get_Proxy()
    // Offset: 0x14451F8
    System::Net::IWebProxy* get_Proxy();
    // public System.Void set_Proxy(System.Net.IWebProxy value)
    // Offset: 0x1445240
    void set_Proxy(System::Net::IWebProxy* value);
    // public System.Void set_PreAuthenticate(System.Boolean value)
    // Offset: 0x1445288
    void set_PreAuthenticate(bool value);
    // public System.Int32 get_Timeout()
    // Offset: 0x14452D0
    int get_Timeout();
    // public System.Net.WebResponse GetResponse()
    // Offset: 0x1445318
    System::Net::WebResponse* GetResponse();
    // public System.IAsyncResult BeginGetResponse(System.AsyncCallback callback, System.Object state)
    // Offset: 0x1445360
    System::IAsyncResult* BeginGetResponse(System::AsyncCallback* callback, ::Il2CppObject* state);
    // public System.Net.WebResponse EndGetResponse(System.IAsyncResult asyncResult)
    // Offset: 0x14453A8
    System::Net::WebResponse* EndGetResponse(System::IAsyncResult* asyncResult);
    // public System.IAsyncResult BeginGetRequestStream(System.AsyncCallback callback, System.Object state)
    // Offset: 0x14453F0
    System::IAsyncResult* BeginGetRequestStream(System::AsyncCallback* callback, ::Il2CppObject* state);
    // public System.IO.Stream EndGetRequestStream(System.IAsyncResult asyncResult)
    // Offset: 0x1445438
    System::IO::Stream* EndGetRequestStream(System::IAsyncResult* asyncResult);
    // public System.Threading.Tasks.Task`1<System.IO.Stream> GetRequestStreamAsync()
    // Offset: 0x1445480
    System::Threading::Tasks::Task_1<System::IO::Stream*>* GetRequestStreamAsync();
    // public System.Threading.Tasks.Task`1<System.Net.WebResponse> GetResponseAsync()
    // Offset: 0x1445768
    System::Threading::Tasks::Task_1<System::Net::WebResponse*>* GetResponseAsync();
    // private System.Security.Principal.WindowsIdentity SafeCaptureIdenity()
    // Offset: 0x1445708
    System::Security::Principal::WindowsIdentity* SafeCaptureIdenity();
    // public System.Void Abort()
    // Offset: 0x14459F0
    void Abort();
    // static System.Net.IWebProxy get_InternalDefaultWebProxy()
    // Offset: 0x1445A38
    static System::Net::IWebProxy* get_InternalDefaultWebProxy();
    // static public System.Net.IWebProxy get_DefaultWebProxy()
    // Offset: 0x1445C24
    static System::Net::IWebProxy* get_DefaultWebProxy();
    // static private System.Void .cctor()
    // Offset: 0x1445C80
    static void _cctor();
    // private System.Threading.Tasks.Task`1<System.IO.Stream> <GetRequestStreamAsync>b__78_0()
    // Offset: 0x1445D3C
    System::Threading::Tasks::Task_1<System::IO::Stream*>* $GetRequestStreamAsync$b__78_0();
    // private System.Threading.Tasks.Task`1<System.Net.WebResponse> <GetResponseAsync>b__79_0()
    // Offset: 0x1445E44
    System::Threading::Tasks::Task_1<System::Net::WebResponse*>* $GetResponseAsync$b__79_0();
    // protected System.Void .ctor()
    // Offset: 0x1444E98
    // Implemented from: System.MarshalByRefObject
    // Base method: System.Void MarshalByRefObject::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WebRequest* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::WebRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WebRequest*, creationType>()));
    }
    // private System.Void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    // Offset: 0x1444ED0
    // Implemented from: System.Runtime.Serialization.ISerializable
    // Base method: System.Void ISerializable::GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    void System_Runtime_Serialization_ISerializable_GetObjectData(System::Runtime::Serialization::SerializationInfo* serializationInfo, System::Runtime::Serialization::StreamingContext streamingContext);
  }; // System.Net.WebRequest
  #pragma pack(pop)
  static check_size<sizeof(WebRequest), 28 + sizeof(System::Security::Principal::TokenImpersonationLevel)> __System_Net_WebRequestSizeCheck;
  static_assert(sizeof(WebRequest) == 0x20);
}
DEFINE_IL2CPP_ARG_TYPE(System::Net::WebRequest*, "System.Net", "WebRequest");
