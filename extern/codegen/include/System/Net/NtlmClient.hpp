// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.IAuthenticationModule
#include "System/Net/IAuthenticationModule.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: Authorization
  class Authorization;
  // Forward declaring type: WebRequest
  class WebRequest;
  // Forward declaring type: ICredentials
  class ICredentials;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.NtlmClient
  // [] Offset: FFFFFFFF
  class NtlmClient : public ::Il2CppObject/*, public System::Net::IAuthenticationModule*/ {
    public:
    // private System.Net.IAuthenticationModule authObject
    // Size: 0x8
    // Offset: 0x10
    System::Net::IAuthenticationModule* authObject;
    // Field size check
    static_assert(sizeof(System::Net::IAuthenticationModule*) == 0x8);
    // Creating value type constructor for type: NtlmClient
    NtlmClient(System::Net::IAuthenticationModule* authObject_ = {}) noexcept : authObject{authObject_} {}
    // Creating interface conversion operator: operator System::Net::IAuthenticationModule
    operator System::Net::IAuthenticationModule() noexcept {
      return *reinterpret_cast<System::Net::IAuthenticationModule*>(this);
    }
    // Creating conversion operator: operator System::Net::IAuthenticationModule*
    constexpr operator System::Net::IAuthenticationModule*() const noexcept {
      return authObject;
    }
    // public System.Void .ctor()
    // Offset: 0x13583D8
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NtlmClient* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::NtlmClient::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NtlmClient*, creationType>()));
    }
    // public System.Net.Authorization Authenticate(System.String challenge, System.Net.WebRequest webRequest, System.Net.ICredentials credentials)
    // Offset: 0x135844C
    // Implemented from: System.Net.IAuthenticationModule
    // Base method: System.Net.Authorization IAuthenticationModule::Authenticate(System.String challenge, System.Net.WebRequest webRequest, System.Net.ICredentials credentials)
    System::Net::Authorization* Authenticate(::Il2CppString* challenge, System::Net::WebRequest* webRequest, System::Net::ICredentials* credentials);
    // public System.Net.Authorization PreAuthenticate(System.Net.WebRequest webRequest, System.Net.ICredentials credentials)
    // Offset: 0x1358538
    // Implemented from: System.Net.IAuthenticationModule
    // Base method: System.Net.Authorization IAuthenticationModule::PreAuthenticate(System.Net.WebRequest webRequest, System.Net.ICredentials credentials)
    System::Net::Authorization* PreAuthenticate(System::Net::WebRequest* webRequest, System::Net::ICredentials* credentials);
    // public System.String get_AuthenticationType()
    // Offset: 0x1358540
    // Implemented from: System.Net.IAuthenticationModule
    // Base method: System.String IAuthenticationModule::get_AuthenticationType()
    ::Il2CppString* get_AuthenticationType();
  }; // System.Net.NtlmClient
  #pragma pack(pop)
  static check_size<sizeof(NtlmClient), 16 + sizeof(System::Net::IAuthenticationModule*)> __System_Net_NtlmClientSizeCheck;
  static_assert(sizeof(NtlmClient) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(System::Net::NtlmClient*, "System.Net", "NtlmClient");
