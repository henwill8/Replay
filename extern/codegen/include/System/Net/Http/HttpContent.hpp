// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net::Http
namespace System::Net::Http {
}
// Forward declaring namespace: System::Net::Http::Headers
namespace System::Net::Http::Headers {
  // Forward declaring type: HttpContentHeaders
  class HttpContentHeaders;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: TransportContext
  class TransportContext;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
}
// Completed forward declares
// Type namespace: System.Net.Http
namespace System::Net::Http {
  // Autogenerated type: System.Net.Http.HttpContent
  class HttpContent : public ::Il2CppObject/*, public System::IDisposable*/ {
    public:
    // Nested type: System::Net::Http::HttpContent::FixedMemoryStream
    class FixedMemoryStream;
    // Nested type: System::Net::Http::HttpContent::$LoadIntoBufferAsync$d__17
    struct $LoadIntoBufferAsync$d__17;
    // Nested type: System::Net::Http::HttpContent::$ReadAsStringAsync$d__20
    struct $ReadAsStringAsync$d__20;
    // private System.Net.Http.HttpContent/FixedMemoryStream buffer
    // Offset: 0x10
    System::Net::Http::HttpContent::FixedMemoryStream* buffer;
    // private System.Boolean disposed
    // Offset: 0x18
    bool disposed;
    // private System.Net.Http.Headers.HttpContentHeaders headers
    // Offset: 0x20
    System::Net::Http::Headers::HttpContentHeaders* headers;
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // public System.Net.Http.Headers.HttpContentHeaders get_Headers()
    // Offset: 0x120DC30
    System::Net::Http::Headers::HttpContentHeaders* get_Headers();
    // System.Nullable`1<System.Int64> get_LoadedBufferLength()
    // Offset: 0x1200660
    System::Nullable_1<int64_t> get_LoadedBufferLength();
    // System.Void CopyTo(System.IO.Stream stream)
    // Offset: 0x120F49C
    void CopyTo(System::IO::Stream* stream);
    // public System.Threading.Tasks.Task CopyToAsync(System.IO.Stream stream)
    // Offset: 0x120F3B4
    System::Threading::Tasks::Task* CopyToAsync(System::IO::Stream* stream);
    // public System.Threading.Tasks.Task CopyToAsync(System.IO.Stream stream, System.Net.TransportContext context)
    // Offset: 0x120F4C0
    System::Threading::Tasks::Task* CopyToAsync(System::IO::Stream* stream, System::Net::TransportContext* context);
    // static private System.Net.Http.HttpContent/FixedMemoryStream CreateFixedMemoryStream(System.Int64 maxBufferSize)
    // Offset: 0x120F584
    static System::Net::Http::HttpContent::FixedMemoryStream* CreateFixedMemoryStream(int64_t maxBufferSize);
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x120F624
    void Dispose(bool disposing);
    // public System.Threading.Tasks.Task LoadIntoBufferAsync()
    // Offset: 0x120F650
    System::Threading::Tasks::Task* LoadIntoBufferAsync();
    // public System.Threading.Tasks.Task LoadIntoBufferAsync(System.Int64 maxBufferSize)
    // Offset: 0x120CFEC
    System::Threading::Tasks::Task* LoadIntoBufferAsync(int64_t maxBufferSize);
    // public System.Threading.Tasks.Task`1<System.String> ReadAsStringAsync()
    // Offset: 0x120C924
    System::Threading::Tasks::Task_1<::Il2CppString*>* ReadAsStringAsync();
    // static private System.Text.Encoding GetEncodingFromBuffer(System.Byte[] buffer, System.Int32 length, ref System.Int32 preambleLength)
    // Offset: 0x120F658
    static System::Text::Encoding* GetEncodingFromBuffer(::Array<uint8_t>* buffer, int length, int& preambleLength);
    // static private System.Int32 StartsWith(System.Byte[] array, System.Int32 length, System.Byte[] value)
    // Offset: 0x120F814
    static int StartsWith(::Array<uint8_t>* array, int length, ::Array<uint8_t>* value);
    // protected internal System.Threading.Tasks.Task SerializeToStreamAsync(System.IO.Stream stream, System.Net.TransportContext context)
    // Offset: 0xFFFFFFFF
    System::Threading::Tasks::Task* SerializeToStreamAsync(System::IO::Stream* stream, System::Net::TransportContext* context);
    // protected internal System.Boolean TryComputeLength(out System.Int64 length)
    // Offset: 0xFFFFFFFF
    bool TryComputeLength(int64_t& length);
    // public System.Void Dispose()
    // Offset: 0x120F614
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
    // protected System.Void .ctor()
    // Offset: 0x120F890
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static HttpContent* New_ctor();
  }; // System.Net.Http.HttpContent
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Net::Http::HttpContent*, "System.Net.Http", "HttpContent");
#pragma pack(pop)
