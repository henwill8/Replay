// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net::Http
namespace System::Net::Http {
}
// Forward declaring namespace: System::Net::Http::Headers
namespace System::Net::Http::Headers {
  // Forward declaring type: HttpContentHeaders
  class HttpContentHeaders;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: TransportContext
  class TransportContext;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
}
// Completed forward declares
// Type namespace: System.Net.Http
namespace System::Net::Http {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.Http.HttpContent
  // [] Offset: FFFFFFFF
  class HttpContent : public ::Il2CppObject/*, public System::IDisposable*/ {
    public:
    // Nested type: System::Net::Http::HttpContent::FixedMemoryStream
    class FixedMemoryStream;
    // Nested type: System::Net::Http::HttpContent::$LoadIntoBufferAsync$d__17
    struct $LoadIntoBufferAsync$d__17;
    // Nested type: System::Net::Http::HttpContent::$ReadAsStringAsync$d__20
    struct $ReadAsStringAsync$d__20;
    // private System.Net.Http.HttpContent/FixedMemoryStream buffer
    // Size: 0x8
    // Offset: 0x10
    System::Net::Http::HttpContent::FixedMemoryStream* buffer;
    // Field size check
    static_assert(sizeof(System::Net::Http::HttpContent::FixedMemoryStream*) == 0x8);
    // private System.Boolean disposed
    // Size: 0x1
    // Offset: 0x18
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disposed and: headers
    char __padding1[0x7] = {};
    // private System.Net.Http.Headers.HttpContentHeaders headers
    // Size: 0x8
    // Offset: 0x20
    System::Net::Http::Headers::HttpContentHeaders* headers;
    // Field size check
    static_assert(sizeof(System::Net::Http::Headers::HttpContentHeaders*) == 0x8);
    // Creating value type constructor for type: HttpContent
    HttpContent(System::Net::Http::HttpContent::FixedMemoryStream* buffer_ = {}, bool disposed_ = {}, System::Net::Http::Headers::HttpContentHeaders* headers_ = {}) noexcept : buffer{buffer_}, disposed{disposed_}, headers{headers_} {}
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // public System.Net.Http.Headers.HttpContentHeaders get_Headers()
    // Offset: 0x1415B0C
    System::Net::Http::Headers::HttpContentHeaders* get_Headers();
    // System.Nullable`1<System.Int64> get_LoadedBufferLength()
    // Offset: 0x14083F8
    System::Nullable_1<int64_t> get_LoadedBufferLength();
    // System.Void CopyTo(System.IO.Stream stream)
    // Offset: 0x1417378
    void CopyTo(System::IO::Stream* stream);
    // public System.Threading.Tasks.Task CopyToAsync(System.IO.Stream stream)
    // Offset: 0x1417290
    System::Threading::Tasks::Task* CopyToAsync(System::IO::Stream* stream);
    // public System.Threading.Tasks.Task CopyToAsync(System.IO.Stream stream, System.Net.TransportContext context)
    // Offset: 0x141739C
    System::Threading::Tasks::Task* CopyToAsync(System::IO::Stream* stream, System::Net::TransportContext* context);
    // static private System.Net.Http.HttpContent/FixedMemoryStream CreateFixedMemoryStream(System.Int64 maxBufferSize)
    // Offset: 0x1417460
    static System::Net::Http::HttpContent::FixedMemoryStream* CreateFixedMemoryStream(int64_t maxBufferSize);
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x1417500
    void Dispose(bool disposing);
    // public System.Threading.Tasks.Task LoadIntoBufferAsync()
    // Offset: 0x141752C
    System::Threading::Tasks::Task* LoadIntoBufferAsync();
    // public System.Threading.Tasks.Task LoadIntoBufferAsync(System.Int64 maxBufferSize)
    // Offset: 0x1414EC8
    System::Threading::Tasks::Task* LoadIntoBufferAsync(int64_t maxBufferSize);
    // public System.Threading.Tasks.Task`1<System.String> ReadAsStringAsync()
    // Offset: 0x1414800
    System::Threading::Tasks::Task_1<::Il2CppString*>* ReadAsStringAsync();
    // static private System.Text.Encoding GetEncodingFromBuffer(System.Byte[] buffer, System.Int32 length, ref System.Int32 preambleLength)
    // Offset: 0x1417534
    static System::Text::Encoding* GetEncodingFromBuffer(::Array<uint8_t>* buffer, int length, int& preambleLength);
    // static private System.Int32 StartsWith(System.Byte[] array, System.Int32 length, System.Byte[] value)
    // Offset: 0x14176F0
    static int StartsWith(::Array<uint8_t>* array, int length, ::Array<uint8_t>* value);
    // protected internal System.Threading.Tasks.Task SerializeToStreamAsync(System.IO.Stream stream, System.Net.TransportContext context)
    // Offset: 0xFFFFFFFF
    System::Threading::Tasks::Task* SerializeToStreamAsync(System::IO::Stream* stream, System::Net::TransportContext* context);
    // protected internal System.Boolean TryComputeLength(out System.Int64 length)
    // Offset: 0xFFFFFFFF
    bool TryComputeLength(int64_t& length);
    // public System.Void Dispose()
    // Offset: 0x14174F0
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
    // protected System.Void .ctor()
    // Offset: 0x141776C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HttpContent* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::Http::HttpContent::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HttpContent*, creationType>()));
    }
  }; // System.Net.Http.HttpContent
  #pragma pack(pop)
  static check_size<sizeof(HttpContent), 32 + sizeof(System::Net::Http::Headers::HttpContentHeaders*)> __System_Net_Http_HttpContentSizeCheck;
  static_assert(sizeof(HttpContent) == 0x28);
}
DEFINE_IL2CPP_ARG_TYPE(System::Net::Http::HttpContent*, "System.Net.Http", "HttpContent");
