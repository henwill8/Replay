// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.HttpMessageInvoker
#include "System/Net/Http/HttpMessageInvoker.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net::Http
namespace System::Net::Http {
  // Forward declaring type: HttpResponseMessage
  class HttpResponseMessage;
  // Forward declaring type: HttpCompletionOption
  struct HttpCompletionOption;
  // Forward declaring type: HttpRequestMessage
  class HttpRequestMessage;
  // Forward declaring type: HttpMessageHandler
  class HttpMessageHandler;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationTokenSource
  class CancellationTokenSource;
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Forward declaring namespace: System::Net::Http::Headers
namespace System::Net::Http::Headers {
  // Forward declaring type: HttpRequestHeaders
  class HttpRequestHeaders;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Completed forward declares
// Type namespace: System.Net.Http
namespace System::Net::Http {
  // Autogenerated type: System.Net.Http.HttpClient
  class HttpClient : public System::Net::Http::HttpMessageInvoker {
    public:
    // Nested type: System::Net::Http::HttpClient::$SendAsyncWorker$d__47
    struct $SendAsyncWorker$d__47;
    // Nested type: System::Net::Http::HttpClient::$GetStringAsync$d__52
    struct $GetStringAsync$d__52;
    // private System.Uri base_address
    // Offset: 0x20
    System::Uri* base_address;
    // private System.Threading.CancellationTokenSource cts
    // Offset: 0x28
    System::Threading::CancellationTokenSource* cts;
    // private System.Boolean disposed
    // Offset: 0x30
    bool disposed;
    // private System.Net.Http.Headers.HttpRequestHeaders headers
    // Offset: 0x38
    System::Net::Http::Headers::HttpRequestHeaders* headers;
    // private System.Int64 buffer_size
    // Offset: 0x40
    int64_t buffer_size;
    // private System.TimeSpan timeout
    // Offset: 0x48
    System::TimeSpan timeout;
    // Get static field: static private readonly System.TimeSpan TimeoutDefault
    static System::TimeSpan _get_TimeoutDefault();
    // Set static field: static private readonly System.TimeSpan TimeoutDefault
    static void _set_TimeoutDefault(System::TimeSpan value);
    // public System.Int64 get_MaxResponseContentBufferSize()
    // Offset: 0x120BA18
    int64_t get_MaxResponseContentBufferSize();
    // public System.Threading.Tasks.Task`1<System.Net.Http.HttpResponseMessage> GetAsync(System.String requestUri, System.Net.Http.HttpCompletionOption completionOption)
    // Offset: 0x120BAC8
    System::Threading::Tasks::Task_1<System::Net::Http::HttpResponseMessage*>* GetAsync(::Il2CppString* requestUri, System::Net::Http::HttpCompletionOption completionOption);
    // public System.Threading.Tasks.Task`1<System.Net.Http.HttpResponseMessage> SendAsync(System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption)
    // Offset: 0x120BC50
    System::Threading::Tasks::Task_1<System::Net::Http::HttpResponseMessage*>* SendAsync(System::Net::Http::HttpRequestMessage* request, System::Net::Http::HttpCompletionOption completionOption);
    // public System.Threading.Tasks.Task`1<System.Net.Http.HttpResponseMessage> SendAsync(System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x120BCD8
    System::Threading::Tasks::Task_1<System::Net::Http::HttpResponseMessage*>* SendAsync(System::Net::Http::HttpRequestMessage* request, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);
    // private System.Threading.Tasks.Task`1<System.Net.Http.HttpResponseMessage> SendAsyncWorker(System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x120C0E8
    System::Threading::Tasks::Task_1<System::Net::Http::HttpResponseMessage*>* SendAsyncWorker(System::Net::Http::HttpRequestMessage* request, System::Net::Http::HttpCompletionOption completionOption, System::Threading::CancellationToken cancellationToken);
    // public System.Threading.Tasks.Task`1<System.String> GetStringAsync(System.String requestUri)
    // Offset: 0x120C250
    System::Threading::Tasks::Task_1<::Il2CppString*>* GetStringAsync(::Il2CppString* requestUri);
    // static private System.Void .cctor()
    // Offset: 0x120C388
    static void _cctor();
    // private System.Threading.Tasks.Task`1<System.Net.Http.HttpResponseMessage> <>n__0(System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x120C408
    System::Threading::Tasks::Task_1<System::Net::Http::HttpResponseMessage*>* $$n__0(System::Net::Http::HttpRequestMessage* request, System::Threading::CancellationToken cancellationToken);
    // public System.Void .ctor()
    // Offset: 0x120B76C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static HttpClient* New_ctor();
    // public System.Void .ctor(System.Net.Http.HttpMessageHandler handler, System.Boolean disposeHandler)
    // Offset: 0x120B8A4
    // Implemented from: System.Net.Http.HttpMessageInvoker
    // Base method: System.Void HttpMessageInvoker::.ctor(System.Net.Http.HttpMessageHandler handler, System.Boolean disposeHandler)
    static HttpClient* New_ctor(System::Net::Http::HttpMessageHandler* handler, bool disposeHandler);
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x120BA20
    // Implemented from: System.Net.Http.HttpMessageInvoker
    // Base method: System.Void HttpMessageInvoker::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // public override System.Threading.Tasks.Task`1<System.Net.Http.HttpResponseMessage> SendAsync(System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x120BF5C
    // Implemented from: System.Net.Http.HttpMessageInvoker
    // Base method: System.Threading.Tasks.Task`1<System.Net.Http.HttpResponseMessage> HttpMessageInvoker::SendAsync(System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken)
    System::Threading::Tasks::Task_1<System::Net::Http::HttpResponseMessage*>* SendAsync(System::Net::Http::HttpRequestMessage* request, System::Threading::CancellationToken cancellationToken);
  }; // System.Net.Http.HttpClient
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Net::Http::HttpClient*, "System.Net.Http", "HttpClient");
#pragma pack(pop)
