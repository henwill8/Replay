// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Net.Http.HttpMessageHandler
#include "System/Net/Http/HttpMessageHandler.hpp"
// Including type: System.Net.DecompressionMethods
#include "System/Net/DecompressionMethods.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net::Http
namespace System::Net::Http {
  // Forward declaring type: HttpRequestMessage
  class HttpRequestMessage;
  // Forward declaring type: HttpResponseMessage
  class HttpResponseMessage;
  // Forward declaring type: HttpMethod
  class HttpMethod;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: CookieContainer
  class CookieContainer;
  // Forward declaring type: ICredentials
  class ICredentials;
  // Forward declaring type: IWebProxy
  class IWebProxy;
  // Forward declaring type: HttpWebRequest
  class HttpWebRequest;
  // Forward declaring type: HttpWebResponse
  class HttpWebResponse;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Completed forward declares
// Type namespace: System.Net.Http
namespace System::Net::Http {
  // Autogenerated type: System.Net.Http.HttpClientHandler
  class HttpClientHandler : public System::Net::Http::HttpMessageHandler {
    public:
    // Nested type: System::Net::Http::HttpClientHandler::$$c
    class $$c;
    // Nested type: System::Net::Http::HttpClientHandler::$SendAsync$d__64
    struct $SendAsync$d__64;
    // private System.Boolean allowAutoRedirect
    // Offset: 0x10
    bool allowAutoRedirect;
    // private System.Net.DecompressionMethods automaticDecompression
    // Offset: 0x14
    System::Net::DecompressionMethods automaticDecompression;
    // private System.Net.CookieContainer cookieContainer
    // Offset: 0x18
    System::Net::CookieContainer* cookieContainer;
    // private System.Net.ICredentials credentials
    // Offset: 0x20
    System::Net::ICredentials* credentials;
    // private System.Int32 maxAutomaticRedirections
    // Offset: 0x28
    int maxAutomaticRedirections;
    // private System.Int64 maxRequestContentBufferSize
    // Offset: 0x30
    int64_t maxRequestContentBufferSize;
    // private System.Boolean preAuthenticate
    // Offset: 0x38
    bool preAuthenticate;
    // private System.Net.IWebProxy proxy
    // Offset: 0x40
    System::Net::IWebProxy* proxy;
    // private System.Boolean useCookies
    // Offset: 0x48
    bool useCookies;
    // private System.Boolean useDefaultCredentials
    // Offset: 0x49
    bool useDefaultCredentials;
    // private System.Boolean useProxy
    // Offset: 0x4A
    bool useProxy;
    // private System.Boolean sentRequest
    // Offset: 0x4B
    bool sentRequest;
    // private System.String connectionGroupName
    // Offset: 0x50
    ::Il2CppString* connectionGroupName;
    // private System.Boolean disposed
    // Offset: 0x58
    bool disposed;
    // Get static field: static private System.Int64 groupCounter
    static int64_t _get_groupCounter();
    // Set static field: static private System.Int64 groupCounter
    static void _set_groupCounter(int64_t value);
    // public System.Net.CookieContainer get_CookieContainer()
    // Offset: 0x120D174
    System::Net::CookieContainer* get_CookieContainer();
    // public System.Int64 get_MaxRequestContentBufferSize()
    // Offset: 0x120D1EC
    int64_t get_MaxRequestContentBufferSize();
    // System.Net.HttpWebRequest CreateWebRequest(System.Net.Http.HttpRequestMessage request)
    // Offset: 0x120D298
    System::Net::HttpWebRequest* CreateWebRequest(System::Net::Http::HttpRequestMessage* request);
    // private System.Net.Http.HttpResponseMessage CreateResponseMessage(System.Net.HttpWebResponse wr, System.Net.Http.HttpRequestMessage requestMessage, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x120D974
    System::Net::Http::HttpResponseMessage* CreateResponseMessage(System::Net::HttpWebResponse* wr, System::Net::Http::HttpRequestMessage* requestMessage, System::Threading::CancellationToken cancellationToken);
    // static private System.Boolean MethodHasBody(System.Net.Http.HttpMethod method)
    // Offset: 0x120DD28
    static bool MethodHasBody(System::Net::Http::HttpMethod* method);
    // public System.Void .ctor()
    // Offset: 0x120B7D0
    // Implemented from: System.Net.Http.HttpMessageHandler
    // Base method: System.Void HttpMessageHandler::.ctor()
    // Base method: System.Void Object::.ctor()
    static HttpClientHandler* New_ctor();
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x120D1F4
    // Implemented from: System.Net.Http.HttpMessageHandler
    // Base method: System.Void HttpMessageHandler::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // protected internal override System.Threading.Tasks.Task`1<System.Net.Http.HttpResponseMessage> SendAsync(System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x120DE0C
    // Implemented from: System.Net.Http.HttpMessageHandler
    // Base method: System.Threading.Tasks.Task`1<System.Net.Http.HttpResponseMessage> HttpMessageHandler::SendAsync(System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken)
    System::Threading::Tasks::Task_1<System::Net::Http::HttpResponseMessage*>* SendAsync(System::Net::Http::HttpRequestMessage* request, System::Threading::CancellationToken cancellationToken);
  }; // System.Net.Http.HttpClientHandler
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Net::Http::HttpClientHandler*, "System.Net.Http", "HttpClientHandler");
#pragma pack(pop)
