// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net::Http::Headers
namespace System::Net::Http::Headers {
  // Skipping declaration: Type because it is already included!
}
// Completed forward declares
// Type namespace: System.Net.Http.Headers
namespace System::Net::Http::Headers {
  // Autogenerated type: System.Net.Http.Headers.Token
  struct Token : public System::ValueType {
    public:
    // Nested type: System::Net::Http::Headers::Token::Type
    struct Type;
    // Autogenerated type: System.Net.Http.Headers.Token/Type
    struct Type : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: Type
      constexpr Type(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Net.Http.Headers.Token/Type Error
      static constexpr const int Error = 0;
      // Get static field: static public System.Net.Http.Headers.Token/Type Error
      static System::Net::Http::Headers::Token::Type _get_Error();
      // Set static field: static public System.Net.Http.Headers.Token/Type Error
      static void _set_Error(System::Net::Http::Headers::Token::Type value);
      // static field const value: static public System.Net.Http.Headers.Token/Type End
      static constexpr const int End = 1;
      // Get static field: static public System.Net.Http.Headers.Token/Type End
      static System::Net::Http::Headers::Token::Type _get_End();
      // Set static field: static public System.Net.Http.Headers.Token/Type End
      static void _set_End(System::Net::Http::Headers::Token::Type value);
      // static field const value: static public System.Net.Http.Headers.Token/Type Token
      static constexpr const int Token = 2;
      // Get static field: static public System.Net.Http.Headers.Token/Type Token
      static System::Net::Http::Headers::Token::Type _get_Token();
      // Set static field: static public System.Net.Http.Headers.Token/Type Token
      static void _set_Token(System::Net::Http::Headers::Token::Type value);
      // static field const value: static public System.Net.Http.Headers.Token/Type QuotedString
      static constexpr const int QuotedString = 3;
      // Get static field: static public System.Net.Http.Headers.Token/Type QuotedString
      static System::Net::Http::Headers::Token::Type _get_QuotedString();
      // Set static field: static public System.Net.Http.Headers.Token/Type QuotedString
      static void _set_QuotedString(System::Net::Http::Headers::Token::Type value);
      // static field const value: static public System.Net.Http.Headers.Token/Type SeparatorEqual
      static constexpr const int SeparatorEqual = 4;
      // Get static field: static public System.Net.Http.Headers.Token/Type SeparatorEqual
      static System::Net::Http::Headers::Token::Type _get_SeparatorEqual();
      // Set static field: static public System.Net.Http.Headers.Token/Type SeparatorEqual
      static void _set_SeparatorEqual(System::Net::Http::Headers::Token::Type value);
      // static field const value: static public System.Net.Http.Headers.Token/Type SeparatorSemicolon
      static constexpr const int SeparatorSemicolon = 5;
      // Get static field: static public System.Net.Http.Headers.Token/Type SeparatorSemicolon
      static System::Net::Http::Headers::Token::Type _get_SeparatorSemicolon();
      // Set static field: static public System.Net.Http.Headers.Token/Type SeparatorSemicolon
      static void _set_SeparatorSemicolon(System::Net::Http::Headers::Token::Type value);
      // static field const value: static public System.Net.Http.Headers.Token/Type SeparatorSlash
      static constexpr const int SeparatorSlash = 6;
      // Get static field: static public System.Net.Http.Headers.Token/Type SeparatorSlash
      static System::Net::Http::Headers::Token::Type _get_SeparatorSlash();
      // Set static field: static public System.Net.Http.Headers.Token/Type SeparatorSlash
      static void _set_SeparatorSlash(System::Net::Http::Headers::Token::Type value);
      // static field const value: static public System.Net.Http.Headers.Token/Type SeparatorDash
      static constexpr const int SeparatorDash = 7;
      // Get static field: static public System.Net.Http.Headers.Token/Type SeparatorDash
      static System::Net::Http::Headers::Token::Type _get_SeparatorDash();
      // Set static field: static public System.Net.Http.Headers.Token/Type SeparatorDash
      static void _set_SeparatorDash(System::Net::Http::Headers::Token::Type value);
      // static field const value: static public System.Net.Http.Headers.Token/Type SeparatorComma
      static constexpr const int SeparatorComma = 8;
      // Get static field: static public System.Net.Http.Headers.Token/Type SeparatorComma
      static System::Net::Http::Headers::Token::Type _get_SeparatorComma();
      // Set static field: static public System.Net.Http.Headers.Token/Type SeparatorComma
      static void _set_SeparatorComma(System::Net::Http::Headers::Token::Type value);
      // static field const value: static public System.Net.Http.Headers.Token/Type OpenParens
      static constexpr const int OpenParens = 9;
      // Get static field: static public System.Net.Http.Headers.Token/Type OpenParens
      static System::Net::Http::Headers::Token::Type _get_OpenParens();
      // Set static field: static public System.Net.Http.Headers.Token/Type OpenParens
      static void _set_OpenParens(System::Net::Http::Headers::Token::Type value);
    }; // System.Net.Http.Headers.Token/Type
    // private readonly System.Net.Http.Headers.Token/Type type
    // Offset: 0x0
    System::Net::Http::Headers::Token::Type type;
    // private System.Int32 <StartPosition>k__BackingField
    // Offset: 0x4
    int StartPosition;
    // private System.Int32 <EndPosition>k__BackingField
    // Offset: 0x8
    int EndPosition;
    // Creating value type constructor for type: Token
    constexpr Token(System::Net::Http::Headers::Token::Type type_ = {}, int StartPosition_ = {}, int EndPosition_ = {}) noexcept : type{type_}, StartPosition{StartPosition_}, EndPosition{EndPosition_} {}
    // Get static field: static public readonly System.Net.Http.Headers.Token Empty
    static System::Net::Http::Headers::Token _get_Empty();
    // Set static field: static public readonly System.Net.Http.Headers.Token Empty
    static void _set_Empty(System::Net::Http::Headers::Token value);
    // public System.Void .ctor(System.Net.Http.Headers.Token/Type type, System.Int32 startPosition, System.Int32 endPosition)
    // Offset: 0xC98CB0
    // ABORTED: conflicts with another method.  Token(System::Net::Http::Headers::Token::Type type, int startPosition, int endPosition);
    // public System.Int32 get_StartPosition()
    // Offset: 0xC98CBC
    int get_StartPosition();
    // private System.Void set_StartPosition(System.Int32 value)
    // Offset: 0xC98CC4
    void set_StartPosition(int value);
    // public System.Int32 get_EndPosition()
    // Offset: 0xC98CCC
    int get_EndPosition();
    // private System.Void set_EndPosition(System.Int32 value)
    // Offset: 0xC98CD4
    void set_EndPosition(int value);
    // public System.Net.Http.Headers.Token/Type get_Kind()
    // Offset: 0xC98CDC
    System::Net::Http::Headers::Token::Type get_Kind();
    // static private System.Void .cctor()
    // Offset: 0x1209E04
    static void _cctor();
    // public override System.String ToString()
    // Offset: 0xC98CE4
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::Il2CppString* ToString();
  }; // System.Net.Http.Headers.Token
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Net::Http::Headers::Token, "System.Net.Http.Headers", "Token");
DEFINE_IL2CPP_ARG_TYPE(System::Net::Http::Headers::Token::Type, "System.Net.Http.Headers", "Token/Type");
#pragma pack(pop)
