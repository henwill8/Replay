// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: Socket
  class Socket;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
  // Forward declaring type: MemoryStream
  class MemoryStream;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: EndPointListener
  class EndPointListener;
  // Forward declaring type: HttpListenerContext
  class HttpListenerContext;
  // Forward declaring type: ListenerPrefix
  class ListenerPrefix;
  // Forward declaring type: RequestStream
  class RequestStream;
  // Forward declaring type: ResponseStream
  class ResponseStream;
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
  // Forward declaring type: HttpListener
  class HttpListener;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509Certificate
  class X509Certificate;
  // Forward declaring type: X509Certificate2
  class X509Certificate2;
  // Forward declaring type: X509Chain
  class X509Chain;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: Timer
  class Timer;
}
// Forward declaring namespace: System::Net::Security
namespace System::Net::Security {
  // Forward declaring type: SslStream
  class SslStream;
  // Forward declaring type: SslPolicyErrors
  struct SslPolicyErrors;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Autogenerated type: System.Net.HttpConnection
  class HttpConnection : public ::Il2CppObject {
    public:
    // Nested type: System::Net::HttpConnection::InputState
    struct InputState;
    // Nested type: System::Net::HttpConnection::LineState
    struct LineState;
    // Autogenerated type: System.Net.HttpConnection/InputState
    struct InputState : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: InputState
      constexpr InputState(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Net.HttpConnection/InputState RequestLine
      static constexpr const int RequestLine = 0;
      // Get static field: static public System.Net.HttpConnection/InputState RequestLine
      static System::Net::HttpConnection::InputState _get_RequestLine();
      // Set static field: static public System.Net.HttpConnection/InputState RequestLine
      static void _set_RequestLine(System::Net::HttpConnection::InputState value);
      // static field const value: static public System.Net.HttpConnection/InputState Headers
      static constexpr const int Headers = 1;
      // Get static field: static public System.Net.HttpConnection/InputState Headers
      static System::Net::HttpConnection::InputState _get_Headers();
      // Set static field: static public System.Net.HttpConnection/InputState Headers
      static void _set_Headers(System::Net::HttpConnection::InputState value);
    }; // System.Net.HttpConnection/InputState
    // Autogenerated type: System.Net.HttpConnection/LineState
    struct LineState : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: LineState
      constexpr LineState(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Net.HttpConnection/LineState None
      static constexpr const int None = 0;
      // Get static field: static public System.Net.HttpConnection/LineState None
      static System::Net::HttpConnection::LineState _get_None();
      // Set static field: static public System.Net.HttpConnection/LineState None
      static void _set_None(System::Net::HttpConnection::LineState value);
      // static field const value: static public System.Net.HttpConnection/LineState CR
      static constexpr const int CR = 1;
      // Get static field: static public System.Net.HttpConnection/LineState CR
      static System::Net::HttpConnection::LineState _get_CR();
      // Set static field: static public System.Net.HttpConnection/LineState CR
      static void _set_CR(System::Net::HttpConnection::LineState value);
      // static field const value: static public System.Net.HttpConnection/LineState LF
      static constexpr const int LF = 2;
      // Get static field: static public System.Net.HttpConnection/LineState LF
      static System::Net::HttpConnection::LineState _get_LF();
      // Set static field: static public System.Net.HttpConnection/LineState LF
      static void _set_LF(System::Net::HttpConnection::LineState value);
    }; // System.Net.HttpConnection/LineState
    // private System.Net.Sockets.Socket sock
    // Offset: 0x10
    System::Net::Sockets::Socket* sock;
    // private System.IO.Stream stream
    // Offset: 0x18
    System::IO::Stream* stream;
    // private System.Net.EndPointListener epl
    // Offset: 0x20
    System::Net::EndPointListener* epl;
    // private System.IO.MemoryStream ms
    // Offset: 0x28
    System::IO::MemoryStream* ms;
    // private System.Byte[] buffer
    // Offset: 0x30
    ::Array<uint8_t>* buffer;
    // private System.Net.HttpListenerContext context
    // Offset: 0x38
    System::Net::HttpListenerContext* context;
    // private System.Text.StringBuilder current_line
    // Offset: 0x40
    System::Text::StringBuilder* current_line;
    // private System.Net.ListenerPrefix prefix
    // Offset: 0x48
    System::Net::ListenerPrefix* prefix;
    // private System.Net.RequestStream i_stream
    // Offset: 0x50
    System::Net::RequestStream* i_stream;
    // private System.Net.ResponseStream o_stream
    // Offset: 0x58
    System::Net::ResponseStream* o_stream;
    // private System.Boolean chunked
    // Offset: 0x60
    bool chunked;
    // private System.Int32 reuses
    // Offset: 0x64
    int reuses;
    // private System.Boolean context_bound
    // Offset: 0x68
    bool context_bound;
    // private System.Boolean secure
    // Offset: 0x69
    bool secure;
    // private System.Security.Cryptography.X509Certificates.X509Certificate cert
    // Offset: 0x70
    System::Security::Cryptography::X509Certificates::X509Certificate* cert;
    // private System.Int32 s_timeout
    // Offset: 0x78
    int s_timeout;
    // private System.Threading.Timer timer
    // Offset: 0x80
    System::Threading::Timer* timer;
    // private System.Net.IPEndPoint local_ep
    // Offset: 0x88
    System::Net::IPEndPoint* local_ep;
    // private System.Net.HttpListener last_listener
    // Offset: 0x90
    System::Net::HttpListener* last_listener;
    // private System.Int32[] client_cert_errors
    // Offset: 0x98
    ::Array<int>* client_cert_errors;
    // private System.Security.Cryptography.X509Certificates.X509Certificate2 client_cert
    // Offset: 0xA0
    System::Security::Cryptography::X509Certificates::X509Certificate2* client_cert;
    // private System.Net.Security.SslStream ssl_stream
    // Offset: 0xA8
    System::Net::Security::SslStream* ssl_stream;
    // private System.Net.HttpConnection/InputState input_state
    // Offset: 0xB0
    System::Net::HttpConnection::InputState input_state;
    // private System.Net.HttpConnection/LineState line_state
    // Offset: 0xB4
    System::Net::HttpConnection::LineState line_state;
    // private System.Int32 position
    // Offset: 0xB8
    int position;
    // Get static field: static private System.AsyncCallback onread_cb
    static System::AsyncCallback* _get_onread_cb();
    // Set static field: static private System.AsyncCallback onread_cb
    static void _set_onread_cb(System::AsyncCallback* value);
    // public System.Void .ctor(System.Net.Sockets.Socket sock, System.Net.EndPointListener epl, System.Boolean secure, System.Security.Cryptography.X509Certificates.X509Certificate cert)
    // Offset: 0x12A9900
    static HttpConnection* New_ctor(System::Net::Sockets::Socket* sock, System::Net::EndPointListener* epl, bool secure, System::Security::Cryptography::X509Certificates::X509Certificate* cert);
    // private System.Void Init()
    // Offset: 0x12A9D04
    void Init();
    // public System.Int32 get_Reuses()
    // Offset: 0x12A9E9C
    int get_Reuses();
    // public System.Net.IPEndPoint get_LocalEndPoint()
    // Offset: 0x12A9EA4
    System::Net::IPEndPoint* get_LocalEndPoint();
    // public System.Boolean get_IsSecure()
    // Offset: 0x12A9F5C
    bool get_IsSecure();
    // public System.Void set_Prefix(System.Net.ListenerPrefix value)
    // Offset: 0x12A9F64
    void set_Prefix(System::Net::ListenerPrefix* value);
    // private System.Void OnTimeout(System.Object unused)
    // Offset: 0x12A9F6C
    void OnTimeout(::Il2CppObject* unused);
    // public System.Void BeginReadRequest()
    // Offset: 0x12AA10C
    void BeginReadRequest();
    // public System.Net.RequestStream GetRequestStream(System.Boolean chunked, System.Int64 contentlength)
    // Offset: 0x12AA2C0
    System::Net::RequestStream* GetRequestStream(bool chunked, int64_t contentlength);
    // public System.Net.ResponseStream GetResponseStream()
    // Offset: 0x12AA52C
    System::Net::ResponseStream* GetResponseStream();
    // static private System.Void OnRead(System.IAsyncResult ares)
    // Offset: 0x12AA614
    static void OnRead(System::IAsyncResult* ares);
    // private System.Void OnReadInternal(System.IAsyncResult ares)
    // Offset: 0x12AA6EC
    void OnReadInternal(System::IAsyncResult* ares);
    // private System.Void RemoveConnection()
    // Offset: 0x12AB768
    void RemoveConnection();
    // private System.Boolean ProcessInput(System.IO.MemoryStream ms)
    // Offset: 0x12AAE64
    bool ProcessInput(System::IO::MemoryStream* ms);
    // private System.String ReadLine(System.Byte[] buffer, System.Int32 offset, System.Int32 len, ref System.Int32 used)
    // Offset: 0x12ABB08
    ::Il2CppString* ReadLine(::Array<uint8_t>* buffer, int offset, int len, int& used);
    // public System.Void SendError(System.String msg, System.Int32 status)
    // Offset: 0x12AAA2C
    void SendError(::Il2CppString* msg, int status);
    // public System.Void SendError()
    // Offset: 0x12AAE44
    void SendError();
    // private System.Void Unbind()
    // Offset: 0x12AA0CC
    void Unbind();
    // private System.Void CloseSocket()
    // Offset: 0x12A9F90
    void CloseSocket();
    // System.Void Close(System.Boolean force_close)
    // Offset: 0x12AABE4
    void Close(bool force_close);
    // static private System.Void .cctor()
    // Offset: 0x12AD3AC
    static void _cctor();
    // private System.Boolean <.ctor>b__24_0(System.Object t, System.Security.Cryptography.X509Certificates.X509Certificate c, System.Security.Cryptography.X509Certificates.X509Chain ch, System.Net.Security.SslPolicyErrors e)
    // Offset: 0x12AD42C
    bool $_ctor$b__24_0(::Il2CppObject* t, System::Security::Cryptography::X509Certificates::X509Certificate* c, System::Security::Cryptography::X509Certificates::X509Chain* ch, System::Net::Security::SslPolicyErrors e);
  }; // System.Net.HttpConnection
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Net::HttpConnection*, "System.Net", "HttpConnection");
DEFINE_IL2CPP_ARG_TYPE(System::Net::HttpConnection::InputState, "System.Net", "HttpConnection/InputState");
DEFINE_IL2CPP_ARG_TYPE(System::Net::HttpConnection::LineState, "System.Net", "HttpConnection/LineState");
#pragma pack(pop)
