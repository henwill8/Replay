// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: ManualResetEvent
  class ManualResetEvent;
  // Forward declaring type: WaitCallback
  class WaitCallback;
  // Forward declaring type: WaitHandle
  class WaitHandle;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: HttpListenerContext
  class HttpListenerContext;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Autogenerated type: System.Net.ListenerAsyncResult
  class ListenerAsyncResult : public ::Il2CppObject/*, public System::IAsyncResult*/ {
    public:
    // private System.Threading.ManualResetEvent handle
    // Offset: 0x10
    System::Threading::ManualResetEvent* handle;
    // private System.Boolean synch
    // Offset: 0x18
    bool synch;
    // private System.Boolean completed
    // Offset: 0x19
    bool completed;
    // private System.AsyncCallback cb
    // Offset: 0x20
    System::AsyncCallback* cb;
    // private System.Object state
    // Offset: 0x28
    ::Il2CppObject* state;
    // private System.Exception exception
    // Offset: 0x30
    System::Exception* exception;
    // private System.Net.HttpListenerContext context
    // Offset: 0x38
    System::Net::HttpListenerContext* context;
    // private System.Object locker
    // Offset: 0x40
    ::Il2CppObject* locker;
    // private System.Net.ListenerAsyncResult forward
    // Offset: 0x48
    System::Net::ListenerAsyncResult* forward;
    // System.Boolean EndCalled
    // Offset: 0x50
    bool EndCalled;
    // System.Boolean InGet
    // Offset: 0x51
    bool InGet;
    // Creating interface conversion operator: operator System::IAsyncResult
    operator System::IAsyncResult() noexcept {
      return *reinterpret_cast<System::IAsyncResult*>(this);
    }
    // Get static field: static private System.Threading.WaitCallback InvokeCB
    static System::Threading::WaitCallback* _get_InvokeCB();
    // Set static field: static private System.Threading.WaitCallback InvokeCB
    static void _set_InvokeCB(System::Threading::WaitCallback* value);
    // public System.Void .ctor(System.AsyncCallback cb, System.Object state)
    // Offset: 0x12AEE0C
    static ListenerAsyncResult* New_ctor(System::AsyncCallback* cb, ::Il2CppObject* state);
    // System.Void Complete(System.Exception exc)
    // Offset: 0x12AE9B8
    void Complete(System::Exception* exc);
    // static private System.Void InvokeCallback(System.Object o)
    // Offset: 0x12BE4D8
    static void InvokeCallback(::Il2CppObject* o);
    // System.Void Complete(System.Net.HttpListenerContext context)
    // Offset: 0x12AFDFC
    void Complete(System::Net::HttpListenerContext* context);
    // System.Void Complete(System.Net.HttpListenerContext context, System.Boolean synch)
    // Offset: 0x12AEF7C
    void Complete(System::Net::HttpListenerContext* context, bool synch);
    // System.Net.HttpListenerContext GetContext()
    // Offset: 0x12AF9F4
    System::Net::HttpListenerContext* GetContext();
    // static private System.Void .cctor()
    // Offset: 0x12BE654
    static void _cctor();
    // public System.Object get_AsyncState()
    // Offset: 0x12BE62C
    // Implemented from: System.IAsyncResult
    // Base method: System.Object IAsyncResult::get_AsyncState()
    ::Il2CppObject* get_AsyncState();
    // Creating proxy method: System_IAsyncResult_get_AsyncState
    // Maps to method: get_AsyncState
    ::Il2CppObject* System_IAsyncResult_get_AsyncState();
    // public System.Threading.WaitHandle get_AsyncWaitHandle()
    // Offset: 0x12AF8D8
    // Implemented from: System.IAsyncResult
    // Base method: System.Threading.WaitHandle IAsyncResult::get_AsyncWaitHandle()
    System::Threading::WaitHandle* get_AsyncWaitHandle();
    // Creating proxy method: System_IAsyncResult_get_AsyncWaitHandle
    // Maps to method: get_AsyncWaitHandle
    System::Threading::WaitHandle* System_IAsyncResult_get_AsyncWaitHandle();
    // public System.Boolean get_CompletedSynchronously()
    // Offset: 0x12BE640
    // Implemented from: System.IAsyncResult
    // Base method: System.Boolean IAsyncResult::get_CompletedSynchronously()
    bool get_CompletedSynchronously();
    // Creating proxy method: System_IAsyncResult_get_CompletedSynchronously
    // Maps to method: get_CompletedSynchronously
    bool System_IAsyncResult_get_CompletedSynchronously();
    // public System.Boolean get_IsCompleted()
    // Offset: 0x12AF814
    // Implemented from: System.IAsyncResult
    // Base method: System.Boolean IAsyncResult::get_IsCompleted()
    bool get_IsCompleted();
    // Creating proxy method: System_IAsyncResult_get_IsCompleted
    // Maps to method: get_IsCompleted
    bool System_IAsyncResult_get_IsCompleted();
  }; // System.Net.ListenerAsyncResult
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Net::ListenerAsyncResult*, "System.Net", "ListenerAsyncResult");
#pragma pack(pop)
