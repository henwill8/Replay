// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Collections.IEqualityComparer
#include "System/Collections/IEqualityComparer.hpp"
// Including type: System.Collections.IComparer
#include "System/Collections/IComparer.hpp"
// Completed includes
// Type namespace: System.Net
namespace System::Net {
  // Autogenerated type: System.Net.CaseInsensitiveAscii
  class CaseInsensitiveAscii : public ::Il2CppObject/*, public System::Collections::IEqualityComparer, public System::Collections::IComparer*/ {
    public:
    // Creating interface conversion operator: operator System::Collections::IEqualityComparer
    operator System::Collections::IEqualityComparer() noexcept {
      return *reinterpret_cast<System::Collections::IEqualityComparer*>(this);
    }
    // Creating interface conversion operator: operator System::Collections::IComparer
    operator System::Collections::IComparer() noexcept {
      return *reinterpret_cast<System::Collections::IComparer*>(this);
    }
    // Get static field: static readonly System.Net.CaseInsensitiveAscii StaticInstance
    static System::Net::CaseInsensitiveAscii* _get_StaticInstance();
    // Set static field: static readonly System.Net.CaseInsensitiveAscii StaticInstance
    static void _set_StaticInstance(System::Net::CaseInsensitiveAscii* value);
    // Get static field: static readonly System.Byte[] AsciiToLower
    static ::Array<uint8_t>* _get_AsciiToLower();
    // Set static field: static readonly System.Byte[] AsciiToLower
    static void _set_AsciiToLower(::Array<uint8_t>* value);
    // private System.Int32 FastGetHashCode(System.String myString)
    // Offset: 0x130B9B4
    int FastGetHashCode(::Il2CppString* myString);
    // static private System.Void .cctor()
    // Offset: 0x130BC50
    static void _cctor();
    // public System.Int32 GetHashCode(System.Object myObject)
    // Offset: 0x130B70C
    // Implemented from: System.Collections.IEqualityComparer
    // Base method: System.Int32 IEqualityComparer::GetHashCode(System.Object myObject)
    int GetHashCode(::Il2CppObject* myObject);
    // Creating proxy method: System_Collections_IEqualityComparer_GetHashCode
    // Maps to method: GetHashCode
    int System_Collections_IEqualityComparer_GetHashCode(::Il2CppObject* myObject);
    // public System.Int32 Compare(System.Object firstObject, System.Object secondObject)
    // Offset: 0x130B830
    // Implemented from: System.Collections.IComparer
    // Base method: System.Int32 IComparer::Compare(System.Object firstObject, System.Object secondObject)
    int Compare(::Il2CppObject* firstObject, ::Il2CppObject* secondObject);
    // Creating proxy method: System_Collections_IComparer_Compare
    // Maps to method: Compare
    int System_Collections_IComparer_Compare(::Il2CppObject* firstObject, ::Il2CppObject* secondObject);
    // public System.Boolean Equals(System.Object firstObject, System.Object secondObject)
    // Offset: 0x130BABC
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object firstObject, System.Object secondObject)
    // Base method: System.Boolean IEqualityComparer::Equals(System.Object firstObject, System.Object secondObject)
    bool Equals(::Il2CppObject* firstObject, ::Il2CppObject* secondObject);
    // Creating proxy method: System_Collections_IEqualityComparer_Equals
    // Maps to method: Equals
    bool System_Collections_IEqualityComparer_Equals(::Il2CppObject* firstObject, ::Il2CppObject* secondObject);
    // public System.Void .ctor()
    // Offset: 0x130BC48
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static CaseInsensitiveAscii* New_ctor();
  }; // System.Net.CaseInsensitiveAscii
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Net::CaseInsensitiveAscii*, "System.Net", "CaseInsensitiveAscii");
#pragma pack(pop)
