// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: CookieCollection
  class CookieCollection;
  // Forward declaring type: WebHeaderCollection
  class WebHeaderCollection;
  // Forward declaring type: HttpListenerContext
  class HttpListenerContext;
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Version
  class Version;
  // Forward declaring type: Uri
  class Uri;
}
// Forward declaring namespace: System::Collections::Specialized
namespace System::Collections::Specialized {
  // Forward declaring type: NameValueCollection
  class NameValueCollection;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Autogenerated type: System.Net.HttpListenerRequest
  class HttpListenerRequest : public ::Il2CppObject {
    public:
    // private System.String[] accept_types
    // Offset: 0x10
    ::Array<::Il2CppString*>* accept_types;
    // private System.Int64 content_length
    // Offset: 0x18
    int64_t content_length;
    // private System.Boolean cl_set
    // Offset: 0x20
    bool cl_set;
    // private System.Net.CookieCollection cookies
    // Offset: 0x28
    System::Net::CookieCollection* cookies;
    // private System.Net.WebHeaderCollection headers
    // Offset: 0x30
    System::Net::WebHeaderCollection* headers;
    // private System.String method
    // Offset: 0x38
    ::Il2CppString* method;
    // private System.IO.Stream input_stream
    // Offset: 0x40
    System::IO::Stream* input_stream;
    // private System.Version version
    // Offset: 0x48
    System::Version* version;
    // private System.Collections.Specialized.NameValueCollection query_string
    // Offset: 0x50
    System::Collections::Specialized::NameValueCollection* query_string;
    // private System.String raw_url
    // Offset: 0x58
    ::Il2CppString* raw_url;
    // private System.Uri url
    // Offset: 0x60
    System::Uri* url;
    // private System.Uri referrer
    // Offset: 0x68
    System::Uri* referrer;
    // private System.String[] user_languages
    // Offset: 0x70
    ::Array<::Il2CppString*>* user_languages;
    // private System.Net.HttpListenerContext context
    // Offset: 0x78
    System::Net::HttpListenerContext* context;
    // private System.Boolean is_chunked
    // Offset: 0x80
    bool is_chunked;
    // private System.Boolean ka_set
    // Offset: 0x81
    bool ka_set;
    // private System.Boolean keep_alive
    // Offset: 0x82
    bool keep_alive;
    // Get static field: static private System.Byte[] _100continue
    static ::Array<uint8_t>* _get__100continue();
    // Set static field: static private System.Byte[] _100continue
    static void _set__100continue(::Array<uint8_t>* value);
    // Get static field: static private System.Char[] separators
    static ::Array<::Il2CppChar>* _get_separators();
    // Set static field: static private System.Char[] separators
    static void _set_separators(::Array<::Il2CppChar>* value);
    // System.Void .ctor(System.Net.HttpListenerContext context)
    // Offset: 0x12B002C
    static HttpListenerRequest* New_ctor(System::Net::HttpListenerContext* context);
    // System.Void SetRequestLine(System.String req)
    // Offset: 0x12ABCA4
    void SetRequestLine(::Il2CppString* req);
    // private System.Void CreateQueryString(System.String query)
    // Offset: 0x12B0DC8
    void CreateQueryString(::Il2CppString* query);
    // static private System.Boolean MaybeUri(System.String s)
    // Offset: 0x12B1048
    static bool MaybeUri(::Il2CppString* s);
    // static private System.Boolean IsPredefinedScheme(System.String scheme)
    // Offset: 0x12B1100
    static bool IsPredefinedScheme(::Il2CppString* scheme);
    // System.Void FinishInitialization()
    // Offset: 0x12AB154
    void FinishInitialization();
    // static System.String Unquote(System.String str)
    // Offset: 0x12B13EC
    static ::Il2CppString* Unquote(::Il2CppString* str);
    // System.Void AddHeader(System.String header)
    // Offset: 0x12ABFE8
    void AddHeader(::Il2CppString* header);
    // System.Boolean FlushInput()
    // Offset: 0x12AD0C8
    bool FlushInput();
    // public System.Boolean get_HasEntityBody()
    // Offset: 0x12B145C
    bool get_HasEntityBody();
    // public System.Collections.Specialized.NameValueCollection get_Headers()
    // Offset: 0x12B154C
    System::Collections::Specialized::NameValueCollection* get_Headers();
    // public System.IO.Stream get_InputStream()
    // Offset: 0x12B1480
    System::IO::Stream* get_InputStream();
    // public System.Boolean get_IsSecureConnection()
    // Offset: 0x12B1308
    bool get_IsSecureConnection();
    // public System.Boolean get_KeepAlive()
    // Offset: 0x12ACF50
    bool get_KeepAlive();
    // public System.Net.IPEndPoint get_LocalEndPoint()
    // Offset: 0x12B1330
    System::Net::IPEndPoint* get_LocalEndPoint();
    // public System.Version get_ProtocolVersion()
    // Offset: 0x12B1554
    System::Version* get_ProtocolVersion();
    // public System.Uri get_Url()
    // Offset: 0x12B155C
    System::Uri* get_Url();
    // public System.String get_UserHostAddress()
    // Offset: 0x12B12E4
    ::Il2CppString* get_UserHostAddress();
    // public System.String get_UserHostName()
    // Offset: 0x12B1288
    ::Il2CppString* get_UserHostName();
    // static private System.Void .cctor()
    // Offset: 0x12B1564
    static void _cctor();
  }; // System.Net.HttpListenerRequest
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Net::HttpListenerRequest*, "System.Net", "HttpListenerRequest");
#pragma pack(pop)
