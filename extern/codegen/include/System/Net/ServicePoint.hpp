// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.DateTime
#include "System/DateTime.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
  // Forward declaring type: Version
  class Version;
  // Forward declaring type: EventHandler
  class EventHandler;
  // Forward declaring type: EventArgs
  class EventArgs;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPHostEntry
  class IPHostEntry;
  // Forward declaring type: WebConnectionGroup
  class WebConnectionGroup;
  // Forward declaring type: BindIPEndPoint
  class BindIPEndPoint;
  // Forward declaring type: HttpWebRequest
  class HttpWebRequest;
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: Timer
  class Timer;
}
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: Socket
  class Socket;
}
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509Certificate
  class X509Certificate;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Size: 0xA0
  #pragma pack(push, 1)
  // Autogenerated type: System.Net.ServicePoint
  // [] Offset: FFFFFFFF
  class ServicePoint : public ::Il2CppObject {
    public:
    // private readonly System.Uri uri
    // Size: 0x8
    // Offset: 0x10
    System::Uri* uri;
    // Field size check
    static_assert(sizeof(System::Uri*) == 0x8);
    // private System.Int32 connectionLimit
    // Size: 0x4
    // Offset: 0x18
    int connectionLimit;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 maxIdleTime
    // Size: 0x4
    // Offset: 0x1C
    int maxIdleTime;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 currentConnections
    // Size: 0x4
    // Offset: 0x20
    int currentConnections;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: currentConnections and: idleSince
    char __padding3[0x4] = {};
    // private System.DateTime idleSince
    // Size: 0x8
    // Offset: 0x28
    System::DateTime idleSince;
    // Field size check
    static_assert(sizeof(System::DateTime) == 0x8);
    // private System.DateTime lastDnsResolve
    // Size: 0x8
    // Offset: 0x30
    System::DateTime lastDnsResolve;
    // Field size check
    static_assert(sizeof(System::DateTime) == 0x8);
    // private System.Version protocolVersion
    // Size: 0x8
    // Offset: 0x38
    System::Version* protocolVersion;
    // Field size check
    static_assert(sizeof(System::Version*) == 0x8);
    // private System.Net.IPHostEntry host
    // Size: 0x8
    // Offset: 0x40
    System::Net::IPHostEntry* host;
    // Field size check
    static_assert(sizeof(System::Net::IPHostEntry*) == 0x8);
    // private System.Boolean usesProxy
    // Size: 0x1
    // Offset: 0x48
    bool usesProxy;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: usesProxy and: groups
    char __padding8[0x7] = {};
    // private System.Collections.Generic.Dictionary`2<System.String,System.Net.WebConnectionGroup> groups
    // Size: 0x8
    // Offset: 0x50
    System::Collections::Generic::Dictionary_2<::Il2CppString*, System::Net::WebConnectionGroup*>* groups;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<::Il2CppString*, System::Net::WebConnectionGroup*>*) == 0x8);
    // private System.Boolean sendContinue
    // Size: 0x1
    // Offset: 0x58
    bool sendContinue;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean useConnect
    // Size: 0x1
    // Offset: 0x59
    bool useConnect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useConnect and: hostE
    char __padding11[0x6] = {};
    // private System.Object hostE
    // Size: 0x8
    // Offset: 0x60
    ::Il2CppObject* hostE;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Boolean useNagle
    // Size: 0x1
    // Offset: 0x68
    bool useNagle;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useNagle and: endPointCallback
    char __padding13[0x7] = {};
    // private System.Net.BindIPEndPoint endPointCallback
    // Size: 0x8
    // Offset: 0x70
    System::Net::BindIPEndPoint* endPointCallback;
    // Field size check
    static_assert(sizeof(System::Net::BindIPEndPoint*) == 0x8);
    // private System.Boolean tcp_keepalive
    // Size: 0x1
    // Offset: 0x78
    bool tcp_keepalive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: tcp_keepalive and: tcp_keepalive_time
    char __padding15[0x3] = {};
    // private System.Int32 tcp_keepalive_time
    // Size: 0x4
    // Offset: 0x7C
    int tcp_keepalive_time;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 tcp_keepalive_interval
    // Size: 0x4
    // Offset: 0x80
    int tcp_keepalive_interval;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: tcp_keepalive_interval and: idleTimer
    char __padding17[0x4] = {};
    // private System.Threading.Timer idleTimer
    // Size: 0x8
    // Offset: 0x88
    System::Threading::Timer* idleTimer;
    // Field size check
    static_assert(sizeof(System::Threading::Timer*) == 0x8);
    // private System.Object m_ServerCertificateOrBytes
    // Size: 0x8
    // Offset: 0x90
    ::Il2CppObject* m_ServerCertificateOrBytes;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Object m_ClientCertificateOrBytes
    // Size: 0x8
    // Offset: 0x98
    ::Il2CppObject* m_ClientCertificateOrBytes;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // Creating value type constructor for type: ServicePoint
    ServicePoint(System::Uri* uri_ = {}, int connectionLimit_ = {}, int maxIdleTime_ = {}, int currentConnections_ = {}, System::DateTime idleSince_ = {}, System::DateTime lastDnsResolve_ = {}, System::Version* protocolVersion_ = {}, System::Net::IPHostEntry* host_ = {}, bool usesProxy_ = {}, System::Collections::Generic::Dictionary_2<::Il2CppString*, System::Net::WebConnectionGroup*>* groups_ = {}, bool sendContinue_ = {}, bool useConnect_ = {}, ::Il2CppObject* hostE_ = {}, bool useNagle_ = {}, System::Net::BindIPEndPoint* endPointCallback_ = {}, bool tcp_keepalive_ = {}, int tcp_keepalive_time_ = {}, int tcp_keepalive_interval_ = {}, System::Threading::Timer* idleTimer_ = {}, ::Il2CppObject* m_ServerCertificateOrBytes_ = {}, ::Il2CppObject* m_ClientCertificateOrBytes_ = {}) noexcept : uri{uri_}, connectionLimit{connectionLimit_}, maxIdleTime{maxIdleTime_}, currentConnections{currentConnections_}, idleSince{idleSince_}, lastDnsResolve{lastDnsResolve_}, protocolVersion{protocolVersion_}, host{host_}, usesProxy{usesProxy_}, groups{groups_}, sendContinue{sendContinue_}, useConnect{useConnect_}, hostE{hostE_}, useNagle{useNagle_}, endPointCallback{endPointCallback_}, tcp_keepalive{tcp_keepalive_}, tcp_keepalive_time{tcp_keepalive_time_}, tcp_keepalive_interval{tcp_keepalive_interval_}, idleTimer{idleTimer_}, m_ServerCertificateOrBytes{m_ServerCertificateOrBytes_}, m_ClientCertificateOrBytes{m_ClientCertificateOrBytes_} {}
    // System.Void .ctor(System.Uri uri, System.Int32 connectionLimit, System.Int32 maxIdleTime)
    // Offset: 0x135CCA4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ServicePoint* New_ctor(System::Uri* uri, int connectionLimit, int maxIdleTime) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Net::ServicePoint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ServicePoint*, creationType>(uri, connectionLimit, maxIdleTime)));
    }
    // public System.Uri get_Address()
    // Offset: 0x135CD88
    System::Uri* get_Address();
    // public System.Int32 get_ConnectionLimit()
    // Offset: 0x135CD90
    int get_ConnectionLimit();
    // public System.Version get_ProtocolVersion()
    // Offset: 0x135CD98
    System::Version* get_ProtocolVersion();
    // public System.Void set_Expect100Continue(System.Boolean value)
    // Offset: 0x135CDA0
    void set_Expect100Continue(bool value);
    // public System.Boolean get_UseNagleAlgorithm()
    // Offset: 0x135CDAC
    bool get_UseNagleAlgorithm();
    // public System.Void set_UseNagleAlgorithm(System.Boolean value)
    // Offset: 0x135CDB4
    void set_UseNagleAlgorithm(bool value);
    // System.Boolean get_SendContinue()
    // Offset: 0x135CDC0
    bool get_SendContinue();
    // System.Void set_SendContinue(System.Boolean value)
    // Offset: 0x135CEBC
    void set_SendContinue(bool value);
    // public System.Void SetTcpKeepAlive(System.Boolean enabled, System.Int32 keepAliveTime, System.Int32 keepAliveInterval)
    // Offset: 0x135CEC8
    void SetTcpKeepAlive(bool enabled, int keepAliveTime, int keepAliveInterval);
    // System.Void KeepAliveSetup(System.Net.Sockets.Socket socket)
    // Offset: 0x135CFA8
    void KeepAliveSetup(System::Net::Sockets::Socket* socket);
    // static private System.Void PutBytes(System.Byte[] bytes, System.UInt32 v, System.Int32 offset)
    // Offset: 0x135D06C
    static void PutBytes(::Array<uint8_t>* bytes, uint v, int offset);
    // System.Boolean get_UsesProxy()
    // Offset: 0x135D1CC
    bool get_UsesProxy();
    // System.Void set_UsesProxy(System.Boolean value)
    // Offset: 0x135D1D4
    void set_UsesProxy(bool value);
    // System.Boolean get_UseConnect()
    // Offset: 0x135D1E0
    bool get_UseConnect();
    // System.Void set_UseConnect(System.Boolean value)
    // Offset: 0x135D1E8
    void set_UseConnect(bool value);
    // private System.Net.WebConnectionGroup GetConnectionGroup(System.String name)
    // Offset: 0x135D1F4
    System::Net::WebConnectionGroup* GetConnectionGroup(::Il2CppString* name);
    // private System.Void RemoveConnectionGroup(System.Net.WebConnectionGroup group)
    // Offset: 0x135D354
    void RemoveConnectionGroup(System::Net::WebConnectionGroup* group);
    // private System.Boolean CheckAvailableForRecycling(out System.DateTime outIdleSince)
    // Offset: 0x135D40C
    bool CheckAvailableForRecycling(System::DateTime& outIdleSince);
    // private System.Void IdleTimerCallback(System.Object obj)
    // Offset: 0x135D98C
    void IdleTimerCallback(::Il2CppObject* obj);
    // private System.Boolean get_HasTimedOut()
    // Offset: 0x135D9B0
    bool get_HasTimedOut();
    // System.Net.IPHostEntry get_HostEntry()
    // Offset: 0x135DAFC
    System::Net::IPHostEntry* get_HostEntry();
    // System.Void SetVersion(System.Version version)
    // Offset: 0x135DEC0
    void SetVersion(System::Version* version);
    // System.EventHandler SendRequest(System.Net.HttpWebRequest request, System.String groupName)
    // Offset: 0x135DEC8
    System::EventHandler* SendRequest(System::Net::HttpWebRequest* request, ::Il2CppString* groupName);
    // public System.Boolean CloseConnectionGroup(System.String connectionGroupName)
    // Offset: 0x135E078
    bool CloseConnectionGroup(::Il2CppString* connectionGroupName);
    // System.Void UpdateServerCertificate(System.Security.Cryptography.X509Certificates.X509Certificate certificate)
    // Offset: 0x135E154
    void UpdateServerCertificate(System::Security::Cryptography::X509Certificates::X509Certificate* certificate);
    // System.Void UpdateClientCertificate(System.Security.Cryptography.X509Certificates.X509Certificate certificate)
    // Offset: 0x135E19C
    void UpdateClientCertificate(System::Security::Cryptography::X509Certificates::X509Certificate* certificate);
    // System.Boolean CallEndPointDelegate(System.Net.Sockets.Socket sock, System.Net.IPEndPoint remote)
    // Offset: 0x135E1E4
    bool CallEndPointDelegate(System::Net::Sockets::Socket* sock, System::Net::IPEndPoint* remote);
    // private System.Void <GetConnectionGroup>b__66_0(System.Object s, System.EventArgs e)
    // Offset: 0x135E510
    void $GetConnectionGroup$b__66_0(::Il2CppObject* s, System::EventArgs* e);
  }; // System.Net.ServicePoint
  #pragma pack(pop)
  static check_size<sizeof(ServicePoint), 152 + sizeof(::Il2CppObject*)> __System_Net_ServicePointSizeCheck;
  static_assert(sizeof(ServicePoint) == 0xA0);
}
DEFINE_IL2CPP_ARG_TYPE(System::Net::ServicePoint*, "System.Net", "ServicePoint");
