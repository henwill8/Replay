// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
  // Forward declaring type: Version
  class Version;
  // Forward declaring type: EventHandler
  class EventHandler;
  // Forward declaring type: EventArgs
  class EventArgs;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPHostEntry
  class IPHostEntry;
  // Forward declaring type: WebConnectionGroup
  class WebConnectionGroup;
  // Forward declaring type: BindIPEndPoint
  class BindIPEndPoint;
  // Forward declaring type: HttpWebRequest
  class HttpWebRequest;
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: Timer
  class Timer;
}
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: Socket
  class Socket;
}
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509Certificate
  class X509Certificate;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Autogenerated type: System.Net.ServicePoint
  class ServicePoint : public ::Il2CppObject {
    public:
    // private readonly System.Uri uri
    // Offset: 0x10
    System::Uri* uri;
    // private System.Int32 connectionLimit
    // Offset: 0x18
    int connectionLimit;
    // private System.Int32 maxIdleTime
    // Offset: 0x1C
    int maxIdleTime;
    // private System.Int32 currentConnections
    // Offset: 0x20
    int currentConnections;
    // private System.DateTime idleSince
    // Offset: 0x28
    System::DateTime idleSince;
    // private System.DateTime lastDnsResolve
    // Offset: 0x30
    System::DateTime lastDnsResolve;
    // private System.Version protocolVersion
    // Offset: 0x38
    System::Version* protocolVersion;
    // private System.Net.IPHostEntry host
    // Offset: 0x40
    System::Net::IPHostEntry* host;
    // private System.Boolean usesProxy
    // Offset: 0x48
    bool usesProxy;
    // private System.Collections.Generic.Dictionary`2<System.String,System.Net.WebConnectionGroup> groups
    // Offset: 0x50
    System::Collections::Generic::Dictionary_2<::Il2CppString*, System::Net::WebConnectionGroup*>* groups;
    // private System.Boolean sendContinue
    // Offset: 0x58
    bool sendContinue;
    // private System.Boolean useConnect
    // Offset: 0x59
    bool useConnect;
    // private System.Object hostE
    // Offset: 0x60
    ::Il2CppObject* hostE;
    // private System.Boolean useNagle
    // Offset: 0x68
    bool useNagle;
    // private System.Net.BindIPEndPoint endPointCallback
    // Offset: 0x70
    System::Net::BindIPEndPoint* endPointCallback;
    // private System.Boolean tcp_keepalive
    // Offset: 0x78
    bool tcp_keepalive;
    // private System.Int32 tcp_keepalive_time
    // Offset: 0x7C
    int tcp_keepalive_time;
    // private System.Int32 tcp_keepalive_interval
    // Offset: 0x80
    int tcp_keepalive_interval;
    // private System.Threading.Timer idleTimer
    // Offset: 0x88
    System::Threading::Timer* idleTimer;
    // private System.Object m_ServerCertificateOrBytes
    // Offset: 0x90
    ::Il2CppObject* m_ServerCertificateOrBytes;
    // private System.Object m_ClientCertificateOrBytes
    // Offset: 0x98
    ::Il2CppObject* m_ClientCertificateOrBytes;
    // System.Void .ctor(System.Uri uri, System.Int32 connectionLimit, System.Int32 maxIdleTime)
    // Offset: 0x11A2E58
    static ServicePoint* New_ctor(System::Uri* uri, int connectionLimit, int maxIdleTime);
    // public System.Uri get_Address()
    // Offset: 0x11A2F3C
    System::Uri* get_Address();
    // public System.Int32 get_ConnectionLimit()
    // Offset: 0x11A2F44
    int get_ConnectionLimit();
    // public System.Version get_ProtocolVersion()
    // Offset: 0x11A2F4C
    System::Version* get_ProtocolVersion();
    // public System.Void set_Expect100Continue(System.Boolean value)
    // Offset: 0x11A2F54
    void set_Expect100Continue(bool value);
    // public System.Boolean get_UseNagleAlgorithm()
    // Offset: 0x11A2F60
    bool get_UseNagleAlgorithm();
    // public System.Void set_UseNagleAlgorithm(System.Boolean value)
    // Offset: 0x11A2F68
    void set_UseNagleAlgorithm(bool value);
    // System.Boolean get_SendContinue()
    // Offset: 0x11A2F74
    bool get_SendContinue();
    // System.Void set_SendContinue(System.Boolean value)
    // Offset: 0x11A3070
    void set_SendContinue(bool value);
    // public System.Void SetTcpKeepAlive(System.Boolean enabled, System.Int32 keepAliveTime, System.Int32 keepAliveInterval)
    // Offset: 0x11A307C
    void SetTcpKeepAlive(bool enabled, int keepAliveTime, int keepAliveInterval);
    // System.Void KeepAliveSetup(System.Net.Sockets.Socket socket)
    // Offset: 0x11A315C
    void KeepAliveSetup(System::Net::Sockets::Socket* socket);
    // static private System.Void PutBytes(System.Byte[] bytes, System.UInt32 v, System.Int32 offset)
    // Offset: 0x11A3220
    static void PutBytes(::Array<uint8_t>* bytes, uint v, int offset);
    // System.Boolean get_UsesProxy()
    // Offset: 0x11A3380
    bool get_UsesProxy();
    // System.Void set_UsesProxy(System.Boolean value)
    // Offset: 0x11A3388
    void set_UsesProxy(bool value);
    // System.Boolean get_UseConnect()
    // Offset: 0x11A3394
    bool get_UseConnect();
    // System.Void set_UseConnect(System.Boolean value)
    // Offset: 0x11A339C
    void set_UseConnect(bool value);
    // private System.Net.WebConnectionGroup GetConnectionGroup(System.String name)
    // Offset: 0x11A33A8
    System::Net::WebConnectionGroup* GetConnectionGroup(::Il2CppString* name);
    // private System.Void RemoveConnectionGroup(System.Net.WebConnectionGroup group)
    // Offset: 0x11A3508
    void RemoveConnectionGroup(System::Net::WebConnectionGroup* group);
    // private System.Boolean CheckAvailableForRecycling(out System.DateTime outIdleSince)
    // Offset: 0x11A35C0
    bool CheckAvailableForRecycling(System::DateTime& outIdleSince);
    // private System.Void IdleTimerCallback(System.Object obj)
    // Offset: 0x11A3B40
    void IdleTimerCallback(::Il2CppObject* obj);
    // private System.Boolean get_HasTimedOut()
    // Offset: 0x11A3B64
    bool get_HasTimedOut();
    // System.Net.IPHostEntry get_HostEntry()
    // Offset: 0x11A3CB0
    System::Net::IPHostEntry* get_HostEntry();
    // System.Void SetVersion(System.Version version)
    // Offset: 0x11A4074
    void SetVersion(System::Version* version);
    // System.EventHandler SendRequest(System.Net.HttpWebRequest request, System.String groupName)
    // Offset: 0x11A407C
    System::EventHandler* SendRequest(System::Net::HttpWebRequest* request, ::Il2CppString* groupName);
    // public System.Boolean CloseConnectionGroup(System.String connectionGroupName)
    // Offset: 0x11A422C
    bool CloseConnectionGroup(::Il2CppString* connectionGroupName);
    // System.Void UpdateServerCertificate(System.Security.Cryptography.X509Certificates.X509Certificate certificate)
    // Offset: 0x11A4308
    void UpdateServerCertificate(System::Security::Cryptography::X509Certificates::X509Certificate* certificate);
    // System.Void UpdateClientCertificate(System.Security.Cryptography.X509Certificates.X509Certificate certificate)
    // Offset: 0x11A4350
    void UpdateClientCertificate(System::Security::Cryptography::X509Certificates::X509Certificate* certificate);
    // System.Boolean CallEndPointDelegate(System.Net.Sockets.Socket sock, System.Net.IPEndPoint remote)
    // Offset: 0x11A4398
    bool CallEndPointDelegate(System::Net::Sockets::Socket* sock, System::Net::IPEndPoint* remote);
    // private System.Void <GetConnectionGroup>b__66_0(System.Object s, System.EventArgs e)
    // Offset: 0x11A46C4
    void $GetConnectionGroup$b__66_0(::Il2CppObject* s, System::EventArgs* e);
  }; // System.Net.ServicePoint
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Net::ServicePoint*, "System.Net", "ServicePoint");
#pragma pack(pop)
