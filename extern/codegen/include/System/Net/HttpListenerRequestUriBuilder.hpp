// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
  // Forward declaring type: Encoding
  class Encoding;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Autogenerated type: System.Net.HttpListenerRequestUriBuilder
  class HttpListenerRequestUriBuilder : public ::Il2CppObject {
    public:
    // Nested type: System::Net::HttpListenerRequestUriBuilder::ParsingResult
    struct ParsingResult;
    // Nested type: System::Net::HttpListenerRequestUriBuilder::EncodingType
    struct EncodingType;
    // private readonly System.String rawUri
    // Offset: 0x10
    ::Il2CppString* rawUri;
    // private readonly System.String cookedUriScheme
    // Offset: 0x18
    ::Il2CppString* cookedUriScheme;
    // private readonly System.String cookedUriHost
    // Offset: 0x20
    ::Il2CppString* cookedUriHost;
    // private readonly System.String cookedUriPath
    // Offset: 0x28
    ::Il2CppString* cookedUriPath;
    // private readonly System.String cookedUriQuery
    // Offset: 0x30
    ::Il2CppString* cookedUriQuery;
    // private System.Text.StringBuilder requestUriString
    // Offset: 0x38
    System::Text::StringBuilder* requestUriString;
    // private System.Collections.Generic.List`1<System.Byte> rawOctets
    // Offset: 0x40
    System::Collections::Generic::List_1<uint8_t>* rawOctets;
    // private System.String rawPath
    // Offset: 0x48
    ::Il2CppString* rawPath;
    // private System.Uri requestUri
    // Offset: 0x50
    System::Uri* requestUri;
    // Get static field: static private readonly System.Boolean useCookedRequestUrl
    static bool _get_useCookedRequestUrl();
    // Set static field: static private readonly System.Boolean useCookedRequestUrl
    static void _set_useCookedRequestUrl(bool value);
    // Get static field: static private readonly System.Text.Encoding utf8Encoding
    static System::Text::Encoding* _get_utf8Encoding();
    // Set static field: static private readonly System.Text.Encoding utf8Encoding
    static void _set_utf8Encoding(System::Text::Encoding* value);
    // Get static field: static private readonly System.Text.Encoding ansiEncoding
    static System::Text::Encoding* _get_ansiEncoding();
    // Set static field: static private readonly System.Text.Encoding ansiEncoding
    static void _set_ansiEncoding(System::Text::Encoding* value);
    // static private System.Void .cctor()
    // Offset: 0x12B1630
    static void _cctor();
    // private System.Void .ctor(System.String rawUri, System.String cookedUriScheme, System.String cookedUriHost, System.String cookedUriPath, System.String cookedUriQuery)
    // Offset: 0x12B1794
    static HttpListenerRequestUriBuilder* New_ctor(::Il2CppString* rawUri, ::Il2CppString* cookedUriScheme, ::Il2CppString* cookedUriHost, ::Il2CppString* cookedUriPath, ::Il2CppString* cookedUriQuery);
    // static public System.Uri GetRequestUri(System.String rawUri, System.String cookedUriScheme, System.String cookedUriHost, System.String cookedUriPath, System.String cookedUriQuery)
    // Offset: 0x12B1354
    static System::Uri* GetRequestUri(::Il2CppString* rawUri, ::Il2CppString* cookedUriScheme, ::Il2CppString* cookedUriHost, ::Il2CppString* cookedUriPath, ::Il2CppString* cookedUriQuery);
    // private System.Uri Build()
    // Offset: 0x12B1928
    System::Uri* Build();
    // private System.Void BuildRequestUriUsingCookedPath()
    // Offset: 0x12B1A40
    void BuildRequestUriUsingCookedPath();
    // private System.Void BuildRequestUriUsingRawPath()
    // Offset: 0x12B1D38
    void BuildRequestUriUsingRawPath();
    // static private System.Text.Encoding GetEncoding(System.Net.HttpListenerRequestUriBuilder/EncodingType type)
    // Offset: 0x12B22CC
    static System::Text::Encoding* GetEncoding(System::Net::HttpListenerRequestUriBuilder::EncodingType type);
    // private System.Net.HttpListenerRequestUriBuilder/ParsingResult BuildRequestUriUsingRawPath(System.Text.Encoding encoding)
    // Offset: 0x12B2364
    System::Net::HttpListenerRequestUriBuilder::ParsingResult BuildRequestUriUsingRawPath(System::Text::Encoding* encoding);
    // private System.Net.HttpListenerRequestUriBuilder/ParsingResult ParseRawPath(System.Text.Encoding encoding)
    // Offset: 0x12B25E4
    System::Net::HttpListenerRequestUriBuilder::ParsingResult ParseRawPath(System::Text::Encoding* encoding);
    // private System.Boolean AppendUnicodeCodePointValuePercentEncoded(System.String codePoint)
    // Offset: 0x12B2AC0
    bool AppendUnicodeCodePointValuePercentEncoded(::Il2CppString* codePoint);
    // private System.Boolean AddPercentEncodedOctetToRawOctetsList(System.Text.Encoding encoding, System.String escapedCharacter)
    // Offset: 0x12B2D9C
    bool AddPercentEncodedOctetToRawOctetsList(System::Text::Encoding* encoding, ::Il2CppString* escapedCharacter);
    // private System.Boolean EmptyDecodeAndAppendRawOctetsList(System.Text.Encoding encoding)
    // Offset: 0x12B2738
    bool EmptyDecodeAndAppendRawOctetsList(System::Text::Encoding* encoding);
    // static private System.Void AppendOctetsPercentEncoded(System.Text.StringBuilder target, System.Collections.Generic.IEnumerable`1<System.Byte> octets)
    // Offset: 0x12B2EC4
    static void AppendOctetsPercentEncoded(System::Text::StringBuilder* target, System::Collections::Generic::IEnumerable_1<uint8_t>* octets);
    // static private System.String GetOctetsAsString(System.Collections.Generic.IEnumerable`1<System.Byte> octets)
    // Offset: 0x12B31B4
    static ::Il2CppString* GetOctetsAsString(System::Collections::Generic::IEnumerable_1<uint8_t>* octets);
    // static private System.String GetPath(System.String uriString)
    // Offset: 0x12B2170
    static ::Il2CppString* GetPath(::Il2CppString* uriString);
    // static private System.String AddSlashToAsteriskOnlyPath(System.String path)
    // Offset: 0x12B18A4
    static ::Il2CppString* AddSlashToAsteriskOnlyPath(::Il2CppString* path);
    // private System.Void LogWarning(System.String methodName, System.String message, params System.Object[] args)
    // Offset: 0x12B2134
    void LogWarning(::Il2CppString* methodName, ::Il2CppString* message, ::Array<::Il2CppObject*>* args);
    // Creating initializer_list -> params proxy for: System.Void LogWarning(System.String methodName, System.String message, params System.Object[] args)
    void LogWarning(::Il2CppString* methodName, ::Il2CppString* message, std::initializer_list<::Il2CppObject*> args);
    // Creating TArgs -> initializer_list proxy for: System.Void LogWarning(System.String methodName, System.String message, params System.Object[] args)
    template<class ...TParams>
    void LogWarning(::Il2CppString* methodName, ::Il2CppString* message, TParams&&... args) {
      LogWarning(methodName, message, {args...});
    }
  }; // System.Net.HttpListenerRequestUriBuilder
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Net::HttpListenerRequestUriBuilder*, "System.Net", "HttpListenerRequestUriBuilder");
#pragma pack(pop)
