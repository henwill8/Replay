// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: HttpListener
  class HttpListener;
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
  // Forward declaring type: HttpConnection
  class HttpConnection;
  // Forward declaring type: IPAddress
  class IPAddress;
  // Forward declaring type: HttpListenerContext
  class HttpListenerContext;
  // Forward declaring type: ListenerPrefix
  class ListenerPrefix;
}
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: Socket
  class Socket;
  // Forward declaring type: SocketAsyncEventArgs
  class SocketAsyncEventArgs;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Forward declaring namespace: System::Security::Cryptography::X509Certificates
namespace System::Security::Cryptography::X509Certificates {
  // Forward declaring type: X509Certificate
  class X509Certificate;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Uri
  class Uri;
}
// Completed forward declares
// Type namespace: System.Net
namespace System::Net {
  // Autogenerated type: System.Net.EndPointListener
  class EndPointListener : public ::Il2CppObject {
    public:
    // private System.Net.HttpListener listener
    // Offset: 0x10
    System::Net::HttpListener* listener;
    // private System.Net.IPEndPoint endpoint
    // Offset: 0x18
    System::Net::IPEndPoint* endpoint;
    // private System.Net.Sockets.Socket sock
    // Offset: 0x20
    System::Net::Sockets::Socket* sock;
    // private System.Collections.Hashtable prefixes
    // Offset: 0x28
    System::Collections::Hashtable* prefixes;
    // private System.Collections.ArrayList unhandled
    // Offset: 0x30
    System::Collections::ArrayList* unhandled;
    // private System.Collections.ArrayList all
    // Offset: 0x38
    System::Collections::ArrayList* all;
    // private System.Security.Cryptography.X509Certificates.X509Certificate cert
    // Offset: 0x40
    System::Security::Cryptography::X509Certificates::X509Certificate* cert;
    // private System.Boolean secure
    // Offset: 0x48
    bool secure;
    // private System.Collections.Generic.Dictionary`2<System.Net.HttpConnection,System.Net.HttpConnection> unregistered
    // Offset: 0x50
    System::Collections::Generic::Dictionary_2<System::Net::HttpConnection*, System::Net::HttpConnection*>* unregistered;
    // public System.Void .ctor(System.Net.HttpListener listener, System.Net.IPAddress addr, System.Int32 port, System.Boolean secure)
    // Offset: 0x131826C
    static EndPointListener* New_ctor(System::Net::HttpListener* listener, System::Net::IPAddress* addr, int port, bool secure);
    // System.Net.HttpListener get_Listener()
    // Offset: 0x1318654
    System::Net::HttpListener* get_Listener();
    // static private System.Void Accept(System.Net.Sockets.Socket socket, System.Net.Sockets.SocketAsyncEventArgs e, ref System.Net.Sockets.Socket accepted)
    // Offset: 0x13184B8
    static void Accept(System::Net::Sockets::Socket* socket, System::Net::Sockets::SocketAsyncEventArgs* e, System::Net::Sockets::Socket*& accepted);
    // static private System.Void ProcessAccept(System.Net.Sockets.SocketAsyncEventArgs args)
    // Offset: 0x131865C
    static void ProcessAccept(System::Net::Sockets::SocketAsyncEventArgs* args);
    // static private System.Void OnAccept(System.Object sender, System.Net.Sockets.SocketAsyncEventArgs e)
    // Offset: 0x13188A0
    static void OnAccept(::Il2CppObject* sender, System::Net::Sockets::SocketAsyncEventArgs* e);
    // System.Void RemoveConnection(System.Net.HttpConnection conn)
    // Offset: 0x13188A8
    void RemoveConnection(System::Net::HttpConnection* conn);
    // public System.Boolean BindContext(System.Net.HttpListenerContext context)
    // Offset: 0x1318984
    bool BindContext(System::Net::HttpListenerContext* context);
    // public System.Void UnbindContext(System.Net.HttpListenerContext context)
    // Offset: 0x1318F88
    void UnbindContext(System::Net::HttpListenerContext* context);
    // private System.Net.HttpListener SearchListener(System.Uri uri, out System.Net.ListenerPrefix prefix)
    // Offset: 0x13189EC
    System::Net::HttpListener* SearchListener(System::Uri* uri, System::Net::ListenerPrefix*& prefix);
    // private System.Net.HttpListener MatchFromList(System.String host, System.String path, System.Collections.ArrayList list, out System.Net.ListenerPrefix prefix)
    // Offset: 0x1318FB4
    System::Net::HttpListener* MatchFromList(::Il2CppString* host, ::Il2CppString* path, System::Collections::ArrayList* list, System::Net::ListenerPrefix*& prefix);
    // private System.Void AddSpecial(System.Collections.ArrayList coll, System.Net.ListenerPrefix prefix)
    // Offset: 0x1319288
    void AddSpecial(System::Collections::ArrayList* coll, System::Net::ListenerPrefix* prefix);
    // private System.Boolean RemoveSpecial(System.Collections.ArrayList coll, System.Net.ListenerPrefix prefix)
    // Offset: 0x131954C
    bool RemoveSpecial(System::Collections::ArrayList* coll, System::Net::ListenerPrefix* prefix);
    // private System.Void CheckIfRemove()
    // Offset: 0x131964C
    void CheckIfRemove();
    // public System.Void Close()
    // Offset: 0x131996C
    void Close();
    // public System.Void AddPrefix(System.Net.ListenerPrefix prefix, System.Net.HttpListener listener)
    // Offset: 0x1319BCC
    void AddPrefix(System::Net::ListenerPrefix* prefix, System::Net::HttpListener* listener);
    // public System.Void RemovePrefix(System.Net.ListenerPrefix prefix, System.Net.HttpListener listener)
    // Offset: 0x1319F28
    void RemovePrefix(System::Net::ListenerPrefix* prefix, System::Net::HttpListener* listener);
  }; // System.Net.EndPointListener
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Net::EndPointListener*, "System.Net", "EndPointListener");
#pragma pack(pop)
