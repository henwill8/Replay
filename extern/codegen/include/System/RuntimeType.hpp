// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
// Including type: System.Reflection.TypeInfo
#include "System/Reflection/TypeInfo.hpp"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: MonoTypeInfo
  class MonoTypeInfo;
  // Skipping declaration: Type because it is already included!
  // Forward declaring type: TypeNameKind
  struct TypeNameKind;
  // Skipping declaration: IntPtr because it is already included!
  // Forward declaring type: TypeCode
  struct TypeCode;
  // Skipping declaration: RuntimeTypeHandle because it is already included!
  // Forward declaring type: Array
  class Array;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: RuntimeConstructorInfo
  class RuntimeConstructorInfo;
  // Skipping declaration: MemberInfo because it is already included!
  // Forward declaring type: RuntimeMethodInfo
  class RuntimeMethodInfo;
  // Forward declaring type: CallingConventions
  struct CallingConventions;
  // Forward declaring type: MethodBase
  class MethodBase;
  // Forward declaring type: MethodInfo
  class MethodInfo;
  // Forward declaring type: ConstructorInfo
  class ConstructorInfo;
  // Forward declaring type: PropertyInfo
  class PropertyInfo;
  // Forward declaring type: EventInfo
  class EventInfo;
  // Forward declaring type: FieldInfo
  class FieldInfo;
  // Forward declaring type: RuntimeModule
  class RuntimeModule;
  // Forward declaring type: RuntimeAssembly
  class RuntimeAssembly;
  // Forward declaring type: Binder
  class Binder;
  // Forward declaring type: MonoCMethod
  class MonoCMethod;
  // Forward declaring type: RuntimePropertyInfo
  class RuntimePropertyInfo;
  // Forward declaring type: GenericParameterAttributes
  struct GenericParameterAttributes;
  // Forward declaring type: RuntimeFieldInfo
  class RuntimeFieldInfo;
  // Forward declaring type: RuntimeEventInfo
  class RuntimeEventInfo;
  // Forward declaring type: ParameterModifier
  struct ParameterModifier;
  // Forward declaring type: MemberTypes
  struct MemberTypes;
  // Forward declaring type: Module
  class Module;
  // Forward declaring type: Assembly
  class Assembly;
  // Forward declaring type: TypeAttributes
  struct TypeAttributes;
  // Forward declaring type: CustomAttributeData
  class CustomAttributeData;
}
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CultureInfo
  class CultureInfo;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: StackCrawlMark
  struct StackCrawlMark;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
  // Forward declaring type: StreamingContext
  struct StreamingContext;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Autogenerated type: System.RuntimeType
  class RuntimeType : public System::Reflection::TypeInfo, public System::Runtime::Serialization::ISerializable, public System::ICloneable {
    public:
    // Nested type: System::RuntimeType::MemberListType
    struct MemberListType;
    // Nested type: System::RuntimeType::ListBuilder_1<T>
    template<typename T>
    struct ListBuilder_1;
    // private System.MonoTypeInfo type_info
    // Offset: 0x18
    System::MonoTypeInfo* type_info;
    // System.Object GenericCache
    // Offset: 0x20
    ::Il2CppObject* GenericCache;
    // private System.Reflection.RuntimeConstructorInfo m_serializationCtor
    // Offset: 0x28
    System::Reflection::RuntimeConstructorInfo* m_serializationCtor;
    // Deleting conversion operator: operator System::RuntimeTypeHandle
    constexpr operator System::RuntimeTypeHandle() const noexcept = delete;
    // Get static field: static readonly System.RuntimeType ValueType
    static System::RuntimeType* _get_ValueType();
    // Set static field: static readonly System.RuntimeType ValueType
    static void _set_ValueType(System::RuntimeType* value);
    // Get static field: static readonly System.RuntimeType EnumType
    static System::RuntimeType* _get_EnumType();
    // Set static field: static readonly System.RuntimeType EnumType
    static void _set_EnumType(System::RuntimeType* value);
    // Get static field: static private readonly System.RuntimeType ObjectType
    static System::RuntimeType* _get_ObjectType();
    // Set static field: static private readonly System.RuntimeType ObjectType
    static void _set_ObjectType(System::RuntimeType* value);
    // Get static field: static private readonly System.RuntimeType StringType
    static System::RuntimeType* _get_StringType();
    // Set static field: static private readonly System.RuntimeType StringType
    static void _set_StringType(System::RuntimeType* value);
    // Get static field: static private readonly System.RuntimeType DelegateType
    static System::RuntimeType* _get_DelegateType();
    // Set static field: static private readonly System.RuntimeType DelegateType
    static void _set_DelegateType(System::RuntimeType* value);
    // Get static field: static private System.Type[] s_SICtorParamTypes
    static ::Array<System::Type*>* _get_s_SICtorParamTypes();
    // Set static field: static private System.Type[] s_SICtorParamTypes
    static void _set_s_SICtorParamTypes(::Array<System::Type*>* value);
    // static field const value: static private System.Reflection.BindingFlags MemberBindingMask
    static constexpr const int MemberBindingMask = 255;
    // Get static field: static private System.Reflection.BindingFlags MemberBindingMask
    static System::Reflection::BindingFlags _get_MemberBindingMask();
    // Set static field: static private System.Reflection.BindingFlags MemberBindingMask
    static void _set_MemberBindingMask(System::Reflection::BindingFlags value);
    // static field const value: static private System.Reflection.BindingFlags InvocationMask
    static constexpr const int InvocationMask = 65280;
    // Get static field: static private System.Reflection.BindingFlags InvocationMask
    static System::Reflection::BindingFlags _get_InvocationMask();
    // Set static field: static private System.Reflection.BindingFlags InvocationMask
    static void _set_InvocationMask(System::Reflection::BindingFlags value);
    // static field const value: static private System.Reflection.BindingFlags BinderNonCreateInstance
    static constexpr const int BinderNonCreateInstance = 15616;
    // Get static field: static private System.Reflection.BindingFlags BinderNonCreateInstance
    static System::Reflection::BindingFlags _get_BinderNonCreateInstance();
    // Set static field: static private System.Reflection.BindingFlags BinderNonCreateInstance
    static void _set_BinderNonCreateInstance(System::Reflection::BindingFlags value);
    // static field const value: static private System.Reflection.BindingFlags BinderGetSetProperty
    static constexpr const int BinderGetSetProperty = 12288;
    // Get static field: static private System.Reflection.BindingFlags BinderGetSetProperty
    static System::Reflection::BindingFlags _get_BinderGetSetProperty();
    // Set static field: static private System.Reflection.BindingFlags BinderGetSetProperty
    static void _set_BinderGetSetProperty(System::Reflection::BindingFlags value);
    // static field const value: static private System.Reflection.BindingFlags BinderSetInvokeProperty
    static constexpr const int BinderSetInvokeProperty = 8448;
    // Get static field: static private System.Reflection.BindingFlags BinderSetInvokeProperty
    static System::Reflection::BindingFlags _get_BinderSetInvokeProperty();
    // Set static field: static private System.Reflection.BindingFlags BinderSetInvokeProperty
    static void _set_BinderSetInvokeProperty(System::Reflection::BindingFlags value);
    // static field const value: static private System.Reflection.BindingFlags BinderGetSetField
    static constexpr const int BinderGetSetField = 3072;
    // Get static field: static private System.Reflection.BindingFlags BinderGetSetField
    static System::Reflection::BindingFlags _get_BinderGetSetField();
    // Set static field: static private System.Reflection.BindingFlags BinderGetSetField
    static void _set_BinderGetSetField(System::Reflection::BindingFlags value);
    // static field const value: static private System.Reflection.BindingFlags BinderSetInvokeField
    static constexpr const int BinderSetInvokeField = 2304;
    // Get static field: static private System.Reflection.BindingFlags BinderSetInvokeField
    static System::Reflection::BindingFlags _get_BinderSetInvokeField();
    // Set static field: static private System.Reflection.BindingFlags BinderSetInvokeField
    static void _set_BinderSetInvokeField(System::Reflection::BindingFlags value);
    // static field const value: static private System.Reflection.BindingFlags BinderNonFieldGetSet
    static constexpr const int BinderNonFieldGetSet = 16773888;
    // Get static field: static private System.Reflection.BindingFlags BinderNonFieldGetSet
    static System::Reflection::BindingFlags _get_BinderNonFieldGetSet();
    // Set static field: static private System.Reflection.BindingFlags BinderNonFieldGetSet
    static void _set_BinderNonFieldGetSet(System::Reflection::BindingFlags value);
    // static field const value: static private System.Reflection.BindingFlags ClassicBindingMask
    static constexpr const int ClassicBindingMask = 61696;
    // Get static field: static private System.Reflection.BindingFlags ClassicBindingMask
    static System::Reflection::BindingFlags _get_ClassicBindingMask();
    // Set static field: static private System.Reflection.BindingFlags ClassicBindingMask
    static void _set_ClassicBindingMask(System::Reflection::BindingFlags value);
    // Get static field: static private System.RuntimeType s_typedRef
    static System::RuntimeType* _get_s_typedRef();
    // Set static field: static private System.RuntimeType s_typedRef
    static void _set_s_typedRef(System::RuntimeType* value);
    // static private System.Void ThrowIfTypeNeverValidGenericArgument(System.RuntimeType type)
    // Offset: 0xDDB32C
    static void ThrowIfTypeNeverValidGenericArgument(System::RuntimeType* type);
    // static System.Void SanityCheckGenericArguments(System.RuntimeType[] genericArguments, System.RuntimeType[] genericParamters)
    // Offset: 0xDDB48C
    static void SanityCheckGenericArguments(::Array<System::RuntimeType*>* genericArguments, ::Array<System::RuntimeType*>* genericParamters);
    // static private System.Void SplitName(System.String fullname, out System.String name, out System.String ns)
    // Offset: 0xDDB6C8
    static void SplitName(::Il2CppString* fullname, ::Il2CppString*& name, ::Il2CppString*& ns);
    // static private System.Void FilterHelper(System.Reflection.BindingFlags bindingFlags, ref System.String name, System.Boolean allowPrefixLookup, out System.Boolean prefixLookup, out System.Boolean ignoreCase, out System.RuntimeType/MemberListType listType)
    // Offset: 0xDDB968
    static void FilterHelper(System::Reflection::BindingFlags bindingFlags, ::Il2CppString*& name, bool allowPrefixLookup, bool& prefixLookup, bool& ignoreCase, System::RuntimeType::MemberListType& listType);
    // static private System.Void FilterHelper(System.Reflection.BindingFlags bindingFlags, ref System.String name, out System.Boolean ignoreCase, out System.RuntimeType/MemberListType listType)
    // Offset: 0xDDBDE4
    static void FilterHelper(System::Reflection::BindingFlags bindingFlags, ::Il2CppString*& name, bool& ignoreCase, System::RuntimeType::MemberListType& listType);
    // static private System.Boolean FilterApplyPrefixLookup(System.Reflection.MemberInfo memberInfo, System.String name, System.Boolean ignoreCase)
    // Offset: 0xDDBE80
    static bool FilterApplyPrefixLookup(System::Reflection::MemberInfo* memberInfo, ::Il2CppString* name, bool ignoreCase);
    // static private System.Boolean FilterApplyBase(System.Reflection.MemberInfo memberInfo, System.Reflection.BindingFlags bindingFlags, System.Boolean isPublic, System.Boolean isNonProtectedInternal, System.Boolean isStatic, System.String name, System.Boolean prefixLookup)
    // Offset: 0xDDC17C
    static bool FilterApplyBase(System::Reflection::MemberInfo* memberInfo, System::Reflection::BindingFlags bindingFlags, bool isPublic, bool isNonProtectedInternal, bool isStatic, ::Il2CppString* name, bool prefixLookup);
    // static private System.Boolean FilterApplyType(System.Type type, System.Reflection.BindingFlags bindingFlags, System.String name, System.Boolean prefixLookup, System.String ns)
    // Offset: 0xDDC368
    static bool FilterApplyType(System::Type* type, System::Reflection::BindingFlags bindingFlags, ::Il2CppString* name, bool prefixLookup, ::Il2CppString* ns);
    // static private System.Boolean FilterApplyMethodInfo(System.Reflection.RuntimeMethodInfo method, System.Reflection.BindingFlags bindingFlags, System.Reflection.CallingConventions callConv, System.Type[] argumentTypes)
    // Offset: 0xDDC554
    static bool FilterApplyMethodInfo(System::Reflection::RuntimeMethodInfo* method, System::Reflection::BindingFlags bindingFlags, System::Reflection::CallingConventions callConv, ::Array<System::Type*>* argumentTypes);
    // static private System.Boolean FilterApplyConstructorInfo(System.Reflection.RuntimeConstructorInfo constructor, System.Reflection.BindingFlags bindingFlags, System.Reflection.CallingConventions callConv, System.Type[] argumentTypes)
    // Offset: 0xDDC888
    static bool FilterApplyConstructorInfo(System::Reflection::RuntimeConstructorInfo* constructor, System::Reflection::BindingFlags bindingFlags, System::Reflection::CallingConventions callConv, ::Array<System::Type*>* argumentTypes);
    // static private System.Boolean FilterApplyMethodBase(System.Reflection.MethodBase methodBase, System.Reflection.BindingFlags methodFlags, System.Reflection.BindingFlags bindingFlags, System.Reflection.CallingConventions callConv, System.Type[] argumentTypes)
    // Offset: 0xDDC5F4
    static bool FilterApplyMethodBase(System::Reflection::MethodBase* methodBase, System::Reflection::BindingFlags methodFlags, System::Reflection::BindingFlags bindingFlags, System::Reflection::CallingConventions callConv, ::Array<System::Type*>* argumentTypes);
    // System.Boolean IsSpecialSerializableType()
    // Offset: 0xDDC998
    bool IsSpecialSerializableType();
    // private System.RuntimeType/ListBuilder`1<System.Reflection.MethodInfo> GetMethodCandidates(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.CallingConventions callConv, System.Type[] types, System.Boolean allowPrefixLookup)
    // Offset: 0xDDCC80
    System::RuntimeType::ListBuilder_1<System::Reflection::MethodInfo*> GetMethodCandidates(::Il2CppString* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::CallingConventions callConv, ::Array<System::Type*>* types, bool allowPrefixLookup);
    // private System.RuntimeType/ListBuilder`1<System.Reflection.ConstructorInfo> GetConstructorCandidates(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.CallingConventions callConv, System.Type[] types, System.Boolean allowPrefixLookup)
    // Offset: 0xDDD124
    System::RuntimeType::ListBuilder_1<System::Reflection::ConstructorInfo*> GetConstructorCandidates(::Il2CppString* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::CallingConventions callConv, ::Array<System::Type*>* types, bool allowPrefixLookup);
    // private System.RuntimeType/ListBuilder`1<System.Reflection.PropertyInfo> GetPropertyCandidates(System.String name, System.Reflection.BindingFlags bindingAttr, System.Type[] types, System.Boolean allowPrefixLookup)
    // Offset: 0xDDD5EC
    System::RuntimeType::ListBuilder_1<System::Reflection::PropertyInfo*> GetPropertyCandidates(::Il2CppString* name, System::Reflection::BindingFlags bindingAttr, ::Array<System::Type*>* types, bool allowPrefixLookup);
    // private System.RuntimeType/ListBuilder`1<System.Reflection.EventInfo> GetEventCandidates(System.String name, System.Reflection.BindingFlags bindingAttr, System.Boolean allowPrefixLookup)
    // Offset: 0xDDDAB0
    System::RuntimeType::ListBuilder_1<System::Reflection::EventInfo*> GetEventCandidates(::Il2CppString* name, System::Reflection::BindingFlags bindingAttr, bool allowPrefixLookup);
    // private System.RuntimeType/ListBuilder`1<System.Reflection.FieldInfo> GetFieldCandidates(System.String name, System.Reflection.BindingFlags bindingAttr, System.Boolean allowPrefixLookup)
    // Offset: 0xDDDF38
    System::RuntimeType::ListBuilder_1<System::Reflection::FieldInfo*> GetFieldCandidates(::Il2CppString* name, System::Reflection::BindingFlags bindingAttr, bool allowPrefixLookup);
    // private System.RuntimeType/ListBuilder`1<System.Type> GetNestedTypeCandidates(System.String fullname, System.Reflection.BindingFlags bindingAttr, System.Boolean allowPrefixLookup)
    // Offset: 0xDDE3C0
    System::RuntimeType::ListBuilder_1<System::Type*> GetNestedTypeCandidates(::Il2CppString* fullname, System::Reflection::BindingFlags bindingAttr, bool allowPrefixLookup);
    // System.Reflection.RuntimeModule GetRuntimeModule()
    // Offset: 0xDDFCAC
    System::Reflection::RuntimeModule* GetRuntimeModule();
    // System.Reflection.RuntimeAssembly GetRuntimeAssembly()
    // Offset: 0xDDFCB8
    System::Reflection::RuntimeAssembly* GetRuntimeAssembly();
    // private System.RuntimeType GetBaseType()
    // Offset: 0xDDCA7C
    System::RuntimeType* GetBaseType();
    // System.RuntimeType[] GetGenericArgumentsInternal()
    // Offset: 0xDE0FF4
    ::Array<System::RuntimeType*>* GetGenericArgumentsInternal();
    // private System.Void CreateInstanceCheckThis()
    // Offset: 0xDE2E78
    void CreateInstanceCheckThis();
    // System.Object CreateInstanceImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Object[] args, System.Globalization.CultureInfo culture, System.Object[] activationAttributes, ref System.Threading.StackCrawlMark stackMark)
    // Offset: 0xDE3088
    ::Il2CppObject* CreateInstanceImpl(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, ::Array<::Il2CppObject*>* args, System::Globalization::CultureInfo* culture, ::Array<::Il2CppObject*>* activationAttributes, System::Threading::StackCrawlMark& stackMark);
    // System.Object CreateInstanceDefaultCtor(System.Boolean publicOnly, System.Boolean skipCheckThis, System.Boolean fillCache, ref System.Threading.StackCrawlMark stackMark)
    // Offset: 0xDE39C8
    ::Il2CppObject* CreateInstanceDefaultCtor(bool publicOnly, bool skipCheckThis, bool fillCache, System::Threading::StackCrawlMark& stackMark);
    // System.Reflection.MonoCMethod GetDefaultConstructor()
    // Offset: 0xDE3BFC
    System::Reflection::MonoCMethod* GetDefaultConstructor();
    // private System.String GetDefaultMemberName()
    // Offset: 0xDE2680
    ::Il2CppString* GetDefaultMemberName();
    // System.Reflection.RuntimeConstructorInfo GetSerializationCtor()
    // Offset: 0xDE3DA8
    System::Reflection::RuntimeConstructorInfo* GetSerializationCtor();
    // System.Object CreateInstanceSlow(System.Boolean publicOnly, System.Boolean skipCheckThis, System.Boolean fillCache, ref System.Threading.StackCrawlMark stackMark)
    // Offset: 0xDE3BC4
    ::Il2CppObject* CreateInstanceSlow(bool publicOnly, bool skipCheckThis, bool fillCache, System::Threading::StackCrawlMark& stackMark);
    // private System.Object CreateInstanceMono(System.Boolean nonPublic)
    // Offset: 0xDE3F90
    ::Il2CppObject* CreateInstanceMono(bool nonPublic);
    // System.Object CheckValue(System.Object value, System.Reflection.Binder binder, System.Globalization.CultureInfo culture, System.Reflection.BindingFlags invokeAttr)
    // Offset: 0xDE4374
    ::Il2CppObject* CheckValue(::Il2CppObject* value, System::Reflection::Binder* binder, System::Globalization::CultureInfo* culture, System::Reflection::BindingFlags invokeAttr);
    // private System.Object TryConvertToType(System.Object value, ref System.Boolean failed)
    // Offset: 0xDE44F8
    ::Il2CppObject* TryConvertToType(::Il2CppObject* value, bool& failed);
    // static private System.Object IsConvertibleToPrimitiveType(System.Object value, System.Type targetType)
    // Offset: 0xDE47BC
    static ::Il2CppObject* IsConvertibleToPrimitiveType(::Il2CppObject* value, System::Type* targetType);
    // private System.String GetCachedName(System.TypeNameKind kind)
    // Offset: 0xDE2D7C
    ::Il2CppString* GetCachedName(System::TypeNameKind kind);
    // private System.Type make_array_type(System.Int32 rank)
    // Offset: 0xDE51E0
    System::Type* make_array_type(int rank);
    // private System.Type make_byref_type()
    // Offset: 0xDE527C
    System::Type* make_byref_type();
    // static private System.Type MakePointerType(System.Type type)
    // Offset: 0xDE5310
    static System::Type* MakePointerType(System::Type* type);
    // static System.Object CreateInstanceForAnotherGenericParameter(System.Type genericType, System.RuntimeType genericArgument)
    // Offset: 0xDE5598
    static ::Il2CppObject* CreateInstanceForAnotherGenericParameter(System::Type* genericType, System::RuntimeType* genericArgument);
    // static private System.Type MakeGenericType(System.Type gt, System.Type[] types)
    // Offset: 0xDE1560
    static System::Type* MakeGenericType(System::Type* gt, ::Array<System::Type*>* types);
    // System.IntPtr GetMethodsByName_native(System.IntPtr namePtr, System.Reflection.BindingFlags bindingAttr, System.Boolean ignoreCase)
    // Offset: 0xDE56C0
    System::IntPtr GetMethodsByName_native(System::IntPtr namePtr, System::Reflection::BindingFlags bindingAttr, bool ignoreCase);
    // System.Reflection.RuntimeMethodInfo[] GetMethodsByName(System.String name, System.Reflection.BindingFlags bindingAttr, System.Boolean ignoreCase, System.RuntimeType reflectedType)
    // Offset: 0xDDCE6C
    ::Array<System::Reflection::RuntimeMethodInfo*>* GetMethodsByName(::Il2CppString* name, System::Reflection::BindingFlags bindingAttr, bool ignoreCase, System::RuntimeType* reflectedType);
    // private System.IntPtr GetPropertiesByName_native(System.IntPtr name, System.Reflection.BindingFlags bindingAttr, System.Boolean icase)
    // Offset: 0xDE56C8
    System::IntPtr GetPropertiesByName_native(System::IntPtr name, System::Reflection::BindingFlags bindingAttr, bool icase);
    // private System.IntPtr GetConstructors_native(System.Reflection.BindingFlags bindingAttr)
    // Offset: 0xDE56D0
    System::IntPtr GetConstructors_native(System::Reflection::BindingFlags bindingAttr);
    // private System.Reflection.RuntimeConstructorInfo[] GetConstructors_internal(System.Reflection.BindingFlags bindingAttr, System.RuntimeType reflectedType)
    // Offset: 0xDDD3CC
    ::Array<System::Reflection::RuntimeConstructorInfo*>* GetConstructors_internal(System::Reflection::BindingFlags bindingAttr, System::RuntimeType* reflectedType);
    // private System.Reflection.RuntimePropertyInfo[] GetPropertiesByName(System.String name, System.Reflection.BindingFlags bindingAttr, System.Boolean icase, System.RuntimeType reflectedType)
    // Offset: 0xDDD7F8
    ::Array<System::Reflection::RuntimePropertyInfo*>* GetPropertiesByName(::Il2CppString* name, System::Reflection::BindingFlags bindingAttr, bool icase, System::RuntimeType* reflectedType);
    // static private System.TypeCode GetTypeCodeImplInternal(System.Type type)
    // Offset: 0xDE5738
    static System::TypeCode GetTypeCodeImplInternal(System::Type* type);
    // private System.Boolean IsGenericCOMObjectImpl()
    // Offset: 0xDE39C0
    bool IsGenericCOMObjectImpl();
    // static private System.Object CreateInstanceInternal(System.Type type)
    // Offset: 0xDE4284
    static ::Il2CppObject* CreateInstanceInternal(System::Type* type);
    // System.String getFullName(System.Boolean full_name, System.Boolean assembly_qualified)
    // Offset: 0xDE5748
    ::Il2CppString* getFullName(bool full_name, bool assembly_qualified);
    // private System.Type[] GetGenericArgumentsInternal(System.Boolean runtimeArray)
    // Offset: 0xDE106C
    ::Array<System::Type*>* GetGenericArgumentsInternal(bool runtimeArray);
    // private System.Reflection.GenericParameterAttributes GetGenericParameterAttributes()
    // Offset: 0xDE03B4
    System::Reflection::GenericParameterAttributes GetGenericParameterAttributes();
    // private System.Int32 GetGenericParameterPosition()
    // Offset: 0xDE161C
    int GetGenericParameterPosition();
    // private System.IntPtr GetEvents_native(System.IntPtr name, System.Reflection.BindingFlags bindingAttr)
    // Offset: 0xDE5758
    System::IntPtr GetEvents_native(System::IntPtr name, System::Reflection::BindingFlags bindingAttr);
    // private System.IntPtr GetFields_native(System.IntPtr name, System.Reflection.BindingFlags bindingAttr)
    // Offset: 0xDE575C
    System::IntPtr GetFields_native(System::IntPtr name, System::Reflection::BindingFlags bindingAttr);
    // private System.Reflection.RuntimeFieldInfo[] GetFields_internal(System.String name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType reflectedType)
    // Offset: 0xDDE110
    ::Array<System::Reflection::RuntimeFieldInfo*>* GetFields_internal(::Il2CppString* name, System::Reflection::BindingFlags bindingAttr, System::RuntimeType* reflectedType);
    // private System.Reflection.RuntimeEventInfo[] GetEvents_internal(System.String name, System.Reflection.BindingFlags bindingAttr, System.RuntimeType reflectedType)
    // Offset: 0xDDDC88
    ::Array<System::Reflection::RuntimeEventInfo*>* GetEvents_internal(::Il2CppString* name, System::Reflection::BindingFlags bindingAttr, System::RuntimeType* reflectedType);
    // private System.IntPtr GetNestedTypes_native(System.IntPtr name, System.Reflection.BindingFlags bindingAttr)
    // Offset: 0xDE5764
    System::IntPtr GetNestedTypes_native(System::IntPtr name, System::Reflection::BindingFlags bindingAttr);
    // private System.RuntimeType[] GetNestedTypes_internal(System.String displayName, System.Reflection.BindingFlags bindingAttr)
    // Offset: 0xDDE580
    ::Array<System::RuntimeType*>* GetNestedTypes_internal(::Il2CppString* displayName, System::Reflection::BindingFlags bindingAttr);
    // System.Void .ctor()
    // Offset: 0xDDC928
    // Implemented from: System.Reflection.TypeInfo
    // Base method: System.Void TypeInfo::.ctor()
    // Base method: System.Void Type::.ctor()
    // Base method: System.Void MemberInfo::.ctor()
    // Base method: System.Void Object::.ctor()
    static RuntimeType* New_ctor();
    // public override System.Reflection.MethodInfo[] GetMethods(System.Reflection.BindingFlags bindingAttr)
    // Offset: 0xDDE8D4
    // Implemented from: System.Type
    // Base method: System.Reflection.MethodInfo[] Type::GetMethods(System.Reflection.BindingFlags bindingAttr)
    ::Array<System::Reflection::MethodInfo*>* GetMethods(System::Reflection::BindingFlags bindingAttr);
    // public override System.Reflection.ConstructorInfo[] GetConstructors(System.Reflection.BindingFlags bindingAttr)
    // Offset: 0xDDE964
    // Implemented from: System.Type
    // Base method: System.Reflection.ConstructorInfo[] Type::GetConstructors(System.Reflection.BindingFlags bindingAttr)
    ::Array<System::Reflection::ConstructorInfo*>* GetConstructors(System::Reflection::BindingFlags bindingAttr);
    // public override System.Reflection.PropertyInfo[] GetProperties(System.Reflection.BindingFlags bindingAttr)
    // Offset: 0xDDEA04
    // Implemented from: System.Type
    // Base method: System.Reflection.PropertyInfo[] Type::GetProperties(System.Reflection.BindingFlags bindingAttr)
    ::Array<System::Reflection::PropertyInfo*>* GetProperties(System::Reflection::BindingFlags bindingAttr);
    // public override System.Reflection.FieldInfo[] GetFields(System.Reflection.BindingFlags bindingAttr)
    // Offset: 0xDDEA90
    // Implemented from: System.Type
    // Base method: System.Reflection.FieldInfo[] Type::GetFields(System.Reflection.BindingFlags bindingAttr)
    ::Array<System::Reflection::FieldInfo*>* GetFields(System::Reflection::BindingFlags bindingAttr);
    // protected override System.Reflection.MethodInfo GetMethodImpl(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConv, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
    // Offset: 0xDDEB18
    // Implemented from: System.Type
    // Base method: System.Reflection.MethodInfo Type::GetMethodImpl(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConv, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
    System::Reflection::MethodInfo* GetMethodImpl(::Il2CppString* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Reflection::CallingConventions callConv, ::Array<System::Type*>* types, ::Array<System::Reflection::ParameterModifier>* modifiers);
    // protected override System.Reflection.ConstructorInfo GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
    // Offset: 0xDDED74
    // Implemented from: System.Type
    // Base method: System.Reflection.ConstructorInfo Type::GetConstructorImpl(System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
    System::Reflection::ConstructorInfo* GetConstructorImpl(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Reflection::CallingConventions callConvention, ::Array<System::Type*>* types, ::Array<System::Reflection::ParameterModifier>* modifiers);
    // protected override System.Reflection.PropertyInfo GetPropertyImpl(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
    // Offset: 0xDDEF64
    // Implemented from: System.Type
    // Base method: System.Reflection.PropertyInfo Type::GetPropertyImpl(System.String name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Type returnType, System.Type[] types, System.Reflection.ParameterModifier[] modifiers)
    System::Reflection::PropertyInfo* GetPropertyImpl(::Il2CppString* name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder* binder, System::Type* returnType, ::Array<System::Type*>* types, ::Array<System::Reflection::ParameterModifier>* modifiers);
    // public override System.Reflection.EventInfo GetEvent(System.String name, System.Reflection.BindingFlags bindingAttr)
    // Offset: 0xDDF1C0
    // Implemented from: System.Type
    // Base method: System.Reflection.EventInfo Type::GetEvent(System.String name, System.Reflection.BindingFlags bindingAttr)
    System::Reflection::EventInfo* GetEvent(::Il2CppString* name, System::Reflection::BindingFlags bindingAttr);
    // public override System.Reflection.FieldInfo GetField(System.String name, System.Reflection.BindingFlags bindingAttr)
    // Offset: 0xDDF398
    // Implemented from: System.Type
    // Base method: System.Reflection.FieldInfo Type::GetField(System.String name, System.Reflection.BindingFlags bindingAttr)
    System::Reflection::FieldInfo* GetField(::Il2CppString* name, System::Reflection::BindingFlags bindingAttr);
    // public override System.Type GetNestedType(System.String fullname, System.Reflection.BindingFlags bindingAttr)
    // Offset: 0xDDF690
    // Implemented from: System.Type
    // Base method: System.Type Type::GetNestedType(System.String fullname, System.Reflection.BindingFlags bindingAttr)
    System::Type* GetNestedType(::Il2CppString* fullname, System::Reflection::BindingFlags bindingAttr);
    // public override System.Reflection.MemberInfo[] GetMember(System.String name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr)
    // Offset: 0xDDF8A4
    // Implemented from: System.Type
    // Base method: System.Reflection.MemberInfo[] Type::GetMember(System.String name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr)
    ::Array<System::Reflection::MemberInfo*>* GetMember(::Il2CppString* name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr);
    // public override System.Reflection.Module get_Module()
    // Offset: 0xDDFCA8
    // Implemented from: System.Type
    // Base method: System.Reflection.Module Type::get_Module()
    System::Reflection::Module* get_Module();
    // public override System.Reflection.Assembly get_Assembly()
    // Offset: 0xDDFCB4
    // Implemented from: System.Type
    // Base method: System.Reflection.Assembly Type::get_Assembly()
    System::Reflection::Assembly* get_Assembly();
    // public override System.RuntimeTypeHandle get_TypeHandle()
    // Offset: 0xDDFCC0
    // Implemented from: System.Type
    // Base method: System.RuntimeTypeHandle Type::get_TypeHandle()
    System::RuntimeTypeHandle get_TypeHandle();
    // public override System.Boolean IsInstanceOfType(System.Object o)
    // Offset: 0xDDFCF4
    // Implemented from: System.Type
    // Base method: System.Boolean Type::IsInstanceOfType(System.Object o)
    bool IsInstanceOfType(::Il2CppObject* o);
    // public override System.Boolean IsSubclassOf(System.Type type)
    // Offset: 0xDDFCFC
    // Implemented from: System.Type
    // Base method: System.Boolean Type::IsSubclassOf(System.Type type)
    bool IsSubclassOf(System::Type* type);
    // public override System.Boolean IsAssignableFrom(System.Type c)
    // Offset: 0xDDFE88
    // Implemented from: System.Type
    // Base method: System.Boolean Type::IsAssignableFrom(System.Type c)
    bool IsAssignableFrom(System::Type* c);
    // public override System.Boolean IsEquivalentTo(System.Type other)
    // Offset: 0xDDFF88
    // Implemented from: System.Type
    // Base method: System.Boolean Type::IsEquivalentTo(System.Type other)
    bool IsEquivalentTo(System::Type* other);
    // public override System.Type get_BaseType()
    // Offset: 0xDE003C
    // Implemented from: System.Type
    // Base method: System.Type Type::get_BaseType()
    System::Type* get_BaseType();
    // public override System.Type get_UnderlyingSystemType()
    // Offset: 0xDE0048
    // Implemented from: System.Type
    // Base method: System.Type Type::get_UnderlyingSystemType()
    System::Type* get_UnderlyingSystemType();
    // protected override System.Reflection.TypeAttributes GetAttributeFlagsImpl()
    // Offset: 0xDE004C
    // Implemented from: System.Type
    // Base method: System.Reflection.TypeAttributes Type::GetAttributeFlagsImpl()
    System::Reflection::TypeAttributes GetAttributeFlagsImpl();
    // protected override System.Boolean IsContextfulImpl()
    // Offset: 0xDE0054
    // Implemented from: System.Type
    // Base method: System.Boolean Type::IsContextfulImpl()
    bool IsContextfulImpl();
    // protected override System.Boolean IsByRefImpl()
    // Offset: 0xDE00E8
    // Implemented from: System.Type
    // Base method: System.Boolean Type::IsByRefImpl()
    bool IsByRefImpl();
    // protected override System.Boolean IsPrimitiveImpl()
    // Offset: 0xDE00F0
    // Implemented from: System.Type
    // Base method: System.Boolean Type::IsPrimitiveImpl()
    bool IsPrimitiveImpl();
    // protected override System.Boolean IsPointerImpl()
    // Offset: 0xDE00F8
    // Implemented from: System.Type
    // Base method: System.Boolean Type::IsPointerImpl()
    bool IsPointerImpl();
    // protected override System.Boolean IsCOMObjectImpl()
    // Offset: 0xDE0100
    // Implemented from: System.Type
    // Base method: System.Boolean Type::IsCOMObjectImpl()
    bool IsCOMObjectImpl();
    // protected override System.Boolean IsValueTypeImpl()
    // Offset: 0xDE0114
    // Implemented from: System.Type
    // Base method: System.Boolean Type::IsValueTypeImpl()
    bool IsValueTypeImpl();
    // public override System.Boolean get_IsEnum()
    // Offset: 0xDE023C
    // Implemented from: System.Type
    // Base method: System.Boolean Type::get_IsEnum()
    bool get_IsEnum();
    // protected override System.Boolean HasElementTypeImpl()
    // Offset: 0xDE02C0
    // Implemented from: System.Type
    // Base method: System.Boolean Type::HasElementTypeImpl()
    bool HasElementTypeImpl();
    // public override System.Reflection.GenericParameterAttributes get_GenericParameterAttributes()
    // Offset: 0xDE0308
    // Implemented from: System.Type
    // Base method: System.Reflection.GenericParameterAttributes Type::get_GenericParameterAttributes()
    System::Reflection::GenericParameterAttributes get_GenericParameterAttributes();
    // override System.Boolean get_IsSzArray()
    // Offset: 0xDE03F8
    // Implemented from: System.Type
    // Base method: System.Boolean Type::get_IsSzArray()
    bool get_IsSzArray();
    // protected override System.Boolean IsArrayImpl()
    // Offset: 0xDE044C
    // Implemented from: System.Type
    // Base method: System.Boolean Type::IsArrayImpl()
    bool IsArrayImpl();
    // public override System.Int32 GetArrayRank()
    // Offset: 0xDE0454
    // Implemented from: System.Type
    // Base method: System.Int32 Type::GetArrayRank()
    int GetArrayRank();
    // public override System.Type GetElementType()
    // Offset: 0xDE0504
    // Implemented from: System.Type
    // Base method: System.Type Type::GetElementType()
    System::Type* GetElementType();
    // public override System.String[] GetEnumNames()
    // Offset: 0xDE050C
    // Implemented from: System.Type
    // Base method: System.String[] Type::GetEnumNames()
    ::Array<::Il2CppString*>* GetEnumNames();
    // public override System.Array GetEnumValues()
    // Offset: 0xDE0628
    // Implemented from: System.Type
    // Base method: System.Array Type::GetEnumValues()
    System::Array* GetEnumValues();
    // public override System.Type GetEnumUnderlyingType()
    // Offset: 0xDE07F0
    // Implemented from: System.Type
    // Base method: System.Type Type::GetEnumUnderlyingType()
    System::Type* GetEnumUnderlyingType();
    // public override System.Boolean IsEnumDefined(System.Object value)
    // Offset: 0xDE08CC
    // Implemented from: System.Type
    // Base method: System.Boolean Type::IsEnumDefined(System.Object value)
    bool IsEnumDefined(::Il2CppObject* value);
    // public override System.String GetEnumName(System.Object value)
    // Offset: 0xDE0E04
    // Implemented from: System.Type
    // Base method: System.String Type::GetEnumName(System.Object value)
    ::Il2CppString* GetEnumName(::Il2CppObject* value);
    // public override System.Type[] GetGenericArguments()
    // Offset: 0xDE1074
    // Implemented from: System.Type
    // Base method: System.Type[] Type::GetGenericArguments()
    ::Array<System::Type*>* GetGenericArguments();
    // public override System.Type MakeGenericType(params System.Type[] instantiation)
    // Offset: 0xDE10F0
    // Implemented from: System.Type
    // Base method: System.Type Type::MakeGenericType(params System.Type[] instantiation)
    System::Type* MakeGenericType(::Array<System::Type*>* instantiation);
    // Creating initializer_list -> params proxy for: System.Type MakeGenericType(params System.Type[] instantiation)
    System::Type* MakeGenericType(std::initializer_list<System::Type*> instantiation);
    // Creating TArgs -> initializer_list proxy for: System.Type MakeGenericType(params System.Type[] instantiation)
    template<class ...TParams>
    System::Type* MakeGenericType(TParams&&... instantiation) {
      return MakeGenericType({instantiation...});
    }
    // public override System.Boolean get_IsGenericTypeDefinition()
    // Offset: 0xDE1564
    // Implemented from: System.Type
    // Base method: System.Boolean Type::get_IsGenericTypeDefinition()
    bool get_IsGenericTypeDefinition();
    // public override System.Boolean get_IsGenericParameter()
    // Offset: 0xDE156C
    // Implemented from: System.Type
    // Base method: System.Boolean Type::get_IsGenericParameter()
    bool get_IsGenericParameter();
    // public override System.Int32 get_GenericParameterPosition()
    // Offset: 0xDE1570
    // Implemented from: System.Type
    // Base method: System.Int32 Type::get_GenericParameterPosition()
    int get_GenericParameterPosition();
    // public override System.Type GetGenericTypeDefinition()
    // Offset: 0xDE1620
    // Implemented from: System.Type
    // Base method: System.Type Type::GetGenericTypeDefinition()
    System::Type* GetGenericTypeDefinition();
    // public override System.Boolean get_IsGenericType()
    // Offset: 0xDE16D0
    // Implemented from: System.Type
    // Base method: System.Boolean Type::get_IsGenericType()
    bool get_IsGenericType();
    // public override System.Object InvokeMember(System.String name, System.Reflection.BindingFlags bindingFlags, System.Reflection.Binder binder, System.Object target, System.Object[] providedArgs, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, System.String[] namedParams)
    // Offset: 0xDE16D8
    // Implemented from: System.Type
    // Base method: System.Object Type::InvokeMember(System.String name, System.Reflection.BindingFlags bindingFlags, System.Reflection.Binder binder, System.Object target, System.Object[] providedArgs, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, System.String[] namedParams)
    ::Il2CppObject* InvokeMember(::Il2CppString* name, System::Reflection::BindingFlags bindingFlags, System::Reflection::Binder* binder, ::Il2CppObject* target, ::Array<::Il2CppObject*>* providedArgs, ::Array<System::Reflection::ParameterModifier>* modifiers, System::Globalization::CultureInfo* culture, ::Array<::Il2CppString*>* namedParams);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xDE2760
    // Implemented from: System.Type
    // Base method: System.Boolean Type::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public System.Object Clone()
    // Offset: 0xDE276C
    // Implemented from: System.ICloneable
    // Base method: System.Object ICloneable::Clone()
    ::Il2CppObject* Clone();
    // public System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0xDE2770
    // Implemented from: System.Runtime.Serialization.ISerializable
    // Base method: System.Void ISerializable::GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
    // Creating proxy method: System_Runtime_Serialization_ISerializable_GetObjectData
    // Maps to method: GetObjectData
    void System_Runtime_Serialization_ISerializable_GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
    // public override System.Object[] GetCustomAttributes(System.Boolean inherit)
    // Offset: 0xDE2808
    // Implemented from: System.Reflection.MemberInfo
    // Base method: System.Object[] MemberInfo::GetCustomAttributes(System.Boolean inherit)
    ::Array<::Il2CppObject*>* GetCustomAttributes(bool inherit);
    // public override System.Object[] GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
    // Offset: 0xDE28B4
    // Implemented from: System.Reflection.MemberInfo
    // Base method: System.Object[] MemberInfo::GetCustomAttributes(System.Type attributeType, System.Boolean inherit)
    ::Array<::Il2CppObject*>* GetCustomAttributes(System::Type* attributeType, bool inherit);
    // public override System.Boolean IsDefined(System.Type attributeType, System.Boolean inherit)
    // Offset: 0xDE2A40
    // Implemented from: System.Reflection.MemberInfo
    // Base method: System.Boolean MemberInfo::IsDefined(System.Type attributeType, System.Boolean inherit)
    bool IsDefined(System::Type* attributeType, bool inherit);
    // public override System.Collections.Generic.IList`1<System.Reflection.CustomAttributeData> GetCustomAttributesData()
    // Offset: 0xDE2BCC
    // Implemented from: System.Reflection.MemberInfo
    // Base method: System.Collections.Generic.IList`1<System.Reflection.CustomAttributeData> MemberInfo::GetCustomAttributesData()
    System::Collections::Generic::IList_1<System::Reflection::CustomAttributeData*>* GetCustomAttributesData();
    // override System.String FormatTypeName(System.Boolean serialization)
    // Offset: 0xDE2BD4
    // Implemented from: System.Type
    // Base method: System.String Type::FormatTypeName(System.Boolean serialization)
    ::Il2CppString* FormatTypeName(bool serialization);
    // public override System.Reflection.MemberTypes get_MemberType()
    // Offset: 0xDE2E18
    // Implemented from: System.Type
    // Base method: System.Reflection.MemberTypes Type::get_MemberType()
    System::Reflection::MemberTypes get_MemberType();
    // public override System.Type get_ReflectedType()
    // Offset: 0xDE2E64
    // Implemented from: System.Type
    // Base method: System.Type Type::get_ReflectedType()
    System::Type* get_ReflectedType();
    // public override System.Int32 get_MetadataToken()
    // Offset: 0xDE2E70
    // Implemented from: System.Reflection.MemberInfo
    // Base method: System.Int32 MemberInfo::get_MetadataToken()
    int get_MetadataToken();
    // public override System.Type MakeArrayType()
    // Offset: 0xDE51E4
    // Implemented from: System.Type
    // Base method: System.Type Type::MakeArrayType()
    System::Type* MakeArrayType();
    // public override System.Type MakeArrayType(System.Int32 rank)
    // Offset: 0xDE51EC
    // Implemented from: System.Type
    // Base method: System.Type Type::MakeArrayType(System.Int32 rank)
    System::Type* MakeArrayType(int rank);
    // public override System.Type MakeByRefType()
    // Offset: 0xDE5280
    // Implemented from: System.Type
    // Base method: System.Type Type::MakeByRefType()
    System::Type* MakeByRefType();
    // public override System.Type MakePointerType()
    // Offset: 0xDE5314
    // Implemented from: System.Type
    // Base method: System.Type Type::MakePointerType()
    System::Type* MakePointerType();
    // public override System.Boolean get_ContainsGenericParameters()
    // Offset: 0xDE5378
    // Implemented from: System.Type
    // Base method: System.Boolean Type::get_ContainsGenericParameters()
    bool get_ContainsGenericParameters();
    // public override System.Type[] GetGenericParameterConstraints()
    // Offset: 0xDE548C
    // Implemented from: System.Type
    // Base method: System.Type[] Type::GetGenericParameterConstraints()
    ::Array<System::Type*>* GetGenericParameterConstraints();
    // protected override System.TypeCode GetTypeCodeImpl()
    // Offset: 0xDE56D4
    // Implemented from: System.Type
    // Base method: System.TypeCode Type::GetTypeCodeImpl()
    System::TypeCode GetTypeCodeImpl();
    // public override System.String ToString()
    // Offset: 0xDE573C
    // Implemented from: System.Type
    // Base method: System.String Type::ToString()
    ::Il2CppString* ToString();
    // public override System.Reflection.MethodBase get_DeclaringMethod()
    // Offset: 0xDE5754
    // Implemented from: System.Type
    // Base method: System.Reflection.MethodBase Type::get_DeclaringMethod()
    System::Reflection::MethodBase* get_DeclaringMethod();
    // public override System.Type[] GetInterfaces()
    // Offset: 0xDE5760
    // Implemented from: System.Type
    // Base method: System.Type[] Type::GetInterfaces()
    ::Array<System::Type*>* GetInterfaces();
    // public override System.String get_AssemblyQualifiedName()
    // Offset: 0xDE5768
    // Implemented from: System.Type
    // Base method: System.String Type::get_AssemblyQualifiedName()
    ::Il2CppString* get_AssemblyQualifiedName();
    // public override System.Type get_DeclaringType()
    // Offset: 0xDE5774
    // Implemented from: System.Type
    // Base method: System.Type Type::get_DeclaringType()
    System::Type* get_DeclaringType();
    // public override System.String get_Name()
    // Offset: 0xDE5778
    // Implemented from: System.Reflection.MemberInfo
    // Base method: System.String MemberInfo::get_Name()
    ::Il2CppString* get_Name();
    // public override System.String get_Namespace()
    // Offset: 0xDE577C
    // Implemented from: System.Type
    // Base method: System.String Type::get_Namespace()
    ::Il2CppString* get_Namespace();
    // public override System.Int32 GetHashCode()
    // Offset: 0xDE5780
    // Implemented from: System.Type
    // Base method: System.Int32 Type::GetHashCode()
    int GetHashCode();
    // public override System.String get_FullName()
    // Offset: 0xDE5870
    // Implemented from: System.Type
    // Base method: System.String Type::get_FullName()
    ::Il2CppString* get_FullName();
    // static private System.Void .cctor()
    // Offset: 0xDE597C
    // Implemented from: System.Type
    // Base method: System.Void Type::.cctor()
    static void _cctor();
  }; // System.RuntimeType
  // static public System.Boolean op_Equality(System.RuntimeType left, System.RuntimeType right)
  // Offset: 0xDDB6BC
  bool operator ==(System::RuntimeType* left, System::RuntimeType& right);
  // static public System.Boolean op_Inequality(System.RuntimeType left, System.RuntimeType right)
  // Offset: 0xDDCC74
  bool operator !=(System::RuntimeType* left, System::RuntimeType& right);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::RuntimeType*, "System", "RuntimeType");
#pragma pack(pop)
