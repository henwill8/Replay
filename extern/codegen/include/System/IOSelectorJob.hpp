// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.IThreadPoolWorkItem
#include "System/Threading/IThreadPoolWorkItem.hpp"
// Including type: System.IOOperation
#include "System/IOOperation.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IOAsyncCallback
  class IOAsyncCallback;
  // Forward declaring type: IOAsyncResult
  class IOAsyncResult;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: ThreadAbortException
  class ThreadAbortException;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Size: 0x28
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.IOSelectorJob
  // [] Offset: FFFFFFFF
  class IOSelectorJob : public ::Il2CppObject/*, public System::Threading::IThreadPoolWorkItem*/ {
    public:
    // private System.IOOperation operation
    // Size: 0x4
    // Offset: 0x10
    System::IOOperation operation;
    // Field size check
    static_assert(sizeof(System::IOOperation) == 0x4);
    // Padding between fields: operation and: callback
    char __padding0[0x4] = {};
    // private System.IOAsyncCallback callback
    // Size: 0x8
    // Offset: 0x18
    System::IOAsyncCallback* callback;
    // Field size check
    static_assert(sizeof(System::IOAsyncCallback*) == 0x8);
    // private System.IOAsyncResult state
    // Size: 0x8
    // Offset: 0x20
    System::IOAsyncResult* state;
    // Field size check
    static_assert(sizeof(System::IOAsyncResult*) == 0x8);
    // Creating value type constructor for type: IOSelectorJob
    IOSelectorJob(System::IOOperation operation_ = {}, System::IOAsyncCallback* callback_ = {}, System::IOAsyncResult* state_ = {}) noexcept : operation{operation_}, callback{callback_}, state{state_} {}
    // Creating interface conversion operator: operator System::Threading::IThreadPoolWorkItem
    operator System::Threading::IThreadPoolWorkItem() noexcept {
      return *reinterpret_cast<System::Threading::IThreadPoolWorkItem*>(this);
    }
    // public System.Void .ctor(System.IOOperation operation, System.IOAsyncCallback callback, System.IOAsyncResult state)
    // Offset: 0x17A5890
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IOSelectorJob* New_ctor(System::IOOperation operation, System::IOAsyncCallback* callback, System::IOAsyncResult* state) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::IOSelectorJob::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IOSelectorJob*, creationType>(operation, callback, state)));
    }
    // public System.Void MarkDisposed()
    // Offset: 0x17A590C
    void MarkDisposed();
    // private System.Void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
    // Offset: 0x17A58E8
    // Implemented from: System.Threading.IThreadPoolWorkItem
    // Base method: System.Void IThreadPoolWorkItem::ExecuteWorkItem()
    void System_Threading_IThreadPoolWorkItem_ExecuteWorkItem();
    // private System.Void System.Threading.IThreadPoolWorkItem.MarkAborted(System.Threading.ThreadAbortException tae)
    // Offset: 0x17A5908
    // Implemented from: System.Threading.IThreadPoolWorkItem
    // Base method: System.Void IThreadPoolWorkItem::MarkAborted(System.Threading.ThreadAbortException tae)
    void System_Threading_IThreadPoolWorkItem_MarkAborted(System::Threading::ThreadAbortException* tae);
  }; // System.IOSelectorJob
  #pragma pack(pop)
  static check_size<sizeof(IOSelectorJob), 32 + sizeof(System::IOAsyncResult*)> __System_IOSelectorJobSizeCheck;
  static_assert(sizeof(IOSelectorJob) == 0x28);
}
DEFINE_IL2CPP_ARG_TYPE(System::IOSelectorJob*, "System", "IOSelectorJob");
