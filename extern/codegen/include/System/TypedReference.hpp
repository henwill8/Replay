// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.RuntimeTypeHandle
#include "System/RuntimeTypeHandle.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: FieldInfo
  class FieldInfo;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.TypedReference
  // [] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: CA85EC
  // [CLSCompliantAttribute] Offset: CA85EC
  struct TypedReference/*, public System::ValueType*/ {
    public:
    // private System.RuntimeTypeHandle type
    // Size: 0x8
    // Offset: 0x0
    System::RuntimeTypeHandle type;
    // Field size check
    static_assert(sizeof(System::RuntimeTypeHandle) == 0x8);
    // private System.IntPtr Value
    // Size: 0x8
    // Offset: 0x8
    System::IntPtr Value;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // private System.IntPtr Type
    // Size: 0x8
    // Offset: 0x10
    System::IntPtr Type;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // Creating value type constructor for type: TypedReference
    constexpr TypedReference(System::RuntimeTypeHandle type_ = {}, System::IntPtr Value_ = {}, System::IntPtr Type_ = {}) noexcept : type{type_}, Value{Value_}, Type{Type_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // static public System.TypedReference MakeTypedReference(System.Object target, System.Reflection.FieldInfo[] flds)
    // Offset: 0x19F4E2C
    static System::TypedReference MakeTypedReference(::Il2CppObject* target, ::Array<System::Reflection::FieldInfo*>* flds);
    // static private System.TypedReference MakeTypedReferenceInternal(System.Object target, System.Reflection.FieldInfo[] fields)
    // Offset: 0x19F521C
    static System::TypedReference MakeTypedReferenceInternal(::Il2CppObject* target, ::Array<System::Reflection::FieldInfo*>* fields);
    // System.Boolean get_IsNull()
    // Offset: 0xE11D44
    bool get_IsNull();
    // static public System.Void SetTypedReference(System.TypedReference target, System.Object value)
    // Offset: 0x19F5394
    static void SetTypedReference(System::TypedReference target, ::Il2CppObject* value);
    // public override System.Int32 GetHashCode()
    // Offset: 0xE11D30
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public override System.Boolean Equals(System.Object o)
    // Offset: 0xE11D38
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object o)
    bool Equals(::Il2CppObject* o);
  }; // System.TypedReference
  #pragma pack(pop)
  static check_size<sizeof(TypedReference), 16 + sizeof(System::IntPtr)> __System_TypedReferenceSizeCheck;
  static_assert(sizeof(TypedReference) == 0x18);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::TypedReference, "System", "TypedReference");
