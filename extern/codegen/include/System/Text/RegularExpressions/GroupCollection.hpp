// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Collections.ICollection
#include "System/Collections/ICollection.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text::RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: Match
  class Match;
  // Forward declaring type: Group
  class Group;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
}
// Completed forward declares
// Type namespace: System.Text.RegularExpressions
namespace System::Text::RegularExpressions {
  // Autogenerated type: System.Text.RegularExpressions.GroupCollection
  class GroupCollection : public ::Il2CppObject, public System::Collections::ICollection {
    public:
    // System.Text.RegularExpressions.Match _match
    // Offset: 0x10
    System::Text::RegularExpressions::Match* match;
    // System.Collections.Hashtable _captureMap
    // Offset: 0x18
    System::Collections::Hashtable* captureMap;
    // System.Text.RegularExpressions.Group[] _groups
    // Offset: 0x20
    ::Array<System::Text::RegularExpressions::Group*>* groups;
    // System.Void .ctor(System.Text.RegularExpressions.Match match, System.Collections.Hashtable caps)
    // Offset: 0x121FEA4
    static GroupCollection* New_ctor(System::Text::RegularExpressions::Match* match, System::Collections::Hashtable* caps);
    // public System.Text.RegularExpressions.Group get_Item(System.Int32 groupnum)
    // Offset: 0x121FF1C
    System::Text::RegularExpressions::Group* get_Item(int groupnum);
    // System.Text.RegularExpressions.Group GetGroup(System.Int32 groupnum)
    // Offset: 0x121FF20
    System::Text::RegularExpressions::Group* GetGroup(int groupnum);
    // System.Text.RegularExpressions.Group GetGroupImpl(System.Int32 groupnum)
    // Offset: 0x122004C
    System::Text::RegularExpressions::Group* GetGroupImpl(int groupnum);
    // public System.Int32 get_Count()
    // Offset: 0x121FEF4
    // Implemented from: System.Collections.ICollection
    // Base method: System.Int32 ICollection::get_Count()
    int get_Count();
    // Creating proxy method: System_Collections_ICollection_get_Count
    // Maps to method: get_Count
    int System_Collections_ICollection_get_Count();
    // public System.Void CopyTo(System.Array array, System.Int32 arrayIndex)
    // Offset: 0x12203BC
    // Implemented from: System.Collections.ICollection
    // Base method: System.Void ICollection::CopyTo(System.Array array, System.Int32 arrayIndex)
    void CopyTo(System::Array* array, int arrayIndex);
    // Creating proxy method: System_Collections_ICollection_CopyTo
    // Maps to method: CopyTo
    void System_Collections_ICollection_CopyTo(System::Array* array, int arrayIndex);
    // public System.Collections.IEnumerator GetEnumerator()
    // Offset: 0x12204A0
    // Implemented from: System.Collections.IEnumerable
    // Base method: System.Collections.IEnumerator IEnumerable::GetEnumerator()
    System::Collections::IEnumerator* GetEnumerator();
    // Creating proxy method: System_Collections_IEnumerable_GetEnumerator
    // Maps to method: GetEnumerator
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // System.Void .ctor()
    // Offset: 0x1220554
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static GroupCollection* New_ctor();
  }; // System.Text.RegularExpressions.GroupCollection
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Text::RegularExpressions::GroupCollection*, "System.Text.RegularExpressions", "GroupCollection");
#pragma pack(pop)
