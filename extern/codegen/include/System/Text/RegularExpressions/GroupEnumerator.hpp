// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Collections.IEnumerator
#include "System/Collections/IEnumerator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text::RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: GroupCollection
  class GroupCollection;
  // Forward declaring type: Capture
  class Capture;
}
// Completed forward declares
// Type namespace: System.Text.RegularExpressions
namespace System::Text::RegularExpressions {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: System.Text.RegularExpressions.GroupEnumerator
  // [] Offset: FFFFFFFF
  class GroupEnumerator : public ::Il2CppObject/*, public System::Collections::IEnumerator*/ {
    public:
    // System.Text.RegularExpressions.GroupCollection _rgc
    // Size: 0x8
    // Offset: 0x10
    System::Text::RegularExpressions::GroupCollection* rgc;
    // Field size check
    static_assert(sizeof(System::Text::RegularExpressions::GroupCollection*) == 0x8);
    // System.Int32 _curindex
    // Size: 0x4
    // Offset: 0x18
    int curindex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: GroupEnumerator
    GroupEnumerator(System::Text::RegularExpressions::GroupCollection* rgc_ = {}, int curindex_ = {}) noexcept : rgc{rgc_}, curindex{curindex_} {}
    // Creating interface conversion operator: operator System::Collections::IEnumerator
    operator System::Collections::IEnumerator() noexcept {
      return *reinterpret_cast<System::Collections::IEnumerator*>(this);
    }
    // System.Void .ctor(System.Text.RegularExpressions.GroupCollection rgc)
    // Offset: 0x17820C0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GroupEnumerator* New_ctor(System::Text::RegularExpressions::GroupCollection* rgc) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Text::RegularExpressions::GroupEnumerator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GroupEnumerator*, creationType>(rgc)));
    }
    // public System.Text.RegularExpressions.Capture get_Capture()
    // Offset: 0x1782190
    System::Text::RegularExpressions::Capture* get_Capture();
    // public System.Boolean MoveNext()
    // Offset: 0x178213C
    // Implemented from: System.Collections.IEnumerator
    // Base method: System.Boolean IEnumerator::MoveNext()
    bool MoveNext();
    // Creating proxy method: System_Collections_IEnumerator_MoveNext
    // Maps to method: MoveNext
    bool System_Collections_IEnumerator_MoveNext();
    // public System.Object get_Current()
    // Offset: 0x178218C
    // Implemented from: System.Collections.IEnumerator
    // Base method: System.Object IEnumerator::get_Current()
    ::Il2CppObject* get_Current();
    // Creating proxy method: System_Collections_IEnumerator_get_Current
    // Maps to method: get_Current
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
    // public System.Void Reset()
    // Offset: 0x178224C
    // Implemented from: System.Collections.IEnumerator
    // Base method: System.Void IEnumerator::Reset()
    void Reset();
    // Creating proxy method: System_Collections_IEnumerator_Reset
    // Maps to method: Reset
    void System_Collections_IEnumerator_Reset();
  }; // System.Text.RegularExpressions.GroupEnumerator
  #pragma pack(pop)
  static check_size<sizeof(GroupEnumerator), 24 + sizeof(int)> __System_Text_RegularExpressions_GroupEnumeratorSizeCheck;
  static_assert(sizeof(GroupEnumerator) == 0x1C);
}
DEFINE_IL2CPP_ARG_TYPE(System::Text::RegularExpressions::GroupEnumerator*, "System.Text.RegularExpressions", "GroupEnumerator");
