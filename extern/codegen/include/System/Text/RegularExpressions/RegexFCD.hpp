// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text::RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: RegexFC
  class RegexFC;
  // Forward declaring type: RegexPrefix
  class RegexPrefix;
  // Forward declaring type: RegexTree
  class RegexTree;
  // Forward declaring type: RegexNode
  class RegexNode;
}
// Completed forward declares
// Type namespace: System.Text.RegularExpressions
namespace System::Text::RegularExpressions {
  // Autogenerated type: System.Text.RegularExpressions.RegexFCD
  class RegexFCD : public ::Il2CppObject {
    public:
    // private System.Int32[] _intStack
    // Offset: 0x10
    ::Array<int>* intStack;
    // private System.Int32 _intDepth
    // Offset: 0x18
    int intDepth;
    // private System.Text.RegularExpressions.RegexFC[] _fcStack
    // Offset: 0x20
    ::Array<System::Text::RegularExpressions::RegexFC*>* fcStack;
    // private System.Int32 _fcDepth
    // Offset: 0x28
    int fcDepth;
    // private System.Boolean _skipAllChildren
    // Offset: 0x2C
    bool skipAllChildren;
    // private System.Boolean _skipchild
    // Offset: 0x2D
    bool skipchild;
    // private System.Boolean _failed
    // Offset: 0x2E
    bool failed;
    // static System.Text.RegularExpressions.RegexPrefix FirstChars(System.Text.RegularExpressions.RegexTree t)
    // Offset: 0x1545080
    static System::Text::RegularExpressions::RegexPrefix* FirstChars(System::Text::RegularExpressions::RegexTree* t);
    // static System.Text.RegularExpressions.RegexPrefix Prefix(System.Text.RegularExpressions.RegexTree tree)
    // Offset: 0x15453F0
    static System::Text::RegularExpressions::RegexPrefix* Prefix(System::Text::RegularExpressions::RegexTree* tree);
    // static System.Int32 Anchors(System.Text.RegularExpressions.RegexTree tree)
    // Offset: 0x1545738
    static int Anchors(System::Text::RegularExpressions::RegexTree* tree);
    // static private System.Int32 AnchorFromType(System.Int32 type)
    // Offset: 0x154586C
    static int AnchorFromType(int type);
    // private System.Void PushInt(System.Int32 I)
    // Offset: 0x15458D8
    void PushInt(int I);
    // private System.Boolean IntIsEmpty()
    // Offset: 0x15459CC
    bool IntIsEmpty();
    // private System.Int32 PopInt()
    // Offset: 0x15459DC
    int PopInt();
    // private System.Void PushFC(System.Text.RegularExpressions.RegexFC fc)
    // Offset: 0x1545A24
    void PushFC(System::Text::RegularExpressions::RegexFC* fc);
    // private System.Boolean FCIsEmpty()
    // Offset: 0x1545B4C
    bool FCIsEmpty();
    // private System.Text.RegularExpressions.RegexFC PopFC()
    // Offset: 0x1545B5C
    System::Text::RegularExpressions::RegexFC* PopFC();
    // private System.Text.RegularExpressions.RegexFC TopFC()
    // Offset: 0x1545BA4
    System::Text::RegularExpressions::RegexFC* TopFC();
    // private System.Text.RegularExpressions.RegexFC RegexFCFromRegexTree(System.Text.RegularExpressions.RegexTree tree)
    // Offset: 0x1545238
    System::Text::RegularExpressions::RegexFC* RegexFCFromRegexTree(System::Text::RegularExpressions::RegexTree* tree);
    // private System.Void SkipChild()
    // Offset: 0x1546054
    void SkipChild();
    // private System.Void CalculateFC(System.Int32 NodeType, System.Text.RegularExpressions.RegexNode node, System.Int32 CurIndex)
    // Offset: 0x1545BE8
    void CalculateFC(int NodeType, System::Text::RegularExpressions::RegexNode* node, int CurIndex);
    // private System.Void .ctor()
    // Offset: 0x15451A8
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static RegexFCD* New_ctor();
  }; // System.Text.RegularExpressions.RegexFCD
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Text::RegularExpressions::RegexFCD*, "System.Text.RegularExpressions", "RegexFCD");
#pragma pack(pop)
