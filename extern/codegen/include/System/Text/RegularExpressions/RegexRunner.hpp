// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text::RegularExpressions
namespace System::Text::RegularExpressions {
  // Forward declaring type: Match
  class Match;
  // Forward declaring type: Regex
  class Regex;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: TimeSpan
  struct TimeSpan;
}
// Completed forward declares
// Type namespace: System.Text.RegularExpressions
namespace System::Text::RegularExpressions {
  // Autogenerated type: System.Text.RegularExpressions.RegexRunner
  class RegexRunner : public ::Il2CppObject {
    public:
    // protected internal System.Int32 runtextbeg
    // Offset: 0x10
    int runtextbeg;
    // protected internal System.Int32 runtextend
    // Offset: 0x14
    int runtextend;
    // protected internal System.Int32 runtextstart
    // Offset: 0x18
    int runtextstart;
    // protected internal System.String runtext
    // Offset: 0x20
    ::Il2CppString* runtext;
    // protected internal System.Int32 runtextpos
    // Offset: 0x28
    int runtextpos;
    // protected internal System.Int32[] runtrack
    // Offset: 0x30
    ::Array<int>* runtrack;
    // protected internal System.Int32 runtrackpos
    // Offset: 0x38
    int runtrackpos;
    // protected internal System.Int32[] runstack
    // Offset: 0x40
    ::Array<int>* runstack;
    // protected internal System.Int32 runstackpos
    // Offset: 0x48
    int runstackpos;
    // protected internal System.Int32[] runcrawl
    // Offset: 0x50
    ::Array<int>* runcrawl;
    // protected internal System.Int32 runcrawlpos
    // Offset: 0x58
    int runcrawlpos;
    // protected internal System.Int32 runtrackcount
    // Offset: 0x5C
    int runtrackcount;
    // protected internal System.Text.RegularExpressions.Match runmatch
    // Offset: 0x60
    System::Text::RegularExpressions::Match* runmatch;
    // protected internal System.Text.RegularExpressions.Regex runregex
    // Offset: 0x68
    System::Text::RegularExpressions::Regex* runregex;
    // private System.Int32 timeout
    // Offset: 0x70
    int timeout;
    // private System.Boolean ignoreTimeout
    // Offset: 0x74
    bool ignoreTimeout;
    // private System.Int32 timeoutOccursAt
    // Offset: 0x78
    int timeoutOccursAt;
    // private System.Int32 timeoutChecksToSkip
    // Offset: 0x7C
    int timeoutChecksToSkip;
    // protected internal System.Text.RegularExpressions.Match Scan(System.Text.RegularExpressions.Regex regex, System.String text, System.Int32 textbeg, System.Int32 textend, System.Int32 textstart, System.Int32 prevlen, System.Boolean quick, System.TimeSpan timeout)
    // Offset: 0x1502338
    System::Text::RegularExpressions::Match* Scan(System::Text::RegularExpressions::Regex* regex, ::Il2CppString* text, int textbeg, int textend, int textstart, int prevlen, bool quick, System::TimeSpan timeout);
    // private System.Void StartTimeoutWatch()
    // Offset: 0x150269C
    void StartTimeoutWatch();
    // protected System.Void CheckTimeout()
    // Offset: 0x15026E0
    void CheckTimeout();
    // private System.Void DoCheckTimeout()
    // Offset: 0x1502970
    void DoCheckTimeout();
    // protected System.Void Go()
    // Offset: 0xFFFFFFFF
    void Go();
    // protected System.Boolean FindFirstChar()
    // Offset: 0xFFFFFFFF
    bool FindFirstChar();
    // protected System.Void InitTrackCount()
    // Offset: 0xFFFFFFFF
    void InitTrackCount();
    // private System.Void InitMatch()
    // Offset: 0x1502708
    void InitMatch();
    // private System.Text.RegularExpressions.Match TidyMatch(System.Boolean quick)
    // Offset: 0x1502918
    System::Text::RegularExpressions::Match* TidyMatch(bool quick);
    // protected System.Void EnsureStorage()
    // Offset: 0x1502A60
    void EnsureStorage();
    // protected System.Boolean IsBoundary(System.Int32 index, System.Int32 startpos, System.Int32 endpos)
    // Offset: 0x1502C30
    bool IsBoundary(int index, int startpos, int endpos);
    // protected System.Boolean IsECMABoundary(System.Int32 index, System.Int32 startpos, System.Int32 endpos)
    // Offset: 0x1502D50
    bool IsECMABoundary(int index, int startpos, int endpos);
    // protected System.Void DoubleTrack()
    // Offset: 0x1502B74
    void DoubleTrack();
    // protected System.Void DoubleStack()
    // Offset: 0x1502AB8
    void DoubleStack();
    // protected System.Void DoubleCrawl()
    // Offset: 0x1502E70
    void DoubleCrawl();
    // protected System.Void Crawl(System.Int32 i)
    // Offset: 0x1502F2C
    void Crawl(int i);
    // protected System.Int32 Popcrawl()
    // Offset: 0x1502F94
    int Popcrawl();
    // protected System.Int32 Crawlpos()
    // Offset: 0x1502FDC
    int Crawlpos();
    // protected System.Void Capture(System.Int32 capnum, System.Int32 start, System.Int32 end)
    // Offset: 0x1503000
    void Capture(int capnum, int start, int end);
    // protected System.Void TransferCapture(System.Int32 capnum, System.Int32 uncapnum, System.Int32 start, System.Int32 end)
    // Offset: 0x150306C
    void TransferCapture(int capnum, int uncapnum, int start, int end);
    // protected System.Void Uncapture()
    // Offset: 0x15031D0
    void Uncapture();
    // protected System.Boolean IsMatched(System.Int32 cap)
    // Offset: 0x150320C
    bool IsMatched(int cap);
    // protected System.Int32 MatchIndex(System.Int32 cap)
    // Offset: 0x1503190
    int MatchIndex(int cap);
    // protected System.Int32 MatchLength(System.Int32 cap)
    // Offset: 0x15031B0
    int MatchLength(int cap);
    // protected internal System.Void .ctor()
    // Offset: 0x1502330
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static RegexRunner* New_ctor();
  }; // System.Text.RegularExpressions.RegexRunner
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Text::RegularExpressions::RegexRunner*, "System.Text.RegularExpressions", "RegexRunner");
#pragma pack(pop)
