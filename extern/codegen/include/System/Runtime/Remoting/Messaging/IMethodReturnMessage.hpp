// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Including type: System.Runtime.Remoting.Messaging.IMethodMessage
#include "System/Runtime/Remoting/Messaging/IMethodMessage.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
template<class T>
struct Array;
// Completed il2cpp-utils forward declares
// Type namespace: System.Runtime.Remoting.Messaging
namespace System::Runtime::Remoting::Messaging {
  // Size: 0x0
  #pragma pack(push, 1)
  // Autogenerated type: System.Runtime.Remoting.Messaging.IMethodReturnMessage
  // [] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: CABDD8
  class IMethodReturnMessage/*, public System::Runtime::Remoting::Messaging::IMethodMessage*/ {
    public:
    // Creating value type constructor for type: IMethodReturnMessage
    IMethodReturnMessage() noexcept {}
    // Creating interface conversion operator: operator System::Runtime::Remoting::Messaging::IMethodMessage
    operator System::Runtime::Remoting::Messaging::IMethodMessage() noexcept {
      return *reinterpret_cast<System::Runtime::Remoting::Messaging::IMethodMessage*>(this);
    }
    // public System.Exception get_Exception()
    // Offset: 0xFFFFFFFF
    System::Exception* get_Exception();
    // public System.Object[] get_OutArgs()
    // Offset: 0xFFFFFFFF
    ::Array<::Il2CppObject*>* get_OutArgs();
    // public System.Object get_ReturnValue()
    // Offset: 0xFFFFFFFF
    ::Il2CppObject* get_ReturnValue();
  }; // System.Runtime.Remoting.Messaging.IMethodReturnMessage
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Runtime::Remoting::Messaging::IMethodReturnMessage*, "System.Runtime.Remoting.Messaging", "IMethodReturnMessage");
