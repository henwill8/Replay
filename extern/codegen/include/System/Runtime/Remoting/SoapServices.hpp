// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Runtime::Remoting
namespace System::Runtime::Remoting {
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MethodBase
  class MethodBase;
  // Forward declaring type: Assembly
  class Assembly;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: System.Runtime.Remoting
namespace System::Runtime::Remoting {
  // Autogenerated type: System.Runtime.Remoting.SoapServices
  class SoapServices : public ::Il2CppObject {
    public:
    // Nested type: System::Runtime::Remoting::SoapServices::TypeInfo
    class TypeInfo;
    // Get static field: static private System.Collections.Hashtable _xmlTypes
    static System::Collections::Hashtable* _get__xmlTypes();
    // Set static field: static private System.Collections.Hashtable _xmlTypes
    static void _set__xmlTypes(System::Collections::Hashtable* value);
    // Get static field: static private System.Collections.Hashtable _xmlElements
    static System::Collections::Hashtable* _get__xmlElements();
    // Set static field: static private System.Collections.Hashtable _xmlElements
    static void _set__xmlElements(System::Collections::Hashtable* value);
    // Get static field: static private System.Collections.Hashtable _soapActions
    static System::Collections::Hashtable* _get__soapActions();
    // Set static field: static private System.Collections.Hashtable _soapActions
    static void _set__soapActions(System::Collections::Hashtable* value);
    // Get static field: static private System.Collections.Hashtable _soapActionsMethods
    static System::Collections::Hashtable* _get__soapActionsMethods();
    // Set static field: static private System.Collections.Hashtable _soapActionsMethods
    static void _set__soapActionsMethods(System::Collections::Hashtable* value);
    // Get static field: static private System.Collections.Hashtable _typeInfos
    static System::Collections::Hashtable* _get__typeInfos();
    // Set static field: static private System.Collections.Hashtable _typeInfos
    static void _set__typeInfos(System::Collections::Hashtable* value);
    // static public System.String get_XmlNsForClrTypeWithAssembly()
    // Offset: 0x133B898
    static ::Il2CppString* get_XmlNsForClrTypeWithAssembly();
    // static public System.String get_XmlNsForClrTypeWithNs()
    // Offset: 0x133B8E0
    static ::Il2CppString* get_XmlNsForClrTypeWithNs();
    // static public System.String get_XmlNsForClrTypeWithNsAndAssembly()
    // Offset: 0x133B928
    static ::Il2CppString* get_XmlNsForClrTypeWithNsAndAssembly();
    // static public System.String CodeXmlNamespaceForClrTypeNamespace(System.String typeNamespace, System.String assemblyName)
    // Offset: 0x1330CDC
    static ::Il2CppString* CodeXmlNamespaceForClrTypeNamespace(::Il2CppString* typeNamespace, ::Il2CppString* assemblyName);
    // static private System.String GetNameKey(System.String name, System.String namspace)
    // Offset: 0x133BA20
    static ::Il2CppString* GetNameKey(::Il2CppString* name, ::Il2CppString* namspace);
    // static private System.String GetAssemblyName(System.Reflection.MethodBase mb)
    // Offset: 0x133BA9C
    static ::Il2CppString* GetAssemblyName(System::Reflection::MethodBase* mb);
    // static public System.Boolean GetXmlElementForInteropType(System.Type type, out System.String xmlElement, out System.String xmlNamespace)
    // Offset: 0x133BBD0
    static bool GetXmlElementForInteropType(System::Type* type, ::Il2CppString*& xmlElement, ::Il2CppString*& xmlNamespace);
    // static public System.String GetXmlNamespaceForMethodCall(System.Reflection.MethodBase mb)
    // Offset: 0x13309AC
    static ::Il2CppString* GetXmlNamespaceForMethodCall(System::Reflection::MethodBase* mb);
    // static public System.String GetXmlNamespaceForMethodResponse(System.Reflection.MethodBase mb)
    // Offset: 0x1330908
    static ::Il2CppString* GetXmlNamespaceForMethodResponse(System::Reflection::MethodBase* mb);
    // static public System.Boolean GetXmlTypeForInteropType(System.Type type, out System.String xmlType, out System.String xmlTypeNamespace)
    // Offset: 0x133BCDC
    static bool GetXmlTypeForInteropType(System::Type* type, ::Il2CppString*& xmlType, ::Il2CppString*& xmlTypeNamespace);
    // static public System.Void PreLoad(System.Reflection.Assembly assembly)
    // Offset: 0x133BDD8
    static void PreLoad(System::Reflection::Assembly* assembly);
    // static public System.Void PreLoad(System.Type type)
    // Offset: 0x133BEB4
    static void PreLoad(System::Type* type);
    // static public System.Void RegisterInteropXmlElement(System.String xmlElement, System.String xmlNamespace, System.Type type)
    // Offset: 0x133C568
    static void RegisterInteropXmlElement(::Il2CppString* xmlElement, ::Il2CppString* xmlNamespace, System::Type* type);
    // static public System.Void RegisterInteropXmlType(System.String xmlType, System.String xmlTypeNamespace, System.Type type)
    // Offset: 0x133C3F4
    static void RegisterInteropXmlType(::Il2CppString* xmlType, ::Il2CppString* xmlTypeNamespace, System::Type* type);
    // static private System.String EncodeNs(System.String ns)
    // Offset: 0x133B970
    static ::Il2CppString* EncodeNs(::Il2CppString* ns);
    // static private System.Void .cctor()
    // Offset: 0x133C6E4
    static void _cctor();
  }; // System.Runtime.Remoting.SoapServices
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Runtime::Remoting::SoapServices*, "System.Runtime.Remoting", "SoapServices");
#pragma pack(pop)
