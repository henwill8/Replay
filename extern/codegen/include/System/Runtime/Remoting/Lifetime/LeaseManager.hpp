// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: ArrayList
  class ArrayList;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: Timer
  class Timer;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: TimeSpan
  struct TimeSpan;
}
// Forward declaring namespace: System::Runtime::Remoting
namespace System::Runtime::Remoting {
  // Forward declaring type: ServerIdentity
  class ServerIdentity;
}
// Completed forward declares
// Type namespace: System.Runtime.Remoting.Lifetime
namespace System::Runtime::Remoting::Lifetime {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: System.Runtime.Remoting.Lifetime.LeaseManager
  // [] Offset: FFFFFFFF
  class LeaseManager : public ::Il2CppObject {
    public:
    // private System.Collections.ArrayList _objects
    // Size: 0x8
    // Offset: 0x10
    System::Collections::ArrayList* objects;
    // Field size check
    static_assert(sizeof(System::Collections::ArrayList*) == 0x8);
    // private System.Threading.Timer _timer
    // Size: 0x8
    // Offset: 0x18
    System::Threading::Timer* timer;
    // Field size check
    static_assert(sizeof(System::Threading::Timer*) == 0x8);
    // Creating value type constructor for type: LeaseManager
    LeaseManager(System::Collections::ArrayList* objects_ = {}, System::Threading::Timer* timer_ = {}) noexcept : objects{objects_}, timer{timer_} {}
    // public System.Void SetPollTime(System.TimeSpan timeSpan)
    // Offset: 0x131CE34
    void SetPollTime(System::TimeSpan timeSpan);
    // public System.Void TrackLifetime(System.Runtime.Remoting.ServerIdentity identity)
    // Offset: 0x131CF00
    void TrackLifetime(System::Runtime::Remoting::ServerIdentity* identity);
    // public System.Void StartManager()
    // Offset: 0x131D00C
    void StartManager();
    // public System.Void StopManager()
    // Offset: 0x131D178
    void StopManager();
    // public System.Void ManageLeases(System.Object state)
    // Offset: 0x131D1B8
    void ManageLeases(::Il2CppObject* state);
    // public System.Void .ctor()
    // Offset: 0x131D3E8
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LeaseManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Runtime::Remoting::Lifetime::LeaseManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LeaseManager*, creationType>()));
    }
  }; // System.Runtime.Remoting.Lifetime.LeaseManager
  #pragma pack(pop)
  static check_size<sizeof(LeaseManager), 24 + sizeof(System::Threading::Timer*)> __System_Runtime_Remoting_Lifetime_LeaseManagerSizeCheck;
  static_assert(sizeof(LeaseManager) == 0x20);
}
DEFINE_IL2CPP_ARG_TYPE(System::Runtime::Remoting::Lifetime::LeaseManager*, "System.Runtime.Remoting.Lifetime", "LeaseManager");
