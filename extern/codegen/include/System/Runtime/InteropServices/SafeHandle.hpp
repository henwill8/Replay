// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
#include "System/Runtime/ConstrainedExecution/CriticalFinalizerObject.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
// Type namespace: System.Runtime.InteropServices
namespace System::Runtime::InteropServices {
  // Autogenerated type: System.Runtime.InteropServices.SafeHandle
  class SafeHandle : public System::Runtime::ConstrainedExecution::CriticalFinalizerObject/*, public System::IDisposable*/ {
    public:
    // protected System.IntPtr handle
    // Offset: 0x10
    System::IntPtr handle;
    // private System.Int32 _state
    // Offset: 0x18
    int state;
    // private System.Boolean _ownsHandle
    // Offset: 0x1C
    bool ownsHandle;
    // private System.Boolean _fullyInitialized
    // Offset: 0x1D
    bool fullyInitialized;
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // static field const value: static private System.Int32 RefCount_Mask
    static constexpr const int RefCount_Mask = 2147483644;
    // Get static field: static private System.Int32 RefCount_Mask
    static int _get_RefCount_Mask();
    // Set static field: static private System.Int32 RefCount_Mask
    static void _set_RefCount_Mask(int value);
    // static field const value: static private System.Int32 RefCount_One
    static constexpr const int RefCount_One = 4;
    // Get static field: static private System.Int32 RefCount_One
    static int _get_RefCount_One();
    // Set static field: static private System.Int32 RefCount_One
    static void _set_RefCount_One(int value);
    // protected System.Void .ctor(System.IntPtr invalidHandleValue, System.Boolean ownsHandle)
    // Offset: 0x1165F48
    static SafeHandle* New_ctor(System::IntPtr invalidHandleValue, bool ownsHandle);
    // protected System.Void SetHandle(System.IntPtr handle)
    // Offset: 0x1166064
    void SetHandle(System::IntPtr handle);
    // public System.IntPtr DangerousGetHandle()
    // Offset: 0x116606C
    System::IntPtr DangerousGetHandle();
    // public System.Boolean get_IsClosed()
    // Offset: 0x1166074
    bool get_IsClosed();
    // public System.Boolean get_IsInvalid()
    // Offset: 0xFFFFFFFF
    bool get_IsInvalid();
    // public System.Void Close()
    // Offset: 0x1166080
    void Close();
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x11660A0
    void Dispose(bool disposing);
    // protected System.Boolean ReleaseHandle()
    // Offset: 0xFFFFFFFF
    bool ReleaseHandle();
    // public System.Void SetHandleAsInvalid()
    // Offset: 0x116617C
    void SetHandleAsInvalid();
    // public System.Void DangerousAddRef(ref System.Boolean success)
    // Offset: 0x1165DDC
    void DangerousAddRef(bool& success);
    // public System.Void DangerousRelease()
    // Offset: 0x1165F40
    void DangerousRelease();
    // private System.Void InternalDispose()
    // Offset: 0x11660BC
    void InternalDispose();
    // private System.Void InternalFinalize()
    // Offset: 0x1166168
    void InternalFinalize();
    // private System.Void DangerousReleaseInternal(System.Boolean dispose)
    // Offset: 0x1166210
    void DangerousReleaseInternal(bool dispose);
    // protected override System.Void Finalize()
    // Offset: 0x1165FF0
    // Implemented from: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
    // Base method: System.Void CriticalFinalizerObject::Finalize()
    void Finalize();
    // public System.Void Dispose()
    // Offset: 0x1166090
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
  }; // System.Runtime.InteropServices.SafeHandle
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Runtime::InteropServices::SafeHandle*, "System.Runtime.InteropServices", "SafeHandle");
#pragma pack(pop)
