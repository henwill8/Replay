// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MemberInfo
  class MemberInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: System.Runtime.Serialization.Formatters.Binary
namespace System::Runtime::Serialization::Formatters::Binary {
  // Autogenerated type: System.Runtime.Serialization.Formatters.Binary.SerObjectInfoCache
  class SerObjectInfoCache : public ::Il2CppObject {
    public:
    // System.String fullTypeName
    // Offset: 0x10
    ::Il2CppString* fullTypeName;
    // System.String assemblyString
    // Offset: 0x18
    ::Il2CppString* assemblyString;
    // System.Boolean hasTypeForwardedFrom
    // Offset: 0x20
    bool hasTypeForwardedFrom;
    // System.Reflection.MemberInfo[] memberInfos
    // Offset: 0x28
    ::Array<System::Reflection::MemberInfo*>* memberInfos;
    // System.String[] memberNames
    // Offset: 0x30
    ::Array<::Il2CppString*>* memberNames;
    // System.Type[] memberTypes
    // Offset: 0x38
    ::Array<System::Type*>* memberTypes;
    // System.Void .ctor(System.String typeName, System.String assemblyName, System.Boolean hasTypeForwardedFrom)
    // Offset: 0xFF2AAC
    static SerObjectInfoCache* New_ctor(::Il2CppString* typeName, ::Il2CppString* assemblyName, bool hasTypeForwardedFrom);
    // System.Void .ctor(System.Type type)
    // Offset: 0xFF1B1C
    static SerObjectInfoCache* New_ctor(System::Type* type);
  }; // System.Runtime.Serialization.Formatters.Binary.SerObjectInfoCache
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Runtime::Serialization::Formatters::Binary::SerObjectInfoCache*, "System.Runtime.Serialization.Formatters.Binary", "SerObjectInfoCache");
#pragma pack(pop)
