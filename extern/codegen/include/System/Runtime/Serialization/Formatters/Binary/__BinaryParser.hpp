// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum
#include "System/Runtime/Serialization/Formatters/Binary/BinaryTypeEnum.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Runtime::Serialization::Formatters::Binary
namespace System::Runtime::Serialization::Formatters::Binary {
  // Forward declaring type: ObjectReader
  class ObjectReader;
  // Forward declaring type: SizedArray
  class SizedArray;
  // Forward declaring type: SerStack
  class SerStack;
  // Forward declaring type: ParseRecord
  class ParseRecord;
  // Forward declaring type: BinaryAssemblyInfo
  class BinaryAssemblyInfo;
  // Forward declaring type: BinaryObject
  class BinaryObject;
  // Forward declaring type: BinaryObjectWithMap
  class BinaryObjectWithMap;
  // Forward declaring type: BinaryObjectWithMapTyped
  class BinaryObjectWithMapTyped;
  // Forward declaring type: BinaryObjectString
  class BinaryObjectString;
  // Forward declaring type: BinaryCrossAppDomainString
  class BinaryCrossAppDomainString;
  // Forward declaring type: MemberPrimitiveTyped
  class MemberPrimitiveTyped;
  // Forward declaring type: MemberPrimitiveUnTyped
  class MemberPrimitiveUnTyped;
  // Forward declaring type: MemberReference
  class MemberReference;
  // Forward declaring type: ObjectNull
  class ObjectNull;
  // Forward declaring type: MessageEnd
  class MessageEnd;
  // Forward declaring type: BinaryHeaderEnum
  struct BinaryHeaderEnum;
  // Forward declaring type: InternalPrimitiveTypeE
  struct InternalPrimitiveTypeE;
  // Forward declaring type: ObjectProgress
  class ObjectProgress;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
  // Forward declaring type: BinaryReader
  class BinaryReader;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Decimal
  struct Decimal;
  // Forward declaring type: TimeSpan
  struct TimeSpan;
  // Forward declaring type: DateTime
  struct DateTime;
}
// Completed forward declares
// Type namespace: System.Runtime.Serialization.Formatters.Binary
namespace System::Runtime::Serialization::Formatters::Binary {
  // Size: 0xC8
  #pragma pack(push, 1)
  // Autogenerated type: System.Runtime.Serialization.Formatters.Binary.__BinaryParser
  // [] Offset: FFFFFFFF
  class __BinaryParser : public ::Il2CppObject {
    public:
    // System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader
    // Size: 0x8
    // Offset: 0x10
    System::Runtime::Serialization::Formatters::Binary::ObjectReader* objectReader;
    // Field size check
    static_assert(sizeof(System::Runtime::Serialization::Formatters::Binary::ObjectReader*) == 0x8);
    // System.IO.Stream input
    // Size: 0x8
    // Offset: 0x18
    System::IO::Stream* input;
    // Field size check
    static_assert(sizeof(System::IO::Stream*) == 0x8);
    // System.Int64 topId
    // Size: 0x8
    // Offset: 0x20
    int64_t topId;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // System.Int64 headerId
    // Size: 0x8
    // Offset: 0x28
    int64_t headerId;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // System.Runtime.Serialization.Formatters.Binary.SizedArray objectMapIdTable
    // Size: 0x8
    // Offset: 0x30
    System::Runtime::Serialization::Formatters::Binary::SizedArray* objectMapIdTable;
    // Field size check
    static_assert(sizeof(System::Runtime::Serialization::Formatters::Binary::SizedArray*) == 0x8);
    // System.Runtime.Serialization.Formatters.Binary.SizedArray assemIdToAssemblyTable
    // Size: 0x8
    // Offset: 0x38
    System::Runtime::Serialization::Formatters::Binary::SizedArray* assemIdToAssemblyTable;
    // Field size check
    static_assert(sizeof(System::Runtime::Serialization::Formatters::Binary::SizedArray*) == 0x8);
    // System.Runtime.Serialization.Formatters.Binary.SerStack stack
    // Size: 0x8
    // Offset: 0x40
    System::Runtime::Serialization::Formatters::Binary::SerStack* stack;
    // Field size check
    static_assert(sizeof(System::Runtime::Serialization::Formatters::Binary::SerStack*) == 0x8);
    // System.Runtime.Serialization.Formatters.Binary.BinaryTypeEnum expectedType
    // Size: 0x4
    // Offset: 0x48
    System::Runtime::Serialization::Formatters::Binary::BinaryTypeEnum expectedType;
    // Field size check
    static_assert(sizeof(System::Runtime::Serialization::Formatters::Binary::BinaryTypeEnum) == 0x4);
    // Padding between fields: expectedType and: expectedTypeInformation
    char __padding7[0x4] = {};
    // System.Object expectedTypeInformation
    // Size: 0x8
    // Offset: 0x50
    ::Il2CppObject* expectedTypeInformation;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // System.Runtime.Serialization.Formatters.Binary.ParseRecord PRS
    // Size: 0x8
    // Offset: 0x58
    System::Runtime::Serialization::Formatters::Binary::ParseRecord* PRS;
    // Field size check
    static_assert(sizeof(System::Runtime::Serialization::Formatters::Binary::ParseRecord*) == 0x8);
    // private System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo systemAssemblyInfo
    // Size: 0x8
    // Offset: 0x60
    System::Runtime::Serialization::Formatters::Binary::BinaryAssemblyInfo* systemAssemblyInfo;
    // Field size check
    static_assert(sizeof(System::Runtime::Serialization::Formatters::Binary::BinaryAssemblyInfo*) == 0x8);
    // private System.IO.BinaryReader dataReader
    // Size: 0x8
    // Offset: 0x68
    System::IO::BinaryReader* dataReader;
    // Field size check
    static_assert(sizeof(System::IO::BinaryReader*) == 0x8);
    // private System.Runtime.Serialization.Formatters.Binary.SerStack opPool
    // Size: 0x8
    // Offset: 0x70
    System::Runtime::Serialization::Formatters::Binary::SerStack* opPool;
    // Field size check
    static_assert(sizeof(System::Runtime::Serialization::Formatters::Binary::SerStack*) == 0x8);
    // private System.Runtime.Serialization.Formatters.Binary.BinaryObject binaryObject
    // Size: 0x8
    // Offset: 0x78
    System::Runtime::Serialization::Formatters::Binary::BinaryObject* binaryObject;
    // Field size check
    static_assert(sizeof(System::Runtime::Serialization::Formatters::Binary::BinaryObject*) == 0x8);
    // private System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMap bowm
    // Size: 0x8
    // Offset: 0x80
    System::Runtime::Serialization::Formatters::Binary::BinaryObjectWithMap* bowm;
    // Field size check
    static_assert(sizeof(System::Runtime::Serialization::Formatters::Binary::BinaryObjectWithMap*) == 0x8);
    // private System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMapTyped bowmt
    // Size: 0x8
    // Offset: 0x88
    System::Runtime::Serialization::Formatters::Binary::BinaryObjectWithMapTyped* bowmt;
    // Field size check
    static_assert(sizeof(System::Runtime::Serialization::Formatters::Binary::BinaryObjectWithMapTyped*) == 0x8);
    // System.Runtime.Serialization.Formatters.Binary.BinaryObjectString objectString
    // Size: 0x8
    // Offset: 0x90
    System::Runtime::Serialization::Formatters::Binary::BinaryObjectString* objectString;
    // Field size check
    static_assert(sizeof(System::Runtime::Serialization::Formatters::Binary::BinaryObjectString*) == 0x8);
    // System.Runtime.Serialization.Formatters.Binary.BinaryCrossAppDomainString crossAppDomainString
    // Size: 0x8
    // Offset: 0x98
    System::Runtime::Serialization::Formatters::Binary::BinaryCrossAppDomainString* crossAppDomainString;
    // Field size check
    static_assert(sizeof(System::Runtime::Serialization::Formatters::Binary::BinaryCrossAppDomainString*) == 0x8);
    // System.Runtime.Serialization.Formatters.Binary.MemberPrimitiveTyped memberPrimitiveTyped
    // Size: 0x8
    // Offset: 0xA0
    System::Runtime::Serialization::Formatters::Binary::MemberPrimitiveTyped* memberPrimitiveTyped;
    // Field size check
    static_assert(sizeof(System::Runtime::Serialization::Formatters::Binary::MemberPrimitiveTyped*) == 0x8);
    // private System.Byte[] byteBuffer
    // Size: 0x8
    // Offset: 0xA8
    ::Array<uint8_t>* byteBuffer;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // System.Runtime.Serialization.Formatters.Binary.MemberPrimitiveUnTyped memberPrimitiveUnTyped
    // Size: 0x8
    // Offset: 0xB0
    System::Runtime::Serialization::Formatters::Binary::MemberPrimitiveUnTyped* memberPrimitiveUnTyped;
    // Field size check
    static_assert(sizeof(System::Runtime::Serialization::Formatters::Binary::MemberPrimitiveUnTyped*) == 0x8);
    // System.Runtime.Serialization.Formatters.Binary.MemberReference memberReference
    // Size: 0x8
    // Offset: 0xB8
    System::Runtime::Serialization::Formatters::Binary::MemberReference* memberReference;
    // Field size check
    static_assert(sizeof(System::Runtime::Serialization::Formatters::Binary::MemberReference*) == 0x8);
    // System.Runtime.Serialization.Formatters.Binary.ObjectNull objectNull
    // Size: 0x8
    // Offset: 0xC0
    System::Runtime::Serialization::Formatters::Binary::ObjectNull* objectNull;
    // Field size check
    static_assert(sizeof(System::Runtime::Serialization::Formatters::Binary::ObjectNull*) == 0x8);
    // Creating value type constructor for type: __BinaryParser
    __BinaryParser(System::Runtime::Serialization::Formatters::Binary::ObjectReader* objectReader_ = {}, System::IO::Stream* input_ = {}, int64_t topId_ = {}, int64_t headerId_ = {}, System::Runtime::Serialization::Formatters::Binary::SizedArray* objectMapIdTable_ = {}, System::Runtime::Serialization::Formatters::Binary::SizedArray* assemIdToAssemblyTable_ = {}, System::Runtime::Serialization::Formatters::Binary::SerStack* stack_ = {}, System::Runtime::Serialization::Formatters::Binary::BinaryTypeEnum expectedType_ = {}, ::Il2CppObject* expectedTypeInformation_ = {}, System::Runtime::Serialization::Formatters::Binary::ParseRecord* PRS_ = {}, System::Runtime::Serialization::Formatters::Binary::BinaryAssemblyInfo* systemAssemblyInfo_ = {}, System::IO::BinaryReader* dataReader_ = {}, System::Runtime::Serialization::Formatters::Binary::SerStack* opPool_ = {}, System::Runtime::Serialization::Formatters::Binary::BinaryObject* binaryObject_ = {}, System::Runtime::Serialization::Formatters::Binary::BinaryObjectWithMap* bowm_ = {}, System::Runtime::Serialization::Formatters::Binary::BinaryObjectWithMapTyped* bowmt_ = {}, System::Runtime::Serialization::Formatters::Binary::BinaryObjectString* objectString_ = {}, System::Runtime::Serialization::Formatters::Binary::BinaryCrossAppDomainString* crossAppDomainString_ = {}, System::Runtime::Serialization::Formatters::Binary::MemberPrimitiveTyped* memberPrimitiveTyped_ = {}, ::Array<uint8_t>* byteBuffer_ = {}, System::Runtime::Serialization::Formatters::Binary::MemberPrimitiveUnTyped* memberPrimitiveUnTyped_ = {}, System::Runtime::Serialization::Formatters::Binary::MemberReference* memberReference_ = {}, System::Runtime::Serialization::Formatters::Binary::ObjectNull* objectNull_ = {}) noexcept : objectReader{objectReader_}, input{input_}, topId{topId_}, headerId{headerId_}, objectMapIdTable{objectMapIdTable_}, assemIdToAssemblyTable{assemIdToAssemblyTable_}, stack{stack_}, expectedType{expectedType_}, expectedTypeInformation{expectedTypeInformation_}, PRS{PRS_}, systemAssemblyInfo{systemAssemblyInfo_}, dataReader{dataReader_}, opPool{opPool_}, binaryObject{binaryObject_}, bowm{bowm_}, bowmt{bowmt_}, objectString{objectString_}, crossAppDomainString{crossAppDomainString_}, memberPrimitiveTyped{memberPrimitiveTyped_}, byteBuffer{byteBuffer_}, memberPrimitiveUnTyped{memberPrimitiveUnTyped_}, memberReference{memberReference_}, objectNull{objectNull_} {}
    // Get static field: static private System.Text.Encoding encoding
    static System::Text::Encoding* _get_encoding();
    // Set static field: static private System.Text.Encoding encoding
    static void _set_encoding(System::Text::Encoding* value);
    // Get static field: static System.Runtime.Serialization.Formatters.Binary.MessageEnd messageEnd
    static System::Runtime::Serialization::Formatters::Binary::MessageEnd* _get_messageEnd();
    // Set static field: static System.Runtime.Serialization.Formatters.Binary.MessageEnd messageEnd
    static void _set_messageEnd(System::Runtime::Serialization::Formatters::Binary::MessageEnd* value);
    // System.Void .ctor(System.IO.Stream stream, System.Runtime.Serialization.Formatters.Binary.ObjectReader objectReader)
    // Offset: 0x1550938
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static __BinaryParser* New_ctor(System::IO::Stream* stream, System::Runtime::Serialization::Formatters::Binary::ObjectReader* objectReader) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Runtime::Serialization::Formatters::Binary::__BinaryParser::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<__BinaryParser*, creationType>(stream, objectReader)));
    }
    // System.Runtime.Serialization.Formatters.Binary.BinaryAssemblyInfo get_SystemAssemblyInfo()
    // Offset: 0x1550A54
    System::Runtime::Serialization::Formatters::Binary::BinaryAssemblyInfo* get_SystemAssemblyInfo();
    // System.Runtime.Serialization.Formatters.Binary.SizedArray get_ObjectMapIdTable()
    // Offset: 0x1550B08
    System::Runtime::Serialization::Formatters::Binary::SizedArray* get_ObjectMapIdTable();
    // System.Runtime.Serialization.Formatters.Binary.SizedArray get_AssemIdToAssemblyTable()
    // Offset: 0x1550B7C
    System::Runtime::Serialization::Formatters::Binary::SizedArray* get_AssemIdToAssemblyTable();
    // System.Runtime.Serialization.Formatters.Binary.ParseRecord get_prs()
    // Offset: 0x1550BF4
    System::Runtime::Serialization::Formatters::Binary::ParseRecord* get_prs();
    // System.Void Run()
    // Offset: 0x154522C
    void Run();
    // System.Void ReadBegin()
    // Offset: 0x1550C6C
    void ReadBegin();
    // System.Void ReadEnd()
    // Offset: 0x15529D4
    void ReadEnd();
    // System.Boolean ReadBoolean()
    // Offset: 0x1552CD8
    bool ReadBoolean();
    // System.Byte ReadByte()
    // Offset: 0x1542A80
    uint8_t ReadByte();
    // System.Byte[] ReadBytes(System.Int32 length)
    // Offset: 0x154EE34
    ::Array<uint8_t>* ReadBytes(int length);
    // System.Void ReadBytes(System.Byte[] byteA, System.Int32 offset, System.Int32 size)
    // Offset: 0x1552CF8
    void ReadBytes(::Array<uint8_t>* byteA, int offset, int size);
    // System.Char ReadChar()
    // Offset: 0x1552D80
    ::Il2CppChar ReadChar();
    // System.Char[] ReadChars(System.Int32 length)
    // Offset: 0x1552DA0
    ::Array<::Il2CppChar>* ReadChars(int length);
    // System.Decimal ReadDecimal()
    // Offset: 0x1552DC4
    System::Decimal ReadDecimal();
    // System.Single ReadSingle()
    // Offset: 0x1552E84
    float ReadSingle();
    // System.Double ReadDouble()
    // Offset: 0x1552EA8
    double ReadDouble();
    // System.Int16 ReadInt16()
    // Offset: 0x1552ECC
    int16_t ReadInt16();
    // System.Int32 ReadInt32()
    // Offset: 0x1542F68
    int ReadInt32();
    // System.Int64 ReadInt64()
    // Offset: 0x1552EF0
    int64_t ReadInt64();
    // System.SByte ReadSByte()
    // Offset: 0x1552F14
    int8_t ReadSByte();
    // System.String ReadString()
    // Offset: 0x1552F34
    ::Il2CppString* ReadString();
    // System.TimeSpan ReadTimeSpan()
    // Offset: 0x1552F58
    System::TimeSpan ReadTimeSpan();
    // System.DateTime ReadDateTime()
    // Offset: 0x1552F7C
    System::DateTime ReadDateTime();
    // System.UInt16 ReadUInt16()
    // Offset: 0x1553008
    uint16_t ReadUInt16();
    // System.UInt32 ReadUInt32()
    // Offset: 0x155302C
    uint ReadUInt32();
    // System.UInt64 ReadUInt64()
    // Offset: 0x1553050
    uint64_t ReadUInt64();
    // System.Void ReadSerializationHeaderRecord()
    // Offset: 0x1550C70
    void ReadSerializationHeaderRecord();
    // System.Void ReadAssembly(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum)
    // Offset: 0x1550D30
    void ReadAssembly(System::Runtime::Serialization::Formatters::Binary::BinaryHeaderEnum binaryHeaderEnum);
    // private System.Void ReadObject()
    // Offset: 0x1550F8C
    void ReadObject();
    // System.Void ReadCrossAppDomainMap()
    // Offset: 0x1551350
    void ReadCrossAppDomainMap();
    // System.Void ReadObjectWithMap(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum)
    // Offset: 0x1551500
    void ReadObjectWithMap(System::Runtime::Serialization::Formatters::Binary::BinaryHeaderEnum binaryHeaderEnum);
    // private System.Void ReadObjectWithMap(System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMap record)
    // Offset: 0x1553120
    void ReadObjectWithMap(System::Runtime::Serialization::Formatters::Binary::BinaryObjectWithMap* record);
    // System.Void ReadObjectWithMapTyped(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum)
    // Offset: 0x15515C0
    void ReadObjectWithMapTyped(System::Runtime::Serialization::Formatters::Binary::BinaryHeaderEnum binaryHeaderEnum);
    // private System.Void ReadObjectWithMapTyped(System.Runtime.Serialization.Formatters.Binary.BinaryObjectWithMapTyped record)
    // Offset: 0x1553598
    void ReadObjectWithMapTyped(System::Runtime::Serialization::Formatters::Binary::BinaryObjectWithMapTyped* record);
    // private System.Void ReadObjectString(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum)
    // Offset: 0x1551670
    void ReadObjectString(System::Runtime::Serialization::Formatters::Binary::BinaryHeaderEnum binaryHeaderEnum);
    // private System.Void ReadMemberPrimitiveTyped()
    // Offset: 0x15521A4
    void ReadMemberPrimitiveTyped();
    // private System.Void ReadArray(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum)
    // Offset: 0x1551BA8
    void ReadArray(System::Runtime::Serialization::Formatters::Binary::BinaryHeaderEnum binaryHeaderEnum);
    // private System.Void ReadArrayAsBytes(System.Runtime.Serialization.Formatters.Binary.ParseRecord pr)
    // Offset: 0x1553A38
    void ReadArrayAsBytes(System::Runtime::Serialization::Formatters::Binary::ParseRecord* pr);
    // private System.Void ReadMemberPrimitiveUnTyped()
    // Offset: 0x15529D8
    void ReadMemberPrimitiveUnTyped();
    // private System.Void ReadMemberReference()
    // Offset: 0x15524FC
    void ReadMemberReference();
    // private System.Void ReadObjectNull(System.Runtime.Serialization.Formatters.Binary.BinaryHeaderEnum binaryHeaderEnum)
    // Offset: 0x15526A4
    void ReadObjectNull(System::Runtime::Serialization::Formatters::Binary::BinaryHeaderEnum binaryHeaderEnum);
    // private System.Void ReadMessageEnd()
    // Offset: 0x1552864
    void ReadMessageEnd();
    // System.Object ReadValue(System.Runtime.Serialization.Formatters.Binary.InternalPrimitiveTypeE code)
    // Offset: 0x1542AA0
    ::Il2CppObject* ReadValue(System::Runtime::Serialization::Formatters::Binary::InternalPrimitiveTypeE code);
    // private System.Runtime.Serialization.Formatters.Binary.ObjectProgress GetOp()
    // Offset: 0x1553074
    System::Runtime::Serialization::Formatters::Binary::ObjectProgress* GetOp();
    // private System.Void PutOp(System.Runtime.Serialization.Formatters.Binary.ObjectProgress op)
    // Offset: 0x1552C40
    void PutOp(System::Runtime::Serialization::Formatters::Binary::ObjectProgress* op);
    // static private System.Void .cctor()
    // Offset: 0x1553DC0
    static void _cctor();
  }; // System.Runtime.Serialization.Formatters.Binary.__BinaryParser
  #pragma pack(pop)
  static check_size<sizeof(__BinaryParser), 192 + sizeof(System::Runtime::Serialization::Formatters::Binary::ObjectNull*)> __System_Runtime_Serialization_Formatters_Binary___BinaryParserSizeCheck;
  static_assert(sizeof(__BinaryParser) == 0xC8);
}
DEFINE_IL2CPP_ARG_TYPE(System::Runtime::Serialization::Formatters::Binary::__BinaryParser*, "System.Runtime.Serialization.Formatters.Binary", "__BinaryParser");
