// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.SemaphoreSlim
#include "System/Threading/SemaphoreSlim.hpp"
// Including type: System.Threading.Tasks.Task`1
#include "System/Threading/Tasks/Task_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: ThreadAbortException
  class ThreadAbortException;
}
// Completed forward declares
// Type namespace: System.Threading
namespace System::Threading {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Threading.SemaphoreSlim/TaskNode
  // [] Offset: FFFFFFFF
  class SemaphoreSlim::TaskNode : public System::Threading::Tasks::Task_1<bool> {
    public:
    // System.Threading.SemaphoreSlim/TaskNode Prev
    // Size: 0x8
    // Offset: 0x58
    System::Threading::SemaphoreSlim::TaskNode* Prev;
    // Field size check
    static_assert(sizeof(System::Threading::SemaphoreSlim::TaskNode*) == 0x8);
    // System.Threading.SemaphoreSlim/TaskNode Next
    // Size: 0x8
    // Offset: 0x60
    System::Threading::SemaphoreSlim::TaskNode* Next;
    // Field size check
    static_assert(sizeof(System::Threading::SemaphoreSlim::TaskNode*) == 0x8);
    // Creating value type constructor for type: TaskNode
    TaskNode(System::Threading::SemaphoreSlim::TaskNode* Prev_ = {}, System::Threading::SemaphoreSlim::TaskNode* Next_ = {}) noexcept : Prev{Prev_}, Next{Next_} {}
    // System.Void .ctor()
    // Offset: 0x17AC334
    // Implemented from: System.Threading.Tasks.Task`1
    // Base method: System.Void Task_1::.ctor()
    // Base method: System.Void Task::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SemaphoreSlim::TaskNode* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SemaphoreSlim::TaskNode::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SemaphoreSlim::TaskNode*, creationType>()));
    }
    // private System.Void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
    // Offset: 0x17AD704
    // Implemented from: System.Threading.IThreadPoolWorkItem
    // Base method: System.Void IThreadPoolWorkItem::ExecuteWorkItem()
    void System_Threading_IThreadPoolWorkItem_ExecuteWorkItem();
    // private System.Void System.Threading.IThreadPoolWorkItem.MarkAborted(System.Threading.ThreadAbortException tae)
    // Offset: 0x17AD758
    // Implemented from: System.Threading.IThreadPoolWorkItem
    // Base method: System.Void IThreadPoolWorkItem::MarkAborted(System.Threading.ThreadAbortException tae)
    void System_Threading_IThreadPoolWorkItem_MarkAborted(System::Threading::ThreadAbortException* tae);
  }; // System.Threading.SemaphoreSlim/TaskNode
  // WARNING Not writing size check since size may be invalid!
}
DEFINE_IL2CPP_ARG_TYPE(System::Threading::SemaphoreSlim::TaskNode*, "System.Threading", "SemaphoreSlim/TaskNode");
