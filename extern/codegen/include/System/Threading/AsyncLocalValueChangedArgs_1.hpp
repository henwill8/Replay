// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Threading
namespace System::Threading {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Threading.AsyncLocalValueChangedArgs`1
  // [] Offset: FFFFFFFF
  template<typename T>
  struct AsyncLocalValueChangedArgs_1/*, public System::ValueType*/ {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xCAF8E0
    // private T <PreviousValue>k__BackingField
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T PreviousValue;
    // [CompilerGeneratedAttribute] Offset: 0xCAF8F0
    // private T <CurrentValue>k__BackingField
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    T CurrentValue;
    // [CompilerGeneratedAttribute] Offset: 0xCAF900
    // private System.Boolean <ThreadContextChanged>k__BackingField
    // Size: 0x1
    // Offset: 0x0
    bool ThreadContextChanged;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: AsyncLocalValueChangedArgs_1
    constexpr AsyncLocalValueChangedArgs_1(T PreviousValue_ = {}, T CurrentValue_ = {}, bool ThreadContextChanged_ = {}) noexcept : PreviousValue{PreviousValue_}, CurrentValue{CurrentValue_}, ThreadContextChanged{ThreadContextChanged_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // public T get_PreviousValue()
    // Offset: 0xFFFFFFFF
    T get_PreviousValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::AsyncLocalValueChangedArgs_1::get_PreviousValue");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "get_PreviousValue", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<T, false>(*this, ___internal__method);
    }
    // private System.Void set_PreviousValue(T value)
    // Offset: 0xFFFFFFFF
    void set_PreviousValue(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::AsyncLocalValueChangedArgs_1::set_PreviousValue");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "set_PreviousValue", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
    }
    // public T get_CurrentValue()
    // Offset: 0xFFFFFFFF
    T get_CurrentValue() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::AsyncLocalValueChangedArgs_1::get_CurrentValue");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "get_CurrentValue", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<T, false>(*this, ___internal__method);
    }
    // private System.Void set_CurrentValue(T value)
    // Offset: 0xFFFFFFFF
    void set_CurrentValue(T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::AsyncLocalValueChangedArgs_1::set_CurrentValue");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "set_CurrentValue", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
    }
    // private System.Void set_ThreadContextChanged(System.Boolean value)
    // Offset: 0xFFFFFFFF
    void set_ThreadContextChanged(bool value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::AsyncLocalValueChangedArgs_1::set_ThreadContextChanged");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "set_ThreadContextChanged", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, value);
    }
    // System.Void .ctor(T previousValue, T currentValue, System.Boolean contextChanged)
    // Offset: 0xFFFFFFFF
    // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    // ABORTED: conflicts with another method.  AsyncLocalValueChangedArgs_1(T previousValue, T currentValue, bool contextChanged)
  }; // System.Threading.AsyncLocalValueChangedArgs`1
  // Could not write size check! Type: System.Threading.AsyncLocalValueChangedArgs`1 is generic, or has no fields that are valid for size checks!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(System::Threading::AsyncLocalValueChangedArgs_1, "System.Threading", "AsyncLocalValueChangedArgs`1");
