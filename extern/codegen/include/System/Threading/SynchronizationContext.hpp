// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.SynchronizationContextProperties
#include "System/Threading/SynchronizationContextProperties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: SendOrPostCallback
  class SendOrPostCallback;
}
// Completed forward declares
// Type namespace: System.Threading
namespace System::Threading {
  // Size: 0x14
  #pragma pack(push, 1)
  // Autogenerated type: System.Threading.SynchronizationContext
  // [] Offset: FFFFFFFF
  class SynchronizationContext : public ::Il2CppObject {
    public:
    // private System.Threading.SynchronizationContextProperties _props
    // Size: 0x4
    // Offset: 0x10
    System::Threading::SynchronizationContextProperties props;
    // Field size check
    static_assert(sizeof(System::Threading::SynchronizationContextProperties) == 0x4);
    // Creating value type constructor for type: SynchronizationContext
    SynchronizationContext(System::Threading::SynchronizationContextProperties props_ = {}) noexcept : props{props_} {}
    // Creating conversion operator: operator System::Threading::SynchronizationContextProperties
    constexpr operator System::Threading::SynchronizationContextProperties() const noexcept {
      return props;
    }
    // Get static field: static private System.Type s_cachedPreparedType1
    static System::Type* _get_s_cachedPreparedType1();
    // Set static field: static private System.Type s_cachedPreparedType1
    static void _set_s_cachedPreparedType1(System::Type* value);
    // Get static field: static private System.Type s_cachedPreparedType2
    static System::Type* _get_s_cachedPreparedType2();
    // Set static field: static private System.Type s_cachedPreparedType2
    static void _set_s_cachedPreparedType2(System::Type* value);
    // Get static field: static private System.Type s_cachedPreparedType3
    static System::Type* _get_s_cachedPreparedType3();
    // Set static field: static private System.Type s_cachedPreparedType3
    static void _set_s_cachedPreparedType3(System::Type* value);
    // Get static field: static private System.Type s_cachedPreparedType4
    static System::Type* _get_s_cachedPreparedType4();
    // Set static field: static private System.Type s_cachedPreparedType4
    static void _set_s_cachedPreparedType4(System::Type* value);
    // Get static field: static private System.Type s_cachedPreparedType5
    static System::Type* _get_s_cachedPreparedType5();
    // Set static field: static private System.Type s_cachedPreparedType5
    static void _set_s_cachedPreparedType5(System::Type* value);
    // public System.Void Send(System.Threading.SendOrPostCallback d, System.Object state)
    // Offset: 0x17AE434
    void Send(System::Threading::SendOrPostCallback* d, ::Il2CppObject* state);
    // public System.Void Post(System.Threading.SendOrPostCallback d, System.Object state)
    // Offset: 0x17AE450
    void Post(System::Threading::SendOrPostCallback* d, ::Il2CppObject* state);
    // public System.Void OperationStarted()
    // Offset: 0x17AE4DC
    void OperationStarted();
    // public System.Void OperationCompleted()
    // Offset: 0x17AE4E0
    void OperationCompleted();
    // static public System.Void SetSynchronizationContext(System.Threading.SynchronizationContext syncContext)
    // Offset: 0x17AE4E4
    static void SetSynchronizationContext(System::Threading::SynchronizationContext* syncContext);
    // static public System.Threading.SynchronizationContext get_Current()
    // Offset: 0x17AE5E0
    static System::Threading::SynchronizationContext* get_Current();
    // static System.Threading.SynchronizationContext get_CurrentNoFlow()
    // Offset: 0x17AE6C0
    static System::Threading::SynchronizationContext* get_CurrentNoFlow();
    // static private System.Threading.SynchronizationContext GetThreadLocalContext()
    // Offset: 0x17AE660
    static System::Threading::SynchronizationContext* GetThreadLocalContext();
    // public System.Threading.SynchronizationContext CreateCopy()
    // Offset: 0x17AE714
    System::Threading::SynchronizationContext* CreateCopy();
    // public System.Void .ctor()
    // Offset: 0x17AE42C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SynchronizationContext* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SynchronizationContext::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SynchronizationContext*, creationType>()));
    }
  }; // System.Threading.SynchronizationContext
  #pragma pack(pop)
  static check_size<sizeof(SynchronizationContext), 16 + sizeof(System::Threading::SynchronizationContextProperties)> __System_Threading_SynchronizationContextSizeCheck;
  static_assert(sizeof(SynchronizationContext) == 0x14);
}
DEFINE_IL2CPP_ARG_TYPE(System::Threading::SynchronizationContext*, "System.Threading", "SynchronizationContext");
