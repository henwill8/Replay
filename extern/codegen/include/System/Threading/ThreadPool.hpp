// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: RegisteredWaitHandle
  class RegisteredWaitHandle;
  // Forward declaring type: WaitHandle
  class WaitHandle;
  // Forward declaring type: WaitOrTimerCallback
  class WaitOrTimerCallback;
  // Forward declaring type: StackCrawlMark
  struct StackCrawlMark;
  // Forward declaring type: WaitCallback
  class WaitCallback;
  // Forward declaring type: IThreadPoolWorkItem
  class IThreadPoolWorkItem;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: TimeSpan
  struct TimeSpan;
}
// Completed forward declares
// Type namespace: System.Threading
namespace System::Threading {
  // Autogenerated type: System.Threading.ThreadPool
  class ThreadPool : public ::Il2CppObject {
    public:
    // static private System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, System.Object state, System.UInt32 millisecondsTimeOutInterval, System.Boolean executeOnlyOnce, ref System.Threading.StackCrawlMark stackMark, System.Boolean compressStack)
    // Offset: 0x1D1B790
    static System::Threading::RegisteredWaitHandle* RegisterWaitForSingleObject(System::Threading::WaitHandle* waitObject, System::Threading::WaitOrTimerCallback* callBack, ::Il2CppObject* state, uint millisecondsTimeOutInterval, bool executeOnlyOnce, System::Threading::StackCrawlMark& stackMark, bool compressStack);
    // static public System.Threading.RegisteredWaitHandle RegisterWaitForSingleObject(System.Threading.WaitHandle waitObject, System.Threading.WaitOrTimerCallback callBack, System.Object state, System.TimeSpan timeout, System.Boolean executeOnlyOnce)
    // Offset: 0x1D1B964
    static System::Threading::RegisteredWaitHandle* RegisterWaitForSingleObject(System::Threading::WaitHandle* waitObject, System::Threading::WaitOrTimerCallback* callBack, ::Il2CppObject* state, System::TimeSpan timeout, bool executeOnlyOnce);
    // static public System.Boolean QueueUserWorkItem(System.Threading.WaitCallback callBack, System.Object state)
    // Offset: 0x1D09CD4
    static bool QueueUserWorkItem(System::Threading::WaitCallback* callBack, ::Il2CppObject* state);
    // static public System.Boolean QueueUserWorkItem(System.Threading.WaitCallback callBack)
    // Offset: 0x1D1BB74
    static bool QueueUserWorkItem(System::Threading::WaitCallback* callBack);
    // static public System.Boolean UnsafeQueueUserWorkItem(System.Threading.WaitCallback callBack, System.Object state)
    // Offset: 0x1D1B934
    static bool UnsafeQueueUserWorkItem(System::Threading::WaitCallback* callBack, ::Il2CppObject* state);
    // static private System.Boolean QueueUserWorkItemHelper(System.Threading.WaitCallback callBack, System.Object state, ref System.Threading.StackCrawlMark stackMark, System.Boolean compressStack)
    // Offset: 0x1D1BA68
    static bool QueueUserWorkItemHelper(System::Threading::WaitCallback* callBack, ::Il2CppObject* state, System::Threading::StackCrawlMark& stackMark, bool compressStack);
    // static System.Void UnsafeQueueCustomWorkItem(System.Threading.IThreadPoolWorkItem workItem, System.Boolean forceGlobal)
    // Offset: 0x1D0B718
    static void UnsafeQueueCustomWorkItem(System::Threading::IThreadPoolWorkItem* workItem, bool forceGlobal);
    // static System.Boolean TryPopCustomWorkItem(System.Threading.IThreadPoolWorkItem workItem)
    // Offset: 0x1D1A084
    static bool TryPopCustomWorkItem(System::Threading::IThreadPoolWorkItem* workItem);
    // static System.Boolean RequestWorkerThread()
    // Offset: 0x1D1BDF8
    static bool RequestWorkerThread();
    // static private System.Void EnsureVMInitialized()
    // Offset: 0x1D1BBA8
    static void EnsureVMInitialized();
    // static System.Boolean NotifyWorkItemComplete()
    // Offset: 0x1D1BE00
    static bool NotifyWorkItemComplete();
    // static System.Void ReportThreadStatus(System.Boolean isWorking)
    // Offset: 0x1D1BE04
    static void ReportThreadStatus(bool isWorking);
    // static System.Void NotifyWorkItemProgress()
    // Offset: 0x1D1A150
    static void NotifyWorkItemProgress();
    // static System.Void NotifyWorkItemProgressNative()
    // Offset: 0x1D1BE0C
    static void NotifyWorkItemProgressNative();
    // static System.Boolean IsThreadPoolHosted()
    // Offset: 0x1D1BE10
    static bool IsThreadPoolHosted();
    // static private System.Void InitializeVMTp(ref System.Boolean enableWorkerTracking)
    // Offset: 0x1D1BDFC
    static void InitializeVMTp(bool& enableWorkerTracking);
  }; // System.Threading.ThreadPool
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Threading::ThreadPool*, "System.Threading", "ThreadPool");
#pragma pack(pop)
