// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.MarshalByRefObject
#include "System/MarshalByRefObject.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Int64
#include "System/Int64.hpp"
// Including type: System.TimeSpan
#include "System/TimeSpan.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: TimerCallback
  class TimerCallback;
}
// Completed forward declares
// Type namespace: System.Threading
namespace System::Threading {
  // Size: 0x41
  #pragma pack(push, 1)
  // Autogenerated type: System.Threading.Timer
  // [] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: CAA8CC
  class Timer : public System::MarshalByRefObject/*, public System::IDisposable*/ {
    public:
    // Nested type: System::Threading::Timer::TimerComparer
    class TimerComparer;
    // Nested type: System::Threading::Timer::Scheduler
    class Scheduler;
    // private System.Threading.TimerCallback callback
    // Size: 0x8
    // Offset: 0x18
    System::Threading::TimerCallback* callback;
    // Field size check
    static_assert(sizeof(System::Threading::TimerCallback*) == 0x8);
    // private System.Object state
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppObject* state;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Int64 due_time_ms
    // Size: 0x8
    // Offset: 0x28
    int64_t due_time_ms;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 period_ms
    // Size: 0x8
    // Offset: 0x30
    int64_t period_ms;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 next_run
    // Size: 0x8
    // Offset: 0x38
    int64_t next_run;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Boolean disposed
    // Size: 0x1
    // Offset: 0x40
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: Timer
    Timer(System::Threading::TimerCallback* callback_ = {}, ::Il2CppObject* state_ = {}, int64_t due_time_ms_ = {}, int64_t period_ms_ = {}, int64_t next_run_ = {}, bool disposed_ = {}) noexcept : callback{callback_}, state{state_}, due_time_ms{due_time_ms_}, period_ms{period_ms_}, next_run{next_run_}, disposed{disposed_} {}
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // Deleting conversion operator: operator ::Il2CppObject*
    constexpr operator ::Il2CppObject*() const noexcept = delete;
    // Get static field: static private readonly System.Threading.Timer/Scheduler scheduler
    static System::Threading::Timer::Scheduler* _get_scheduler();
    // Set static field: static private readonly System.Threading.Timer/Scheduler scheduler
    static void _set_scheduler(System::Threading::Timer::Scheduler* value);
    // static field const value: static private System.Int64 MaxValue
    static constexpr const int64_t MaxValue = 4294967294;
    // Get static field: static private System.Int64 MaxValue
    static int64_t _get_MaxValue();
    // Set static field: static private System.Int64 MaxValue
    static void _set_MaxValue(int64_t value);
    // public System.Void .ctor(System.Threading.TimerCallback callback, System.Object state, System.Int32 dueTime, System.Int32 period)
    // Offset: 0x17B6D24
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Timer* New_ctor(System::Threading::TimerCallback* callback, ::Il2CppObject* state, int dueTime, int period) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Timer*, creationType>(callback, state, dueTime, period)));
    }
    // public System.Void .ctor(System.Threading.TimerCallback callback, System.Object state, System.TimeSpan dueTime, System.TimeSpan period)
    // Offset: 0x17BEF84
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Timer* New_ctor(System::Threading::TimerCallback* callback, ::Il2CppObject* state, System::TimeSpan dueTime, System::TimeSpan period) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Timer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Timer*, creationType>(callback, state, dueTime, period)));
    }
    // private System.Void Init(System.Threading.TimerCallback callback, System.Object state, System.Int64 dueTime, System.Int64 period)
    // Offset: 0x17BEEB4
    void Init(System::Threading::TimerCallback* callback, ::Il2CppObject* state, int64_t dueTime, int64_t period);
    // public System.Boolean Change(System.Int32 dueTime, System.Int32 period)
    // Offset: 0x17BF224
    bool Change(int dueTime, int period);
    // public System.Boolean Change(System.TimeSpan dueTime, System.TimeSpan period)
    // Offset: 0x17BF248
    bool Change(System::TimeSpan dueTime, System::TimeSpan period);
    // private System.Boolean Change(System.Int64 dueTime, System.Int64 period, System.Boolean first)
    // Offset: 0x17BF000
    bool Change(int64_t dueTime, int64_t period, bool first);
    // System.Void KeepRootedWhileScheduled()
    // Offset: 0x17B6D7C
    void KeepRootedWhileScheduled();
    // static private System.Int64 GetTimeMonotonic()
    // Offset: 0x17BF368
    static int64_t GetTimeMonotonic();
    // static private System.Void .cctor()
    // Offset: 0x17BF4F4
    static void _cctor();
    // public System.Void Dispose()
    // Offset: 0x17B84A8
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
  }; // System.Threading.Timer
  #pragma pack(pop)
  static check_size<sizeof(Timer), 64 + sizeof(bool)> __System_Threading_TimerSizeCheck;
  static_assert(sizeof(Timer) == 0x41);
}
DEFINE_IL2CPP_ARG_TYPE(System::Threading::Timer*, "System.Threading", "Timer");
