// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: System.Threading.Tasks.TaskCreationOptions
#include "System/Threading/Tasks/TaskCreationOptions.hpp"
// Including type: System.Threading.Tasks.TaskContinuationOptions
#include "System/Threading/Tasks/TaskContinuationOptions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: TaskScheduler
  class TaskScheduler;
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Completed forward declares
// Type namespace: System.Threading.Tasks
namespace System::Threading::Tasks {
  // Autogenerated type: System.Threading.Tasks.TaskFactory`1
  template<typename TResult>
  class TaskFactory_1 : public ::Il2CppObject {
    public:
    // private System.Threading.CancellationToken m_defaultCancellationToken
    // Offset: 0x0
    System::Threading::CancellationToken m_defaultCancellationToken;
    // private System.Threading.Tasks.TaskScheduler m_defaultScheduler
    // Offset: 0x0
    System::Threading::Tasks::TaskScheduler* m_defaultScheduler;
    // private System.Threading.Tasks.TaskCreationOptions m_defaultCreationOptions
    // Offset: 0x0
    System::Threading::Tasks::TaskCreationOptions m_defaultCreationOptions;
    // private System.Threading.Tasks.TaskContinuationOptions m_defaultContinuationOptions
    // Offset: 0x0
    System::Threading::Tasks::TaskContinuationOptions m_defaultContinuationOptions;
    // public System.Void .ctor(System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler)
    // Offset: 0xFFFFFFFF
    static TaskFactory_1<TResult>* New_ctor(System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler* scheduler) {
      return THROW_UNLESS(il2cpp_utils::New<TaskFactory_1<TResult>*>(cancellationToken, creationOptions, continuationOptions, scheduler));
    }
    // public System.Threading.Tasks.Task`1<TResult> StartNew(System.Func`1<TResult> function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.TaskScheduler scheduler)
    // Offset: 0xFFFFFFFF
    System::Threading::Tasks::Task_1<TResult>* StartNew(System::Func_1<TResult>* function, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::TaskScheduler* scheduler) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task_1<TResult>*>(this, "StartNew", function, cancellationToken, creationOptions, scheduler));
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static TaskFactory_1<TResult>* New_ctor() {
      return THROW_UNLESS(il2cpp_utils::New<TaskFactory_1<TResult>*>());
    }
  }; // System.Threading.Tasks.TaskFactory`1
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(System::Threading::Tasks::TaskFactory_1, "System.Threading.Tasks", "TaskFactory`1");
#pragma pack(pop)
