// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
// Including type: System.Threading.IThreadPoolWorkItem
#include "System/Threading/IThreadPoolWorkItem.hpp"
// Including type: System.IAsyncResult
#include "System/IAsyncResult.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Threading.Tasks.TaskCreationOptions
#include "System/Threading/Tasks/TaskCreationOptions.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: System.Threading.Tasks.InternalTaskOptions
#include "System/Threading/Tasks/InternalTaskOptions.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: TaskScheduler
  class TaskScheduler;
  // Forward declaring type: StackGuard
  class StackGuard;
  // Forward declaring type: TaskFactory
  class TaskFactory;
  // Forward declaring type: TaskContinuation
  class TaskContinuation;
  // Forward declaring type: TaskStatus
  struct TaskStatus;
  // Forward declaring type: TaskContinuationOptions
  struct TaskContinuationOptions;
  // Forward declaring type: ITaskCompletionAction
  class ITaskCompletionAction;
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: Predicate`1<T>
  template<typename T>
  class Predicate_1;
  // Forward declaring type: Delegate
  class Delegate;
  // Forward declaring type: AggregateException
  class AggregateException;
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: OperationCanceledException
  class OperationCanceledException;
  // Forward declaring type: TimeSpan
  struct TimeSpan;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: ContextCallback
  class ContextCallback;
  // Forward declaring type: StackCrawlMark
  struct StackCrawlMark;
  // Forward declaring type: ManualResetEventSlim
  class ManualResetEventSlim;
  // Forward declaring type: ExecutionContext
  class ExecutionContext;
  // Forward declaring type: WaitHandle
  class WaitHandle;
  // Forward declaring type: ThreadAbortException
  class ThreadAbortException;
}
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: ReadOnlyCollection`1<T>
  template<typename T>
  class ReadOnlyCollection_1;
}
// Forward declaring namespace: System::Runtime::ExceptionServices
namespace System::Runtime::ExceptionServices {
  // Forward declaring type: ExceptionDispatchInfo
  class ExceptionDispatchInfo;
}
// Forward declaring namespace: System::Runtime::CompilerServices
namespace System::Runtime::CompilerServices {
  // Forward declaring type: TaskAwaiter
  struct TaskAwaiter;
  // Forward declaring type: ConfiguredTaskAwaitable
  struct ConfiguredTaskAwaitable;
  // Forward declaring type: YieldAwaitable
  struct YieldAwaitable;
}
// Completed forward declares
// Type namespace: System.Threading.Tasks
namespace System::Threading::Tasks {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: System.Threading.Tasks.Task
  // [] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: CAA9DC
  // [DebuggerDisplayAttribute] Offset: CAA9DC
  class Task : public ::Il2CppObject/*, public System::Threading::IThreadPoolWorkItem, public System::IAsyncResult, public System::IDisposable*/ {
    public:
    // Nested type: System::Threading::Tasks::Task::ContingentProperties
    class ContingentProperties;
    // Nested type: System::Threading::Tasks::Task::SetOnInvokeMres
    class SetOnInvokeMres;
    // Nested type: System::Threading::Tasks::Task::DelayPromise
    class DelayPromise;
    // Nested type: System::Threading::Tasks::Task::WhenAllPromise
    class WhenAllPromise;
    // Nested type: System::Threading::Tasks::Task::WhenAllPromise_1<T>
    template<typename T>
    class WhenAllPromise_1;
    // Nested type: System::Threading::Tasks::Task::$$c__DisplayClass178_0
    class $$c__DisplayClass178_0;
    // Nested type: System::Threading::Tasks::Task::$$c
    class $$c;
    // private System.Int32 m_taskId
    // Size: 0x4
    // Offset: 0x10
    int m_taskId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_taskId and: m_action
    char __padding0[0x4] = {};
    // System.Object m_action
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* m_action;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // System.Object m_stateObject
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppObject* m_stateObject;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // System.Threading.Tasks.TaskScheduler m_taskScheduler
    // Size: 0x8
    // Offset: 0x28
    System::Threading::Tasks::TaskScheduler* m_taskScheduler;
    // Field size check
    static_assert(sizeof(System::Threading::Tasks::TaskScheduler*) == 0x8);
    // readonly System.Threading.Tasks.Task m_parent
    // Size: 0x8
    // Offset: 0x30
    System::Threading::Tasks::Task* m_parent;
    // Field size check
    static_assert(sizeof(System::Threading::Tasks::Task*) == 0x8);
    // System.Int32 m_stateFlags
    // Size: 0x4
    // Offset: 0x38
    int m_stateFlags;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_stateFlags and: m_continuationObject
    char __padding5[0x4] = {};
    // private System.Object m_continuationObject
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppObject* m_continuationObject;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // System.Threading.Tasks.Task/ContingentProperties m_contingentProperties
    // Size: 0x8
    // Offset: 0x48
    System::Threading::Tasks::Task::ContingentProperties* m_contingentProperties;
    // Field size check
    static_assert(sizeof(System::Threading::Tasks::Task::ContingentProperties*) == 0x8);
    // Creating value type constructor for type: Task
    Task(int m_taskId_ = {}, ::Il2CppObject* m_action_ = {}, ::Il2CppObject* m_stateObject_ = {}, System::Threading::Tasks::TaskScheduler* m_taskScheduler_ = {}, System::Threading::Tasks::Task* m_parent_ = {}, int m_stateFlags_ = {}, ::Il2CppObject* m_continuationObject_ = {}, System::Threading::Tasks::Task::ContingentProperties* m_contingentProperties_ = {}) noexcept : m_taskId{m_taskId_}, m_action{m_action_}, m_stateObject{m_stateObject_}, m_taskScheduler{m_taskScheduler_}, m_parent{m_parent_}, m_stateFlags{m_stateFlags_}, m_continuationObject{m_continuationObject_}, m_contingentProperties{m_contingentProperties_} {}
    // Creating interface conversion operator: operator System::Threading::IThreadPoolWorkItem
    operator System::Threading::IThreadPoolWorkItem() noexcept {
      return *reinterpret_cast<System::Threading::IThreadPoolWorkItem*>(this);
    }
    // Creating interface conversion operator: operator System::IAsyncResult
    operator System::IAsyncResult() noexcept {
      return *reinterpret_cast<System::IAsyncResult*>(this);
    }
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // [ThreadStaticAttribute] Offset: 0xCAF974
    // Get static field: static System.Threading.Tasks.Task t_currentTask
    static System::Threading::Tasks::Task* _get_t_currentTask();
    // Set static field: static System.Threading.Tasks.Task t_currentTask
    static void _set_t_currentTask(System::Threading::Tasks::Task* value);
    // [ThreadStaticAttribute] Offset: 0xCAF984
    // Get static field: static private System.Threading.Tasks.StackGuard t_stackGuard
    static System::Threading::Tasks::StackGuard* _get_t_stackGuard();
    // Set static field: static private System.Threading.Tasks.StackGuard t_stackGuard
    static void _set_t_stackGuard(System::Threading::Tasks::StackGuard* value);
    // Get static field: static System.Int32 s_taskIdCounter
    static int _get_s_taskIdCounter();
    // Set static field: static System.Int32 s_taskIdCounter
    static void _set_s_taskIdCounter(int value);
    // Get static field: static private readonly System.Threading.Tasks.TaskFactory s_factory
    static System::Threading::Tasks::TaskFactory* _get_s_factory();
    // Set static field: static private readonly System.Threading.Tasks.TaskFactory s_factory
    static void _set_s_factory(System::Threading::Tasks::TaskFactory* value);
    // static field const value: static private System.Int32 OptionsMask
    static constexpr const int OptionsMask = 65535;
    // Get static field: static private System.Int32 OptionsMask
    static int _get_OptionsMask();
    // Set static field: static private System.Int32 OptionsMask
    static void _set_OptionsMask(int value);
    // static field const value: static System.Int32 TASK_STATE_STARTED
    static constexpr const int TASK_STATE_STARTED = 65536;
    // Get static field: static System.Int32 TASK_STATE_STARTED
    static int _get_TASK_STATE_STARTED();
    // Set static field: static System.Int32 TASK_STATE_STARTED
    static void _set_TASK_STATE_STARTED(int value);
    // static field const value: static System.Int32 TASK_STATE_DELEGATE_INVOKED
    static constexpr const int TASK_STATE_DELEGATE_INVOKED = 131072;
    // Get static field: static System.Int32 TASK_STATE_DELEGATE_INVOKED
    static int _get_TASK_STATE_DELEGATE_INVOKED();
    // Set static field: static System.Int32 TASK_STATE_DELEGATE_INVOKED
    static void _set_TASK_STATE_DELEGATE_INVOKED(int value);
    // static field const value: static System.Int32 TASK_STATE_DISPOSED
    static constexpr const int TASK_STATE_DISPOSED = 262144;
    // Get static field: static System.Int32 TASK_STATE_DISPOSED
    static int _get_TASK_STATE_DISPOSED();
    // Set static field: static System.Int32 TASK_STATE_DISPOSED
    static void _set_TASK_STATE_DISPOSED(int value);
    // static field const value: static System.Int32 TASK_STATE_EXCEPTIONOBSERVEDBYPARENT
    static constexpr const int TASK_STATE_EXCEPTIONOBSERVEDBYPARENT = 524288;
    // Get static field: static System.Int32 TASK_STATE_EXCEPTIONOBSERVEDBYPARENT
    static int _get_TASK_STATE_EXCEPTIONOBSERVEDBYPARENT();
    // Set static field: static System.Int32 TASK_STATE_EXCEPTIONOBSERVEDBYPARENT
    static void _set_TASK_STATE_EXCEPTIONOBSERVEDBYPARENT(int value);
    // static field const value: static System.Int32 TASK_STATE_CANCELLATIONACKNOWLEDGED
    static constexpr const int TASK_STATE_CANCELLATIONACKNOWLEDGED = 1048576;
    // Get static field: static System.Int32 TASK_STATE_CANCELLATIONACKNOWLEDGED
    static int _get_TASK_STATE_CANCELLATIONACKNOWLEDGED();
    // Set static field: static System.Int32 TASK_STATE_CANCELLATIONACKNOWLEDGED
    static void _set_TASK_STATE_CANCELLATIONACKNOWLEDGED(int value);
    // static field const value: static System.Int32 TASK_STATE_FAULTED
    static constexpr const int TASK_STATE_FAULTED = 2097152;
    // Get static field: static System.Int32 TASK_STATE_FAULTED
    static int _get_TASK_STATE_FAULTED();
    // Set static field: static System.Int32 TASK_STATE_FAULTED
    static void _set_TASK_STATE_FAULTED(int value);
    // static field const value: static System.Int32 TASK_STATE_CANCELED
    static constexpr const int TASK_STATE_CANCELED = 4194304;
    // Get static field: static System.Int32 TASK_STATE_CANCELED
    static int _get_TASK_STATE_CANCELED();
    // Set static field: static System.Int32 TASK_STATE_CANCELED
    static void _set_TASK_STATE_CANCELED(int value);
    // static field const value: static System.Int32 TASK_STATE_WAITING_ON_CHILDREN
    static constexpr const int TASK_STATE_WAITING_ON_CHILDREN = 8388608;
    // Get static field: static System.Int32 TASK_STATE_WAITING_ON_CHILDREN
    static int _get_TASK_STATE_WAITING_ON_CHILDREN();
    // Set static field: static System.Int32 TASK_STATE_WAITING_ON_CHILDREN
    static void _set_TASK_STATE_WAITING_ON_CHILDREN(int value);
    // static field const value: static System.Int32 TASK_STATE_RAN_TO_COMPLETION
    static constexpr const int TASK_STATE_RAN_TO_COMPLETION = 16777216;
    // Get static field: static System.Int32 TASK_STATE_RAN_TO_COMPLETION
    static int _get_TASK_STATE_RAN_TO_COMPLETION();
    // Set static field: static System.Int32 TASK_STATE_RAN_TO_COMPLETION
    static void _set_TASK_STATE_RAN_TO_COMPLETION(int value);
    // static field const value: static System.Int32 TASK_STATE_WAITINGFORACTIVATION
    static constexpr const int TASK_STATE_WAITINGFORACTIVATION = 33554432;
    // Get static field: static System.Int32 TASK_STATE_WAITINGFORACTIVATION
    static int _get_TASK_STATE_WAITINGFORACTIVATION();
    // Set static field: static System.Int32 TASK_STATE_WAITINGFORACTIVATION
    static void _set_TASK_STATE_WAITINGFORACTIVATION(int value);
    // static field const value: static System.Int32 TASK_STATE_COMPLETION_RESERVED
    static constexpr const int TASK_STATE_COMPLETION_RESERVED = 67108864;
    // Get static field: static System.Int32 TASK_STATE_COMPLETION_RESERVED
    static int _get_TASK_STATE_COMPLETION_RESERVED();
    // Set static field: static System.Int32 TASK_STATE_COMPLETION_RESERVED
    static void _set_TASK_STATE_COMPLETION_RESERVED(int value);
    // static field const value: static System.Int32 TASK_STATE_THREAD_WAS_ABORTED
    static constexpr const int TASK_STATE_THREAD_WAS_ABORTED = 134217728;
    // Get static field: static System.Int32 TASK_STATE_THREAD_WAS_ABORTED
    static int _get_TASK_STATE_THREAD_WAS_ABORTED();
    // Set static field: static System.Int32 TASK_STATE_THREAD_WAS_ABORTED
    static void _set_TASK_STATE_THREAD_WAS_ABORTED(int value);
    // static field const value: static System.Int32 TASK_STATE_WAIT_COMPLETION_NOTIFICATION
    static constexpr const int TASK_STATE_WAIT_COMPLETION_NOTIFICATION = 268435456;
    // Get static field: static System.Int32 TASK_STATE_WAIT_COMPLETION_NOTIFICATION
    static int _get_TASK_STATE_WAIT_COMPLETION_NOTIFICATION();
    // Set static field: static System.Int32 TASK_STATE_WAIT_COMPLETION_NOTIFICATION
    static void _set_TASK_STATE_WAIT_COMPLETION_NOTIFICATION(int value);
    // static field const value: static System.Int32 TASK_STATE_EXECUTIONCONTEXT_IS_NULL
    static constexpr const int TASK_STATE_EXECUTIONCONTEXT_IS_NULL = 536870912;
    // Get static field: static System.Int32 TASK_STATE_EXECUTIONCONTEXT_IS_NULL
    static int _get_TASK_STATE_EXECUTIONCONTEXT_IS_NULL();
    // Set static field: static System.Int32 TASK_STATE_EXECUTIONCONTEXT_IS_NULL
    static void _set_TASK_STATE_EXECUTIONCONTEXT_IS_NULL(int value);
    // static field const value: static System.Int32 TASK_STATE_TASKSCHEDULED_WAS_FIRED
    static constexpr const int TASK_STATE_TASKSCHEDULED_WAS_FIRED = 1073741824;
    // Get static field: static System.Int32 TASK_STATE_TASKSCHEDULED_WAS_FIRED
    static int _get_TASK_STATE_TASKSCHEDULED_WAS_FIRED();
    // Set static field: static System.Int32 TASK_STATE_TASKSCHEDULED_WAS_FIRED
    static void _set_TASK_STATE_TASKSCHEDULED_WAS_FIRED(int value);
    // static field const value: static private System.Int32 TASK_STATE_COMPLETED_MASK
    static constexpr const int TASK_STATE_COMPLETED_MASK = 23068672;
    // Get static field: static private System.Int32 TASK_STATE_COMPLETED_MASK
    static int _get_TASK_STATE_COMPLETED_MASK();
    // Set static field: static private System.Int32 TASK_STATE_COMPLETED_MASK
    static void _set_TASK_STATE_COMPLETED_MASK(int value);
    // static field const value: static private System.Int32 CANCELLATION_REQUESTED
    static constexpr const int CANCELLATION_REQUESTED = 1;
    // Get static field: static private System.Int32 CANCELLATION_REQUESTED
    static int _get_CANCELLATION_REQUESTED();
    // Set static field: static private System.Int32 CANCELLATION_REQUESTED
    static void _set_CANCELLATION_REQUESTED(int value);
    // Get static field: static private readonly System.Object s_taskCompletionSentinel
    static ::Il2CppObject* _get_s_taskCompletionSentinel();
    // Set static field: static private readonly System.Object s_taskCompletionSentinel
    static void _set_s_taskCompletionSentinel(::Il2CppObject* value);
    // [FriendAccessAllowedAttribute] Offset: 0xCAF994
    // Get static field: static System.Boolean s_asyncDebuggingEnabled
    static bool _get_s_asyncDebuggingEnabled();
    // Set static field: static System.Boolean s_asyncDebuggingEnabled
    static void _set_s_asyncDebuggingEnabled(bool value);
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.Threading.Tasks.Task> s_currentActiveTasks
    static System::Collections::Generic::Dictionary_2<int, System::Threading::Tasks::Task*>* _get_s_currentActiveTasks();
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Int32,System.Threading.Tasks.Task> s_currentActiveTasks
    static void _set_s_currentActiveTasks(System::Collections::Generic::Dictionary_2<int, System::Threading::Tasks::Task*>* value);
    // Get static field: static private readonly System.Object s_activeTasksLock
    static ::Il2CppObject* _get_s_activeTasksLock();
    // Set static field: static private readonly System.Object s_activeTasksLock
    static void _set_s_activeTasksLock(::Il2CppObject* value);
    // Get static field: static private readonly System.Action`1<System.Object> s_taskCancelCallback
    static System::Action_1<::Il2CppObject*>* _get_s_taskCancelCallback();
    // Set static field: static private readonly System.Action`1<System.Object> s_taskCancelCallback
    static void _set_s_taskCancelCallback(System::Action_1<::Il2CppObject*>* value);
    // Get static field: static private readonly System.Func`1<System.Threading.Tasks.Task/ContingentProperties> s_createContingentProperties
    static System::Func_1<System::Threading::Tasks::Task::ContingentProperties*>* _get_s_createContingentProperties();
    // Set static field: static private readonly System.Func`1<System.Threading.Tasks.Task/ContingentProperties> s_createContingentProperties
    static void _set_s_createContingentProperties(System::Func_1<System::Threading::Tasks::Task::ContingentProperties*>* value);
    // Get static field: static private System.Threading.Tasks.Task s_completedTask
    static System::Threading::Tasks::Task* _get_s_completedTask();
    // Set static field: static private System.Threading.Tasks.Task s_completedTask
    static void _set_s_completedTask(System::Threading::Tasks::Task* value);
    // Get static field: static private readonly System.Predicate`1<System.Threading.Tasks.Task> s_IsExceptionObservedByParentPredicate
    static System::Predicate_1<System::Threading::Tasks::Task*>* _get_s_IsExceptionObservedByParentPredicate();
    // Set static field: static private readonly System.Predicate`1<System.Threading.Tasks.Task> s_IsExceptionObservedByParentPredicate
    static void _set_s_IsExceptionObservedByParentPredicate(System::Predicate_1<System::Threading::Tasks::Task*>* value);
    // Get static field: static private System.Threading.ContextCallback s_ecCallback
    static System::Threading::ContextCallback* _get_s_ecCallback();
    // Set static field: static private System.Threading.ContextCallback s_ecCallback
    static void _set_s_ecCallback(System::Threading::ContextCallback* value);
    // Get static field: static private readonly System.Predicate`1<System.Object> s_IsTaskContinuationNullPredicate
    static System::Predicate_1<::Il2CppObject*>* _get_s_IsTaskContinuationNullPredicate();
    // Set static field: static private readonly System.Predicate`1<System.Object> s_IsTaskContinuationNullPredicate
    static void _set_s_IsTaskContinuationNullPredicate(System::Predicate_1<::Il2CppObject*>* value);
    // static System.Boolean AddToActiveTasks(System.Threading.Tasks.Task task)
    // Offset: 0x17AFE30
    static bool AddToActiveTasks(System::Threading::Tasks::Task* task);
    // static System.Void RemoveFromActiveTasks(System.Int32 taskId)
    // Offset: 0x17B0C1C
    static void RemoveFromActiveTasks(int taskId);
    // System.Void .ctor(System.Boolean canceled, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.CancellationToken ct)
    // Offset: 0x17B0D40
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Task* New_ctor(bool canceled, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::CancellationToken ct) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Task*, creationType>(canceled, creationOptions, ct)));
    }
    // System.Void .ctor(System.Object state, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Boolean promiseStyle)
    // Offset: 0x17B0E8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Task* New_ctor(::Il2CppObject* state, System::Threading::Tasks::TaskCreationOptions creationOptions, bool promiseStyle) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Task*, creationType>(state, creationOptions, promiseStyle)));
    }
    // System.Void .ctor(System.Delegate action, System.Object state, System.Threading.Tasks.Task parent, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler)
    // Offset: 0x17AEA40
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Task* New_ctor(System::Delegate* action, ::Il2CppObject* state, System::Threading::Tasks::Task* parent, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::InternalTaskOptions internalOptions, System::Threading::Tasks::TaskScheduler* scheduler) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Task*, creationType>(action, state, parent, cancellationToken, creationOptions, internalOptions, scheduler)));
    }
    // System.Void TaskConstructorCore(System.Object action, System.Object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler)
    // Offset: 0x17B0FCC
    void TaskConstructorCore(::Il2CppObject* action, ::Il2CppObject* state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::InternalTaskOptions internalOptions, System::Threading::Tasks::TaskScheduler* scheduler);
    // private System.Void AssignCancellationToken(System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.Task antecedent, System.Threading.Tasks.TaskContinuation continuation)
    // Offset: 0x17B1230
    void AssignCancellationToken(System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::Task* antecedent, System::Threading::Tasks::TaskContinuation* continuation);
    // static private System.Void TaskCancelCallback(System.Object o)
    // Offset: 0x17B1614
    static void TaskCancelCallback(::Il2CppObject* o);
    // System.Void PossiblyCaptureContext(ref System.Threading.StackCrawlMark stackMark)
    // Offset: 0x17AFAB8
    void PossiblyCaptureContext(System::Threading::StackCrawlMark& stackMark);
    // System.Threading.Tasks.TaskCreationOptions get_Options()
    // Offset: 0x17B1558
    System::Threading::Tasks::TaskCreationOptions get_Options();
    // static System.Threading.Tasks.TaskCreationOptions OptionsMethod(System.Int32 flags)
    // Offset: 0x17B1934
    static System::Threading::Tasks::TaskCreationOptions OptionsMethod(int flags);
    // System.Boolean AtomicStateUpdate(System.Int32 newBits, System.Int32 illegalBits)
    // Offset: 0x17B193C
    bool AtomicStateUpdate(int newBits, int illegalBits);
    // System.Boolean AtomicStateUpdate(System.Int32 newBits, System.Int32 illegalBits, ref System.Int32 oldFlags)
    // Offset: 0x17B19CC
    bool AtomicStateUpdate(int newBits, int illegalBits, int& oldFlags);
    // System.Void SetNotificationForWaitCompletion(System.Boolean enabled)
    // Offset: 0x17B1A6C
    void SetNotificationForWaitCompletion(bool enabled);
    // System.Boolean NotifyDebuggerOfWaitCompletionIfNecessary()
    // Offset: 0x17AFC18
    bool NotifyDebuggerOfWaitCompletionIfNecessary();
    // static System.Boolean AnyTaskRequiresNotifyDebuggerOfWaitCompletion(System.Threading.Tasks.Task[] tasks)
    // Offset: 0x17B1B3C
    static bool AnyTaskRequiresNotifyDebuggerOfWaitCompletion(::Array<System::Threading::Tasks::Task*>* tasks);
    // System.Boolean get_IsWaitNotificationEnabledOrNotRanToCompletion()
    // Offset: 0x17B1BE0
    bool get_IsWaitNotificationEnabledOrNotRanToCompletion();
    // System.Boolean get_ShouldNotifyDebuggerOfWaitCompletion()
    // Offset: 0x17B1C14
    bool get_ShouldNotifyDebuggerOfWaitCompletion();
    // System.Boolean get_IsWaitNotificationEnabled()
    // Offset: 0x17B1AEC
    bool get_IsWaitNotificationEnabled();
    // private System.Void NotifyDebuggerOfWaitCompletion()
    // Offset: 0x17B1B10
    void NotifyDebuggerOfWaitCompletion();
    // System.Boolean MarkStarted()
    // Offset: 0x17B1C38
    bool MarkStarted();
    // System.Boolean FireTaskScheduledIfNeeded(System.Threading.Tasks.TaskScheduler ts)
    // Offset: 0x17B1C44
    bool FireTaskScheduledIfNeeded(System::Threading::Tasks::TaskScheduler* ts);
    // System.Void AddNewChild()
    // Offset: 0x17B1190
    void AddNewChild();
    // System.Void DisregardChild()
    // Offset: 0x17B15C4
    void DisregardChild();
    // static System.Threading.Tasks.Task InternalStartNew(System.Threading.Tasks.Task creatingTask, System.Delegate action, System.Object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.Tasks.TaskCreationOptions options, System.Threading.Tasks.InternalTaskOptions internalOptions, ref System.Threading.StackCrawlMark stackMark)
    // Offset: 0x17B1C70
    static System::Threading::Tasks::Task* InternalStartNew(System::Threading::Tasks::Task* creatingTask, System::Delegate* action, ::Il2CppObject* state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskScheduler* scheduler, System::Threading::Tasks::TaskCreationOptions options, System::Threading::Tasks::InternalTaskOptions internalOptions, System::Threading::StackCrawlMark& stackMark);
    // static System.Int32 NewId()
    // Offset: 0x17B1D8C
    static int NewId();
    // public System.Int32 get_Id()
    // Offset: 0x17AFD98
    int get_Id();
    // static System.Threading.Tasks.Task get_InternalCurrent()
    // Offset: 0x17B1DFC
    static System::Threading::Tasks::Task* get_InternalCurrent();
    // static System.Threading.Tasks.Task InternalCurrentIfAttached(System.Threading.Tasks.TaskCreationOptions creationOptions)
    // Offset: 0x17AFA04
    static System::Threading::Tasks::Task* InternalCurrentIfAttached(System::Threading::Tasks::TaskCreationOptions creationOptions);
    // static System.Threading.Tasks.StackGuard get_CurrentStackGuard()
    // Offset: 0x17B1E64
    static System::Threading::Tasks::StackGuard* get_CurrentStackGuard();
    // public System.AggregateException get_Exception()
    // Offset: 0x17B1F1C
    System::AggregateException* get_Exception();
    // public System.Threading.Tasks.TaskStatus get_Status()
    // Offset: 0x17B20D4
    System::Threading::Tasks::TaskStatus get_Status();
    // public System.Boolean get_IsCanceled()
    // Offset: 0x17B0140
    bool get_IsCanceled();
    // System.Boolean get_IsCancellationRequested()
    // Offset: 0x17B2140
    bool get_IsCancellationRequested();
    // System.Threading.Tasks.Task/ContingentProperties EnsureContingentPropertiesInitialized(System.Boolean needsProtection)
    // Offset: 0x17B1508
    System::Threading::Tasks::Task::ContingentProperties* EnsureContingentPropertiesInitialized(bool needsProtection);
    // private System.Threading.Tasks.Task/ContingentProperties EnsureContingentPropertiesInitializedCore(System.Boolean needsProtection)
    // Offset: 0x17B2194
    System::Threading::Tasks::Task::ContingentProperties* EnsureContingentPropertiesInitializedCore(bool needsProtection);
    // System.Threading.CancellationToken get_CancellationToken()
    // Offset: 0x17B2278
    System::Threading::CancellationToken get_CancellationToken();
    // System.Boolean get_IsCancellationAcknowledged()
    // Offset: 0x17B22A8
    bool get_IsCancellationAcknowledged();
    // static private System.Boolean IsCompletedMethod(System.Int32 flags)
    // Offset: 0x17B2340
    static bool IsCompletedMethod(int flags);
    // System.Boolean get_IsRanToCompletion()
    // Offset: 0x17B010C
    bool get_IsRanToCompletion();
    // public System.Threading.Tasks.TaskCreationOptions get_CreationOptions()
    // Offset: 0x17B1178
    System::Threading::Tasks::TaskCreationOptions get_CreationOptions();
    // System.Threading.Tasks.TaskScheduler get_ExecutingTaskScheduler()
    // Offset: 0x17B2514
    System::Threading::Tasks::TaskScheduler* get_ExecutingTaskScheduler();
    // static public System.Threading.Tasks.TaskFactory get_Factory()
    // Offset: 0x17B251C
    static System::Threading::Tasks::TaskFactory* get_Factory();
    // static public System.Threading.Tasks.Task get_CompletedTask()
    // Offset: 0x17B2584
    static System::Threading::Tasks::Task* get_CompletedTask();
    // System.Threading.ManualResetEventSlim get_CompletedEvent()
    // Offset: 0x17B2404
    System::Threading::ManualResetEventSlim* get_CompletedEvent();
    // System.Boolean get_IsSelfReplicatingRoot()
    // Offset: 0x17B1C4C
    bool get_IsSelfReplicatingRoot();
    // System.Boolean get_IsChildReplica()
    // Offset: 0x17B2638
    bool get_IsChildReplica();
    // System.Boolean get_ExceptionRecorded()
    // Offset: 0x17B2650
    bool get_ExceptionRecorded();
    // public System.Boolean get_IsFaulted()
    // Offset: 0x17B1F5C
    bool get_IsFaulted();
    // System.Threading.ExecutionContext get_CapturedContext()
    // Offset: 0x17B26D0
    System::Threading::ExecutionContext* get_CapturedContext();
    // System.Void set_CapturedContext(System.Threading.ExecutionContext value)
    // Offset: 0x17AEB44
    void set_CapturedContext(System::Threading::ExecutionContext* value);
    // static private System.Threading.ExecutionContext CopyExecutionContext(System.Threading.ExecutionContext capturedContext)
    // Offset: 0x17B27A0
    static System::Threading::ExecutionContext* CopyExecutionContext(System::Threading::ExecutionContext* capturedContext);
    // protected System.Void Dispose(System.Boolean disposing)
    // Offset: 0x17B28F4
    void Dispose(bool disposing);
    // System.Void ScheduleAndStart(System.Boolean needsProtection)
    // Offset: 0x17B0308
    void ScheduleAndStart(bool needsProtection);
    // System.Void AddException(System.Object exceptionObject)
    // Offset: 0x17B2A30
    void AddException(::Il2CppObject* exceptionObject);
    // System.Void AddException(System.Object exceptionObject, System.Boolean representsCancellation)
    // Offset: 0x17B2D6C
    void AddException(::Il2CppObject* exceptionObject, bool representsCancellation);
    // private System.AggregateException GetExceptions(System.Boolean includeTaskCanceledExceptions)
    // Offset: 0x17B1F80
    System::AggregateException* GetExceptions(bool includeTaskCanceledExceptions);
    // System.Collections.ObjectModel.ReadOnlyCollection`1<System.Runtime.ExceptionServices.ExceptionDispatchInfo> GetExceptionDispatchInfos()
    // Offset: 0x17B31D4
    System::Collections::ObjectModel::ReadOnlyCollection_1<System::Runtime::ExceptionServices::ExceptionDispatchInfo*>* GetExceptionDispatchInfos();
    // System.Runtime.ExceptionServices.ExceptionDispatchInfo GetCancellationExceptionDispatchInfo()
    // Offset: 0x17B3320
    System::Runtime::ExceptionServices::ExceptionDispatchInfo* GetCancellationExceptionDispatchInfo();
    // System.Void ThrowIfExceptional(System.Boolean includeTaskCanceledExceptions)
    // Offset: 0x17B335C
    void ThrowIfExceptional(bool includeTaskCanceledExceptions);
    // System.Void UpdateExceptionObservedStatus()
    // Offset: 0x17B33D8
    void UpdateExceptionObservedStatus();
    // System.Boolean get_IsExceptionObservedByParent()
    // Offset: 0x17B34D0
    bool get_IsExceptionObservedByParent();
    // System.Boolean get_IsDelegateInvoked()
    // Offset: 0x17B34F4
    bool get_IsDelegateInvoked();
    // System.Void Finish(System.Boolean bUserDelegateExecuted)
    // Offset: 0x17B2B50
    void Finish(bool bUserDelegateExecuted);
    // System.Void FinishStageTwo()
    // Offset: 0x17B3518
    void FinishStageTwo();
    // System.Void FinishStageThree()
    // Offset: 0x17B3A48
    void FinishStageThree();
    // System.Void ProcessChildCompletion(System.Threading.Tasks.Task childTask)
    // Offset: 0x17B3AAC
    void ProcessChildCompletion(System::Threading::Tasks::Task* childTask);
    // System.Void AddExceptionsFromChildren()
    // Offset: 0x17B3710
    void AddExceptionsFromChildren();
    // System.Void FinishThreadAbortedTask(System.Boolean bTAEAddedToExceptionHolder, System.Boolean delegateRan)
    // Offset: 0x17B2A38
    void FinishThreadAbortedTask(bool bTAEAddedToExceptionHolder, bool delegateRan);
    // private System.Void Execute()
    // Offset: 0x17B418C
    void Execute();
    // System.Boolean ShouldReplicate()
    // Offset: 0x17B4528
    bool ShouldReplicate();
    // System.Threading.Tasks.Task CreateReplicaTask(System.Action`1<System.Object> taskReplicaDelegate, System.Object stateObject, System.Threading.Tasks.Task parentTask, System.Threading.Tasks.TaskScheduler taskScheduler, System.Threading.Tasks.TaskCreationOptions creationOptionsForReplica, System.Threading.Tasks.InternalTaskOptions internalOptionsForReplica)
    // Offset: 0x17B4530
    System::Threading::Tasks::Task* CreateReplicaTask(System::Action_1<::Il2CppObject*>* taskReplicaDelegate, ::Il2CppObject* stateObject, System::Threading::Tasks::Task* parentTask, System::Threading::Tasks::TaskScheduler* taskScheduler, System::Threading::Tasks::TaskCreationOptions creationOptionsForReplica, System::Threading::Tasks::InternalTaskOptions internalOptionsForReplica);
    // System.Object get_SavedStateForNextReplica()
    // Offset: 0x17B45E4
    ::Il2CppObject* get_SavedStateForNextReplica();
    // System.Void set_SavedStateFromPreviousReplica(System.Object value)
    // Offset: 0x17B45EC
    void set_SavedStateFromPreviousReplica(::Il2CppObject* value);
    // System.Threading.Tasks.Task get_HandedOverChildReplica()
    // Offset: 0x17B45F0
    System::Threading::Tasks::Task* get_HandedOverChildReplica();
    // System.Void set_HandedOverChildReplica(System.Threading.Tasks.Task value)
    // Offset: 0x17B45F8
    void set_HandedOverChildReplica(System::Threading::Tasks::Task* value);
    // static private System.Void ExecuteSelfReplicating(System.Threading.Tasks.Task root)
    // Offset: 0x17B430C
    static void ExecuteSelfReplicating(System::Threading::Tasks::Task* root);
    // System.Boolean ExecuteEntry(System.Boolean bPreventDoubleExecution)
    // Offset: 0x17B460C
    bool ExecuteEntry(bool bPreventDoubleExecution);
    // private System.Void ExecuteWithThreadLocal(ref System.Threading.Tasks.Task currentTaskSlot)
    // Offset: 0x17B4798
    void ExecuteWithThreadLocal(System::Threading::Tasks::Task*& currentTaskSlot);
    // static private System.Void ExecutionContextCallback(System.Object obj)
    // Offset: 0x17B4AB4
    static void ExecutionContextCallback(::Il2CppObject* obj);
    // System.Void InnerInvoke()
    // Offset: 0x17B4B34
    void InnerInvoke();
    // System.Void InnerInvokeWithArg(System.Threading.Tasks.Task childTask)
    // Offset: 0x17B4BE0
    void InnerInvokeWithArg(System::Threading::Tasks::Task* childTask);
    // private System.Void HandleException(System.Exception unhandledException)
    // Offset: 0x17B441C
    void HandleException(System::Exception* unhandledException);
    // public System.Runtime.CompilerServices.TaskAwaiter GetAwaiter()
    // Offset: 0x17B4C40
    System::Runtime::CompilerServices::TaskAwaiter GetAwaiter();
    // public System.Runtime.CompilerServices.ConfiguredTaskAwaitable ConfigureAwait(System.Boolean continueOnCapturedContext)
    // Offset: 0x17B4C6C
    System::Runtime::CompilerServices::ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext);
    // System.Void SetContinuationForAwait(System.Action continuationAction, System.Boolean continueOnCapturedContext, System.Boolean flowExecutionContext, ref System.Threading.StackCrawlMark stackMark)
    // Offset: 0x17B4CA4
    void SetContinuationForAwait(System::Action* continuationAction, bool continueOnCapturedContext, bool flowExecutionContext, System::Threading::StackCrawlMark& stackMark);
    // static public System.Runtime.CompilerServices.YieldAwaitable Yield()
    // Offset: 0x17B4FD0
    static System::Runtime::CompilerServices::YieldAwaitable Yield();
    // public System.Void Wait()
    // Offset: 0x17B4FD8
    void Wait();
    // public System.Boolean Wait(System.Int32 millisecondsTimeout, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x17B4FE4
    bool Wait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);
    // private System.Boolean WrappedTryRunInline()
    // Offset: 0x17B539C
    bool WrappedTryRunInline();
    // System.Boolean InternalWait(System.Int32 millisecondsTimeout, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x17B511C
    bool InternalWait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);
    // private System.Boolean SpinThenBlockingWait(System.Int32 millisecondsTimeout, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x17B5680
    bool SpinThenBlockingWait(int millisecondsTimeout, System::Threading::CancellationToken cancellationToken);
    // private System.Boolean SpinWait(System.Int32 millisecondsTimeout)
    // Offset: 0x17B584C
    bool SpinWait(int millisecondsTimeout);
    // System.Boolean InternalCancel(System.Boolean bCancelNonExecutingOnly)
    // Offset: 0x17B0524
    bool InternalCancel(bool bCancelNonExecutingOnly);
    // System.Void RecordInternalCancellationRequest()
    // Offset: 0x17B5A74
    void RecordInternalCancellationRequest();
    // System.Void RecordInternalCancellationRequest(System.Threading.CancellationToken tokenToRecord)
    // Offset: 0x17B5AC0
    void RecordInternalCancellationRequest(System::Threading::CancellationToken tokenToRecord);
    // System.Void RecordInternalCancellationRequest(System.Threading.CancellationToken tokenToRecord, System.Object cancellationException)
    // Offset: 0x17B5B74
    void RecordInternalCancellationRequest(System::Threading::CancellationToken tokenToRecord, ::Il2CppObject* cancellationException);
    // System.Void CancellationCleanupLogic()
    // Offset: 0x17B49BC
    void CancellationCleanupLogic();
    // private System.Void SetCancellationAcknowledged()
    // Offset: 0x17B4C10
    void SetCancellationAcknowledged();
    // System.Void FinishContinuations()
    // Offset: 0x17B3C2C
    void FinishContinuations();
    // private System.Void LogFinishCompletionNotification()
    // Offset: 0x17B5BE4
    void LogFinishCompletionNotification();
    // public System.Threading.Tasks.Task ContinueWith(System.Action`1<System.Threading.Tasks.Task> continuationAction)
    // Offset: 0x17B5BE8
    System::Threading::Tasks::Task* ContinueWith(System::Action_1<System::Threading::Tasks::Task*>* continuationAction);
    // private System.Threading.Tasks.Task ContinueWith(System.Action`1<System.Threading.Tasks.Task> continuationAction, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, ref System.Threading.StackCrawlMark stackMark)
    // Offset: 0x17B5D40
    System::Threading::Tasks::Task* ContinueWith(System::Action_1<System::Threading::Tasks::Task*>* continuationAction, System::Threading::Tasks::TaskScheduler* scheduler, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::StackCrawlMark& stackMark);
    // public System.Threading.Tasks.Task ContinueWith(System.Action`2<System.Threading.Tasks.Task,System.Object> continuationAction, System.Object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, System.Threading.Tasks.TaskScheduler scheduler)
    // Offset: 0x17B6100
    System::Threading::Tasks::Task* ContinueWith(System::Action_2<System::Threading::Tasks::Task*, ::Il2CppObject*>* continuationAction, ::Il2CppObject* state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskScheduler* scheduler);
    // private System.Threading.Tasks.Task ContinueWith(System.Action`2<System.Threading.Tasks.Task,System.Object> continuationAction, System.Object state, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions continuationOptions, ref System.Threading.StackCrawlMark stackMark)
    // Offset: 0x17B6138
    System::Threading::Tasks::Task* ContinueWith(System::Action_2<System::Threading::Tasks::Task*, ::Il2CppObject*>* continuationAction, ::Il2CppObject* state, System::Threading::Tasks::TaskScheduler* scheduler, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::StackCrawlMark& stackMark);
    // static System.Void CreationOptionsFromContinuationOptions(System.Threading.Tasks.TaskContinuationOptions continuationOptions, out System.Threading.Tasks.TaskCreationOptions creationOptions, out System.Threading.Tasks.InternalTaskOptions internalOptions)
    // Offset: 0x17B5E98
    static void CreationOptionsFromContinuationOptions(System::Threading::Tasks::TaskContinuationOptions continuationOptions, System::Threading::Tasks::TaskCreationOptions& creationOptions, System::Threading::Tasks::InternalTaskOptions& internalOptions);
    // System.Void ContinueWithCore(System.Threading.Tasks.Task continuationTask, System.Threading.Tasks.TaskScheduler scheduler, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskContinuationOptions options)
    // Offset: 0x17B5FD8
    void ContinueWithCore(System::Threading::Tasks::Task* continuationTask, System::Threading::Tasks::TaskScheduler* scheduler, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskContinuationOptions options);
    // System.Void AddCompletionAction(System.Threading.Tasks.ITaskCompletionAction action)
    // Offset: 0x17B629C
    void AddCompletionAction(System::Threading::Tasks::ITaskCompletionAction* action);
    // private System.Void AddCompletionAction(System.Threading.Tasks.ITaskCompletionAction action, System.Boolean addBeforeOthers)
    // Offset: 0x17B5990
    void AddCompletionAction(System::Threading::Tasks::ITaskCompletionAction* action, bool addBeforeOthers);
    // private System.Boolean AddTaskContinuationComplex(System.Object tc, System.Boolean addBeforeOthers)
    // Offset: 0x17B62A4
    bool AddTaskContinuationComplex(::Il2CppObject* tc, bool addBeforeOthers);
    // private System.Boolean AddTaskContinuation(System.Object tc, System.Boolean addBeforeOthers)
    // Offset: 0x17B4F3C
    bool AddTaskContinuation(::Il2CppObject* tc, bool addBeforeOthers);
    // System.Void RemoveContinuation(System.Object continuationObject)
    // Offset: 0x17B16DC
    void RemoveContinuation(::Il2CppObject* continuationObject);
    // static public System.Threading.Tasks.Task`1<TResult> FromResult(TResult result)
    // Offset: 0xFFFFFFFF
    template<class TResult>
    static System::Threading::Tasks::Task_1<TResult>* FromResult(TResult result) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::FromResult");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "FromResult", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::il2cpp_utils::ExtractTypes(result)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}));
      return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<TResult>*, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, result);
    }
    // static public System.Threading.Tasks.Task FromException(System.Exception exception)
    // Offset: 0x17B65C4
    static System::Threading::Tasks::Task* FromException(System::Exception* exception);
    // static public System.Threading.Tasks.Task`1<TResult> FromException(System.Exception exception)
    // Offset: 0xFFFFFFFF
    template<class TResult>
    static System::Threading::Tasks::Task_1<TResult>* FromException(System::Exception* exception) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::FromException");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "FromException", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::il2cpp_utils::ExtractTypes(exception)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}));
      return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<TResult>*, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, exception);
    }
    // static System.Threading.Tasks.Task FromCancellation(System.Threading.CancellationToken cancellationToken)
    // Offset: 0x17B6634
    static System::Threading::Tasks::Task* FromCancellation(System::Threading::CancellationToken cancellationToken);
    // static System.Threading.Tasks.Task`1<TResult> FromCancellation(System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFF
    template<class TResult>
    static System::Threading::Tasks::Task_1<TResult>* FromCancellation(System::Threading::CancellationToken cancellationToken) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::FromCancellation");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "FromCancellation", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::il2cpp_utils::ExtractTypes(cancellationToken)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}));
      return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<TResult>*, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, cancellationToken);
    }
    // static System.Threading.Tasks.Task`1<TResult> FromCancellation(System.OperationCanceledException exception)
    // Offset: 0xFFFFFFFF
    template<class TResult>
    static System::Threading::Tasks::Task_1<TResult>* FromCancellation(System::OperationCanceledException* exception) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::FromCancellation");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "FromCancellation", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::il2cpp_utils::ExtractTypes(exception)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}));
      return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<TResult>*, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, exception);
    }
    // static public System.Threading.Tasks.Task Run(System.Action action)
    // Offset: 0x17B66F4
    static System::Threading::Tasks::Task* Run(System::Action* action);
    // static public System.Threading.Tasks.Task`1<TResult> Run(System.Func`1<TResult> function)
    // Offset: 0xFFFFFFFF
    template<class TResult>
    static System::Threading::Tasks::Task_1<TResult>* Run(System::Func_1<TResult>* function) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::Run");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Run", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::il2cpp_utils::ExtractTypes(function)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}));
      return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<TResult>*, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, function);
    }
    // static public System.Threading.Tasks.Task Run(System.Func`1<System.Threading.Tasks.Task> function)
    // Offset: 0x17B67FC
    static System::Threading::Tasks::Task* Run(System::Func_1<System::Threading::Tasks::Task*>* function);
    // static public System.Threading.Tasks.Task Run(System.Func`1<System.Threading.Tasks.Task> function, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x17B6864
    static System::Threading::Tasks::Task* Run(System::Func_1<System::Threading::Tasks::Task*>* function, System::Threading::CancellationToken cancellationToken);
    // static public System.Threading.Tasks.Task`1<TResult> Run(System.Func`1<System.Threading.Tasks.Task`1<TResult>> function)
    // Offset: 0xFFFFFFFF
    template<class TResult>
    static System::Threading::Tasks::Task_1<TResult>* Run(System::Func_1<System::Threading::Tasks::Task_1<TResult>*>* function) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::Run");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Run", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::il2cpp_utils::ExtractTypes(function)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}));
      return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<TResult>*, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, function);
    }
    // static public System.Threading.Tasks.Task`1<TResult> Run(System.Func`1<System.Threading.Tasks.Task`1<TResult>> function, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFF
    template<class TResult>
    static System::Threading::Tasks::Task_1<TResult>* Run(System::Func_1<System::Threading::Tasks::Task_1<TResult>*>* function, System::Threading::CancellationToken cancellationToken) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::Run");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "Run", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::il2cpp_utils::ExtractTypes(function, cancellationToken)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}));
      return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<TResult>*, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, function, cancellationToken);
    }
    // static public System.Threading.Tasks.Task Delay(System.TimeSpan delay)
    // Offset: 0x17B6A64
    static System::Threading::Tasks::Task* Delay(System::TimeSpan delay);
    // static public System.Threading.Tasks.Task Delay(System.TimeSpan delay, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x17B6ACC
    static System::Threading::Tasks::Task* Delay(System::TimeSpan delay, System::Threading::CancellationToken cancellationToken);
    // static public System.Threading.Tasks.Task Delay(System.Int32 millisecondsDelay)
    // Offset: 0x17B6BC0
    static System::Threading::Tasks::Task* Delay(int millisecondsDelay);
    // static public System.Threading.Tasks.Task Delay(System.Int32 millisecondsDelay, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x17AD1CC
    static System::Threading::Tasks::Task* Delay(int millisecondsDelay, System::Threading::CancellationToken cancellationToken);
    // static public System.Threading.Tasks.Task WhenAll(System.Collections.Generic.IEnumerable`1<System.Threading.Tasks.Task> tasks)
    // Offset: 0x17B6D80
    static System::Threading::Tasks::Task* WhenAll(System::Collections::Generic::IEnumerable_1<System::Threading::Tasks::Task*>* tasks);
    // static public System.Threading.Tasks.Task WhenAll(params System.Threading.Tasks.Task[] tasks)
    // Offset: 0x17B7538
    static System::Threading::Tasks::Task* WhenAll(::Array<System::Threading::Tasks::Task*>* tasks);
    // Creating initializer_list -> params proxy for: System.Threading.Tasks.Task WhenAll(params System.Threading.Tasks.Task[] tasks)
    static System::Threading::Tasks::Task* WhenAll(std::initializer_list<System::Threading::Tasks::Task*> tasks);
    // Creating TArgs -> initializer_list proxy for: System.Threading.Tasks.Task WhenAll(params System.Threading.Tasks.Task[] tasks)
    template<class ...TParams>
    static System::Threading::Tasks::Task* WhenAll(TParams&&... tasks) {
      return WhenAll({tasks...});
    }
    // static private System.Threading.Tasks.Task InternalWhenAll(System.Threading.Tasks.Task[] tasks)
    // Offset: 0x17B7724
    static System::Threading::Tasks::Task* InternalWhenAll(::Array<System::Threading::Tasks::Task*>* tasks);
    // static public System.Threading.Tasks.Task`1<TResult[]> WhenAll(System.Collections.Generic.IEnumerable`1<System.Threading.Tasks.Task`1<TResult>> tasks)
    // Offset: 0xFFFFFFFF
    template<class TResult>
    static System::Threading::Tasks::Task_1<::Array<TResult>*>* WhenAll(System::Collections::Generic::IEnumerable_1<System::Threading::Tasks::Task_1<TResult>*>* tasks) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::WhenAll");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "WhenAll", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::il2cpp_utils::ExtractTypes(tasks)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}));
      return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<::Array<TResult>*>*, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, tasks);
    }
    // static public System.Threading.Tasks.Task`1<TResult[]> WhenAll(params System.Threading.Tasks.Task`1<TResult>[] tasks)
    // Offset: 0xFFFFFFFF
    template<class TResult>
    static System::Threading::Tasks::Task_1<::Array<TResult>*>* WhenAll(::Array<System::Threading::Tasks::Task_1<TResult>*>* tasks) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::WhenAll");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "WhenAll", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::il2cpp_utils::ExtractTypes(tasks)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}));
      return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<::Array<TResult>*>*, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, tasks);
    }
    // Creating initializer_list -> params proxy for: System.Threading.Tasks.Task`1<TResult[]> WhenAll(params System.Threading.Tasks.Task`1<TResult>[] tasks)
    template<class TResult>
    static System::Threading::Tasks::Task_1<::Array<TResult>*>* WhenAll(std::initializer_list<System::Threading::Tasks::Task_1<TResult>*> tasks) {
      return WhenAll(::Array<System::Threading::Tasks::Task_1<TResult>*>::New(tasks));
    }
    // Creating TArgs -> initializer_list proxy for: System.Threading.Tasks.Task`1<TResult[]> WhenAll(params System.Threading.Tasks.Task`1<TResult>[] tasks)
    template<class TResult, class ...TParams>
    static System::Threading::Tasks::Task_1<::Array<TResult>*>* WhenAll(TParams&&... tasks) {
      return WhenAll({tasks...});
    }
    // static private System.Threading.Tasks.Task`1<TResult[]> InternalWhenAll(System.Threading.Tasks.Task`1<TResult>[] tasks)
    // Offset: 0xFFFFFFFF
    template<class TResult>
    static System::Threading::Tasks::Task_1<::Array<TResult>*>* InternalWhenAll(::Array<System::Threading::Tasks::Task_1<TResult>*>* tasks) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::InternalWhenAll");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "InternalWhenAll", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::il2cpp_utils::ExtractTypes(tasks)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}));
      return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<::Array<TResult>*>*, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, tasks);
    }
    // static public System.Threading.Tasks.Task`1<System.Threading.Tasks.Task> WhenAny(params System.Threading.Tasks.Task[] tasks)
    // Offset: 0x17AD4F4
    static System::Threading::Tasks::Task_1<System::Threading::Tasks::Task*>* WhenAny(::Array<System::Threading::Tasks::Task*>* tasks);
    // Creating initializer_list -> params proxy for: System.Threading.Tasks.Task`1<System.Threading.Tasks.Task> WhenAny(params System.Threading.Tasks.Task[] tasks)
    static System::Threading::Tasks::Task_1<System::Threading::Tasks::Task*>* WhenAny(std::initializer_list<System::Threading::Tasks::Task*> tasks);
    // Creating TArgs -> initializer_list proxy for: System.Threading.Tasks.Task`1<System.Threading.Tasks.Task> WhenAny(params System.Threading.Tasks.Task[] tasks)
    template<class ...TParams>
    static System::Threading::Tasks::Task_1<System::Threading::Tasks::Task*>* WhenAny(TParams&&... tasks) {
      return WhenAny({tasks...});
    }
    // static System.Threading.Tasks.Task`1<TResult> CreateUnwrapPromise(System.Threading.Tasks.Task outerTask, System.Boolean lookForOce)
    // Offset: 0xFFFFFFFF
    template<class TResult>
    static System::Threading::Tasks::Task_1<TResult>* CreateUnwrapPromise(System::Threading::Tasks::Task* outerTask, bool lookForOce) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::CreateUnwrapPromise");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading.Tasks", "Task", "CreateUnwrapPromise", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}, ::il2cpp_utils::ExtractTypes(outerTask, lookForOce)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResult>::get()}));
      return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<TResult>*, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, outerTask, lookForOce);
    }
    // static private System.Void .cctor()
    // Offset: 0x17B7B5C
    static void _cctor();
    // System.Void .ctor()
    // Offset: 0x17B0E58
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Task* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Tasks::Task::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Task*, creationType>()));
    }
    // public System.Boolean get_IsCompleted()
    // Offset: 0x17B22CC
    // Implemented from: System.IAsyncResult
    // Base method: System.Boolean IAsyncResult::get_IsCompleted()
    bool get_IsCompleted();
    // Creating proxy method: System_IAsyncResult_get_IsCompleted
    // Maps to method: get_IsCompleted
    bool System_IAsyncResult_get_IsCompleted();
    // private System.Threading.WaitHandle System.IAsyncResult.get_AsyncWaitHandle()
    // Offset: 0x17B2350
    // Implemented from: System.IAsyncResult
    // Base method: System.Threading.WaitHandle IAsyncResult::get_AsyncWaitHandle()
    System::Threading::WaitHandle* System_IAsyncResult_get_AsyncWaitHandle();
    // public System.Object get_AsyncState()
    // Offset: 0x17B2504
    // Implemented from: System.IAsyncResult
    // Base method: System.Object IAsyncResult::get_AsyncState()
    ::Il2CppObject* get_AsyncState();
    // Creating proxy method: System_IAsyncResult_get_AsyncState
    // Maps to method: get_AsyncState
    ::Il2CppObject* System_IAsyncResult_get_AsyncState();
    // private System.Boolean System.IAsyncResult.get_CompletedSynchronously()
    // Offset: 0x17B250C
    // Implemented from: System.IAsyncResult
    // Base method: System.Boolean IAsyncResult::get_CompletedSynchronously()
    bool System_IAsyncResult_get_CompletedSynchronously();
    // public System.Void Dispose()
    // Offset: 0x17B2878
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
    // private System.Void System.Threading.IThreadPoolWorkItem.ExecuteWorkItem()
    // Offset: 0x17B4604
    // Implemented from: System.Threading.IThreadPoolWorkItem
    // Base method: System.Void IThreadPoolWorkItem::ExecuteWorkItem()
    void System_Threading_IThreadPoolWorkItem_ExecuteWorkItem();
    // private System.Void System.Threading.IThreadPoolWorkItem.MarkAborted(System.Threading.ThreadAbortException tae)
    // Offset: 0x17B474C
    // Implemented from: System.Threading.IThreadPoolWorkItem
    // Base method: System.Void IThreadPoolWorkItem::MarkAborted(System.Threading.ThreadAbortException tae)
    void System_Threading_IThreadPoolWorkItem_MarkAborted(System::Threading::ThreadAbortException* tae);
  }; // System.Threading.Tasks.Task
  #pragma pack(pop)
  static check_size<sizeof(Task), 72 + sizeof(System::Threading::Tasks::Task::ContingentProperties*)> __System_Threading_Tasks_TaskSizeCheck;
  static_assert(sizeof(Task) == 0x50);
}
DEFINE_IL2CPP_ARG_TYPE(System::Threading::Tasks::Task*, "System.Threading.Tasks", "Task");
