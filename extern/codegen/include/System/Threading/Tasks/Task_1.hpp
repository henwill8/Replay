// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.Tasks.Task
#include "System/Threading/Tasks/Task.hpp"
// Including type: System.Threading.Tasks.TaskCreationOptions
#include "System/Threading/Tasks/TaskCreationOptions.hpp"
// Including type: System.Threading.Tasks.InternalTaskOptions
#include "System/Threading/Tasks/InternalTaskOptions.hpp"
// Including type: System.Threading.StackCrawlMark
#include "System/Threading/StackCrawlMark.hpp"
// Including type: System.Runtime.CompilerServices.TaskAwaiter`1
#include "System/Runtime/CompilerServices/TaskAwaiter_1.hpp"
// Including type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1
#include "System/Runtime/CompilerServices/ConfiguredTaskAwaitable_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Skipping declaration: <>c because it is already included!
  // Forward declaring type: TaskFactory`1<TResult>
  template<typename TResult>
  class TaskFactory_1;
  // Forward declaring type: TaskScheduler
  class TaskScheduler;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: Delegate
  class Delegate;
}
// Completed forward declares
// Type namespace: System.Threading.Tasks
namespace System::Threading::Tasks {
  // Autogenerated type: System.Threading.Tasks.Task`1
  template<typename TResult>
  class Task_1 : public System::Threading::Tasks::Task {
    public:
    // Nested type: System::Threading::Tasks::Task_1::$$c<TResult>
    class $$c;
    // Autogenerated type: System.Threading.Tasks.Task`1/<>c
    class $$c : public ::Il2CppObject, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = Task_1<TResult>*;
      static constexpr std::string_view NESTED_NAME = "$$c";
      // Autogenerated static field getter
      // Get static field: static public readonly System.Threading.Tasks.Task`1/<>c<TResult> <>9
      static typename System::Threading::Tasks::Task_1<TResult>::$$c* _get_$$9() {
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<typename System::Threading::Tasks::Task_1<TResult>::$$c*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename Task_1<TResult>::$$c*>::get(), "<>9")));
      }
      // Autogenerated static field setter
      // Set static field: static public readonly System.Threading.Tasks.Task`1/<>c<TResult> <>9
      static void _set_$$9(typename System::Threading::Tasks::Task_1<TResult>::$$c* value) {
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename Task_1<TResult>::$$c*>::get(), "<>9", value)));
      }
      // static private System.Void .cctor()
      // Offset: 0xFFFFFFFF
      static void _cctor() {
        THROW_UNLESS(il2cpp_utils::RunMethod(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename Task_1<TResult>::$$c*>::get(), ".cctor"));
      }
      // System.Threading.Tasks.Task`1<TResult> <.cctor>b__64_0(System.Threading.Tasks.Task`1<System.Threading.Tasks.Task> completed)
      // Offset: 0xFFFFFFFF
      System::Threading::Tasks::Task_1<TResult>* $_cctor$b__64_0(System::Threading::Tasks::Task_1<System::Threading::Tasks::Task*>* completed) {
        return THROW_UNLESS((il2cpp_utils::RunMethod<System::Threading::Tasks::Task_1<TResult>*>(this, "<.cctor>b__64_0", completed)));
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      static typename Task_1<TResult>::$$c* New_ctor() {
        return THROW_UNLESS(il2cpp_utils::New<typename Task_1<TResult>::$$c*>());
      }
    }; // System.Threading.Tasks.Task`1/<>c
    // TResult m_result
    // Offset: 0x0
    TResult m_result;
    // Autogenerated static field getter
    // Get static field: static private readonly System.Threading.Tasks.TaskFactory`1<TResult> s_Factory
    static System::Threading::Tasks::TaskFactory_1<TResult>* _get_s_Factory() {
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<System::Threading::Tasks::TaskFactory_1<TResult>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Task_1<TResult>*>::get(), "s_Factory"));
    }
    // Autogenerated static field setter
    // Set static field: static private readonly System.Threading.Tasks.TaskFactory`1<TResult> s_Factory
    static void _set_s_Factory(System::Threading::Tasks::TaskFactory_1<TResult>* value) {
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Task_1<TResult>*>::get(), "s_Factory", value));
    }
    // Autogenerated static field getter
    // Get static field: static readonly System.Func`2<System.Threading.Tasks.Task`1<System.Threading.Tasks.Task>,System.Threading.Tasks.Task`1<TResult>> TaskWhenAnyCast
    static System::Func_2<System::Threading::Tasks::Task_1<System::Threading::Tasks::Task*>*, System::Threading::Tasks::Task_1<TResult>*>* _get_TaskWhenAnyCast() {
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<System::Threading::Tasks::Task_1<System::Threading::Tasks::Task*>*, System::Threading::Tasks::Task_1<TResult>*>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Task_1<TResult>*>::get(), "TaskWhenAnyCast")));
    }
    // Autogenerated static field setter
    // Set static field: static readonly System.Func`2<System.Threading.Tasks.Task`1<System.Threading.Tasks.Task>,System.Threading.Tasks.Task`1<TResult>> TaskWhenAnyCast
    static void _set_TaskWhenAnyCast(System::Func_2<System::Threading::Tasks::Task_1<System::Threading::Tasks::Task*>*, System::Threading::Tasks::Task_1<TResult>*>* value) {
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Task_1<TResult>*>::get(), "TaskWhenAnyCast", value));
    }
    // System.Void .ctor(System.Object state, System.Threading.Tasks.TaskCreationOptions options)
    // Offset: 0xFFFFFFFF
    static Task_1<TResult>* New_ctor(::Il2CppObject* state, System::Threading::Tasks::TaskCreationOptions options) {
      return THROW_UNLESS(il2cpp_utils::New<Task_1<TResult>*>(state, options));
    }
    // System.Void .ctor(TResult result)
    // Offset: 0xFFFFFFFF
    static Task_1<TResult>* New_ctor(TResult result) {
      return THROW_UNLESS(il2cpp_utils::New<Task_1<TResult>*>(result));
    }
    // System.Void .ctor(System.Boolean canceled, TResult result, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.CancellationToken ct)
    // Offset: 0xFFFFFFFF
    static Task_1<TResult>* New_ctor(bool canceled, TResult result, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::CancellationToken ct) {
      return THROW_UNLESS(il2cpp_utils::New<Task_1<TResult>*>(canceled, result, creationOptions, ct));
    }
    // public System.Void .ctor(System.Func`2<System.Object,TResult> function, System.Object state, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions)
    // Offset: 0xFFFFFFFF
    static Task_1<TResult>* New_ctor(System::Func_2<::Il2CppObject*, TResult>* function, ::Il2CppObject* state, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions) {
      return THROW_UNLESS(il2cpp_utils::New<Task_1<TResult>*>(function, state, cancellationToken, creationOptions));
    }
    // System.Void .ctor(System.Func`1<TResult> valueSelector, System.Threading.Tasks.Task parent, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler, ref System.Threading.StackCrawlMark stackMark)
    // Offset: 0xFFFFFFFF
    static Task_1<TResult>* New_ctor(System::Func_1<TResult>* valueSelector, System::Threading::Tasks::Task* parent, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::InternalTaskOptions internalOptions, System::Threading::Tasks::TaskScheduler* scheduler, System::Threading::StackCrawlMark& stackMark) {
      return THROW_UNLESS(il2cpp_utils::New<Task_1<TResult>*>(valueSelector, parent, cancellationToken, creationOptions, internalOptions, scheduler, stackMark));
    }
    // System.Void .ctor(System.Func`1<TResult> valueSelector, System.Threading.Tasks.Task parent, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler)
    // Offset: 0xFFFFFFFF
    static Task_1<TResult>* New_ctor(System::Func_1<TResult>* valueSelector, System::Threading::Tasks::Task* parent, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::InternalTaskOptions internalOptions, System::Threading::Tasks::TaskScheduler* scheduler) {
      return THROW_UNLESS(il2cpp_utils::New<Task_1<TResult>*>(valueSelector, parent, cancellationToken, creationOptions, internalOptions, scheduler));
    }
    // static System.Threading.Tasks.Task`1<TResult> StartNew(System.Threading.Tasks.Task parent, System.Func`1<TResult> function, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler, ref System.Threading.StackCrawlMark stackMark)
    // Offset: 0xFFFFFFFF
    static System::Threading::Tasks::Task_1<TResult>* StartNew(System::Threading::Tasks::Task* parent, System::Func_1<TResult>* function, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::InternalTaskOptions internalOptions, System::Threading::Tasks::TaskScheduler* scheduler, System::Threading::StackCrawlMark& stackMark) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task_1<TResult>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Task_1<TResult>*>::get(), "StartNew", parent, function, cancellationToken, creationOptions, internalOptions, scheduler, stackMark));
    }
    // System.Boolean TrySetResult(TResult result)
    // Offset: 0xFFFFFFFF
    bool TrySetResult(TResult result) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TrySetResult", result));
    }
    // public TResult get_Result()
    // Offset: 0xFFFFFFFF
    TResult get_Result() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<TResult>(this, "get_Result"));
    }
    // TResult get_ResultOnSuccess()
    // Offset: 0xFFFFFFFF
    TResult get_ResultOnSuccess() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<TResult>(this, "get_ResultOnSuccess"));
    }
    // TResult GetResultCore(System.Boolean waitCompletionNotification)
    // Offset: 0xFFFFFFFF
    TResult GetResultCore(bool waitCompletionNotification) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<TResult>(this, "GetResultCore", waitCompletionNotification));
    }
    // System.Boolean TrySetException(System.Object exceptionObject)
    // Offset: 0xFFFFFFFF
    bool TrySetException(::Il2CppObject* exceptionObject) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TrySetException", exceptionObject));
    }
    // System.Boolean TrySetCanceled(System.Threading.CancellationToken tokenToRecord)
    // Offset: 0xFFFFFFFF
    bool TrySetCanceled(System::Threading::CancellationToken tokenToRecord) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TrySetCanceled", tokenToRecord));
    }
    // System.Boolean TrySetCanceled(System.Threading.CancellationToken tokenToRecord, System.Object cancellationException)
    // Offset: 0xFFFFFFFF
    bool TrySetCanceled(System::Threading::CancellationToken tokenToRecord, ::Il2CppObject* cancellationException) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TrySetCanceled", tokenToRecord, cancellationException));
    }
    // static public System.Threading.Tasks.TaskFactory`1<TResult> get_Factory()
    // Offset: 0xFFFFFFFF
    static System::Threading::Tasks::TaskFactory_1<TResult>* get_Factory() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::TaskFactory_1<TResult>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Task_1<TResult>*>::get(), "get_Factory"));
    }
    // public System.Runtime.CompilerServices.TaskAwaiter`1<TResult> GetAwaiter()
    // Offset: 0xFFFFFFFF
    System::Runtime::CompilerServices::TaskAwaiter_1<TResult> GetAwaiter() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<System::Runtime::CompilerServices::TaskAwaiter_1<TResult>>(this, "GetAwaiter"));
    }
    // public System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1<TResult> ConfigureAwait(System.Boolean continueOnCapturedContext)
    // Offset: 0xFFFFFFFF
    System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<TResult> ConfigureAwait(bool continueOnCapturedContext) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<System::Runtime::CompilerServices::ConfiguredTaskAwaitable_1<TResult>>(this, "ConfigureAwait", continueOnCapturedContext));
    }
    // System.Void .ctor()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Threading.Tasks.Task
    // Base method: System.Void Task::.ctor()
    // Base method: System.Void Object::.ctor()
    static Task_1<TResult>* New_ctor() {
      return THROW_UNLESS(il2cpp_utils::New<Task_1<TResult>*>());
    }
    // System.Void .ctor(System.Delegate valueSelector, System.Object state, System.Threading.Tasks.Task parent, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Threading.Tasks.Task
    // Base method: System.Void Task::.ctor(System.Delegate valueSelector, System.Object state, System.Threading.Tasks.Task parent, System.Threading.CancellationToken cancellationToken, System.Threading.Tasks.TaskCreationOptions creationOptions, System.Threading.Tasks.InternalTaskOptions internalOptions, System.Threading.Tasks.TaskScheduler scheduler)
    static Task_1<TResult>* New_ctor(System::Delegate* valueSelector, ::Il2CppObject* state, System::Threading::Tasks::Task* parent, System::Threading::CancellationToken cancellationToken, System::Threading::Tasks::TaskCreationOptions creationOptions, System::Threading::Tasks::InternalTaskOptions internalOptions, System::Threading::Tasks::TaskScheduler* scheduler) {
      return THROW_UNLESS(il2cpp_utils::New<Task_1<TResult>*>(valueSelector, state, parent, cancellationToken, creationOptions, internalOptions, scheduler));
    }
    // override System.Void InnerInvoke()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Threading.Tasks.Task
    // Base method: System.Void Task::InnerInvoke()
    void InnerInvoke() {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "InnerInvoke"));
    }
    // static private System.Void .cctor()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Threading.Tasks.Task
    // Base method: System.Void Task::.cctor()
    static void _cctor() {
      THROW_UNLESS(il2cpp_utils::RunMethod(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Task_1<TResult>*>::get(), ".cctor"));
    }
  }; // System.Threading.Tasks.Task`1
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(System::Threading::Tasks::Task_1, "System.Threading.Tasks", "Task`1");
#pragma pack(pop)
