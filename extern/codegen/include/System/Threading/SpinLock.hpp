// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
}
// Completed forward declares
// Type namespace: System.Threading
namespace System::Threading {
  // Size: 0x4
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Threading.SpinLock
  // [] Offset: FFFFFFFF
  // [DebuggerDisplayAttribute] Offset: CAA51C
  // [ComVisibleAttribute] Offset: CAA51C
  // [DebuggerTypeProxyAttribute] Offset: CAA51C
  struct SpinLock/*, public System::ValueType*/ {
    public:
    // Nested type: System::Threading::SpinLock::SystemThreading_SpinLockDebugView
    class SystemThreading_SpinLockDebugView;
    // private System.Int32 m_owner
    // Size: 0x4
    // Offset: 0x0
    int m_owner;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: SpinLock
    constexpr SpinLock(int m_owner_ = {}) noexcept : m_owner{m_owner_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return m_owner;
    }
    // Get static field: static private System.Int32 MAXIMUM_WAITERS
    static int _get_MAXIMUM_WAITERS();
    // Set static field: static private System.Int32 MAXIMUM_WAITERS
    static void _set_MAXIMUM_WAITERS(int value);
    // public System.Void .ctor(System.Boolean enableThreadOwnerTracking)
    // Offset: 0xE0E144
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    SpinLock(bool enableThreadOwnerTracking) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::SpinLock::.ctor");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(enableThreadOwnerTracking)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, enableThreadOwnerTracking);
    }
    // public System.Void Enter(ref System.Boolean lockTaken)
    // Offset: 0xE0E150
    void Enter(bool& lockTaken);
    // public System.Void TryEnter(System.Int32 millisecondsTimeout, ref System.Boolean lockTaken)
    // Offset: 0xE0E158
    void TryEnter(int millisecondsTimeout, bool& lockTaken);
    // private System.Void ContinueTryEnter(System.Int32 millisecondsTimeout, ref System.Boolean lockTaken)
    // Offset: 0xE0E160
    void ContinueTryEnter(int millisecondsTimeout, bool& lockTaken);
    // private System.Void DecrementWaiters()
    // Offset: 0xE0E168
    void DecrementWaiters();
    // private System.Void ContinueTryEnterWithThreadTracking(System.Int32 millisecondsTimeout, System.UInt32 startTime, ref System.Boolean lockTaken)
    // Offset: 0xE0E170
    void ContinueTryEnterWithThreadTracking(int millisecondsTimeout, uint startTime, bool& lockTaken);
    // public System.Void Exit(System.Boolean useMemoryBarrier)
    // Offset: 0xE0E178
    void Exit(bool useMemoryBarrier);
    // private System.Void ExitSlowPath(System.Boolean useMemoryBarrier)
    // Offset: 0xE0E184
    void ExitSlowPath(bool useMemoryBarrier);
    // public System.Boolean get_IsHeldByCurrentThread()
    // Offset: 0xE0E190
    bool get_IsHeldByCurrentThread();
    // public System.Boolean get_IsThreadOwnerTrackingEnabled()
    // Offset: 0xE0E198
    bool get_IsThreadOwnerTrackingEnabled();
    // static private System.Void .cctor()
    // Offset: 0x17AE3D8
    static void _cctor();
  }; // System.Threading.SpinLock
  #pragma pack(pop)
  static check_size<sizeof(SpinLock), 0 + sizeof(int)> __System_Threading_SpinLockSizeCheck;
  static_assert(sizeof(SpinLock) == 0x4);
}
DEFINE_IL2CPP_ARG_TYPE(System::Threading::SpinLock, "System.Threading", "SpinLock");
