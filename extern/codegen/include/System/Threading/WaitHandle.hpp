// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.MarshalByRefObject
#include "System/MarshalByRefObject.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Microsoft::Win32::SafeHandles
namespace Microsoft::Win32::SafeHandles {
  // Forward declaring type: SafeWaitHandle
  class SafeWaitHandle;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: TimeSpan
  struct TimeSpan;
}
// Forward declaring namespace: System::Runtime::InteropServices
namespace System::Runtime::InteropServices {
  // Forward declaring type: SafeHandle
  class SafeHandle;
}
// Completed forward declares
// Type namespace: System.Threading
namespace System::Threading {
  // Size: 0x29
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Threading.WaitHandle
  // [] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: CAA868
  class WaitHandle : public System::MarshalByRefObject/*, public System::IDisposable*/ {
    public:
    // private System.IntPtr waitHandle
    // Size: 0x8
    // Offset: 0x18
    System::IntPtr waitHandle;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // Microsoft.Win32.SafeHandles.SafeWaitHandle safeWaitHandle
    // Size: 0x8
    // Offset: 0x20
    Microsoft::Win32::SafeHandles::SafeWaitHandle* safeWaitHandle;
    // Field size check
    static_assert(sizeof(Microsoft::Win32::SafeHandles::SafeWaitHandle*) == 0x8);
    // System.Boolean hasThreadAffinity
    // Size: 0x1
    // Offset: 0x28
    bool hasThreadAffinity;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: WaitHandle
    WaitHandle(System::IntPtr waitHandle_ = {}, Microsoft::Win32::SafeHandles::SafeWaitHandle* safeWaitHandle_ = {}, bool hasThreadAffinity_ = {}) noexcept : waitHandle{waitHandle_}, safeWaitHandle{safeWaitHandle_}, hasThreadAffinity{hasThreadAffinity_} {}
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // Deleting conversion operator: operator ::Il2CppObject*
    constexpr operator ::Il2CppObject*() const noexcept = delete;
    // static field const value: static public System.Int32 WaitTimeout
    static constexpr const int WaitTimeout = 258;
    // Get static field: static public System.Int32 WaitTimeout
    static int _get_WaitTimeout();
    // Set static field: static public System.Int32 WaitTimeout
    static void _set_WaitTimeout(int value);
    // static field const value: static private System.Int32 MAX_WAITHANDLES
    static constexpr const int MAX_WAITHANDLES = 64;
    // Get static field: static private System.Int32 MAX_WAITHANDLES
    static int _get_MAX_WAITHANDLES();
    // Set static field: static private System.Int32 MAX_WAITHANDLES
    static void _set_MAX_WAITHANDLES(int value);
    // static field const value: static private System.Int32 WAIT_OBJECT_0
    static constexpr const int WAIT_OBJECT_0 = 0;
    // Get static field: static private System.Int32 WAIT_OBJECT_0
    static int _get_WAIT_OBJECT_0();
    // Set static field: static private System.Int32 WAIT_OBJECT_0
    static void _set_WAIT_OBJECT_0(int value);
    // static field const value: static private System.Int32 WAIT_ABANDONED
    static constexpr const int WAIT_ABANDONED = 128;
    // Get static field: static private System.Int32 WAIT_ABANDONED
    static int _get_WAIT_ABANDONED();
    // Set static field: static private System.Int32 WAIT_ABANDONED
    static void _set_WAIT_ABANDONED(int value);
    // static field const value: static private System.Int32 WAIT_FAILED
    static constexpr const int WAIT_FAILED = 2147483647;
    // Get static field: static private System.Int32 WAIT_FAILED
    static int _get_WAIT_FAILED();
    // Set static field: static private System.Int32 WAIT_FAILED
    static void _set_WAIT_FAILED(int value);
    // static field const value: static private System.Int32 ERROR_TOO_MANY_POSTS
    static constexpr const int ERROR_TOO_MANY_POSTS = 298;
    // Get static field: static private System.Int32 ERROR_TOO_MANY_POSTS
    static int _get_ERROR_TOO_MANY_POSTS();
    // Set static field: static private System.Int32 ERROR_TOO_MANY_POSTS
    static void _set_ERROR_TOO_MANY_POSTS(int value);
    // Get static field: static protected readonly System.IntPtr InvalidHandle
    static System::IntPtr _get_InvalidHandle();
    // Set static field: static protected readonly System.IntPtr InvalidHandle
    static void _set_InvalidHandle(System::IntPtr value);
    // static field const value: static System.Int32 MaxWaitHandles
    static constexpr const int MaxWaitHandles = 64;
    // Get static field: static System.Int32 MaxWaitHandles
    static int _get_MaxWaitHandles();
    // Set static field: static System.Int32 MaxWaitHandles
    static void _set_MaxWaitHandles(int value);
    // private System.Void Init()
    // Offset: 0x17C06E0
    void Init();
    // public System.Void set_Handle(System.IntPtr value)
    // Offset: 0x17C0768
    void set_Handle(System::IntPtr value);
    // public Microsoft.Win32.SafeHandles.SafeWaitHandle get_SafeWaitHandle()
    // Offset: 0x17AAB5C
    Microsoft::Win32::SafeHandles::SafeWaitHandle* get_SafeWaitHandle();
    // public System.Void set_SafeWaitHandle(Microsoft.Win32.SafeHandles.SafeWaitHandle value)
    // Offset: 0x17C086C
    void set_SafeWaitHandle(Microsoft::Win32::SafeHandles::SafeWaitHandle* value);
    // System.Void SetHandleInternal(Microsoft.Win32.SafeHandles.SafeWaitHandle handle)
    // Offset: 0x17C0934
    void SetHandleInternal(Microsoft::Win32::SafeHandles::SafeWaitHandle* handle);
    // public System.Boolean WaitOne(System.Int32 millisecondsTimeout, System.Boolean exitContext)
    // Offset: 0x17C0978
    bool WaitOne(int millisecondsTimeout, bool exitContext);
    // public System.Boolean WaitOne(System.TimeSpan timeout, System.Boolean exitContext)
    // Offset: 0x17C0AC8
    bool WaitOne(System::TimeSpan timeout, bool exitContext);
    // public System.Boolean WaitOne()
    // Offset: 0x17C0BA4
    bool WaitOne();
    // public System.Boolean WaitOne(System.Int32 millisecondsTimeout)
    // Offset: 0x17C0BB8
    bool WaitOne(int millisecondsTimeout);
    // public System.Boolean WaitOne(System.TimeSpan timeout)
    // Offset: 0x17C0BC8
    bool WaitOne(System::TimeSpan timeout);
    // private System.Boolean WaitOne(System.Int64 timeout, System.Boolean exitContext)
    // Offset: 0x17C0A38
    bool WaitOne(int64_t timeout, bool exitContext);
    // static System.Boolean InternalWaitOne(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.Int64 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext)
    // Offset: 0x17C0BD8
    static bool InternalWaitOne(System::Runtime::InteropServices::SafeHandle* waitableSafeHandle, int64_t millisecondsTimeout, bool hasThreadAffinity, bool exitContext);
    // static public System.Int32 WaitAny(System.Threading.WaitHandle[] waitHandles, System.Int32 millisecondsTimeout, System.Boolean exitContext)
    // Offset: 0x17C0E6C
    static int WaitAny(::Array<System::Threading::WaitHandle*>* waitHandles, int millisecondsTimeout, bool exitContext);
    // static public System.Int32 WaitAny(System.Threading.WaitHandle[] waitHandles, System.TimeSpan timeout, System.Boolean exitContext)
    // Offset: 0x17AAC20
    static int WaitAny(::Array<System::Threading::WaitHandle*>* waitHandles, System::TimeSpan timeout, bool exitContext);
    // static private System.Void ThrowAbandonedMutexException()
    // Offset: 0x17C0E0C
    static void ThrowAbandonedMutexException();
    // static private System.Void ThrowAbandonedMutexException(System.Int32 location, System.Threading.WaitHandle handle)
    // Offset: 0x17C1470
    static void ThrowAbandonedMutexException(int location, System::Threading::WaitHandle* handle);
    // public System.Void Close()
    // Offset: 0x17C14E4
    void Close();
    // protected System.Void Dispose(System.Boolean explicitDisposing)
    // Offset: 0x17C1564
    void Dispose(bool explicitDisposing);
    // static private System.Int32 WaitMultiple(System.Threading.WaitHandle[] waitHandles, System.Int32 millisecondsTimeout, System.Boolean exitContext, System.Boolean WaitAll)
    // Offset: 0x17C118C
    static int WaitMultiple(::Array<System::Threading::WaitHandle*>* waitHandles, int millisecondsTimeout, bool exitContext, bool WaitAll);
    // static private System.Int32 WaitOneNative(System.Runtime.InteropServices.SafeHandle waitableSafeHandle, System.UInt32 millisecondsTimeout, System.Boolean hasThreadAffinity, System.Boolean exitContext)
    // Offset: 0x17C0CEC
    static int WaitOneNative(System::Runtime::InteropServices::SafeHandle* waitableSafeHandle, uint millisecondsTimeout, bool hasThreadAffinity, bool exitContext);
    // static private System.Int32 Wait_internal(System.IntPtr* handles, System.Int32 numHandles, System.Boolean waitAll, System.Int32 ms)
    // Offset: 0x17C1630
    static int Wait_internal(System::IntPtr* handles, int numHandles, bool waitAll, int ms);
    // static private System.Void .cctor()
    // Offset: 0x17C1638
    static void _cctor();
    // protected System.Void .ctor()
    // Offset: 0x17C06B8
    // Implemented from: System.MarshalByRefObject
    // Base method: System.Void MarshalByRefObject::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static WaitHandle* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::WaitHandle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<WaitHandle*, creationType>()));
    }
    // public System.Void Dispose()
    // Offset: 0x17C15B0
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
  }; // System.Threading.WaitHandle
  #pragma pack(pop)
  static check_size<sizeof(WaitHandle), 40 + sizeof(bool)> __System_Threading_WaitHandleSizeCheck;
  static_assert(sizeof(WaitHandle) == 0x29);
}
DEFINE_IL2CPP_ARG_TYPE(System::Threading::WaitHandle*, "System.Threading", "WaitHandle");
