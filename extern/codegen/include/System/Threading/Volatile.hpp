// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Threading
namespace System::Threading {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Threading.Volatile
  // [] Offset: FFFFFFFF
  class Volatile : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: Volatile
    Volatile() noexcept {}
    // static public System.Boolean Read(ref System.Boolean location)
    // Offset: 0x17C05F0
    static bool Read(bool& location);
    // static public System.Int32 Read(ref System.Int32 location)
    // Offset: 0x17C0614
    static int Read(int& location);
    // static public T Read(ref T location)
    // Offset: 0xFFFFFFFF
    template<class T>
    static T Read(T& location) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Volatile::Read");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading", "Volatile", "Read", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(location)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<T, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, location);
    }
    // static public System.Void Write(ref System.Boolean location, System.Boolean value)
    // Offset: 0x17C0638
    static void Write(bool& location, bool value);
    // static public System.Void Write(ref System.Int32 location, System.Int32 value)
    // Offset: 0x17C0660
    static void Write(int& location, int value);
    // static public System.Void Write(ref T location, T value)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void Write(T& location, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Threading::Volatile::Write");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System.Threading", "Volatile", "Write", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(location, value)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, location, value);
    }
  }; // System.Threading.Volatile
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(System::Threading::Volatile*, "System.Threading", "Volatile");
