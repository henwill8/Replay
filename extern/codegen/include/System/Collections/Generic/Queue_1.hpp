// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Collections.ICollection
#include "System/Collections/ICollection.hpp"
// Including type: System.Collections.Generic.IReadOnlyCollection`1
#include "System/Collections/Generic/IReadOnlyCollection_1.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: Enumerator because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
// Type namespace: System.Collections.Generic
namespace System::Collections::Generic {
  // Autogenerated type: System.Collections.Generic.Queue`1
  template<typename T>
  class Queue_1 : public ::Il2CppObject/*, public System::Collections::ICollection, public System::Collections::Generic::IReadOnlyCollection_1<T>*/ {
    public:
    // Nested type: System::Collections::Generic::Queue_1::Enumerator<T>
    struct Enumerator;
    // Autogenerated type: System.Collections.Generic.Queue`1/Enumerator
    struct Enumerator : public System::ValueType, public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public System::Collections::Generic::IEnumerator_1<T>*/ {
      public:
      using declaring_type = Queue_1<T>*;
      static constexpr std::string_view NESTED_NAME = "Enumerator";
      // private readonly System.Collections.Generic.Queue`1<T> _q
      // Offset: 0x0
      System::Collections::Generic::Queue_1<T>* q;
      // private readonly System.Int32 _version
      // Offset: 0x0
      int version;
      // private System.Int32 _index
      // Offset: 0x0
      int index;
      // private T _currentElement
      // Offset: 0x0
      T currentElement;
      // Creating value type constructor for type: Enumerator
      constexpr Enumerator(System::Collections::Generic::Queue_1<T>* q_ = {}, int version_ = {}, int index_ = {}, T currentElement_ = {}) noexcept : q{q_}, version{version_}, index{index_}, currentElement{currentElement_} {}
      // Creating interface conversion operator: operator System::Collections::Generic::IEnumerator_1<T>
      operator System::Collections::Generic::IEnumerator_1<T>() noexcept {
        return *reinterpret_cast<System::Collections::Generic::IEnumerator_1<T>*>(this);
      }
      // System.Void .ctor(System.Collections.Generic.Queue`1<T> q)
      // Offset: 0xFFFFFFFF
      Enumerator(System::Collections::Generic::Queue_1<T>* q) {
        THROW_UNLESS(il2cpp_utils::RunMethod(*this, ".ctor", q));
      }
      // private System.Void ThrowEnumerationNotStartedOrEnded()
      // Offset: 0xFFFFFFFF
      void ThrowEnumerationNotStartedOrEnded() {
        THROW_UNLESS(il2cpp_utils::RunMethod(*this, "ThrowEnumerationNotStartedOrEnded"));
      }
      // public System.Void Dispose()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.IDisposable
      // Base method: System.Void IDisposable::Dispose()
      void Dispose() {
        THROW_UNLESS(il2cpp_utils::RunMethod(*this, "Dispose"));
      }
      // Creating proxy method: System_IDisposable_Dispose
      // Maps to method: Dispose
      void System_IDisposable_Dispose() {
        Dispose();
      }
      // public System.Boolean MoveNext()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Boolean IEnumerator::MoveNext()
      bool MoveNext() {
        return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "MoveNext"));
      }
      // Creating proxy method: System_Collections_IEnumerator_MoveNext
      // Maps to method: MoveNext
      bool System_Collections_IEnumerator_MoveNext() {
        return MoveNext();
      }
      // public T get_Current()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.IEnumerator`1
      // Base method: T IEnumerator_1::get_Current()
      T get_Current() {
        return THROW_UNLESS(il2cpp_utils::RunMethod<T>(*this, "get_Current"));
      }
      // Creating proxy method: System_Collections_Generic_IEnumerator_1_get_Current
      // Maps to method: get_Current
      T System_Collections_Generic_IEnumerator_1_get_Current() {
        return get_Current();
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Object IEnumerator::get_Current()
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppObject*>(*this, "System.Collections.IEnumerator.get_Current"));
      }
      // private System.Void System.Collections.IEnumerator.Reset()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Void IEnumerator::Reset()
      void System_Collections_IEnumerator_Reset() {
        THROW_UNLESS(il2cpp_utils::RunMethod(*this, "System.Collections.IEnumerator.Reset"));
      }
    }; // System.Collections.Generic.Queue`1/Enumerator
    // private T[] _array
    // Offset: 0x0
    ::Array<T>* array;
    // private System.Int32 _head
    // Offset: 0x0
    int head;
    // private System.Int32 _tail
    // Offset: 0x0
    int tail;
    // private System.Int32 _size
    // Offset: 0x0
    int size;
    // private System.Int32 _version
    // Offset: 0x0
    int version;
    // private System.Object _syncRoot
    // Offset: 0x0
    ::Il2CppObject* syncRoot;
    // Creating interface conversion operator: operator System::Collections::ICollection
    operator System::Collections::ICollection() noexcept {
      return *reinterpret_cast<System::Collections::ICollection*>(this);
    }
    // Creating interface conversion operator: operator System::Collections::Generic::IReadOnlyCollection_1<T>
    operator System::Collections::Generic::IReadOnlyCollection_1<T>() noexcept {
      return *reinterpret_cast<System::Collections::Generic::IReadOnlyCollection_1<T>*>(this);
    }
    // Autogenerated static field getter
    // Get static field: static private System.Int32 MinimumGrow
    static int _get_MinimumGrow() {
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Queue_1<T>*>::get(), "MinimumGrow"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 MinimumGrow
    static void _set_MinimumGrow(int value) {
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Queue_1<T>*>::get(), "MinimumGrow", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.Int32 GrowFactor
    static int _get_GrowFactor() {
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Queue_1<T>*>::get(), "GrowFactor"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 GrowFactor
    static void _set_GrowFactor(int value) {
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Queue_1<T>*>::get(), "GrowFactor", value));
    }
    // public System.Void .ctor(System.Int32 capacity)
    // Offset: 0xFFFFFFFF
    static Queue_1<T>* New_ctor(int capacity) {
      return THROW_UNLESS(il2cpp_utils::New<Queue_1<T>*>(capacity));
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFF
    void Clear() {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Clear"));
    }
    // public System.Void Enqueue(T item)
    // Offset: 0xFFFFFFFF
    void Enqueue(T item) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Enqueue", item));
    }
    // public System.Collections.Generic.Queue`1/Enumerator<T> GetEnumerator()
    // Offset: 0xFFFFFFFF
    typename System::Collections::Generic::Queue_1<T>::Enumerator GetEnumerator() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<typename System::Collections::Generic::Queue_1<T>::Enumerator>(this, "GetEnumerator"));
    }
    // public T Dequeue()
    // Offset: 0xFFFFFFFF
    T Dequeue() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<T>(this, "Dequeue"));
    }
    // public T Peek()
    // Offset: 0xFFFFFFFF
    T Peek() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<T>(this, "Peek"));
    }
    // public T[] ToArray()
    // Offset: 0xFFFFFFFF
    ::Array<T>* ToArray() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<T>*>(this, "ToArray"));
    }
    // private System.Void SetCapacity(System.Int32 capacity)
    // Offset: 0xFFFFFFFF
    void SetCapacity(int capacity) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetCapacity", capacity));
    }
    // private System.Void MoveNext(ref System.Int32 index)
    // Offset: 0xFFFFFFFF
    void MoveNext(int& index) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "MoveNext", index));
    }
    // private System.Void ThrowForEmptyQueue()
    // Offset: 0xFFFFFFFF
    void ThrowForEmptyQueue() {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "ThrowForEmptyQueue"));
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static Queue_1<T>* New_ctor() {
      return THROW_UNLESS(il2cpp_utils::New<Queue_1<T>*>());
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.ICollection
    // Base method: System.Int32 ICollection::get_Count()
    // Base method: System.Int32 IReadOnlyCollection_1::get_Count()
    int get_Count() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_Count"));
    }
    // Creating proxy method: System_Collections_ICollection_get_Count
    // Maps to method: get_Count
    int System_Collections_ICollection_get_Count() {
      return get_Count();
    }
    // private System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.ICollection
    // Base method: System.Void ICollection::CopyTo(System.Array array, System.Int32 index)
    void System_Collections_ICollection_CopyTo(System::Array* array, int index) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "System.Collections.ICollection.CopyTo", array, index));
    }
    // private System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.IEnumerable`1
    // Base method: System.Collections.Generic.IEnumerator`1<T> IEnumerable_1::GetEnumerator()
    System::Collections::Generic::IEnumerator_1<T>* System_Collections_Generic_IEnumerable_1_GetEnumerator() {
      return THROW_UNLESS((il2cpp_utils::RunMethod<System::Collections::Generic::IEnumerator_1<T>*>(this, "System.Collections.Generic.IEnumerable<T>.GetEnumerator")));
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.IEnumerable
    // Base method: System.Collections.IEnumerator IEnumerable::GetEnumerator()
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::IEnumerator*>(this, "System.Collections.IEnumerable.GetEnumerator"));
    }
  }; // System.Collections.Generic.Queue`1
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(System::Collections::Generic::Queue_1, "System.Collections.Generic", "Queue`1");
#pragma pack(pop)
