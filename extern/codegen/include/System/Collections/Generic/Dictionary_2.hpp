// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Collections.Generic.IDictionary`2
#include "System/Collections/Generic/IDictionary_2.hpp"
// Including type: System.Collections.IDictionary
#include "System/Collections/IDictionary.hpp"
// Including type: System.Collections.Generic.IReadOnlyDictionary`2
#include "System/Collections/Generic/IReadOnlyDictionary_2.hpp"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.Runtime.Serialization.IDeserializationCallback
#include "System/Runtime/Serialization/IDeserializationCallback.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
// Including type: System.Collections.Generic.InsertionBehavior
#include "System/Collections/Generic/InsertionBehavior.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: System.Collections.IDictionaryEnumerator
#include "System/Collections/IDictionaryEnumerator.hpp"
// Including type: System.Collections.DictionaryEntry
#include "System/Collections/DictionaryEntry.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: Entry because it is already included!
  // Skipping declaration: Enumerator because it is already included!
  // Skipping declaration: KeyCollection because it is already included!
  // Skipping declaration: ValueCollection because it is already included!
  // Forward declaring type: IEqualityComparer`1<T>
  template<typename T>
  class IEqualityComparer_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: Array
  class Array;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
// Type namespace: System.Collections.Generic
namespace System::Collections::Generic {
  // WARNING Size may be invalid!
  // Autogenerated type: System.Collections.Generic.Dictionary`2
  // [] Offset: FFFFFFFF
  // [DebuggerTypeProxyAttribute] Offset: CADCF0
  // [DefaultMemberAttribute] Offset: CADCF0
  // [DebuggerDisplayAttribute] Offset: CADCF0
  template<typename TKey, typename TValue>
  class Dictionary_2 : public ::Il2CppObject/*, public System::Collections::Generic::IDictionary_2<TKey, TValue>, public System::Collections::IDictionary, public System::Collections::Generic::IReadOnlyDictionary_2<TKey, TValue>, public System::Runtime::Serialization::ISerializable, public System::Runtime::Serialization::IDeserializationCallback*/ {
    public:
    // Nested type: System::Collections::Generic::Dictionary_2::Entry<TKey, TValue>
    struct Entry;
    // Nested type: System::Collections::Generic::Dictionary_2::Enumerator<TKey, TValue>
    struct Enumerator;
    // Nested type: System::Collections::Generic::Dictionary_2::KeyCollection<TKey, TValue>
    class KeyCollection;
    // Nested type: System::Collections::Generic::Dictionary_2::ValueCollection<TKey, TValue>
    class ValueCollection;
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Collections.Generic.Dictionary`2/Entry
    // [] Offset: FFFFFFFF
    struct Entry : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public System::ValueType*/ {
      public:
      using declaring_type = Dictionary_2<TKey, TValue>*;
      static constexpr std::string_view NESTED_NAME = "Entry";
      // public System.Int32 hashCode
      // Size: 0x4
      // Offset: 0x0
      int hashCode;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 next
      // Size: 0x4
      // Offset: 0x0
      int next;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public TKey key
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      TKey key;
      // public TValue value
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      TValue value;
      // Creating value type constructor for type: Entry
      constexpr Entry(int hashCode_ = {}, int next_ = {}, TKey key_ = {}, TValue value_ = {}) noexcept : hashCode{hashCode_}, next{next_}, key{key_}, value{value_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
    }; // System.Collections.Generic.Dictionary`2/Entry
    // Could not write size check! Type: System.Collections.Generic.Dictionary`2/Entry is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Collections.Generic.Dictionary`2/Enumerator
    // [] Offset: FFFFFFFF
    struct Enumerator : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public System::ValueType, public System::Collections::Generic::IEnumerator_1<System::Collections::Generic::KeyValuePair_2<TKey, TValue>>, public System::Collections::IDictionaryEnumerator*/ {
      public:
      using declaring_type = Dictionary_2<TKey, TValue>*;
      static constexpr std::string_view NESTED_NAME = "Enumerator";
      // private System.Collections.Generic.Dictionary`2<TKey,TValue> dictionary
      // Size: 0x8
      // Offset: 0x0
      System::Collections::Generic::Dictionary_2<TKey, TValue>* dictionary;
      // Field size check
      static_assert(sizeof(System::Collections::Generic::Dictionary_2<TKey, TValue>*) == 0x8);
      // private System.Int32 version
      // Size: 0x4
      // Offset: 0x0
      int version;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private System.Int32 index
      // Size: 0x4
      // Offset: 0x0
      int index;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private System.Collections.Generic.KeyValuePair`2<TKey,TValue> current
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      System::Collections::Generic::KeyValuePair_2<TKey, TValue> current;
      // private System.Int32 getEnumeratorRetType
      // Size: 0x4
      // Offset: 0x0
      int getEnumeratorRetType;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: Enumerator
      constexpr Enumerator(System::Collections::Generic::Dictionary_2<TKey, TValue>* dictionary_ = {}, int version_ = {}, int index_ = {}, System::Collections::Generic::KeyValuePair_2<TKey, TValue> current_ = {}, int getEnumeratorRetType_ = {}) noexcept : dictionary{dictionary_}, version{version_}, index{index_}, current{current_}, getEnumeratorRetType{getEnumeratorRetType_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator System::Collections::Generic::IEnumerator_1<System::Collections::Generic::KeyValuePair_2<TKey, TValue>>
      operator System::Collections::Generic::IEnumerator_1<System::Collections::Generic::KeyValuePair_2<TKey, TValue>>() noexcept {
        return *reinterpret_cast<System::Collections::Generic::IEnumerator_1<System::Collections::Generic::KeyValuePair_2<TKey, TValue>>*>(this);
      }
      // Creating interface conversion operator: operator System::Collections::IDictionaryEnumerator
      operator System::Collections::IDictionaryEnumerator() noexcept {
        return *reinterpret_cast<System::Collections::IDictionaryEnumerator*>(this);
      }
      // System.Void .ctor(System.Collections.Generic.Dictionary`2<TKey,TValue> dictionary, System.Int32 getEnumeratorRetType)
      // Offset: 0xFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      Enumerator(System::Collections::Generic::Dictionary_2<TKey, TValue>* dictionary, int getEnumeratorRetType) {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::Enumerator::.ctor");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(dictionary, getEnumeratorRetType)));
        ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, dictionary, getEnumeratorRetType);
      }
      // public System.Boolean MoveNext()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Boolean IEnumerator::MoveNext()
      bool MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::Enumerator::MoveNext");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
        return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
      }
      // Creating proxy method: System_Collections_IEnumerator_MoveNext
      // Maps to method: MoveNext
      bool System_Collections_IEnumerator_MoveNext() {
        return MoveNext();
      }
      // public System.Collections.Generic.KeyValuePair`2<TKey,TValue> get_Current()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.IEnumerator`1
      // Base method: T IEnumerator_1::get_Current()
      System::Collections::Generic::KeyValuePair_2<TKey, TValue> get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::Enumerator::get_Current");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
        return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::KeyValuePair_2<TKey, TValue>, false>(*this, ___internal__method);
      }
      // Creating proxy method: System_Collections_Generic_IEnumerator_1_get_Current
      // Maps to method: get_Current
      System::Collections::Generic::KeyValuePair_2<TKey, TValue> System_Collections_Generic_IEnumerator_1_get_Current() {
        return get_Current();
      }
      // public System.Void Dispose()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.IDisposable
      // Base method: System.Void IDisposable::Dispose()
      void Dispose() {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::Enumerator::Dispose");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "Dispose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
        ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
      }
      // Creating proxy method: System_IDisposable_Dispose
      // Maps to method: Dispose
      void System_IDisposable_Dispose() {
        Dispose();
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Object IEnumerator::get_Current()
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::Enumerator::System.Collections.IEnumerator.get_Current");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
        return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(*this, ___internal__method);
      }
      // private System.Void System.Collections.IEnumerator.Reset()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Void IEnumerator::Reset()
      void System_Collections_IEnumerator_Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::Enumerator::System.Collections.IEnumerator.Reset");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
        ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
      }
      // private System.Collections.DictionaryEntry System.Collections.IDictionaryEnumerator.get_Entry()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IDictionaryEnumerator
      // Base method: System.Collections.DictionaryEntry IDictionaryEnumerator::get_Entry()
      System::Collections::DictionaryEntry System_Collections_IDictionaryEnumerator_get_Entry() {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::Enumerator::System.Collections.IDictionaryEnumerator.get_Entry");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "System.Collections.IDictionaryEnumerator.get_Entry", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
        return ::il2cpp_utils::RunMethodThrow<System::Collections::DictionaryEntry, false>(*this, ___internal__method);
      }
      // private System.Object System.Collections.IDictionaryEnumerator.get_Key()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IDictionaryEnumerator
      // Base method: System.Object IDictionaryEnumerator::get_Key()
      ::Il2CppObject* System_Collections_IDictionaryEnumerator_get_Key() {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::Enumerator::System.Collections.IDictionaryEnumerator.get_Key");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "System.Collections.IDictionaryEnumerator.get_Key", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
        return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(*this, ___internal__method);
      }
      // private System.Object System.Collections.IDictionaryEnumerator.get_Value()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IDictionaryEnumerator
      // Base method: System.Object IDictionaryEnumerator::get_Value()
      ::Il2CppObject* System_Collections_IDictionaryEnumerator_get_Value() {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::Enumerator::System.Collections.IDictionaryEnumerator.get_Value");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "System.Collections.IDictionaryEnumerator.get_Value", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
        return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(*this, ___internal__method);
      }
    }; // System.Collections.Generic.Dictionary`2/Enumerator
    // Could not write size check! Type: System.Collections.Generic.Dictionary`2/Enumerator is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: System.Collections.Generic.Dictionary`2/KeyCollection
    // [] Offset: FFFFFFFF
    // [DebuggerDisplayAttribute] Offset: CADD9C
    // [DebuggerTypeProxyAttribute] Offset: CADD9C
    class KeyCollection : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject/*, public System::Collections::Generic::ICollection_1<TKey>, public System::Collections::ICollection, public System::Collections::Generic::IReadOnlyCollection_1<TKey>*/ {
      public:
      using declaring_type = Dictionary_2<TKey, TValue>*;
      static constexpr std::string_view NESTED_NAME = "KeyCollection";
      // Nested type: System::Collections::Generic::Dictionary_2::KeyCollection::Enumerator<TKey, TValue>
      struct Enumerator;
      // WARNING Size may be invalid!
      // WARNING Layout: Sequential may not be correctly taken into account!
      // Autogenerated type: System.Collections.Generic.Dictionary`2/KeyCollection/Enumerator
      // [] Offset: FFFFFFFF
      struct Enumerator : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public System::ValueType, public System::Collections::Generic::IEnumerator_1<TKey>*/ {
        public:
        using declaring_type = typename Dictionary_2<TKey, TValue>::KeyCollection*;
        static constexpr std::string_view NESTED_NAME = "Enumerator";
        // private System.Collections.Generic.Dictionary`2<TKey,TValue> dictionary
        // Size: 0x8
        // Offset: 0x0
        System::Collections::Generic::Dictionary_2<TKey, TValue>* dictionary;
        // Field size check
        static_assert(sizeof(System::Collections::Generic::Dictionary_2<TKey, TValue>*) == 0x8);
        // private System.Int32 index
        // Size: 0x4
        // Offset: 0x0
        int index;
        // Field size check
        static_assert(sizeof(int) == 0x4);
        // private System.Int32 version
        // Size: 0x4
        // Offset: 0x0
        int version;
        // Field size check
        static_assert(sizeof(int) == 0x4);
        // private TKey currentKey
        // Size: 0xFFFFFFFF
        // Offset: 0x0
        TKey currentKey;
        // Creating value type constructor for type: Enumerator
        constexpr Enumerator(System::Collections::Generic::Dictionary_2<TKey, TValue>* dictionary_ = {}, int index_ = {}, int version_ = {}, TKey currentKey_ = {}) noexcept : dictionary{dictionary_}, index{index_}, version{version_}, currentKey{currentKey_} {}
        // Creating interface conversion operator: operator System::ValueType
        operator System::ValueType() noexcept {
          return *reinterpret_cast<System::ValueType*>(this);
        }
        // Creating interface conversion operator: operator System::Collections::Generic::IEnumerator_1<TKey>
        operator System::Collections::Generic::IEnumerator_1<TKey>() noexcept {
          return *reinterpret_cast<System::Collections::Generic::IEnumerator_1<TKey>*>(this);
        }
        // System.Void .ctor(System.Collections.Generic.Dictionary`2<TKey,TValue> dictionary)
        // Offset: 0xFFFFFFFF
        template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
        Enumerator(System::Collections::Generic::Dictionary_2<TKey, TValue>* dictionary) {
          static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::KeyCollection::Enumerator::.ctor");
          static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(dictionary)));
          ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, dictionary);
        }
        // public System.Void Dispose()
        // Offset: 0xFFFFFFFF
        // Implemented from: System.IDisposable
        // Base method: System.Void IDisposable::Dispose()
        void Dispose() {
          static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::KeyCollection::Enumerator::Dispose");
          static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "Dispose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
          ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
        }
        // Creating proxy method: System_IDisposable_Dispose
        // Maps to method: Dispose
        void System_IDisposable_Dispose() {
          Dispose();
        }
        // public System.Boolean MoveNext()
        // Offset: 0xFFFFFFFF
        // Implemented from: System.Collections.IEnumerator
        // Base method: System.Boolean IEnumerator::MoveNext()
        bool MoveNext() {
          static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::KeyCollection::Enumerator::MoveNext");
          static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
          return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
        }
        // Creating proxy method: System_Collections_IEnumerator_MoveNext
        // Maps to method: MoveNext
        bool System_Collections_IEnumerator_MoveNext() {
          return MoveNext();
        }
        // public TKey get_Current()
        // Offset: 0xFFFFFFFF
        // Implemented from: System.Collections.Generic.IEnumerator`1
        // Base method: T IEnumerator_1::get_Current()
        TKey get_Current() {
          static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::KeyCollection::Enumerator::get_Current");
          static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
          return ::il2cpp_utils::RunMethodThrow<TKey, false>(*this, ___internal__method);
        }
        // Creating proxy method: System_Collections_Generic_IEnumerator_1_get_Current
        // Maps to method: get_Current
        TKey System_Collections_Generic_IEnumerator_1_get_Current() {
          return get_Current();
        }
        // private System.Object System.Collections.IEnumerator.get_Current()
        // Offset: 0xFFFFFFFF
        // Implemented from: System.Collections.IEnumerator
        // Base method: System.Object IEnumerator::get_Current()
        ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
          static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::KeyCollection::Enumerator::System.Collections.IEnumerator.get_Current");
          static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
          return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(*this, ___internal__method);
        }
        // private System.Void System.Collections.IEnumerator.Reset()
        // Offset: 0xFFFFFFFF
        // Implemented from: System.Collections.IEnumerator
        // Base method: System.Void IEnumerator::Reset()
        void System_Collections_IEnumerator_Reset() {
          static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::KeyCollection::Enumerator::System.Collections.IEnumerator.Reset");
          static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
          ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
        }
      }; // System.Collections.Generic.Dictionary`2/KeyCollection/Enumerator
      // Could not write size check! Type: System.Collections.Generic.Dictionary`2/KeyCollection/Enumerator is generic, or has no fields that are valid for size checks!
      // private System.Collections.Generic.Dictionary`2<TKey,TValue> dictionary
      // Size: 0x8
      // Offset: 0x0
      System::Collections::Generic::Dictionary_2<TKey, TValue>* dictionary;
      // Field size check
      static_assert(sizeof(System::Collections::Generic::Dictionary_2<TKey, TValue>*) == 0x8);
      // Creating value type constructor for type: KeyCollection
      KeyCollection(System::Collections::Generic::Dictionary_2<TKey, TValue>* dictionary_ = {}) noexcept : dictionary{dictionary_} {}
      // Creating interface conversion operator: operator System::Collections::Generic::ICollection_1<TKey>
      operator System::Collections::Generic::ICollection_1<TKey>() noexcept {
        return *reinterpret_cast<System::Collections::Generic::ICollection_1<TKey>*>(this);
      }
      // Creating interface conversion operator: operator System::Collections::ICollection
      operator System::Collections::ICollection() noexcept {
        return *reinterpret_cast<System::Collections::ICollection*>(this);
      }
      // Creating interface conversion operator: operator System::Collections::Generic::IReadOnlyCollection_1<TKey>
      operator System::Collections::Generic::IReadOnlyCollection_1<TKey>() noexcept {
        return *reinterpret_cast<System::Collections::Generic::IReadOnlyCollection_1<TKey>*>(this);
      }
      // Creating conversion operator: operator System::Collections::Generic::Dictionary_2<TKey, TValue>*
      constexpr operator System::Collections::Generic::Dictionary_2<TKey, TValue>*() const noexcept {
        return dictionary;
      }
      // public System.Void .ctor(System.Collections.Generic.Dictionary`2<TKey,TValue> dictionary)
      // Offset: 0xFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename Dictionary_2<TKey, TValue>::KeyCollection* New_ctor(System::Collections::Generic::Dictionary_2<TKey, TValue>* dictionary) {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::KeyCollection::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename Dictionary_2<TKey, TValue>::KeyCollection*, creationType>(dictionary)));
      }
      // public System.Collections.Generic.Dictionary`2/KeyCollection/Enumerator<TKey,TValue> GetEnumerator()
      // Offset: 0xFFFFFFFF
      typename System::Collections::Generic::Dictionary_2<TKey, TValue>::KeyCollection::Enumerator GetEnumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::KeyCollection::GetEnumerator");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetEnumerator", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
        return ::il2cpp_utils::RunMethodThrow<typename System::Collections::Generic::Dictionary_2<TKey, TValue>::KeyCollection::Enumerator, false>(this, ___internal__method);
      }
      // public System.Void CopyTo(TKey[] array, System.Int32 index)
      // Offset: 0xFFFFFFFF
      void CopyTo(::Array<TKey>* array, int index) {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::KeyCollection::CopyTo");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CopyTo", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(array, index)));
        ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, array, index);
      }
      // public System.Int32 get_Count()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.ICollection`1
      // Base method: System.Int32 ICollection_1::get_Count()
      // Base method: System.Int32 ICollection::get_Count()
      // Base method: System.Int32 IReadOnlyCollection_1::get_Count()
      int get_Count() {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::KeyCollection::get_Count");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_Count", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
        return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
      }
      // Creating proxy method: System_Collections_Generic_ICollection_1_get_Count
      // Maps to method: get_Count
      int System_Collections_Generic_ICollection_1_get_Count() {
        return get_Count();
      }
      // Creating proxy method: System_Collections_ICollection_get_Count
      // Maps to method: get_Count
      int System_Collections_ICollection_get_Count() {
        return get_Count();
      }
      // private System.Boolean System.Collections.Generic.ICollection<TKey>.get_IsReadOnly()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.ICollection`1
      // Base method: System.Boolean ICollection_1::get_IsReadOnly()
      bool System_Collections_Generic_ICollection_1_get_IsReadOnly() {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::KeyCollection::System.Collections.Generic.ICollection<TKey>.get_IsReadOnly");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<TKey>.get_IsReadOnly", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
        return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
      }
      // private System.Void System.Collections.Generic.ICollection<TKey>.Add(TKey item)
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.ICollection`1
      // Base method: System.Void ICollection_1::Add(TKey item)
      void System_Collections_Generic_ICollection_1_Add(TKey item) {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::KeyCollection::System.Collections.Generic.ICollection<TKey>.Add");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<TKey>.Add", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(item))));
        ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, item);
      }
      // private System.Void System.Collections.Generic.ICollection<TKey>.Clear()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.ICollection`1
      // Base method: System.Void ICollection_1::Clear()
      void System_Collections_Generic_ICollection_1_Clear() {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::KeyCollection::System.Collections.Generic.ICollection<TKey>.Clear");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<TKey>.Clear", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
        ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
      }
      // private System.Boolean System.Collections.Generic.ICollection<TKey>.Contains(TKey item)
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.ICollection`1
      // Base method: System.Boolean ICollection_1::Contains(TKey item)
      bool System_Collections_Generic_ICollection_1_Contains(TKey item) {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::KeyCollection::System.Collections.Generic.ICollection<TKey>.Contains");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<TKey>.Contains", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(item))));
        return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, item);
      }
      // private System.Boolean System.Collections.Generic.ICollection<TKey>.Remove(TKey item)
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.ICollection`1
      // Base method: System.Boolean ICollection_1::Remove(TKey item)
      bool System_Collections_Generic_ICollection_1_Remove(TKey item) {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::KeyCollection::System.Collections.Generic.ICollection<TKey>.Remove");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<TKey>.Remove", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(item))));
        return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, item);
      }
      // private System.Collections.Generic.IEnumerator`1<TKey> System.Collections.Generic.IEnumerable<TKey>.GetEnumerator()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.IEnumerable`1
      // Base method: System.Collections.Generic.IEnumerator`1<T> IEnumerable_1::GetEnumerator()
      System::Collections::Generic::IEnumerator_1<TKey>* System_Collections_Generic_IEnumerable_1_GetEnumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::KeyCollection::System.Collections.Generic.IEnumerable<TKey>.GetEnumerator");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<TKey>.GetEnumerator", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
        return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<TKey>*, false>(this, ___internal__method);
      }
      // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerable
      // Base method: System.Collections.IEnumerator IEnumerable::GetEnumerator()
      System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::KeyCollection::System.Collections.IEnumerable.GetEnumerator");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
        return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
      }
      // private System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.ICollection
      // Base method: System.Void ICollection::CopyTo(System.Array array, System.Int32 index)
      void System_Collections_ICollection_CopyTo(System::Array* array, int index) {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::KeyCollection::System.Collections.ICollection.CopyTo");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.ICollection.CopyTo", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(array, index)));
        ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, array, index);
      }
    }; // System.Collections.Generic.Dictionary`2/KeyCollection
    // Could not write size check! Type: System.Collections.Generic.Dictionary`2/KeyCollection is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: System.Collections.Generic.Dictionary`2/ValueCollection
    // [] Offset: FFFFFFFF
    // [DebuggerDisplayAttribute] Offset: CADE24
    // [DebuggerTypeProxyAttribute] Offset: CADE24
    class ValueCollection : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject/*, public System::Collections::Generic::ICollection_1<TValue>, public System::Collections::ICollection, public System::Collections::Generic::IReadOnlyCollection_1<TValue>*/ {
      public:
      using declaring_type = Dictionary_2<TKey, TValue>*;
      static constexpr std::string_view NESTED_NAME = "ValueCollection";
      // Nested type: System::Collections::Generic::Dictionary_2::ValueCollection::Enumerator<TKey, TValue>
      struct Enumerator;
      // WARNING Size may be invalid!
      // WARNING Layout: Sequential may not be correctly taken into account!
      // Autogenerated type: System.Collections.Generic.Dictionary`2/ValueCollection/Enumerator
      // [] Offset: FFFFFFFF
      struct Enumerator : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public System::ValueType, public System::Collections::Generic::IEnumerator_1<TValue>*/ {
        public:
        using declaring_type = typename Dictionary_2<TKey, TValue>::ValueCollection*;
        static constexpr std::string_view NESTED_NAME = "Enumerator";
        // private System.Collections.Generic.Dictionary`2<TKey,TValue> dictionary
        // Size: 0x8
        // Offset: 0x0
        System::Collections::Generic::Dictionary_2<TKey, TValue>* dictionary;
        // Field size check
        static_assert(sizeof(System::Collections::Generic::Dictionary_2<TKey, TValue>*) == 0x8);
        // private System.Int32 index
        // Size: 0x4
        // Offset: 0x0
        int index;
        // Field size check
        static_assert(sizeof(int) == 0x4);
        // private System.Int32 version
        // Size: 0x4
        // Offset: 0x0
        int version;
        // Field size check
        static_assert(sizeof(int) == 0x4);
        // private TValue currentValue
        // Size: 0xFFFFFFFF
        // Offset: 0x0
        TValue currentValue;
        // Creating value type constructor for type: Enumerator
        constexpr Enumerator(System::Collections::Generic::Dictionary_2<TKey, TValue>* dictionary_ = {}, int index_ = {}, int version_ = {}, TValue currentValue_ = {}) noexcept : dictionary{dictionary_}, index{index_}, version{version_}, currentValue{currentValue_} {}
        // Creating interface conversion operator: operator System::ValueType
        operator System::ValueType() noexcept {
          return *reinterpret_cast<System::ValueType*>(this);
        }
        // Creating interface conversion operator: operator System::Collections::Generic::IEnumerator_1<TValue>
        operator System::Collections::Generic::IEnumerator_1<TValue>() noexcept {
          return *reinterpret_cast<System::Collections::Generic::IEnumerator_1<TValue>*>(this);
        }
        // System.Void .ctor(System.Collections.Generic.Dictionary`2<TKey,TValue> dictionary)
        // Offset: 0xFFFFFFFF
        template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
        Enumerator(System::Collections::Generic::Dictionary_2<TKey, TValue>* dictionary) {
          static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::ValueCollection::Enumerator::.ctor");
          static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(dictionary)));
          ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, dictionary);
        }
        // public System.Void Dispose()
        // Offset: 0xFFFFFFFF
        // Implemented from: System.IDisposable
        // Base method: System.Void IDisposable::Dispose()
        void Dispose() {
          static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::ValueCollection::Enumerator::Dispose");
          static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "Dispose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
          ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
        }
        // Creating proxy method: System_IDisposable_Dispose
        // Maps to method: Dispose
        void System_IDisposable_Dispose() {
          Dispose();
        }
        // public System.Boolean MoveNext()
        // Offset: 0xFFFFFFFF
        // Implemented from: System.Collections.IEnumerator
        // Base method: System.Boolean IEnumerator::MoveNext()
        bool MoveNext() {
          static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::ValueCollection::Enumerator::MoveNext");
          static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
          return ::il2cpp_utils::RunMethodThrow<bool, false>(*this, ___internal__method);
        }
        // Creating proxy method: System_Collections_IEnumerator_MoveNext
        // Maps to method: MoveNext
        bool System_Collections_IEnumerator_MoveNext() {
          return MoveNext();
        }
        // public TValue get_Current()
        // Offset: 0xFFFFFFFF
        // Implemented from: System.Collections.Generic.IEnumerator`1
        // Base method: T IEnumerator_1::get_Current()
        TValue get_Current() {
          static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::ValueCollection::Enumerator::get_Current");
          static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
          return ::il2cpp_utils::RunMethodThrow<TValue, false>(*this, ___internal__method);
        }
        // Creating proxy method: System_Collections_Generic_IEnumerator_1_get_Current
        // Maps to method: get_Current
        TValue System_Collections_Generic_IEnumerator_1_get_Current() {
          return get_Current();
        }
        // private System.Object System.Collections.IEnumerator.get_Current()
        // Offset: 0xFFFFFFFF
        // Implemented from: System.Collections.IEnumerator
        // Base method: System.Object IEnumerator::get_Current()
        ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
          static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::ValueCollection::Enumerator::System.Collections.IEnumerator.get_Current");
          static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
          return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(*this, ___internal__method);
        }
        // private System.Void System.Collections.IEnumerator.Reset()
        // Offset: 0xFFFFFFFF
        // Implemented from: System.Collections.IEnumerator
        // Base method: System.Void IEnumerator::Reset()
        void System_Collections_IEnumerator_Reset() {
          static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::ValueCollection::Enumerator::System.Collections.IEnumerator.Reset");
          static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
          ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
        }
      }; // System.Collections.Generic.Dictionary`2/ValueCollection/Enumerator
      // Could not write size check! Type: System.Collections.Generic.Dictionary`2/ValueCollection/Enumerator is generic, or has no fields that are valid for size checks!
      // private System.Collections.Generic.Dictionary`2<TKey,TValue> dictionary
      // Size: 0x8
      // Offset: 0x0
      System::Collections::Generic::Dictionary_2<TKey, TValue>* dictionary;
      // Field size check
      static_assert(sizeof(System::Collections::Generic::Dictionary_2<TKey, TValue>*) == 0x8);
      // Creating value type constructor for type: ValueCollection
      ValueCollection(System::Collections::Generic::Dictionary_2<TKey, TValue>* dictionary_ = {}) noexcept : dictionary{dictionary_} {}
      // Creating interface conversion operator: operator System::Collections::Generic::ICollection_1<TValue>
      operator System::Collections::Generic::ICollection_1<TValue>() noexcept {
        return *reinterpret_cast<System::Collections::Generic::ICollection_1<TValue>*>(this);
      }
      // Creating interface conversion operator: operator System::Collections::ICollection
      operator System::Collections::ICollection() noexcept {
        return *reinterpret_cast<System::Collections::ICollection*>(this);
      }
      // Creating interface conversion operator: operator System::Collections::Generic::IReadOnlyCollection_1<TValue>
      operator System::Collections::Generic::IReadOnlyCollection_1<TValue>() noexcept {
        return *reinterpret_cast<System::Collections::Generic::IReadOnlyCollection_1<TValue>*>(this);
      }
      // Creating conversion operator: operator System::Collections::Generic::Dictionary_2<TKey, TValue>*
      constexpr operator System::Collections::Generic::Dictionary_2<TKey, TValue>*() const noexcept {
        return dictionary;
      }
      // public System.Void .ctor(System.Collections.Generic.Dictionary`2<TKey,TValue> dictionary)
      // Offset: 0xFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename Dictionary_2<TKey, TValue>::ValueCollection* New_ctor(System::Collections::Generic::Dictionary_2<TKey, TValue>* dictionary) {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::ValueCollection::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename Dictionary_2<TKey, TValue>::ValueCollection*, creationType>(dictionary)));
      }
      // public System.Collections.Generic.Dictionary`2/ValueCollection/Enumerator<TKey,TValue> GetEnumerator()
      // Offset: 0xFFFFFFFF
      typename System::Collections::Generic::Dictionary_2<TKey, TValue>::ValueCollection::Enumerator GetEnumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::ValueCollection::GetEnumerator");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetEnumerator", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
        return ::il2cpp_utils::RunMethodThrow<typename System::Collections::Generic::Dictionary_2<TKey, TValue>::ValueCollection::Enumerator, false>(this, ___internal__method);
      }
      // public System.Void CopyTo(TValue[] array, System.Int32 index)
      // Offset: 0xFFFFFFFF
      void CopyTo(::Array<TValue>* array, int index) {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::ValueCollection::CopyTo");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CopyTo", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(array, index)));
        ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, array, index);
      }
      // public System.Int32 get_Count()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.ICollection`1
      // Base method: System.Int32 ICollection_1::get_Count()
      // Base method: System.Int32 ICollection::get_Count()
      // Base method: System.Int32 IReadOnlyCollection_1::get_Count()
      int get_Count() {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::ValueCollection::get_Count");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_Count", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
        return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
      }
      // Creating proxy method: System_Collections_Generic_ICollection_1_get_Count
      // Maps to method: get_Count
      int System_Collections_Generic_ICollection_1_get_Count() {
        return get_Count();
      }
      // Creating proxy method: System_Collections_ICollection_get_Count
      // Maps to method: get_Count
      int System_Collections_ICollection_get_Count() {
        return get_Count();
      }
      // private System.Boolean System.Collections.Generic.ICollection<TValue>.get_IsReadOnly()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.ICollection`1
      // Base method: System.Boolean ICollection_1::get_IsReadOnly()
      bool System_Collections_Generic_ICollection_1_get_IsReadOnly() {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::ValueCollection::System.Collections.Generic.ICollection<TValue>.get_IsReadOnly");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<TValue>.get_IsReadOnly", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
        return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
      }
      // private System.Void System.Collections.Generic.ICollection<TValue>.Add(TValue item)
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.ICollection`1
      // Base method: System.Void ICollection_1::Add(TValue item)
      void System_Collections_Generic_ICollection_1_Add(TValue item) {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::ValueCollection::System.Collections.Generic.ICollection<TValue>.Add");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<TValue>.Add", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(item))));
        ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, item);
      }
      // private System.Boolean System.Collections.Generic.ICollection<TValue>.Remove(TValue item)
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.ICollection`1
      // Base method: System.Boolean ICollection_1::Remove(TValue item)
      bool System_Collections_Generic_ICollection_1_Remove(TValue item) {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::ValueCollection::System.Collections.Generic.ICollection<TValue>.Remove");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<TValue>.Remove", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(item))));
        return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, item);
      }
      // private System.Void System.Collections.Generic.ICollection<TValue>.Clear()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.ICollection`1
      // Base method: System.Void ICollection_1::Clear()
      void System_Collections_Generic_ICollection_1_Clear() {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::ValueCollection::System.Collections.Generic.ICollection<TValue>.Clear");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<TValue>.Clear", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
        ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
      }
      // private System.Boolean System.Collections.Generic.ICollection<TValue>.Contains(TValue item)
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.ICollection`1
      // Base method: System.Boolean ICollection_1::Contains(TValue item)
      bool System_Collections_Generic_ICollection_1_Contains(TValue item) {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::ValueCollection::System.Collections.Generic.ICollection<TValue>.Contains");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<TValue>.Contains", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(item))));
        return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, item);
      }
      // private System.Collections.Generic.IEnumerator`1<TValue> System.Collections.Generic.IEnumerable<TValue>.GetEnumerator()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.IEnumerable`1
      // Base method: System.Collections.Generic.IEnumerator`1<T> IEnumerable_1::GetEnumerator()
      System::Collections::Generic::IEnumerator_1<TValue>* System_Collections_Generic_IEnumerable_1_GetEnumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::ValueCollection::System.Collections.Generic.IEnumerable<TValue>.GetEnumerator");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<TValue>.GetEnumerator", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
        return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<TValue>*, false>(this, ___internal__method);
      }
      // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerable
      // Base method: System.Collections.IEnumerator IEnumerable::GetEnumerator()
      System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::ValueCollection::System.Collections.IEnumerable.GetEnumerator");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
        return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
      }
      // private System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.ICollection
      // Base method: System.Void ICollection::CopyTo(System.Array array, System.Int32 index)
      void System_Collections_ICollection_CopyTo(System::Array* array, int index) {
        static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::ValueCollection::System.Collections.ICollection.CopyTo");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.ICollection.CopyTo", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(array, index)));
        ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, array, index);
      }
    }; // System.Collections.Generic.Dictionary`2/ValueCollection
    // Could not write size check! Type: System.Collections.Generic.Dictionary`2/ValueCollection is generic, or has no fields that are valid for size checks!
    // private System.Int32[] buckets
    // Size: 0x8
    // Offset: 0x0
    ::Array<int>* buckets;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2/Entry<TKey,TValue>[] entries
    // Size: 0x8
    // Offset: 0x0
    ::Array<typename System::Collections::Generic::Dictionary_2<TKey, TValue>::Entry>* entries;
    // Field size check
    static_assert(sizeof(::Array<typename System::Collections::Generic::Dictionary_2<TKey, TValue>::Entry>*) == 0x8);
    // private System.Int32 count
    // Size: 0x4
    // Offset: 0x0
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 version
    // Size: 0x4
    // Offset: 0x0
    int version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 freeList
    // Size: 0x4
    // Offset: 0x0
    int freeList;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 freeCount
    // Size: 0x4
    // Offset: 0x0
    int freeCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Collections.Generic.IEqualityComparer`1<TKey> comparer
    // Size: 0x8
    // Offset: 0x0
    System::Collections::Generic::IEqualityComparer_1<TKey>* comparer;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::IEqualityComparer_1<TKey>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2/KeyCollection<TKey,TValue> keys
    // Size: 0x8
    // Offset: 0x0
    typename System::Collections::Generic::Dictionary_2<TKey, TValue>::KeyCollection* keys;
    // Field size check
    static_assert(sizeof(typename System::Collections::Generic::Dictionary_2<TKey, TValue>::KeyCollection*) == 0x8);
    // private System.Collections.Generic.Dictionary`2/ValueCollection<TKey,TValue> values
    // Size: 0x8
    // Offset: 0x0
    typename System::Collections::Generic::Dictionary_2<TKey, TValue>::ValueCollection* values;
    // Field size check
    static_assert(sizeof(typename System::Collections::Generic::Dictionary_2<TKey, TValue>::ValueCollection*) == 0x8);
    // private System.Object _syncRoot
    // Size: 0x8
    // Offset: 0x0
    ::Il2CppObject* syncRoot;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // Creating value type constructor for type: Dictionary_2
    Dictionary_2(::Array<int>* buckets_ = {}, ::Array<typename System::Collections::Generic::Dictionary_2<TKey, TValue>::Entry>* entries_ = {}, int count_ = {}, int version_ = {}, int freeList_ = {}, int freeCount_ = {}, System::Collections::Generic::IEqualityComparer_1<TKey>* comparer_ = {}, typename System::Collections::Generic::Dictionary_2<TKey, TValue>::KeyCollection* keys_ = {}, typename System::Collections::Generic::Dictionary_2<TKey, TValue>::ValueCollection* values_ = {}, ::Il2CppObject* syncRoot_ = {}) noexcept : buckets{buckets_}, entries{entries_}, count{count_}, version{version_}, freeList{freeList_}, freeCount{freeCount_}, comparer{comparer_}, keys{keys_}, values{values_}, syncRoot{syncRoot_} {}
    // Creating interface conversion operator: operator System::Collections::Generic::IDictionary_2<TKey, TValue>
    operator System::Collections::Generic::IDictionary_2<TKey, TValue>() noexcept {
      return *reinterpret_cast<System::Collections::Generic::IDictionary_2<TKey, TValue>*>(this);
    }
    // Creating interface conversion operator: operator System::Collections::IDictionary
    operator System::Collections::IDictionary() noexcept {
      return *reinterpret_cast<System::Collections::IDictionary*>(this);
    }
    // Creating interface conversion operator: operator System::Collections::Generic::IReadOnlyDictionary_2<TKey, TValue>
    operator System::Collections::Generic::IReadOnlyDictionary_2<TKey, TValue>() noexcept {
      return *reinterpret_cast<System::Collections::Generic::IReadOnlyDictionary_2<TKey, TValue>*>(this);
    }
    // Creating interface conversion operator: operator System::Runtime::Serialization::ISerializable
    operator System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating interface conversion operator: operator System::Runtime::Serialization::IDeserializationCallback
    operator System::Runtime::Serialization::IDeserializationCallback() noexcept {
      return *reinterpret_cast<System::Runtime::Serialization::IDeserializationCallback*>(this);
    }
    // Autogenerated static field getter
    // Get static field: static private System.String VersionName
    static ::Il2CppString* _get_VersionName() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::_get_VersionName");
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<::Il2CppString*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Dictionary_2<TKey, TValue>*>::get(), "VersionName")));
    }
    // Autogenerated static field setter
    // Set static field: static private System.String VersionName
    static void _set_VersionName(::Il2CppString* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::_set_VersionName");
      THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Dictionary_2<TKey, TValue>*>::get(), "VersionName", value)));
    }
    // Autogenerated static field getter
    // Get static field: static private System.String HashSizeName
    static ::Il2CppString* _get_HashSizeName() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::_get_HashSizeName");
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<::Il2CppString*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Dictionary_2<TKey, TValue>*>::get(), "HashSizeName")));
    }
    // Autogenerated static field setter
    // Set static field: static private System.String HashSizeName
    static void _set_HashSizeName(::Il2CppString* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::_set_HashSizeName");
      THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Dictionary_2<TKey, TValue>*>::get(), "HashSizeName", value)));
    }
    // Autogenerated static field getter
    // Get static field: static private System.String KeyValuePairsName
    static ::Il2CppString* _get_KeyValuePairsName() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::_get_KeyValuePairsName");
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<::Il2CppString*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Dictionary_2<TKey, TValue>*>::get(), "KeyValuePairsName")));
    }
    // Autogenerated static field setter
    // Set static field: static private System.String KeyValuePairsName
    static void _set_KeyValuePairsName(::Il2CppString* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::_set_KeyValuePairsName");
      THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Dictionary_2<TKey, TValue>*>::get(), "KeyValuePairsName", value)));
    }
    // Autogenerated static field getter
    // Get static field: static private System.String ComparerName
    static ::Il2CppString* _get_ComparerName() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::_get_ComparerName");
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<::Il2CppString*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Dictionary_2<TKey, TValue>*>::get(), "ComparerName")));
    }
    // Autogenerated static field setter
    // Set static field: static private System.String ComparerName
    static void _set_ComparerName(::Il2CppString* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::_set_ComparerName");
      THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Dictionary_2<TKey, TValue>*>::get(), "ComparerName", value)));
    }
    // public System.Void .ctor(System.Int32 capacity)
    // Offset: 0xFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Dictionary_2<TKey, TValue>* New_ctor(int capacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Dictionary_2<TKey, TValue>*, creationType>(capacity)));
    }
    // public System.Void .ctor(System.Collections.Generic.IEqualityComparer`1<TKey> comparer)
    // Offset: 0xFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Dictionary_2<TKey, TValue>* New_ctor(System::Collections::Generic::IEqualityComparer_1<TKey>* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Dictionary_2<TKey, TValue>*, creationType>(comparer)));
    }
    // public System.Void .ctor(System.Int32 capacity, System.Collections.Generic.IEqualityComparer`1<TKey> comparer)
    // Offset: 0xFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Dictionary_2<TKey, TValue>* New_ctor(int capacity, System::Collections::Generic::IEqualityComparer_1<TKey>* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Dictionary_2<TKey, TValue>*, creationType>(capacity, comparer)));
    }
    // public System.Void .ctor(System.Collections.Generic.IDictionary`2<TKey,TValue> dictionary)
    // Offset: 0xFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Dictionary_2<TKey, TValue>* New_ctor(System::Collections::Generic::IDictionary_2<TKey, TValue>* dictionary) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Dictionary_2<TKey, TValue>*, creationType>(dictionary)));
    }
    // public System.Void .ctor(System.Collections.Generic.IDictionary`2<TKey,TValue> dictionary, System.Collections.Generic.IEqualityComparer`1<TKey> comparer)
    // Offset: 0xFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Dictionary_2<TKey, TValue>* New_ctor(System::Collections::Generic::IDictionary_2<TKey, TValue>* dictionary, System::Collections::Generic::IEqualityComparer_1<TKey>* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Dictionary_2<TKey, TValue>*, creationType>(dictionary, comparer)));
    }
    // protected System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0xFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Dictionary_2<TKey, TValue>* New_ctor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Dictionary_2<TKey, TValue>*, creationType>(info, context)));
    }
    // public System.Collections.Generic.Dictionary`2/KeyCollection<TKey,TValue> get_Keys()
    // Offset: 0xFFFFFFFF
    typename System::Collections::Generic::Dictionary_2<TKey, TValue>::KeyCollection* get_Keys() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::get_Keys");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_Keys", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<typename System::Collections::Generic::Dictionary_2<TKey, TValue>::KeyCollection*, false>(this, ___internal__method);
    }
    // public System.Collections.Generic.Dictionary`2/ValueCollection<TKey,TValue> get_Values()
    // Offset: 0xFFFFFFFF
    typename System::Collections::Generic::Dictionary_2<TKey, TValue>::ValueCollection* get_Values() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::get_Values");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_Values", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<typename System::Collections::Generic::Dictionary_2<TKey, TValue>::ValueCollection*, false>(this, ___internal__method);
    }
    // public System.Boolean ContainsValue(TValue value)
    // Offset: 0xFFFFFFFF
    bool ContainsValue(TValue value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::ContainsValue");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ContainsValue", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, value);
    }
    // private System.Void CopyTo(System.Collections.Generic.KeyValuePair`2<TKey,TValue>[] array, System.Int32 index)
    // Offset: 0xFFFFFFFF
    void CopyTo(::Array<System::Collections::Generic::KeyValuePair_2<TKey, TValue>>* array, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::CopyTo");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CopyTo", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(array, index)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, array, index);
    }
    // public System.Collections.Generic.Dictionary`2/Enumerator<TKey,TValue> GetEnumerator()
    // Offset: 0xFFFFFFFF
    typename System::Collections::Generic::Dictionary_2<TKey, TValue>::Enumerator GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::GetEnumerator");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetEnumerator", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<typename System::Collections::Generic::Dictionary_2<TKey, TValue>::Enumerator, false>(this, ___internal__method);
    }
    // private System.Int32 FindEntry(TKey key)
    // Offset: 0xFFFFFFFF
    int FindEntry(TKey key) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::FindEntry");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FindEntry", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(key)));
      return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, key);
    }
    // private System.Void Initialize(System.Int32 capacity)
    // Offset: 0xFFFFFFFF
    void Initialize(int capacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::Initialize");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Initialize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(capacity)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, capacity);
    }
    // private System.Boolean TryInsert(TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)
    // Offset: 0xFFFFFFFF
    bool TryInsert(TKey key, TValue value, System::Collections::Generic::InsertionBehavior behavior) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::TryInsert");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "TryInsert", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(key, value, behavior)));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, key, value, behavior);
    }
    // private System.Void Resize()
    // Offset: 0xFFFFFFFF
    void Resize() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::Resize");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Resize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
    }
    // private System.Void Resize(System.Int32 newSize, System.Boolean forceNewHashCodes)
    // Offset: 0xFFFFFFFF
    void Resize(int newSize, bool forceNewHashCodes) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::Resize");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Resize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(newSize, forceNewHashCodes)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, newSize, forceNewHashCodes);
    }
    // static private System.Boolean IsCompatibleKey(System.Object key)
    // Offset: 0xFFFFFFFF
    static bool IsCompatibleKey(::Il2CppObject* key) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::IsCompatibleKey");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Dictionary_2<TKey, TValue>*>::get(), "IsCompatibleKey", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(key))));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, key);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Dictionary_2<TKey, TValue>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Dictionary_2<TKey, TValue>*, creationType>()));
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Int32 ICollection_1::get_Count()
    // Base method: System.Int32 ICollection::get_Count()
    // Base method: System.Int32 IReadOnlyCollection_1::get_Count()
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::get_Count");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_Count", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
    }
    // Creating proxy method: System_Collections_Generic_ICollection_1_get_Count
    // Maps to method: get_Count
    int System_Collections_Generic_ICollection_1_get_Count() {
      return get_Count();
    }
    // Creating proxy method: System_Collections_ICollection_get_Count
    // Maps to method: get_Count
    int System_Collections_ICollection_get_Count() {
      return get_Count();
    }
    // public TValue get_Item(TKey key)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.IDictionary`2
    // Base method: TValue IDictionary_2::get_Item(TKey key)
    TValue get_Item(TKey key) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::get_Item");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_Item", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(key)));
      return ::il2cpp_utils::RunMethodThrow<TValue, false>(this, ___internal__method, key);
    }
    // public System.Void set_Item(TKey key, TValue value)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.IDictionary`2
    // Base method: System.Void IDictionary_2::set_Item(TKey key, TValue value)
    void set_Item(TKey key, TValue value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::set_Item");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_Item", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(key, value)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, key, value);
    }
    // public System.Void Add(TKey key, TValue value)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.IDictionary`2
    // Base method: System.Void IDictionary_2::Add(TKey key, TValue value)
    void Add(TKey key, TValue value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::Add");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Add", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(key, value)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, key, value);
    }
    // Creating proxy method: System_Collections_Generic_IDictionary_2_Add
    // Maps to method: Add
    void System_Collections_Generic_IDictionary_2_Add(TKey key, TValue value) {
      Add(key, value);
    }
    // private System.Void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair`2<TKey,TValue> keyValuePair)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Void ICollection_1::Add(System.Collections.Generic.KeyValuePair`2<TKey,TValue> keyValuePair)
    void System_Collections_Generic_ICollection_1_Add(System::Collections::Generic::KeyValuePair_2<TKey, TValue> keyValuePair) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(keyValuePair))));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, keyValuePair);
    }
    // private System.Boolean System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair`2<TKey,TValue> keyValuePair)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Boolean ICollection_1::Contains(System.Collections.Generic.KeyValuePair`2<TKey,TValue> keyValuePair)
    bool System_Collections_Generic_ICollection_1_Contains(System::Collections::Generic::KeyValuePair_2<TKey, TValue> keyValuePair) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(keyValuePair))));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, keyValuePair);
    }
    // private System.Boolean System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair`2<TKey,TValue> keyValuePair)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Boolean ICollection_1::Remove(System.Collections.Generic.KeyValuePair`2<TKey,TValue> keyValuePair)
    bool System_Collections_Generic_ICollection_1_Remove(System::Collections::Generic::KeyValuePair_2<TKey, TValue> keyValuePair) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(keyValuePair))));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, keyValuePair);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Void ICollection_1::Clear()
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::Clear");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
    }
    // Creating proxy method: System_Collections_Generic_ICollection_1_Clear
    // Maps to method: Clear
    void System_Collections_Generic_ICollection_1_Clear() {
      Clear();
    }
    // public System.Boolean ContainsKey(TKey key)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.IDictionary`2
    // Base method: System.Boolean IDictionary_2::ContainsKey(TKey key)
    bool ContainsKey(TKey key) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::ContainsKey");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ContainsKey", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(key)));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, key);
    }
    // private System.Collections.Generic.IEnumerator`1<System.Collections.Generic.KeyValuePair`2<TKey,TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.IEnumerable`1
    // Base method: System.Collections.Generic.IEnumerator`1<T> IEnumerable_1::GetEnumerator()
    System::Collections::Generic::IEnumerator_1<System::Collections::Generic::KeyValuePair_2<TKey, TValue>>* System_Collections_Generic_IEnumerable_1_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
      return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<System::Collections::Generic::KeyValuePair_2<TKey, TValue>>*, false>(this, ___internal__method);
    }
    // public System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Runtime.Serialization.ISerializable
    // Base method: System.Void ISerializable::GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::GetObjectData");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetObjectData", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(info, context)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, info, context);
    }
    // Creating proxy method: System_Runtime_Serialization_ISerializable_GetObjectData
    // Maps to method: GetObjectData
    void System_Runtime_Serialization_ISerializable_GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
      GetObjectData(info, context);
    }
    // public System.Void OnDeserialization(System.Object sender)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Runtime.Serialization.IDeserializationCallback
    // Base method: System.Void IDeserializationCallback::OnDeserialization(System.Object sender)
    void OnDeserialization(::Il2CppObject* sender) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::OnDeserialization");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnDeserialization", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(sender)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, sender);
    }
    // Creating proxy method: System_Runtime_Serialization_IDeserializationCallback_OnDeserialization
    // Maps to method: OnDeserialization
    void System_Runtime_Serialization_IDeserializationCallback_OnDeserialization(::Il2CppObject* sender) {
      OnDeserialization(sender);
    }
    // public System.Boolean Remove(TKey key)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.IDictionary`2
    // Base method: System.Boolean IDictionary_2::Remove(TKey key)
    bool Remove(TKey key) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::Remove");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(key)));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, key);
    }
    // Creating proxy method: System_Collections_Generic_IDictionary_2_Remove
    // Maps to method: Remove
    bool System_Collections_Generic_IDictionary_2_Remove(TKey key) {
      return Remove(key);
    }
    // public System.Boolean TryGetValue(TKey key, out TValue value)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.IDictionary`2
    // Base method: System.Boolean IDictionary_2::TryGetValue(TKey key, out TValue value)
    // Base method: System.Boolean IReadOnlyDictionary_2::TryGetValue(TKey key, out TValue value)
    bool TryGetValue(TKey key, TValue& value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::TryGetValue");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "TryGetValue", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(key, value)));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, key, value);
    }
    // private System.Boolean System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Boolean ICollection_1::get_IsReadOnly()
    bool System_Collections_Generic_ICollection_1_get_IsReadOnly() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
    }
    // private System.Void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair`2<TKey,TValue>[] array, System.Int32 index)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Void ICollection_1::CopyTo(System.Collections.Generic.KeyValuePair`2<TKey,TValue>[] array, System.Int32 index)
    void System_Collections_Generic_ICollection_1_CopyTo(::Array<System::Collections::Generic::KeyValuePair_2<TKey, TValue>>* array, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(array, index))));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, array, index);
    }
    // private System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.ICollection
    // Base method: System.Void ICollection::CopyTo(System.Array array, System.Int32 index)
    void System_Collections_ICollection_CopyTo(System::Array* array, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::System.Collections.ICollection.CopyTo");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.ICollection.CopyTo", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(array, index)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, array, index);
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.IEnumerable
    // Base method: System.Collections.IEnumerator IEnumerable::GetEnumerator()
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::System.Collections.IEnumerable.GetEnumerator");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
    // private System.Collections.ICollection System.Collections.IDictionary.get_Keys()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.IDictionary
    // Base method: System.Collections.ICollection IDictionary::get_Keys()
    System::Collections::ICollection* System_Collections_IDictionary_get_Keys() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::System.Collections.IDictionary.get_Keys");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IDictionary.get_Keys", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<System::Collections::ICollection*, false>(this, ___internal__method);
    }
    // private System.Object System.Collections.IDictionary.get_Item(System.Object key)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.IDictionary
    // Base method: System.Object IDictionary::get_Item(System.Object key)
    ::Il2CppObject* System_Collections_IDictionary_get_Item(::Il2CppObject* key) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::System.Collections.IDictionary.get_Item");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IDictionary.get_Item", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(key)));
      return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method, key);
    }
    // private System.Void System.Collections.IDictionary.set_Item(System.Object key, System.Object value)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.IDictionary
    // Base method: System.Void IDictionary::set_Item(System.Object key, System.Object value)
    void System_Collections_IDictionary_set_Item(::Il2CppObject* key, ::Il2CppObject* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::System.Collections.IDictionary.set_Item");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IDictionary.set_Item", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(key, value)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, key, value);
    }
    // private System.Void System.Collections.IDictionary.Add(System.Object key, System.Object value)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.IDictionary
    // Base method: System.Void IDictionary::Add(System.Object key, System.Object value)
    void System_Collections_IDictionary_Add(::Il2CppObject* key, ::Il2CppObject* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::System.Collections.IDictionary.Add");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IDictionary.Add", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(key, value)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, key, value);
    }
    // private System.Boolean System.Collections.IDictionary.Contains(System.Object key)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.IDictionary
    // Base method: System.Boolean IDictionary::Contains(System.Object key)
    bool System_Collections_IDictionary_Contains(::Il2CppObject* key) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::System.Collections.IDictionary.Contains");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IDictionary.Contains", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(key)));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, key);
    }
    // private System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.IDictionary
    // Base method: System.Collections.IDictionaryEnumerator IDictionary::GetEnumerator()
    System::Collections::IDictionaryEnumerator* System_Collections_IDictionary_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Generic::Dictionary_2::System.Collections.IDictionary.GetEnumerator");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IDictionary.GetEnumerator", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<System::Collections::IDictionaryEnumerator*, false>(this, ___internal__method);
    }
  }; // System.Collections.Generic.Dictionary`2
  // Could not write size check! Type: System.Collections.Generic.Dictionary`2 is generic, or has no fields that are valid for size checks!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(System::Collections::Generic::Dictionary_2, "System.Collections.Generic", "Dictionary`2");
