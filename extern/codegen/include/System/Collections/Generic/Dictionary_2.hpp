// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Collections.Generic.IDictionary`2
#include "System/Collections/Generic/IDictionary_2.hpp"
// Including type: System.Collections.IDictionary
#include "System/Collections/IDictionary.hpp"
// Including type: System.Collections.Generic.IReadOnlyDictionary`2
#include "System/Collections/Generic/IReadOnlyDictionary_2.hpp"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.Runtime.Serialization.IDeserializationCallback
#include "System/Runtime/Serialization/IDeserializationCallback.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
// Including type: System.Collections.Generic.InsertionBehavior
#include "System/Collections/Generic/InsertionBehavior.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
// Including type: System.Collections.IDictionaryEnumerator
#include "System/Collections/IDictionaryEnumerator.hpp"
// Including type: System.Collections.DictionaryEntry
#include "System/Collections/DictionaryEntry.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: Entry because it is already included!
  // Skipping declaration: Enumerator because it is already included!
  // Skipping declaration: KeyCollection because it is already included!
  // Skipping declaration: ValueCollection because it is already included!
  // Forward declaring type: IEqualityComparer`1<T>
  template<typename T>
  class IEqualityComparer_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: Array
  class Array;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
// Type namespace: System.Collections.Generic
namespace System::Collections::Generic {
  // Autogenerated type: System.Collections.Generic.Dictionary`2
  template<typename TKey, typename TValue>
  class Dictionary_2 : public ::Il2CppObject, public System::Collections::Generic::IDictionary_2<TKey, TValue>, public System::Collections::IDictionary, public System::Collections::Generic::IReadOnlyDictionary_2<TKey, TValue>, public System::Runtime::Serialization::ISerializable, public System::Runtime::Serialization::IDeserializationCallback {
    public:
    // Nested type: System::Collections::Generic::Dictionary_2::Entry<TKey, TValue>
    struct Entry;
    // Nested type: System::Collections::Generic::Dictionary_2::Enumerator<TKey, TValue>
    struct Enumerator;
    // Nested type: System::Collections::Generic::Dictionary_2::KeyCollection<TKey, TValue>
    class KeyCollection;
    // Nested type: System::Collections::Generic::Dictionary_2::ValueCollection<TValue, TKey>
    class ValueCollection;
    // Autogenerated type: System.Collections.Generic.Dictionary`2/Entry
    struct Entry : public System::ValueType, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = Dictionary_2<TKey, TValue>*;
      static constexpr std::string_view NESTED_NAME = "Entry";
      // public System.Int32 hashCode
      // Offset: 0x0
      int hashCode;
      // public System.Int32 next
      // Offset: 0x0
      int next;
      // public TKey key
      // Offset: 0x0
      TKey key;
      // public TValue value
      // Offset: 0x0
      TValue value;
      // Creating value type constructor for type: Entry
      constexpr Entry(int hashCode_ = {}, int next_ = {}, TKey key_ = {}, TValue value_ = {}) noexcept : hashCode{hashCode_}, next{next_}, key{key_}, value{value_} {}
    }; // System.Collections.Generic.Dictionary`2/Entry
    // Autogenerated type: System.Collections.Generic.Dictionary`2/Enumerator
    struct Enumerator : public System::ValueType, public System::Collections::Generic::IEnumerator_1<System::Collections::Generic::KeyValuePair_2<TKey, TValue>>, public System::Collections::IDictionaryEnumerator, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = Dictionary_2<TKey, TValue>*;
      static constexpr std::string_view NESTED_NAME = "Enumerator";
      // private System.Collections.Generic.Dictionary`2<TKey,TValue> dictionary
      // Offset: 0x0
      System::Collections::Generic::Dictionary_2<TKey, TValue>* dictionary;
      // private System.Int32 version
      // Offset: 0x0
      int version;
      // private System.Int32 index
      // Offset: 0x0
      int index;
      // private System.Collections.Generic.KeyValuePair`2<TKey,TValue> current
      // Offset: 0x0
      System::Collections::Generic::KeyValuePair_2<TKey, TValue> current;
      // private System.Int32 getEnumeratorRetType
      // Offset: 0x0
      int getEnumeratorRetType;
      // Creating value type constructor for type: Enumerator
      constexpr Enumerator(System::Collections::Generic::Dictionary_2<TKey, TValue>* dictionary_ = {}, int version_ = {}, int index_ = {}, System::Collections::Generic::KeyValuePair_2<TKey, TValue> current_ = {}, int getEnumeratorRetType_ = {}) noexcept : dictionary{dictionary_}, version{version_}, index{index_}, current{current_}, getEnumeratorRetType{getEnumeratorRetType_} {}
      // System.Void .ctor(System.Collections.Generic.Dictionary`2<TKey,TValue> dictionary, System.Int32 getEnumeratorRetType)
      // Offset: 0xFFFFFFFF
      Enumerator(System::Collections::Generic::Dictionary_2<TKey, TValue>* dictionary, int getEnumeratorRetType) {
        THROW_UNLESS(il2cpp_utils::RunMethod(*this, ".ctor", dictionary, getEnumeratorRetType));
      }
      // public System.Boolean MoveNext()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Boolean IEnumerator::MoveNext()
      bool MoveNext() {
        return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "MoveNext"));
      }
      // public System.Collections.Generic.KeyValuePair`2<TKey,TValue> get_Current()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.IEnumerator`1
      // Base method: T IEnumerator`1::get_Current()
      System::Collections::Generic::KeyValuePair_2<TKey, TValue> get_Current() {
        return THROW_UNLESS((il2cpp_utils::RunMethod<System::Collections::Generic::KeyValuePair_2<TKey, TValue>>(*this, "get_Current")));
      }
      // Creating proxy method: System_Collections_Generic_IEnumerator_1_get_Current
      // Maps to method: get_Current
      System::Collections::Generic::KeyValuePair_2<TKey, TValue> System_Collections_Generic_IEnumerator_1_get_Current() {
        return get_Current();
      }
      // public System.Void Dispose()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.IDisposable
      // Base method: System.Void IDisposable::Dispose()
      void Dispose() {
        THROW_UNLESS(il2cpp_utils::RunMethod(*this, "Dispose"));
      }
      // Creating proxy method: System_IDisposable_Dispose
      // Maps to method: Dispose
      void System_IDisposable_Dispose() {
        Dispose();
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Object IEnumerator::get_Current()
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppObject*>(*this, "System.Collections.IEnumerator.get_Current"));
      }
      // private System.Void System.Collections.IEnumerator.Reset()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Void IEnumerator::Reset()
      void System_Collections_IEnumerator_Reset() {
        THROW_UNLESS(il2cpp_utils::RunMethod(*this, "System.Collections.IEnumerator.Reset"));
      }
      // private System.Collections.DictionaryEntry System.Collections.IDictionaryEnumerator.get_Entry()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IDictionaryEnumerator
      // Base method: System.Collections.DictionaryEntry IDictionaryEnumerator::get_Entry()
      System::Collections::DictionaryEntry System_Collections_IDictionaryEnumerator_get_Entry() {
        return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::DictionaryEntry>(*this, "System.Collections.IDictionaryEnumerator.get_Entry"));
      }
      // private System.Object System.Collections.IDictionaryEnumerator.get_Key()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IDictionaryEnumerator
      // Base method: System.Object IDictionaryEnumerator::get_Key()
      ::Il2CppObject* System_Collections_IDictionaryEnumerator_get_Key() {
        return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppObject*>(*this, "System.Collections.IDictionaryEnumerator.get_Key"));
      }
      // private System.Object System.Collections.IDictionaryEnumerator.get_Value()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IDictionaryEnumerator
      // Base method: System.Object IDictionaryEnumerator::get_Value()
      ::Il2CppObject* System_Collections_IDictionaryEnumerator_get_Value() {
        return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppObject*>(*this, "System.Collections.IDictionaryEnumerator.get_Value"));
      }
    }; // System.Collections.Generic.Dictionary`2/Enumerator
    // Autogenerated type: System.Collections.Generic.Dictionary`2/KeyCollection
    class KeyCollection : public ::Il2CppObject, public System::Collections::Generic::ICollection_1<TKey>, public System::Collections::ICollection, public System::Collections::Generic::IReadOnlyCollection_1<TKey>, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = Dictionary_2<TKey, TValue>*;
      static constexpr std::string_view NESTED_NAME = "KeyCollection";
      // Nested type: System::Collections::Generic::Dictionary_2::KeyCollection::Enumerator<TKey, TValue>
      struct Enumerator;
      // Autogenerated type: System.Collections.Generic.Dictionary`2/KeyCollection/Enumerator
      struct Enumerator : public System::ValueType, public System::Collections::Generic::IEnumerator_1<TKey>, public ::il2cpp_utils::il2cpp_type_check::NestedType {
        public:
        using declaring_type = typename Dictionary_2<TKey, TValue>::KeyCollection*;
        static constexpr std::string_view NESTED_NAME = "Enumerator";
        // private System.Collections.Generic.Dictionary`2<TKey,TValue> dictionary
        // Offset: 0x0
        System::Collections::Generic::Dictionary_2<TKey, TValue>* dictionary;
        // private System.Int32 index
        // Offset: 0x0
        int index;
        // private System.Int32 version
        // Offset: 0x0
        int version;
        // private TKey currentKey
        // Offset: 0x0
        TKey currentKey;
        // Creating value type constructor for type: Enumerator
        constexpr Enumerator(System::Collections::Generic::Dictionary_2<TKey, TValue>* dictionary_ = {}, int index_ = {}, int version_ = {}, TKey currentKey_ = {}) noexcept : dictionary{dictionary_}, index{index_}, version{version_}, currentKey{currentKey_} {}
        // System.Void .ctor(System.Collections.Generic.Dictionary`2<TKey,TValue> dictionary)
        // Offset: 0xFFFFFFFF
        Enumerator(System::Collections::Generic::Dictionary_2<TKey, TValue>* dictionary) {
          THROW_UNLESS(il2cpp_utils::RunMethod(*this, ".ctor", dictionary));
        }
        // public System.Void Dispose()
        // Offset: 0xFFFFFFFF
        // Implemented from: System.IDisposable
        // Base method: System.Void IDisposable::Dispose()
        void Dispose() {
          THROW_UNLESS(il2cpp_utils::RunMethod(*this, "Dispose"));
        }
        // Creating proxy method: System_IDisposable_Dispose
        // Maps to method: Dispose
        void System_IDisposable_Dispose() {
          Dispose();
        }
        // public System.Boolean MoveNext()
        // Offset: 0xFFFFFFFF
        // Implemented from: System.Collections.IEnumerator
        // Base method: System.Boolean IEnumerator::MoveNext()
        bool MoveNext() {
          return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "MoveNext"));
        }
        // public TKey get_Current()
        // Offset: 0xFFFFFFFF
        // Implemented from: System.Collections.Generic.IEnumerator`1
        // Base method: T IEnumerator`1::get_Current()
        TKey get_Current() {
          return THROW_UNLESS(il2cpp_utils::RunMethod<TKey>(*this, "get_Current"));
        }
        // Creating proxy method: System_Collections_Generic_IEnumerator_1_get_Current
        // Maps to method: get_Current
        TKey System_Collections_Generic_IEnumerator_1_get_Current() {
          return get_Current();
        }
        // private System.Object System.Collections.IEnumerator.get_Current()
        // Offset: 0xFFFFFFFF
        // Implemented from: System.Collections.IEnumerator
        // Base method: System.Object IEnumerator::get_Current()
        ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
          return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppObject*>(*this, "System.Collections.IEnumerator.get_Current"));
        }
        // private System.Void System.Collections.IEnumerator.Reset()
        // Offset: 0xFFFFFFFF
        // Implemented from: System.Collections.IEnumerator
        // Base method: System.Void IEnumerator::Reset()
        void System_Collections_IEnumerator_Reset() {
          THROW_UNLESS(il2cpp_utils::RunMethod(*this, "System.Collections.IEnumerator.Reset"));
        }
      }; // System.Collections.Generic.Dictionary`2/KeyCollection/Enumerator
      // private System.Collections.Generic.Dictionary`2<TKey,TValue> dictionary
      // Offset: 0x0
      System::Collections::Generic::Dictionary_2<TKey, TValue>* dictionary;
      // Creating conversion operator: operator System::Collections::Generic::Dictionary_2<TKey, TValue>*
      constexpr operator System::Collections::Generic::Dictionary_2<TKey, TValue>*() const noexcept {
        return dictionary;
      }
      // public System.Void .ctor(System.Collections.Generic.Dictionary`2<TKey,TValue> dictionary)
      // Offset: 0xFFFFFFFF
      static typename Dictionary_2<TKey, TValue>::KeyCollection* New_ctor(System::Collections::Generic::Dictionary_2<TKey, TValue>* dictionary) {
        return THROW_UNLESS((il2cpp_utils::New<typename Dictionary_2<TKey, TValue>::KeyCollection*>(dictionary)));
      }
      // public System.Collections.Generic.Dictionary`2/KeyCollection/Enumerator<TKey,TValue> GetEnumerator()
      // Offset: 0xFFFFFFFF
      typename System::Collections::Generic::Dictionary_2<TKey, TValue>::KeyCollection::Enumerator GetEnumerator() {
        return THROW_UNLESS((il2cpp_utils::RunMethod<typename System::Collections::Generic::Dictionary_2<TKey, TValue>::KeyCollection::Enumerator>(this, "GetEnumerator")));
      }
      // public System.Void CopyTo(TKey[] array, System.Int32 index)
      // Offset: 0xFFFFFFFF
      void CopyTo(::Array<TKey>* array, int index) {
        THROW_UNLESS(il2cpp_utils::RunMethod(this, "CopyTo", array, index));
      }
      // public System.Int32 get_Count()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.ICollection`1
      // Base method: System.Int32 ICollection`1::get_Count()
      // Base method: System.Int32 ICollection::get_Count()
      // Base method: System.Int32 IReadOnlyCollection`1::get_Count()
      int get_Count() {
        return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_Count"));
      }
      // Creating proxy method: System_Collections_Generic_ICollection_1_get_Count
      // Maps to method: get_Count
      int System_Collections_Generic_ICollection_1_get_Count() {
        return get_Count();
      }
      // Creating proxy method: System_Collections_ICollection_get_Count
      // Maps to method: get_Count
      int System_Collections_ICollection_get_Count() {
        return get_Count();
      }
      // private System.Boolean System.Collections.Generic.ICollection<TKey>.get_IsReadOnly()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.ICollection`1
      // Base method: System.Boolean ICollection`1::get_IsReadOnly()
      bool System_Collections_Generic_ICollection_1_get_IsReadOnly() {
        return THROW_UNLESS((il2cpp_utils::RunMethod<bool>(this, "System.Collections.Generic.ICollection<TKey>.get_IsReadOnly")));
      }
      // private System.Void System.Collections.Generic.ICollection<TKey>.Add(TKey item)
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.ICollection`1
      // Base method: System.Void ICollection`1::Add(TKey item)
      void System_Collections_Generic_ICollection_1_Add(TKey item) {
        THROW_UNLESS(il2cpp_utils::RunMethod(this, "System.Collections.Generic.ICollection<TKey>.Add", item));
      }
      // private System.Void System.Collections.Generic.ICollection<TKey>.Clear()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.ICollection`1
      // Base method: System.Void ICollection`1::Clear()
      void System_Collections_Generic_ICollection_1_Clear() {
        THROW_UNLESS(il2cpp_utils::RunMethod(this, "System.Collections.Generic.ICollection<TKey>.Clear"));
      }
      // private System.Boolean System.Collections.Generic.ICollection<TKey>.Contains(TKey item)
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.ICollection`1
      // Base method: System.Boolean ICollection`1::Contains(TKey item)
      bool System_Collections_Generic_ICollection_1_Contains(TKey item) {
        return THROW_UNLESS((il2cpp_utils::RunMethod<bool>(this, "System.Collections.Generic.ICollection<TKey>.Contains", item)));
      }
      // private System.Boolean System.Collections.Generic.ICollection<TKey>.Remove(TKey item)
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.ICollection`1
      // Base method: System.Boolean ICollection`1::Remove(TKey item)
      bool System_Collections_Generic_ICollection_1_Remove(TKey item) {
        return THROW_UNLESS((il2cpp_utils::RunMethod<bool>(this, "System.Collections.Generic.ICollection<TKey>.Remove", item)));
      }
      // private System.Collections.Generic.IEnumerator`1<TKey> System.Collections.Generic.IEnumerable<TKey>.GetEnumerator()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.IEnumerable`1
      // Base method: System.Collections.Generic.IEnumerator`1<T> IEnumerable`1::GetEnumerator()
      System::Collections::Generic::IEnumerator_1<TKey>* System_Collections_Generic_IEnumerable_1_GetEnumerator() {
        return THROW_UNLESS((il2cpp_utils::RunMethod<System::Collections::Generic::IEnumerator_1<TKey>*>(this, "System.Collections.Generic.IEnumerable<TKey>.GetEnumerator")));
      }
      // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerable
      // Base method: System.Collections.IEnumerator IEnumerable::GetEnumerator()
      System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
        return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::IEnumerator*>(this, "System.Collections.IEnumerable.GetEnumerator"));
      }
      // private System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.ICollection
      // Base method: System.Void ICollection::CopyTo(System.Array array, System.Int32 index)
      void System_Collections_ICollection_CopyTo(System::Array* array, int index) {
        THROW_UNLESS(il2cpp_utils::RunMethod(this, "System.Collections.ICollection.CopyTo", array, index));
      }
    }; // System.Collections.Generic.Dictionary`2/KeyCollection
    // Autogenerated type: System.Collections.Generic.Dictionary`2/ValueCollection
    class ValueCollection : public ::Il2CppObject, public System::Collections::Generic::ICollection_1<TValue>, public System::Collections::ICollection, public System::Collections::Generic::IReadOnlyCollection_1<TValue>, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = Dictionary_2<TKey, TValue>*;
      static constexpr std::string_view NESTED_NAME = "ValueCollection";
      // Nested type: System::Collections::Generic::Dictionary_2::ValueCollection::Enumerator<TValue, TKey>
      struct Enumerator;
      // Autogenerated type: System.Collections.Generic.Dictionary`2/ValueCollection/Enumerator
      struct Enumerator : public System::ValueType, public System::Collections::Generic::IEnumerator_1<TValue>, public ::il2cpp_utils::il2cpp_type_check::NestedType {
        public:
        using declaring_type = typename Dictionary_2<TValue, TKey>::ValueCollection*;
        static constexpr std::string_view NESTED_NAME = "Enumerator";
        // private System.Collections.Generic.Dictionary`2<TKey,TValue> dictionary
        // Offset: 0x0
        System::Collections::Generic::Dictionary_2<TKey, TValue>* dictionary;
        // private System.Int32 index
        // Offset: 0x0
        int index;
        // private System.Int32 version
        // Offset: 0x0
        int version;
        // private TValue currentValue
        // Offset: 0x0
        TValue currentValue;
        // Creating value type constructor for type: Enumerator
        constexpr Enumerator(System::Collections::Generic::Dictionary_2<TKey, TValue>* dictionary_ = {}, int index_ = {}, int version_ = {}, TValue currentValue_ = {}) noexcept : dictionary{dictionary_}, index{index_}, version{version_}, currentValue{currentValue_} {}
        // System.Void .ctor(System.Collections.Generic.Dictionary`2<TKey,TValue> dictionary)
        // Offset: 0xFFFFFFFF
        Enumerator(System::Collections::Generic::Dictionary_2<TKey, TValue>* dictionary) {
          THROW_UNLESS(il2cpp_utils::RunMethod(*this, ".ctor", dictionary));
        }
        // public System.Void Dispose()
        // Offset: 0xFFFFFFFF
        // Implemented from: System.IDisposable
        // Base method: System.Void IDisposable::Dispose()
        void Dispose() {
          THROW_UNLESS(il2cpp_utils::RunMethod(*this, "Dispose"));
        }
        // Creating proxy method: System_IDisposable_Dispose
        // Maps to method: Dispose
        void System_IDisposable_Dispose() {
          Dispose();
        }
        // public System.Boolean MoveNext()
        // Offset: 0xFFFFFFFF
        // Implemented from: System.Collections.IEnumerator
        // Base method: System.Boolean IEnumerator::MoveNext()
        bool MoveNext() {
          return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "MoveNext"));
        }
        // public TValue get_Current()
        // Offset: 0xFFFFFFFF
        // Implemented from: System.Collections.Generic.IEnumerator`1
        // Base method: T IEnumerator`1::get_Current()
        TValue get_Current() {
          return THROW_UNLESS(il2cpp_utils::RunMethod<TValue>(*this, "get_Current"));
        }
        // Creating proxy method: System_Collections_Generic_IEnumerator_1_get_Current
        // Maps to method: get_Current
        TValue System_Collections_Generic_IEnumerator_1_get_Current() {
          return get_Current();
        }
        // private System.Object System.Collections.IEnumerator.get_Current()
        // Offset: 0xFFFFFFFF
        // Implemented from: System.Collections.IEnumerator
        // Base method: System.Object IEnumerator::get_Current()
        ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
          return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppObject*>(*this, "System.Collections.IEnumerator.get_Current"));
        }
        // private System.Void System.Collections.IEnumerator.Reset()
        // Offset: 0xFFFFFFFF
        // Implemented from: System.Collections.IEnumerator
        // Base method: System.Void IEnumerator::Reset()
        void System_Collections_IEnumerator_Reset() {
          THROW_UNLESS(il2cpp_utils::RunMethod(*this, "System.Collections.IEnumerator.Reset"));
        }
      }; // System.Collections.Generic.Dictionary`2/ValueCollection/Enumerator
      // private System.Collections.Generic.Dictionary`2<TKey,TValue> dictionary
      // Offset: 0x0
      System::Collections::Generic::Dictionary_2<TKey, TValue>* dictionary;
      // Creating conversion operator: operator System::Collections::Generic::Dictionary_2<TKey, TValue>*
      constexpr operator System::Collections::Generic::Dictionary_2<TKey, TValue>*() const noexcept {
        return dictionary;
      }
      // public System.Void .ctor(System.Collections.Generic.Dictionary`2<TKey,TValue> dictionary)
      // Offset: 0xFFFFFFFF
      static typename Dictionary_2<TValue, TKey>::ValueCollection* New_ctor(System::Collections::Generic::Dictionary_2<TKey, TValue>* dictionary) {
        return THROW_UNLESS((il2cpp_utils::New<typename Dictionary_2<TValue, TKey>::ValueCollection*>(dictionary)));
      }
      // public System.Collections.Generic.Dictionary`2/ValueCollection/Enumerator<TKey,TValue> GetEnumerator()
      // Offset: 0xFFFFFFFF
      typename System::Collections::Generic::Dictionary_2<TValue, TKey>::ValueCollection::Enumerator GetEnumerator() {
        return THROW_UNLESS((il2cpp_utils::RunMethod<typename System::Collections::Generic::Dictionary_2<TValue, TKey>::ValueCollection::Enumerator>(this, "GetEnumerator")));
      }
      // public System.Void CopyTo(TValue[] array, System.Int32 index)
      // Offset: 0xFFFFFFFF
      void CopyTo(::Array<TValue>* array, int index) {
        THROW_UNLESS(il2cpp_utils::RunMethod(this, "CopyTo", array, index));
      }
      // public System.Int32 get_Count()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.ICollection`1
      // Base method: System.Int32 ICollection`1::get_Count()
      // Base method: System.Int32 ICollection::get_Count()
      // Base method: System.Int32 IReadOnlyCollection`1::get_Count()
      int get_Count() {
        return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_Count"));
      }
      // Creating proxy method: System_Collections_Generic_ICollection_1_get_Count
      // Maps to method: get_Count
      int System_Collections_Generic_ICollection_1_get_Count() {
        return get_Count();
      }
      // Creating proxy method: System_Collections_ICollection_get_Count
      // Maps to method: get_Count
      int System_Collections_ICollection_get_Count() {
        return get_Count();
      }
      // private System.Boolean System.Collections.Generic.ICollection<TValue>.get_IsReadOnly()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.ICollection`1
      // Base method: System.Boolean ICollection`1::get_IsReadOnly()
      bool System_Collections_Generic_ICollection_1_get_IsReadOnly() {
        return THROW_UNLESS((il2cpp_utils::RunMethod<bool>(this, "System.Collections.Generic.ICollection<TValue>.get_IsReadOnly")));
      }
      // private System.Void System.Collections.Generic.ICollection<TValue>.Add(TValue item)
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.ICollection`1
      // Base method: System.Void ICollection`1::Add(TValue item)
      void System_Collections_Generic_ICollection_1_Add(TValue item) {
        THROW_UNLESS(il2cpp_utils::RunMethod(this, "System.Collections.Generic.ICollection<TValue>.Add", item));
      }
      // private System.Boolean System.Collections.Generic.ICollection<TValue>.Remove(TValue item)
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.ICollection`1
      // Base method: System.Boolean ICollection`1::Remove(TValue item)
      bool System_Collections_Generic_ICollection_1_Remove(TValue item) {
        return THROW_UNLESS((il2cpp_utils::RunMethod<bool>(this, "System.Collections.Generic.ICollection<TValue>.Remove", item)));
      }
      // private System.Void System.Collections.Generic.ICollection<TValue>.Clear()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.ICollection`1
      // Base method: System.Void ICollection`1::Clear()
      void System_Collections_Generic_ICollection_1_Clear() {
        THROW_UNLESS(il2cpp_utils::RunMethod(this, "System.Collections.Generic.ICollection<TValue>.Clear"));
      }
      // private System.Boolean System.Collections.Generic.ICollection<TValue>.Contains(TValue item)
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.ICollection`1
      // Base method: System.Boolean ICollection`1::Contains(TValue item)
      bool System_Collections_Generic_ICollection_1_Contains(TValue item) {
        return THROW_UNLESS((il2cpp_utils::RunMethod<bool>(this, "System.Collections.Generic.ICollection<TValue>.Contains", item)));
      }
      // private System.Collections.Generic.IEnumerator`1<TValue> System.Collections.Generic.IEnumerable<TValue>.GetEnumerator()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.IEnumerable`1
      // Base method: System.Collections.Generic.IEnumerator`1<T> IEnumerable`1::GetEnumerator()
      System::Collections::Generic::IEnumerator_1<TValue>* System_Collections_Generic_IEnumerable_1_GetEnumerator() {
        return THROW_UNLESS((il2cpp_utils::RunMethod<System::Collections::Generic::IEnumerator_1<TValue>*>(this, "System.Collections.Generic.IEnumerable<TValue>.GetEnumerator")));
      }
      // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerable
      // Base method: System.Collections.IEnumerator IEnumerable::GetEnumerator()
      System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
        return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::IEnumerator*>(this, "System.Collections.IEnumerable.GetEnumerator"));
      }
      // private System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.ICollection
      // Base method: System.Void ICollection::CopyTo(System.Array array, System.Int32 index)
      void System_Collections_ICollection_CopyTo(System::Array* array, int index) {
        THROW_UNLESS(il2cpp_utils::RunMethod(this, "System.Collections.ICollection.CopyTo", array, index));
      }
    }; // System.Collections.Generic.Dictionary`2/ValueCollection
    // private System.Int32[] buckets
    // Offset: 0x0
    ::Array<int>* buckets;
    // private System.Collections.Generic.Dictionary`2/Entry<TKey,TValue>[] entries
    // Offset: 0x0
    ::Array<typename System::Collections::Generic::Dictionary_2<TKey, TValue>::Entry>* entries;
    // private System.Int32 count
    // Offset: 0x0
    int count;
    // private System.Int32 version
    // Offset: 0x0
    int version;
    // private System.Int32 freeList
    // Offset: 0x0
    int freeList;
    // private System.Int32 freeCount
    // Offset: 0x0
    int freeCount;
    // private System.Collections.Generic.IEqualityComparer`1<TKey> comparer
    // Offset: 0x0
    System::Collections::Generic::IEqualityComparer_1<TKey>* comparer;
    // private System.Collections.Generic.Dictionary`2/KeyCollection<TKey,TValue> keys
    // Offset: 0x0
    typename System::Collections::Generic::Dictionary_2<TKey, TValue>::KeyCollection* keys;
    // private System.Collections.Generic.Dictionary`2/ValueCollection<TKey,TValue> values
    // Offset: 0x0
    typename System::Collections::Generic::Dictionary_2<TValue, TKey>::ValueCollection* values;
    // private System.Object _syncRoot
    // Offset: 0x0
    ::Il2CppObject* syncRoot;
    // Autogenerated static field getter
    // Get static field: static private System.String VersionName
    static ::Il2CppString* _get_VersionName() {
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<::Il2CppString*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Dictionary_2<TKey, TValue>*>::get(), "VersionName")));
    }
    // Autogenerated static field setter
    // Set static field: static private System.String VersionName
    static void _set_VersionName(::Il2CppString* value) {
      THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Dictionary_2<TKey, TValue>*>::get(), "VersionName", value)));
    }
    // Autogenerated static field getter
    // Get static field: static private System.String HashSizeName
    static ::Il2CppString* _get_HashSizeName() {
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<::Il2CppString*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Dictionary_2<TKey, TValue>*>::get(), "HashSizeName")));
    }
    // Autogenerated static field setter
    // Set static field: static private System.String HashSizeName
    static void _set_HashSizeName(::Il2CppString* value) {
      THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Dictionary_2<TKey, TValue>*>::get(), "HashSizeName", value)));
    }
    // Autogenerated static field getter
    // Get static field: static private System.String KeyValuePairsName
    static ::Il2CppString* _get_KeyValuePairsName() {
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<::Il2CppString*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Dictionary_2<TKey, TValue>*>::get(), "KeyValuePairsName")));
    }
    // Autogenerated static field setter
    // Set static field: static private System.String KeyValuePairsName
    static void _set_KeyValuePairsName(::Il2CppString* value) {
      THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Dictionary_2<TKey, TValue>*>::get(), "KeyValuePairsName", value)));
    }
    // Autogenerated static field getter
    // Get static field: static private System.String ComparerName
    static ::Il2CppString* _get_ComparerName() {
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<::Il2CppString*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Dictionary_2<TKey, TValue>*>::get(), "ComparerName")));
    }
    // Autogenerated static field setter
    // Set static field: static private System.String ComparerName
    static void _set_ComparerName(::Il2CppString* value) {
      THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Dictionary_2<TKey, TValue>*>::get(), "ComparerName", value)));
    }
    // public System.Void .ctor(System.Int32 capacity)
    // Offset: 0xFFFFFFFF
    static Dictionary_2<TKey, TValue>* New_ctor(int capacity) {
      return THROW_UNLESS((il2cpp_utils::New<Dictionary_2<TKey, TValue>*>(capacity)));
    }
    // public System.Void .ctor(System.Collections.Generic.IEqualityComparer`1<TKey> comparer)
    // Offset: 0xFFFFFFFF
    static Dictionary_2<TKey, TValue>* New_ctor(System::Collections::Generic::IEqualityComparer_1<TKey>* comparer) {
      return THROW_UNLESS((il2cpp_utils::New<Dictionary_2<TKey, TValue>*>(comparer)));
    }
    // public System.Void .ctor(System.Int32 capacity, System.Collections.Generic.IEqualityComparer`1<TKey> comparer)
    // Offset: 0xFFFFFFFF
    static Dictionary_2<TKey, TValue>* New_ctor(int capacity, System::Collections::Generic::IEqualityComparer_1<TKey>* comparer) {
      return THROW_UNLESS((il2cpp_utils::New<Dictionary_2<TKey, TValue>*>(capacity, comparer)));
    }
    // public System.Void .ctor(System.Collections.Generic.IDictionary`2<TKey,TValue> dictionary)
    // Offset: 0xFFFFFFFF
    static Dictionary_2<TKey, TValue>* New_ctor(System::Collections::Generic::IDictionary_2<TKey, TValue>* dictionary) {
      return THROW_UNLESS((il2cpp_utils::New<Dictionary_2<TKey, TValue>*>(dictionary)));
    }
    // public System.Void .ctor(System.Collections.Generic.IDictionary`2<TKey,TValue> dictionary, System.Collections.Generic.IEqualityComparer`1<TKey> comparer)
    // Offset: 0xFFFFFFFF
    static Dictionary_2<TKey, TValue>* New_ctor(System::Collections::Generic::IDictionary_2<TKey, TValue>* dictionary, System::Collections::Generic::IEqualityComparer_1<TKey>* comparer) {
      return THROW_UNLESS((il2cpp_utils::New<Dictionary_2<TKey, TValue>*>(dictionary, comparer)));
    }
    // protected System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0xFFFFFFFF
    static Dictionary_2<TKey, TValue>* New_ctor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
      return THROW_UNLESS((il2cpp_utils::New<Dictionary_2<TKey, TValue>*>(info, context)));
    }
    // public System.Collections.Generic.Dictionary`2/KeyCollection<TKey,TValue> get_Keys()
    // Offset: 0xFFFFFFFF
    typename System::Collections::Generic::Dictionary_2<TKey, TValue>::KeyCollection* get_Keys() {
      return THROW_UNLESS((il2cpp_utils::RunMethod<typename System::Collections::Generic::Dictionary_2<TKey, TValue>::KeyCollection*>(this, "get_Keys")));
    }
    // public System.Collections.Generic.Dictionary`2/ValueCollection<TKey,TValue> get_Values()
    // Offset: 0xFFFFFFFF
    typename System::Collections::Generic::Dictionary_2<TValue, TKey>::ValueCollection* get_Values() {
      return THROW_UNLESS((il2cpp_utils::RunMethod<typename System::Collections::Generic::Dictionary_2<TValue, TKey>::ValueCollection*>(this, "get_Values")));
    }
    // public System.Boolean ContainsValue(TValue value)
    // Offset: 0xFFFFFFFF
    bool ContainsValue(TValue value) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "ContainsValue", value));
    }
    // private System.Void CopyTo(System.Collections.Generic.KeyValuePair`2<TKey,TValue>[] array, System.Int32 index)
    // Offset: 0xFFFFFFFF
    void CopyTo(::Array<System::Collections::Generic::KeyValuePair_2<TKey, TValue>>* array, int index) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "CopyTo", array, index));
    }
    // public System.Collections.Generic.Dictionary`2/Enumerator<TKey,TValue> GetEnumerator()
    // Offset: 0xFFFFFFFF
    typename System::Collections::Generic::Dictionary_2<TKey, TValue>::Enumerator GetEnumerator() {
      return THROW_UNLESS((il2cpp_utils::RunMethod<typename System::Collections::Generic::Dictionary_2<TKey, TValue>::Enumerator>(this, "GetEnumerator")));
    }
    // private System.Int32 FindEntry(TKey key)
    // Offset: 0xFFFFFFFF
    int FindEntry(TKey key) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "FindEntry", key));
    }
    // private System.Void Initialize(System.Int32 capacity)
    // Offset: 0xFFFFFFFF
    void Initialize(int capacity) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Initialize", capacity));
    }
    // private System.Boolean TryInsert(TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior)
    // Offset: 0xFFFFFFFF
    bool TryInsert(TKey key, TValue value, System::Collections::Generic::InsertionBehavior behavior) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TryInsert", key, value, behavior));
    }
    // private System.Void Resize()
    // Offset: 0xFFFFFFFF
    void Resize() {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Resize"));
    }
    // private System.Void Resize(System.Int32 newSize, System.Boolean forceNewHashCodes)
    // Offset: 0xFFFFFFFF
    void Resize(int newSize, bool forceNewHashCodes) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Resize", newSize, forceNewHashCodes));
    }
    // static private System.Boolean IsCompatibleKey(System.Object key)
    // Offset: 0xFFFFFFFF
    static bool IsCompatibleKey(::Il2CppObject* key) {
      return THROW_UNLESS((il2cpp_utils::RunMethod<bool>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<Dictionary_2<TKey, TValue>*>::get(), "IsCompatibleKey", key)));
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static Dictionary_2<TKey, TValue>* New_ctor() {
      return THROW_UNLESS((il2cpp_utils::New<Dictionary_2<TKey, TValue>*>()));
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Int32 ICollection`1::get_Count()
    // Base method: System.Int32 ICollection::get_Count()
    // Base method: System.Int32 IReadOnlyCollection`1::get_Count()
    int get_Count() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_Count"));
    }
    // Creating proxy method: System_Collections_Generic_ICollection_1_get_Count
    // Maps to method: get_Count
    int System_Collections_Generic_ICollection_1_get_Count() {
      return get_Count();
    }
    // Creating proxy method: System_Collections_ICollection_get_Count
    // Maps to method: get_Count
    int System_Collections_ICollection_get_Count() {
      return get_Count();
    }
    // public TValue get_Item(TKey key)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.IDictionary`2
    // Base method: TValue IDictionary`2::get_Item(TKey key)
    TValue get_Item(TKey key) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<TValue>(this, "get_Item", key));
    }
    // public System.Void set_Item(TKey key, TValue value)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.IDictionary`2
    // Base method: System.Void IDictionary`2::set_Item(TKey key, TValue value)
    void set_Item(TKey key, TValue value) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_Item", key, value));
    }
    // public System.Void Add(TKey key, TValue value)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.IDictionary`2
    // Base method: System.Void IDictionary`2::Add(TKey key, TValue value)
    void Add(TKey key, TValue value) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Add", key, value));
    }
    // Creating proxy method: System_Collections_Generic_IDictionary_2_Add
    // Maps to method: Add
    void System_Collections_Generic_IDictionary_2_Add(TKey key, TValue value) {
      Add(key, value);
    }
    // private System.Void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair`2<TKey,TValue> keyValuePair)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Void ICollection`1::Add(System.Collections.Generic.KeyValuePair`2<TKey,TValue> keyValuePair)
    void System_Collections_Generic_ICollection_1_Add(System::Collections::Generic::KeyValuePair_2<TKey, TValue> keyValuePair) {
      THROW_UNLESS((il2cpp_utils::RunMethod(this, "System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add", keyValuePair)));
    }
    // private System.Boolean System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair`2<TKey,TValue> keyValuePair)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Boolean ICollection`1::Contains(System.Collections.Generic.KeyValuePair`2<TKey,TValue> keyValuePair)
    bool System_Collections_Generic_ICollection_1_Contains(System::Collections::Generic::KeyValuePair_2<TKey, TValue> keyValuePair) {
      return THROW_UNLESS((il2cpp_utils::RunMethod<bool>(this, "System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains", keyValuePair)));
    }
    // private System.Boolean System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair`2<TKey,TValue> keyValuePair)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Boolean ICollection`1::Remove(System.Collections.Generic.KeyValuePair`2<TKey,TValue> keyValuePair)
    bool System_Collections_Generic_ICollection_1_Remove(System::Collections::Generic::KeyValuePair_2<TKey, TValue> keyValuePair) {
      return THROW_UNLESS((il2cpp_utils::RunMethod<bool>(this, "System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove", keyValuePair)));
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Void ICollection`1::Clear()
    void Clear() {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Clear"));
    }
    // Creating proxy method: System_Collections_Generic_ICollection_1_Clear
    // Maps to method: Clear
    void System_Collections_Generic_ICollection_1_Clear() {
      Clear();
    }
    // public System.Boolean ContainsKey(TKey key)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.IDictionary`2
    // Base method: System.Boolean IDictionary`2::ContainsKey(TKey key)
    bool ContainsKey(TKey key) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "ContainsKey", key));
    }
    // private System.Collections.Generic.IEnumerator`1<System.Collections.Generic.KeyValuePair`2<TKey,TValue>> System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.IEnumerable`1
    // Base method: System.Collections.Generic.IEnumerator`1<T> IEnumerable`1::GetEnumerator()
    System::Collections::Generic::IEnumerator_1<System::Collections::Generic::KeyValuePair_2<TKey, TValue>>* System_Collections_Generic_IEnumerable_1_GetEnumerator() {
      return THROW_UNLESS((il2cpp_utils::RunMethod<System::Collections::Generic::IEnumerator_1<System::Collections::Generic::KeyValuePair_2<TKey, TValue>>*>(this, "System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey,TValue>>.GetEnumerator")));
    }
    // public System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Runtime.Serialization.ISerializable
    // Base method: System.Void ISerializable::GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "GetObjectData", info, context));
    }
    // Creating proxy method: System_Runtime_Serialization_ISerializable_GetObjectData
    // Maps to method: GetObjectData
    void System_Runtime_Serialization_ISerializable_GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
      GetObjectData(info, context);
    }
    // public System.Void OnDeserialization(System.Object sender)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Runtime.Serialization.IDeserializationCallback
    // Base method: System.Void IDeserializationCallback::OnDeserialization(System.Object sender)
    void OnDeserialization(::Il2CppObject* sender) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnDeserialization", sender));
    }
    // Creating proxy method: System_Runtime_Serialization_IDeserializationCallback_OnDeserialization
    // Maps to method: OnDeserialization
    void System_Runtime_Serialization_IDeserializationCallback_OnDeserialization(::Il2CppObject* sender) {
      OnDeserialization(sender);
    }
    // public System.Boolean Remove(TKey key)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.IDictionary`2
    // Base method: System.Boolean IDictionary`2::Remove(TKey key)
    bool Remove(TKey key) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "Remove", key));
    }
    // Creating proxy method: System_Collections_Generic_IDictionary_2_Remove
    // Maps to method: Remove
    bool System_Collections_Generic_IDictionary_2_Remove(TKey key) {
      return Remove(key);
    }
    // public System.Boolean TryGetValue(TKey key, out TValue value)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.IDictionary`2
    // Base method: System.Boolean IDictionary`2::TryGetValue(TKey key, out TValue value)
    // Base method: System.Boolean IReadOnlyDictionary`2::TryGetValue(TKey key, out TValue value)
    bool TryGetValue(TKey key, TValue& value) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TryGetValue", key, value));
    }
    // private System.Boolean System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Boolean ICollection`1::get_IsReadOnly()
    bool System_Collections_Generic_ICollection_1_get_IsReadOnly() {
      return THROW_UNLESS((il2cpp_utils::RunMethod<bool>(this, "System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.get_IsReadOnly")));
    }
    // private System.Void System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair`2<TKey,TValue>[] array, System.Int32 index)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Void ICollection`1::CopyTo(System.Collections.Generic.KeyValuePair`2<TKey,TValue>[] array, System.Int32 index)
    void System_Collections_Generic_ICollection_1_CopyTo(::Array<System::Collections::Generic::KeyValuePair_2<TKey, TValue>>* array, int index) {
      THROW_UNLESS((il2cpp_utils::RunMethod(this, "System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo", array, index)));
    }
    // private System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.ICollection
    // Base method: System.Void ICollection::CopyTo(System.Array array, System.Int32 index)
    void System_Collections_ICollection_CopyTo(System::Array* array, int index) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "System.Collections.ICollection.CopyTo", array, index));
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.IEnumerable
    // Base method: System.Collections.IEnumerator IEnumerable::GetEnumerator()
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::IEnumerator*>(this, "System.Collections.IEnumerable.GetEnumerator"));
    }
    // private System.Collections.ICollection System.Collections.IDictionary.get_Keys()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.IDictionary
    // Base method: System.Collections.ICollection IDictionary::get_Keys()
    System::Collections::ICollection* System_Collections_IDictionary_get_Keys() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::ICollection*>(this, "System.Collections.IDictionary.get_Keys"));
    }
    // private System.Object System.Collections.IDictionary.get_Item(System.Object key)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.IDictionary
    // Base method: System.Object IDictionary::get_Item(System.Object key)
    ::Il2CppObject* System_Collections_IDictionary_get_Item(::Il2CppObject* key) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppObject*>(this, "System.Collections.IDictionary.get_Item", key));
    }
    // private System.Void System.Collections.IDictionary.set_Item(System.Object key, System.Object value)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.IDictionary
    // Base method: System.Void IDictionary::set_Item(System.Object key, System.Object value)
    void System_Collections_IDictionary_set_Item(::Il2CppObject* key, ::Il2CppObject* value) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "System.Collections.IDictionary.set_Item", key, value));
    }
    // private System.Boolean System.Collections.IDictionary.Contains(System.Object key)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.IDictionary
    // Base method: System.Boolean IDictionary::Contains(System.Object key)
    bool System_Collections_IDictionary_Contains(::Il2CppObject* key) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "System.Collections.IDictionary.Contains", key));
    }
    // private System.Collections.IDictionaryEnumerator System.Collections.IDictionary.GetEnumerator()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.IDictionary
    // Base method: System.Collections.IDictionaryEnumerator IDictionary::GetEnumerator()
    System::Collections::IDictionaryEnumerator* System_Collections_IDictionary_GetEnumerator() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::IDictionaryEnumerator*>(this, "System.Collections.IDictionary.GetEnumerator"));
    }
  }; // System.Collections.Generic.Dictionary`2
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(System::Collections::Generic::Dictionary_2, "System.Collections.Generic", "Dictionary`2");
#pragma pack(pop)
