// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Collections.Generic.ICollection`1
#include "System/Collections/Generic/ICollection_1.hpp"
// Including type: System.Collections.ICollection
#include "System/Collections/ICollection.hpp"
// Including type: System.Collections.Generic.IReadOnlyCollection`1
#include "System/Collections/Generic/IReadOnlyCollection_1.hpp"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.Runtime.Serialization.IDeserializationCallback
#include "System/Runtime/Serialization/IDeserializationCallback.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Skipping declaration: Enumerator because it is already included!
  // Forward declaring type: LinkedListNode`1<T>
  template<typename T>
  class LinkedListNode_1;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: Array
  class Array;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
// Type namespace: System.Collections.Generic
namespace System::Collections::Generic {
  // Autogenerated type: System.Collections.Generic.LinkedList`1
  template<typename T>
  class LinkedList_1 : public ::Il2CppObject/*, public System::Collections::Generic::ICollection_1<T>, public System::Collections::ICollection, public System::Collections::Generic::IReadOnlyCollection_1<T>, public System::Runtime::Serialization::ISerializable, public System::Runtime::Serialization::IDeserializationCallback*/ {
    public:
    // Nested type: System::Collections::Generic::LinkedList_1::Enumerator<T>
    struct Enumerator;
    // Autogenerated type: System.Collections.Generic.LinkedList`1/Enumerator
    struct Enumerator : public System::ValueType, public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public System::Collections::Generic::IEnumerator_1<T>, public System::Runtime::Serialization::ISerializable, public System::Runtime::Serialization::IDeserializationCallback*/ {
      public:
      using declaring_type = LinkedList_1<T>*;
      static constexpr std::string_view NESTED_NAME = "Enumerator";
      // private System.Collections.Generic.LinkedList`1<T> _list
      // Offset: 0x0
      System::Collections::Generic::LinkedList_1<T>* list;
      // private System.Collections.Generic.LinkedListNode`1<T> _node
      // Offset: 0x0
      System::Collections::Generic::LinkedListNode_1<T>* node;
      // private System.Int32 _version
      // Offset: 0x0
      int version;
      // private T _current
      // Offset: 0x0
      T current;
      // private System.Int32 _index
      // Offset: 0x0
      int index;
      // Creating value type constructor for type: Enumerator
      constexpr Enumerator(System::Collections::Generic::LinkedList_1<T>* list_ = {}, System::Collections::Generic::LinkedListNode_1<T>* node_ = {}, int version_ = {}, T current_ = {}, int index_ = {}) noexcept : list{list_}, node{node_}, version{version_}, current{current_}, index{index_} {}
      // Creating interface conversion operator: operator System::Collections::Generic::IEnumerator_1<T>
      operator System::Collections::Generic::IEnumerator_1<T>() noexcept {
        return *reinterpret_cast<System::Collections::Generic::IEnumerator_1<T>*>(this);
      }
      // Creating interface conversion operator: operator System::Runtime::Serialization::ISerializable
      operator System::Runtime::Serialization::ISerializable() noexcept {
        return *reinterpret_cast<System::Runtime::Serialization::ISerializable*>(this);
      }
      // Creating interface conversion operator: operator System::Runtime::Serialization::IDeserializationCallback
      operator System::Runtime::Serialization::IDeserializationCallback() noexcept {
        return *reinterpret_cast<System::Runtime::Serialization::IDeserializationCallback*>(this);
      }
      // System.Void .ctor(System.Collections.Generic.LinkedList`1<T> list)
      // Offset: 0xFFFFFFFF
      Enumerator(System::Collections::Generic::LinkedList_1<T>* list) {
        THROW_UNLESS(il2cpp_utils::RunMethod(*this, ".ctor", list));
      }
      // private System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
      // Offset: 0xFFFFFFFF
      Enumerator(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        THROW_UNLESS(il2cpp_utils::RunMethod(*this, ".ctor", info, context));
      }
      // public T get_Current()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.IEnumerator`1
      // Base method: T IEnumerator_1::get_Current()
      T get_Current() {
        return THROW_UNLESS(il2cpp_utils::RunMethod<T>(*this, "get_Current"));
      }
      // Creating proxy method: System_Collections_Generic_IEnumerator_1_get_Current
      // Maps to method: get_Current
      T System_Collections_Generic_IEnumerator_1_get_Current() {
        return get_Current();
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Object IEnumerator::get_Current()
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppObject*>(*this, "System.Collections.IEnumerator.get_Current"));
      }
      // public System.Boolean MoveNext()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Boolean IEnumerator::MoveNext()
      bool MoveNext() {
        return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "MoveNext"));
      }
      // Creating proxy method: System_Collections_IEnumerator_MoveNext
      // Maps to method: MoveNext
      bool System_Collections_IEnumerator_MoveNext() {
        return MoveNext();
      }
      // private System.Void System.Collections.IEnumerator.Reset()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Void IEnumerator::Reset()
      void System_Collections_IEnumerator_Reset() {
        THROW_UNLESS(il2cpp_utils::RunMethod(*this, "System.Collections.IEnumerator.Reset"));
      }
      // public System.Void Dispose()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.IDisposable
      // Base method: System.Void IDisposable::Dispose()
      void Dispose() {
        THROW_UNLESS(il2cpp_utils::RunMethod(*this, "Dispose"));
      }
      // Creating proxy method: System_IDisposable_Dispose
      // Maps to method: Dispose
      void System_IDisposable_Dispose() {
        Dispose();
      }
      // private System.Void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Runtime.Serialization.ISerializable
      // Base method: System.Void ISerializable::GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
      void System_Runtime_Serialization_ISerializable_GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
        THROW_UNLESS(il2cpp_utils::RunMethod(*this, "System.Runtime.Serialization.ISerializable.GetObjectData", info, context));
      }
      // private System.Void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object sender)
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Runtime.Serialization.IDeserializationCallback
      // Base method: System.Void IDeserializationCallback::OnDeserialization(System.Object sender)
      void System_Runtime_Serialization_IDeserializationCallback_OnDeserialization(::Il2CppObject* sender) {
        THROW_UNLESS(il2cpp_utils::RunMethod(*this, "System.Runtime.Serialization.IDeserializationCallback.OnDeserialization", sender));
      }
    }; // System.Collections.Generic.LinkedList`1/Enumerator
    // System.Collections.Generic.LinkedListNode`1<T> head
    // Offset: 0x0
    System::Collections::Generic::LinkedListNode_1<T>* head;
    // System.Int32 count
    // Offset: 0x0
    int count;
    // System.Int32 version
    // Offset: 0x0
    int version;
    // private System.Object _syncRoot
    // Offset: 0x0
    ::Il2CppObject* syncRoot;
    // private System.Runtime.Serialization.SerializationInfo _siInfo
    // Offset: 0x0
    System::Runtime::Serialization::SerializationInfo* siInfo;
    // Creating interface conversion operator: operator System::Collections::Generic::ICollection_1<T>
    operator System::Collections::Generic::ICollection_1<T>() noexcept {
      return *reinterpret_cast<System::Collections::Generic::ICollection_1<T>*>(this);
    }
    // Creating interface conversion operator: operator System::Collections::ICollection
    operator System::Collections::ICollection() noexcept {
      return *reinterpret_cast<System::Collections::ICollection*>(this);
    }
    // Creating interface conversion operator: operator System::Collections::Generic::IReadOnlyCollection_1<T>
    operator System::Collections::Generic::IReadOnlyCollection_1<T>() noexcept {
      return *reinterpret_cast<System::Collections::Generic::IReadOnlyCollection_1<T>*>(this);
    }
    // Creating interface conversion operator: operator System::Runtime::Serialization::ISerializable
    operator System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating interface conversion operator: operator System::Runtime::Serialization::IDeserializationCallback
    operator System::Runtime::Serialization::IDeserializationCallback() noexcept {
      return *reinterpret_cast<System::Runtime::Serialization::IDeserializationCallback*>(this);
    }
    // Autogenerated static field getter
    // Get static field: static private System.String VersionName
    static ::Il2CppString* _get_VersionName() {
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<LinkedList_1<T>*>::get(), "VersionName"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.String VersionName
    static void _set_VersionName(::Il2CppString* value) {
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<LinkedList_1<T>*>::get(), "VersionName", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.String CountName
    static ::Il2CppString* _get_CountName() {
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<LinkedList_1<T>*>::get(), "CountName"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.String CountName
    static void _set_CountName(::Il2CppString* value) {
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<LinkedList_1<T>*>::get(), "CountName", value));
    }
    // Autogenerated static field getter
    // Get static field: static private System.String ValuesName
    static ::Il2CppString* _get_ValuesName() {
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<::Il2CppString*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<LinkedList_1<T>*>::get(), "ValuesName"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.String ValuesName
    static void _set_ValuesName(::Il2CppString* value) {
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<LinkedList_1<T>*>::get(), "ValuesName", value));
    }
    // protected System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0xFFFFFFFF
    static LinkedList_1<T>* New_ctor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
      return THROW_UNLESS(il2cpp_utils::New<LinkedList_1<T>*>(info, context));
    }
    // public System.Collections.Generic.LinkedListNode`1<T> get_First()
    // Offset: 0xFFFFFFFF
    System::Collections::Generic::LinkedListNode_1<T>* get_First() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::Generic::LinkedListNode_1<T>*>(this, "get_First"));
    }
    // public System.Collections.Generic.LinkedListNode`1<T> get_Last()
    // Offset: 0xFFFFFFFF
    System::Collections::Generic::LinkedListNode_1<T>* get_Last() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::Generic::LinkedListNode_1<T>*>(this, "get_Last"));
    }
    // public System.Collections.Generic.LinkedListNode`1<T> AddBefore(System.Collections.Generic.LinkedListNode`1<T> node, T value)
    // Offset: 0xFFFFFFFF
    System::Collections::Generic::LinkedListNode_1<T>* AddBefore(System::Collections::Generic::LinkedListNode_1<T>* node, T value) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::Generic::LinkedListNode_1<T>*>(this, "AddBefore", node, value));
    }
    // public System.Collections.Generic.LinkedListNode`1<T> AddFirst(T value)
    // Offset: 0xFFFFFFFF
    System::Collections::Generic::LinkedListNode_1<T>* AddFirst(T value) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::Generic::LinkedListNode_1<T>*>(this, "AddFirst", value));
    }
    // public System.Void AddFirst(System.Collections.Generic.LinkedListNode`1<T> node)
    // Offset: 0xFFFFFFFF
    void AddFirst(System::Collections::Generic::LinkedListNode_1<T>* node) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "AddFirst", node));
    }
    // public System.Collections.Generic.LinkedListNode`1<T> AddLast(T value)
    // Offset: 0xFFFFFFFF
    System::Collections::Generic::LinkedListNode_1<T>* AddLast(T value) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::Generic::LinkedListNode_1<T>*>(this, "AddLast", value));
    }
    // public System.Collections.Generic.LinkedListNode`1<T> Find(T value)
    // Offset: 0xFFFFFFFF
    System::Collections::Generic::LinkedListNode_1<T>* Find(T value) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::Generic::LinkedListNode_1<T>*>(this, "Find", value));
    }
    // public System.Collections.Generic.LinkedList`1/Enumerator<T> GetEnumerator()
    // Offset: 0xFFFFFFFF
    typename System::Collections::Generic::LinkedList_1<T>::Enumerator GetEnumerator() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<typename System::Collections::Generic::LinkedList_1<T>::Enumerator>(this, "GetEnumerator"));
    }
    // public System.Void Remove(System.Collections.Generic.LinkedListNode`1<T> node)
    // Offset: 0xFFFFFFFF
    void Remove(System::Collections::Generic::LinkedListNode_1<T>* node) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Remove", node));
    }
    // public System.Void RemoveLast()
    // Offset: 0xFFFFFFFF
    void RemoveLast() {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "RemoveLast"));
    }
    // private System.Void InternalInsertNodeBefore(System.Collections.Generic.LinkedListNode`1<T> node, System.Collections.Generic.LinkedListNode`1<T> newNode)
    // Offset: 0xFFFFFFFF
    void InternalInsertNodeBefore(System::Collections::Generic::LinkedListNode_1<T>* node, System::Collections::Generic::LinkedListNode_1<T>* newNode) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "InternalInsertNodeBefore", node, newNode));
    }
    // private System.Void InternalInsertNodeToEmptyList(System.Collections.Generic.LinkedListNode`1<T> newNode)
    // Offset: 0xFFFFFFFF
    void InternalInsertNodeToEmptyList(System::Collections::Generic::LinkedListNode_1<T>* newNode) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "InternalInsertNodeToEmptyList", newNode));
    }
    // System.Void InternalRemoveNode(System.Collections.Generic.LinkedListNode`1<T> node)
    // Offset: 0xFFFFFFFF
    void InternalRemoveNode(System::Collections::Generic::LinkedListNode_1<T>* node) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "InternalRemoveNode", node));
    }
    // System.Void ValidateNewNode(System.Collections.Generic.LinkedListNode`1<T> node)
    // Offset: 0xFFFFFFFF
    void ValidateNewNode(System::Collections::Generic::LinkedListNode_1<T>* node) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "ValidateNewNode", node));
    }
    // System.Void ValidateNode(System.Collections.Generic.LinkedListNode`1<T> node)
    // Offset: 0xFFFFFFFF
    void ValidateNode(System::Collections::Generic::LinkedListNode_1<T>* node) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "ValidateNode", node));
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static LinkedList_1<T>* New_ctor() {
      return THROW_UNLESS(il2cpp_utils::New<LinkedList_1<T>*>());
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Int32 ICollection_1::get_Count()
    // Base method: System.Int32 ICollection::get_Count()
    // Base method: System.Int32 IReadOnlyCollection_1::get_Count()
    int get_Count() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_Count"));
    }
    // Creating proxy method: System_Collections_Generic_ICollection_1_get_Count
    // Maps to method: get_Count
    int System_Collections_Generic_ICollection_1_get_Count() {
      return get_Count();
    }
    // Creating proxy method: System_Collections_ICollection_get_Count
    // Maps to method: get_Count
    int System_Collections_ICollection_get_Count() {
      return get_Count();
    }
    // private System.Boolean System.Collections.Generic.ICollection<T>.get_IsReadOnly()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Boolean ICollection_1::get_IsReadOnly()
    bool System_Collections_Generic_ICollection_1_get_IsReadOnly() {
      return THROW_UNLESS((il2cpp_utils::RunMethod<bool>(this, "System.Collections.Generic.ICollection<T>.get_IsReadOnly")));
    }
    // private System.Void System.Collections.Generic.ICollection<T>.Add(T value)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Void ICollection_1::Add(T value)
    void System_Collections_Generic_ICollection_1_Add(T value) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "System.Collections.Generic.ICollection<T>.Add", value));
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Void ICollection_1::Clear()
    void Clear() {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Clear"));
    }
    // Creating proxy method: System_Collections_Generic_ICollection_1_Clear
    // Maps to method: Clear
    void System_Collections_Generic_ICollection_1_Clear() {
      Clear();
    }
    // public System.Boolean Contains(T value)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Boolean ICollection_1::Contains(T value)
    bool Contains(T value) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "Contains", value));
    }
    // Creating proxy method: System_Collections_Generic_ICollection_1_Contains
    // Maps to method: Contains
    bool System_Collections_Generic_ICollection_1_Contains(T value) {
      return Contains(value);
    }
    // public System.Void CopyTo(T[] array, System.Int32 index)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Void ICollection_1::CopyTo(T[] array, System.Int32 index)
    void CopyTo(::Array<T>* array, int index) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "CopyTo", array, index));
    }
    // Creating proxy method: System_Collections_Generic_ICollection_1_CopyTo
    // Maps to method: CopyTo
    void System_Collections_Generic_ICollection_1_CopyTo(::Array<T>* array, int index) {
      CopyTo(array, index);
    }
    // private System.Collections.Generic.IEnumerator`1<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.IEnumerable`1
    // Base method: System.Collections.Generic.IEnumerator`1<T> IEnumerable_1::GetEnumerator()
    System::Collections::Generic::IEnumerator_1<T>* System_Collections_Generic_IEnumerable_1_GetEnumerator() {
      return THROW_UNLESS((il2cpp_utils::RunMethod<System::Collections::Generic::IEnumerator_1<T>*>(this, "System.Collections.Generic.IEnumerable<T>.GetEnumerator")));
    }
    // public System.Boolean Remove(T value)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Boolean ICollection_1::Remove(T value)
    bool Remove(T value) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "Remove", value));
    }
    // Creating proxy method: System_Collections_Generic_ICollection_1_Remove
    // Maps to method: Remove
    bool System_Collections_Generic_ICollection_1_Remove(T value) {
      return Remove(value);
    }
    // public System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Runtime.Serialization.ISerializable
    // Base method: System.Void ISerializable::GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "GetObjectData", info, context));
    }
    // Creating proxy method: System_Runtime_Serialization_ISerializable_GetObjectData
    // Maps to method: GetObjectData
    void System_Runtime_Serialization_ISerializable_GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
      GetObjectData(info, context);
    }
    // public System.Void OnDeserialization(System.Object sender)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Runtime.Serialization.IDeserializationCallback
    // Base method: System.Void IDeserializationCallback::OnDeserialization(System.Object sender)
    void OnDeserialization(::Il2CppObject* sender) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnDeserialization", sender));
    }
    // Creating proxy method: System_Runtime_Serialization_IDeserializationCallback_OnDeserialization
    // Maps to method: OnDeserialization
    void System_Runtime_Serialization_IDeserializationCallback_OnDeserialization(::Il2CppObject* sender) {
      OnDeserialization(sender);
    }
    // private System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.ICollection
    // Base method: System.Void ICollection::CopyTo(System.Array array, System.Int32 index)
    void System_Collections_ICollection_CopyTo(System::Array* array, int index) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "System.Collections.ICollection.CopyTo", array, index));
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.IEnumerable
    // Base method: System.Collections.IEnumerator IEnumerable::GetEnumerator()
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::IEnumerator*>(this, "System.Collections.IEnumerable.GetEnumerator"));
    }
  }; // System.Collections.Generic.LinkedList`1
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(System::Collections::Generic::LinkedList_1, "System.Collections.Generic", "LinkedList`1");
#pragma pack(pop)
