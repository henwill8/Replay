// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Collections.ICollection
#include "System/Collections/ICollection.hpp"
// Including type: System.Collections.Generic.IReadOnlyCollection`1
#include "System/Collections/Generic/IReadOnlyCollection_1.hpp"
// Including type: System.Collections.Concurrent.PaddedHeadAndTail
#include "System/Collections/Concurrent/PaddedHeadAndTail.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Concurrent
namespace System::Collections::Concurrent {
  // Skipping declaration: Segment because it is already included!
  // Skipping declaration: <Enumerate>d__27 because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
// Type namespace: System.Collections.Concurrent
namespace System::Collections::Concurrent {
  // Autogenerated type: System.Collections.Concurrent.ConcurrentQueue`1
  template<typename T>
  class ConcurrentQueue_1 : public ::Il2CppObject/*, public System::Collections::ICollection, public System::Collections::Generic::IReadOnlyCollection_1<T>*/ {
    public:
    // Nested type: System::Collections::Concurrent::ConcurrentQueue_1::Segment<T>
    class Segment;
    // Nested type: System::Collections::Concurrent::ConcurrentQueue_1::$Enumerate$d__27<T>
    class $Enumerate$d__27;
    // Autogenerated type: System.Collections.Concurrent.ConcurrentQueue`1/Segment
    class Segment : public ::Il2CppObject, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = ConcurrentQueue_1<T>*;
      static constexpr std::string_view NESTED_NAME = "Segment";
      // Nested type: System::Collections::Concurrent::ConcurrentQueue_1::Segment::Slot<T>
      struct Slot;
      // Autogenerated type: System.Collections.Concurrent.ConcurrentQueue`1/Segment/Slot
      struct Slot : public System::ValueType, public ::il2cpp_utils::il2cpp_type_check::NestedType {
        public:
        using declaring_type = typename ConcurrentQueue_1<T>::Segment*;
        static constexpr std::string_view NESTED_NAME = "Slot";
        // public T Item
        // Offset: 0x0
        T Item;
        // public System.Int32 SequenceNumber
        // Offset: 0x0
        int SequenceNumber;
        // Creating value type constructor for type: Slot
        constexpr Slot(T Item_ = {}, int SequenceNumber_ = {}) noexcept : Item{Item_}, SequenceNumber{SequenceNumber_} {}
      }; // System.Collections.Concurrent.ConcurrentQueue`1/Segment/Slot
      // readonly System.Collections.Concurrent.ConcurrentQueue`1/Segment/Slot<T>[] _slots
      // Offset: 0x0
      ::Array<typename System::Collections::Concurrent::ConcurrentQueue_1<T>::Segment::Slot>* slots;
      // readonly System.Int32 _slotsMask
      // Offset: 0x0
      int slotsMask;
      // System.Collections.Concurrent.PaddedHeadAndTail _headAndTail
      // Offset: 0x0
      System::Collections::Concurrent::PaddedHeadAndTail headAndTail;
      // System.Boolean _preservedForObservation
      // Offset: 0x0
      bool preservedForObservation;
      // System.Boolean _frozenForEnqueues
      // Offset: 0x0
      bool frozenForEnqueues;
      // System.Collections.Concurrent.ConcurrentQueue`1/Segment<T> _nextSegment
      // Offset: 0x0
      typename System::Collections::Concurrent::ConcurrentQueue_1<T>::Segment* nextSegment;
      // public System.Void .ctor(System.Int32 boundedLength)
      // Offset: 0xFFFFFFFF
      static typename ConcurrentQueue_1<T>::Segment* New_ctor(int boundedLength) {
        return THROW_UNLESS(il2cpp_utils::New<typename ConcurrentQueue_1<T>::Segment*>(boundedLength));
      }
      // System.Int32 get_Capacity()
      // Offset: 0xFFFFFFFF
      int get_Capacity() {
        return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_Capacity"));
      }
      // System.Int32 get_FreezeOffset()
      // Offset: 0xFFFFFFFF
      int get_FreezeOffset() {
        return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_FreezeOffset"));
      }
      // System.Void EnsureFrozenForEnqueues()
      // Offset: 0xFFFFFFFF
      void EnsureFrozenForEnqueues() {
        THROW_UNLESS(il2cpp_utils::RunMethod(this, "EnsureFrozenForEnqueues"));
      }
      // public System.Boolean TryDequeue(out T item)
      // Offset: 0xFFFFFFFF
      bool TryDequeue(T& item) {
        return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TryDequeue", item));
      }
      // public System.Boolean TryEnqueue(T item)
      // Offset: 0xFFFFFFFF
      bool TryEnqueue(T item) {
        return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TryEnqueue", item));
      }
    }; // System.Collections.Concurrent.ConcurrentQueue`1/Segment
    // Autogenerated type: System.Collections.Concurrent.ConcurrentQueue`1/<Enumerate>d__27
    class $Enumerate$d__27 : public ::Il2CppObject, public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public System::Collections::Generic::IEnumerator_1<T>*/ {
      public:
      using declaring_type = ConcurrentQueue_1<T>*;
      static constexpr std::string_view NESTED_NAME = "$Enumerate$d__27";
      // private System.Int32 <>1__state
      // Offset: 0x0
      int $$1__state;
      // private T <>2__current
      // Offset: 0x0
      T $$2__current;
      // public System.Collections.Concurrent.ConcurrentQueue`1/Segment<T> head
      // Offset: 0x0
      typename System::Collections::Concurrent::ConcurrentQueue_1<T>::Segment* head;
      // public System.Collections.Concurrent.ConcurrentQueue`1/Segment<T> tail
      // Offset: 0x0
      typename System::Collections::Concurrent::ConcurrentQueue_1<T>::Segment* tail;
      // public System.Int32 tailTail
      // Offset: 0x0
      int tailTail;
      // public System.Int32 headHead
      // Offset: 0x0
      int headHead;
      // public System.Collections.Concurrent.ConcurrentQueue`1<T> <>4__this
      // Offset: 0x0
      System::Collections::Concurrent::ConcurrentQueue_1<T>* $$4__this;
      // private System.Int32 <i>5__1
      // Offset: 0x0
      int $i$5__1;
      // private System.Int32 <headTail>5__2
      // Offset: 0x0
      int $headTail$5__2;
      // private System.Int32 <i>5__3
      // Offset: 0x0
      int $i$5__3;
      // private System.Int32 <i>5__4
      // Offset: 0x0
      int $i$5__4;
      // private System.Collections.Concurrent.ConcurrentQueue`1/Segment<T> <s>5__5
      // Offset: 0x0
      typename System::Collections::Concurrent::ConcurrentQueue_1<T>::Segment* $s$5__5;
      // private System.Int32 <i>5__6
      // Offset: 0x0
      int $i$5__6;
      // private System.Int32 <sTail>5__7
      // Offset: 0x0
      int $sTail$5__7;
      // private System.Int32 <i>5__8
      // Offset: 0x0
      int $i$5__8;
      // Creating interface conversion operator: operator System::Collections::Generic::IEnumerator_1<T>
      operator System::Collections::Generic::IEnumerator_1<T>() noexcept {
        return *reinterpret_cast<System::Collections::Generic::IEnumerator_1<T>*>(this);
      }
      // public System.Void .ctor(System.Int32 <>1__state)
      // Offset: 0xFFFFFFFF
      static typename ConcurrentQueue_1<T>::$Enumerate$d__27* New_ctor(int $$1__state) {
        return THROW_UNLESS(il2cpp_utils::New<typename ConcurrentQueue_1<T>::$Enumerate$d__27*>($$1__state));
      }
      // private System.Void System.IDisposable.Dispose()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.IDisposable
      // Base method: System.Void IDisposable::Dispose()
      void System_IDisposable_Dispose() {
        THROW_UNLESS(il2cpp_utils::RunMethod(this, "System.IDisposable.Dispose"));
      }
      // private System.Boolean MoveNext()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Boolean IEnumerator::MoveNext()
      bool MoveNext() {
        return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "MoveNext"));
      }
      // Creating proxy method: System_Collections_IEnumerator_MoveNext
      // Maps to method: MoveNext
      bool System_Collections_IEnumerator_MoveNext() {
        return MoveNext();
      }
      // private T System.Collections.Generic.IEnumerator<T>.get_Current()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.IEnumerator`1
      // Base method: T IEnumerator_1::get_Current()
      T System_Collections_Generic_IEnumerator_1_get_Current() {
        return THROW_UNLESS((il2cpp_utils::RunMethod<T>(this, "System.Collections.Generic.IEnumerator<T>.get_Current")));
      }
      // private System.Void System.Collections.IEnumerator.Reset()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Void IEnumerator::Reset()
      void System_Collections_IEnumerator_Reset() {
        THROW_UNLESS(il2cpp_utils::RunMethod(this, "System.Collections.IEnumerator.Reset"));
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Object IEnumerator::get_Current()
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppObject*>(this, "System.Collections.IEnumerator.get_Current"));
      }
    }; // System.Collections.Concurrent.ConcurrentQueue`1/<Enumerate>d__27
    // private System.Object _crossSegmentLock
    // Offset: 0x0
    ::Il2CppObject* crossSegmentLock;
    // private System.Collections.Concurrent.ConcurrentQueue`1/Segment<T> _tail
    // Offset: 0x0
    typename System::Collections::Concurrent::ConcurrentQueue_1<T>::Segment* tail;
    // private System.Collections.Concurrent.ConcurrentQueue`1/Segment<T> _head
    // Offset: 0x0
    typename System::Collections::Concurrent::ConcurrentQueue_1<T>::Segment* head;
    // Creating interface conversion operator: operator System::Collections::ICollection
    operator System::Collections::ICollection() noexcept {
      return *reinterpret_cast<System::Collections::ICollection*>(this);
    }
    // Creating interface conversion operator: operator System::Collections::Generic::IReadOnlyCollection_1<T>
    operator System::Collections::Generic::IReadOnlyCollection_1<T>() noexcept {
      return *reinterpret_cast<System::Collections::Generic::IReadOnlyCollection_1<T>*>(this);
    }
    // public T[] ToArray()
    // Offset: 0xFFFFFFFF
    ::Array<T>* ToArray() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<T>*>(this, "ToArray"));
    }
    // static private System.Int32 GetCount(System.Collections.Concurrent.ConcurrentQueue`1/Segment<T> s, System.Int32 head, System.Int32 tail)
    // Offset: 0xFFFFFFFF
    static int GetCount(typename System::Collections::Concurrent::ConcurrentQueue_1<T>::Segment* s, int head, int tail) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ConcurrentQueue_1<T>*>::get(), "GetCount", s, head, tail));
    }
    // static private System.Int64 GetCount(System.Collections.Concurrent.ConcurrentQueue`1/Segment<T> head, System.Int32 headHead, System.Collections.Concurrent.ConcurrentQueue`1/Segment<T> tail, System.Int32 tailTail)
    // Offset: 0xFFFFFFFF
    static int64_t GetCount(typename System::Collections::Concurrent::ConcurrentQueue_1<T>::Segment* head, int headHead, typename System::Collections::Concurrent::ConcurrentQueue_1<T>::Segment* tail, int tailTail) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<int64_t>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ConcurrentQueue_1<T>*>::get(), "GetCount", head, headHead, tail, tailTail));
    }
    // public System.Void CopyTo(T[] array, System.Int32 index)
    // Offset: 0xFFFFFFFF
    void CopyTo(::Array<T>* array, int index) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "CopyTo", array, index));
    }
    // private System.Void SnapForObservation(out System.Collections.Concurrent.ConcurrentQueue`1/Segment<T> head, out System.Int32 headHead, out System.Collections.Concurrent.ConcurrentQueue`1/Segment<T> tail, out System.Int32 tailTail)
    // Offset: 0xFFFFFFFF
    void SnapForObservation(typename System::Collections::Concurrent::ConcurrentQueue_1<T>::Segment*& head, int& headHead, typename System::Collections::Concurrent::ConcurrentQueue_1<T>::Segment*& tail, int& tailTail) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "SnapForObservation", head, headHead, tail, tailTail));
    }
    // private T GetItemWhenAvailable(System.Collections.Concurrent.ConcurrentQueue`1/Segment<T> segment, System.Int32 i)
    // Offset: 0xFFFFFFFF
    T GetItemWhenAvailable(typename System::Collections::Concurrent::ConcurrentQueue_1<T>::Segment* segment, int i) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<T>(this, "GetItemWhenAvailable", segment, i));
    }
    // private System.Collections.Generic.IEnumerator`1<T> Enumerate(System.Collections.Concurrent.ConcurrentQueue`1/Segment<T> head, System.Int32 headHead, System.Collections.Concurrent.ConcurrentQueue`1/Segment<T> tail, System.Int32 tailTail)
    // Offset: 0xFFFFFFFF
    System::Collections::Generic::IEnumerator_1<T>* Enumerate(typename System::Collections::Concurrent::ConcurrentQueue_1<T>::Segment* head, int headHead, typename System::Collections::Concurrent::ConcurrentQueue_1<T>::Segment* tail, int tailTail) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::Generic::IEnumerator_1<T>*>(this, "Enumerate", head, headHead, tail, tailTail));
    }
    // public System.Void Enqueue(T item)
    // Offset: 0xFFFFFFFF
    void Enqueue(T item) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Enqueue", item));
    }
    // private System.Void EnqueueSlow(T item)
    // Offset: 0xFFFFFFFF
    void EnqueueSlow(T item) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "EnqueueSlow", item));
    }
    // public System.Boolean TryDequeue(out T result)
    // Offset: 0xFFFFFFFF
    bool TryDequeue(T& result) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TryDequeue", result));
    }
    // private System.Boolean TryDequeueSlow(out T item)
    // Offset: 0xFFFFFFFF
    bool TryDequeueSlow(T& item) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "TryDequeueSlow", item));
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static ConcurrentQueue_1<T>* New_ctor() {
      return THROW_UNLESS(il2cpp_utils::New<ConcurrentQueue_1<T>*>());
    }
    // private System.Void System.Collections.ICollection.CopyTo(System.Array array, System.Int32 index)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.ICollection
    // Base method: System.Void ICollection::CopyTo(System.Array array, System.Int32 index)
    void System_Collections_ICollection_CopyTo(System::Array* array, int index) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "System.Collections.ICollection.CopyTo", array, index));
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.IEnumerable
    // Base method: System.Collections.IEnumerator IEnumerable::GetEnumerator()
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::IEnumerator*>(this, "System.Collections.IEnumerable.GetEnumerator"));
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.ICollection
    // Base method: System.Int32 ICollection::get_Count()
    // Base method: System.Int32 IReadOnlyCollection_1::get_Count()
    int get_Count() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_Count"));
    }
    // Creating proxy method: System_Collections_ICollection_get_Count
    // Maps to method: get_Count
    int System_Collections_ICollection_get_Count() {
      return get_Count();
    }
    // public System.Collections.Generic.IEnumerator`1<T> GetEnumerator()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.IEnumerable`1
    // Base method: System.Collections.Generic.IEnumerator`1<T> IEnumerable_1::GetEnumerator()
    System::Collections::Generic::IEnumerator_1<T>* GetEnumerator() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::Generic::IEnumerator_1<T>*>(this, "GetEnumerator"));
    }
    // Creating proxy method: System_Collections_Generic_IEnumerable_1_GetEnumerator
    // Maps to method: GetEnumerator
    System::Collections::Generic::IEnumerator_1<T>* System_Collections_Generic_IEnumerable_1_GetEnumerator() {
      return GetEnumerator();
    }
  }; // System.Collections.Concurrent.ConcurrentQueue`1
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(System::Collections::Concurrent::ConcurrentQueue_1, "System.Collections.Concurrent", "ConcurrentQueue`1");
#pragma pack(pop)
