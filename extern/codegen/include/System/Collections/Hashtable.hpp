// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Collections.IDictionary
#include "System/Collections/IDictionary.hpp"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.Runtime.Serialization.IDeserializationCallback
#include "System/Runtime/Serialization/IDeserializationCallback.hpp"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: ICollection because it is already included!
  // Forward declaring type: IEqualityComparer
  class IEqualityComparer;
  // Forward declaring type: IHashCodeProvider
  class IHashCodeProvider;
  // Forward declaring type: IComparer
  class IComparer;
  // Forward declaring type: IEnumerator
  class IEnumerator;
  // Forward declaring type: IDictionaryEnumerator
  class IDictionaryEnumerator;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: Array
  class Array;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Completed forward declares
// Type namespace: System.Collections
namespace System::Collections {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: System.Collections.Hashtable
  // [] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: CAD330
  // [DebuggerTypeProxyAttribute] Offset: CAD330
  // [DebuggerDisplayAttribute] Offset: CAD330
  // [DefaultMemberAttribute] Offset: CAD330
  class Hashtable : public ::Il2CppObject/*, public System::Collections::IDictionary, public System::Runtime::Serialization::ISerializable, public System::Runtime::Serialization::IDeserializationCallback, public System::ICloneable*/ {
    public:
    // Nested type: System::Collections::Hashtable::bucket
    struct bucket;
    // Nested type: System::Collections::Hashtable::KeyCollection
    class KeyCollection;
    // Nested type: System::Collections::Hashtable::ValueCollection
    class ValueCollection;
    // Nested type: System::Collections::Hashtable::SyncHashtable
    class SyncHashtable;
    // Nested type: System::Collections::Hashtable::HashtableEnumerator
    class HashtableEnumerator;
    // Nested type: System::Collections::Hashtable::HashtableDebugView
    class HashtableDebugView;
    // Size: 0x14
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Collections.Hashtable/bucket
    // [] Offset: FFFFFFFF
    struct bucket/*, public System::ValueType*/ {
      public:
      // public System.Object key
      // Size: 0x8
      // Offset: 0x0
      ::Il2CppObject* key;
      // Field size check
      static_assert(sizeof(::Il2CppObject*) == 0x8);
      // public System.Object val
      // Size: 0x8
      // Offset: 0x8
      ::Il2CppObject* val;
      // Field size check
      static_assert(sizeof(::Il2CppObject*) == 0x8);
      // public System.Int32 hash_coll
      // Size: 0x4
      // Offset: 0x10
      int hash_coll;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: bucket
      constexpr bucket(::Il2CppObject* key_ = {}, ::Il2CppObject* val_ = {}, int hash_coll_ = {}) noexcept : key{key_}, val{val_}, hash_coll{hash_coll_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
    }; // System.Collections.Hashtable/bucket
    #pragma pack(pop)
    static check_size<sizeof(Hashtable::bucket), 16 + sizeof(int)> __System_Collections_Hashtable_bucketSizeCheck;
    static_assert(sizeof(Hashtable::bucket) == 0x14);
    // private System.Collections.Hashtable/bucket[] buckets
    // Size: 0x8
    // Offset: 0x10
    ::Array<System::Collections::Hashtable::bucket>* buckets;
    // Field size check
    static_assert(sizeof(::Array<System::Collections::Hashtable::bucket>*) == 0x8);
    // private System.Int32 count
    // Size: 0x4
    // Offset: 0x18
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 occupancy
    // Size: 0x4
    // Offset: 0x1C
    int occupancy;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 loadsize
    // Size: 0x4
    // Offset: 0x20
    int loadsize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single loadFactor
    // Size: 0x4
    // Offset: 0x24
    float loadFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 version
    // Size: 0x4
    // Offset: 0x28
    int version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean isWriterInProgress
    // Size: 0x1
    // Offset: 0x2C
    bool isWriterInProgress;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isWriterInProgress and: keys
    char __padding6[0x3] = {};
    // private System.Collections.ICollection keys
    // Size: 0x8
    // Offset: 0x30
    System::Collections::ICollection* keys;
    // Field size check
    static_assert(sizeof(System::Collections::ICollection*) == 0x8);
    // private System.Collections.ICollection values
    // Size: 0x8
    // Offset: 0x38
    System::Collections::ICollection* values;
    // Field size check
    static_assert(sizeof(System::Collections::ICollection*) == 0x8);
    // private System.Collections.IEqualityComparer _keycomparer
    // Size: 0x8
    // Offset: 0x40
    System::Collections::IEqualityComparer* keycomparer;
    // Field size check
    static_assert(sizeof(System::Collections::IEqualityComparer*) == 0x8);
    // private System.Object _syncRoot
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppObject* syncRoot;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // Creating value type constructor for type: Hashtable
    Hashtable(::Array<System::Collections::Hashtable::bucket>* buckets_ = {}, int count_ = {}, int occupancy_ = {}, int loadsize_ = {}, float loadFactor_ = {}, int version_ = {}, bool isWriterInProgress_ = {}, System::Collections::ICollection* keys_ = {}, System::Collections::ICollection* values_ = {}, System::Collections::IEqualityComparer* keycomparer_ = {}, ::Il2CppObject* syncRoot_ = {}) noexcept : buckets{buckets_}, count{count_}, occupancy{occupancy_}, loadsize{loadsize_}, loadFactor{loadFactor_}, version{version_}, isWriterInProgress{isWriterInProgress_}, keys{keys_}, values{values_}, keycomparer{keycomparer_}, syncRoot{syncRoot_} {}
    // Creating interface conversion operator: operator System::Collections::IDictionary
    operator System::Collections::IDictionary() noexcept {
      return *reinterpret_cast<System::Collections::IDictionary*>(this);
    }
    // Creating interface conversion operator: operator System::Runtime::Serialization::ISerializable
    operator System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating interface conversion operator: operator System::Runtime::Serialization::IDeserializationCallback
    operator System::Runtime::Serialization::IDeserializationCallback() noexcept {
      return *reinterpret_cast<System::Runtime::Serialization::IDeserializationCallback*>(this);
    }
    // Creating interface conversion operator: operator System::ICloneable
    operator System::ICloneable() noexcept {
      return *reinterpret_cast<System::ICloneable*>(this);
    }
    // static field const value: static System.Int32 HashPrime
    static constexpr const int HashPrime = 101;
    // Get static field: static System.Int32 HashPrime
    static int _get_HashPrime();
    // Set static field: static System.Int32 HashPrime
    static void _set_HashPrime(int value);
    // static field const value: static private System.Int32 InitialSize
    static constexpr const int InitialSize = 3;
    // Get static field: static private System.Int32 InitialSize
    static int _get_InitialSize();
    // Set static field: static private System.Int32 InitialSize
    static void _set_InitialSize(int value);
    // static field const value: static private System.String LoadFactorName
    static constexpr const char* LoadFactorName = "LoadFactor";
    // Get static field: static private System.String LoadFactorName
    static ::Il2CppString* _get_LoadFactorName();
    // Set static field: static private System.String LoadFactorName
    static void _set_LoadFactorName(::Il2CppString* value);
    // static field const value: static private System.String VersionName
    static constexpr const char* VersionName = "Version";
    // Get static field: static private System.String VersionName
    static ::Il2CppString* _get_VersionName();
    // Set static field: static private System.String VersionName
    static void _set_VersionName(::Il2CppString* value);
    // static field const value: static private System.String ComparerName
    static constexpr const char* ComparerName = "Comparer";
    // Get static field: static private System.String ComparerName
    static ::Il2CppString* _get_ComparerName();
    // Set static field: static private System.String ComparerName
    static void _set_ComparerName(::Il2CppString* value);
    // static field const value: static private System.String HashCodeProviderName
    static constexpr const char* HashCodeProviderName = "HashCodeProvider";
    // Get static field: static private System.String HashCodeProviderName
    static ::Il2CppString* _get_HashCodeProviderName();
    // Set static field: static private System.String HashCodeProviderName
    static void _set_HashCodeProviderName(::Il2CppString* value);
    // static field const value: static private System.String HashSizeName
    static constexpr const char* HashSizeName = "HashSize";
    // Get static field: static private System.String HashSizeName
    static ::Il2CppString* _get_HashSizeName();
    // Set static field: static private System.String HashSizeName
    static void _set_HashSizeName(::Il2CppString* value);
    // static field const value: static private System.String KeysName
    static constexpr const char* KeysName = "Keys";
    // Get static field: static private System.String KeysName
    static ::Il2CppString* _get_KeysName();
    // Set static field: static private System.String KeysName
    static void _set_KeysName(::Il2CppString* value);
    // static field const value: static private System.String ValuesName
    static constexpr const char* ValuesName = "Values";
    // Get static field: static private System.String ValuesName
    static ::Il2CppString* _get_ValuesName();
    // Set static field: static private System.String ValuesName
    static void _set_ValuesName(::Il2CppString* value);
    // static field const value: static private System.String KeyComparerName
    static constexpr const char* KeyComparerName = "KeyComparer";
    // Get static field: static private System.String KeyComparerName
    static ::Il2CppString* _get_KeyComparerName();
    // Set static field: static private System.String KeyComparerName
    static void _set_KeyComparerName(::Il2CppString* value);
    // System.Void .ctor(System.Boolean trash)
    // Offset: 0x168FFFC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Hashtable* New_ctor(bool trash) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Hashtable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Hashtable*, creationType>(trash)));
    }
    // public System.Void .ctor(System.Int32 capacity)
    // Offset: 0x16902AC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Hashtable* New_ctor(int capacity) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Hashtable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Hashtable*, creationType>(capacity)));
    }
    // public System.Void .ctor(System.Int32 capacity, System.Single loadFactor)
    // Offset: 0x1690004
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Hashtable* New_ctor(int capacity, float loadFactor) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Hashtable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Hashtable*, creationType>(capacity, loadFactor)));
    }
    // public System.Void .ctor(System.Int32 capacity, System.Single loadFactor, System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer)
    // Offset: 0x16902B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Hashtable* New_ctor(int capacity, float loadFactor, System::Collections::IHashCodeProvider* hcp, System::Collections::IComparer* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Hashtable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Hashtable*, creationType>(capacity, loadFactor, hcp, comparer)));
    }
    // public System.Void .ctor(System.Int32 capacity, System.Single loadFactor, System.Collections.IEqualityComparer equalityComparer)
    // Offset: 0x1690370
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Hashtable* New_ctor(int capacity, float loadFactor, System::Collections::IEqualityComparer* equalityComparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Hashtable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Hashtable*, creationType>(capacity, loadFactor, equalityComparer)));
    }
    // public System.Void .ctor(System.Collections.IHashCodeProvider hcp, System.Collections.IComparer comparer)
    // Offset: 0x16903A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Hashtable* New_ctor(System::Collections::IHashCodeProvider* hcp, System::Collections::IComparer* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Hashtable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Hashtable*, creationType>(hcp, comparer)));
    }
    // public System.Void .ctor(System.Collections.IEqualityComparer equalityComparer)
    // Offset: 0x16903B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Hashtable* New_ctor(System::Collections::IEqualityComparer* equalityComparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Hashtable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Hashtable*, creationType>(equalityComparer)));
    }
    // public System.Void .ctor(System.Int32 capacity, System.Collections.IEqualityComparer equalityComparer)
    // Offset: 0x16903EC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Hashtable* New_ctor(int capacity, System::Collections::IEqualityComparer* equalityComparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Hashtable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Hashtable*, creationType>(capacity, equalityComparer)));
    }
    // protected System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x1690420
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Hashtable* New_ctor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Hashtable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Hashtable*, creationType>(info, context)));
    }
    // private System.UInt32 InitHash(System.Object key, System.Int32 hashsize, out System.UInt32 seed, out System.UInt32 incr)
    // Offset: 0x16904B8
    uint InitHash(::Il2CppObject* key, int hashsize, uint& seed, uint& incr);
    // public System.Void Clear()
    // Offset: 0x1690A2C
    void Clear();
    // public System.Boolean ContainsKey(System.Object key)
    // Offset: 0x1690CB8
    bool ContainsKey(::Il2CppObject* key);
    // private System.Void CopyKeys(System.Array array, System.Int32 arrayIndex)
    // Offset: 0x1690E54
    void CopyKeys(System::Array* array, int arrayIndex);
    // private System.Void CopyEntries(System.Array array, System.Int32 arrayIndex)
    // Offset: 0x1690EFC
    void CopyEntries(System::Array* array, int arrayIndex);
    // private System.Void CopyValues(System.Array array, System.Int32 arrayIndex)
    // Offset: 0x16911BC
    void CopyValues(System::Array* array, int arrayIndex);
    // private System.Void expand()
    // Offset: 0x16914B4
    void expand();
    // private System.Void rehash()
    // Offset: 0x16916AC
    void rehash();
    // private System.Void UpdateVersion()
    // Offset: 0x1690B40
    void UpdateVersion();
    // private System.Void rehash(System.Int32 newsize, System.Boolean forceNewHashCode)
    // Offset: 0x1691534
    void rehash(int newsize, bool forceNewHashCode);
    // protected System.Int32 GetHash(System.Object key)
    // Offset: 0x16918B8
    int GetHash(::Il2CppObject* key);
    // protected System.Boolean KeyEquals(System.Object item, System.Object key)
    // Offset: 0x169199C
    bool KeyEquals(::Il2CppObject* item, ::Il2CppObject* key);
    // public System.Collections.ICollection get_Values()
    // Offset: 0x1691B3C
    System::Collections::ICollection* get_Values();
    // private System.Void Insert(System.Object key, System.Object nvalue, System.Boolean add)
    // Offset: 0x1690520
    void Insert(::Il2CppObject* key, ::Il2CppObject* nvalue, bool add);
    // private System.Void putEntry(System.Collections.Hashtable/bucket[] newBuckets, System.Object key, System.Object nvalue, System.Int32 hashcode)
    // Offset: 0x16916CC
    void putEntry(::Array<System::Collections::Hashtable::bucket>* newBuckets, ::Il2CppObject* key, ::Il2CppObject* nvalue, int hashcode);
    // public System.Void Remove(System.Object key)
    // Offset: 0x1691BC4
    void Remove(::Il2CppObject* key);
    // public System.Object get_SyncRoot()
    // Offset: 0x1691E3C
    ::Il2CppObject* get_SyncRoot();
    // static public System.Collections.Hashtable Synchronized(System.Collections.Hashtable table)
    // Offset: 0x1691EBC
    static System::Collections::Hashtable* Synchronized(System::Collections::Hashtable* table);
    // public System.Void .ctor()
    // Offset: 0x1687E50
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Hashtable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Collections::Hashtable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Hashtable*, creationType>()));
    }
    // public System.Void Add(System.Object key, System.Object value)
    // Offset: 0x1690518
    // Implemented from: System.Collections.IDictionary
    // Base method: System.Void IDictionary::Add(System.Object key, System.Object value)
    void Add(::Il2CppObject* key, ::Il2CppObject* value);
    // Creating proxy method: System_Collections_IDictionary_Add
    // Maps to method: Add
    void System_Collections_IDictionary_Add(::Il2CppObject* key, ::Il2CppObject* value);
    // public System.Object Clone()
    // Offset: 0x1690B70
    // Implemented from: System.ICloneable
    // Base method: System.Object ICloneable::Clone()
    ::Il2CppObject* Clone();
    // Creating proxy method: System_ICloneable_Clone
    // Maps to method: Clone
    ::Il2CppObject* System_ICloneable_Clone();
    // public System.Boolean Contains(System.Object key)
    // Offset: 0x1690CA8
    // Implemented from: System.Collections.IDictionary
    // Base method: System.Boolean IDictionary::Contains(System.Object key)
    bool Contains(::Il2CppObject* key);
    // Creating proxy method: System_Collections_IDictionary_Contains
    // Maps to method: Contains
    bool System_Collections_IDictionary_Contains(::Il2CppObject* key);
    // public System.Void CopyTo(System.Array array, System.Int32 arrayIndex)
    // Offset: 0x1691034
    // Implemented from: System.Collections.ICollection
    // Base method: System.Void ICollection::CopyTo(System.Array array, System.Int32 arrayIndex)
    void CopyTo(System::Array* array, int arrayIndex);
    // Creating proxy method: System_Collections_ICollection_CopyTo
    // Maps to method: CopyTo
    void System_Collections_ICollection_CopyTo(System::Array* array, int arrayIndex);
    // public System.Object get_Item(System.Object key)
    // Offset: 0x1691270
    // Implemented from: System.Collections.IDictionary
    // Base method: System.Object IDictionary::get_Item(System.Object key)
    ::Il2CppObject* get_Item(::Il2CppObject* key);
    // Creating proxy method: System_Collections_IDictionary_get_Item
    // Maps to method: get_Item
    ::Il2CppObject* System_Collections_IDictionary_get_Item(::Il2CppObject* key);
    // public System.Void set_Item(System.Object key, System.Object value)
    // Offset: 0x16914AC
    // Implemented from: System.Collections.IDictionary
    // Base method: System.Void IDictionary::set_Item(System.Object key, System.Object value)
    void set_Item(::Il2CppObject* key, ::Il2CppObject* value);
    // Creating proxy method: System_Collections_IDictionary_set_Item
    // Maps to method: set_Item
    void System_Collections_IDictionary_set_Item(::Il2CppObject* key, ::Il2CppObject* value);
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0x16917E8
    // Implemented from: System.Collections.IEnumerable
    // Base method: System.Collections.IEnumerator IEnumerable::GetEnumerator()
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // public System.Collections.IDictionaryEnumerator GetEnumerator()
    // Offset: 0x1691850
    // Implemented from: System.Collections.IDictionary
    // Base method: System.Collections.IDictionaryEnumerator IDictionary::GetEnumerator()
    System::Collections::IDictionaryEnumerator* GetEnumerator();
    // Creating proxy method: System_Collections_IDictionary_GetEnumerator
    // Maps to method: GetEnumerator
    System::Collections::IDictionaryEnumerator* System_Collections_IDictionary_GetEnumerator();
    // public System.Collections.ICollection get_Keys()
    // Offset: 0x1691AB4
    // Implemented from: System.Collections.IDictionary
    // Base method: System.Collections.ICollection IDictionary::get_Keys()
    System::Collections::ICollection* get_Keys();
    // Creating proxy method: System_Collections_IDictionary_get_Keys
    // Maps to method: get_Keys
    System::Collections::ICollection* System_Collections_IDictionary_get_Keys();
    // public System.Int32 get_Count()
    // Offset: 0x1691EB4
    // Implemented from: System.Collections.ICollection
    // Base method: System.Int32 ICollection::get_Count()
    int get_Count();
    // Creating proxy method: System_Collections_ICollection_get_Count
    // Maps to method: get_Count
    int System_Collections_ICollection_get_Count();
    // public System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x1691F5C
    // Implemented from: System.Runtime.Serialization.ISerializable
    // Base method: System.Void ISerializable::GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
    // Creating proxy method: System_Runtime_Serialization_ISerializable_GetObjectData
    // Maps to method: GetObjectData
    void System_Runtime_Serialization_ISerializable_GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
    // public System.Void OnDeserialization(System.Object sender)
    // Offset: 0x1692428
    // Implemented from: System.Runtime.Serialization.IDeserializationCallback
    // Base method: System.Void IDeserializationCallback::OnDeserialization(System.Object sender)
    void OnDeserialization(::Il2CppObject* sender);
    // Creating proxy method: System_Runtime_Serialization_IDeserializationCallback_OnDeserialization
    // Maps to method: OnDeserialization
    void System_Runtime_Serialization_IDeserializationCallback_OnDeserialization(::Il2CppObject* sender);
  }; // System.Collections.Hashtable
  #pragma pack(pop)
  static check_size<sizeof(Hashtable), 72 + sizeof(::Il2CppObject*)> __System_Collections_HashtableSizeCheck;
  static_assert(sizeof(Hashtable) == 0x50);
}
DEFINE_IL2CPP_ARG_TYPE(System::Collections::Hashtable*, "System.Collections", "Hashtable");
DEFINE_IL2CPP_ARG_TYPE(System::Collections::Hashtable::bucket, "System.Collections", "Hashtable/bucket");
