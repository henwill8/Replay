// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.StreamReader
#include "System/IO/StreamReader.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
}
// Completed forward declares
// Type namespace: System.IO
namespace System::IO {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: System.IO.UnexceptionalStreamReader
  // [] Offset: FFFFFFFF
  class UnexceptionalStreamReader : public System::IO::StreamReader {
    public:
    // Creating value type constructor for type: UnexceptionalStreamReader
    UnexceptionalStreamReader() noexcept {}
    // Get static field: static private System.Boolean[] newline
    static ::Array<bool>* _get_newline();
    // Set static field: static private System.Boolean[] newline
    static void _set_newline(::Array<bool>* value);
    // Get static field: static private System.Char newlineChar
    static ::Il2CppChar _get_newlineChar();
    // Set static field: static private System.Char newlineChar
    static void _set_newlineChar(::Il2CppChar value);
    // private System.Boolean CheckEOL(System.Char current)
    // Offset: 0x164F974
    bool CheckEOL(::Il2CppChar current);
    // static private System.Void .cctor()
    // Offset: 0x164F458
    // Implemented from: System.IO.StreamReader
    // Base method: System.Void StreamReader::.cctor()
    // Base method: System.Void TextReader::.cctor()
    static void _cctor();
    // public System.Void .ctor(System.IO.Stream stream, System.Text.Encoding encoding)
    // Offset: 0x164F508
    // Implemented from: System.IO.StreamReader
    // Base method: System.Void StreamReader::.ctor(System.IO.Stream stream, System.Text.Encoding encoding)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UnexceptionalStreamReader* New_ctor(System::IO::Stream* stream, System::Text::Encoding* encoding) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::IO::UnexceptionalStreamReader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UnexceptionalStreamReader*, creationType>(stream, encoding)));
    }
    // public override System.Int32 Peek()
    // Offset: 0x164F584
    // Implemented from: System.IO.StreamReader
    // Base method: System.Int32 StreamReader::Peek()
    int Peek();
    // public override System.Int32 Read()
    // Offset: 0x164F640
    // Implemented from: System.IO.StreamReader
    // Base method: System.Int32 StreamReader::Read()
    int Read();
    // public override System.Int32 Read(in System.Char[] dest_buffer, System.Int32 index, System.Int32 count)
    // Offset: 0x164F6FC
    // Implemented from: System.IO.StreamReader
    // Base method: System.Int32 StreamReader::Read(in System.Char[] dest_buffer, System.Int32 index, System.Int32 count)
    int Read(::Array<::Il2CppChar>*& dest_buffer, int index, int count);
    // public override System.String ReadLine()
    // Offset: 0x164FB64
    // Implemented from: System.IO.StreamReader
    // Base method: System.String StreamReader::ReadLine()
    ::Il2CppString* ReadLine();
    // public override System.String ReadToEnd()
    // Offset: 0x164FC20
    // Implemented from: System.IO.StreamReader
    // Base method: System.String StreamReader::ReadToEnd()
    ::Il2CppString* ReadToEnd();
  }; // System.IO.UnexceptionalStreamReader
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(System::IO::UnexceptionalStreamReader*, "System.IO", "UnexceptionalStreamReader");
