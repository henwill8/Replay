// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.Stream
#include "System/IO/Stream.hpp"
// Including type: System.IO.FileAccess
#include "System/IO/FileAccess.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: FileMode
  struct FileMode;
  // Forward declaring type: FileShare
  struct FileShare;
  // Forward declaring type: FileOptions
  struct FileOptions;
  // Forward declaring type: SeekOrigin
  struct SeekOrigin;
}
// Forward declaring namespace: Microsoft::Win32::SafeHandles
namespace Microsoft::Win32::SafeHandles {
  // Forward declaring type: SafeFileHandle
  class SafeFileHandle;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
  // Forward declaring type: IAsyncResult
  class IAsyncResult;
  // Forward declaring type: AsyncCallback
  class AsyncCallback;
}
// Forward declaring namespace: System::Runtime::InteropServices
namespace System::Runtime::InteropServices {
  // Forward declaring type: SafeHandle
  class SafeHandle;
}
// Completed forward declares
// Type namespace: System.IO
namespace System::IO {
  // Autogenerated type: System.IO.FileStream
  class FileStream : public System::IO::Stream {
    public:
    // Nested type: System::IO::FileStream::ReadDelegate
    class ReadDelegate;
    // Nested type: System::IO::FileStream::WriteDelegate
    class WriteDelegate;
    // private System.Byte[] buf
    // Offset: 0x28
    ::Array<uint8_t>* buf;
    // private System.String name
    // Offset: 0x30
    ::Il2CppString* name;
    // private Microsoft.Win32.SafeHandles.SafeFileHandle safeHandle
    // Offset: 0x38
    Microsoft::Win32::SafeHandles::SafeFileHandle* safeHandle;
    // private System.Boolean isExposed
    // Offset: 0x40
    bool isExposed;
    // private System.Int64 append_startpos
    // Offset: 0x48
    int64_t append_startpos;
    // private System.IO.FileAccess access
    // Offset: 0x50
    System::IO::FileAccess access;
    // private System.Boolean owner
    // Offset: 0x54
    bool owner;
    // private System.Boolean async
    // Offset: 0x55
    bool async;
    // private System.Boolean canseek
    // Offset: 0x56
    bool canseek;
    // private System.Boolean anonymous
    // Offset: 0x57
    bool anonymous;
    // private System.Boolean buf_dirty
    // Offset: 0x58
    bool buf_dirty;
    // private System.Int32 buf_size
    // Offset: 0x5C
    int buf_size;
    // private System.Int32 buf_length
    // Offset: 0x60
    int buf_length;
    // private System.Int32 buf_offset
    // Offset: 0x64
    int buf_offset;
    // private System.Int64 buf_start
    // Offset: 0x68
    int64_t buf_start;
    // static field const value: static System.Int32 DefaultBufferSize
    static constexpr const int DefaultBufferSize = 4096;
    // Get static field: static System.Int32 DefaultBufferSize
    static int _get_DefaultBufferSize();
    // Set static field: static System.Int32 DefaultBufferSize
    static void _set_DefaultBufferSize(int value);
    // Get static field: static private System.Byte[] buf_recycle
    static ::Array<uint8_t>* _get_buf_recycle();
    // Set static field: static private System.Byte[] buf_recycle
    static void _set_buf_recycle(::Array<uint8_t>* value);
    // Get static field: static private readonly System.Object buf_recycle_lock
    static ::Il2CppObject* _get_buf_recycle_lock();
    // Set static field: static private readonly System.Object buf_recycle_lock
    static void _set_buf_recycle_lock(::Il2CppObject* value);
    // System.Void .ctor(System.IntPtr handle, System.IO.FileAccess access, System.Boolean ownsHandle, System.Int32 bufferSize, System.Boolean isAsync, System.Boolean isConsoleWrapper)
    // Offset: 0x1135A48
    static FileStream* New_ctor(System::IntPtr handle, System::IO::FileAccess access, bool ownsHandle, int bufferSize, bool isAsync, bool isConsoleWrapper);
    // public System.Void .ctor(System.String path, System.IO.FileMode mode)
    // Offset: 0x1135ED0
    static FileStream* New_ctor(::Il2CppString* path, System::IO::FileMode mode);
    // public System.Void .ctor(System.String path, System.IO.FileMode mode, System.IO.FileAccess access)
    // Offset: 0x1136640
    static FileStream* New_ctor(::Il2CppString* path, System::IO::FileMode mode, System::IO::FileAccess access);
    // public System.Void .ctor(System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share)
    // Offset: 0x113324C
    static FileStream* New_ctor(::Il2CppString* path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share);
    // public System.Void .ctor(System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.Int32 bufferSize)
    // Offset: 0x1132B50
    static FileStream* New_ctor(::Il2CppString* path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share, int bufferSize);
    // System.Void .ctor(System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.Int32 bufferSize, System.IO.FileOptions options, System.String msgPath, System.Boolean bFromProxy, System.Boolean useLongPath, System.Boolean checkHost)
    // Offset: 0x11366A0
    static FileStream* New_ctor(::Il2CppString* path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share, int bufferSize, System::IO::FileOptions options, ::Il2CppString* msgPath, bool bFromProxy, bool useLongPath, bool checkHost);
    // System.Void .ctor(System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.Int32 bufferSize, System.Boolean isAsync, System.Boolean anonymous)
    // Offset: 0x1136678
    static FileStream* New_ctor(::Il2CppString* path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share, int bufferSize, bool isAsync, bool anonymous);
    // System.Void .ctor(System.String path, System.IO.FileMode mode, System.IO.FileAccess access, System.IO.FileShare share, System.Int32 bufferSize, System.Boolean anonymous, System.IO.FileOptions options)
    // Offset: 0x1135F10
    static FileStream* New_ctor(::Il2CppString* path, System::IO::FileMode mode, System::IO::FileAccess access, System::IO::FileShare share, int bufferSize, bool anonymous, System::IO::FileOptions options);
    // private System.Void Init(Microsoft.Win32.SafeHandles.SafeFileHandle safeHandle, System.IO.FileAccess access, System.Boolean ownsHandle, System.Int32 bufferSize, System.Boolean isAsync, System.Boolean isConsoleWrapper)
    // Offset: 0x1135BD4
    void Init(Microsoft::Win32::SafeHandles::SafeFileHandle* safeHandle, System::IO::FileAccess access, bool ownsHandle, int bufferSize, bool isAsync, bool isConsoleWrapper);
    // private System.Void ExposeHandle()
    // Offset: 0x1136C70
    void ExposeHandle();
    // private System.Int32 ReadInternal(System.Byte[] dest, System.Int32 offset, System.Int32 count)
    // Offset: 0x1137B14
    int ReadInternal(::Array<uint8_t>* dest, int offset, int count);
    // private System.Void WriteInternal(System.Byte[] src, System.Int32 offset, System.Int32 count)
    // Offset: 0x113833C
    void WriteInternal(::Array<uint8_t>* src, int offset, int count);
    // private System.Int32 ReadSegment(System.Byte[] dest, System.Int32 dest_offset, System.Int32 count)
    // Offset: 0x1137BBC
    int ReadSegment(::Array<uint8_t>* dest, int dest_offset, int count);
    // private System.Int32 WriteSegment(System.Byte[] src, System.Int32 src_offset, System.Int32 count)
    // Offset: 0x1138640
    int WriteSegment(::Array<uint8_t>* src, int src_offset, int count);
    // private System.Void FlushBuffer()
    // Offset: 0x11372CC
    void FlushBuffer();
    // private System.Void FlushBufferIfDirty()
    // Offset: 0x1136F68
    void FlushBufferIfDirty();
    // private System.Void RefillBuffer()
    // Offset: 0x1137718
    void RefillBuffer();
    // private System.Int32 ReadData(System.Runtime.InteropServices.SafeHandle safeHandle, System.Byte[] buf, System.Int32 offset, System.Int32 count)
    // Offset: 0x11375DC
    int ReadData(System::Runtime::InteropServices::SafeHandle* safeHandle, ::Array<uint8_t>* buf, int offset, int count);
    // private System.Void InitBuffer(System.Int32 size, System.Boolean isZeroSize)
    // Offset: 0x11369E4
    void InitBuffer(int size, bool isZeroSize);
    // private System.String GetSecureFileName(System.String filename)
    // Offset: 0x1136830
    ::Il2CppString* GetSecureFileName(::Il2CppString* filename);
    // private System.String GetSecureFileName(System.String filename, System.Boolean full)
    // Offset: 0x11366AC
    ::Il2CppString* GetSecureFileName(::Il2CppString* filename, bool full);
    // public override System.Boolean get_CanRead()
    // Offset: 0x1136DC4
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanRead()
    bool get_CanRead();
    // public override System.Boolean get_CanWrite()
    // Offset: 0x1136DD8
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanWrite()
    bool get_CanWrite();
    // public override System.Boolean get_CanSeek()
    // Offset: 0x1136DEC
    // Implemented from: System.IO.Stream
    // Base method: System.Boolean Stream::get_CanSeek()
    bool get_CanSeek();
    // public override System.Int64 get_Length()
    // Offset: 0x1136DF4
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Length()
    int64_t get_Length();
    // public override System.Int64 get_Position()
    // Offset: 0x1137088
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::get_Position()
    int64_t get_Position();
    // public override System.Void set_Position(System.Int64 value)
    // Offset: 0x1137208
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::set_Position(System.Int64 value)
    void set_Position(int64_t value);
    // public override System.Int32 ReadByte()
    // Offset: 0x1137478
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::ReadByte()
    int ReadByte();
    // public override System.Void WriteByte(System.Byte value)
    // Offset: 0x1137754
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::WriteByte(System.Byte value)
    void WriteByte(uint8_t value);
    // public override System.Int32 Read(in System.Byte[] array, System.Int32 offset, System.Int32 count)
    // Offset: 0x11378D0
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::Read(in System.Byte[] array, System.Int32 offset, System.Int32 count)
    int Read(::Array<uint8_t>*& array, int offset, int count);
    // public override System.IAsyncResult BeginRead(System.Byte[] array, System.Int32 offset, System.Int32 numBytes, System.AsyncCallback userCallback, System.Object stateObject)
    // Offset: 0x1137C84
    // Implemented from: System.IO.Stream
    // Base method: System.IAsyncResult Stream::BeginRead(System.Byte[] array, System.Int32 offset, System.Int32 numBytes, System.AsyncCallback userCallback, System.Object stateObject)
    System::IAsyncResult* BeginRead(::Array<uint8_t>* array, int offset, int numBytes, System::AsyncCallback* userCallback, ::Il2CppObject* stateObject);
    // public override System.Int32 EndRead(System.IAsyncResult asyncResult)
    // Offset: 0x1137FA4
    // Implemented from: System.IO.Stream
    // Base method: System.Int32 Stream::EndRead(System.IAsyncResult asyncResult)
    int EndRead(System::IAsyncResult* asyncResult);
    // public override System.Void Write(System.Byte[] array, System.Int32 offset, System.Int32 count)
    // Offset: 0x113811C
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Write(System.Byte[] array, System.Int32 offset, System.Int32 count)
    void Write(::Array<uint8_t>* array, int offset, int count);
    // public override System.IAsyncResult BeginWrite(System.Byte[] array, System.Int32 offset, System.Int32 numBytes, System.AsyncCallback userCallback, System.Object stateObject)
    // Offset: 0x11386BC
    // Implemented from: System.IO.Stream
    // Base method: System.IAsyncResult Stream::BeginWrite(System.Byte[] array, System.Int32 offset, System.Int32 numBytes, System.AsyncCallback userCallback, System.Object stateObject)
    System::IAsyncResult* BeginWrite(::Array<uint8_t>* array, int offset, int numBytes, System::AsyncCallback* userCallback, ::Il2CppObject* stateObject);
    // public override System.Void EndWrite(System.IAsyncResult asyncResult)
    // Offset: 0x1138AFC
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::EndWrite(System.IAsyncResult asyncResult)
    void EndWrite(System::IAsyncResult* asyncResult);
    // public override System.Int64 Seek(System.Int64 offset, System.IO.SeekOrigin origin)
    // Offset: 0x1138C58
    // Implemented from: System.IO.Stream
    // Base method: System.Int64 Stream::Seek(System.Int64 offset, System.IO.SeekOrigin origin)
    int64_t Seek(int64_t offset, System::IO::SeekOrigin origin);
    // public override System.Void Flush()
    // Offset: 0x1138EA0
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Flush()
    void Flush();
    // protected override System.Void Finalize()
    // Offset: 0x1138F38
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x1138FB0
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // static private System.Void .cctor()
    // Offset: 0x11394B8
    // Implemented from: System.IO.Stream
    // Base method: System.Void Stream::.cctor()
    static void _cctor();
  }; // System.IO.FileStream
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::IO::FileStream*, "System.IO", "FileStream");
#pragma pack(pop)
