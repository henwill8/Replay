// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Completed forward declares
// Type namespace: System.IO
namespace System::IO {
  // Autogenerated type: System.IO.Path
  class Path : public ::Il2CppObject {
    public:
    // Get static field: static public readonly System.Char[] InvalidPathChars
    static ::Array<::Il2CppChar>* _get_InvalidPathChars();
    // Set static field: static public readonly System.Char[] InvalidPathChars
    static void _set_InvalidPathChars(::Array<::Il2CppChar>* value);
    // Get static field: static public readonly System.Char AltDirectorySeparatorChar
    static ::Il2CppChar _get_AltDirectorySeparatorChar();
    // Set static field: static public readonly System.Char AltDirectorySeparatorChar
    static void _set_AltDirectorySeparatorChar(::Il2CppChar value);
    // Get static field: static public readonly System.Char DirectorySeparatorChar
    static ::Il2CppChar _get_DirectorySeparatorChar();
    // Set static field: static public readonly System.Char DirectorySeparatorChar
    static void _set_DirectorySeparatorChar(::Il2CppChar value);
    // Get static field: static public readonly System.Char PathSeparator
    static ::Il2CppChar _get_PathSeparator();
    // Set static field: static public readonly System.Char PathSeparator
    static void _set_PathSeparator(::Il2CppChar value);
    // Get static field: static readonly System.String DirectorySeparatorStr
    static ::Il2CppString* _get_DirectorySeparatorStr();
    // Set static field: static readonly System.String DirectorySeparatorStr
    static void _set_DirectorySeparatorStr(::Il2CppString* value);
    // Get static field: static public readonly System.Char VolumeSeparatorChar
    static ::Il2CppChar _get_VolumeSeparatorChar();
    // Set static field: static public readonly System.Char VolumeSeparatorChar
    static void _set_VolumeSeparatorChar(::Il2CppChar value);
    // Get static field: static readonly System.Char[] PathSeparatorChars
    static ::Array<::Il2CppChar>* _get_PathSeparatorChars();
    // Set static field: static readonly System.Char[] PathSeparatorChars
    static void _set_PathSeparatorChars(::Array<::Il2CppChar>* value);
    // Get static field: static private readonly System.Boolean dirEqualsVolume
    static bool _get_dirEqualsVolume();
    // Set static field: static private readonly System.Boolean dirEqualsVolume
    static void _set_dirEqualsVolume(bool value);
    // Get static field: static readonly System.Char[] trimEndCharsWindows
    static ::Array<::Il2CppChar>* _get_trimEndCharsWindows();
    // Set static field: static readonly System.Char[] trimEndCharsWindows
    static void _set_trimEndCharsWindows(::Array<::Il2CppChar>* value);
    // Get static field: static readonly System.Char[] trimEndCharsUnix
    static ::Array<::Il2CppChar>* _get_trimEndCharsUnix();
    // Set static field: static readonly System.Char[] trimEndCharsUnix
    static void _set_trimEndCharsUnix(::Array<::Il2CppChar>* value);
    // static public System.String ChangeExtension(System.String path, System.String extension)
    // Offset: 0x13A0E4C
    static ::Il2CppString* ChangeExtension(::Il2CppString* path, ::Il2CppString* extension);
    // static public System.String Combine(System.String path1, System.String path2)
    // Offset: 0x13A10EC
    static ::Il2CppString* Combine(::Il2CppString* path1, ::Il2CppString* path2);
    // static System.String CleanPath(System.String s)
    // Offset: 0x13A1554
    static ::Il2CppString* CleanPath(::Il2CppString* s);
    // static public System.String GetDirectoryName(System.String path)
    // Offset: 0x13A1A40
    static ::Il2CppString* GetDirectoryName(::Il2CppString* path);
    // static public System.String GetExtension(System.String path)
    // Offset: 0x13A2260
    static ::Il2CppString* GetExtension(::Il2CppString* path);
    // static public System.String GetFileName(System.String path)
    // Offset: 0x13A2388
    static ::Il2CppString* GetFileName(::Il2CppString* path);
    // static public System.String GetFileNameWithoutExtension(System.String path)
    // Offset: 0x13A24A0
    static ::Il2CppString* GetFileNameWithoutExtension(::Il2CppString* path);
    // static public System.String GetFullPath(System.String path)
    // Offset: 0x13A250C
    static ::Il2CppString* GetFullPath(::Il2CppString* path);
    // static System.String GetFullPathInternal(System.String path)
    // Offset: 0x13A2CC0
    static ::Il2CppString* GetFullPathInternal(::Il2CppString* path);
    // static private System.Int32 GetFullPathName(System.String path, System.Int32 numBufferChars, System.Text.StringBuilder buffer, ref System.IntPtr lpFilePartOrNull)
    // Offset: 0x13A2D24
    static int GetFullPathName(::Il2CppString* path, int numBufferChars, System::Text::StringBuilder* buffer, System::IntPtr& lpFilePartOrNull);
    // static System.String GetFullPathName(System.String path)
    // Offset: 0x13A2E04
    static ::Il2CppString* GetFullPathName(::Il2CppString* path);
    // static System.String WindowsDriveAdjustment(System.String path)
    // Offset: 0x13A2FBC
    static ::Il2CppString* WindowsDriveAdjustment(::Il2CppString* path);
    // static System.String InsecureGetFullPath(System.String path)
    // Offset: 0x13A2584
    static ::Il2CppString* InsecureGetFullPath(::Il2CppString* path);
    // static System.Boolean IsDirectorySeparator(System.Char c)
    // Offset: 0x13A32A4
    static bool IsDirectorySeparator(::Il2CppChar c);
    // static public System.String GetPathRoot(System.String path)
    // Offset: 0x13A1DD8
    static ::Il2CppString* GetPathRoot(::Il2CppString* path);
    // static public System.Boolean IsPathRooted(System.String path)
    // Offset: 0x13A1380
    static bool IsPathRooted(::Il2CppString* path);
    // static public System.Char[] GetInvalidFileNameChars()
    // Offset: 0x13A3B10
    static ::Array<::Il2CppChar>* GetInvalidFileNameChars();
    // static public System.Char[] GetInvalidPathChars()
    // Offset: 0x13A3BC8
    static ::Array<::Il2CppChar>* GetInvalidPathChars();
    // static private System.Int32 findExtension(System.String path)
    // Offset: 0x13A1040
    static int findExtension(::Il2CppString* path);
    // static private System.Void .cctor()
    // Offset: 0x13A3C58
    static void _cctor();
    // static private System.String GetServerAndShare(System.String path)
    // Offset: 0x13A3E58
    static ::Il2CppString* GetServerAndShare(::Il2CppString* path);
    // static private System.Boolean SameRoot(System.String root, System.String path)
    // Offset: 0x13A3FD4
    static bool SameRoot(::Il2CppString* root, ::Il2CppString* path);
    // static private System.String CanonicalizePath(System.String path)
    // Offset: 0x13A3348
    static ::Il2CppString* CanonicalizePath(::Il2CppString* path);
    // static public System.String Combine(params System.String[] paths)
    // Offset: 0x13A42F0
    static ::Il2CppString* Combine(::Array<::Il2CppString*>* paths);
    // Creating initializer_list -> params proxy for: System.String Combine(params System.String[] paths)
    static ::Il2CppString* Combine(std::initializer_list<::Il2CppString*> paths);
    // Creating TArgs -> initializer_list proxy for: System.String Combine(params System.String[] paths)
    template<class ...TParams>
    static ::Il2CppString* Combine(TParams&&... paths) {
      return Combine({paths...});
    }
    // static public System.String Combine(System.String path1, System.String path2, System.String path3)
    // Offset: 0x13A45FC
    static ::Il2CppString* Combine(::Il2CppString* path1, ::Il2CppString* path2, ::Il2CppString* path3);
    // static System.Void Validate(System.String path)
    // Offset: 0x13A47B4
    static void Validate(::Il2CppString* path);
    // static System.Void Validate(System.String path, System.String parameterName)
    // Offset: 0x13A4824
    static void Validate(::Il2CppString* path, ::Il2CppString* parameterName);
    // static System.String get_DirectorySeparatorCharAsString()
    // Offset: 0x13A497C
    static ::Il2CppString* get_DirectorySeparatorCharAsString();
    // static System.Char[] get_TrimEndChars()
    // Offset: 0x13A49E4
    static ::Array<::Il2CppChar>* get_TrimEndChars();
    // static System.Void CheckSearchPattern(System.String searchPattern)
    // Offset: 0x13A4A84
    static void CheckSearchPattern(::Il2CppString* searchPattern);
    // static System.Void CheckInvalidPathChars(System.String path, System.Boolean checkAdditional)
    // Offset: 0x13A4C10
    static void CheckInvalidPathChars(::Il2CppString* path, bool checkAdditional);
    // static System.String InternalCombine(System.String path1, System.String path2)
    // Offset: 0x13A4D78
    static ::Il2CppString* InternalCombine(::Il2CppString* path1, ::Il2CppString* path2);
  }; // System.IO.Path
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::IO::Path*, "System.IO", "Path");
#pragma pack(pop)
