// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IO.StreamWriter
#include "System/IO/StreamWriter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: TermInfoDriver
  class TermInfoDriver;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: Stream
  class Stream;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: Encoding
  class Encoding;
}
// Completed forward declares
// Type namespace: System.IO
namespace System::IO {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: System.IO.CStreamWriter
  // [] Offset: FFFFFFFF
  class CStreamWriter : public System::IO::StreamWriter {
    public:
    // private System.TermInfoDriver driver
    // Size: 0x8
    // Offset: 0x68
    System::TermInfoDriver* driver;
    // Field size check
    static_assert(sizeof(System::TermInfoDriver*) == 0x8);
    // Creating value type constructor for type: CStreamWriter
    CStreamWriter(System::TermInfoDriver* driver_ = {}) noexcept : driver{driver_} {}
    // public System.Void .ctor(System.IO.Stream stream, System.Text.Encoding encoding, System.Boolean leaveOpen)
    // Offset: 0x1748830
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CStreamWriter* New_ctor(System::IO::Stream* stream, System::Text::Encoding* encoding, bool leaveOpen) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::IO::CStreamWriter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CStreamWriter*, creationType>(stream, encoding, leaveOpen)));
    }
    // public System.Void InternalWriteString(System.String val)
    // Offset: 0x1748F64
    void InternalWriteString(::Il2CppString* val);
    // public System.Void InternalWriteChar(System.Char val)
    // Offset: 0x1748E90
    void InternalWriteChar(::Il2CppChar val);
    // public System.Void InternalWriteChars(System.Char[] buffer, System.Int32 n)
    // Offset: 0x1749038
    void InternalWriteChars(::Array<::Il2CppChar>* buffer, int n);
    // public override System.Void Write(System.Char[] buffer, System.Int32 index, System.Int32 count)
    // Offset: 0x1748940
    // Implemented from: System.IO.StreamWriter
    // Base method: System.Void StreamWriter::Write(System.Char[] buffer, System.Int32 index, System.Int32 count)
    void Write(::Array<::Il2CppChar>* buffer, int index, int count);
    // public override System.Void Write(System.Char val)
    // Offset: 0x1748CBC
    // Implemented from: System.IO.StreamWriter
    // Base method: System.Void StreamWriter::Write(System.Char val)
    void Write(::Il2CppChar val);
    // public override System.Void Write(System.Char[] val)
    // Offset: 0x1749118
    // Implemented from: System.IO.StreamWriter
    // Base method: System.Void StreamWriter::Write(System.Char[] val)
    void Write(::Array<::Il2CppChar>* val);
    // public override System.Void Write(System.String val)
    // Offset: 0x1749140
    // Implemented from: System.IO.StreamWriter
    // Base method: System.Void StreamWriter::Write(System.String val)
    void Write(::Il2CppString* val);
  }; // System.IO.CStreamWriter
  #pragma pack(pop)
  static check_size<sizeof(CStreamWriter), 104 + sizeof(System::TermInfoDriver*)> __System_IO_CStreamWriterSizeCheck;
  static_assert(sizeof(CStreamWriter) == 0x70);
}
DEFINE_IL2CPP_ARG_TYPE(System::IO::CStreamWriter*, "System.IO", "CStreamWriter");
