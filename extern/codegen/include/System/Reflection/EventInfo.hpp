// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Reflection.MemberInfo
#include "System/Reflection/MemberInfo.hpp"
// Including type: System.Runtime.InteropServices._EventInfo
#include "System/Runtime/InteropServices/_EventInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MethodInfo
  class MethodInfo;
  // Forward declaring type: MemberTypes
  struct MemberTypes;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: IntPtr
  struct IntPtr;
  // Forward declaring type: RuntimeTypeHandle
  struct RuntimeTypeHandle;
}
// Forward declaring namespace: Mono
namespace Mono {
  // Forward declaring type: RuntimeEventHandle
  struct RuntimeEventHandle;
}
// Completed forward declares
// Type namespace: System.Reflection
namespace System::Reflection {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Reflection.EventInfo
  // [] Offset: FFFFFFFF
  // [ClassInterfaceAttribute] Offset: CA994C
  // [ComDefaultInterfaceAttribute] Offset: CA994C
  // [ComVisibleAttribute] Offset: CA994C
  class EventInfo : public System::Reflection::MemberInfo/*, public System::Runtime::InteropServices::_EventInfo*/ {
    public:
    // Nested type: System::Reflection::EventInfo::AddEventAdapter
    class AddEventAdapter;
    // private System.Reflection.EventInfo/AddEventAdapter cached_add_event
    // Size: 0x8
    // Offset: 0x10
    System::Reflection::EventInfo::AddEventAdapter* cached_add_event;
    // Field size check
    static_assert(sizeof(System::Reflection::EventInfo::AddEventAdapter*) == 0x8);
    // Creating value type constructor for type: EventInfo
    EventInfo(System::Reflection::EventInfo::AddEventAdapter* cached_add_event_ = {}) noexcept : cached_add_event{cached_add_event_} {}
    // Creating interface conversion operator: operator System::Runtime::InteropServices::_EventInfo
    operator System::Runtime::InteropServices::_EventInfo() noexcept {
      return *reinterpret_cast<System::Runtime::InteropServices::_EventInfo*>(this);
    }
    // Creating conversion operator: operator System::Reflection::EventInfo::AddEventAdapter*
    constexpr operator System::Reflection::EventInfo::AddEventAdapter*() const noexcept {
      return cached_add_event;
    }
    // public System.Type get_EventHandlerType()
    // Offset: 0x19463A0
    System::Type* get_EventHandlerType();
    // public System.Reflection.MethodInfo GetAddMethod(System.Boolean nonPublic)
    // Offset: 0xFFFFFFFF
    System::Reflection::MethodInfo* GetAddMethod(bool nonPublic);
    // public System.Reflection.MethodInfo GetRaiseMethod(System.Boolean nonPublic)
    // Offset: 0xFFFFFFFF
    System::Reflection::MethodInfo* GetRaiseMethod(bool nonPublic);
    // public System.Reflection.MethodInfo GetRemoveMethod(System.Boolean nonPublic)
    // Offset: 0xFFFFFFFF
    System::Reflection::MethodInfo* GetRemoveMethod(bool nonPublic);
    // static private System.Reflection.EventInfo internal_from_handle_type(System.IntPtr event_handle, System.IntPtr type_handle)
    // Offset: 0x19464F0
    static System::Reflection::EventInfo* internal_from_handle_type(System::IntPtr event_handle, System::IntPtr type_handle);
    // static System.Reflection.EventInfo GetEventFromHandle(Mono.RuntimeEventHandle handle, System.RuntimeTypeHandle reflectedType)
    // Offset: 0x19464F4
    static System::Reflection::EventInfo* GetEventFromHandle(Mono::RuntimeEventHandle handle, System::RuntimeTypeHandle reflectedType);
    // public override System.Reflection.MemberTypes get_MemberType()
    // Offset: 0x1946414
    // Implemented from: System.Reflection.MemberInfo
    // Base method: System.Reflection.MemberTypes MemberInfo::get_MemberType()
    System::Reflection::MemberTypes get_MemberType();
    // protected System.Void .ctor()
    // Offset: 0x194641C
    // Implemented from: System.Reflection.MemberInfo
    // Base method: System.Void MemberInfo::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EventInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::EventInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EventInfo*, creationType>()));
    }
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x194642C
    // Implemented from: System.Reflection.MemberInfo
    // Base method: System.Boolean MemberInfo::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x1946438
    // Implemented from: System.Reflection.MemberInfo
    // Base method: System.Int32 MemberInfo::GetHashCode()
    int GetHashCode();
  }; // System.Reflection.EventInfo
  #pragma pack(pop)
  static check_size<sizeof(EventInfo), 16 + sizeof(System::Reflection::EventInfo::AddEventAdapter*)> __System_Reflection_EventInfoSizeCheck;
  static_assert(sizeof(EventInfo) == 0x18);
  // static public System.Boolean op_Equality(System.Reflection.EventInfo left, System.Reflection.EventInfo right)
  // Offset: 0x1946448
  bool operator ==(System::Reflection::EventInfo* left, System::Reflection::EventInfo& right);
  // static public System.Boolean op_Inequality(System.Reflection.EventInfo left, System.Reflection.EventInfo right)
  // Offset: 0x1946494
  bool operator !=(System::Reflection::EventInfo* left, System::Reflection::EventInfo& right);
}
DEFINE_IL2CPP_ARG_TYPE(System::Reflection::EventInfo*, "System.Reflection", "EventInfo");
