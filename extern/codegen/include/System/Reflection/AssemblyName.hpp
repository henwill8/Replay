// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.Runtime.Serialization.IDeserializationCallback
#include "System/Runtime/Serialization/IDeserializationCallback.hpp"
// Including type: System.Runtime.InteropServices._AssemblyName
#include "System/Runtime/InteropServices/_AssemblyName.hpp"
// Including type: System.Reflection.AssemblyNameFlags
#include "System/Reflection/AssemblyNameFlags.hpp"
// Including type: System.Configuration.Assemblies.AssemblyHashAlgorithm
#include "System/Configuration/Assemblies/AssemblyHashAlgorithm.hpp"
// Including type: System.Configuration.Assemblies.AssemblyVersionCompatibility
#include "System/Configuration/Assemblies/AssemblyVersionCompatibility.hpp"
// Including type: System.Reflection.ProcessorArchitecture
#include "System/Reflection/ProcessorArchitecture.hpp"
// Including type: System.Reflection.AssemblyContentType
#include "System/Reflection/AssemblyContentType.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CultureInfo
  class CultureInfo;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: StrongNameKeyPair
  class StrongNameKeyPair;
  // Forward declaring type: Assembly
  class Assembly;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Version
  class Version;
  // Forward declaring type: IntPtr
  struct IntPtr;
}
// Forward declaring namespace: Mono
namespace Mono {
  // Forward declaring type: MonoAssemblyName
  struct MonoAssemblyName;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Completed forward declares
// Type namespace: System.Reflection
namespace System::Reflection {
  // Size: 0x70
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Reflection.AssemblyName
  // [] Offset: FFFFFFFF
  // [ClassInterfaceAttribute] Offset: CA97E4
  // [ComVisibleAttribute] Offset: CA97E4
  // [ComDefaultInterfaceAttribute] Offset: CA97E4
  class AssemblyName : public ::Il2CppObject/*, public System::ICloneable, public System::Runtime::Serialization::ISerializable, public System::Runtime::Serialization::IDeserializationCallback, public System::Runtime::InteropServices::_AssemblyName*/ {
    public:
    // private System.String name
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* name;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String codebase
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* codebase;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Int32 major
    // Size: 0x4
    // Offset: 0x20
    int major;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 minor
    // Size: 0x4
    // Offset: 0x24
    int minor;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 build
    // Size: 0x4
    // Offset: 0x28
    int build;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 revision
    // Size: 0x4
    // Offset: 0x2C
    int revision;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Globalization.CultureInfo cultureinfo
    // Size: 0x8
    // Offset: 0x30
    System::Globalization::CultureInfo* cultureinfo;
    // Field size check
    static_assert(sizeof(System::Globalization::CultureInfo*) == 0x8);
    // private System.Reflection.AssemblyNameFlags flags
    // Size: 0x4
    // Offset: 0x38
    System::Reflection::AssemblyNameFlags flags;
    // Field size check
    static_assert(sizeof(System::Reflection::AssemblyNameFlags) == 0x4);
    // private System.Configuration.Assemblies.AssemblyHashAlgorithm hashalg
    // Size: 0x4
    // Offset: 0x3C
    System::Configuration::Assemblies::AssemblyHashAlgorithm hashalg;
    // Field size check
    static_assert(sizeof(System::Configuration::Assemblies::AssemblyHashAlgorithm) == 0x4);
    // private System.Reflection.StrongNameKeyPair keypair
    // Size: 0x8
    // Offset: 0x40
    System::Reflection::StrongNameKeyPair* keypair;
    // Field size check
    static_assert(sizeof(System::Reflection::StrongNameKeyPair*) == 0x8);
    // private System.Byte[] publicKey
    // Size: 0x8
    // Offset: 0x48
    ::Array<uint8_t>* publicKey;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Byte[] keyToken
    // Size: 0x8
    // Offset: 0x50
    ::Array<uint8_t>* keyToken;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Configuration.Assemblies.AssemblyVersionCompatibility versioncompat
    // Size: 0x4
    // Offset: 0x58
    System::Configuration::Assemblies::AssemblyVersionCompatibility versioncompat;
    // Field size check
    static_assert(sizeof(System::Configuration::Assemblies::AssemblyVersionCompatibility) == 0x4);
    // Padding between fields: versioncompat and: version
    char __padding12[0x4] = {};
    // private System.Version version
    // Size: 0x8
    // Offset: 0x60
    System::Version* version;
    // Field size check
    static_assert(sizeof(System::Version*) == 0x8);
    // private System.Reflection.ProcessorArchitecture processor_architecture
    // Size: 0x4
    // Offset: 0x68
    System::Reflection::ProcessorArchitecture processor_architecture;
    // Field size check
    static_assert(sizeof(System::Reflection::ProcessorArchitecture) == 0x4);
    // private System.Reflection.AssemblyContentType contentType
    // Size: 0x4
    // Offset: 0x6C
    System::Reflection::AssemblyContentType contentType;
    // Field size check
    static_assert(sizeof(System::Reflection::AssemblyContentType) == 0x4);
    // Creating value type constructor for type: AssemblyName
    AssemblyName(::Il2CppString* name_ = {}, ::Il2CppString* codebase_ = {}, int major_ = {}, int minor_ = {}, int build_ = {}, int revision_ = {}, System::Globalization::CultureInfo* cultureinfo_ = {}, System::Reflection::AssemblyNameFlags flags_ = {}, System::Configuration::Assemblies::AssemblyHashAlgorithm hashalg_ = {}, System::Reflection::StrongNameKeyPair* keypair_ = {}, ::Array<uint8_t>* publicKey_ = {}, ::Array<uint8_t>* keyToken_ = {}, System::Configuration::Assemblies::AssemblyVersionCompatibility versioncompat_ = {}, System::Version* version_ = {}, System::Reflection::ProcessorArchitecture processor_architecture_ = {}, System::Reflection::AssemblyContentType contentType_ = {}) noexcept : name{name_}, codebase{codebase_}, major{major_}, minor{minor_}, build{build_}, revision{revision_}, cultureinfo{cultureinfo_}, flags{flags_}, hashalg{hashalg_}, keypair{keypair_}, publicKey{publicKey_}, keyToken{keyToken_}, versioncompat{versioncompat_}, version{version_}, processor_architecture{processor_architecture_}, contentType{contentType_} {}
    // Creating interface conversion operator: operator System::ICloneable
    operator System::ICloneable() noexcept {
      return *reinterpret_cast<System::ICloneable*>(this);
    }
    // Creating interface conversion operator: operator System::Runtime::Serialization::ISerializable
    operator System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating interface conversion operator: operator System::Runtime::Serialization::IDeserializationCallback
    operator System::Runtime::Serialization::IDeserializationCallback() noexcept {
      return *reinterpret_cast<System::Runtime::Serialization::IDeserializationCallback*>(this);
    }
    // Creating interface conversion operator: operator System::Runtime::InteropServices::_AssemblyName
    operator System::Runtime::InteropServices::_AssemblyName() noexcept {
      return *reinterpret_cast<System::Runtime::InteropServices::_AssemblyName*>(this);
    }
    // static private System.Boolean ParseAssemblyName(System.IntPtr name, out Mono.MonoAssemblyName aname, out System.Boolean is_version_definited, out System.Boolean is_token_defined)
    // Offset: 0x1B271F0
    static bool ParseAssemblyName(System::IntPtr name, Mono::MonoAssemblyName& aname, bool& is_version_definited, bool& is_token_defined);
    // public System.Void .ctor(System.String assemblyName)
    // Offset: 0x1B271F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AssemblyName* New_ctor(::Il2CppString* assemblyName) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::AssemblyName::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AssemblyName*, creationType>(assemblyName)));
    }
    // System.Void .ctor(System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext sc)
    // Offset: 0x1B27414
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AssemblyName* New_ctor(System::Runtime::Serialization::SerializationInfo* si, System::Runtime::Serialization::StreamingContext sc) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::AssemblyName::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AssemblyName*, creationType>(si, sc)));
    }
    // public System.String get_Name()
    // Offset: 0x1B2781C
    ::Il2CppString* get_Name();
    // public System.Void set_Name(System.String value)
    // Offset: 0x1B27824
    void set_Name(::Il2CppString* value);
    // public System.Globalization.CultureInfo get_CultureInfo()
    // Offset: 0x1B2782C
    System::Globalization::CultureInfo* get_CultureInfo();
    // public System.Void set_CultureInfo(System.Globalization.CultureInfo value)
    // Offset: 0x1B27834
    void set_CultureInfo(System::Globalization::CultureInfo* value);
    // public System.Reflection.AssemblyNameFlags get_Flags()
    // Offset: 0x1B2783C
    System::Reflection::AssemblyNameFlags get_Flags();
    // public System.Void set_Flags(System.Reflection.AssemblyNameFlags value)
    // Offset: 0x1B27844
    void set_Flags(System::Reflection::AssemblyNameFlags value);
    // public System.String get_FullName()
    // Offset: 0x1B2784C
    ::Il2CppString* get_FullName();
    // public System.Version get_Version()
    // Offset: 0x1B27C64
    System::Version* get_Version();
    // public System.Void set_Version(System.Version value)
    // Offset: 0x1B26450
    void set_Version(System::Version* value);
    // public System.Byte[] GetPublicKey()
    // Offset: 0x1B27CA0
    ::Array<uint8_t>* GetPublicKey();
    // public System.Byte[] GetPublicKeyToken()
    // Offset: 0x1B27CA8
    ::Array<uint8_t>* GetPublicKeyToken();
    // private System.Boolean get_IsPublicKeyValid()
    // Offset: 0x1B27DA4
    bool get_IsPublicKeyValid();
    // private System.Byte[] InternalGetPublicKeyToken()
    // Offset: 0x1B27B7C
    ::Array<uint8_t>* InternalGetPublicKeyToken();
    // static private System.Void get_public_token(System.Byte* token, System.Byte* pubkey, System.Int32 len)
    // Offset: 0x1B27EC8
    static void get_public_token(uint8_t* token, uint8_t* pubkey, int len);
    // private System.Byte[] ComputePublicKeyToken()
    // Offset: 0x1B27E34
    ::Array<uint8_t>* ComputePublicKeyToken();
    // public System.Void SetPublicKey(System.Byte[] publicKey)
    // Offset: 0x1B26430
    void SetPublicKey(::Array<uint8_t>* publicKey);
    // static private Mono.MonoAssemblyName* GetNativeName(System.IntPtr assembly_ptr)
    // Offset: 0x1B28250
    static Mono::MonoAssemblyName* GetNativeName(System::IntPtr assembly_ptr);
    // System.Void FillName(Mono.MonoAssemblyName* native, System.String codeBase, System.Boolean addVersion, System.Boolean addPublickey, System.Boolean defaultToken, System.Boolean assemblyRef)
    // Offset: 0x1B268CC
    void FillName(Mono::MonoAssemblyName* native, ::Il2CppString* codeBase, bool addVersion, bool addPublickey, bool defaultToken, bool assemblyRef);
    // static System.Reflection.AssemblyName Create(System.Reflection.Assembly assembly, System.Boolean fillCodebase)
    // Offset: 0x1B28254
    static System::Reflection::AssemblyName* Create(System::Reflection::Assembly* assembly, bool fillCodebase);
    // public System.Void .ctor()
    // Offset: 0x1B26424
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AssemblyName* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::AssemblyName::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AssemblyName*, creationType>()));
    }
    // public override System.String ToString()
    // Offset: 0x1B27C6C
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
    // public System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x1B27ECC
    // Implemented from: System.Runtime.Serialization.ISerializable
    // Base method: System.Void ISerializable::GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
    // Creating proxy method: System_Runtime_Serialization_ISerializable_GetObjectData
    // Maps to method: GetObjectData
    void System_Runtime_Serialization_ISerializable_GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
    // public System.Object Clone()
    // Offset: 0x1B28134
    // Implemented from: System.ICloneable
    // Base method: System.Object ICloneable::Clone()
    ::Il2CppObject* Clone();
    // Creating proxy method: System_ICloneable_Clone
    // Maps to method: Clone
    ::Il2CppObject* System_ICloneable_Clone();
    // public System.Void OnDeserialization(System.Object sender)
    // Offset: 0x1B28248
    // Implemented from: System.Runtime.Serialization.IDeserializationCallback
    // Base method: System.Void IDeserializationCallback::OnDeserialization(System.Object sender)
    void OnDeserialization(::Il2CppObject* sender);
    // Creating proxy method: System_Runtime_Serialization_IDeserializationCallback_OnDeserialization
    // Maps to method: OnDeserialization
    void System_Runtime_Serialization_IDeserializationCallback_OnDeserialization(::Il2CppObject* sender);
  }; // System.Reflection.AssemblyName
  #pragma pack(pop)
  static check_size<sizeof(AssemblyName), 108 + sizeof(System::Reflection::AssemblyContentType)> __System_Reflection_AssemblyNameSizeCheck;
  static_assert(sizeof(AssemblyName) == 0x70);
}
DEFINE_IL2CPP_ARG_TYPE(System::Reflection::AssemblyName*, "System.Reflection", "AssemblyName");
