// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Reflection.CustomAttributeTypedArgument
#include "System/Reflection/CustomAttributeTypedArgument.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MemberInfo
  class MemberInfo;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppObject;
struct Il2CppString;
// Completed il2cpp-utils forward declares
// Type namespace: System.Reflection
namespace System::Reflection {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Reflection.CustomAttributeNamedArgument
  // [] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: CA9924
  struct CustomAttributeNamedArgument/*, public System::ValueType*/ {
    public:
    // private System.Reflection.CustomAttributeTypedArgument typedArgument
    // Size: 0x10
    // Offset: 0x0
    System::Reflection::CustomAttributeTypedArgument typedArgument;
    // Field size check
    static_assert(sizeof(System::Reflection::CustomAttributeTypedArgument) == 0x10);
    // private System.Reflection.MemberInfo memberInfo
    // Size: 0x8
    // Offset: 0x10
    System::Reflection::MemberInfo* memberInfo;
    // Field size check
    static_assert(sizeof(System::Reflection::MemberInfo*) == 0x8);
    // Creating value type constructor for type: CustomAttributeNamedArgument
    constexpr CustomAttributeNamedArgument(System::Reflection::CustomAttributeTypedArgument typedArgument_ = {}, System::Reflection::MemberInfo* memberInfo_ = {}) noexcept : typedArgument{typedArgument_}, memberInfo{memberInfo_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // public System.Void .ctor(System.Reflection.MemberInfo memberInfo, System.Object value)
    // Offset: 0xE17A58
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    CustomAttributeNamedArgument(System::Reflection::MemberInfo* memberInfo, ::Il2CppObject* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Reflection::CustomAttributeNamedArgument::.ctor");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(memberInfo, value)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, memberInfo, value);
    }
    // public System.Reflection.MemberInfo get_MemberInfo()
    // Offset: 0xE17A60
    System::Reflection::MemberInfo* get_MemberInfo();
    // public System.Reflection.CustomAttributeTypedArgument get_TypedValue()
    // Offset: 0xE17A68
    System::Reflection::CustomAttributeTypedArgument get_TypedValue();
    // public override System.String ToString()
    // Offset: 0xE17A74
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::Il2CppString* ToString();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xE17A7C
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xE17A84
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // System.Reflection.CustomAttributeNamedArgument
  #pragma pack(pop)
  static check_size<sizeof(CustomAttributeNamedArgument), 16 + sizeof(System::Reflection::MemberInfo*)> __System_Reflection_CustomAttributeNamedArgumentSizeCheck;
  static_assert(sizeof(CustomAttributeNamedArgument) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(System::Reflection::CustomAttributeNamedArgument, "System.Reflection", "CustomAttributeNamedArgument");
