// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.TimeZoneInfo
#include "System/TimeZoneInfo.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.Runtime.Serialization.IDeserializationCallback
#include "System/Runtime/Serialization/IDeserializationCallback.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: System.DayOfWeek
#include "System/DayOfWeek.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Size: 0x11
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.TimeZoneInfo/TransitionTime
  // [] Offset: FFFFFFFF
  // [TypeForwardedFromAttribute] Offset: CA84E0
  struct TimeZoneInfo::TransitionTime/*, public System::ValueType, public System::IEquatable_1<System::TimeZoneInfo::TransitionTime>, public System::Runtime::Serialization::ISerializable, public System::Runtime::Serialization::IDeserializationCallback*/ {
    public:
    // private System.DateTime m_timeOfDay
    // Size: 0x8
    // Offset: 0x0
    System::DateTime m_timeOfDay;
    // Field size check
    static_assert(sizeof(System::DateTime) == 0x8);
    // private System.Byte m_month
    // Size: 0x1
    // Offset: 0x8
    uint8_t m_month;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_week
    // Size: 0x1
    // Offset: 0x9
    uint8_t m_week;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_day
    // Size: 0x1
    // Offset: 0xA
    uint8_t m_day;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Padding between fields: m_day and: m_dayOfWeek
    char __padding3[0x1] = {};
    // private System.DayOfWeek m_dayOfWeek
    // Size: 0x4
    // Offset: 0xC
    System::DayOfWeek m_dayOfWeek;
    // Field size check
    static_assert(sizeof(System::DayOfWeek) == 0x4);
    // private System.Boolean m_isFixedDateRule
    // Size: 0x1
    // Offset: 0x10
    bool m_isFixedDateRule;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: TransitionTime
    constexpr TransitionTime(System::DateTime m_timeOfDay_ = {}, uint8_t m_month_ = {}, uint8_t m_week_ = {}, uint8_t m_day_ = {}, System::DayOfWeek m_dayOfWeek_ = {}, bool m_isFixedDateRule_ = {}) noexcept : m_timeOfDay{m_timeOfDay_}, m_month{m_month_}, m_week{m_week_}, m_day{m_day_}, m_dayOfWeek{m_dayOfWeek_}, m_isFixedDateRule{m_isFixedDateRule_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<System::TimeZoneInfo::TransitionTime>
    operator System::IEquatable_1<System::TimeZoneInfo::TransitionTime>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<System::TimeZoneInfo::TransitionTime>*>(this);
    }
    // Creating interface conversion operator: operator System::Runtime::Serialization::ISerializable
    operator System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating interface conversion operator: operator System::Runtime::Serialization::IDeserializationCallback
    operator System::Runtime::Serialization::IDeserializationCallback() noexcept {
      return *reinterpret_cast<System::Runtime::Serialization::IDeserializationCallback*>(this);
    }
    // public System.DateTime get_TimeOfDay()
    // Offset: 0xE11C54
    System::DateTime get_TimeOfDay();
    // public System.Int32 get_Month()
    // Offset: 0xE11C5C
    int get_Month();
    // public System.Int32 get_Week()
    // Offset: 0xE11C64
    int get_Week();
    // public System.Int32 get_Day()
    // Offset: 0xE11C6C
    int get_Day();
    // public System.DayOfWeek get_DayOfWeek()
    // Offset: 0xE11C74
    System::DayOfWeek get_DayOfWeek();
    // public System.Boolean get_IsFixedDateRule()
    // Offset: 0xE11C7C
    bool get_IsFixedDateRule();
    // static public System.TimeZoneInfo/TransitionTime CreateFixedDateRule(System.DateTime timeOfDay, System.Int32 month, System.Int32 day)
    // Offset: 0x19E4F70
    static System::TimeZoneInfo::TransitionTime CreateFixedDateRule(System::DateTime timeOfDay, int month, int day);
    // static public System.TimeZoneInfo/TransitionTime CreateFloatingDateRule(System.DateTime timeOfDay, System.Int32 month, System.Int32 week, System.DayOfWeek dayOfWeek)
    // Offset: 0x19E6090
    static System::TimeZoneInfo::TransitionTime CreateFloatingDateRule(System::DateTime timeOfDay, int month, int week, System::DayOfWeek dayOfWeek);
    // static private System.TimeZoneInfo/TransitionTime CreateTransitionTime(System.DateTime timeOfDay, System.Int32 month, System.Int32 week, System.Int32 day, System.DayOfWeek dayOfWeek, System.Boolean isFixedDateRule)
    // Offset: 0x19EDD7C
    static System::TimeZoneInfo::TransitionTime CreateTransitionTime(System::DateTime timeOfDay, int month, int week, int day, System::DayOfWeek dayOfWeek, bool isFixedDateRule);
    // static private System.Void ValidateTransitionTime(System.DateTime timeOfDay, System.Int32 month, System.Int32 week, System.Int32 day, System.DayOfWeek dayOfWeek)
    // Offset: 0x19EDDF8
    static void ValidateTransitionTime(System::DateTime timeOfDay, int month, int week, int day, System::DayOfWeek dayOfWeek);
    // private System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0xE11CE8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    TransitionTime(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::TimeZoneInfo::TransitionTime::.ctor");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(info, context)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, info, context);
    }
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xE11C84
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public System.Boolean Equals(System.TimeZoneInfo/TransitionTime other)
    // Offset: 0xE11C8C
    // Implemented from: System.IEquatable`1
    // Base method: System.Boolean IEquatable_1::Equals(System.TimeZoneInfo/TransitionTime other)
    bool Equals(System::TimeZoneInfo::TransitionTime other);
    // public override System.Int32 GetHashCode()
    // Offset: 0xE11CC4
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // private System.Void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object sender)
    // Offset: 0xE11CD8
    // Implemented from: System.Runtime.Serialization.IDeserializationCallback
    // Base method: System.Void IDeserializationCallback::OnDeserialization(System.Object sender)
    void System_Runtime_Serialization_IDeserializationCallback_OnDeserialization(::Il2CppObject* sender);
    // private System.Void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0xE11CE0
    // Implemented from: System.Runtime.Serialization.ISerializable
    // Base method: System.Void ISerializable::GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    void System_Runtime_Serialization_ISerializable_GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
  }; // System.TimeZoneInfo/TransitionTime
  #pragma pack(pop)
  static check_size<sizeof(TimeZoneInfo::TransitionTime), 16 + sizeof(bool)> __System_TimeZoneInfo_TransitionTimeSizeCheck;
  static_assert(sizeof(TimeZoneInfo::TransitionTime) == 0x11);
  // static public System.Boolean op_Inequality(System.TimeZoneInfo/TransitionTime t1, System.TimeZoneInfo/TransitionTime t2)
  // Offset: 0x19ED154
  bool operator !=(const System::TimeZoneInfo::TransitionTime& t1, const System::TimeZoneInfo::TransitionTime& t2);
}
DEFINE_IL2CPP_ARG_TYPE(System::TimeZoneInfo::TransitionTime, "System", "TimeZoneInfo/TransitionTime");
