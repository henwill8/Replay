// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Xml.XmlCharType
  // [] Offset: FFFFFFFF
  struct XmlCharType/*, public System::ValueType*/ {
    public:
    // System.Byte[] charProperties
    // Size: 0x8
    // Offset: 0x0
    ::Array<uint8_t>* charProperties;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // Creating value type constructor for type: XmlCharType
    constexpr XmlCharType(::Array<uint8_t>* charProperties_ = {}) noexcept : charProperties{charProperties_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating conversion operator: operator ::Array<uint8_t>*
    constexpr operator ::Array<uint8_t>*() const noexcept {
      return charProperties;
    }
    // Get static field: static private System.Object s_Lock
    static ::Il2CppObject* _get_s_Lock();
    // Set static field: static private System.Object s_Lock
    static void _set_s_Lock(::Il2CppObject* value);
    // Get static field: static private System.Byte[] s_CharProperties
    static ::Array<uint8_t>* _get_s_CharProperties();
    // Set static field: static private System.Byte[] s_CharProperties
    static void _set_s_CharProperties(::Array<uint8_t>* value);
    // static private System.Object get_StaticLock()
    // Offset: 0x186DB1C
    static ::Il2CppObject* get_StaticLock();
    // static private System.Void InitInstance()
    // Offset: 0x186DBAC
    static void InitInstance();
    // static private System.Void SetProperties(System.String ranges, System.Byte value)
    // Offset: 0x186DD70
    static void SetProperties(::Il2CppString* ranges, uint8_t value);
    // private System.Void .ctor(System.Byte[] charProperties)
    // Offset: 0xE0E640
    // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    // ABORTED: conflicts with another method.  XmlCharType(::Array<uint8_t>* charProperties)
    // static public System.Xml.XmlCharType get_Instance()
    // Offset: 0x186BEB4
    static System::Xml::XmlCharType get_Instance();
    // public System.Boolean IsWhiteSpace(System.Char ch)
    // Offset: 0xE0E648
    bool IsWhiteSpace(::Il2CppChar ch);
    // public System.Boolean IsCharData(System.Char ch)
    // Offset: 0xE0E650
    bool IsCharData(::Il2CppChar ch);
    // public System.Boolean IsPubidChar(System.Char ch)
    // Offset: 0xE0E658
    bool IsPubidChar(::Il2CppChar ch);
    // System.Boolean IsTextChar(System.Char ch)
    // Offset: 0xE0E65C
    bool IsTextChar(::Il2CppChar ch);
    // static System.Boolean IsHighSurrogate(System.Int32 ch)
    // Offset: 0x186DFDC
    static bool IsHighSurrogate(int ch);
    // static System.Boolean IsLowSurrogate(System.Int32 ch)
    // Offset: 0x186E000
    static bool IsLowSurrogate(int ch);
    // static System.Boolean IsSurrogate(System.Int32 ch)
    // Offset: 0x186E010
    static bool IsSurrogate(int ch);
    // static System.Int32 CombineSurrogateChar(System.Int32 lowChar, System.Int32 highChar)
    // Offset: 0x1863E48
    static int CombineSurrogateChar(int lowChar, int highChar);
    // System.Boolean IsOnlyWhitespace(System.String str)
    // Offset: 0xE0E664
    bool IsOnlyWhitespace(::Il2CppString* str);
    // System.Int32 IsOnlyWhitespaceWithPos(System.String str)
    // Offset: 0xE0E684
    int IsOnlyWhitespaceWithPos(::Il2CppString* str);
    // System.Int32 IsOnlyCharData(System.String str)
    // Offset: 0xE0E68C
    int IsOnlyCharData(::Il2CppString* str);
    // System.Int32 IsPublicId(System.String str)
    // Offset: 0xE0E694
    int IsPublicId(::Il2CppString* str);
    // static private System.Boolean InRange(System.Int32 value, System.Int32 start, System.Int32 end)
    // Offset: 0x186DFEC
    static bool InRange(int value, int start, int end);
  }; // System.Xml.XmlCharType
  #pragma pack(pop)
  static check_size<sizeof(XmlCharType), 0 + sizeof(::Array<uint8_t>*)> __System_Xml_XmlCharTypeSizeCheck;
  static_assert(sizeof(XmlCharType) == 0x8);
}
DEFINE_IL2CPP_ARG_TYPE(System::Xml::XmlCharType, "System.Xml", "XmlCharType");
