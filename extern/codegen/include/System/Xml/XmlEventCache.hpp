// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Xml.XmlRawWriter
#include "System/Xml/XmlRawWriter.hpp"
// Including type: System.Xml.Xsl.Runtime.StringConcat
#include "System/Xml/Xsl/Runtime/StringConcat.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Xml
namespace System::Xml {
  // Skipping declaration: XmlEventType because it is already included!
  // Skipping declaration: XmlWriter because it is already included!
  // Forward declaring type: XmlStandalone
  struct XmlStandalone;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: System.Xml
namespace System::Xml {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: System.Xml.XmlEventCache
  // [] Offset: FFFFFFFF
  class XmlEventCache : public System::Xml::XmlRawWriter {
    public:
    // Nested type: System::Xml::XmlEventCache::XmlEventType
    struct XmlEventType;
    // Nested type: System::Xml::XmlEventCache::XmlEvent
    struct XmlEvent;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: System.Xml.XmlEventCache/XmlEventType
    // [] Offset: FFFFFFFF
    struct XmlEventType/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: XmlEventType
      constexpr XmlEventType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public System.Xml.XmlEventCache/XmlEventType Unknown
      static constexpr const int Unknown = 0;
      // Get static field: static public System.Xml.XmlEventCache/XmlEventType Unknown
      static System::Xml::XmlEventCache::XmlEventType _get_Unknown();
      // Set static field: static public System.Xml.XmlEventCache/XmlEventType Unknown
      static void _set_Unknown(System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/XmlEventType DocType
      static constexpr const int DocType = 1;
      // Get static field: static public System.Xml.XmlEventCache/XmlEventType DocType
      static System::Xml::XmlEventCache::XmlEventType _get_DocType();
      // Set static field: static public System.Xml.XmlEventCache/XmlEventType DocType
      static void _set_DocType(System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/XmlEventType StartElem
      static constexpr const int StartElem = 2;
      // Get static field: static public System.Xml.XmlEventCache/XmlEventType StartElem
      static System::Xml::XmlEventCache::XmlEventType _get_StartElem();
      // Set static field: static public System.Xml.XmlEventCache/XmlEventType StartElem
      static void _set_StartElem(System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/XmlEventType StartAttr
      static constexpr const int StartAttr = 3;
      // Get static field: static public System.Xml.XmlEventCache/XmlEventType StartAttr
      static System::Xml::XmlEventCache::XmlEventType _get_StartAttr();
      // Set static field: static public System.Xml.XmlEventCache/XmlEventType StartAttr
      static void _set_StartAttr(System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/XmlEventType EndAttr
      static constexpr const int EndAttr = 4;
      // Get static field: static public System.Xml.XmlEventCache/XmlEventType EndAttr
      static System::Xml::XmlEventCache::XmlEventType _get_EndAttr();
      // Set static field: static public System.Xml.XmlEventCache/XmlEventType EndAttr
      static void _set_EndAttr(System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/XmlEventType CData
      static constexpr const int CData = 5;
      // Get static field: static public System.Xml.XmlEventCache/XmlEventType CData
      static System::Xml::XmlEventCache::XmlEventType _get_CData();
      // Set static field: static public System.Xml.XmlEventCache/XmlEventType CData
      static void _set_CData(System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/XmlEventType Comment
      static constexpr const int Comment = 6;
      // Get static field: static public System.Xml.XmlEventCache/XmlEventType Comment
      static System::Xml::XmlEventCache::XmlEventType _get_Comment();
      // Set static field: static public System.Xml.XmlEventCache/XmlEventType Comment
      static void _set_Comment(System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/XmlEventType PI
      static constexpr const int PI = 7;
      // Get static field: static public System.Xml.XmlEventCache/XmlEventType PI
      static System::Xml::XmlEventCache::XmlEventType _get_PI();
      // Set static field: static public System.Xml.XmlEventCache/XmlEventType PI
      static void _set_PI(System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/XmlEventType Whitespace
      static constexpr const int Whitespace = 8;
      // Get static field: static public System.Xml.XmlEventCache/XmlEventType Whitespace
      static System::Xml::XmlEventCache::XmlEventType _get_Whitespace();
      // Set static field: static public System.Xml.XmlEventCache/XmlEventType Whitespace
      static void _set_Whitespace(System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/XmlEventType String
      static constexpr const int String = 9;
      // Get static field: static public System.Xml.XmlEventCache/XmlEventType String
      static System::Xml::XmlEventCache::XmlEventType _get_String();
      // Set static field: static public System.Xml.XmlEventCache/XmlEventType String
      static void _set_String(System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/XmlEventType Raw
      static constexpr const int Raw = 10;
      // Get static field: static public System.Xml.XmlEventCache/XmlEventType Raw
      static System::Xml::XmlEventCache::XmlEventType _get_Raw();
      // Set static field: static public System.Xml.XmlEventCache/XmlEventType Raw
      static void _set_Raw(System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/XmlEventType EntRef
      static constexpr const int EntRef = 11;
      // Get static field: static public System.Xml.XmlEventCache/XmlEventType EntRef
      static System::Xml::XmlEventCache::XmlEventType _get_EntRef();
      // Set static field: static public System.Xml.XmlEventCache/XmlEventType EntRef
      static void _set_EntRef(System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/XmlEventType CharEnt
      static constexpr const int CharEnt = 12;
      // Get static field: static public System.Xml.XmlEventCache/XmlEventType CharEnt
      static System::Xml::XmlEventCache::XmlEventType _get_CharEnt();
      // Set static field: static public System.Xml.XmlEventCache/XmlEventType CharEnt
      static void _set_CharEnt(System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/XmlEventType SurrCharEnt
      static constexpr const int SurrCharEnt = 13;
      // Get static field: static public System.Xml.XmlEventCache/XmlEventType SurrCharEnt
      static System::Xml::XmlEventCache::XmlEventType _get_SurrCharEnt();
      // Set static field: static public System.Xml.XmlEventCache/XmlEventType SurrCharEnt
      static void _set_SurrCharEnt(System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/XmlEventType Base64
      static constexpr const int Base64 = 14;
      // Get static field: static public System.Xml.XmlEventCache/XmlEventType Base64
      static System::Xml::XmlEventCache::XmlEventType _get_Base64();
      // Set static field: static public System.Xml.XmlEventCache/XmlEventType Base64
      static void _set_Base64(System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/XmlEventType BinHex
      static constexpr const int BinHex = 15;
      // Get static field: static public System.Xml.XmlEventCache/XmlEventType BinHex
      static System::Xml::XmlEventCache::XmlEventType _get_BinHex();
      // Set static field: static public System.Xml.XmlEventCache/XmlEventType BinHex
      static void _set_BinHex(System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/XmlEventType XmlDecl1
      static constexpr const int XmlDecl1 = 16;
      // Get static field: static public System.Xml.XmlEventCache/XmlEventType XmlDecl1
      static System::Xml::XmlEventCache::XmlEventType _get_XmlDecl1();
      // Set static field: static public System.Xml.XmlEventCache/XmlEventType XmlDecl1
      static void _set_XmlDecl1(System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/XmlEventType XmlDecl2
      static constexpr const int XmlDecl2 = 17;
      // Get static field: static public System.Xml.XmlEventCache/XmlEventType XmlDecl2
      static System::Xml::XmlEventCache::XmlEventType _get_XmlDecl2();
      // Set static field: static public System.Xml.XmlEventCache/XmlEventType XmlDecl2
      static void _set_XmlDecl2(System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/XmlEventType StartContent
      static constexpr const int StartContent = 18;
      // Get static field: static public System.Xml.XmlEventCache/XmlEventType StartContent
      static System::Xml::XmlEventCache::XmlEventType _get_StartContent();
      // Set static field: static public System.Xml.XmlEventCache/XmlEventType StartContent
      static void _set_StartContent(System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/XmlEventType EndElem
      static constexpr const int EndElem = 19;
      // Get static field: static public System.Xml.XmlEventCache/XmlEventType EndElem
      static System::Xml::XmlEventCache::XmlEventType _get_EndElem();
      // Set static field: static public System.Xml.XmlEventCache/XmlEventType EndElem
      static void _set_EndElem(System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/XmlEventType FullEndElem
      static constexpr const int FullEndElem = 20;
      // Get static field: static public System.Xml.XmlEventCache/XmlEventType FullEndElem
      static System::Xml::XmlEventCache::XmlEventType _get_FullEndElem();
      // Set static field: static public System.Xml.XmlEventCache/XmlEventType FullEndElem
      static void _set_FullEndElem(System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/XmlEventType Nmsp
      static constexpr const int Nmsp = 21;
      // Get static field: static public System.Xml.XmlEventCache/XmlEventType Nmsp
      static System::Xml::XmlEventCache::XmlEventType _get_Nmsp();
      // Set static field: static public System.Xml.XmlEventCache/XmlEventType Nmsp
      static void _set_Nmsp(System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/XmlEventType EndBase64
      static constexpr const int EndBase64 = 22;
      // Get static field: static public System.Xml.XmlEventCache/XmlEventType EndBase64
      static System::Xml::XmlEventCache::XmlEventType _get_EndBase64();
      // Set static field: static public System.Xml.XmlEventCache/XmlEventType EndBase64
      static void _set_EndBase64(System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/XmlEventType Close
      static constexpr const int Close = 23;
      // Get static field: static public System.Xml.XmlEventCache/XmlEventType Close
      static System::Xml::XmlEventCache::XmlEventType _get_Close();
      // Set static field: static public System.Xml.XmlEventCache/XmlEventType Close
      static void _set_Close(System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/XmlEventType Flush
      static constexpr const int Flush = 24;
      // Get static field: static public System.Xml.XmlEventCache/XmlEventType Flush
      static System::Xml::XmlEventCache::XmlEventType _get_Flush();
      // Set static field: static public System.Xml.XmlEventCache/XmlEventType Flush
      static void _set_Flush(System::Xml::XmlEventCache::XmlEventType value);
      // static field const value: static public System.Xml.XmlEventCache/XmlEventType Dispose
      static constexpr const int Dispose = 25;
      // Get static field: static public System.Xml.XmlEventCache/XmlEventType Dispose
      static System::Xml::XmlEventCache::XmlEventType _get_Dispose();
      // Set static field: static public System.Xml.XmlEventCache/XmlEventType Dispose
      static void _set_Dispose(System::Xml::XmlEventCache::XmlEventType value);
    }; // System.Xml.XmlEventCache/XmlEventType
    #pragma pack(pop)
    static check_size<sizeof(XmlEventCache::XmlEventType), 0 + sizeof(int)> __System_Xml_XmlEventCache_XmlEventTypeSizeCheck;
    static_assert(sizeof(XmlEventCache::XmlEventType) == 0x4);
    // Size: 0x28
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: System.Xml.XmlEventCache/XmlEvent
    // [] Offset: FFFFFFFF
    struct XmlEvent/*, public System::ValueType*/ {
      public:
      // private System.Xml.XmlEventCache/XmlEventType eventType
      // Size: 0x4
      // Offset: 0x0
      System::Xml::XmlEventCache::XmlEventType eventType;
      // Field size check
      static_assert(sizeof(System::Xml::XmlEventCache::XmlEventType) == 0x4);
      // Padding between fields: eventType and: s1
      char __padding0[0x4] = {};
      // private System.String s1
      // Size: 0x8
      // Offset: 0x8
      ::Il2CppString* s1;
      // Field size check
      static_assert(sizeof(::Il2CppString*) == 0x8);
      // private System.String s2
      // Size: 0x8
      // Offset: 0x10
      ::Il2CppString* s2;
      // Field size check
      static_assert(sizeof(::Il2CppString*) == 0x8);
      // private System.String s3
      // Size: 0x8
      // Offset: 0x18
      ::Il2CppString* s3;
      // Field size check
      static_assert(sizeof(::Il2CppString*) == 0x8);
      // private System.Object o
      // Size: 0x8
      // Offset: 0x20
      ::Il2CppObject* o;
      // Field size check
      static_assert(sizeof(::Il2CppObject*) == 0x8);
      // Creating value type constructor for type: XmlEvent
      constexpr XmlEvent(System::Xml::XmlEventCache::XmlEventType eventType_ = {}, ::Il2CppString* s1_ = {}, ::Il2CppString* s2_ = {}, ::Il2CppString* s3_ = {}, ::Il2CppObject* o_ = {}) noexcept : eventType{eventType_}, s1{s1_}, s2{s2_}, s3{s3_}, o{o_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
      // public System.Void InitEvent(System.Xml.XmlEventCache/XmlEventType eventType)
      // Offset: 0xE0E89C
      void InitEvent(System::Xml::XmlEventCache::XmlEventType eventType);
      // public System.Void InitEvent(System.Xml.XmlEventCache/XmlEventType eventType, System.String s1)
      // Offset: 0xE0E8A4
      void InitEvent(System::Xml::XmlEventCache::XmlEventType eventType, ::Il2CppString* s1);
      // public System.Void InitEvent(System.Xml.XmlEventCache/XmlEventType eventType, System.String s1, System.String s2)
      // Offset: 0xE0E8B4
      void InitEvent(System::Xml::XmlEventCache::XmlEventType eventType, ::Il2CppString* s1, ::Il2CppString* s2);
      // public System.Void InitEvent(System.Xml.XmlEventCache/XmlEventType eventType, System.String s1, System.String s2, System.String s3)
      // Offset: 0xE0E8F0
      void InitEvent(System::Xml::XmlEventCache::XmlEventType eventType, ::Il2CppString* s1, ::Il2CppString* s2, ::Il2CppString* s3);
      // public System.Void InitEvent(System.Xml.XmlEventCache/XmlEventType eventType, System.String s1, System.String s2, System.String s3, System.Object o)
      // Offset: 0xE0E8F8
      void InitEvent(System::Xml::XmlEventCache::XmlEventType eventType, ::Il2CppString* s1, ::Il2CppString* s2, ::Il2CppString* s3, ::Il2CppObject* o);
      // public System.Void InitEvent(System.Xml.XmlEventCache/XmlEventType eventType, System.Object o)
      // Offset: 0xE0E900
      void InitEvent(System::Xml::XmlEventCache::XmlEventType eventType, ::Il2CppObject* o);
      // public System.Xml.XmlEventCache/XmlEventType get_EventType()
      // Offset: 0xE0E910
      System::Xml::XmlEventCache::XmlEventType get_EventType();
      // public System.String get_String1()
      // Offset: 0xE0E918
      ::Il2CppString* get_String1();
      // public System.String get_String2()
      // Offset: 0xE0E920
      ::Il2CppString* get_String2();
      // public System.String get_String3()
      // Offset: 0xE0E928
      ::Il2CppString* get_String3();
      // public System.Object get_Object()
      // Offset: 0xE0E930
      ::Il2CppObject* get_Object();
    }; // System.Xml.XmlEventCache/XmlEvent
    #pragma pack(pop)
    static check_size<sizeof(XmlEventCache::XmlEvent), 32 + sizeof(::Il2CppObject*)> __System_Xml_XmlEventCache_XmlEventSizeCheck;
    static_assert(sizeof(XmlEventCache::XmlEvent) == 0x28);
    // private System.Collections.Generic.List`1<System.Xml.XmlEventCache/XmlEvent[]> pages
    // Size: 0x8
    // Offset: 0x20
    System::Collections::Generic::List_1<::Array<System::Xml::XmlEventCache::XmlEvent>*>* pages;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<::Array<System::Xml::XmlEventCache::XmlEvent>*>*) == 0x8);
    // private System.Xml.XmlEventCache/XmlEvent[] pageCurr
    // Size: 0x8
    // Offset: 0x28
    ::Array<System::Xml::XmlEventCache::XmlEvent>* pageCurr;
    // Field size check
    static_assert(sizeof(::Array<System::Xml::XmlEventCache::XmlEvent>*) == 0x8);
    // private System.Int32 pageSize
    // Size: 0x4
    // Offset: 0x30
    int pageSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean hasRootNode
    // Size: 0x1
    // Offset: 0x34
    bool hasRootNode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasRootNode and: singleText
    char __padding3[0x3] = {};
    // private System.Xml.Xsl.Runtime.StringConcat singleText
    // Size: 0x34
    // Offset: 0x38
    System::Xml::Xsl::Runtime::StringConcat singleText;
    // Field size check
    static_assert(sizeof(System::Xml::Xsl::Runtime::StringConcat) == 0x34);
    // Padding between fields: singleText and: baseUri
    char __padding4[0x4] = {};
    // private System.String baseUri
    // Size: 0x8
    // Offset: 0x70
    ::Il2CppString* baseUri;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // Creating value type constructor for type: XmlEventCache
    XmlEventCache(System::Collections::Generic::List_1<::Array<System::Xml::XmlEventCache::XmlEvent>*>* pages_ = {}, ::Array<System::Xml::XmlEventCache::XmlEvent>* pageCurr_ = {}, int pageSize_ = {}, bool hasRootNode_ = {}, System::Xml::Xsl::Runtime::StringConcat singleText_ = {}, ::Il2CppString* baseUri_ = {}) noexcept : pages{pages_}, pageCurr{pageCurr_}, pageSize{pageSize_}, hasRootNode{hasRootNode_}, singleText{singleText_}, baseUri{baseUri_} {}
    // public System.Void .ctor(System.String baseUri, System.Boolean hasRootNode)
    // Offset: 0x186C840
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static XmlEventCache* New_ctor(::Il2CppString* baseUri, bool hasRootNode) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Xml::XmlEventCache::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<XmlEventCache*, creationType>(baseUri, hasRootNode)));
    }
    // public System.Void EndEvents()
    // Offset: 0x186D47C
    void EndEvents();
    // public System.Void EventsToWriter(System.Xml.XmlWriter writer)
    // Offset: 0x186D490
    void EventsToWriter(System::Xml::XmlWriter* writer);
    // private System.Void AddEvent(System.Xml.XmlEventCache/XmlEventType eventType)
    // Offset: 0x1871D2C
    void AddEvent(System::Xml::XmlEventCache::XmlEventType eventType);
    // private System.Void AddEvent(System.Xml.XmlEventCache/XmlEventType eventType, System.String s1)
    // Offset: 0x1871EDC
    void AddEvent(System::Xml::XmlEventCache::XmlEventType eventType, ::Il2CppString* s1);
    // private System.Void AddEvent(System.Xml.XmlEventCache/XmlEventType eventType, System.String s1, System.String s2)
    // Offset: 0x1871F60
    void AddEvent(System::Xml::XmlEventCache::XmlEventType eventType, ::Il2CppString* s1, ::Il2CppString* s2);
    // private System.Void AddEvent(System.Xml.XmlEventCache/XmlEventType eventType, System.String s1, System.String s2, System.String s3)
    // Offset: 0x1871E34
    void AddEvent(System::Xml::XmlEventCache::XmlEventType eventType, ::Il2CppString* s1, ::Il2CppString* s2, ::Il2CppString* s3);
    // private System.Void AddEvent(System.Xml.XmlEventCache/XmlEventType eventType, System.String s1, System.String s2, System.String s3, System.Object o)
    // Offset: 0x1871D98
    void AddEvent(System::Xml::XmlEventCache::XmlEventType eventType, ::Il2CppString* s1, ::Il2CppString* s2, ::Il2CppString* s3, ::Il2CppObject* o);
    // private System.Void AddEvent(System.Xml.XmlEventCache/XmlEventType eventType, System.Object o)
    // Offset: 0x1872114
    void AddEvent(System::Xml::XmlEventCache::XmlEventType eventType, ::Il2CppObject* o);
    // private System.Int32 NewEvent()
    // Offset: 0x18724AC
    int NewEvent();
    // static private System.Byte[] ToBytes(System.Byte[] buffer, System.Int32 index, System.Int32 count)
    // Offset: 0x1872250
    static ::Array<uint8_t>* ToBytes(::Array<uint8_t>* buffer, int index, int count);
    // public override System.Void WriteDocType(System.String name, System.String pubid, System.String sysid, System.String subset)
    // Offset: 0x1871D80
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteDocType(System.String name, System.String pubid, System.String sysid, System.String subset)
    void WriteDocType(::Il2CppString* name, ::Il2CppString* pubid, ::Il2CppString* sysid, ::Il2CppString* subset);
    // public override System.Void WriteStartElement(System.String prefix, System.String localName, System.String ns)
    // Offset: 0x1871E20
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteStartElement(System.String prefix, System.String localName, System.String ns)
    void WriteStartElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns);
    // public override System.Void WriteStartAttribute(System.String prefix, System.String localName, System.String ns)
    // Offset: 0x1871EB4
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteStartAttribute(System.String prefix, System.String localName, System.String ns)
    void WriteStartAttribute(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns);
    // public override System.Void WriteEndAttribute()
    // Offset: 0x1871EC8
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteEndAttribute()
    void WriteEndAttribute();
    // public override System.Void WriteCData(System.String text)
    // Offset: 0x1871ED0
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteCData(System.String text)
    void WriteCData(::Il2CppString* text);
    // public override System.Void WriteComment(System.String text)
    // Offset: 0x1871F44
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteComment(System.String text)
    void WriteComment(::Il2CppString* text);
    // public override System.Void WriteProcessingInstruction(System.String name, System.String text)
    // Offset: 0x1871F50
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteProcessingInstruction(System.String name, System.String text)
    void WriteProcessingInstruction(::Il2CppString* name, ::Il2CppString* text);
    // public override System.Void WriteWhitespace(System.String ws)
    // Offset: 0x1871FE0
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteWhitespace(System.String ws)
    void WriteWhitespace(::Il2CppString* ws);
    // public override System.Void WriteString(System.String text)
    // Offset: 0x1871FEC
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteString(System.String text)
    void WriteString(::Il2CppString* text);
    // public override System.Void WriteChars(System.Char[] buffer, System.Int32 index, System.Int32 count)
    // Offset: 0x1872010
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteChars(System.Char[] buffer, System.Int32 index, System.Int32 count)
    void WriteChars(::Array<::Il2CppChar>* buffer, int index, int count);
    // public override System.Void WriteRaw(System.Char[] buffer, System.Int32 index, System.Int32 count)
    // Offset: 0x187204C
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteRaw(System.Char[] buffer, System.Int32 index, System.Int32 count)
    void WriteRaw(::Array<::Il2CppChar>* buffer, int index, int count);
    // public override System.Void WriteRaw(System.String data)
    // Offset: 0x1872088
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteRaw(System.String data)
    void WriteRaw(::Il2CppString* data);
    // public override System.Void WriteEntityRef(System.String name)
    // Offset: 0x1872094
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteEntityRef(System.String name)
    void WriteEntityRef(::Il2CppString* name);
    // public override System.Void WriteCharEntity(System.Char ch)
    // Offset: 0x18720A0
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteCharEntity(System.Char ch)
    void WriteCharEntity(::Il2CppChar ch);
    // public override System.Void WriteSurrogateCharEntity(System.Char lowChar, System.Char highChar)
    // Offset: 0x187217C
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteSurrogateCharEntity(System.Char lowChar, System.Char highChar)
    void WriteSurrogateCharEntity(::Il2CppChar lowChar, ::Il2CppChar highChar);
    // public override System.Void WriteBase64(System.Byte[] buffer, System.Int32 index, System.Int32 count)
    // Offset: 0x1872218
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteBase64(System.Byte[] buffer, System.Int32 index, System.Int32 count)
    void WriteBase64(::Array<uint8_t>* buffer, int index, int count);
    // public override System.Void WriteBinHex(System.Byte[] buffer, System.Int32 index, System.Int32 count)
    // Offset: 0x187230C
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::WriteBinHex(System.Byte[] buffer, System.Int32 index, System.Int32 count)
    void WriteBinHex(::Array<uint8_t>* buffer, int index, int count);
    // public override System.Void Close()
    // Offset: 0x1872344
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::Close()
    void Close();
    // public override System.Void Flush()
    // Offset: 0x187234C
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::Flush()
    void Flush();
    // public override System.Void WriteValue(System.String value)
    // Offset: 0x1872354
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteValue(System.String value)
    void WriteValue(::Il2CppString* value);
    // protected override System.Void Dispose(System.Boolean disposing)
    // Offset: 0x1872364
    // Implemented from: System.Xml.XmlWriter
    // Base method: System.Void XmlWriter::Dispose(System.Boolean disposing)
    void Dispose(bool disposing);
    // override System.Void WriteXmlDeclaration(System.Xml.XmlStandalone standalone)
    // Offset: 0x18723E4
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteXmlDeclaration(System.Xml.XmlStandalone standalone)
    void WriteXmlDeclaration(System::Xml::XmlStandalone standalone);
    // override System.Void WriteXmlDeclaration(System.String xmldecl)
    // Offset: 0x1872458
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteXmlDeclaration(System.String xmldecl)
    void WriteXmlDeclaration(::Il2CppString* xmldecl);
    // override System.Void StartElementContent()
    // Offset: 0x1872464
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::StartElementContent()
    void StartElementContent();
    // override System.Void WriteEndElement(System.String prefix, System.String localName, System.String ns)
    // Offset: 0x187246C
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteEndElement(System.String prefix, System.String localName, System.String ns)
    void WriteEndElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns);
    // override System.Void WriteFullEndElement(System.String prefix, System.String localName, System.String ns)
    // Offset: 0x1872480
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteFullEndElement(System.String prefix, System.String localName, System.String ns)
    void WriteFullEndElement(::Il2CppString* prefix, ::Il2CppString* localName, ::Il2CppString* ns);
    // override System.Void WriteNamespaceDeclaration(System.String prefix, System.String ns)
    // Offset: 0x1872494
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteNamespaceDeclaration(System.String prefix, System.String ns)
    void WriteNamespaceDeclaration(::Il2CppString* prefix, ::Il2CppString* ns);
    // override System.Void WriteEndBase64()
    // Offset: 0x18724A4
    // Implemented from: System.Xml.XmlRawWriter
    // Base method: System.Void XmlRawWriter::WriteEndBase64()
    void WriteEndBase64();
  }; // System.Xml.XmlEventCache
  #pragma pack(pop)
  static check_size<sizeof(XmlEventCache), 112 + sizeof(::Il2CppString*)> __System_Xml_XmlEventCacheSizeCheck;
  static_assert(sizeof(XmlEventCache) == 0x78);
}
DEFINE_IL2CPP_ARG_TYPE(System::Xml::XmlEventCache*, "System.Xml", "XmlEventCache");
DEFINE_IL2CPP_ARG_TYPE(System::Xml::XmlEventCache::XmlEventType, "System.Xml", "XmlEventCache/XmlEventType");
DEFINE_IL2CPP_ARG_TYPE(System::Xml::XmlEventCache::XmlEvent, "System.Xml", "XmlEventCache/XmlEvent");
