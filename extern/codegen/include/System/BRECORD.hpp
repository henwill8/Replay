// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
// Type namespace: System
namespace System {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.BRECORD
  // [] Offset: FFFFFFFF
  struct BRECORD/*, public System::ValueType*/ {
    public:
    // private System.IntPtr pvRecord
    // Size: 0x8
    // Offset: 0x0
    System::IntPtr pvRecord;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // private System.IntPtr pRecInfo
    // Size: 0x8
    // Offset: 0x8
    System::IntPtr pRecInfo;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // Creating value type constructor for type: BRECORD
    constexpr BRECORD(System::IntPtr pvRecord_ = {}, System::IntPtr pRecInfo_ = {}) noexcept : pvRecord{pvRecord_}, pRecInfo{pRecInfo_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
  }; // System.BRECORD
  #pragma pack(pop)
  static check_size<sizeof(BRECORD), 8 + sizeof(System::IntPtr)> __System_BRECORDSizeCheck;
  static_assert(sizeof(BRECORD) == 0x10);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::BRECORD, "System", "BRECORD");
