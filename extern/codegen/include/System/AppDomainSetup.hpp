// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: System
namespace System {
  // Size: 0xB0
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.AppDomainSetup
  // [] Offset: FFFFFFFF
  // [ComVisibleAttribute] Offset: CA87DC
  // [ClassInterfaceAttribute] Offset: CA87DC
  class AppDomainSetup : public ::Il2CppObject {
    public:
    // private System.String application_base
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* application_base;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String application_name
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* application_name;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String cache_path
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppString* cache_path;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String configuration_file
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppString* configuration_file;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String dynamic_base
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppString* dynamic_base;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String license_file
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppString* license_file;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String private_bin_path
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppString* private_bin_path;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String private_bin_path_probe
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppString* private_bin_path_probe;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String shadow_copy_directories
    // Size: 0x8
    // Offset: 0x50
    ::Il2CppString* shadow_copy_directories;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String shadow_copy_files
    // Size: 0x8
    // Offset: 0x58
    ::Il2CppString* shadow_copy_files;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Boolean publisher_policy
    // Size: 0x1
    // Offset: 0x60
    bool publisher_policy;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean path_changed
    // Size: 0x1
    // Offset: 0x61
    bool path_changed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: path_changed and: loader_optimization
    char __padding11[0x2] = {};
    // private System.Int32 loader_optimization
    // Size: 0x4
    // Offset: 0x64
    int loader_optimization;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean disallow_binding_redirects
    // Size: 0x1
    // Offset: 0x68
    bool disallow_binding_redirects;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean disallow_code_downloads
    // Size: 0x1
    // Offset: 0x69
    bool disallow_code_downloads;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disallow_code_downloads and: activationArguments
    char __padding14[0x6] = {};
    // private System.Object _activationArguments
    // Size: 0x8
    // Offset: 0x70
    ::Il2CppObject* activationArguments;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Object domain_initializer
    // Size: 0x8
    // Offset: 0x78
    ::Il2CppObject* domain_initializer;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Object application_trust
    // Size: 0x8
    // Offset: 0x80
    ::Il2CppObject* application_trust;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.String[] domain_initializer_args
    // Size: 0x8
    // Offset: 0x88
    ::Array<::Il2CppString*>* domain_initializer_args;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // private System.Boolean disallow_appbase_probe
    // Size: 0x1
    // Offset: 0x90
    bool disallow_appbase_probe;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disallow_appbase_probe and: configuration_bytes
    char __padding19[0x7] = {};
    // private System.Byte[] configuration_bytes
    // Size: 0x8
    // Offset: 0x98
    ::Array<uint8_t>* configuration_bytes;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Byte[] serialized_non_primitives
    // Size: 0x8
    // Offset: 0xA0
    ::Array<uint8_t>* serialized_non_primitives;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xCAEB40
    // private System.String <TargetFrameworkName>k__BackingField
    // Size: 0x8
    // Offset: 0xA8
    ::Il2CppString* TargetFrameworkName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // Creating value type constructor for type: AppDomainSetup
    AppDomainSetup(::Il2CppString* application_base_ = {}, ::Il2CppString* application_name_ = {}, ::Il2CppString* cache_path_ = {}, ::Il2CppString* configuration_file_ = {}, ::Il2CppString* dynamic_base_ = {}, ::Il2CppString* license_file_ = {}, ::Il2CppString* private_bin_path_ = {}, ::Il2CppString* private_bin_path_probe_ = {}, ::Il2CppString* shadow_copy_directories_ = {}, ::Il2CppString* shadow_copy_files_ = {}, bool publisher_policy_ = {}, bool path_changed_ = {}, int loader_optimization_ = {}, bool disallow_binding_redirects_ = {}, bool disallow_code_downloads_ = {}, ::Il2CppObject* activationArguments_ = {}, ::Il2CppObject* domain_initializer_ = {}, ::Il2CppObject* application_trust_ = {}, ::Array<::Il2CppString*>* domain_initializer_args_ = {}, bool disallow_appbase_probe_ = {}, ::Array<uint8_t>* configuration_bytes_ = {}, ::Array<uint8_t>* serialized_non_primitives_ = {}, ::Il2CppString* TargetFrameworkName_ = {}) noexcept : application_base{application_base_}, application_name{application_name_}, cache_path{cache_path_}, configuration_file{configuration_file_}, dynamic_base{dynamic_base_}, license_file{license_file_}, private_bin_path{private_bin_path_}, private_bin_path_probe{private_bin_path_probe_}, shadow_copy_directories{shadow_copy_directories_}, shadow_copy_files{shadow_copy_files_}, publisher_policy{publisher_policy_}, path_changed{path_changed_}, loader_optimization{loader_optimization_}, disallow_binding_redirects{disallow_binding_redirects_}, disallow_code_downloads{disallow_code_downloads_}, activationArguments{activationArguments_}, domain_initializer{domain_initializer_}, application_trust{application_trust_}, domain_initializer_args{domain_initializer_args_}, disallow_appbase_probe{disallow_appbase_probe_}, configuration_bytes{configuration_bytes_}, serialized_non_primitives{serialized_non_primitives_}, TargetFrameworkName{TargetFrameworkName_} {}
    // public System.Void .ctor()
    // Offset: 0x167ADA0
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AppDomainSetup* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::AppDomainSetup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AppDomainSetup*, creationType>()));
    }
  }; // System.AppDomainSetup
  #pragma pack(pop)
  static check_size<sizeof(AppDomainSetup), 168 + sizeof(::Il2CppString*)> __System_AppDomainSetupSizeCheck;
  static_assert(sizeof(AppDomainSetup) == 0xB0);
}
DEFINE_IL2CPP_ARG_TYPE(System::AppDomainSetup*, "System", "AppDomainSetup");
