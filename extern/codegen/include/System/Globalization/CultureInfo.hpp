// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
// Including type: System.IFormatProvider
#include "System/IFormatProvider.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: NumberFormatInfo
  class NumberFormatInfo;
  // Forward declaring type: DateTimeFormatInfo
  class DateTimeFormatInfo;
  // Forward declaring type: TextInfo
  class TextInfo;
  // Forward declaring type: CompareInfo
  class CompareInfo;
  // Forward declaring type: Calendar
  class Calendar;
  // Forward declaring type: CultureData
  class CultureData;
  // Forward declaring type: CultureTypes
  struct CultureTypes;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
  // Forward declaring type: Exception
  class Exception;
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: System.Globalization
namespace System::Globalization {
  // Autogenerated type: System.Globalization.CultureInfo
  class CultureInfo : public ::Il2CppObject/*, public System::ICloneable, public System::IFormatProvider*/ {
    public:
    // Nested type: System::Globalization::CultureInfo::Data
    struct Data;
    // private System.Boolean m_isReadOnly
    // Offset: 0x10
    bool m_isReadOnly;
    // private System.Int32 cultureID
    // Offset: 0x14
    int cultureID;
    // private System.Int32 parent_lcid
    // Offset: 0x18
    int parent_lcid;
    // private System.Int32 datetime_index
    // Offset: 0x1C
    int datetime_index;
    // private System.Int32 number_index
    // Offset: 0x20
    int number_index;
    // private System.Int32 default_calendar_type
    // Offset: 0x24
    int default_calendar_type;
    // private System.Boolean m_useUserOverride
    // Offset: 0x28
    bool m_useUserOverride;
    // System.Globalization.NumberFormatInfo numInfo
    // Offset: 0x30
    System::Globalization::NumberFormatInfo* numInfo;
    // System.Globalization.DateTimeFormatInfo dateTimeInfo
    // Offset: 0x38
    System::Globalization::DateTimeFormatInfo* dateTimeInfo;
    // private System.Globalization.TextInfo textInfo
    // Offset: 0x40
    System::Globalization::TextInfo* textInfo;
    // System.String m_name
    // Offset: 0x48
    ::Il2CppString* m_name;
    // private System.String englishname
    // Offset: 0x50
    ::Il2CppString* englishname;
    // private System.String nativename
    // Offset: 0x58
    ::Il2CppString* nativename;
    // private System.String iso3lang
    // Offset: 0x60
    ::Il2CppString* iso3lang;
    // private System.String iso2lang
    // Offset: 0x68
    ::Il2CppString* iso2lang;
    // private System.String win3lang
    // Offset: 0x70
    ::Il2CppString* win3lang;
    // private System.String territory
    // Offset: 0x78
    ::Il2CppString* territory;
    // private System.String[] native_calendar_names
    // Offset: 0x80
    ::Array<::Il2CppString*>* native_calendar_names;
    // private System.Globalization.CompareInfo compareInfo
    // Offset: 0x88
    System::Globalization::CompareInfo* compareInfo;
    // private readonly System.Void* textinfo_data
    // Offset: 0x90
    void* textinfo_data;
    // private System.Int32 m_dataItem
    // Offset: 0x98
    int m_dataItem;
    // private System.Globalization.Calendar calendar
    // Offset: 0xA0
    System::Globalization::Calendar* calendar;
    // private System.Globalization.CultureInfo parent_culture
    // Offset: 0xA8
    System::Globalization::CultureInfo* parent_culture;
    // private System.Boolean constructed
    // Offset: 0xB0
    bool constructed;
    // System.Byte[] cached_serialized_form
    // Offset: 0xB8
    ::Array<uint8_t>* cached_serialized_form;
    // System.Globalization.CultureData m_cultureData
    // Offset: 0xC0
    System::Globalization::CultureData* m_cultureData;
    // System.Boolean m_isInherited
    // Offset: 0xC8
    bool m_isInherited;
    // Creating interface conversion operator: operator System::ICloneable
    operator System::ICloneable() noexcept {
      return *reinterpret_cast<System::ICloneable*>(this);
    }
    // Creating interface conversion operator: operator System::IFormatProvider
    operator System::IFormatProvider() noexcept {
      return *reinterpret_cast<System::IFormatProvider*>(this);
    }
    // Get static field: static private System.Globalization.CultureInfo invariant_culture_info
    static System::Globalization::CultureInfo* _get_invariant_culture_info();
    // Set static field: static private System.Globalization.CultureInfo invariant_culture_info
    static void _set_invariant_culture_info(System::Globalization::CultureInfo* value);
    // Get static field: static private System.Object shared_table_lock
    static ::Il2CppObject* _get_shared_table_lock();
    // Set static field: static private System.Object shared_table_lock
    static void _set_shared_table_lock(::Il2CppObject* value);
    // Get static field: static private System.Globalization.CultureInfo default_current_culture
    static System::Globalization::CultureInfo* _get_default_current_culture();
    // Set static field: static private System.Globalization.CultureInfo default_current_culture
    static void _set_default_current_culture(System::Globalization::CultureInfo* value);
    // static field const value: static System.Int32 InvariantCultureId
    static constexpr const int InvariantCultureId = 127;
    // Get static field: static System.Int32 InvariantCultureId
    static int _get_InvariantCultureId();
    // Set static field: static System.Int32 InvariantCultureId
    static void _set_InvariantCultureId(int value);
    // static field const value: static private System.Int32 CalendarTypeBits
    static constexpr const int CalendarTypeBits = 8;
    // Get static field: static private System.Int32 CalendarTypeBits
    static int _get_CalendarTypeBits();
    // Set static field: static private System.Int32 CalendarTypeBits
    static void _set_CalendarTypeBits(int value);
    // static field const value: static private System.String MSG_READONLY
    static constexpr const char* MSG_READONLY = "This instance is read only";
    // Get static field: static private System.String MSG_READONLY
    static ::Il2CppString* _get_MSG_READONLY();
    // Set static field: static private System.String MSG_READONLY
    static void _set_MSG_READONLY(::Il2CppString* value);
    // Get static field: static private System.Globalization.CultureInfo s_DefaultThreadCurrentUICulture
    static System::Globalization::CultureInfo* _get_s_DefaultThreadCurrentUICulture();
    // Set static field: static private System.Globalization.CultureInfo s_DefaultThreadCurrentUICulture
    static void _set_s_DefaultThreadCurrentUICulture(System::Globalization::CultureInfo* value);
    // Get static field: static private System.Globalization.CultureInfo s_DefaultThreadCurrentCulture
    static System::Globalization::CultureInfo* _get_s_DefaultThreadCurrentCulture();
    // Set static field: static private System.Globalization.CultureInfo s_DefaultThreadCurrentCulture
    static void _set_s_DefaultThreadCurrentCulture(System::Globalization::CultureInfo* value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.Int32,System.Globalization.CultureInfo> shared_by_number
    static System::Collections::Generic::Dictionary_2<int, System::Globalization::CultureInfo*>* _get_shared_by_number();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.Int32,System.Globalization.CultureInfo> shared_by_number
    static void _set_shared_by_number(System::Collections::Generic::Dictionary_2<int, System::Globalization::CultureInfo*>* value);
    // Get static field: static private System.Collections.Generic.Dictionary`2<System.String,System.Globalization.CultureInfo> shared_by_name
    static System::Collections::Generic::Dictionary_2<::Il2CppString*, System::Globalization::CultureInfo*>* _get_shared_by_name();
    // Set static field: static private System.Collections.Generic.Dictionary`2<System.String,System.Globalization.CultureInfo> shared_by_name
    static void _set_shared_by_name(System::Collections::Generic::Dictionary_2<::Il2CppString*, System::Globalization::CultureInfo*>* value);
    // Get static field: static readonly System.Boolean IsTaiwanSku
    static bool _get_IsTaiwanSku();
    // Set static field: static readonly System.Boolean IsTaiwanSku
    static void _set_IsTaiwanSku(bool value);
    // static public System.Globalization.CultureInfo get_InvariantCulture()
    // Offset: 0x1616438
    static System::Globalization::CultureInfo* get_InvariantCulture();
    // static public System.Globalization.CultureInfo get_CurrentCulture()
    // Offset: 0x16164A8
    static System::Globalization::CultureInfo* get_CurrentCulture();
    // static public System.Globalization.CultureInfo get_CurrentUICulture()
    // Offset: 0x16164CC
    static System::Globalization::CultureInfo* get_CurrentUICulture();
    // static System.Globalization.CultureInfo ConstructCurrentCulture()
    // Offset: 0x16164F0
    static System::Globalization::CultureInfo* ConstructCurrentCulture();
    // static System.Globalization.CultureInfo ConstructCurrentUICulture()
    // Offset: 0x1616948
    static System::Globalization::CultureInfo* ConstructCurrentUICulture();
    // System.String get_Territory()
    // Offset: 0x16169A4
    ::Il2CppString* get_Territory();
    // public System.Int32 get_LCID()
    // Offset: 0x16169AC
    int get_LCID();
    // public System.String get_Name()
    // Offset: 0x16169B4
    ::Il2CppString* get_Name();
    // public System.Globalization.Calendar get_Calendar()
    // Offset: 0x16169BC
    System::Globalization::Calendar* get_Calendar();
    // public System.Globalization.CultureInfo get_Parent()
    // Offset: 0x1616C80
    System::Globalization::CultureInfo* get_Parent();
    // public System.Globalization.TextInfo get_TextInfo()
    // Offset: 0x1616F00
    System::Globalization::TextInfo* get_TextInfo();
    // static public System.Globalization.CultureInfo[] GetCultures(System.Globalization.CultureTypes types)
    // Offset: 0x161743C
    static ::Array<System::Globalization::CultureInfo*>* GetCultures(System::Globalization::CultureTypes types);
    // private System.Globalization.CultureInfo/Data GetTextInfoData()
    // Offset: 0x16176C0
    System::Globalization::CultureInfo::Data GetTextInfoData();
    // public System.Globalization.CompareInfo get_CompareInfo()
    // Offset: 0x1617788
    System::Globalization::CompareInfo* get_CompareInfo();
    // public System.Boolean get_IsNeutralCulture()
    // Offset: 0x16178C4
    bool get_IsNeutralCulture();
    // private System.Void CheckNeutral()
    // Offset: 0x1617918
    void CheckNeutral();
    // public System.Globalization.NumberFormatInfo get_NumberFormat()
    // Offset: 0x161791C
    System::Globalization::NumberFormatInfo* get_NumberFormat();
    // public System.Void set_NumberFormat(System.Globalization.NumberFormatInfo value)
    // Offset: 0x1617F2C
    void set_NumberFormat(System::Globalization::NumberFormatInfo* value);
    // public System.Globalization.DateTimeFormatInfo get_DateTimeFormat()
    // Offset: 0x1618018
    System::Globalization::DateTimeFormatInfo* get_DateTimeFormat();
    // public System.Void set_DateTimeFormat(System.Globalization.DateTimeFormatInfo value)
    // Offset: 0x161816C
    void set_DateTimeFormat(System::Globalization::DateTimeFormatInfo* value);
    // public System.String get_EnglishName()
    // Offset: 0x1618258
    ::Il2CppString* get_EnglishName();
    // public System.Boolean get_IsReadOnly()
    // Offset: 0x1618294
    bool get_IsReadOnly();
    // private System.Void Construct()
    // Offset: 0x1616A64
    void Construct();
    // private System.Boolean construct_internal_locale_from_lcid(System.Int32 lcid)
    // Offset: 0x16183A4
    bool construct_internal_locale_from_lcid(int lcid);
    // private System.Boolean construct_internal_locale_from_name(System.String name)
    // Offset: 0x16183A8
    bool construct_internal_locale_from_name(::Il2CppString* name);
    // static private System.String get_current_locale_name()
    // Offset: 0x16166A0
    static ::Il2CppString* get_current_locale_name();
    // static private System.Globalization.CultureInfo[] internal_get_cultures(System.Boolean neutral, System.Boolean specific, System.Boolean installed)
    // Offset: 0x16176B0
    static ::Array<System::Globalization::CultureInfo*>* internal_get_cultures(bool neutral, bool specific, bool installed);
    // private System.Void ConstructInvariant(System.Boolean read_only)
    // Offset: 0x16183AC
    void ConstructInvariant(bool read_only);
    // private System.Globalization.TextInfo CreateTextInfo(System.Boolean readOnly)
    // Offset: 0x1617008
    System::Globalization::TextInfo* CreateTextInfo(bool readOnly);
    // public System.Void .ctor(System.Int32 culture)
    // Offset: 0x1616EF4
    static CultureInfo* New_ctor(int culture);
    // public System.Void .ctor(System.Int32 culture, System.Boolean useUserOverride)
    // Offset: 0x16185E0
    static CultureInfo* New_ctor(int culture, bool useUserOverride);
    // private System.Void .ctor(System.Int32 culture, System.Boolean useUserOverride, System.Boolean read_only)
    // Offset: 0x16185EC
    static CultureInfo* New_ctor(int culture, bool useUserOverride, bool read_only);
    // public System.Void .ctor(System.String name)
    // Offset: 0x1616EE8
    static CultureInfo* New_ctor(::Il2CppString* name);
    // public System.Void .ctor(System.String name, System.Boolean useUserOverride)
    // Offset: 0x1618888
    static CultureInfo* New_ctor(::Il2CppString* name, bool useUserOverride);
    // private System.Void .ctor(System.String name, System.Boolean useUserOverride, System.Boolean read_only)
    // Offset: 0x1618894
    static CultureInfo* New_ctor(::Il2CppString* name, bool useUserOverride, bool read_only);
    // static private System.Void insert_into_shared_tables(System.Globalization.CultureInfo c)
    // Offset: 0x1618BB8
    static void insert_into_shared_tables(System::Globalization::CultureInfo* c);
    // static public System.Globalization.CultureInfo GetCultureInfo(System.Int32 culture)
    // Offset: 0x1618D24
    static System::Globalization::CultureInfo* GetCultureInfo(int culture);
    // static public System.Globalization.CultureInfo GetCultureInfo(System.String name)
    // Offset: 0x1618F58
    static System::Globalization::CultureInfo* GetCultureInfo(::Il2CppString* name);
    // static System.Globalization.CultureInfo CreateCulture(System.String name, System.Boolean reference)
    // Offset: 0x161917C
    static System::Globalization::CultureInfo* CreateCulture(::Il2CppString* name, bool reference);
    // static public System.Globalization.CultureInfo CreateSpecificCulture(System.String name)
    // Offset: 0x16166A4
    static System::Globalization::CultureInfo* CreateSpecificCulture(::Il2CppString* name);
    // static private System.Globalization.CultureInfo CreateSpecificCultureFromNeutral(System.String name)
    // Offset: 0x1619200
    static System::Globalization::CultureInfo* CreateSpecificCultureFromNeutral(::Il2CppString* name);
    // System.Int32 get_CalendarType()
    // Offset: 0x16176D8
    int get_CalendarType();
    // static private System.Globalization.Calendar CreateCalendar(System.Int32 calendarType)
    // Offset: 0x1616A90
    static System::Globalization::Calendar* CreateCalendar(int calendarType);
    // static private System.Exception CreateNotFoundException(System.String name)
    // Offset: 0x1618AF0
    static System::Exception* CreateNotFoundException(::Il2CppString* name);
    // static public System.Globalization.CultureInfo get_DefaultThreadCurrentCulture()
    // Offset: 0x161B3FC
    static System::Globalization::CultureInfo* get_DefaultThreadCurrentCulture();
    // static public System.Globalization.CultureInfo get_DefaultThreadCurrentUICulture()
    // Offset: 0x161B46C
    static System::Globalization::CultureInfo* get_DefaultThreadCurrentUICulture();
    // System.String get_SortName()
    // Offset: 0x161B4DC
    ::Il2CppString* get_SortName();
    // static System.Globalization.CultureInfo get_UserDefaultUICulture()
    // Offset: 0x161B4E4
    static System::Globalization::CultureInfo* get_UserDefaultUICulture();
    // static System.Globalization.CultureInfo get_UserDefaultCulture()
    // Offset: 0x161B540
    static System::Globalization::CultureInfo* get_UserDefaultCulture();
    // static System.Void CheckDomainSafetyObject(System.Object obj, System.Object container)
    // Offset: 0x161B59C
    static void CheckDomainSafetyObject(::Il2CppObject* obj, ::Il2CppObject* container);
    // System.Boolean get_HasInvariantCultureName()
    // Offset: 0x161B73C
    bool get_HasInvariantCultureName();
    // static System.Boolean VerifyCultureName(System.String cultureName, System.Boolean throwException)
    // Offset: 0x161B7D8
    static bool VerifyCultureName(::Il2CppString* cultureName, bool throwException);
    // static private System.Void .cctor()
    // Offset: 0x161B94C
    static void _cctor();
    // public System.Object Clone()
    // Offset: 0x161708C
    // Implemented from: System.ICloneable
    // Base method: System.Object ICloneable::Clone()
    ::Il2CppObject* Clone();
    // Creating proxy method: System_ICloneable_Clone
    // Maps to method: Clone
    ::Il2CppObject* System_ICloneable_Clone();
    // public override System.Boolean Equals(System.Object value)
    // Offset: 0x161737C
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object value)
    bool Equals(::Il2CppObject* value);
    // public override System.Int32 GetHashCode()
    // Offset: 0x1617774
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x1617780
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
    // public System.Object GetFormat(System.Type formatType)
    // Offset: 0x161829C
    // Implemented from: System.IFormatProvider
    // Base method: System.Object IFormatProvider::GetFormat(System.Type formatType)
    ::Il2CppObject* GetFormat(System::Type* formatType);
    // private System.Void .ctor()
    // Offset: 0x1618B8C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static CultureInfo* New_ctor();
  }; // System.Globalization.CultureInfo
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Globalization::CultureInfo*, "System.Globalization", "CultureInfo");
#pragma pack(pop)
