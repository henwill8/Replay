// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin il2cpp-utils forward declares
struct Il2CppString;
// Completed il2cpp-utils forward declares
// Type namespace: System.Globalization
namespace System::Globalization {
  // Size: 0xA
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: System.Globalization.InternalEncodingDataItem
  // [] Offset: FFFFFFFF
  struct InternalEncodingDataItem/*, public System::ValueType*/ {
    public:
    // System.String webName
    // Size: 0x8
    // Offset: 0x0
    ::Il2CppString* webName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // System.UInt16 codePage
    // Size: 0x2
    // Offset: 0x8
    uint16_t codePage;
    // Field size check
    static_assert(sizeof(uint16_t) == 0x2);
    // Creating value type constructor for type: InternalEncodingDataItem
    constexpr InternalEncodingDataItem(::Il2CppString* webName_ = {}, uint16_t codePage_ = {}) noexcept : webName{webName_}, codePage{codePage_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
  }; // System.Globalization.InternalEncodingDataItem
  #pragma pack(pop)
  static check_size<sizeof(InternalEncodingDataItem), 8 + sizeof(uint16_t)> __System_Globalization_InternalEncodingDataItemSizeCheck;
  static_assert(sizeof(InternalEncodingDataItem) == 0xA);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::Globalization::InternalEncodingDataItem, "System.Globalization", "InternalEncodingDataItem");
