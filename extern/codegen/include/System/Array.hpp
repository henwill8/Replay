// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
// Including type: System.Collections.IList
#include "System/Collections/IList.hpp"
// Including type: System.Collections.IStructuralComparable
#include "System/Collections/IStructuralComparable.hpp"
// Including type: System.Collections.IStructuralEquatable
#include "System/Collections/IStructuralEquatable.hpp"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Converter`2<TInput, TOutput>
  template<typename TInput, typename TOutput>
  class Converter_2;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Comparison`1<T>
  template<typename T>
  class Comparison_1;
  // Forward declaring type: Predicate`1<T>
  template<typename T>
  class Predicate_1;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: ReadOnlyCollection`1<T>
  template<typename T>
  class ReadOnlyCollection_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IComparer
  class IComparer;
  // Forward declaring type: IEqualityComparer
  class IEqualityComparer;
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IComparer`1<T>
  template<typename T>
  class IComparer_1;
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: System.Array
  // [] Offset: FFFFFFFF
  class Array : public ::Il2CppObject/*, public System::Collections::IList, public System::Collections::IStructuralComparable, public System::Collections::IStructuralEquatable, public System::ICloneable*/ {
    public:
    // Nested type: System::Array::ArrayEnumerator
    class ArrayEnumerator;
    // Nested type: System::Array::InternalEnumerator_1<T>
    template<typename T>
    struct InternalEnumerator_1;
    // Nested type: System::Array::EmptyInternalEnumerator_1<T>
    template<typename T>
    class EmptyInternalEnumerator_1;
    // Nested type: System::Array::SorterObjectArray
    struct SorterObjectArray;
    // Nested type: System::Array::SorterGenericArray
    struct SorterGenericArray;
    // Creating value type constructor for type: Array
    Array() noexcept {}
    // Creating interface conversion operator: operator System::Collections::IList
    operator System::Collections::IList() noexcept {
      return *reinterpret_cast<System::Collections::IList*>(this);
    }
    // Creating interface conversion operator: operator System::Collections::IStructuralComparable
    operator System::Collections::IStructuralComparable() noexcept {
      return *reinterpret_cast<System::Collections::IStructuralComparable*>(this);
    }
    // Creating interface conversion operator: operator System::Collections::IStructuralEquatable
    operator System::Collections::IStructuralEquatable() noexcept {
      return *reinterpret_cast<System::Collections::IStructuralEquatable*>(this);
    }
    // Creating interface conversion operator: operator System::ICloneable
    operator System::ICloneable() noexcept {
      return *reinterpret_cast<System::ICloneable*>(this);
    }
    // static public System.Array CreateInstance(System.Type elementType, params System.Int64[] lengths)
    // Offset: 0x167BB24
    static System::Array* CreateInstance(System::Type* elementType, ::Array<int64_t>* lengths);
    // Creating initializer_list -> params proxy for: System.Array CreateInstance(System.Type elementType, params System.Int64[] lengths)
    static System::Array* CreateInstance(System::Type* elementType, std::initializer_list<int64_t> lengths);
    // Creating TArgs -> initializer_list proxy for: System.Array CreateInstance(System.Type elementType, params System.Int64[] lengths)
    template<class ...TParams>
    static System::Array* CreateInstance(System::Type* elementType, TParams&&... lengths) {
      return CreateInstance(elementType, {lengths...});
    }
    // static public System.Collections.ObjectModel.ReadOnlyCollection`1<T> AsReadOnly(T[] array)
    // Offset: 0xFFFFFFFF
    template<class T>
    static System::Collections::ObjectModel::ReadOnlyCollection_1<T>* AsReadOnly(::Array<T>* array) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::AsReadOnly");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "AsReadOnly", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<System::Collections::ObjectModel::ReadOnlyCollection_1<T>*, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array);
    }
    // static public System.Void Resize(ref T[] array, System.Int32 newSize)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void Resize(::Array<T>*& array, int newSize) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::Resize");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "Resize", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, newSize)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, newSize);
    }
    // static System.Int32 CombineHashCodes(System.Int32 h1, System.Int32 h2)
    // Offset: 0x167CFF4
    static int CombineHashCodes(int h1, int h2);
    // static public System.Int32 BinarySearch(System.Array array, System.Object value)
    // Offset: 0x167D170
    static int BinarySearch(System::Array* array, ::Il2CppObject* value);
    // static public TOutput[] ConvertAll(TInput[] array, System.Converter`2<TInput,TOutput> converter)
    // Offset: 0xFFFFFFFF
    template<class TInput, class TOutput>
    static ::Array<TOutput>* ConvertAll(::Array<TInput>* array, System::Converter_2<TInput, TOutput>* converter) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::ConvertAll");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "ConvertAll", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TInput>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TOutput>::get()}, ::il2cpp_utils::ExtractTypes(array, converter))));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TInput>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TOutput>::get()})));
      return ::il2cpp_utils::RunMethodThrow<::Array<TOutput>*, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, converter);
    }
    // static public System.Void Copy(System.Array sourceArray, System.Array destinationArray, System.Int64 length)
    // Offset: 0x167D688
    static void Copy(System::Array* sourceArray, System::Array* destinationArray, int64_t length);
    // static public System.Void Copy(System.Array sourceArray, System.Int64 sourceIndex, System.Array destinationArray, System.Int64 destinationIndex, System.Int64 length)
    // Offset: 0x167D810
    static void Copy(System::Array* sourceArray, int64_t sourceIndex, System::Array* destinationArray, int64_t destinationIndex, int64_t length);
    // public System.Void CopyTo(System.Array array, System.Int64 index)
    // Offset: 0x167D924
    void CopyTo(System::Array* array, int64_t index);
    // static public System.Void ForEach(T[] array, System.Action`1<T> action)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void ForEach(::Array<T>* array, System::Action_1<T>* action) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::ForEach");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "ForEach", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, action)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, action);
    }
    // public System.Int64 get_LongLength()
    // Offset: 0x167D9D0
    int64_t get_LongLength();
    // public System.Int64 GetLongLength(System.Int32 dimension)
    // Offset: 0x167DA44
    int64_t GetLongLength(int dimension);
    // public System.Object GetValue(System.Int64 index)
    // Offset: 0x167DA5C
    ::Il2CppObject* GetValue(int64_t index);
    // public System.Object GetValue(System.Int64 index1, System.Int64 index2)
    // Offset: 0x167DB00
    ::Il2CppObject* GetValue(int64_t index1, int64_t index2);
    // public System.Object GetValue(System.Int64 index1, System.Int64 index2, System.Int64 index3)
    // Offset: 0x167DC6C
    ::Il2CppObject* GetValue(int64_t index1, int64_t index2, int64_t index3);
    // public System.Object GetValue(params System.Int64[] indices)
    // Offset: 0x167DE28
    ::Il2CppObject* GetValue(::Array<int64_t>* indices);
    // Creating initializer_list -> params proxy for: System.Object GetValue(params System.Int64[] indices)
    ::Il2CppObject* GetValue(std::initializer_list<int64_t> indices);
    // Creating TArgs -> initializer_list proxy for: System.Object GetValue(params System.Int64[] indices)
    template<class ...TParams>
    ::Il2CppObject* GetValue(TParams&&... indices) {
      return GetValue({indices...});
    }
    // public System.Boolean get_IsFixedSize()
    // Offset: 0x167DFA4
    bool get_IsFixedSize();
    // public System.Boolean get_IsReadOnly()
    // Offset: 0x167DFAC
    bool get_IsReadOnly();
    // public System.Boolean get_IsSynchronized()
    // Offset: 0x167DFB4
    bool get_IsSynchronized();
    // public System.Object get_SyncRoot()
    // Offset: 0x167DFBC
    ::Il2CppObject* get_SyncRoot();
    // static public System.Int32 BinarySearch(System.Array array, System.Int32 index, System.Int32 length, System.Object value)
    // Offset: 0x167DFC0
    static int BinarySearch(System::Array* array, int index, int length, ::Il2CppObject* value);
    // static public System.Int32 BinarySearch(System.Array array, System.Object value, System.Collections.IComparer comparer)
    // Offset: 0x167DFC8
    static int BinarySearch(System::Array* array, ::Il2CppObject* value, System::Collections::IComparer* comparer);
    // static public System.Int32 BinarySearch(System.Array array, System.Int32 index, System.Int32 length, System.Object value, System.Collections.IComparer comparer)
    // Offset: 0x167D224
    static int BinarySearch(System::Array* array, int index, int length, ::Il2CppObject* value, System::Collections::IComparer* comparer);
    // static private System.Int32 GetMedian(System.Int32 low, System.Int32 hi)
    // Offset: 0x167E080
    static int GetMedian(int low, int hi);
    // static public System.Int32 BinarySearch(T[] array, T value)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int BinarySearch(::Array<T>* array, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::BinarySearch");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "BinarySearch", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, value)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, value);
    }
    // static public System.Int32 BinarySearch(T[] array, T value, System.Collections.Generic.IComparer`1<T> comparer)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int BinarySearch(::Array<T>* array, T value, System::Collections::Generic::IComparer_1<T>* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::BinarySearch");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "BinarySearch", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, value, comparer)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, value, comparer);
    }
    // static public System.Int32 BinarySearch(T[] array, System.Int32 index, System.Int32 length, T value)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int BinarySearch(::Array<T>* array, int index, int length, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::BinarySearch");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "BinarySearch", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, index, length, value)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, index, length, value);
    }
    // static public System.Int32 BinarySearch(T[] array, System.Int32 index, System.Int32 length, T value, System.Collections.Generic.IComparer`1<T> comparer)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int BinarySearch(::Array<T>* array, int index, int length, T value, System::Collections::Generic::IComparer_1<T>* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::BinarySearch");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "BinarySearch", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, index, length, value, comparer)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, index, length, value, comparer);
    }
    // static public System.Int32 IndexOf(System.Array array, System.Object value)
    // Offset: 0x167C34C
    static int IndexOf(System::Array* array, ::Il2CppObject* value);
    // static public System.Int32 IndexOf(System.Array array, System.Object value, System.Int32 startIndex)
    // Offset: 0x167E2F4
    static int IndexOf(System::Array* array, ::Il2CppObject* value, int startIndex);
    // static public System.Int32 IndexOf(System.Array array, System.Object value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x167E08C
    static int IndexOf(System::Array* array, ::Il2CppObject* value, int startIndex, int count);
    // static public System.Int32 IndexOf(T[] array, T value)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int IndexOf(::Array<T>* array, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::IndexOf");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "IndexOf", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, value)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, value);
    }
    // static public System.Int32 IndexOf(T[] array, T value, System.Int32 startIndex)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int IndexOf(::Array<T>* array, T value, int startIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::IndexOf");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "IndexOf", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, value, startIndex)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, value, startIndex);
    }
    // static public System.Int32 IndexOf(T[] array, T value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int IndexOf(::Array<T>* array, T value, int startIndex, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::IndexOf");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "IndexOf", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, value, startIndex, count)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, value, startIndex, count);
    }
    // static public System.Int32 LastIndexOf(System.Array array, System.Object value)
    // Offset: 0x167E3AC
    static int LastIndexOf(System::Array* array, ::Il2CppObject* value);
    // static public System.Int32 LastIndexOf(System.Array array, System.Object value, System.Int32 startIndex)
    // Offset: 0x167E6C4
    static int LastIndexOf(System::Array* array, ::Il2CppObject* value, int startIndex);
    // static public System.Int32 LastIndexOf(System.Array array, System.Object value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x167E458
    static int LastIndexOf(System::Array* array, ::Il2CppObject* value, int startIndex, int count);
    // static public System.Int32 LastIndexOf(T[] array, T value)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int LastIndexOf(::Array<T>* array, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::LastIndexOf");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "LastIndexOf", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, value)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, value);
    }
    // static public System.Int32 LastIndexOf(T[] array, T value, System.Int32 startIndex)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int LastIndexOf(::Array<T>* array, T value, int startIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::LastIndexOf");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "LastIndexOf", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, value, startIndex)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, value, startIndex);
    }
    // static public System.Int32 LastIndexOf(T[] array, T value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int LastIndexOf(::Array<T>* array, T value, int startIndex, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::LastIndexOf");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "LastIndexOf", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, value, startIndex, count)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, value, startIndex, count);
    }
    // static public System.Void Reverse(System.Array array)
    // Offset: 0x167E760
    static void Reverse(System::Array* array);
    // static public System.Void Reverse(System.Array array, System.Int32 index, System.Int32 length)
    // Offset: 0x167E800
    static void Reverse(System::Array* array, int index, int length);
    // static public System.Void Reverse(T[] array)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void Reverse(::Array<T>* array) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::Reverse");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "Reverse", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array);
    }
    // static public System.Void Reverse(T[] array, System.Int32 index, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void Reverse(::Array<T>* array, int index, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::Reverse");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "Reverse", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, index, length)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, index, length);
    }
    // public System.Void SetValue(System.Object value, System.Int64 index)
    // Offset: 0x167EB14
    void SetValue(::Il2CppObject* value, int64_t index);
    // public System.Void SetValue(System.Object value, System.Int64 index1, System.Int64 index2)
    // Offset: 0x167EBC0
    void SetValue(::Il2CppObject* value, int64_t index1, int64_t index2);
    // public System.Void SetValue(System.Object value, System.Int64 index1, System.Int64 index2, System.Int64 index3)
    // Offset: 0x167ED4C
    void SetValue(::Il2CppObject* value, int64_t index1, int64_t index2, int64_t index3);
    // public System.Void SetValue(System.Object value, params System.Int64[] indices)
    // Offset: 0x167EF18
    void SetValue(::Il2CppObject* value, ::Array<int64_t>* indices);
    // Creating initializer_list -> params proxy for: System.Void SetValue(System.Object value, params System.Int64[] indices)
    void SetValue(::Il2CppObject* value, std::initializer_list<int64_t> indices);
    // Creating TArgs -> initializer_list proxy for: System.Void SetValue(System.Object value, params System.Int64[] indices)
    template<class ...TParams>
    void SetValue(::Il2CppObject* value, TParams&&... indices) {
      SetValue(value, {indices...});
    }
    // static public System.Void Sort(System.Array array)
    // Offset: 0x167F09C
    static void Sort(System::Array* array);
    // static public System.Void Sort(System.Array array, System.Int32 index, System.Int32 length)
    // Offset: 0x167F374
    static void Sort(System::Array* array, int index, int length);
    // static public System.Void Sort(System.Array array, System.Collections.IComparer comparer)
    // Offset: 0x167F388
    static void Sort(System::Array* array, System::Collections::IComparer* comparer);
    // static public System.Void Sort(System.Array array, System.Int32 index, System.Int32 length, System.Collections.IComparer comparer)
    // Offset: 0x167F43C
    static void Sort(System::Array* array, int index, int length, System::Collections::IComparer* comparer);
    // static public System.Void Sort(System.Array keys, System.Array items)
    // Offset: 0x167F450
    static void Sort(System::Array* keys, System::Array* items);
    // static public System.Void Sort(System.Array keys, System.Array items, System.Collections.IComparer comparer)
    // Offset: 0x167F504
    static void Sort(System::Array* keys, System::Array* items, System::Collections::IComparer* comparer);
    // static public System.Void Sort(System.Array keys, System.Array items, System.Int32 index, System.Int32 length)
    // Offset: 0x167F5BC
    static void Sort(System::Array* keys, System::Array* items, int index, int length);
    // static public System.Void Sort(System.Array keys, System.Array items, System.Int32 index, System.Int32 length, System.Collections.IComparer comparer)
    // Offset: 0x167F144
    static void Sort(System::Array* keys, System::Array* items, int index, int length, System::Collections::IComparer* comparer);
    // static public System.Void Sort(T[] array)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void Sort(::Array<T>* array) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::Sort");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "Sort", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array);
    }
    // static public System.Void Sort(T[] array, System.Int32 index, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void Sort(::Array<T>* array, int index, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::Sort");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "Sort", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, index, length)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, index, length);
    }
    // static public System.Void Sort(T[] array, System.Collections.Generic.IComparer`1<T> comparer)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void Sort(::Array<T>* array, System::Collections::Generic::IComparer_1<T>* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::Sort");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "Sort", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, comparer)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, comparer);
    }
    // static public System.Void Sort(T[] array, System.Int32 index, System.Int32 length, System.Collections.Generic.IComparer`1<T> comparer)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void Sort(::Array<T>* array, int index, int length, System::Collections::Generic::IComparer_1<T>* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::Sort");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "Sort", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, index, length, comparer)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, index, length, comparer);
    }
    // static public System.Void Sort(T[] array, System.Comparison`1<T> comparison)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void Sort(::Array<T>* array, System::Comparison_1<T>* comparison) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::Sort");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "Sort", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, comparison)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, comparison);
    }
    // static public System.Void Sort(TKey[] keys, TValue[] items)
    // Offset: 0xFFFFFFFF
    template<class TKey, class TValue>
    static void Sort(::Array<TKey>* keys, ::Array<TValue>* items) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::Sort");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "Sort", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TKey>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::il2cpp_utils::ExtractTypes(keys, items))));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TKey>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()})));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, keys, items);
    }
    // static public System.Void Sort(TKey[] keys, TValue[] items, System.Int32 index, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class TKey, class TValue>
    static void Sort(::Array<TKey>* keys, ::Array<TValue>* items, int index, int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::Sort");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "Sort", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TKey>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::il2cpp_utils::ExtractTypes(keys, items, index, length))));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TKey>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()})));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, keys, items, index, length);
    }
    // static public System.Void Sort(TKey[] keys, TValue[] items, System.Collections.Generic.IComparer`1<TKey> comparer)
    // Offset: 0xFFFFFFFF
    template<class TKey, class TValue>
    static void Sort(::Array<TKey>* keys, ::Array<TValue>* items, System::Collections::Generic::IComparer_1<TKey>* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::Sort");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "Sort", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TKey>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::il2cpp_utils::ExtractTypes(keys, items, comparer))));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TKey>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()})));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, keys, items, comparer);
    }
    // static public System.Void Sort(TKey[] keys, TValue[] items, System.Int32 index, System.Int32 length, System.Collections.Generic.IComparer`1<TKey> comparer)
    // Offset: 0xFFFFFFFF
    template<class TKey, class TValue>
    static void Sort(::Array<TKey>* keys, ::Array<TValue>* items, int index, int length, System::Collections::Generic::IComparer_1<TKey>* comparer) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::Sort");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "Sort", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TKey>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, ::il2cpp_utils::ExtractTypes(keys, items, index, length, comparer))));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TKey>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()})));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, keys, items, index, length, comparer);
    }
    // static public System.Boolean Exists(T[] array, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFF
    template<class T>
    static bool Exists(::Array<T>* array, System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::Exists");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "Exists", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, match)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, match);
    }
    // static public System.Void Fill(T[] array, T value)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void Fill(::Array<T>* array, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::Fill");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "Fill", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, value)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, value);
    }
    // static public System.Void Fill(T[] array, T value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void Fill(::Array<T>* array, T value, int startIndex, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::Fill");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "Fill", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, value, startIndex, count)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, value, startIndex, count);
    }
    // static public T Find(T[] array, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFF
    template<class T>
    static T Find(::Array<T>* array, System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::Find");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "Find", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, match)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<T, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, match);
    }
    // static public T[] FindAll(T[] array, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFF
    template<class T>
    static ::Array<T>* FindAll(::Array<T>* array, System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::FindAll");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "FindAll", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, match)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<::Array<T>*, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, match);
    }
    // static public System.Int32 FindIndex(T[] array, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int FindIndex(::Array<T>* array, System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::FindIndex");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "FindIndex", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, match)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, match);
    }
    // static public System.Int32 FindIndex(T[] array, System.Int32 startIndex, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int FindIndex(::Array<T>* array, int startIndex, System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::FindIndex");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "FindIndex", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, startIndex, match)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, startIndex, match);
    }
    // static public System.Int32 FindIndex(T[] array, System.Int32 startIndex, System.Int32 count, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int FindIndex(::Array<T>* array, int startIndex, int count, System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::FindIndex");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "FindIndex", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, startIndex, count, match)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, startIndex, count, match);
    }
    // static public T FindLast(T[] array, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFF
    template<class T>
    static T FindLast(::Array<T>* array, System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::FindLast");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "FindLast", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, match)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<T, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, match);
    }
    // static public System.Int32 FindLastIndex(T[] array, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int FindLastIndex(::Array<T>* array, System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::FindLastIndex");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "FindLastIndex", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, match)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, match);
    }
    // static public System.Int32 FindLastIndex(T[] array, System.Int32 startIndex, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int FindLastIndex(::Array<T>* array, int startIndex, System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::FindLastIndex");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "FindLastIndex", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, startIndex, match)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, startIndex, match);
    }
    // static public System.Int32 FindLastIndex(T[] array, System.Int32 startIndex, System.Int32 count, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int FindLastIndex(::Array<T>* array, int startIndex, int count, System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::FindLastIndex");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "FindLastIndex", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, startIndex, count, match)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, startIndex, count, match);
    }
    // static public System.Boolean TrueForAll(T[] array, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFF
    template<class T>
    static bool TrueForAll(::Array<T>* array, System::Predicate_1<T>* match) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::TrueForAll");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "TrueForAll", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, match)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, match);
    }
    // System.Int32 InternalArray__ICollection_get_Count()
    // Offset: 0x167F788
    int InternalArray__ICollection_get_Count();
    // System.Boolean InternalArray__ICollection_get_IsReadOnly()
    // Offset: 0x167F78C
    bool InternalArray__ICollection_get_IsReadOnly();
    // System.Collections.Generic.IEnumerator`1<T> InternalArray__IEnumerable_GetEnumerator()
    // Offset: 0xFFFFFFFF
    template<class T>
    System::Collections::Generic::IEnumerator_1<T>* InternalArray__IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::InternalArray__IEnumerable_GetEnumerator");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "InternalArray__IEnumerable_GetEnumerator", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes()));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<T>*, false>(this, ___generic__method);
    }
    // System.Void InternalArray__ICollection_Clear()
    // Offset: 0x167F794
    void InternalArray__ICollection_Clear();
    // System.Void InternalArray__ICollection_Add(T item)
    // Offset: 0xFFFFFFFF
    template<class T>
    void InternalArray__ICollection_Add(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::InternalArray__ICollection_Add");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "InternalArray__ICollection_Add", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(item)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, item);
    }
    // System.Boolean InternalArray__ICollection_Remove(T item)
    // Offset: 0xFFFFFFFF
    template<class T>
    bool InternalArray__ICollection_Remove(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::InternalArray__ICollection_Remove");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "InternalArray__ICollection_Remove", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(item)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___generic__method, item);
    }
    // System.Boolean InternalArray__ICollection_Contains(T item)
    // Offset: 0xFFFFFFFF
    template<class T>
    bool InternalArray__ICollection_Contains(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::InternalArray__ICollection_Contains");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "InternalArray__ICollection_Contains", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(item)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___generic__method, item);
    }
    // System.Void InternalArray__ICollection_CopyTo(T[] array, System.Int32 arrayIndex)
    // Offset: 0xFFFFFFFF
    template<class T>
    void InternalArray__ICollection_CopyTo(::Array<T>* array, int arrayIndex) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::InternalArray__ICollection_CopyTo");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "InternalArray__ICollection_CopyTo", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, arrayIndex)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, array, arrayIndex);
    }
    // T InternalArray__IReadOnlyList_get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFF
    template<class T>
    T InternalArray__IReadOnlyList_get_Item(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::InternalArray__IReadOnlyList_get_Item");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "InternalArray__IReadOnlyList_get_Item", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(index)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<T, false>(this, ___generic__method, index);
    }
    // System.Int32 InternalArray__IReadOnlyCollection_get_Count()
    // Offset: 0x167F800
    int InternalArray__IReadOnlyCollection_get_Count();
    // System.Void InternalArray__Insert(System.Int32 index, T item)
    // Offset: 0xFFFFFFFF
    template<class T>
    void InternalArray__Insert(int index, T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::InternalArray__Insert");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "InternalArray__Insert", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(index, item)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, index, item);
    }
    // System.Void InternalArray__RemoveAt(System.Int32 index)
    // Offset: 0x167F804
    void InternalArray__RemoveAt(int index);
    // System.Int32 InternalArray__IndexOf(T item)
    // Offset: 0xFFFFFFFF
    template<class T>
    int InternalArray__IndexOf(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::InternalArray__IndexOf");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "InternalArray__IndexOf", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(item)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___generic__method, item);
    }
    // T InternalArray__get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFF
    template<class T>
    T InternalArray__get_Item(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::InternalArray__get_Item");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "InternalArray__get_Item", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(index)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<T, false>(this, ___generic__method, index);
    }
    // System.Void InternalArray__set_Item(System.Int32 index, T item)
    // Offset: 0xFFFFFFFF
    template<class T>
    void InternalArray__set_Item(int index, T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::InternalArray__set_Item");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "InternalArray__set_Item", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(index, item)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, index, item);
    }
    // System.Void GetGenericValueImpl(System.Int32 pos, out T value)
    // Offset: 0xFFFFFFFF
    template<class T>
    void GetGenericValueImpl(int pos, T& value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::GetGenericValueImpl");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetGenericValueImpl", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(pos, value)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, pos, value);
    }
    // System.Void SetGenericValueImpl(System.Int32 pos, ref T value)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetGenericValueImpl(int pos, T& value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::SetGenericValueImpl");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetGenericValueImpl", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(pos, value)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, pos, value);
    }
    // public System.Int32 get_Length()
    // Offset: 0x167BF0C
    int get_Length();
    // public System.Int32 get_Rank()
    // Offset: 0x167C778
    int get_Rank();
    // private System.Int32 GetRank()
    // Offset: 0x167F870
    int GetRank();
    // public System.Int32 GetLength(System.Int32 dimension)
    // Offset: 0x167DA40
    int GetLength(int dimension);
    // public System.Int32 GetLowerBound(System.Int32 dimension)
    // Offset: 0x167C438
    int GetLowerBound(int dimension);
    // public System.Object GetValue(params System.Int32[] indices)
    // Offset: 0x167DFA0
    ::Il2CppObject* GetValue(::Array<int>* indices);
    // Creating initializer_list -> params proxy for: System.Object GetValue(params System.Int32[] indices)
    ::Il2CppObject* GetValue(std::initializer_list<int> indices);
    // public System.Void SetValue(System.Object value, params System.Int32[] indices)
    // Offset: 0x167F098
    void SetValue(::Il2CppObject* value, ::Array<int>* indices);
    // Creating initializer_list -> params proxy for: System.Void SetValue(System.Object value, params System.Int32[] indices)
    void SetValue(::Il2CppObject* value, std::initializer_list<int> indices);
    // System.Object GetValueImpl(System.Int32 pos)
    // Offset: 0x167F874
    ::Il2CppObject* GetValueImpl(int pos);
    // System.Void SetValueImpl(System.Object value, System.Int32 pos)
    // Offset: 0x167F878
    void SetValueImpl(::Il2CppObject* value, int pos);
    // static System.Boolean FastCopy(System.Array source, System.Int32 source_idx, System.Array dest, System.Int32 dest_idx, System.Int32 length)
    // Offset: 0x167F87C
    static bool FastCopy(System::Array* source, int source_idx, System::Array* dest, int dest_idx, int length);
    // static System.Array CreateInstanceImpl(System.Type elementType, System.Int32[] lengths, System.Int32[] bounds)
    // Offset: 0x167F880
    static System::Array* CreateInstanceImpl(System::Type* elementType, ::Array<int>* lengths, ::Array<int>* bounds);
    // public System.Int32 GetUpperBound(System.Int32 dimension)
    // Offset: 0x167F884
    int GetUpperBound(int dimension);
    // public System.Object GetValue(System.Int32 index)
    // Offset: 0x167BF84
    ::Il2CppObject* GetValue(int index);
    // public System.Object GetValue(System.Int32 index1, System.Int32 index2)
    // Offset: 0x167DBD4
    ::Il2CppObject* GetValue(int index1, int index2);
    // public System.Object GetValue(System.Int32 index1, System.Int32 index2, System.Int32 index3)
    // Offset: 0x167DD78
    ::Il2CppObject* GetValue(int index1, int index2, int index3);
    // public System.Void SetValue(System.Object value, System.Int32 index)
    // Offset: 0x167C124
    void SetValue(::Il2CppObject* value, int index);
    // public System.Void SetValue(System.Object value, System.Int32 index1, System.Int32 index2)
    // Offset: 0x167ECA4
    void SetValue(::Il2CppObject* value, int index1, int index2);
    // public System.Void SetValue(System.Object value, System.Int32 index1, System.Int32 index2, System.Int32 index3)
    // Offset: 0x167EE60
    void SetValue(::Il2CppObject* value, int index1, int index2, int index3);
    // static System.Array UnsafeCreateInstance(System.Type elementType, System.Int32[] lengths, System.Int32[] lowerBounds)
    // Offset: 0x167F8C8
    static System::Array* UnsafeCreateInstance(System::Type* elementType, ::Array<int>* lengths, ::Array<int>* lowerBounds);
    // static System.Array UnsafeCreateInstance(System.Type elementType, System.Int32 length1, System.Int32 length2)
    // Offset: 0x167FC74
    static System::Array* UnsafeCreateInstance(System::Type* elementType, int length1, int length2);
    // static System.Array UnsafeCreateInstance(System.Type elementType, params System.Int32[] lengths)
    // Offset: 0x167FD10
    static System::Array* UnsafeCreateInstance(System::Type* elementType, ::Array<int>* lengths);
    // Creating initializer_list -> params proxy for: System.Array UnsafeCreateInstance(System.Type elementType, params System.Int32[] lengths)
    static System::Array* UnsafeCreateInstance(System::Type* elementType, std::initializer_list<int> lengths);
    // Creating TArgs -> initializer_list proxy for: System.Array UnsafeCreateInstance(System.Type elementType, params System.Int32[] lengths)
    template<class ...TParams>
    static System::Array* UnsafeCreateInstance(System::Type* elementType, TParams&&... lengths) {
      return UnsafeCreateInstance(elementType, {lengths...});
    }
    // static public System.Array CreateInstance(System.Type elementType, System.Int32 length)
    // Offset: 0x167FD14
    static System::Array* CreateInstance(System::Type* elementType, int length);
    // static public System.Array CreateInstance(System.Type elementType, System.Int32 length1, System.Int32 length2)
    // Offset: 0x167FC78
    static System::Array* CreateInstance(System::Type* elementType, int length1, int length2);
    // static public System.Array CreateInstance(System.Type elementType, System.Int32 length1, System.Int32 length2, System.Int32 length3)
    // Offset: 0x167FD9C
    static System::Array* CreateInstance(System::Type* elementType, int length1, int length2, int length3);
    // static public System.Array CreateInstance(System.Type elementType, params System.Int32[] lengths)
    // Offset: 0x167BC8C
    static System::Array* CreateInstance(System::Type* elementType, ::Array<int>* lengths);
    // Creating initializer_list -> params proxy for: System.Array CreateInstance(System.Type elementType, params System.Int32[] lengths)
    static System::Array* CreateInstance(System::Type* elementType, std::initializer_list<int> lengths);
    // static public System.Array CreateInstance(System.Type elementType, System.Int32[] lengths, System.Int32[] lowerBounds)
    // Offset: 0x167F8CC
    static System::Array* CreateInstance(System::Type* elementType, ::Array<int>* lengths, ::Array<int>* lowerBounds);
    // static public System.Void Clear(System.Array array, System.Int32 index, System.Int32 length)
    // Offset: 0x167C43C
    static void Clear(System::Array* array, int index, int length);
    // static private System.Void ClearInternal(System.Array a, System.Int32 index, System.Int32 count)
    // Offset: 0x167FE4C
    static void ClearInternal(System::Array* a, int index, int count);
    // static public System.Void Copy(System.Array sourceArray, System.Array destinationArray, System.Int32 length)
    // Offset: 0x167D734
    static void Copy(System::Array* sourceArray, System::Array* destinationArray, int length);
    // static public System.Void Copy(System.Array sourceArray, System.Int32 sourceIndex, System.Array destinationArray, System.Int32 destinationIndex, System.Int32 length)
    // Offset: 0x167C77C
    static void Copy(System::Array* sourceArray, int sourceIndex, System::Array* destinationArray, int destinationIndex, int length);
    // static private System.Exception CreateArrayTypeMismatchException()
    // Offset: 0x167FE50
    static System::Exception* CreateArrayTypeMismatchException();
    // static private System.Boolean CanAssignArrayElement(System.Type source, System.Type target)
    // Offset: 0x167FEA8
    static bool CanAssignArrayElement(System::Type* source, System::Type* target);
    // static public System.Void ConstrainedCopy(System.Array sourceArray, System.Int32 sourceIndex, System.Array destinationArray, System.Int32 destinationIndex, System.Int32 length)
    // Offset: 0x167FFE4
    static void ConstrainedCopy(System::Array* sourceArray, int sourceIndex, System::Array* destinationArray, int destinationIndex, int length);
    // static public T[] Empty()
    // Offset: 0xFFFFFFFF
    template<class T>
    static ::Array<T>* Empty() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::Empty");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "Empty", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes()));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<::Array<T>*, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method);
    }
    // public System.Void Initialize()
    // Offset: 0x167FFE8
    void Initialize();
    // static private System.Int32 IndexOfImpl(T[] array, T value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int IndexOfImpl(::Array<T>* array, T value, int startIndex, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::IndexOfImpl");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "IndexOfImpl", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, value, startIndex, count)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, value, startIndex, count);
    }
    // static private System.Int32 LastIndexOfImpl(T[] array, T value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int LastIndexOfImpl(::Array<T>* array, T value, int startIndex, int count) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::LastIndexOfImpl");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "LastIndexOfImpl", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, value, startIndex, count)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<int, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, value, startIndex, count);
    }
    // static private System.Void SortImpl(System.Array keys, System.Array items, System.Int32 index, System.Int32 length, System.Collections.IComparer comparer)
    // Offset: 0x167F5C4
    static void SortImpl(System::Array* keys, System::Array* items, int index, int length, System::Collections::IComparer* comparer);
    // static T UnsafeLoad(T[] array, System.Int32 index)
    // Offset: 0xFFFFFFFF
    template<class T>
    static T UnsafeLoad(::Array<T>* array, int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::UnsafeLoad");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "UnsafeLoad", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, index)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<T, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, index);
    }
    // static System.Void UnsafeStore(T[] array, System.Int32 index, T value)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void UnsafeStore(::Array<T>* array, int index, T value) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::UnsafeStore");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("System", "Array", "UnsafeStore", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array, index, value)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, array, index, value);
    }
    // static R UnsafeMov(S instance)
    // Offset: 0xFFFFFFFF
    template<class S, class R>
    static R UnsafeMov(S instance) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::UnsafeMov");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod("System", "Array", "UnsafeMov", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<S>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<R>::get()}, ::il2cpp_utils::ExtractTypes(instance))));
      static auto* ___generic__method = THROW_UNLESS((::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<S>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<R>::get()})));
      return ::il2cpp_utils::RunMethodThrow<R, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method, instance);
    }
    // private System.Int32 System.Collections.ICollection.get_Count()
    // Offset: 0x167BF08
    // Implemented from: System.Collections.ICollection
    // Base method: System.Int32 ICollection::get_Count()
    int System_Collections_ICollection_get_Count();
    // private System.Boolean System.Collections.IList.get_IsReadOnly()
    // Offset: 0x167BF78
    // Implemented from: System.Collections.IList
    // Base method: System.Boolean IList::get_IsReadOnly()
    bool System_Collections_IList_get_IsReadOnly();
    // private System.Object System.Collections.IList.get_Item(System.Int32 index)
    // Offset: 0x167BF80
    // Implemented from: System.Collections.IList
    // Base method: System.Object IList::get_Item(System.Int32 index)
    ::Il2CppObject* System_Collections_IList_get_Item(int index);
    // private System.Void System.Collections.IList.set_Item(System.Int32 index, System.Object value)
    // Offset: 0x167C114
    // Implemented from: System.Collections.IList
    // Base method: System.Void IList::set_Item(System.Int32 index, System.Object value)
    void System_Collections_IList_set_Item(int index, ::Il2CppObject* value);
    // private System.Int32 System.Collections.IList.Add(System.Object value)
    // Offset: 0x167C2C4
    // Implemented from: System.Collections.IList
    // Base method: System.Int32 IList::Add(System.Object value)
    int System_Collections_IList_Add(::Il2CppObject* value);
    // private System.Boolean System.Collections.IList.Contains(System.Object value)
    // Offset: 0x167C330
    // Implemented from: System.Collections.IList
    // Base method: System.Boolean IList::Contains(System.Object value)
    bool System_Collections_IList_Contains(::Il2CppObject* value);
    // private System.Void System.Collections.IList.Clear()
    // Offset: 0x167C3FC
    // Implemented from: System.Collections.IList
    // Base method: System.Void IList::Clear()
    void System_Collections_IList_Clear();
    // private System.Int32 System.Collections.IList.IndexOf(System.Object value)
    // Offset: 0x167C568
    // Implemented from: System.Collections.IList
    // Base method: System.Int32 IList::IndexOf(System.Object value)
    int System_Collections_IList_IndexOf(::Il2CppObject* value);
    // private System.Void System.Collections.IList.Insert(System.Int32 index, System.Object value)
    // Offset: 0x167C56C
    // Implemented from: System.Collections.IList
    // Base method: System.Void IList::Insert(System.Int32 index, System.Object value)
    void System_Collections_IList_Insert(int index, ::Il2CppObject* value);
    // private System.Void System.Collections.IList.Remove(System.Object value)
    // Offset: 0x167C5D8
    // Implemented from: System.Collections.IList
    // Base method: System.Void IList::Remove(System.Object value)
    void System_Collections_IList_Remove(::Il2CppObject* value);
    // private System.Void System.Collections.IList.RemoveAt(System.Int32 index)
    // Offset: 0x167C644
    // Implemented from: System.Collections.IList
    // Base method: System.Void IList::RemoveAt(System.Int32 index)
    void System_Collections_IList_RemoveAt(int index);
    // public System.Void CopyTo(System.Array array, System.Int32 index)
    // Offset: 0x167C6B0
    // Implemented from: System.Collections.ICollection
    // Base method: System.Void ICollection::CopyTo(System.Array array, System.Int32 index)
    void CopyTo(System::Array* array, int index);
    // Creating proxy method: System_Collections_ICollection_CopyTo
    // Maps to method: CopyTo
    void System_Collections_ICollection_CopyTo(System::Array* array, int index);
    // public System.Object Clone()
    // Offset: 0x167CC7C
    // Implemented from: System.ICloneable
    // Base method: System.Object ICloneable::Clone()
    ::Il2CppObject* Clone();
    // Creating proxy method: System_ICloneable_Clone
    // Maps to method: Clone
    ::Il2CppObject* System_ICloneable_Clone();
    // private System.Int32 System.Collections.IStructuralComparable.CompareTo(System.Object other, System.Collections.IComparer comparer)
    // Offset: 0x167CC84
    // Implemented from: System.Collections.IStructuralComparable
    // Base method: System.Int32 IStructuralComparable::CompareTo(System.Object other, System.Collections.IComparer comparer)
    int System_Collections_IStructuralComparable_CompareTo(::Il2CppObject* other, System::Collections::IComparer* comparer);
    // private System.Boolean System.Collections.IStructuralEquatable.Equals(System.Object other, System.Collections.IEqualityComparer comparer)
    // Offset: 0x167CE58
    // Implemented from: System.Collections.IStructuralEquatable
    // Base method: System.Boolean IStructuralEquatable::Equals(System.Object other, System.Collections.IEqualityComparer comparer)
    bool System_Collections_IStructuralEquatable_Equals(::Il2CppObject* other, System::Collections::IEqualityComparer* comparer);
    // private System.Int32 System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer)
    // Offset: 0x167D000
    // Implemented from: System.Collections.IStructuralEquatable
    // Base method: System.Int32 IStructuralEquatable::GetHashCode(System.Collections.IEqualityComparer comparer)
    int System_Collections_IStructuralEquatable_GetHashCode(System::Collections::IEqualityComparer* comparer);
    // public System.Collections.IEnumerator GetEnumerator()
    // Offset: 0x167F6C0
    // Implemented from: System.Collections.IEnumerable
    // Base method: System.Collections.IEnumerator IEnumerable::GetEnumerator()
    System::Collections::IEnumerator* GetEnumerator();
    // Creating proxy method: System_Collections_IEnumerable_GetEnumerator
    // Maps to method: GetEnumerator
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // private System.Void .ctor()
    // Offset: 0x167F780
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Array* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Array::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Array*, creationType>()));
    }
  }; // System.Array
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(System::Array*, "System", "Array");
