// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
// Including type: System.Collections.IList
#include "System/Collections/IList.hpp"
// Including type: System.Collections.IStructuralComparable
#include "System/Collections/IStructuralComparable.hpp"
// Including type: System.Collections.IStructuralEquatable
#include "System/Collections/IStructuralEquatable.hpp"
// Including type: System.ICloneable
#include "System/ICloneable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Converter`2<TInput, TOutput>
  template<typename TInput, typename TOutput>
  class Converter_2;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Comparison`1<T>
  template<typename T>
  class Comparison_1;
  // Forward declaring type: Predicate`1<T>
  template<typename T>
  class Predicate_1;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: ReadOnlyCollection`1<T>
  template<typename T>
  class ReadOnlyCollection_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IComparer
  class IComparer;
  // Forward declaring type: IEqualityComparer
  class IEqualityComparer;
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IComparer`1<T>
  template<typename T>
  class IComparer_1;
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Autogenerated type: System.Array
  class Array : public ::Il2CppObject, public System::Collections::IList, public System::Collections::IStructuralComparable, public System::Collections::IStructuralEquatable, public System::ICloneable {
    public:
    // Nested type: System::Array::ArrayEnumerator
    class ArrayEnumerator;
    // Nested type: System::Array::InternalEnumerator_1<T>
    template<typename T>
    struct InternalEnumerator_1;
    // Nested type: System::Array::EmptyInternalEnumerator_1<T>
    template<typename T>
    class EmptyInternalEnumerator_1;
    // Nested type: System::Array::SorterObjectArray
    struct SorterObjectArray;
    // Nested type: System::Array::SorterGenericArray
    struct SorterGenericArray;
    // static public System.Array CreateInstance(System.Type elementType, params System.Int64[] lengths)
    // Offset: 0x1329DA8
    static System::Array* CreateInstance(System::Type* elementType, ::Array<int64_t>* lengths);
    // Creating initializer_list -> params proxy for: System.Array CreateInstance(System.Type elementType, params System.Int64[] lengths)
    static System::Array* CreateInstance(System::Type* elementType, std::initializer_list<int64_t> lengths);
    // Creating TArgs -> initializer_list proxy for: System.Array CreateInstance(System.Type elementType, params System.Int64[] lengths)
    template<class ...TParams>
    static System::Array* CreateInstance(System::Type* elementType, TParams&&... lengths) {
      return CreateInstance(elementType, {lengths...});
    }
    // static public System.Collections.ObjectModel.ReadOnlyCollection`1<T> AsReadOnly(T[] array)
    // Offset: 0xFFFFFFFF
    template<class T>
    static System::Collections::ObjectModel::ReadOnlyCollection_1<T>* AsReadOnly(::Array<T>* array) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<System::Collections::ObjectModel::ReadOnlyCollection_1<T>*>("System", "Array", "AsReadOnly", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array)));
    }
    // static public System.Void Resize(ref T[] array, System.Int32 newSize)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void Resize(::Array<T>*& array, int newSize) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod("System", "Array", "Resize", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, newSize));
    }
    // static System.Int32 CombineHashCodes(System.Int32 h1, System.Int32 h2)
    // Offset: 0x132B2B8
    static int CombineHashCodes(int h1, int h2);
    // static public System.Int32 BinarySearch(System.Array array, System.Object value)
    // Offset: 0x132B438
    static int BinarySearch(System::Array* array, ::Il2CppObject* value);
    // static public TOutput[] ConvertAll(TInput[] array, System.Converter`2<TInput,TOutput> converter)
    // Offset: 0xFFFFFFFF
    template<class TOutput, class TInput>
    static ::Array<TOutput>* ConvertAll(::Array<TInput>* array, System::Converter_2<TInput, TOutput>* converter) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<::Array<TOutput>*>("System", "Array", "ConvertAll", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TOutput>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TInput>::get()}, array, converter)));
    }
    // static public System.Void Copy(System.Array sourceArray, System.Array destinationArray, System.Int64 length)
    // Offset: 0x132B960
    static void Copy(System::Array* sourceArray, System::Array* destinationArray, int64_t length);
    // static public System.Void Copy(System.Array sourceArray, System.Int64 sourceIndex, System.Array destinationArray, System.Int64 destinationIndex, System.Int64 length)
    // Offset: 0x132BAF0
    static void Copy(System::Array* sourceArray, int64_t sourceIndex, System::Array* destinationArray, int64_t destinationIndex, int64_t length);
    // public System.Void CopyTo(System.Array array, System.Int64 index)
    // Offset: 0x132BC08
    void CopyTo(System::Array* array, int64_t index);
    // static public System.Void ForEach(T[] array, System.Action`1<T> action)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void ForEach(::Array<T>* array, System::Action_1<T>* action) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod("System", "Array", "ForEach", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, action));
    }
    // public System.Int64 get_LongLength()
    // Offset: 0x132BCB8
    int64_t get_LongLength();
    // public System.Int64 GetLongLength(System.Int32 dimension)
    // Offset: 0x132BD2C
    int64_t GetLongLength(int dimension);
    // public System.Object GetValue(System.Int64 index)
    // Offset: 0x132BD44
    ::Il2CppObject* GetValue(int64_t index);
    // public System.Object GetValue(System.Int64 index1, System.Int64 index2)
    // Offset: 0x132BDEC
    ::Il2CppObject* GetValue(int64_t index1, int64_t index2);
    // public System.Object GetValue(System.Int64 index1, System.Int64 index2, System.Int64 index3)
    // Offset: 0x132BF5C
    ::Il2CppObject* GetValue(int64_t index1, int64_t index2, int64_t index3);
    // public System.Object GetValue(params System.Int64[] indices)
    // Offset: 0x132C11C
    ::Il2CppObject* GetValue(::Array<int64_t>* indices);
    // Creating initializer_list -> params proxy for: System.Object GetValue(params System.Int64[] indices)
    ::Il2CppObject* GetValue(std::initializer_list<int64_t> indices);
    // Creating TArgs -> initializer_list proxy for: System.Object GetValue(params System.Int64[] indices)
    template<class ...TParams>
    ::Il2CppObject* GetValue(TParams&&... indices) {
      return GetValue({indices...});
    }
    // public System.Boolean get_IsFixedSize()
    // Offset: 0x132C2A4
    bool get_IsFixedSize();
    // public System.Boolean get_IsReadOnly()
    // Offset: 0x132C2AC
    bool get_IsReadOnly();
    // public System.Boolean get_IsSynchronized()
    // Offset: 0x132C2B4
    bool get_IsSynchronized();
    // public System.Object get_SyncRoot()
    // Offset: 0x132C2BC
    ::Il2CppObject* get_SyncRoot();
    // static public System.Int32 BinarySearch(System.Array array, System.Int32 index, System.Int32 length, System.Object value)
    // Offset: 0x132C2C0
    static int BinarySearch(System::Array* array, int index, int length, ::Il2CppObject* value);
    // static public System.Int32 BinarySearch(System.Array array, System.Object value, System.Collections.IComparer comparer)
    // Offset: 0x132C2C8
    static int BinarySearch(System::Array* array, ::Il2CppObject* value, System::Collections::IComparer* comparer);
    // static public System.Int32 BinarySearch(System.Array array, System.Int32 index, System.Int32 length, System.Object value, System.Collections.IComparer comparer)
    // Offset: 0x132B4F0
    static int BinarySearch(System::Array* array, int index, int length, ::Il2CppObject* value, System::Collections::IComparer* comparer);
    // static private System.Int32 GetMedian(System.Int32 low, System.Int32 hi)
    // Offset: 0x132C384
    static int GetMedian(int low, int hi);
    // static public System.Int32 BinarySearch(T[] array, T value)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int BinarySearch(::Array<T>* array, T value) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<int>("System", "Array", "BinarySearch", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, value)));
    }
    // static public System.Int32 BinarySearch(T[] array, T value, System.Collections.Generic.IComparer`1<T> comparer)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int BinarySearch(::Array<T>* array, T value, System::Collections::Generic::IComparer_1<T>* comparer) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<int>("System", "Array", "BinarySearch", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, value, comparer)));
    }
    // static public System.Int32 BinarySearch(T[] array, System.Int32 index, System.Int32 length, T value)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int BinarySearch(::Array<T>* array, int index, int length, T value) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<int>("System", "Array", "BinarySearch", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, index, length, value)));
    }
    // static public System.Int32 BinarySearch(T[] array, System.Int32 index, System.Int32 length, T value, System.Collections.Generic.IComparer`1<T> comparer)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int BinarySearch(::Array<T>* array, int index, int length, T value, System::Collections::Generic::IComparer_1<T>* comparer) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<int>("System", "Array", "BinarySearch", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, index, length, value, comparer)));
    }
    // static public System.Int32 IndexOf(System.Array array, System.Object value)
    // Offset: 0x132A5EC
    static int IndexOf(System::Array* array, ::Il2CppObject* value);
    // static public System.Int32 IndexOf(System.Array array, System.Object value, System.Int32 startIndex)
    // Offset: 0x132C600
    static int IndexOf(System::Array* array, ::Il2CppObject* value, int startIndex);
    // static public System.Int32 IndexOf(System.Array array, System.Object value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x132C390
    static int IndexOf(System::Array* array, ::Il2CppObject* value, int startIndex, int count);
    // static public System.Int32 IndexOf(T[] array, T value)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int IndexOf(::Array<T>* array, T value) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<int>("System", "Array", "IndexOf", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, value)));
    }
    // static public System.Int32 IndexOf(T[] array, T value, System.Int32 startIndex)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int IndexOf(::Array<T>* array, T value, int startIndex) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<int>("System", "Array", "IndexOf", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, value, startIndex)));
    }
    // static public System.Int32 IndexOf(T[] array, T value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int IndexOf(::Array<T>* array, T value, int startIndex, int count) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<int>("System", "Array", "IndexOf", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, value, startIndex, count)));
    }
    // static public System.Int32 LastIndexOf(System.Array array, System.Object value)
    // Offset: 0x132C6BC
    static int LastIndexOf(System::Array* array, ::Il2CppObject* value);
    // static public System.Int32 LastIndexOf(System.Array array, System.Object value, System.Int32 startIndex)
    // Offset: 0x132C9E0
    static int LastIndexOf(System::Array* array, ::Il2CppObject* value, int startIndex);
    // static public System.Int32 LastIndexOf(System.Array array, System.Object value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0x132C76C
    static int LastIndexOf(System::Array* array, ::Il2CppObject* value, int startIndex, int count);
    // static public System.Int32 LastIndexOf(T[] array, T value)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int LastIndexOf(::Array<T>* array, T value) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<int>("System", "Array", "LastIndexOf", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, value)));
    }
    // static public System.Int32 LastIndexOf(T[] array, T value, System.Int32 startIndex)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int LastIndexOf(::Array<T>* array, T value, int startIndex) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<int>("System", "Array", "LastIndexOf", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, value, startIndex)));
    }
    // static public System.Int32 LastIndexOf(T[] array, T value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int LastIndexOf(::Array<T>* array, T value, int startIndex, int count) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<int>("System", "Array", "LastIndexOf", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, value, startIndex, count)));
    }
    // static public System.Void Reverse(System.Array array)
    // Offset: 0x132CA80
    static void Reverse(System::Array* array);
    // static public System.Void Reverse(System.Array array, System.Int32 index, System.Int32 length)
    // Offset: 0x132CB24
    static void Reverse(System::Array* array, int index, int length);
    // static public System.Void Reverse(T[] array)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void Reverse(::Array<T>* array) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod("System", "Array", "Reverse", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array));
    }
    // static public System.Void Reverse(T[] array, System.Int32 index, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void Reverse(::Array<T>* array, int index, int length) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod("System", "Array", "Reverse", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, index, length));
    }
    // public System.Void SetValue(System.Object value, System.Int64 index)
    // Offset: 0x132CE44
    void SetValue(::Il2CppObject* value, int64_t index);
    // public System.Void SetValue(System.Object value, System.Int64 index1, System.Int64 index2)
    // Offset: 0x132CEF4
    void SetValue(::Il2CppObject* value, int64_t index1, int64_t index2);
    // public System.Void SetValue(System.Object value, System.Int64 index1, System.Int64 index2, System.Int64 index3)
    // Offset: 0x132D084
    void SetValue(::Il2CppObject* value, int64_t index1, int64_t index2, int64_t index3);
    // public System.Void SetValue(System.Object value, params System.Int64[] indices)
    // Offset: 0x132D254
    void SetValue(::Il2CppObject* value, ::Array<int64_t>* indices);
    // Creating initializer_list -> params proxy for: System.Void SetValue(System.Object value, params System.Int64[] indices)
    void SetValue(::Il2CppObject* value, std::initializer_list<int64_t> indices);
    // Creating TArgs -> initializer_list proxy for: System.Void SetValue(System.Object value, params System.Int64[] indices)
    template<class ...TParams>
    void SetValue(::Il2CppObject* value, TParams&&... indices) {
      SetValue(value, {indices...});
    }
    // static public System.Void Sort(System.Array array)
    // Offset: 0x132D3E4
    static void Sort(System::Array* array);
    // static public System.Void Sort(System.Array array, System.Int32 index, System.Int32 length)
    // Offset: 0x132D6CC
    static void Sort(System::Array* array, int index, int length);
    // static public System.Void Sort(System.Array array, System.Collections.IComparer comparer)
    // Offset: 0x132D6E0
    static void Sort(System::Array* array, System::Collections::IComparer* comparer);
    // static public System.Void Sort(System.Array array, System.Int32 index, System.Int32 length, System.Collections.IComparer comparer)
    // Offset: 0x132D798
    static void Sort(System::Array* array, int index, int length, System::Collections::IComparer* comparer);
    // static public System.Void Sort(System.Array keys, System.Array items)
    // Offset: 0x132D7AC
    static void Sort(System::Array* keys, System::Array* items);
    // static public System.Void Sort(System.Array keys, System.Array items, System.Collections.IComparer comparer)
    // Offset: 0x132D864
    static void Sort(System::Array* keys, System::Array* items, System::Collections::IComparer* comparer);
    // static public System.Void Sort(System.Array keys, System.Array items, System.Int32 index, System.Int32 length)
    // Offset: 0x132D920
    static void Sort(System::Array* keys, System::Array* items, int index, int length);
    // static public System.Void Sort(System.Array keys, System.Array items, System.Int32 index, System.Int32 length, System.Collections.IComparer comparer)
    // Offset: 0x132D490
    static void Sort(System::Array* keys, System::Array* items, int index, int length, System::Collections::IComparer* comparer);
    // static public System.Void Sort(T[] array)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void Sort(::Array<T>* array) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod("System", "Array", "Sort", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array));
    }
    // static public System.Void Sort(T[] array, System.Int32 index, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void Sort(::Array<T>* array, int index, int length) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod("System", "Array", "Sort", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, index, length));
    }
    // static public System.Void Sort(T[] array, System.Collections.Generic.IComparer`1<T> comparer)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void Sort(::Array<T>* array, System::Collections::Generic::IComparer_1<T>* comparer) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod("System", "Array", "Sort", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, comparer));
    }
    // static public System.Void Sort(T[] array, System.Int32 index, System.Int32 length, System.Collections.Generic.IComparer`1<T> comparer)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void Sort(::Array<T>* array, int index, int length, System::Collections::Generic::IComparer_1<T>* comparer) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod("System", "Array", "Sort", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, index, length, comparer));
    }
    // static public System.Void Sort(T[] array, System.Comparison`1<T> comparison)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void Sort(::Array<T>* array, System::Comparison_1<T>* comparison) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod("System", "Array", "Sort", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, comparison));
    }
    // static public System.Void Sort(TKey[] keys, TValue[] items)
    // Offset: 0xFFFFFFFF
    template<class TKey, class TValue>
    static void Sort(::Array<TKey>* keys, ::Array<TValue>* items) {
      THROW_UNLESS((il2cpp_utils::RunGenericMethod("System", "Array", "Sort", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TKey>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, keys, items)));
    }
    // static public System.Void Sort(TKey[] keys, TValue[] items, System.Int32 index, System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<class TKey, class TValue>
    static void Sort(::Array<TKey>* keys, ::Array<TValue>* items, int index, int length) {
      THROW_UNLESS((il2cpp_utils::RunGenericMethod("System", "Array", "Sort", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TKey>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, keys, items, index, length)));
    }
    // static public System.Void Sort(TKey[] keys, TValue[] items, System.Collections.Generic.IComparer`1<TKey> comparer)
    // Offset: 0xFFFFFFFF
    template<class TKey, class TValue>
    static void Sort(::Array<TKey>* keys, ::Array<TValue>* items, System::Collections::Generic::IComparer_1<TKey>* comparer) {
      THROW_UNLESS((il2cpp_utils::RunGenericMethod("System", "Array", "Sort", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TKey>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, keys, items, comparer)));
    }
    // static public System.Void Sort(TKey[] keys, TValue[] items, System.Int32 index, System.Int32 length, System.Collections.Generic.IComparer`1<TKey> comparer)
    // Offset: 0xFFFFFFFF
    template<class TKey, class TValue>
    static void Sort(::Array<TKey>* keys, ::Array<TValue>* items, int index, int length, System::Collections::Generic::IComparer_1<TKey>* comparer) {
      THROW_UNLESS((il2cpp_utils::RunGenericMethod("System", "Array", "Sort", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TKey>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TValue>::get()}, keys, items, index, length, comparer)));
    }
    // static public System.Boolean Exists(T[] array, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFF
    template<class T>
    static bool Exists(::Array<T>* array, System::Predicate_1<T>* match) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<bool>("System", "Array", "Exists", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, match)));
    }
    // static public System.Void Fill(T[] array, T value)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void Fill(::Array<T>* array, T value) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod("System", "Array", "Fill", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, value));
    }
    // static public System.Void Fill(T[] array, T value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void Fill(::Array<T>* array, T value, int startIndex, int count) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod("System", "Array", "Fill", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, value, startIndex, count));
    }
    // static public T Find(T[] array, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFF
    template<class T>
    static T Find(::Array<T>* array, System::Predicate_1<T>* match) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>("System", "Array", "Find", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, match)));
    }
    // static public T[] FindAll(T[] array, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFF
    template<class T>
    static ::Array<T>* FindAll(::Array<T>* array, System::Predicate_1<T>* match) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<::Array<T>*>("System", "Array", "FindAll", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, match)));
    }
    // static public System.Int32 FindIndex(T[] array, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int FindIndex(::Array<T>* array, System::Predicate_1<T>* match) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<int>("System", "Array", "FindIndex", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, match)));
    }
    // static public System.Int32 FindIndex(T[] array, System.Int32 startIndex, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int FindIndex(::Array<T>* array, int startIndex, System::Predicate_1<T>* match) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<int>("System", "Array", "FindIndex", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, startIndex, match)));
    }
    // static public System.Int32 FindIndex(T[] array, System.Int32 startIndex, System.Int32 count, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int FindIndex(::Array<T>* array, int startIndex, int count, System::Predicate_1<T>* match) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<int>("System", "Array", "FindIndex", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, startIndex, count, match)));
    }
    // static public T FindLast(T[] array, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFF
    template<class T>
    static T FindLast(::Array<T>* array, System::Predicate_1<T>* match) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>("System", "Array", "FindLast", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, match)));
    }
    // static public System.Int32 FindLastIndex(T[] array, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int FindLastIndex(::Array<T>* array, System::Predicate_1<T>* match) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<int>("System", "Array", "FindLastIndex", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, match)));
    }
    // static public System.Int32 FindLastIndex(T[] array, System.Int32 startIndex, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int FindLastIndex(::Array<T>* array, int startIndex, System::Predicate_1<T>* match) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<int>("System", "Array", "FindLastIndex", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, startIndex, match)));
    }
    // static public System.Int32 FindLastIndex(T[] array, System.Int32 startIndex, System.Int32 count, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int FindLastIndex(::Array<T>* array, int startIndex, int count, System::Predicate_1<T>* match) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<int>("System", "Array", "FindLastIndex", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, startIndex, count, match)));
    }
    // static public System.Boolean TrueForAll(T[] array, System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFF
    template<class T>
    static bool TrueForAll(::Array<T>* array, System::Predicate_1<T>* match) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<bool>("System", "Array", "TrueForAll", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, match)));
    }
    // System.Int32 InternalArray__ICollection_get_Count()
    // Offset: 0x132DAEC
    int InternalArray__ICollection_get_Count();
    // System.Boolean InternalArray__ICollection_get_IsReadOnly()
    // Offset: 0x132DAF0
    bool InternalArray__ICollection_get_IsReadOnly();
    // System.Collections.Generic.IEnumerator`1<T> InternalArray__IEnumerable_GetEnumerator()
    // Offset: 0xFFFFFFFF
    template<class T>
    System::Collections::Generic::IEnumerator_1<T>* InternalArray__IEnumerable_GetEnumerator() {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<System::Collections::Generic::IEnumerator_1<T>*>(this, "InternalArray__IEnumerable_GetEnumerator", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()})));
    }
    // System.Void InternalArray__ICollection_Clear()
    // Offset: 0x132DAF8
    void InternalArray__ICollection_Clear();
    // System.Void InternalArray__ICollection_Add(T item)
    // Offset: 0xFFFFFFFF
    template<class T>
    void InternalArray__ICollection_Add(T item) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "InternalArray__ICollection_Add", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, item));
    }
    // System.Boolean InternalArray__ICollection_Remove(T item)
    // Offset: 0xFFFFFFFF
    template<class T>
    bool InternalArray__ICollection_Remove(T item) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<bool>(this, "InternalArray__ICollection_Remove", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, item)));
    }
    // System.Boolean InternalArray__ICollection_Contains(T item)
    // Offset: 0xFFFFFFFF
    template<class T>
    bool InternalArray__ICollection_Contains(T item) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<bool>(this, "InternalArray__ICollection_Contains", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, item)));
    }
    // System.Void InternalArray__ICollection_CopyTo(T[] array, System.Int32 arrayIndex)
    // Offset: 0xFFFFFFFF
    template<class T>
    void InternalArray__ICollection_CopyTo(::Array<T>* array, int arrayIndex) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "InternalArray__ICollection_CopyTo", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, arrayIndex));
    }
    // T InternalArray__IReadOnlyList_get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFF
    template<class T>
    T InternalArray__IReadOnlyList_get_Item(int index) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>(this, "InternalArray__IReadOnlyList_get_Item", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, index)));
    }
    // System.Int32 InternalArray__IReadOnlyCollection_get_Count()
    // Offset: 0x132DB64
    int InternalArray__IReadOnlyCollection_get_Count();
    // System.Void InternalArray__Insert(System.Int32 index, T item)
    // Offset: 0xFFFFFFFF
    template<class T>
    void InternalArray__Insert(int index, T item) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "InternalArray__Insert", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, index, item));
    }
    // System.Void InternalArray__RemoveAt(System.Int32 index)
    // Offset: 0x132DB68
    void InternalArray__RemoveAt(int index);
    // System.Int32 InternalArray__IndexOf(T item)
    // Offset: 0xFFFFFFFF
    template<class T>
    int InternalArray__IndexOf(T item) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<int>(this, "InternalArray__IndexOf", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, item)));
    }
    // T InternalArray__get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFF
    template<class T>
    T InternalArray__get_Item(int index) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>(this, "InternalArray__get_Item", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, index)));
    }
    // System.Void InternalArray__set_Item(System.Int32 index, T item)
    // Offset: 0xFFFFFFFF
    template<class T>
    void InternalArray__set_Item(int index, T item) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "InternalArray__set_Item", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, index, item));
    }
    // System.Void GetGenericValueImpl(System.Int32 pos, out T value)
    // Offset: 0xFFFFFFFF
    template<class T>
    void GetGenericValueImpl(int pos, T& value) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "GetGenericValueImpl", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, pos, value));
    }
    // System.Void SetGenericValueImpl(System.Int32 pos, ref T value)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SetGenericValueImpl(int pos, T& value) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "SetGenericValueImpl", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, pos, value));
    }
    // public System.Int32 get_Length()
    // Offset: 0x132A1A4
    int get_Length();
    // public System.Int32 get_Rank()
    // Offset: 0x132AA24
    int get_Rank();
    // private System.Int32 GetRank()
    // Offset: 0x132DBD4
    int GetRank();
    // public System.Int32 GetLength(System.Int32 dimension)
    // Offset: 0x132BD28
    int GetLength(int dimension);
    // public System.Int32 GetLowerBound(System.Int32 dimension)
    // Offset: 0x132A6DC
    int GetLowerBound(int dimension);
    // public System.Object GetValue(params System.Int32[] indices)
    // Offset: 0x132C2A0
    ::Il2CppObject* GetValue(::Array<int>* indices);
    // Creating initializer_list -> params proxy for: System.Object GetValue(params System.Int32[] indices)
    ::Il2CppObject* GetValue(std::initializer_list<int> indices);
    // public System.Void SetValue(System.Object value, params System.Int32[] indices)
    // Offset: 0x132D3E0
    void SetValue(::Il2CppObject* value, ::Array<int>* indices);
    // Creating initializer_list -> params proxy for: System.Void SetValue(System.Object value, params System.Int32[] indices)
    void SetValue(::Il2CppObject* value, std::initializer_list<int> indices);
    // System.Object GetValueImpl(System.Int32 pos)
    // Offset: 0x132DBD8
    ::Il2CppObject* GetValueImpl(int pos);
    // System.Void SetValueImpl(System.Object value, System.Int32 pos)
    // Offset: 0x132DBDC
    void SetValueImpl(::Il2CppObject* value, int pos);
    // static System.Boolean FastCopy(System.Array source, System.Int32 source_idx, System.Array dest, System.Int32 dest_idx, System.Int32 length)
    // Offset: 0x132DBE0
    static bool FastCopy(System::Array* source, int source_idx, System::Array* dest, int dest_idx, int length);
    // static System.Array CreateInstanceImpl(System.Type elementType, System.Int32[] lengths, System.Int32[] bounds)
    // Offset: 0x132DBE4
    static System::Array* CreateInstanceImpl(System::Type* elementType, ::Array<int>* lengths, ::Array<int>* bounds);
    // public System.Int32 GetUpperBound(System.Int32 dimension)
    // Offset: 0x132DBE8
    int GetUpperBound(int dimension);
    // public System.Object GetValue(System.Int32 index)
    // Offset: 0x132A21C
    ::Il2CppObject* GetValue(int index);
    // public System.Object GetValue(System.Int32 index1, System.Int32 index2)
    // Offset: 0x132BEC4
    ::Il2CppObject* GetValue(int index1, int index2);
    // public System.Object GetValue(System.Int32 index1, System.Int32 index2, System.Int32 index3)
    // Offset: 0x132C06C
    ::Il2CppObject* GetValue(int index1, int index2, int index3);
    // public System.Void SetValue(System.Object value, System.Int32 index)
    // Offset: 0x132A3C0
    void SetValue(::Il2CppObject* value, int index);
    // public System.Void SetValue(System.Object value, System.Int32 index1, System.Int32 index2)
    // Offset: 0x132CFDC
    void SetValue(::Il2CppObject* value, int index1, int index2);
    // public System.Void SetValue(System.Object value, System.Int32 index1, System.Int32 index2, System.Int32 index3)
    // Offset: 0x132D19C
    void SetValue(::Il2CppObject* value, int index1, int index2, int index3);
    // static System.Array UnsafeCreateInstance(System.Type elementType, System.Int32[] lengths, System.Int32[] lowerBounds)
    // Offset: 0x132DC2C
    static System::Array* UnsafeCreateInstance(System::Type* elementType, ::Array<int>* lengths, ::Array<int>* lowerBounds);
    // static System.Array UnsafeCreateInstance(System.Type elementType, System.Int32 length1, System.Int32 length2)
    // Offset: 0x132DFE8
    static System::Array* UnsafeCreateInstance(System::Type* elementType, int length1, int length2);
    // static System.Array UnsafeCreateInstance(System.Type elementType, params System.Int32[] lengths)
    // Offset: 0x132E084
    static System::Array* UnsafeCreateInstance(System::Type* elementType, ::Array<int>* lengths);
    // Creating initializer_list -> params proxy for: System.Array UnsafeCreateInstance(System.Type elementType, params System.Int32[] lengths)
    static System::Array* UnsafeCreateInstance(System::Type* elementType, std::initializer_list<int> lengths);
    // Creating TArgs -> initializer_list proxy for: System.Array UnsafeCreateInstance(System.Type elementType, params System.Int32[] lengths)
    template<class ...TParams>
    static System::Array* UnsafeCreateInstance(System::Type* elementType, TParams&&... lengths) {
      return UnsafeCreateInstance(elementType, {lengths...});
    }
    // static public System.Array CreateInstance(System.Type elementType, System.Int32 length)
    // Offset: 0x132E088
    static System::Array* CreateInstance(System::Type* elementType, int length);
    // static public System.Array CreateInstance(System.Type elementType, System.Int32 length1, System.Int32 length2)
    // Offset: 0x132DFEC
    static System::Array* CreateInstance(System::Type* elementType, int length1, int length2);
    // static public System.Array CreateInstance(System.Type elementType, System.Int32 length1, System.Int32 length2, System.Int32 length3)
    // Offset: 0x132E110
    static System::Array* CreateInstance(System::Type* elementType, int length1, int length2, int length3);
    // static public System.Array CreateInstance(System.Type elementType, params System.Int32[] lengths)
    // Offset: 0x1329F1C
    static System::Array* CreateInstance(System::Type* elementType, ::Array<int>* lengths);
    // Creating initializer_list -> params proxy for: System.Array CreateInstance(System.Type elementType, params System.Int32[] lengths)
    static System::Array* CreateInstance(System::Type* elementType, std::initializer_list<int> lengths);
    // static public System.Array CreateInstance(System.Type elementType, System.Int32[] lengths, System.Int32[] lowerBounds)
    // Offset: 0x132DC30
    static System::Array* CreateInstance(System::Type* elementType, ::Array<int>* lengths, ::Array<int>* lowerBounds);
    // static public System.Void Clear(System.Array array, System.Int32 index, System.Int32 length)
    // Offset: 0x132A6E0
    static void Clear(System::Array* array, int index, int length);
    // static private System.Void ClearInternal(System.Array a, System.Int32 index, System.Int32 count)
    // Offset: 0x132E1C0
    static void ClearInternal(System::Array* a, int index, int count);
    // static public System.Void Copy(System.Array sourceArray, System.Array destinationArray, System.Int32 length)
    // Offset: 0x132BA10
    static void Copy(System::Array* sourceArray, System::Array* destinationArray, int length);
    // static public System.Void Copy(System.Array sourceArray, System.Int32 sourceIndex, System.Array destinationArray, System.Int32 destinationIndex, System.Int32 length)
    // Offset: 0x132AA28
    static void Copy(System::Array* sourceArray, int sourceIndex, System::Array* destinationArray, int destinationIndex, int length);
    // static private System.Exception CreateArrayTypeMismatchException()
    // Offset: 0x132E1C4
    static System::Exception* CreateArrayTypeMismatchException();
    // static private System.Boolean CanAssignArrayElement(System.Type source, System.Type target)
    // Offset: 0x132E21C
    static bool CanAssignArrayElement(System::Type* source, System::Type* target);
    // static public System.Void ConstrainedCopy(System.Array sourceArray, System.Int32 sourceIndex, System.Array destinationArray, System.Int32 destinationIndex, System.Int32 length)
    // Offset: 0x132E358
    static void ConstrainedCopy(System::Array* sourceArray, int sourceIndex, System::Array* destinationArray, int destinationIndex, int length);
    // static public T[] Empty()
    // Offset: 0xFFFFFFFF
    template<class T>
    static ::Array<T>* Empty() {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<::Array<T>*>("System", "Array", "Empty", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()})));
    }
    // public System.Void Initialize()
    // Offset: 0x132E35C
    void Initialize();
    // static private System.Int32 IndexOfImpl(T[] array, T value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int IndexOfImpl(::Array<T>* array, T value, int startIndex, int count) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<int>("System", "Array", "IndexOfImpl", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, value, startIndex, count)));
    }
    // static private System.Int32 LastIndexOfImpl(T[] array, T value, System.Int32 startIndex, System.Int32 count)
    // Offset: 0xFFFFFFFF
    template<class T>
    static int LastIndexOfImpl(::Array<T>* array, T value, int startIndex, int count) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<int>("System", "Array", "LastIndexOfImpl", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, value, startIndex, count)));
    }
    // static private System.Void SortImpl(System.Array keys, System.Array items, System.Int32 index, System.Int32 length, System.Collections.IComparer comparer)
    // Offset: 0x132D928
    static void SortImpl(System::Array* keys, System::Array* items, int index, int length, System::Collections::IComparer* comparer);
    // static T UnsafeLoad(T[] array, System.Int32 index)
    // Offset: 0xFFFFFFFF
    template<class T>
    static T UnsafeLoad(::Array<T>* array, int index) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>("System", "Array", "UnsafeLoad", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, index)));
    }
    // static System.Void UnsafeStore(T[] array, System.Int32 index, T value)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void UnsafeStore(::Array<T>* array, int index, T value) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod("System", "Array", "UnsafeStore", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array, index, value));
    }
    // static R UnsafeMov(S instance)
    // Offset: 0xFFFFFFFF
    template<class R, class S>
    static R UnsafeMov(S instance) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<R>("System", "Array", "UnsafeMov", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<R>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<S>::get()}, instance)));
    }
    // private System.Int32 System.Collections.ICollection.get_Count()
    // Offset: 0x132A1A0
    // Implemented from: System.Collections.ICollection
    // Base method: System.Int32 ICollection::get_Count()
    int System_Collections_ICollection_get_Count();
    // private System.Boolean System.Collections.IList.get_IsReadOnly()
    // Offset: 0x132A210
    // Implemented from: System.Collections.IList
    // Base method: System.Boolean IList::get_IsReadOnly()
    bool System_Collections_IList_get_IsReadOnly();
    // private System.Object System.Collections.IList.get_Item(System.Int32 index)
    // Offset: 0x132A218
    // Implemented from: System.Collections.IList
    // Base method: System.Object IList::get_Item(System.Int32 index)
    ::Il2CppObject* System_Collections_IList_get_Item(int index);
    // private System.Void System.Collections.IList.set_Item(System.Int32 index, System.Object value)
    // Offset: 0x132A3B0
    // Implemented from: System.Collections.IList
    // Base method: System.Void IList::set_Item(System.Int32 index, System.Object value)
    void System_Collections_IList_set_Item(int index, ::Il2CppObject* value);
    // private System.Int32 System.Collections.IList.Add(System.Object value)
    // Offset: 0x132A564
    // Implemented from: System.Collections.IList
    // Base method: System.Int32 IList::Add(System.Object value)
    int System_Collections_IList_Add(::Il2CppObject* value);
    // private System.Boolean System.Collections.IList.Contains(System.Object value)
    // Offset: 0x132A5D0
    // Implemented from: System.Collections.IList
    // Base method: System.Boolean IList::Contains(System.Object value)
    bool System_Collections_IList_Contains(::Il2CppObject* value);
    // private System.Void System.Collections.IList.Clear()
    // Offset: 0x132A6A0
    // Implemented from: System.Collections.IList
    // Base method: System.Void IList::Clear()
    void System_Collections_IList_Clear();
    // private System.Int32 System.Collections.IList.IndexOf(System.Object value)
    // Offset: 0x132A810
    // Implemented from: System.Collections.IList
    // Base method: System.Int32 IList::IndexOf(System.Object value)
    int System_Collections_IList_IndexOf(::Il2CppObject* value);
    // private System.Void System.Collections.IList.Insert(System.Int32 index, System.Object value)
    // Offset: 0x132A814
    // Implemented from: System.Collections.IList
    // Base method: System.Void IList::Insert(System.Int32 index, System.Object value)
    void System_Collections_IList_Insert(int index, ::Il2CppObject* value);
    // private System.Void System.Collections.IList.Remove(System.Object value)
    // Offset: 0x132A880
    // Implemented from: System.Collections.IList
    // Base method: System.Void IList::Remove(System.Object value)
    void System_Collections_IList_Remove(::Il2CppObject* value);
    // private System.Void System.Collections.IList.RemoveAt(System.Int32 index)
    // Offset: 0x132A8EC
    // Implemented from: System.Collections.IList
    // Base method: System.Void IList::RemoveAt(System.Int32 index)
    void System_Collections_IList_RemoveAt(int index);
    // public System.Void CopyTo(System.Array array, System.Int32 index)
    // Offset: 0x132A958
    // Implemented from: System.Collections.ICollection
    // Base method: System.Void ICollection::CopyTo(System.Array array, System.Int32 index)
    void CopyTo(System::Array* array, int index);
    // Creating proxy method: System_Collections_ICollection_CopyTo
    // Maps to method: CopyTo
    void System_Collections_ICollection_CopyTo(System::Array* array, int index);
    // public System.Object Clone()
    // Offset: 0x132AF3C
    // Implemented from: System.ICloneable
    // Base method: System.Object ICloneable::Clone()
    ::Il2CppObject* Clone();
    // private System.Int32 System.Collections.IStructuralComparable.CompareTo(System.Object other, System.Collections.IComparer comparer)
    // Offset: 0x132AF44
    // Implemented from: System.Collections.IStructuralComparable
    // Base method: System.Int32 IStructuralComparable::CompareTo(System.Object other, System.Collections.IComparer comparer)
    int System_Collections_IStructuralComparable_CompareTo(::Il2CppObject* other, System::Collections::IComparer* comparer);
    // private System.Boolean System.Collections.IStructuralEquatable.Equals(System.Object other, System.Collections.IEqualityComparer comparer)
    // Offset: 0x132B11C
    // Implemented from: System.Collections.IStructuralEquatable
    // Base method: System.Boolean IStructuralEquatable::Equals(System.Object other, System.Collections.IEqualityComparer comparer)
    bool System_Collections_IStructuralEquatable_Equals(::Il2CppObject* other, System::Collections::IEqualityComparer* comparer);
    // private System.Int32 System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer comparer)
    // Offset: 0x132B2C4
    // Implemented from: System.Collections.IStructuralEquatable
    // Base method: System.Int32 IStructuralEquatable::GetHashCode(System.Collections.IEqualityComparer comparer)
    int System_Collections_IStructuralEquatable_GetHashCode(System::Collections::IEqualityComparer* comparer);
    // public System.Collections.IEnumerator GetEnumerator()
    // Offset: 0x132DA24
    // Implemented from: System.Collections.IEnumerable
    // Base method: System.Collections.IEnumerator IEnumerable::GetEnumerator()
    System::Collections::IEnumerator* GetEnumerator();
    // Creating proxy method: System_Collections_IEnumerable_GetEnumerator
    // Maps to method: GetEnumerator
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // private System.Void .ctor()
    // Offset: 0x132DAE4
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static Array* New_ctor();
  }; // System.Array
}
DEFINE_IL2CPP_ARG_TYPE(System::Array*, "System", "Array");
#pragma pack(pop)
