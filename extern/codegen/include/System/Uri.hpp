// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.UriIdnScope
#include "System/UriIdnScope.hpp"
// Including type: System.UriKind
#include "System/UriKind.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: Flags because it is already included!
  // Forward declaring type: UriParser
  class UriParser;
  // Forward declaring type: ParsingError
  struct ParsingError;
  // Forward declaring type: UriFormatException
  class UriFormatException;
  // Forward declaring type: UriHostNameType
  struct UriHostNameType;
  // Forward declaring type: UriComponents
  struct UriComponents;
  // Forward declaring type: UriFormat
  struct UriFormat;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Size: 0x41
  #pragma pack(push, 1)
  // Autogenerated type: System.Uri
  // [] Offset: FFFFFFFF
  // [TypeConverterAttribute] Offset: CB5910
  class Uri : public ::Il2CppObject/*, public System::Runtime::Serialization::ISerializable*/ {
    public:
    // Nested type: System::Uri::Flags
    struct Flags;
    // Nested type: System::Uri::UriInfo
    class UriInfo;
    // Nested type: System::Uri::Offset
    struct Offset;
    // Nested type: System::Uri::MoreInfo
    class MoreInfo;
    // Nested type: System::Uri::Check
    struct Check;
    // Size: 0x8
    #pragma pack(push, 1)
    // Autogenerated type: System.Uri/Flags
    // [] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct Flags/*, public System::Enum*/ {
      public:
      // public System.UInt64 value__
      // Size: 0x8
      // Offset: 0x0
      uint64_t value;
      // Field size check
      static_assert(sizeof(uint64_t) == 0x8);
      // Creating value type constructor for type: Flags
      constexpr Flags(uint64_t value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator uint64_t
      constexpr operator uint64_t() const noexcept {
        return value;
      }
      // static field const value: static public System.Uri/Flags Zero
      static constexpr const uint64_t Zero = 0u;
      // Get static field: static public System.Uri/Flags Zero
      static System::Uri::Flags _get_Zero();
      // Set static field: static public System.Uri/Flags Zero
      static void _set_Zero(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags SchemeNotCanonical
      static constexpr const uint64_t SchemeNotCanonical = 1u;
      // Get static field: static public System.Uri/Flags SchemeNotCanonical
      static System::Uri::Flags _get_SchemeNotCanonical();
      // Set static field: static public System.Uri/Flags SchemeNotCanonical
      static void _set_SchemeNotCanonical(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags UserNotCanonical
      static constexpr const uint64_t UserNotCanonical = 2u;
      // Get static field: static public System.Uri/Flags UserNotCanonical
      static System::Uri::Flags _get_UserNotCanonical();
      // Set static field: static public System.Uri/Flags UserNotCanonical
      static void _set_UserNotCanonical(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags HostNotCanonical
      static constexpr const uint64_t HostNotCanonical = 4u;
      // Get static field: static public System.Uri/Flags HostNotCanonical
      static System::Uri::Flags _get_HostNotCanonical();
      // Set static field: static public System.Uri/Flags HostNotCanonical
      static void _set_HostNotCanonical(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags PortNotCanonical
      static constexpr const uint64_t PortNotCanonical = 8u;
      // Get static field: static public System.Uri/Flags PortNotCanonical
      static System::Uri::Flags _get_PortNotCanonical();
      // Set static field: static public System.Uri/Flags PortNotCanonical
      static void _set_PortNotCanonical(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags PathNotCanonical
      static constexpr const uint64_t PathNotCanonical = 16u;
      // Get static field: static public System.Uri/Flags PathNotCanonical
      static System::Uri::Flags _get_PathNotCanonical();
      // Set static field: static public System.Uri/Flags PathNotCanonical
      static void _set_PathNotCanonical(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags QueryNotCanonical
      static constexpr const uint64_t QueryNotCanonical = 32u;
      // Get static field: static public System.Uri/Flags QueryNotCanonical
      static System::Uri::Flags _get_QueryNotCanonical();
      // Set static field: static public System.Uri/Flags QueryNotCanonical
      static void _set_QueryNotCanonical(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags FragmentNotCanonical
      static constexpr const uint64_t FragmentNotCanonical = 64u;
      // Get static field: static public System.Uri/Flags FragmentNotCanonical
      static System::Uri::Flags _get_FragmentNotCanonical();
      // Set static field: static public System.Uri/Flags FragmentNotCanonical
      static void _set_FragmentNotCanonical(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags CannotDisplayCanonical
      static constexpr const uint64_t CannotDisplayCanonical = 127u;
      // Get static field: static public System.Uri/Flags CannotDisplayCanonical
      static System::Uri::Flags _get_CannotDisplayCanonical();
      // Set static field: static public System.Uri/Flags CannotDisplayCanonical
      static void _set_CannotDisplayCanonical(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags E_UserNotCanonical
      static constexpr const uint64_t E_UserNotCanonical = 128u;
      // Get static field: static public System.Uri/Flags E_UserNotCanonical
      static System::Uri::Flags _get_E_UserNotCanonical();
      // Set static field: static public System.Uri/Flags E_UserNotCanonical
      static void _set_E_UserNotCanonical(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags E_HostNotCanonical
      static constexpr const uint64_t E_HostNotCanonical = 256u;
      // Get static field: static public System.Uri/Flags E_HostNotCanonical
      static System::Uri::Flags _get_E_HostNotCanonical();
      // Set static field: static public System.Uri/Flags E_HostNotCanonical
      static void _set_E_HostNotCanonical(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags E_PortNotCanonical
      static constexpr const uint64_t E_PortNotCanonical = 512u;
      // Get static field: static public System.Uri/Flags E_PortNotCanonical
      static System::Uri::Flags _get_E_PortNotCanonical();
      // Set static field: static public System.Uri/Flags E_PortNotCanonical
      static void _set_E_PortNotCanonical(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags E_PathNotCanonical
      static constexpr const uint64_t E_PathNotCanonical = 1024u;
      // Get static field: static public System.Uri/Flags E_PathNotCanonical
      static System::Uri::Flags _get_E_PathNotCanonical();
      // Set static field: static public System.Uri/Flags E_PathNotCanonical
      static void _set_E_PathNotCanonical(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags E_QueryNotCanonical
      static constexpr const uint64_t E_QueryNotCanonical = 2048u;
      // Get static field: static public System.Uri/Flags E_QueryNotCanonical
      static System::Uri::Flags _get_E_QueryNotCanonical();
      // Set static field: static public System.Uri/Flags E_QueryNotCanonical
      static void _set_E_QueryNotCanonical(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags E_FragmentNotCanonical
      static constexpr const uint64_t E_FragmentNotCanonical = 4096u;
      // Get static field: static public System.Uri/Flags E_FragmentNotCanonical
      static System::Uri::Flags _get_E_FragmentNotCanonical();
      // Set static field: static public System.Uri/Flags E_FragmentNotCanonical
      static void _set_E_FragmentNotCanonical(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags E_CannotDisplayCanonical
      static constexpr const uint64_t E_CannotDisplayCanonical = 8064u;
      // Get static field: static public System.Uri/Flags E_CannotDisplayCanonical
      static System::Uri::Flags _get_E_CannotDisplayCanonical();
      // Set static field: static public System.Uri/Flags E_CannotDisplayCanonical
      static void _set_E_CannotDisplayCanonical(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags ShouldBeCompressed
      static constexpr const uint64_t ShouldBeCompressed = 8192u;
      // Get static field: static public System.Uri/Flags ShouldBeCompressed
      static System::Uri::Flags _get_ShouldBeCompressed();
      // Set static field: static public System.Uri/Flags ShouldBeCompressed
      static void _set_ShouldBeCompressed(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags FirstSlashAbsent
      static constexpr const uint64_t FirstSlashAbsent = 16384u;
      // Get static field: static public System.Uri/Flags FirstSlashAbsent
      static System::Uri::Flags _get_FirstSlashAbsent();
      // Set static field: static public System.Uri/Flags FirstSlashAbsent
      static void _set_FirstSlashAbsent(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags BackslashInPath
      static constexpr const uint64_t BackslashInPath = 32768u;
      // Get static field: static public System.Uri/Flags BackslashInPath
      static System::Uri::Flags _get_BackslashInPath();
      // Set static field: static public System.Uri/Flags BackslashInPath
      static void _set_BackslashInPath(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags IndexMask
      static constexpr const uint64_t IndexMask = 65535u;
      // Get static field: static public System.Uri/Flags IndexMask
      static System::Uri::Flags _get_IndexMask();
      // Set static field: static public System.Uri/Flags IndexMask
      static void _set_IndexMask(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags HostTypeMask
      static constexpr const uint64_t HostTypeMask = 458752u;
      // Get static field: static public System.Uri/Flags HostTypeMask
      static System::Uri::Flags _get_HostTypeMask();
      // Set static field: static public System.Uri/Flags HostTypeMask
      static void _set_HostTypeMask(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags HostNotParsed
      static constexpr const uint64_t HostNotParsed = 0u;
      // Get static field: static public System.Uri/Flags HostNotParsed
      static System::Uri::Flags _get_HostNotParsed();
      // Set static field: static public System.Uri/Flags HostNotParsed
      static void _set_HostNotParsed(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags IPv6HostType
      static constexpr const uint64_t IPv6HostType = 65536u;
      // Get static field: static public System.Uri/Flags IPv6HostType
      static System::Uri::Flags _get_IPv6HostType();
      // Set static field: static public System.Uri/Flags IPv6HostType
      static void _set_IPv6HostType(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags IPv4HostType
      static constexpr const uint64_t IPv4HostType = 131072u;
      // Get static field: static public System.Uri/Flags IPv4HostType
      static System::Uri::Flags _get_IPv4HostType();
      // Set static field: static public System.Uri/Flags IPv4HostType
      static void _set_IPv4HostType(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags DnsHostType
      static constexpr const uint64_t DnsHostType = 196608u;
      // Get static field: static public System.Uri/Flags DnsHostType
      static System::Uri::Flags _get_DnsHostType();
      // Set static field: static public System.Uri/Flags DnsHostType
      static void _set_DnsHostType(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags UncHostType
      static constexpr const uint64_t UncHostType = 262144u;
      // Get static field: static public System.Uri/Flags UncHostType
      static System::Uri::Flags _get_UncHostType();
      // Set static field: static public System.Uri/Flags UncHostType
      static void _set_UncHostType(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags BasicHostType
      static constexpr const uint64_t BasicHostType = 327680u;
      // Get static field: static public System.Uri/Flags BasicHostType
      static System::Uri::Flags _get_BasicHostType();
      // Set static field: static public System.Uri/Flags BasicHostType
      static void _set_BasicHostType(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags UnusedHostType
      static constexpr const uint64_t UnusedHostType = 393216u;
      // Get static field: static public System.Uri/Flags UnusedHostType
      static System::Uri::Flags _get_UnusedHostType();
      // Set static field: static public System.Uri/Flags UnusedHostType
      static void _set_UnusedHostType(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags UnknownHostType
      static constexpr const uint64_t UnknownHostType = 458752u;
      // Get static field: static public System.Uri/Flags UnknownHostType
      static System::Uri::Flags _get_UnknownHostType();
      // Set static field: static public System.Uri/Flags UnknownHostType
      static void _set_UnknownHostType(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags UserEscaped
      static constexpr const uint64_t UserEscaped = 524288u;
      // Get static field: static public System.Uri/Flags UserEscaped
      static System::Uri::Flags _get_UserEscaped();
      // Set static field: static public System.Uri/Flags UserEscaped
      static void _set_UserEscaped(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags AuthorityFound
      static constexpr const uint64_t AuthorityFound = 1048576u;
      // Get static field: static public System.Uri/Flags AuthorityFound
      static System::Uri::Flags _get_AuthorityFound();
      // Set static field: static public System.Uri/Flags AuthorityFound
      static void _set_AuthorityFound(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags HasUserInfo
      static constexpr const uint64_t HasUserInfo = 2097152u;
      // Get static field: static public System.Uri/Flags HasUserInfo
      static System::Uri::Flags _get_HasUserInfo();
      // Set static field: static public System.Uri/Flags HasUserInfo
      static void _set_HasUserInfo(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags LoopbackHost
      static constexpr const uint64_t LoopbackHost = 4194304u;
      // Get static field: static public System.Uri/Flags LoopbackHost
      static System::Uri::Flags _get_LoopbackHost();
      // Set static field: static public System.Uri/Flags LoopbackHost
      static void _set_LoopbackHost(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags NotDefaultPort
      static constexpr const uint64_t NotDefaultPort = 8388608u;
      // Get static field: static public System.Uri/Flags NotDefaultPort
      static System::Uri::Flags _get_NotDefaultPort();
      // Set static field: static public System.Uri/Flags NotDefaultPort
      static void _set_NotDefaultPort(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags UserDrivenParsing
      static constexpr const uint64_t UserDrivenParsing = 16777216u;
      // Get static field: static public System.Uri/Flags UserDrivenParsing
      static System::Uri::Flags _get_UserDrivenParsing();
      // Set static field: static public System.Uri/Flags UserDrivenParsing
      static void _set_UserDrivenParsing(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags CanonicalDnsHost
      static constexpr const uint64_t CanonicalDnsHost = 33554432u;
      // Get static field: static public System.Uri/Flags CanonicalDnsHost
      static System::Uri::Flags _get_CanonicalDnsHost();
      // Set static field: static public System.Uri/Flags CanonicalDnsHost
      static void _set_CanonicalDnsHost(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags ErrorOrParsingRecursion
      static constexpr const uint64_t ErrorOrParsingRecursion = 67108864u;
      // Get static field: static public System.Uri/Flags ErrorOrParsingRecursion
      static System::Uri::Flags _get_ErrorOrParsingRecursion();
      // Set static field: static public System.Uri/Flags ErrorOrParsingRecursion
      static void _set_ErrorOrParsingRecursion(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags DosPath
      static constexpr const uint64_t DosPath = 134217728u;
      // Get static field: static public System.Uri/Flags DosPath
      static System::Uri::Flags _get_DosPath();
      // Set static field: static public System.Uri/Flags DosPath
      static void _set_DosPath(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags UncPath
      static constexpr const uint64_t UncPath = 268435456u;
      // Get static field: static public System.Uri/Flags UncPath
      static System::Uri::Flags _get_UncPath();
      // Set static field: static public System.Uri/Flags UncPath
      static void _set_UncPath(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags ImplicitFile
      static constexpr const uint64_t ImplicitFile = 536870912u;
      // Get static field: static public System.Uri/Flags ImplicitFile
      static System::Uri::Flags _get_ImplicitFile();
      // Set static field: static public System.Uri/Flags ImplicitFile
      static void _set_ImplicitFile(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags MinimalUriInfoSet
      static constexpr const uint64_t MinimalUriInfoSet = 1073741824u;
      // Get static field: static public System.Uri/Flags MinimalUriInfoSet
      static System::Uri::Flags _get_MinimalUriInfoSet();
      // Set static field: static public System.Uri/Flags MinimalUriInfoSet
      static void _set_MinimalUriInfoSet(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags AllUriInfoSet
      static constexpr const uint64_t AllUriInfoSet = 2147483648u;
      // Get static field: static public System.Uri/Flags AllUriInfoSet
      static System::Uri::Flags _get_AllUriInfoSet();
      // Set static field: static public System.Uri/Flags AllUriInfoSet
      static void _set_AllUriInfoSet(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags IdnHost
      static constexpr const uint64_t IdnHost = 4294967296u;
      // Get static field: static public System.Uri/Flags IdnHost
      static System::Uri::Flags _get_IdnHost();
      // Set static field: static public System.Uri/Flags IdnHost
      static void _set_IdnHost(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags HasUnicode
      static constexpr const uint64_t HasUnicode = 8589934592u;
      // Get static field: static public System.Uri/Flags HasUnicode
      static System::Uri::Flags _get_HasUnicode();
      // Set static field: static public System.Uri/Flags HasUnicode
      static void _set_HasUnicode(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags HostUnicodeNormalized
      static constexpr const uint64_t HostUnicodeNormalized = 17179869184u;
      // Get static field: static public System.Uri/Flags HostUnicodeNormalized
      static System::Uri::Flags _get_HostUnicodeNormalized();
      // Set static field: static public System.Uri/Flags HostUnicodeNormalized
      static void _set_HostUnicodeNormalized(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags RestUnicodeNormalized
      static constexpr const uint64_t RestUnicodeNormalized = 34359738368u;
      // Get static field: static public System.Uri/Flags RestUnicodeNormalized
      static System::Uri::Flags _get_RestUnicodeNormalized();
      // Set static field: static public System.Uri/Flags RestUnicodeNormalized
      static void _set_RestUnicodeNormalized(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags UnicodeHost
      static constexpr const uint64_t UnicodeHost = 68719476736u;
      // Get static field: static public System.Uri/Flags UnicodeHost
      static System::Uri::Flags _get_UnicodeHost();
      // Set static field: static public System.Uri/Flags UnicodeHost
      static void _set_UnicodeHost(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags IntranetUri
      static constexpr const uint64_t IntranetUri = 137438953472u;
      // Get static field: static public System.Uri/Flags IntranetUri
      static System::Uri::Flags _get_IntranetUri();
      // Set static field: static public System.Uri/Flags IntranetUri
      static void _set_IntranetUri(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags UseOrigUncdStrOffset
      static constexpr const uint64_t UseOrigUncdStrOffset = 274877906944u;
      // Get static field: static public System.Uri/Flags UseOrigUncdStrOffset
      static System::Uri::Flags _get_UseOrigUncdStrOffset();
      // Set static field: static public System.Uri/Flags UseOrigUncdStrOffset
      static void _set_UseOrigUncdStrOffset(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags UserIriCanonical
      static constexpr const uint64_t UserIriCanonical = 549755813888u;
      // Get static field: static public System.Uri/Flags UserIriCanonical
      static System::Uri::Flags _get_UserIriCanonical();
      // Set static field: static public System.Uri/Flags UserIriCanonical
      static void _set_UserIriCanonical(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags PathIriCanonical
      static constexpr const uint64_t PathIriCanonical = 1099511627776u;
      // Get static field: static public System.Uri/Flags PathIriCanonical
      static System::Uri::Flags _get_PathIriCanonical();
      // Set static field: static public System.Uri/Flags PathIriCanonical
      static void _set_PathIriCanonical(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags QueryIriCanonical
      static constexpr const uint64_t QueryIriCanonical = 2199023255552u;
      // Get static field: static public System.Uri/Flags QueryIriCanonical
      static System::Uri::Flags _get_QueryIriCanonical();
      // Set static field: static public System.Uri/Flags QueryIriCanonical
      static void _set_QueryIriCanonical(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags FragmentIriCanonical
      static constexpr const uint64_t FragmentIriCanonical = 4398046511104u;
      // Get static field: static public System.Uri/Flags FragmentIriCanonical
      static System::Uri::Flags _get_FragmentIriCanonical();
      // Set static field: static public System.Uri/Flags FragmentIriCanonical
      static void _set_FragmentIriCanonical(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags IriCanonical
      static constexpr const uint64_t IriCanonical = 8246337208320u;
      // Get static field: static public System.Uri/Flags IriCanonical
      static System::Uri::Flags _get_IriCanonical();
      // Set static field: static public System.Uri/Flags IriCanonical
      static void _set_IriCanonical(System::Uri::Flags value);
      // static field const value: static public System.Uri/Flags CompressedSlashes
      static constexpr const uint64_t CompressedSlashes = 17592186044416u;
      // Get static field: static public System.Uri/Flags CompressedSlashes
      static System::Uri::Flags _get_CompressedSlashes();
      // Set static field: static public System.Uri/Flags CompressedSlashes
      static void _set_CompressedSlashes(System::Uri::Flags value);
    }; // System.Uri/Flags
    #pragma pack(pop)
    static check_size<sizeof(Uri::Flags), 0 + sizeof(uint64_t)> __System_Uri_FlagsSizeCheck;
    static_assert(sizeof(Uri::Flags) == 0x8);
    // private System.String m_String
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* m_String;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String m_originalUnicodeString
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* m_originalUnicodeString;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.UriParser m_Syntax
    // Size: 0x8
    // Offset: 0x20
    System::UriParser* m_Syntax;
    // Field size check
    static_assert(sizeof(System::UriParser*) == 0x8);
    // private System.String m_DnsSafeHost
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppString* m_DnsSafeHost;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Uri/Flags m_Flags
    // Size: 0x8
    // Offset: 0x30
    System::Uri::Flags m_Flags;
    // Field size check
    static_assert(sizeof(System::Uri::Flags) == 0x8);
    // private System.Uri/UriInfo m_Info
    // Size: 0x8
    // Offset: 0x38
    System::Uri::UriInfo* m_Info;
    // Field size check
    static_assert(sizeof(System::Uri::UriInfo*) == 0x8);
    // private System.Boolean m_iriParsing
    // Size: 0x1
    // Offset: 0x40
    bool m_iriParsing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: Uri
    Uri(::Il2CppString* m_String_ = {}, ::Il2CppString* m_originalUnicodeString_ = {}, System::UriParser* m_Syntax_ = {}, ::Il2CppString* m_DnsSafeHost_ = {}, System::Uri::Flags m_Flags_ = {}, System::Uri::UriInfo* m_Info_ = {}, bool m_iriParsing_ = {}) noexcept : m_String{m_String_}, m_originalUnicodeString{m_originalUnicodeString_}, m_Syntax{m_Syntax_}, m_DnsSafeHost{m_DnsSafeHost_}, m_Flags{m_Flags_}, m_Info{m_Info_}, m_iriParsing{m_iriParsing_} {}
    // Creating interface conversion operator: operator System::Runtime::Serialization::ISerializable
    operator System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<System::Runtime::Serialization::ISerializable*>(this);
    }
    // Get static field: static public readonly System.String UriSchemeFile
    static ::Il2CppString* _get_UriSchemeFile();
    // Set static field: static public readonly System.String UriSchemeFile
    static void _set_UriSchemeFile(::Il2CppString* value);
    // Get static field: static public readonly System.String UriSchemeFtp
    static ::Il2CppString* _get_UriSchemeFtp();
    // Set static field: static public readonly System.String UriSchemeFtp
    static void _set_UriSchemeFtp(::Il2CppString* value);
    // Get static field: static public readonly System.String UriSchemeGopher
    static ::Il2CppString* _get_UriSchemeGopher();
    // Set static field: static public readonly System.String UriSchemeGopher
    static void _set_UriSchemeGopher(::Il2CppString* value);
    // Get static field: static public readonly System.String UriSchemeHttp
    static ::Il2CppString* _get_UriSchemeHttp();
    // Set static field: static public readonly System.String UriSchemeHttp
    static void _set_UriSchemeHttp(::Il2CppString* value);
    // Get static field: static public readonly System.String UriSchemeHttps
    static ::Il2CppString* _get_UriSchemeHttps();
    // Set static field: static public readonly System.String UriSchemeHttps
    static void _set_UriSchemeHttps(::Il2CppString* value);
    // Get static field: static readonly System.String UriSchemeWs
    static ::Il2CppString* _get_UriSchemeWs();
    // Set static field: static readonly System.String UriSchemeWs
    static void _set_UriSchemeWs(::Il2CppString* value);
    // Get static field: static readonly System.String UriSchemeWss
    static ::Il2CppString* _get_UriSchemeWss();
    // Set static field: static readonly System.String UriSchemeWss
    static void _set_UriSchemeWss(::Il2CppString* value);
    // Get static field: static public readonly System.String UriSchemeMailto
    static ::Il2CppString* _get_UriSchemeMailto();
    // Set static field: static public readonly System.String UriSchemeMailto
    static void _set_UriSchemeMailto(::Il2CppString* value);
    // Get static field: static public readonly System.String UriSchemeNews
    static ::Il2CppString* _get_UriSchemeNews();
    // Set static field: static public readonly System.String UriSchemeNews
    static void _set_UriSchemeNews(::Il2CppString* value);
    // Get static field: static public readonly System.String UriSchemeNntp
    static ::Il2CppString* _get_UriSchemeNntp();
    // Set static field: static public readonly System.String UriSchemeNntp
    static void _set_UriSchemeNntp(::Il2CppString* value);
    // Get static field: static public readonly System.String UriSchemeNetTcp
    static ::Il2CppString* _get_UriSchemeNetTcp();
    // Set static field: static public readonly System.String UriSchemeNetTcp
    static void _set_UriSchemeNetTcp(::Il2CppString* value);
    // Get static field: static public readonly System.String UriSchemeNetPipe
    static ::Il2CppString* _get_UriSchemeNetPipe();
    // Set static field: static public readonly System.String UriSchemeNetPipe
    static void _set_UriSchemeNetPipe(::Il2CppString* value);
    // Get static field: static public readonly System.String SchemeDelimiter
    static ::Il2CppString* _get_SchemeDelimiter();
    // Set static field: static public readonly System.String SchemeDelimiter
    static void _set_SchemeDelimiter(::Il2CppString* value);
    // Get static field: static private System.Boolean s_ConfigInitialized
    static bool _get_s_ConfigInitialized();
    // Set static field: static private System.Boolean s_ConfigInitialized
    static void _set_s_ConfigInitialized(bool value);
    // Get static field: static private System.Boolean s_ConfigInitializing
    static bool _get_s_ConfigInitializing();
    // Set static field: static private System.Boolean s_ConfigInitializing
    static void _set_s_ConfigInitializing(bool value);
    // Get static field: static private System.UriIdnScope s_IdnScope
    static System::UriIdnScope _get_s_IdnScope();
    // Set static field: static private System.UriIdnScope s_IdnScope
    static void _set_s_IdnScope(System::UriIdnScope value);
    // Get static field: static private System.Boolean s_IriParsing
    static bool _get_s_IriParsing();
    // Set static field: static private System.Boolean s_IriParsing
    static void _set_s_IriParsing(bool value);
    // Get static field: static private System.Boolean useDotNetRelativeOrAbsolute
    static bool _get_useDotNetRelativeOrAbsolute();
    // Set static field: static private System.Boolean useDotNetRelativeOrAbsolute
    static void _set_useDotNetRelativeOrAbsolute(bool value);
    // Get static field: static readonly System.Boolean IsWindowsFileSystem
    static bool _get_IsWindowsFileSystem();
    // Set static field: static readonly System.Boolean IsWindowsFileSystem
    static void _set_IsWindowsFileSystem(bool value);
    // Get static field: static private System.Object s_initLock
    static ::Il2CppObject* _get_s_initLock();
    // Set static field: static private System.Object s_initLock
    static void _set_s_initLock(::Il2CppObject* value);
    // Get static field: static readonly System.Char[] HexLowerChars
    static ::Array<::Il2CppChar>* _get_HexLowerChars();
    // Set static field: static readonly System.Char[] HexLowerChars
    static void _set_HexLowerChars(::Array<::Il2CppChar>* value);
    // Get static field: static private readonly System.Char[] _WSchars
    static ::Array<::Il2CppChar>* _get__WSchars();
    // Set static field: static private readonly System.Char[] _WSchars
    static void _set__WSchars(::Array<::Il2CppChar>* value);
    // private System.Boolean get_IsImplicitFile()
    // Offset: 0x18BFC0C
    bool get_IsImplicitFile();
    // private System.Boolean get_IsUncOrDosPath()
    // Offset: 0x18BFC18
    bool get_IsUncOrDosPath();
    // private System.Boolean get_IsDosPath()
    // Offset: 0x18BFC28
    bool get_IsDosPath();
    // private System.Boolean get_IsUncPath()
    // Offset: 0x18BFC34
    bool get_IsUncPath();
    // private System.Uri/Flags get_HostType()
    // Offset: 0x18BFC40
    System::Uri::Flags get_HostType();
    // private System.UriParser get_Syntax()
    // Offset: 0x18BFC4C
    System::UriParser* get_Syntax();
    // private System.Boolean get_IsNotAbsoluteUri()
    // Offset: 0x18BFC54
    bool get_IsNotAbsoluteUri();
    // static System.Boolean IriParsingStatic(System.UriParser syntax)
    // Offset: 0x18BFC64
    static bool IriParsingStatic(System::UriParser* syntax);
    // private System.Boolean get_AllowIdn()
    // Offset: 0x18BFD00
    bool get_AllowIdn();
    // private System.Boolean AllowIdnStatic(System.UriParser syntax, System.Uri/Flags flags)
    // Offset: 0x18BFDEC
    bool AllowIdnStatic(System::UriParser* syntax, System::Uri::Flags flags);
    // private System.Boolean IsIntranet(System.String schemeHost)
    // Offset: 0x18BFEE8
    bool IsIntranet(::Il2CppString* schemeHost);
    // System.Boolean get_UserDrivenParsing()
    // Offset: 0x18BFEF0
    bool get_UserDrivenParsing();
    // private System.Void SetUserDrivenParsing()
    // Offset: 0x18BFEFC
    void SetUserDrivenParsing();
    // private System.UInt16 get_SecuredPathIndex()
    // Offset: 0x18BFF10
    uint16_t get_SecuredPathIndex();
    // private System.Boolean NotAny(System.Uri/Flags flags)
    // Offset: 0x18BFDDC
    bool NotAny(System::Uri::Flags flags);
    // private System.Boolean InFact(System.Uri/Flags flags)
    // Offset: 0x18BFF70
    bool InFact(System::Uri::Flags flags);
    // static private System.Boolean StaticNotAny(System.Uri/Flags allFlags, System.Uri/Flags checkFlags)
    // Offset: 0x18BFEDC
    static bool StaticNotAny(System::Uri::Flags allFlags, System::Uri::Flags checkFlags);
    // static private System.Boolean StaticInFact(System.Uri/Flags allFlags, System.Uri/Flags checkFlags)
    // Offset: 0x18BFF80
    static bool StaticInFact(System::Uri::Flags allFlags, System::Uri::Flags checkFlags);
    // private System.Uri/UriInfo EnsureUriInfo()
    // Offset: 0x18BFF8C
    System::Uri::UriInfo* EnsureUriInfo();
    // private System.Void EnsureParseRemaining()
    // Offset: 0x18C0560
    void EnsureParseRemaining();
    // private System.Void EnsureHostString(System.Boolean allowDnsOptimization)
    // Offset: 0x18C11DC
    void EnsureHostString(bool allowDnsOptimization);
    // public System.Void .ctor(System.String uriString)
    // Offset: 0x18C1650
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Uri* New_ctor(::Il2CppString* uriString) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Uri::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Uri*, creationType>(uriString)));
    }
    // public System.Void .ctor(System.String uriString, System.UriKind uriKind)
    // Offset: 0x18C18C8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Uri* New_ctor(::Il2CppString* uriString, System::UriKind uriKind) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Uri::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Uri*, creationType>(uriString, uriKind)));
    }
    // public System.Void .ctor(System.Uri baseUri, System.String relativeUri)
    // Offset: 0x18C1974
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Uri* New_ctor(System::Uri* baseUri, ::Il2CppString* relativeUri) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Uri::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Uri*, creationType>(baseUri, relativeUri)));
    }
    // private System.Void CreateUri(System.Uri baseUri, System.String relativeUri, System.Boolean dontEscape)
    // Offset: 0x18C1A64
    void CreateUri(System::Uri* baseUri, ::Il2CppString* relativeUri, bool dontEscape);
    // public System.Void .ctor(System.Uri baseUri, System.Uri relativeUri)
    // Offset: 0x18C229C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Uri* New_ctor(System::Uri* baseUri, System::Uri* relativeUri) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Uri::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Uri*, creationType>(baseUri, relativeUri)));
    }
    // static private System.ParsingError GetCombinedString(System.Uri baseUri, System.String relativeStr, System.Boolean dontEscape, ref System.String result)
    // Offset: 0x18C24B8
    static System::ParsingError GetCombinedString(System::Uri* baseUri, ::Il2CppString* relativeStr, bool dontEscape, ::Il2CppString*& result);
    // static private System.UriFormatException GetException(System.ParsingError err)
    // Offset: 0x18C335C
    static System::UriFormatException* GetException(System::ParsingError err);
    // protected System.Void .ctor(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    // Offset: 0x18C3478
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Uri* New_ctor(System::Runtime::Serialization::SerializationInfo* serializationInfo, System::Runtime::Serialization::StreamingContext streamingContext) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Uri::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Uri*, creationType>(serializationInfo, streamingContext)));
    }
    // protected System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    // Offset: 0x18C3574
    void GetObjectData(System::Runtime::Serialization::SerializationInfo* serializationInfo, System::Runtime::Serialization::StreamingContext streamingContext);
    // public System.String get_AbsolutePath()
    // Offset: 0x18C3648
    ::Il2CppString* get_AbsolutePath();
    // private System.String get_PrivateAbsolutePath()
    // Offset: 0x18C3734
    ::Il2CppString* get_PrivateAbsolutePath();
    // public System.String get_AbsoluteUri()
    // Offset: 0x18C3810
    ::Il2CppString* get_AbsoluteUri();
    // public System.String get_LocalPath()
    // Offset: 0x18C3940
    ::Il2CppString* get_LocalPath();
    // public System.String get_Authority()
    // Offset: 0x18C3FF0
    ::Il2CppString* get_Authority();
    // public System.UriHostNameType get_HostNameType()
    // Offset: 0x18C4094
    System::UriHostNameType get_HostNameType();
    // public System.Boolean get_IsDefaultPort()
    // Offset: 0x18C41BC
    bool get_IsDefaultPort();
    // public System.Boolean get_IsFile()
    // Offset: 0x18C4294
    bool get_IsFile();
    // public System.Boolean get_IsLoopback()
    // Offset: 0x18C4364
    bool get_IsLoopback();
    // public System.String get_PathAndQuery()
    // Offset: 0x18C4410
    ::Il2CppString* get_PathAndQuery();
    // public System.Boolean get_IsUnc()
    // Offset: 0x18C4504
    bool get_IsUnc();
    // public System.String get_Host()
    // Offset: 0x18C45A4
    ::Il2CppString* get_Host();
    // static private System.Boolean StaticIsFile(System.UriParser syntax)
    // Offset: 0x18C4648
    static bool StaticIsFile(System::UriParser* syntax);
    // static private System.Object get_InitializeLock()
    // Offset: 0x18C4664
    static ::Il2CppObject* get_InitializeLock();
    // static private System.Void InitializeUriConfig()
    // Offset: 0x18C4744
    static void InitializeUriConfig();
    // private System.String GetLocalPath()
    // Offset: 0x18C39DC
    ::Il2CppString* GetLocalPath();
    // public System.Int32 get_Port()
    // Offset: 0x18C4EB8
    int get_Port();
    // public System.String get_Query()
    // Offset: 0x18C4FAC
    ::Il2CppString* get_Query();
    // public System.String get_Fragment()
    // Offset: 0x18C50E0
    ::Il2CppString* get_Fragment();
    // public System.String get_Scheme()
    // Offset: 0x18C5214
    ::Il2CppString* get_Scheme();
    // private System.Boolean get_OriginalStringSwitched()
    // Offset: 0x18C52B0
    bool get_OriginalStringSwitched();
    // public System.String get_OriginalString()
    // Offset: 0x18C2880
    ::Il2CppString* get_OriginalString();
    // public System.String get_DnsSafeHost()
    // Offset: 0x18C5304
    ::Il2CppString* get_DnsSafeHost();
    // public System.Boolean get_IsAbsoluteUri()
    // Offset: 0x18C1A54
    bool get_IsAbsoluteUri();
    // public System.Boolean get_UserEscaped()
    // Offset: 0x18C5558
    bool get_UserEscaped();
    // public System.String get_UserInfo()
    // Offset: 0x18C5564
    ::Il2CppString* get_UserInfo();
    // static System.Boolean IsGenDelim(System.Char ch)
    // Offset: 0x18C5608
    static bool IsGenDelim(::Il2CppChar ch);
    // static public System.Boolean CheckSchemeName(System.String schemeName)
    // Offset: 0x18C5654
    static bool CheckSchemeName(::Il2CppString* schemeName);
    // static public System.Boolean IsHexDigit(System.Char character)
    // Offset: 0x18C5864
    static bool IsHexDigit(::Il2CppChar character);
    // static public System.Int32 FromHex(System.Char digit)
    // Offset: 0x18C58A0
    static int FromHex(::Il2CppChar digit);
    // static private System.Boolean CheckForColonInFirstPathSegment(System.String uriString)
    // Offset: 0x18C6590
    static bool CheckForColonInFirstPathSegment(::Il2CppString* uriString);
    // static System.String InternalEscapeString(System.String rawString)
    // Offset: 0x18C663C
    static ::Il2CppString* InternalEscapeString(::Il2CppString* rawString);
    // static private System.ParsingError ParseScheme(System.String uriString, ref System.Uri/Flags flags, ref System.UriParser syntax)
    // Offset: 0x18C6720
    static System::ParsingError ParseScheme(::Il2CppString* uriString, System::Uri::Flags& flags, System::UriParser*& syntax);
    // System.UriFormatException ParseMinimal()
    // Offset: 0x18C6D78
    System::UriFormatException* ParseMinimal();
    // private System.ParsingError PrivateParseMinimal()
    // Offset: 0x18C6E08
    System::ParsingError PrivateParseMinimal();
    // private System.Void PrivateParseMinimalIri(System.String newHost, System.UInt16 idx)
    // Offset: 0x18C845C
    void PrivateParseMinimalIri(::Il2CppString* newHost, uint16_t idx);
    // private System.Void CreateUriInfo(System.Uri/Flags cF)
    // Offset: 0x18BFFBC
    void CreateUriInfo(System::Uri::Flags cF);
    // private System.Void CreateHostString()
    // Offset: 0x18C1240
    void CreateHostString();
    // static private System.String CreateHostStringHelper(System.String str, System.UInt16 idx, System.UInt16 end, ref System.Uri/Flags flags, ref System.String scopeId)
    // Offset: 0x18C89B8
    static ::Il2CppString* CreateHostStringHelper(::Il2CppString* str, uint16_t idx, uint16_t end, System::Uri::Flags& flags, ::Il2CppString*& scopeId);
    // private System.Void GetHostViaCustomSyntax()
    // Offset: 0x18C8554
    void GetHostViaCustomSyntax();
    // System.String GetParts(System.UriComponents uriParts, System.UriFormat formatAs)
    // Offset: 0x18C3644
    ::Il2CppString* GetParts(System::UriComponents uriParts, System::UriFormat formatAs);
    // private System.String GetEscapedParts(System.UriComponents uriParts)
    // Offset: 0x18C91A4
    ::Il2CppString* GetEscapedParts(System::UriComponents uriParts);
    // private System.String GetUnescapedParts(System.UriComponents uriParts, System.UriFormat formatAs)
    // Offset: 0x18C4DE4
    ::Il2CppString* GetUnescapedParts(System::UriComponents uriParts, System::UriFormat formatAs);
    // private System.String ReCreateParts(System.UriComponents parts, System.UInt16 nonCanonical, System.UriFormat formatAs)
    // Offset: 0x18C981C
    ::Il2CppString* ReCreateParts(System::UriComponents parts, uint16_t nonCanonical, System::UriFormat formatAs);
    // private System.String GetUriPartsFromUserString(System.UriComponents uriParts)
    // Offset: 0x18C927C
    ::Il2CppString* GetUriPartsFromUserString(System::UriComponents uriParts);
    // private System.Void ParseRemaining()
    // Offset: 0x18C0570
    void ParseRemaining();
    // static private System.UInt16 ParseSchemeCheckImplicitFile(System.Char* uriString, System.UInt16 length, ref System.ParsingError err, ref System.Uri/Flags flags, ref System.UriParser syntax)
    // Offset: 0x18C6810
    static uint16_t ParseSchemeCheckImplicitFile(::Il2CppChar* uriString, uint16_t length, System::ParsingError& err, System::Uri::Flags& flags, System::UriParser*& syntax);
    // static private System.Boolean CheckKnownSchemes(System.Int64* lptr, System.UInt16 nChars, ref System.UriParser syntax)
    // Offset: 0x18CAE08
    static bool CheckKnownSchemes(int64_t* lptr, uint16_t nChars, System::UriParser*& syntax);
    // static private System.ParsingError CheckSchemeSyntax(System.Char* ptr, System.UInt16 length, ref System.UriParser syntax)
    // Offset: 0x18C2730
    static System::ParsingError CheckSchemeSyntax(::Il2CppChar* ptr, uint16_t length, System::UriParser*& syntax);
    // private System.UInt16 CheckAuthorityHelper(System.Char* pString, System.UInt16 idx, System.UInt16 length, ref System.ParsingError err, ref System.Uri/Flags flags, System.UriParser syntax, ref System.String newHost)
    // Offset: 0x18C7528
    uint16_t CheckAuthorityHelper(::Il2CppChar* pString, uint16_t idx, uint16_t length, System::ParsingError& err, System::Uri::Flags& flags, System::UriParser* syntax, ::Il2CppString*& newHost);
    // private System.Void CheckAuthorityHelperHandleDnsIri(System.Char* pString, System.UInt16 start, System.Int32 end, System.Int32 startInput, System.Boolean iriParsing, System.Boolean hasUnicode, System.UriParser syntax, System.String userInfoString, ref System.Uri/Flags flags, ref System.Boolean justNormalized, ref System.String newHost, ref System.ParsingError err)
    // Offset: 0x18CB400
    void CheckAuthorityHelperHandleDnsIri(::Il2CppChar* pString, uint16_t start, int end, int startInput, bool iriParsing, bool hasUnicode, System::UriParser* syntax, ::Il2CppString* userInfoString, System::Uri::Flags& flags, bool& justNormalized, ::Il2CppString*& newHost, System::ParsingError& err);
    // private System.Void CheckAuthorityHelperHandleAnyHostIri(System.Char* pString, System.Int32 startInput, System.Int32 end, System.Boolean iriParsing, System.Boolean hasUnicode, System.UriParser syntax, ref System.Uri/Flags flags, ref System.String newHost, ref System.ParsingError err)
    // Offset: 0x18CB7D0
    void CheckAuthorityHelperHandleAnyHostIri(::Il2CppChar* pString, int startInput, int end, bool iriParsing, bool hasUnicode, System::UriParser* syntax, System::Uri::Flags& flags, ::Il2CppString*& newHost, System::ParsingError& err);
    // private System.Void FindEndOfComponent(System.String input, ref System.UInt16 idx, System.UInt16 end, System.Char delim)
    // Offset: 0x18CAD54
    void FindEndOfComponent(::Il2CppString* input, uint16_t& idx, uint16_t end, ::Il2CppChar delim);
    // private System.Void FindEndOfComponent(System.Char* str, ref System.UInt16 idx, System.UInt16 end, System.Char delim)
    // Offset: 0x18CBC78
    void FindEndOfComponent(::Il2CppChar* str, uint16_t& idx, uint16_t end, ::Il2CppChar delim);
    // private System.Uri/Check CheckCanonical(System.Char* str, ref System.UInt16 idx, System.UInt16 end, System.Char delim)
    // Offset: 0x18C8B9C
    System::Uri::Check CheckCanonical(::Il2CppChar* str, uint16_t& idx, uint16_t end, ::Il2CppChar delim);
    // private System.Char[] GetCanonicalPath(System.Char[] dest, ref System.Int32 pos, System.UriFormat formatAs)
    // Offset: 0x18CA6B8
    ::Array<::Il2CppChar>* GetCanonicalPath(::Array<::Il2CppChar>* dest, int& pos, System::UriFormat formatAs);
    // static private System.Void UnescapeOnly(System.Char* pch, System.Int32 start, ref System.Int32 end, System.Char ch1, System.Char ch2, System.Char ch3)
    // Offset: 0x18CBD10
    static void UnescapeOnly(::Il2CppChar* pch, int start, int& end, ::Il2CppChar ch1, ::Il2CppChar ch2, ::Il2CppChar ch3);
    // static private System.Char[] Compress(System.Char[] dest, System.UInt16 start, ref System.Int32 destLength, System.UriParser syntax)
    // Offset: 0x18C48F8
    static ::Array<::Il2CppChar>* Compress(::Array<::Il2CppChar>* dest, uint16_t start, int& destLength, System::UriParser* syntax);
    // static System.Int32 CalculateCaseInsensitiveHashCode(System.String text)
    // Offset: 0x18C5AD4
    static int CalculateCaseInsensitiveHashCode(::Il2CppString* text);
    // static private System.String CombineUri(System.Uri basePart, System.String relativePart, System.UriFormat uriFormat)
    // Offset: 0x18C28B4
    static ::Il2CppString* CombineUri(System::Uri* basePart, ::Il2CppString* relativePart, System::UriFormat uriFormat);
    // System.Boolean get_HasAuthority()
    // Offset: 0x18CBF50
    bool get_HasAuthority();
    // static private System.Boolean IsLWS(System.Char ch)
    // Offset: 0x18C74E8
    static bool IsLWS(::Il2CppChar ch);
    // static private System.Boolean IsAsciiLetter(System.Char character)
    // Offset: 0x18C57AC
    static bool IsAsciiLetter(::Il2CppChar character);
    // static System.Boolean IsAsciiLetterOrDigit(System.Char character)
    // Offset: 0x18C57D8
    static bool IsAsciiLetterOrDigit(::Il2CppChar character);
    // static System.Boolean IsBidiControlCharacter(System.Char ch)
    // Offset: 0x18CBF5C
    static bool IsBidiControlCharacter(::Il2CppChar ch);
    // static System.String StripBidiControlCharacter(System.Char* strToClean, System.Int32 start, System.Int32 length)
    // Offset: 0x18CBAF0
    static ::Il2CppString* StripBidiControlCharacter(::Il2CppChar* strToClean, int start, int length);
    // private System.Void CreateThis(System.String uri, System.Boolean dontEscape, System.UriKind uriKind)
    // Offset: 0x18C16F8
    void CreateThis(::Il2CppString* uri, bool dontEscape, System::UriKind uriKind);
    // private System.Void InitializeUri(System.ParsingError err, System.UriKind uriKind, out System.UriFormatException e)
    // Offset: 0x18CBFA4
    void InitializeUri(System::ParsingError err, System::UriKind uriKind, System::UriFormatException*& e);
    // private System.Boolean CheckForConfigLoad(System.String data)
    // Offset: 0x18CC5A4
    bool CheckForConfigLoad(::Il2CppString* data);
    // private System.Boolean CheckForUnicode(System.String data)
    // Offset: 0x18CC658
    bool CheckForUnicode(::Il2CppString* data);
    // private System.Boolean CheckForEscapedUnreserved(System.String data)
    // Offset: 0x18CC784
    bool CheckForEscapedUnreserved(::Il2CppString* data);
    // static public System.Boolean TryCreate(System.String uriString, System.UriKind uriKind, out System.Uri result)
    // Offset: 0x18C64A0
    static bool TryCreate(::Il2CppString* uriString, System::UriKind uriKind, System::Uri*& result);
    // public System.String GetComponents(System.UriComponents components, System.UriFormat format)
    // Offset: 0x18C8FB0
    ::Il2CppString* GetComponents(System::UriComponents components, System::UriFormat format);
    // public System.Boolean IsWellFormedOriginalString()
    // Offset: 0x18CCDF0
    bool IsWellFormedOriginalString();
    // static public System.Boolean IsWellFormedUriString(System.String uriString, System.UriKind uriKind)
    // Offset: 0x18CD2E0
    static bool IsWellFormedUriString(::Il2CppString* uriString, System::UriKind uriKind);
    // System.Boolean InternalIsWellFormedOriginalString()
    // Offset: 0x18CCE44
    bool InternalIsWellFormedOriginalString();
    // static public System.String UnescapeDataString(System.String stringToUnescape)
    // Offset: 0x18CD38C
    static ::Il2CppString* UnescapeDataString(::Il2CppString* stringToUnescape);
    // System.String EscapeUnescapeIri(System.String input, System.Int32 start, System.Int32 end, System.UriComponents component)
    // Offset: 0x18CADB4
    ::Il2CppString* EscapeUnescapeIri(::Il2CppString* input, int start, int end, System::UriComponents component);
    // private System.Void .ctor(System.Uri/Flags flags, System.UriParser uriParser, System.String uri)
    // Offset: 0x18CD524
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Uri* New_ctor(System::Uri::Flags flags, System::UriParser* uriParser, ::Il2CppString* uri) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::Uri::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Uri*, creationType>(flags, uriParser, uri)));
    }
    // static System.Uri CreateHelper(System.String uriString, System.Boolean dontEscape, System.UriKind uriKind, ref System.UriFormatException e)
    // Offset: 0x18CC954
    static System::Uri* CreateHelper(::Il2CppString* uriString, bool dontEscape, System::UriKind uriKind, System::UriFormatException*& e);
    // static System.Uri ResolveHelper(System.Uri baseUri, System.Uri relativeUri, ref System.String newUriString, ref System.Boolean userEscaped, out System.UriFormatException e)
    // Offset: 0x18C1C08
    static System::Uri* ResolveHelper(System::Uri* baseUri, System::Uri* relativeUri, ::Il2CppString*& newUriString, bool& userEscaped, System::UriFormatException*& e);
    // private System.String GetRelativeSerializationString(System.UriFormat format)
    // Offset: 0x18CCBDC
    ::Il2CppString* GetRelativeSerializationString(System::UriFormat format);
    // System.String GetComponentsHelper(System.UriComponents uriComponents, System.UriFormat uriFormat)
    // Offset: 0x18C5C74
    ::Il2CppString* GetComponentsHelper(System::UriComponents uriComponents, System::UriFormat uriFormat);
    // private System.Void CreateThisFromUri(System.Uri otherUri)
    // Offset: 0x18C2138
    void CreateThisFromUri(System::Uri* otherUri);
    // static private System.Void .cctor()
    // Offset: 0x18CD57C
    static void _cctor();
    // private System.Void System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    // Offset: 0x18C3570
    // Implemented from: System.Runtime.Serialization.ISerializable
    // Base method: System.Void ISerializable::GetObjectData(System.Runtime.Serialization.SerializationInfo serializationInfo, System.Runtime.Serialization.StreamingContext streamingContext)
    void System_Runtime_Serialization_ISerializable_GetObjectData(System::Runtime::Serialization::SerializationInfo* serializationInfo, System::Runtime::Serialization::StreamingContext streamingContext);
    // public override System.Int32 GetHashCode()
    // Offset: 0x18C5978
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x18C5B98
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
    // public override System.Boolean Equals(System.Object comparand)
    // Offset: 0x18C5EB8
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object comparand)
    bool Equals(::Il2CppObject* comparand);
  }; // System.Uri
  #pragma pack(pop)
  static check_size<sizeof(Uri), 64 + sizeof(bool)> __System_UriSizeCheck;
  static_assert(sizeof(Uri) == 0x41);
  // static public System.Boolean op_Equality(System.Uri uri1, System.Uri uri2)
  // Offset: 0x18C5E80
  bool operator ==(System::Uri* uri1, System::Uri& uri2);
  // static public System.Boolean op_Inequality(System.Uri uri1, System.Uri uri2)
  // Offset: 0x18C20EC
  bool operator !=(System::Uri* uri1, System::Uri& uri2);
}
DEFINE_IL2CPP_ARG_TYPE(System::Uri*, "System", "Uri");
DEFINE_IL2CPP_ARG_TYPE(System::Uri::Flags, "System", "Uri/Flags");
