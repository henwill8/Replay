// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Runtime.Serialization.ISerializable
#include "System/Runtime/Serialization/ISerializable.hpp"
// Including type: System.Runtime.Serialization.IObjectReference
#include "System/Runtime/Serialization/IObjectReference.hpp"
// Including type: System.Runtime.Serialization.StreamingContext
#include "System/Runtime/Serialization/StreamingContext.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: RuntimeType
  class RuntimeType;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MethodBase
  class MethodBase;
  // Forward declaring type: Missing
  class Missing;
  // Forward declaring type: RuntimeAssembly
  class RuntimeAssembly;
}
// Forward declaring namespace: System::Runtime::Serialization
namespace System::Runtime::Serialization {
  // Forward declaring type: SerializationInfo
  class SerializationInfo;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Size: 0x4C
  #pragma pack(push, 1)
  // Autogenerated type: System.UnitySerializationHolder
  // [] Offset: FFFFFFFF
  class UnitySerializationHolder : public ::Il2CppObject/*, public System::Runtime::Serialization::ISerializable, public System::Runtime::Serialization::IObjectReference*/ {
    public:
    // private System.Type[] m_instantiation
    // Size: 0x8
    // Offset: 0x10
    ::Array<System::Type*>* m_instantiation;
    // Field size check
    static_assert(sizeof(::Array<System::Type*>*) == 0x8);
    // private System.Int32[] m_elementTypes
    // Size: 0x8
    // Offset: 0x18
    ::Array<int>* m_elementTypes;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // private System.Int32 m_genericParameterPosition
    // Size: 0x4
    // Offset: 0x20
    int m_genericParameterPosition;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_genericParameterPosition and: m_declaringType
    char __padding2[0x4] = {};
    // private System.Type m_declaringType
    // Size: 0x8
    // Offset: 0x28
    System::Type* m_declaringType;
    // Field size check
    static_assert(sizeof(System::Type*) == 0x8);
    // private System.Reflection.MethodBase m_declaringMethod
    // Size: 0x8
    // Offset: 0x30
    System::Reflection::MethodBase* m_declaringMethod;
    // Field size check
    static_assert(sizeof(System::Reflection::MethodBase*) == 0x8);
    // private System.String m_data
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppString* m_data;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String m_assemblyName
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppString* m_assemblyName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Int32 m_unityType
    // Size: 0x4
    // Offset: 0x48
    int m_unityType;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: UnitySerializationHolder
    UnitySerializationHolder(::Array<System::Type*>* m_instantiation_ = {}, ::Array<int>* m_elementTypes_ = {}, int m_genericParameterPosition_ = {}, System::Type* m_declaringType_ = {}, System::Reflection::MethodBase* m_declaringMethod_ = {}, ::Il2CppString* m_data_ = {}, ::Il2CppString* m_assemblyName_ = {}, int m_unityType_ = {}) noexcept : m_instantiation{m_instantiation_}, m_elementTypes{m_elementTypes_}, m_genericParameterPosition{m_genericParameterPosition_}, m_declaringType{m_declaringType_}, m_declaringMethod{m_declaringMethod_}, m_data{m_data_}, m_assemblyName{m_assemblyName_}, m_unityType{m_unityType_} {}
    // Creating interface conversion operator: operator System::Runtime::Serialization::ISerializable
    operator System::Runtime::Serialization::ISerializable() noexcept {
      return *reinterpret_cast<System::Runtime::Serialization::ISerializable*>(this);
    }
    // Creating interface conversion operator: operator System::Runtime::Serialization::IObjectReference
    operator System::Runtime::Serialization::IObjectReference() noexcept {
      return *reinterpret_cast<System::Runtime::Serialization::IObjectReference*>(this);
    }
    // static System.Void GetUnitySerializationInfo(System.Runtime.Serialization.SerializationInfo info, System.Reflection.Missing missing)
    // Offset: 0x19F7D0C
    static void GetUnitySerializationInfo(System::Runtime::Serialization::SerializationInfo* info, System::Reflection::Missing* missing);
    // static System.RuntimeType AddElementTypes(System.Runtime.Serialization.SerializationInfo info, System.RuntimeType type)
    // Offset: 0x19F7DB0
    static System::RuntimeType* AddElementTypes(System::Runtime::Serialization::SerializationInfo* info, System::RuntimeType* type);
    // System.Type MakeElementTypes(System.Type type)
    // Offset: 0x19F8000
    System::Type* MakeElementTypes(System::Type* type);
    // static System.Void GetUnitySerializationInfo(System.Runtime.Serialization.SerializationInfo info, System.RuntimeType type)
    // Offset: 0x19F8100
    static void GetUnitySerializationInfo(System::Runtime::Serialization::SerializationInfo* info, System::RuntimeType* type);
    // static System.Void GetUnitySerializationInfo(System.Runtime.Serialization.SerializationInfo info, System.Int32 unityType, System.String data, System.Reflection.RuntimeAssembly assembly)
    // Offset: 0x19F8410
    static void GetUnitySerializationInfo(System::Runtime::Serialization::SerializationInfo* info, int unityType, ::Il2CppString* data, System::Reflection::RuntimeAssembly* assembly);
    // System.Void .ctor(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x19F855C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UnitySerializationHolder* New_ctor(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::UnitySerializationHolder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UnitySerializationHolder*, creationType>(info, context)));
    }
    // private System.Void ThrowInsufficientInformation(System.String field)
    // Offset: 0x19F88B8
    void ThrowInsufficientInformation(::Il2CppString* field);
    // public System.Void GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x19F8978
    // Implemented from: System.Runtime.Serialization.ISerializable
    // Base method: System.Void ISerializable::GetObjectData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context)
    void GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
    // Creating proxy method: System_Runtime_Serialization_ISerializable_GetObjectData
    // Maps to method: GetObjectData
    void System_Runtime_Serialization_ISerializable_GetObjectData(System::Runtime::Serialization::SerializationInfo* info, System::Runtime::Serialization::StreamingContext context);
    // public System.Object GetRealObject(System.Runtime.Serialization.StreamingContext context)
    // Offset: 0x19F89F8
    // Implemented from: System.Runtime.Serialization.IObjectReference
    // Base method: System.Object IObjectReference::GetRealObject(System.Runtime.Serialization.StreamingContext context)
    ::Il2CppObject* GetRealObject(System::Runtime::Serialization::StreamingContext context);
    // Creating proxy method: System_Runtime_Serialization_IObjectReference_GetRealObject
    // Maps to method: GetRealObject
    ::Il2CppObject* System_Runtime_Serialization_IObjectReference_GetRealObject(System::Runtime::Serialization::StreamingContext context);
  }; // System.UnitySerializationHolder
  #pragma pack(pop)
  static check_size<sizeof(UnitySerializationHolder), 72 + sizeof(int)> __System_UnitySerializationHolderSizeCheck;
  static_assert(sizeof(UnitySerializationHolder) == 0x4C);
}
DEFINE_IL2CPP_ARG_TYPE(System::UnitySerializationHolder*, "System", "UnitySerializationHolder");
