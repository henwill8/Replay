// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Globalization
namespace System::Globalization {
  // Forward declaring type: CompareInfo
  class CompareInfo;
  // Forward declaring type: DateTimeFormatInfo
  class DateTimeFormatInfo;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: TokenType
  struct TokenType;
  // Forward declaring type: DTSubString
  struct DTSubString;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Autogenerated type: System.__DTString
  struct __DTString : public System::ValueType {
    public:
    // System.String Value
    // Offset: 0x0
    ::Il2CppString* Value;
    // System.Int32 Index
    // Offset: 0x8
    int Index;
    // System.Int32 len
    // Offset: 0xC
    int len;
    // System.Char m_current
    // Offset: 0x10
    ::Il2CppChar m_current;
    // private System.Globalization.CompareInfo m_info
    // Offset: 0x18
    System::Globalization::CompareInfo* m_info;
    // private System.Boolean m_checkDigitToken
    // Offset: 0x20
    bool m_checkDigitToken;
    // Creating value type constructor for type: __DTString
    constexpr __DTString(::Il2CppString* Value_ = {}, int Index_ = {}, int len_ = {}, ::Il2CppChar m_current_ = {}, System::Globalization::CompareInfo* m_info_ = {}, bool m_checkDigitToken_ = {}) noexcept : Value{Value_}, Index{Index_}, len{len_}, m_current{m_current_}, m_info{m_info_}, m_checkDigitToken{m_checkDigitToken_} {}
    // Get static field: static private System.Char[] WhiteSpaceChecks
    static ::Array<::Il2CppChar>* _get_WhiteSpaceChecks();
    // Set static field: static private System.Char[] WhiteSpaceChecks
    static void _set_WhiteSpaceChecks(::Array<::Il2CppChar>* value);
    // System.Void .ctor(System.String str, System.Globalization.DateTimeFormatInfo dtfi, System.Boolean checkDigitToken)
    // Offset: 0xCB7C20
    __DTString(::Il2CppString* str, System::Globalization::DateTimeFormatInfo* dtfi, bool checkDigitToken);
    // System.Void .ctor(System.String str, System.Globalization.DateTimeFormatInfo dtfi)
    // Offset: 0xCB7C50
    __DTString(::Il2CppString* str, System::Globalization::DateTimeFormatInfo* dtfi);
    // System.Globalization.CompareInfo get_CompareInfo()
    // Offset: 0xCB7C58
    System::Globalization::CompareInfo* get_CompareInfo();
    // System.Boolean GetNext()
    // Offset: 0xCB7C60
    bool GetNext();
    // System.Boolean AtEnd()
    // Offset: 0xCB7C68
    bool AtEnd();
    // System.Boolean Advance(System.Int32 count)
    // Offset: 0xCB7C78
    bool Advance(int count);
    // System.Void GetRegularToken(out System.TokenType tokenType, out System.Int32 tokenValue, System.Globalization.DateTimeFormatInfo dtfi)
    // Offset: 0xCB7C80
    void GetRegularToken(System::TokenType& tokenType, int& tokenValue, System::Globalization::DateTimeFormatInfo* dtfi);
    // System.TokenType GetSeparatorToken(System.Globalization.DateTimeFormatInfo dtfi, out System.Int32 indexBeforeSeparator, out System.Char charBeforeSeparator)
    // Offset: 0xCB7C88
    System::TokenType GetSeparatorToken(System::Globalization::DateTimeFormatInfo* dtfi, int& indexBeforeSeparator, ::Il2CppChar& charBeforeSeparator);
    // System.Boolean MatchSpecifiedWord(System.String target)
    // Offset: 0xCB7C90
    bool MatchSpecifiedWord(::Il2CppString* target);
    // System.Boolean MatchSpecifiedWord(System.String target, System.Int32 endIndex)
    // Offset: 0xCB7C98
    bool MatchSpecifiedWord(::Il2CppString* target, int endIndex);
    // System.Boolean MatchSpecifiedWords(System.String target, System.Boolean checkWordBoundary, ref System.Int32 matchLength)
    // Offset: 0xCB7CA0
    bool MatchSpecifiedWords(::Il2CppString* target, bool checkWordBoundary, int& matchLength);
    // System.Boolean Match(System.String str)
    // Offset: 0xCB7CAC
    bool Match(::Il2CppString* str);
    // System.Boolean Match(System.Char ch)
    // Offset: 0xCB7CB4
    bool Match(::Il2CppChar ch);
    // System.Int32 MatchLongestWords(System.String[] words, ref System.Int32 maxMatchStrLen)
    // Offset: 0xCB7CBC
    int MatchLongestWords(::Array<::Il2CppString*>* words, int& maxMatchStrLen);
    // System.Int32 GetRepeatCount()
    // Offset: 0xCB7CC4
    int GetRepeatCount();
    // System.Boolean GetNextDigit()
    // Offset: 0xCB7CCC
    bool GetNextDigit();
    // System.Char GetChar()
    // Offset: 0xCB7CD4
    ::Il2CppChar GetChar();
    // System.Int32 GetDigit()
    // Offset: 0xCB7CDC
    int GetDigit();
    // System.Void SkipWhiteSpaces()
    // Offset: 0xCB7CE4
    void SkipWhiteSpaces();
    // System.Boolean SkipWhiteSpaceCurrent()
    // Offset: 0xCB7CEC
    bool SkipWhiteSpaceCurrent();
    // System.Void TrimTail()
    // Offset: 0xCB7CF4
    void TrimTail();
    // System.Void RemoveTrailingInQuoteSpaces()
    // Offset: 0xCB7CFC
    void RemoveTrailingInQuoteSpaces();
    // System.Void RemoveLeadingInQuoteSpaces()
    // Offset: 0xCB7D04
    void RemoveLeadingInQuoteSpaces();
    // System.DTSubString GetSubString()
    // Offset: 0xCB7D0C
    System::DTSubString GetSubString();
    // System.Void ConsumeSubString(System.DTSubString sub)
    // Offset: 0xCB7D14
    void ConsumeSubString(System::DTSubString sub);
    // static private System.Void .cctor()
    // Offset: 0x19E2CEC
    static void _cctor();
  }; // System.__DTString
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(System::__DTString, "System", "__DTString");
#pragma pack(pop)
