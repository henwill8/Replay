// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IConsoleDriver
#include "System/IConsoleDriver.hpp"
// Including type: System.ConsoleColor
#include "System/ConsoleColor.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: TermInfoReader
  class TermInfoReader;
  // Forward declaring type: ByteMatcher
  class ByteMatcher;
  // Forward declaring type: ConsoleKeyInfo
  struct ConsoleKeyInfo;
  // Forward declaring type: TermInfoStrings
  struct TermInfoStrings;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: StreamReader
  class StreamReader;
  // Forward declaring type: CStreamWriter
  class CStreamWriter;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: Hashtable
  class Hashtable;
}
// Completed forward declares
// Type namespace: System
namespace System {
  // Size: 0x11C
  #pragma pack(push, 1)
  // Autogenerated type: System.TermInfoDriver
  // [] Offset: FFFFFFFF
  class TermInfoDriver : public ::Il2CppObject/*, public System::IConsoleDriver*/ {
    public:
    // private System.TermInfoReader reader
    // Size: 0x8
    // Offset: 0x10
    System::TermInfoReader* reader;
    // Field size check
    static_assert(sizeof(System::TermInfoReader*) == 0x8);
    // private System.Int32 cursorLeft
    // Size: 0x4
    // Offset: 0x18
    int cursorLeft;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 cursorTop
    // Size: 0x4
    // Offset: 0x1C
    int cursorTop;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.String title
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppString* title;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String titleFormat
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppString* titleFormat;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Boolean cursorVisible
    // Size: 0x1
    // Offset: 0x30
    bool cursorVisible;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: cursorVisible and: csrVisible
    char __padding5[0x7] = {};
    // private System.String csrVisible
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppString* csrVisible;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String csrInvisible
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppString* csrInvisible;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String clear
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppString* clear;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String bell
    // Size: 0x8
    // Offset: 0x50
    ::Il2CppString* bell;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String term
    // Size: 0x8
    // Offset: 0x58
    ::Il2CppString* term;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.IO.StreamReader stdin
    // Size: 0x8
    // Offset: 0x60
    System::IO::StreamReader* stdin;
    // Field size check
    static_assert(sizeof(System::IO::StreamReader*) == 0x8);
    // private System.IO.CStreamWriter stdout
    // Size: 0x8
    // Offset: 0x68
    System::IO::CStreamWriter* stdout;
    // Field size check
    static_assert(sizeof(System::IO::CStreamWriter*) == 0x8);
    // private System.Int32 windowWidth
    // Size: 0x4
    // Offset: 0x70
    int windowWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 windowHeight
    // Size: 0x4
    // Offset: 0x74
    int windowHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 bufferHeight
    // Size: 0x4
    // Offset: 0x78
    int bufferHeight;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 bufferWidth
    // Size: 0x4
    // Offset: 0x7C
    int bufferWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Char[] buffer
    // Size: 0x8
    // Offset: 0x80
    ::Array<::Il2CppChar>* buffer;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppChar>*) == 0x8);
    // private System.Int32 readpos
    // Size: 0x4
    // Offset: 0x88
    int readpos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 writepos
    // Size: 0x4
    // Offset: 0x8C
    int writepos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.String keypadXmit
    // Size: 0x8
    // Offset: 0x90
    ::Il2CppString* keypadXmit;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String keypadLocal
    // Size: 0x8
    // Offset: 0x98
    ::Il2CppString* keypadLocal;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Boolean inited
    // Size: 0x1
    // Offset: 0xA0
    bool inited;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: inited and: initLock
    char __padding22[0x7] = {};
    // private System.Object initLock
    // Size: 0x8
    // Offset: 0xA8
    ::Il2CppObject* initLock;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private System.Boolean initKeys
    // Size: 0x1
    // Offset: 0xB0
    bool initKeys;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: initKeys and: origPair
    char __padding24[0x7] = {};
    // private System.String origPair
    // Size: 0x8
    // Offset: 0xB8
    ::Il2CppString* origPair;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String origColors
    // Size: 0x8
    // Offset: 0xC0
    ::Il2CppString* origColors;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String cursorAddress
    // Size: 0x8
    // Offset: 0xC8
    ::Il2CppString* cursorAddress;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.ConsoleColor fgcolor
    // Size: 0x4
    // Offset: 0xD0
    System::ConsoleColor fgcolor;
    // Field size check
    static_assert(sizeof(System::ConsoleColor) == 0x4);
    // Padding between fields: fgcolor and: setfgcolor
    char __padding28[0x4] = {};
    // private System.String setfgcolor
    // Size: 0x8
    // Offset: 0xD8
    ::Il2CppString* setfgcolor;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String setbgcolor
    // Size: 0x8
    // Offset: 0xE0
    ::Il2CppString* setbgcolor;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Int32 maxColors
    // Size: 0x4
    // Offset: 0xE8
    int maxColors;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean noGetPosition
    // Size: 0x1
    // Offset: 0xEC
    bool noGetPosition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: noGetPosition and: keymap
    char __padding32[0x3] = {};
    // private System.Collections.Hashtable keymap
    // Size: 0x8
    // Offset: 0xF0
    System::Collections::Hashtable* keymap;
    // Field size check
    static_assert(sizeof(System::Collections::Hashtable*) == 0x8);
    // private System.ByteMatcher rootmap
    // Size: 0x8
    // Offset: 0xF8
    System::ByteMatcher* rootmap;
    // Field size check
    static_assert(sizeof(System::ByteMatcher*) == 0x8);
    // private System.Int32 rl_startx
    // Size: 0x4
    // Offset: 0x100
    int rl_startx;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 rl_starty
    // Size: 0x4
    // Offset: 0x104
    int rl_starty;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Byte[] control_characters
    // Size: 0x8
    // Offset: 0x108
    ::Array<uint8_t>* control_characters;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Char[] echobuf
    // Size: 0x8
    // Offset: 0x110
    ::Array<::Il2CppChar>* echobuf;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppChar>*) == 0x8);
    // private System.Int32 echon
    // Size: 0x4
    // Offset: 0x118
    int echon;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: TermInfoDriver
    TermInfoDriver(System::TermInfoReader* reader_ = {}, int cursorLeft_ = {}, int cursorTop_ = {}, ::Il2CppString* title_ = {}, ::Il2CppString* titleFormat_ = {}, bool cursorVisible_ = {}, ::Il2CppString* csrVisible_ = {}, ::Il2CppString* csrInvisible_ = {}, ::Il2CppString* clear_ = {}, ::Il2CppString* bell_ = {}, ::Il2CppString* term_ = {}, System::IO::StreamReader* stdin_ = {}, System::IO::CStreamWriter* stdout_ = {}, int windowWidth_ = {}, int windowHeight_ = {}, int bufferHeight_ = {}, int bufferWidth_ = {}, ::Array<::Il2CppChar>* buffer_ = {}, int readpos_ = {}, int writepos_ = {}, ::Il2CppString* keypadXmit_ = {}, ::Il2CppString* keypadLocal_ = {}, bool inited_ = {}, ::Il2CppObject* initLock_ = {}, bool initKeys_ = {}, ::Il2CppString* origPair_ = {}, ::Il2CppString* origColors_ = {}, ::Il2CppString* cursorAddress_ = {}, System::ConsoleColor fgcolor_ = {}, ::Il2CppString* setfgcolor_ = {}, ::Il2CppString* setbgcolor_ = {}, int maxColors_ = {}, bool noGetPosition_ = {}, System::Collections::Hashtable* keymap_ = {}, System::ByteMatcher* rootmap_ = {}, int rl_startx_ = {}, int rl_starty_ = {}, ::Array<uint8_t>* control_characters_ = {}, ::Array<::Il2CppChar>* echobuf_ = {}, int echon_ = {}) noexcept : reader{reader_}, cursorLeft{cursorLeft_}, cursorTop{cursorTop_}, title{title_}, titleFormat{titleFormat_}, cursorVisible{cursorVisible_}, csrVisible{csrVisible_}, csrInvisible{csrInvisible_}, clear{clear_}, bell{bell_}, term{term_}, stdin{stdin_}, stdout{stdout_}, windowWidth{windowWidth_}, windowHeight{windowHeight_}, bufferHeight{bufferHeight_}, bufferWidth{bufferWidth_}, buffer{buffer_}, readpos{readpos_}, writepos{writepos_}, keypadXmit{keypadXmit_}, keypadLocal{keypadLocal_}, inited{inited_}, initLock{initLock_}, initKeys{initKeys_}, origPair{origPair_}, origColors{origColors_}, cursorAddress{cursorAddress_}, fgcolor{fgcolor_}, setfgcolor{setfgcolor_}, setbgcolor{setbgcolor_}, maxColors{maxColors_}, noGetPosition{noGetPosition_}, keymap{keymap_}, rootmap{rootmap_}, rl_startx{rl_startx_}, rl_starty{rl_starty_}, control_characters{control_characters_}, echobuf{echobuf_}, echon{echon_} {}
    // Creating interface conversion operator: operator System::IConsoleDriver
    operator System::IConsoleDriver() noexcept {
      return *reinterpret_cast<System::IConsoleDriver*>(this);
    }
    // Get static field: static private System.Int32* native_terminal_size
    static int* _get_native_terminal_size();
    // Set static field: static private System.Int32* native_terminal_size
    static void _set_native_terminal_size(int* value);
    // Get static field: static private System.Int32 terminal_size
    static int _get_terminal_size();
    // Set static field: static private System.Int32 terminal_size
    static void _set_terminal_size(int value);
    // Get static field: static private readonly System.String[] locations
    static ::Array<::Il2CppString*>* _get_locations();
    // Set static field: static private readonly System.String[] locations
    static void _set_locations(::Array<::Il2CppString*>* value);
    // Get static field: static private readonly System.Int32[] _consoleColorToAnsiCode
    static ::Array<int>* _get__consoleColorToAnsiCode();
    // Set static field: static private readonly System.Int32[] _consoleColorToAnsiCode
    static void _set__consoleColorToAnsiCode(::Array<int>* value);
    // static private System.String TryTermInfoDir(System.String dir, System.String term)
    // Offset: 0x1912778
    static ::Il2CppString* TryTermInfoDir(::Il2CppString* dir, ::Il2CppString* term);
    // static private System.String SearchTerminfo(System.String term)
    // Offset: 0x191289C
    static ::Il2CppString* SearchTerminfo(::Il2CppString* term);
    // private System.Void WriteConsole(System.String str)
    // Offset: 0x1912A24
    void WriteConsole(::Il2CppString* str);
    // public System.Void .ctor(System.String term)
    // Offset: 0x1912A48
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TermInfoDriver* New_ctor(::Il2CppString* term) {
      static auto ___internal__logger = ::Logger::get().WithContext("System::TermInfoDriver::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TermInfoDriver*, creationType>(term)));
    }
    // public System.Boolean get_Initialized()
    // Offset: 0x191311C
    bool get_Initialized();
    // public System.Void Init()
    // Offset: 0x1913124
    void Init();
    // private System.Void IncrementX()
    // Offset: 0x1913CA8
    void IncrementX();
    // public System.Void WriteSpecialKey(System.ConsoleKeyInfo key)
    // Offset: 0x1913D88
    void WriteSpecialKey(System::ConsoleKeyInfo key);
    // public System.Void WriteSpecialKey(System.Char c)
    // Offset: 0x1914084
    void WriteSpecialKey(::Il2CppChar c);
    // public System.Boolean IsSpecialKey(System.ConsoleKeyInfo key)
    // Offset: 0x191423C
    bool IsSpecialKey(System::ConsoleKeyInfo key);
    // public System.Boolean IsSpecialKey(System.Char c)
    // Offset: 0x19142C4
    bool IsSpecialKey(::Il2CppChar c);
    // private System.Void GetCursorPosition()
    // Offset: 0x19139F8
    void GetCursorPosition();
    // private System.Void CheckWindowDimensions()
    // Offset: 0x1914410
    void CheckWindowDimensions();
    // public System.Int32 get_WindowHeight()
    // Offset: 0x1913D50
    int get_WindowHeight();
    // public System.Int32 get_WindowWidth()
    // Offset: 0x1913D18
    int get_WindowWidth();
    // private System.Void AddToBuffer(System.Int32 b)
    // Offset: 0x19142F8
    void AddToBuffer(int b);
    // private System.Void AdjustBuffer()
    // Offset: 0x1914570
    void AdjustBuffer();
    // private System.ConsoleKeyInfo CreateKeyInfoFromInt(System.Int32 n, System.Boolean alt)
    // Offset: 0x19140B8
    System::ConsoleKeyInfo CreateKeyInfoFromInt(int n, bool alt);
    // private System.Object GetKeyFromBuffer(System.Boolean cooked)
    // Offset: 0x1914584
    ::Il2CppObject* GetKeyFromBuffer(bool cooked);
    // private System.ConsoleKeyInfo ReadKeyInternal(out System.Boolean fresh)
    // Offset: 0x1914870
    System::ConsoleKeyInfo ReadKeyInternal(bool& fresh);
    // private System.Boolean InputPending()
    // Offset: 0x1914BC0
    bool InputPending();
    // private System.Void QueueEcho(System.Char c)
    // Offset: 0x1914BF0
    void QueueEcho(::Il2CppChar c);
    // private System.Void Echo(System.ConsoleKeyInfo key)
    // Offset: 0x1914CFC
    void Echo(System::ConsoleKeyInfo key);
    // private System.Void EchoFlush()
    // Offset: 0x1914D60
    void EchoFlush();
    // public System.Int32 Read(in System.Char[] dest, System.Int32 index, System.Int32 count)
    // Offset: 0x1914DA0
    int Read(::Array<::Il2CppChar>*& dest, int index, int count);
    // public System.String ReadLine()
    // Offset: 0x1915424
    ::Il2CppString* ReadLine();
    // public System.String ReadToEnd()
    // Offset: 0x19155F8
    ::Il2CppString* ReadToEnd();
    // private System.String ReadUntilConditionInternal(System.Boolean haltOnNewLine)
    // Offset: 0x191542C
    ::Il2CppString* ReadUntilConditionInternal(bool haltOnNewLine);
    // public System.Void SetCursorPosition(System.Int32 left, System.Int32 top)
    // Offset: 0x1913EB0
    void SetCursorPosition(int left, int top);
    // private System.Void CreateKeyMap()
    // Offset: 0x1915600
    void CreateKeyMap();
    // private System.Void InitKeys()
    // Offset: 0x1914A44
    void InitKeys();
    // private System.Void AddStringMapping(System.TermInfoStrings s)
    // Offset: 0x1917498
    void AddStringMapping(System::TermInfoStrings s);
    // static private System.Void .cctor()
    // Offset: 0x1917584
    static void _cctor();
    // public System.ConsoleKeyInfo ReadKey(System.Boolean intercept)
    // Offset: 0x19153BC
    // Implemented from: System.IConsoleDriver
    // Base method: System.ConsoleKeyInfo IConsoleDriver::ReadKey(System.Boolean intercept)
    System::ConsoleKeyInfo ReadKey(bool intercept);
  }; // System.TermInfoDriver
  #pragma pack(pop)
  static check_size<sizeof(TermInfoDriver), 280 + sizeof(int)> __System_TermInfoDriverSizeCheck;
  static_assert(sizeof(TermInfoDriver) == 0x11C);
}
DEFINE_IL2CPP_ARG_TYPE(System::TermInfoDriver*, "System", "TermInfoDriver");
