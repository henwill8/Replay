// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Tweening.Tween
#include "Tweening/Tween.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Completed forward declares
// Type namespace: Tweening
namespace Tweening {
  // Autogenerated type: Tweening.Tween`1
  template<typename T>
  class Tween_1 : public Tweening::Tween {
    public:
    // public T fromValue
    // Offset: 0x0
    T fromValue;
    // public T toValue
    // Offset: 0x0
    T toValue;
    // public System.Action`1<T> onUpdate
    // Offset: 0x0
    System::Action_1<T>* onUpdate;
    // private System.Void Init(T fromValue, T toValue, System.Action`1<T> onUpdate, System.Single duration, Tweening.InterpolationType interpolationType, Tweening.EaseType easeType, UnityEngine.AnimationCurve animationCurve, System.Single delay)
    // Offset: 0xFFFFFFFF
    void Init(T fromValue, T toValue, System::Action_1<T>* onUpdate, float duration, Tweening::InterpolationType interpolationType, Tweening::EaseType easeType, UnityEngine::AnimationCurve* animationCurve, float delay) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Init", fromValue, toValue, onUpdate, duration, interpolationType, easeType, animationCurve, delay));
    }
    // public System.Void .ctor(T fromValue, T toValue, System.Action`1<T> onUpdate, System.Single duration, Tweening.EaseType easeType, System.Single delay)
    // Offset: 0xFFFFFFFF
    static Tween_1<T>* New_ctor(T fromValue, T toValue, System::Action_1<T>* onUpdate, float duration, Tweening::EaseType easeType, float delay) {
      return THROW_UNLESS(il2cpp_utils::New<Tween_1<T>*>(fromValue, toValue, onUpdate, duration, easeType, delay));
    }
    // public System.Void .ctor(T fromValue, T toValue, System.Action`1<T> onUpdate, System.Single duration, UnityEngine.AnimationCurve animationCurve, System.Single delay)
    // Offset: 0xFFFFFFFF
    static Tween_1<T>* New_ctor(T fromValue, T toValue, System::Action_1<T>* onUpdate, float duration, UnityEngine::AnimationCurve* animationCurve, float delay) {
      return THROW_UNLESS(il2cpp_utils::New<Tween_1<T>*>(fromValue, toValue, onUpdate, duration, animationCurve, delay));
    }
    // public T GetValue(System.Single t)
    // Offset: 0xFFFFFFFF
    T GetValue(float t) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<T>(this, "GetValue", t));
    }
    // public override System.Void Update(System.Single deltaTime)
    // Offset: 0xFFFFFFFF
    // Implemented from: Tweening.Tween
    // Base method: System.Void Tween::Update(System.Single deltaTime)
    void Update(float deltaTime) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Update", deltaTime));
    }
    // public override System.Void Sample(System.Single t)
    // Offset: 0xFFFFFFFF
    // Implemented from: Tweening.Tween
    // Base method: System.Void Tween::Sample(System.Single t)
    void Sample(float t) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Sample", t));
    }
  }; // Tweening.Tween`1
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(Tweening::Tween_1, "Tweening", "Tween`1");
#pragma pack(pop)
