// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
}
// Forward declaring namespace: Tweening
namespace Tweening {
  // Forward declaring type: Tween
  class Tween;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Object because it is already included!
}
// Completed forward declares
// Type namespace: Tweening
namespace Tweening {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Tweening.TweeningManager
  // [] Offset: FFFFFFFF
  class TweeningManager : public UnityEngine::MonoBehaviour {
    public:
    // private readonly System.Collections.Generic.List`1<Tweening.Tween> _activeTweens
    // Size: 0x8
    // Offset: 0x18
    System::Collections::Generic::List_1<Tweening::Tween*>* activeTweens;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<Tweening::Tween*>*) == 0x8);
    // private readonly System.Collections.Generic.HashSet`1<Tweening.Tween> _activeTweensSet
    // Size: 0x8
    // Offset: 0x20
    System::Collections::Generic::HashSet_1<Tweening::Tween*>* activeTweensSet;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::HashSet_1<Tweening::Tween*>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<UnityEngine.Object,System.Collections.Generic.HashSet`1<Tweening.Tween>> _tweensByOwner
    // Size: 0x8
    // Offset: 0x28
    System::Collections::Generic::Dictionary_2<UnityEngine::Object*, System::Collections::Generic::HashSet_1<Tweening::Tween*>*>* tweensByOwner;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<UnityEngine::Object*, System::Collections::Generic::HashSet_1<Tweening::Tween*>*>*) == 0x8);
    // private readonly System.Collections.Generic.Queue`1<System.Collections.Generic.HashSet`1<Tweening.Tween>> _reusableTweenHashSets
    // Size: 0x8
    // Offset: 0x30
    System::Collections::Generic::Queue_1<System::Collections::Generic::HashSet_1<Tweening::Tween*>*>* reusableTweenHashSets;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Queue_1<System::Collections::Generic::HashSet_1<Tweening::Tween*>*>*) == 0x8);
    // Creating value type constructor for type: TweeningManager
    TweeningManager(System::Collections::Generic::List_1<Tweening::Tween*>* activeTweens_ = {}, System::Collections::Generic::HashSet_1<Tweening::Tween*>* activeTweensSet_ = {}, System::Collections::Generic::Dictionary_2<UnityEngine::Object*, System::Collections::Generic::HashSet_1<Tweening::Tween*>*>* tweensByOwner_ = {}, System::Collections::Generic::Queue_1<System::Collections::Generic::HashSet_1<Tweening::Tween*>*>* reusableTweenHashSets_ = {}) noexcept : activeTweens{activeTweens_}, activeTweensSet{activeTweensSet_}, tweensByOwner{tweensByOwner_}, reusableTweenHashSets{reusableTweenHashSets_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void Start()
    // Offset: 0xF4D400
    void Start();
    // protected System.Void Update()
    // Offset: 0xF4D46C
    void Update();
    // public Tweening.Tween AddTween(Tweening.Tween tween, UnityEngine.Object owner)
    // Offset: 0xF4D61C
    Tweening::Tween* AddTween(Tweening::Tween* tween, UnityEngine::Object* owner);
    // public Tweening.Tween RestartTween(Tweening.Tween tween, UnityEngine.Object owner)
    // Offset: 0xF4D820
    Tweening::Tween* RestartTween(Tweening::Tween* tween, UnityEngine::Object* owner);
    // public System.Void KillAllTweens(UnityEngine.Object owner)
    // Offset: 0xF4D87C
    void KillAllTweens(UnityEngine::Object* owner);
    // private System.Void AddTweenToOwnerDictionary(Tweening.Tween tween, UnityEngine.Object owner)
    // Offset: 0xF4D6EC
    void AddTweenToOwnerDictionary(Tweening::Tween* tween, UnityEngine::Object* owner);
    // public System.Void .ctor()
    // Offset: 0xF4D9F0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TweeningManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Tweening::TweeningManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TweeningManager*, creationType>()));
    }
  }; // Tweening.TweeningManager
  #pragma pack(pop)
  static check_size<sizeof(TweeningManager), 48 + sizeof(System::Collections::Generic::Queue_1<System::Collections::Generic::HashSet_1<Tweening::Tween*>*>*)> __Tweening_TweeningManagerSizeCheck;
  static_assert(sizeof(TweeningManager) == 0x38);
}
DEFINE_IL2CPP_ARG_TYPE(Tweening::TweeningManager*, "Tweening", "TweeningManager");
