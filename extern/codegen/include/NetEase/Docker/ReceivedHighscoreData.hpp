// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: NetEase.Docker.ScoreData
#include "NetEase/Docker/ScoreData.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppString;
// Completed il2cpp-utils forward declares
// Type namespace: NetEase.Docker
namespace NetEase::Docker {
  // Size: 0x18
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: NetEase.Docker.ReceivedHighscoreData
  // [] Offset: FFFFFFFF
  struct ReceivedHighscoreData/*, public System::ValueType*/ {
    public:
    // [DebuggerBrowsableAttribute] Offset: 0xD24324
    // [CompilerGeneratedAttribute] Offset: 0xD24324
    // private System.Boolean <FetchingSuccessful>k__BackingField
    // Size: 0x1
    // Offset: 0x0
    bool FetchingSuccessful;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: FetchingSuccessful and: HighscoreCode
    char __padding0[0x3] = {};
    // [DebuggerBrowsableAttribute] Offset: 0xD24360
    // [CompilerGeneratedAttribute] Offset: 0xD24360
    // private System.Int32 <HighscoreCode>k__BackingField
    // Size: 0x4
    // Offset: 0x4
    int HighscoreCode;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xD2439C
    // [DebuggerBrowsableAttribute] Offset: 0xD2439C
    // private System.String <Track>k__BackingField
    // Size: 0x8
    // Offset: 0x8
    ::Il2CppString* Track;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [DebuggerBrowsableAttribute] Offset: 0xD243D8
    // [CompilerGeneratedAttribute] Offset: 0xD243D8
    // private System.Collections.Generic.List`1<NetEase.Docker.ScoreData> <Scores>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    System::Collections::Generic::List_1<NetEase::Docker::ScoreData>* Scores;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<NetEase::Docker::ScoreData>*) == 0x8);
    // Creating value type constructor for type: ReceivedHighscoreData
    constexpr ReceivedHighscoreData(bool FetchingSuccessful_ = {}, int HighscoreCode_ = {}, ::Il2CppString* Track_ = {}, System::Collections::Generic::List_1<NetEase::Docker::ScoreData>* Scores_ = {}) noexcept : FetchingSuccessful{FetchingSuccessful_}, HighscoreCode{HighscoreCode_}, Track{Track_}, Scores{Scores_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // public System.Boolean get_FetchingSuccessful()
    // Offset: 0xE32380
    bool get_FetchingSuccessful();
    // public System.Void set_FetchingSuccessful(System.Boolean value)
    // Offset: 0xE32388
    void set_FetchingSuccessful(bool value);
    // public System.Void set_HighscoreCode(System.Int32 value)
    // Offset: 0xE32394
    void set_HighscoreCode(int value);
    // public System.String get_Track()
    // Offset: 0xE3239C
    ::Il2CppString* get_Track();
    // public System.Void set_Track(System.String value)
    // Offset: 0xE323A4
    void set_Track(::Il2CppString* value);
    // public System.Collections.Generic.List`1<NetEase.Docker.ScoreData> get_Scores()
    // Offset: 0xE323AC
    System::Collections::Generic::List_1<NetEase::Docker::ScoreData>* get_Scores();
    // public System.Void set_Scores(System.Collections.Generic.List`1<NetEase.Docker.ScoreData> value)
    // Offset: 0xE323B4
    void set_Scores(System::Collections::Generic::List_1<NetEase::Docker::ScoreData>* value);
  }; // NetEase.Docker.ReceivedHighscoreData
  #pragma pack(pop)
  static check_size<sizeof(ReceivedHighscoreData), 16 + sizeof(System::Collections::Generic::List_1<NetEase::Docker::ScoreData>*)> __NetEase_Docker_ReceivedHighscoreDataSizeCheck;
  static_assert(sizeof(ReceivedHighscoreData) == 0x18);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(NetEase::Docker::ReceivedHighscoreData, "NetEase.Docker", "ReceivedHighscoreData");
