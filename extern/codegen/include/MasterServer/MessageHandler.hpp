// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.UInt32
#include "System/UInt32.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Int64
#include "System/Int64.hpp"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MasterServer
namespace MasterServer {
  // Forward declaring type: IAnalyticsManager
  class IAnalyticsManager;
  // Forward declaring type: IHandshakeMessage
  class IHandshakeMessage;
  // Skipping declaration: MessageOrigin because it is already included!
  // Forward declaring type: ClientHelloRequest
  class ClientHelloRequest;
  // Forward declaring type: HelloVerifyRequest
  class HelloVerifyRequest;
  // Forward declaring type: ClientHelloWithCookieRequest
  class ClientHelloWithCookieRequest;
  // Forward declaring type: IUserMessage
  class IUserMessage;
  // Forward declaring type: BroadcastServerStatusRequest
  class BroadcastServerStatusRequest;
  // Forward declaring type: BroadcastServerHeartbeatRequest
  class BroadcastServerHeartbeatRequest;
  // Forward declaring type: BroadcastServerHeartbeatResponse
  class BroadcastServerHeartbeatResponse;
  // Forward declaring type: BroadcastServerRemoveRequest
  class BroadcastServerRemoveRequest;
  // Forward declaring type: ConnectToServerRequest
  class ConnectToServerRequest;
  // Forward declaring type: ConnectToMatchmakingRequest
  class ConnectToMatchmakingRequest;
  // Forward declaring type: PrepareForConnectionRequest
  class PrepareForConnectionRequest;
  // Forward declaring type: GetPublicServersRequest
  class GetPublicServersRequest;
  // Forward declaring type: SessionKeepaliveMessage
  class SessionKeepaliveMessage;
  // Forward declaring type: IDedicatedServerMessage
  class IDedicatedServerMessage;
  // Forward declaring type: GetAvailableRelayServerRequest
  class GetAvailableRelayServerRequest;
  // Forward declaring type: GetAvailableMatchmakingServerRequest
  class GetAvailableMatchmakingServerRequest;
  // Forward declaring type: DedicatedServerNoLongerOccupiedRequest
  class DedicatedServerNoLongerOccupiedRequest;
  // Forward declaring type: DedicatedServerHeartbeatRequest
  class DedicatedServerHeartbeatRequest;
  // Forward declaring type: DedicatedServerHeartbeatResponse
  class DedicatedServerHeartbeatResponse;
  // Forward declaring type: RelayServerStatusUpdateRequest
  class RelayServerStatusUpdateRequest;
  // Forward declaring type: MatchmakingServerStatusUpdateRequest
  class MatchmakingServerStatusUpdateRequest;
  // Forward declaring type: DedicatedServerShutDownRequest
  class DedicatedServerShutDownRequest;
  // Forward declaring type: DedicatedServerPrepareForConnectionRequest
  class DedicatedServerPrepareForConnectionRequest;
  // Forward declaring type: IMasterServerMessage
  class IMasterServerMessage;
  // Forward declaring type: IMasterServerAcknowledgeMessage
  class IMasterServerAcknowledgeMessage;
  // Forward declaring type: IMasterServerReliableResponse
  class IMasterServerReliableResponse;
  // Forward declaring type: IMasterServerMultipartMessage
  class IMasterServerMultipartMessage;
  // Forward declaring type: IMasterServerReliableRequest
  class IMasterServerReliableRequest;
  // Forward declaring type: IMasterServerUnreliableMessage
  class IMasterServerUnreliableMessage;
  // Forward declaring type: IMasterServerResponse
  class IMasterServerResponse;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PacketEncryptionLayer
  class PacketEncryptionLayer;
  // Forward declaring type: NetworkPacketSerializer`2<TType, TData>
  template<typename TType, typename TData>
  class NetworkPacketSerializer_2;
  // Forward declaring type: ExpiringDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class ExpiringDictionary_2;
  // Forward declaring type: SmallBufferPool
  class SmallBufferPool;
  // Forward declaring type: INetworkPacketSerializer`1<TData>
  template<typename TData>
  class INetworkPacketSerializer_1;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataReader
  class NetDataReader;
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: INetSerializable
  class INetSerializable;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationTokenSource
  class CancellationTokenSource;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Func`3<T1, T2, TResult>
  template<typename T1, typename T2, typename TResult>
  class Func_3;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: Func`5<T1, T2, T3, T4, TResult>
  template<typename T1, typename T2, typename T3, typename T4, typename TResult>
  class Func_5;
  // Forward declaring type: Exception
  class Exception;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
  // Forward declaring type: Task
  class Task;
}
// Completed forward declares
// Type namespace: MasterServer
namespace MasterServer {
  // Autogenerated type: MasterServer.MessageHandler
  class MessageHandler : public ::Il2CppObject/*, public System::IDisposable*/ {
    public:
    // Nested type: MasterServer::MessageHandler::IMessageSender
    class IMessageSender;
    // Nested type: MasterServer::MessageHandler::ConnectionState
    class ConnectionState;
    // Nested type: MasterServer::MessageHandler::RequestWaiterId
    struct RequestWaiterId;
    // Nested type: MasterServer::MessageHandler::RequestWaiter
    class RequestWaiter;
    // Nested type: MasterServer::MessageHandler::SentRequestWaiter
    class SentRequestWaiter;
    // Nested type: MasterServer::MessageHandler::RequestResponseWaiter
    class RequestResponseWaiter;
    // Nested type: MasterServer::MessageHandler::MultipartMessageWaiter
    class MultipartMessageWaiter;
    // Nested type: MasterServer::MessageHandler::MessageOrigin
    struct MessageOrigin;
    // Nested type: MasterServer::MessageHandler::HandshakeMessageType
    struct HandshakeMessageType;
    // Nested type: MasterServer::MessageHandler::UserMessageType
    struct UserMessageType;
    // Nested type: MasterServer::MessageHandler::DedicatedServerMessageType
    struct DedicatedServerMessageType;
    // Nested type: MasterServer::MessageHandler::$$c__DisplayClass74_0_1<T>
    template<typename T>
    class $$c__DisplayClass74_0_1;
    // Nested type: MasterServer::MessageHandler::$$c__DisplayClass75_0_1<T>
    template<typename T>
    class $$c__DisplayClass75_0_1;
    // Nested type: MasterServer::MessageHandler::$GetAndSendResponse$d__80_2<TRequest, TResponse>
    template<typename TRequest, typename TResponse>
    struct $GetAndSendResponse$d__80_2;
    // Nested type: MasterServer::MessageHandler::$GetAndSendResponseAsync$d__81_2<TRequest, TResponse>
    template<typename TRequest, typename TResponse>
    struct $GetAndSendResponseAsync$d__81_2;
    // Nested type: MasterServer::MessageHandler::$GetAndSendUnreilableResponse$d__82_2<TRequest, TResponse>
    template<typename TRequest, typename TResponse>
    struct $GetAndSendUnreilableResponse$d__82_2;
    // Nested type: MasterServer::MessageHandler::$SendMessageWithRetry$d__95
    struct $SendMessageWithRetry$d__95;
    // Nested type: MasterServer::MessageHandler::$$c__DisplayClass97_0
    class $$c__DisplayClass97_0;
    // Nested type: MasterServer::MessageHandler::$SendMultipartMessageWithRetryAsync$d__97
    struct $SendMultipartMessageWithRetryAsync$d__97;
    // Nested type: MasterServer::MessageHandler::$SendMessageWithRetryAsyncInternal$d__98
    struct $SendMessageWithRetryAsyncInternal$d__98;
    // Nested type: MasterServer::MessageHandler::$SendMessageWithRetryAwaitResponseAsync$d__99_1<T>
    template<typename T>
    struct $SendMessageWithRetryAwaitResponseAsync$d__99_1;
    // Nested type: MasterServer::MessageHandler::$$c__DisplayClass100_0_1<T>
    template<typename T>
    class $$c__DisplayClass100_0_1;
    // Nested type: MasterServer::MessageHandler::$AwaitResponseAsync$d__101_1<T>
    template<typename T>
    struct $AwaitResponseAsync$d__101_1;
    // Autogenerated type: MasterServer.MessageHandler/RequestWaiterId
    struct RequestWaiterId : public System::ValueType/*, public System::IEquatable_1<MasterServer::MessageHandler::RequestWaiterId>*/ {
      public:
      // public readonly System.Net.IPEndPoint endPoint
      // Offset: 0x0
      System::Net::IPEndPoint* endPoint;
      // public readonly System.UInt32 requestId
      // Offset: 0x8
      uint requestId;
      // Creating value type constructor for type: RequestWaiterId
      constexpr RequestWaiterId(System::Net::IPEndPoint* endPoint_ = {}, uint requestId_ = {}) noexcept : endPoint{endPoint_}, requestId{requestId_} {}
      // Creating interface conversion operator: operator System::IEquatable_1<MasterServer::MessageHandler::RequestWaiterId>
      operator System::IEquatable_1<MasterServer::MessageHandler::RequestWaiterId>() noexcept {
        return *reinterpret_cast<System::IEquatable_1<MasterServer::MessageHandler::RequestWaiterId>*>(this);
      }
      // public System.Void .ctor(System.Net.IPEndPoint endPoint, System.UInt32 requestId)
      // Offset: 0xE7FDFC
      // ABORTED: conflicts with another method.  RequestWaiterId(System::Net::IPEndPoint* endPoint, uint requestId);
      // public System.Boolean Equals(MasterServer.MessageHandler/RequestWaiterId other)
      // Offset: 0xE7FE2C
      // Implemented from: System.IEquatable`1
      // Base method: System.Boolean IEquatable_1::Equals(MasterServer.MessageHandler/RequestWaiterId other)
      bool Equals(MasterServer::MessageHandler::RequestWaiterId other);
      // public override System.Boolean Equals(System.Object other)
      // Offset: 0xE7FE70
      // Implemented from: System.ValueType
      // Base method: System.Boolean ValueType::Equals(System.Object other)
      bool Equals(::Il2CppObject* other);
      // public override System.Int32 GetHashCode()
      // Offset: 0xE7FE78
      // Implemented from: System.ValueType
      // Base method: System.Int32 ValueType::GetHashCode()
      int GetHashCode();
    }; // MasterServer.MessageHandler/RequestWaiterId
    // Autogenerated type: MasterServer.MessageHandler/MessageOrigin
    struct MessageOrigin : public System::ValueType {
      public:
      // public readonly System.Net.IPEndPoint endPoint
      // Offset: 0x0
      System::Net::IPEndPoint* endPoint;
      // public readonly System.UInt32 protocolVersion
      // Offset: 0x8
      uint protocolVersion;
      // Creating value type constructor for type: MessageOrigin
      constexpr MessageOrigin(System::Net::IPEndPoint* endPoint_ = {}, uint protocolVersion_ = {}) noexcept : endPoint{endPoint_}, protocolVersion{protocolVersion_} {}
      // public System.Void .ctor(System.Net.IPEndPoint endPoint, System.UInt32 protocolVersion)
      // Offset: 0xE7FD90
      // ABORTED: conflicts with another method.  MessageOrigin(System::Net::IPEndPoint* endPoint, uint protocolVersion);
    }; // MasterServer.MessageHandler/MessageOrigin
    // Autogenerated type: MasterServer.MessageHandler/HandshakeMessageType
    struct HandshakeMessageType : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: HandshakeMessageType
      constexpr HandshakeMessageType(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MasterServer.MessageHandler/HandshakeMessageType ClientHelloRequest
      static constexpr const int ClientHelloRequest = 0;
      // Get static field: static public MasterServer.MessageHandler/HandshakeMessageType ClientHelloRequest
      static MasterServer::MessageHandler::HandshakeMessageType _get_ClientHelloRequest();
      // Set static field: static public MasterServer.MessageHandler/HandshakeMessageType ClientHelloRequest
      static void _set_ClientHelloRequest(MasterServer::MessageHandler::HandshakeMessageType value);
      // static field const value: static public MasterServer.MessageHandler/HandshakeMessageType HelloVerifyRequest
      static constexpr const int HelloVerifyRequest = 1;
      // Get static field: static public MasterServer.MessageHandler/HandshakeMessageType HelloVerifyRequest
      static MasterServer::MessageHandler::HandshakeMessageType _get_HelloVerifyRequest();
      // Set static field: static public MasterServer.MessageHandler/HandshakeMessageType HelloVerifyRequest
      static void _set_HelloVerifyRequest(MasterServer::MessageHandler::HandshakeMessageType value);
      // static field const value: static public MasterServer.MessageHandler/HandshakeMessageType ClientHelloWithCookieRequest
      static constexpr const int ClientHelloWithCookieRequest = 2;
      // Get static field: static public MasterServer.MessageHandler/HandshakeMessageType ClientHelloWithCookieRequest
      static MasterServer::MessageHandler::HandshakeMessageType _get_ClientHelloWithCookieRequest();
      // Set static field: static public MasterServer.MessageHandler/HandshakeMessageType ClientHelloWithCookieRequest
      static void _set_ClientHelloWithCookieRequest(MasterServer::MessageHandler::HandshakeMessageType value);
      // static field const value: static public MasterServer.MessageHandler/HandshakeMessageType ServerHelloRequest
      static constexpr const int ServerHelloRequest = 3;
      // Get static field: static public MasterServer.MessageHandler/HandshakeMessageType ServerHelloRequest
      static MasterServer::MessageHandler::HandshakeMessageType _get_ServerHelloRequest();
      // Set static field: static public MasterServer.MessageHandler/HandshakeMessageType ServerHelloRequest
      static void _set_ServerHelloRequest(MasterServer::MessageHandler::HandshakeMessageType value);
      // static field const value: static public MasterServer.MessageHandler/HandshakeMessageType ServerCertificateRequest
      static constexpr const int ServerCertificateRequest = 4;
      // Get static field: static public MasterServer.MessageHandler/HandshakeMessageType ServerCertificateRequest
      static MasterServer::MessageHandler::HandshakeMessageType _get_ServerCertificateRequest();
      // Set static field: static public MasterServer.MessageHandler/HandshakeMessageType ServerCertificateRequest
      static void _set_ServerCertificateRequest(MasterServer::MessageHandler::HandshakeMessageType value);
      // static field const value: static public MasterServer.MessageHandler/HandshakeMessageType ServerCertificateResponse
      static constexpr const int ServerCertificateResponse = 5;
      // Get static field: static public MasterServer.MessageHandler/HandshakeMessageType ServerCertificateResponse
      static MasterServer::MessageHandler::HandshakeMessageType _get_ServerCertificateResponse();
      // Set static field: static public MasterServer.MessageHandler/HandshakeMessageType ServerCertificateResponse
      static void _set_ServerCertificateResponse(MasterServer::MessageHandler::HandshakeMessageType value);
      // static field const value: static public MasterServer.MessageHandler/HandshakeMessageType ClientKeyExchangeRequest
      static constexpr const int ClientKeyExchangeRequest = 6;
      // Get static field: static public MasterServer.MessageHandler/HandshakeMessageType ClientKeyExchangeRequest
      static MasterServer::MessageHandler::HandshakeMessageType _get_ClientKeyExchangeRequest();
      // Set static field: static public MasterServer.MessageHandler/HandshakeMessageType ClientKeyExchangeRequest
      static void _set_ClientKeyExchangeRequest(MasterServer::MessageHandler::HandshakeMessageType value);
      // static field const value: static public MasterServer.MessageHandler/HandshakeMessageType ChangeCipherSpecRequest
      static constexpr const int ChangeCipherSpecRequest = 7;
      // Get static field: static public MasterServer.MessageHandler/HandshakeMessageType ChangeCipherSpecRequest
      static MasterServer::MessageHandler::HandshakeMessageType _get_ChangeCipherSpecRequest();
      // Set static field: static public MasterServer.MessageHandler/HandshakeMessageType ChangeCipherSpecRequest
      static void _set_ChangeCipherSpecRequest(MasterServer::MessageHandler::HandshakeMessageType value);
      // static field const value: static public MasterServer.MessageHandler/HandshakeMessageType MessageReceivedAcknowledge
      static constexpr const int MessageReceivedAcknowledge = 8;
      // Get static field: static public MasterServer.MessageHandler/HandshakeMessageType MessageReceivedAcknowledge
      static MasterServer::MessageHandler::HandshakeMessageType _get_MessageReceivedAcknowledge();
      // Set static field: static public MasterServer.MessageHandler/HandshakeMessageType MessageReceivedAcknowledge
      static void _set_MessageReceivedAcknowledge(MasterServer::MessageHandler::HandshakeMessageType value);
      // static field const value: static public MasterServer.MessageHandler/HandshakeMessageType MultipartMessage
      static constexpr const int MultipartMessage = 9;
      // Get static field: static public MasterServer.MessageHandler/HandshakeMessageType MultipartMessage
      static MasterServer::MessageHandler::HandshakeMessageType _get_MultipartMessage();
      // Set static field: static public MasterServer.MessageHandler/HandshakeMessageType MultipartMessage
      static void _set_MultipartMessage(MasterServer::MessageHandler::HandshakeMessageType value);
    }; // MasterServer.MessageHandler/HandshakeMessageType
    // Autogenerated type: MasterServer.MessageHandler/UserMessageType
    struct UserMessageType : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: UserMessageType
      constexpr UserMessageType(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MasterServer.MessageHandler/UserMessageType AuthenticateUserRequest
      static constexpr const int AuthenticateUserRequest = 0;
      // Get static field: static public MasterServer.MessageHandler/UserMessageType AuthenticateUserRequest
      static MasterServer::MessageHandler::UserMessageType _get_AuthenticateUserRequest();
      // Set static field: static public MasterServer.MessageHandler/UserMessageType AuthenticateUserRequest
      static void _set_AuthenticateUserRequest(MasterServer::MessageHandler::UserMessageType value);
      // static field const value: static public MasterServer.MessageHandler/UserMessageType AuthenticateUserResponse
      static constexpr const int AuthenticateUserResponse = 1;
      // Get static field: static public MasterServer.MessageHandler/UserMessageType AuthenticateUserResponse
      static MasterServer::MessageHandler::UserMessageType _get_AuthenticateUserResponse();
      // Set static field: static public MasterServer.MessageHandler/UserMessageType AuthenticateUserResponse
      static void _set_AuthenticateUserResponse(MasterServer::MessageHandler::UserMessageType value);
      // static field const value: static public MasterServer.MessageHandler/UserMessageType BroadcastServerStatusRequest
      static constexpr const int BroadcastServerStatusRequest = 2;
      // Get static field: static public MasterServer.MessageHandler/UserMessageType BroadcastServerStatusRequest
      static MasterServer::MessageHandler::UserMessageType _get_BroadcastServerStatusRequest();
      // Set static field: static public MasterServer.MessageHandler/UserMessageType BroadcastServerStatusRequest
      static void _set_BroadcastServerStatusRequest(MasterServer::MessageHandler::UserMessageType value);
      // static field const value: static public MasterServer.MessageHandler/UserMessageType BroadcastServerStatusResponse
      static constexpr const int BroadcastServerStatusResponse = 3;
      // Get static field: static public MasterServer.MessageHandler/UserMessageType BroadcastServerStatusResponse
      static MasterServer::MessageHandler::UserMessageType _get_BroadcastServerStatusResponse();
      // Set static field: static public MasterServer.MessageHandler/UserMessageType BroadcastServerStatusResponse
      static void _set_BroadcastServerStatusResponse(MasterServer::MessageHandler::UserMessageType value);
      // static field const value: static public MasterServer.MessageHandler/UserMessageType BroadcastServerHeartbeatRequest
      static constexpr const int BroadcastServerHeartbeatRequest = 4;
      // Get static field: static public MasterServer.MessageHandler/UserMessageType BroadcastServerHeartbeatRequest
      static MasterServer::MessageHandler::UserMessageType _get_BroadcastServerHeartbeatRequest();
      // Set static field: static public MasterServer.MessageHandler/UserMessageType BroadcastServerHeartbeatRequest
      static void _set_BroadcastServerHeartbeatRequest(MasterServer::MessageHandler::UserMessageType value);
      // static field const value: static public MasterServer.MessageHandler/UserMessageType BroadcastServerHeartbeatResponse
      static constexpr const int BroadcastServerHeartbeatResponse = 5;
      // Get static field: static public MasterServer.MessageHandler/UserMessageType BroadcastServerHeartbeatResponse
      static MasterServer::MessageHandler::UserMessageType _get_BroadcastServerHeartbeatResponse();
      // Set static field: static public MasterServer.MessageHandler/UserMessageType BroadcastServerHeartbeatResponse
      static void _set_BroadcastServerHeartbeatResponse(MasterServer::MessageHandler::UserMessageType value);
      // static field const value: static public MasterServer.MessageHandler/UserMessageType BroadcastServerRemoveRequest
      static constexpr const int BroadcastServerRemoveRequest = 6;
      // Get static field: static public MasterServer.MessageHandler/UserMessageType BroadcastServerRemoveRequest
      static MasterServer::MessageHandler::UserMessageType _get_BroadcastServerRemoveRequest();
      // Set static field: static public MasterServer.MessageHandler/UserMessageType BroadcastServerRemoveRequest
      static void _set_BroadcastServerRemoveRequest(MasterServer::MessageHandler::UserMessageType value);
      // static field const value: static public MasterServer.MessageHandler/UserMessageType ConnectToServerRequest
      static constexpr const int ConnectToServerRequest = 7;
      // Get static field: static public MasterServer.MessageHandler/UserMessageType ConnectToServerRequest
      static MasterServer::MessageHandler::UserMessageType _get_ConnectToServerRequest();
      // Set static field: static public MasterServer.MessageHandler/UserMessageType ConnectToServerRequest
      static void _set_ConnectToServerRequest(MasterServer::MessageHandler::UserMessageType value);
      // static field const value: static public MasterServer.MessageHandler/UserMessageType ConnectToServerResponse
      static constexpr const int ConnectToServerResponse = 8;
      // Get static field: static public MasterServer.MessageHandler/UserMessageType ConnectToServerResponse
      static MasterServer::MessageHandler::UserMessageType _get_ConnectToServerResponse();
      // Set static field: static public MasterServer.MessageHandler/UserMessageType ConnectToServerResponse
      static void _set_ConnectToServerResponse(MasterServer::MessageHandler::UserMessageType value);
      // static field const value: static public MasterServer.MessageHandler/UserMessageType ConnectToMatchmakingRequest
      static constexpr const int ConnectToMatchmakingRequest = 9;
      // Get static field: static public MasterServer.MessageHandler/UserMessageType ConnectToMatchmakingRequest
      static MasterServer::MessageHandler::UserMessageType _get_ConnectToMatchmakingRequest();
      // Set static field: static public MasterServer.MessageHandler/UserMessageType ConnectToMatchmakingRequest
      static void _set_ConnectToMatchmakingRequest(MasterServer::MessageHandler::UserMessageType value);
      // static field const value: static public MasterServer.MessageHandler/UserMessageType PrepareForConnectionRequest
      static constexpr const int PrepareForConnectionRequest = 10;
      // Get static field: static public MasterServer.MessageHandler/UserMessageType PrepareForConnectionRequest
      static MasterServer::MessageHandler::UserMessageType _get_PrepareForConnectionRequest();
      // Set static field: static public MasterServer.MessageHandler/UserMessageType PrepareForConnectionRequest
      static void _set_PrepareForConnectionRequest(MasterServer::MessageHandler::UserMessageType value);
      // static field const value: static public MasterServer.MessageHandler/UserMessageType GetPublicServersRequest
      static constexpr const int GetPublicServersRequest = 11;
      // Get static field: static public MasterServer.MessageHandler/UserMessageType GetPublicServersRequest
      static MasterServer::MessageHandler::UserMessageType _get_GetPublicServersRequest();
      // Set static field: static public MasterServer.MessageHandler/UserMessageType GetPublicServersRequest
      static void _set_GetPublicServersRequest(MasterServer::MessageHandler::UserMessageType value);
      // static field const value: static public MasterServer.MessageHandler/UserMessageType GetPublicServersResponse
      static constexpr const int GetPublicServersResponse = 12;
      // Get static field: static public MasterServer.MessageHandler/UserMessageType GetPublicServersResponse
      static MasterServer::MessageHandler::UserMessageType _get_GetPublicServersResponse();
      // Set static field: static public MasterServer.MessageHandler/UserMessageType GetPublicServersResponse
      static void _set_GetPublicServersResponse(MasterServer::MessageHandler::UserMessageType value);
      // static field const value: static public MasterServer.MessageHandler/UserMessageType MessageReceivedAcknowledge
      static constexpr const int MessageReceivedAcknowledge = 13;
      // Get static field: static public MasterServer.MessageHandler/UserMessageType MessageReceivedAcknowledge
      static MasterServer::MessageHandler::UserMessageType _get_MessageReceivedAcknowledge();
      // Set static field: static public MasterServer.MessageHandler/UserMessageType MessageReceivedAcknowledge
      static void _set_MessageReceivedAcknowledge(MasterServer::MessageHandler::UserMessageType value);
      // static field const value: static public MasterServer.MessageHandler/UserMessageType MultipartMessage
      static constexpr const int MultipartMessage = 14;
      // Get static field: static public MasterServer.MessageHandler/UserMessageType MultipartMessage
      static MasterServer::MessageHandler::UserMessageType _get_MultipartMessage();
      // Set static field: static public MasterServer.MessageHandler/UserMessageType MultipartMessage
      static void _set_MultipartMessage(MasterServer::MessageHandler::UserMessageType value);
      // static field const value: static public MasterServer.MessageHandler/UserMessageType SessionKeepaliveMessage
      static constexpr const int SessionKeepaliveMessage = 15;
      // Get static field: static public MasterServer.MessageHandler/UserMessageType SessionKeepaliveMessage
      static MasterServer::MessageHandler::UserMessageType _get_SessionKeepaliveMessage();
      // Set static field: static public MasterServer.MessageHandler/UserMessageType SessionKeepaliveMessage
      static void _set_SessionKeepaliveMessage(MasterServer::MessageHandler::UserMessageType value);
    }; // MasterServer.MessageHandler/UserMessageType
    // Autogenerated type: MasterServer.MessageHandler/DedicatedServerMessageType
    struct DedicatedServerMessageType : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: DedicatedServerMessageType
      constexpr DedicatedServerMessageType(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MasterServer.MessageHandler/DedicatedServerMessageType AuthenticateDedicatedServerRequest
      static constexpr const int AuthenticateDedicatedServerRequest = 0;
      // Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType AuthenticateDedicatedServerRequest
      static MasterServer::MessageHandler::DedicatedServerMessageType _get_AuthenticateDedicatedServerRequest();
      // Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType AuthenticateDedicatedServerRequest
      static void _set_AuthenticateDedicatedServerRequest(MasterServer::MessageHandler::DedicatedServerMessageType value);
      // static field const value: static public MasterServer.MessageHandler/DedicatedServerMessageType AuthenticateDedicatedServerResponse
      static constexpr const int AuthenticateDedicatedServerResponse = 1;
      // Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType AuthenticateDedicatedServerResponse
      static MasterServer::MessageHandler::DedicatedServerMessageType _get_AuthenticateDedicatedServerResponse();
      // Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType AuthenticateDedicatedServerResponse
      static void _set_AuthenticateDedicatedServerResponse(MasterServer::MessageHandler::DedicatedServerMessageType value);
      // static field const value: static public MasterServer.MessageHandler/DedicatedServerMessageType GetAvailableRelayServerRequest
      static constexpr const int GetAvailableRelayServerRequest = 2;
      // Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType GetAvailableRelayServerRequest
      static MasterServer::MessageHandler::DedicatedServerMessageType _get_GetAvailableRelayServerRequest();
      // Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType GetAvailableRelayServerRequest
      static void _set_GetAvailableRelayServerRequest(MasterServer::MessageHandler::DedicatedServerMessageType value);
      // static field const value: static public MasterServer.MessageHandler/DedicatedServerMessageType GetAvailableRelayServerResponse
      static constexpr const int GetAvailableRelayServerResponse = 3;
      // Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType GetAvailableRelayServerResponse
      static MasterServer::MessageHandler::DedicatedServerMessageType _get_GetAvailableRelayServerResponse();
      // Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType GetAvailableRelayServerResponse
      static void _set_GetAvailableRelayServerResponse(MasterServer::MessageHandler::DedicatedServerMessageType value);
      // static field const value: static public MasterServer.MessageHandler/DedicatedServerMessageType GetAvailableMatchmakingServerRequest
      static constexpr const int GetAvailableMatchmakingServerRequest = 4;
      // Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType GetAvailableMatchmakingServerRequest
      static MasterServer::MessageHandler::DedicatedServerMessageType _get_GetAvailableMatchmakingServerRequest();
      // Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType GetAvailableMatchmakingServerRequest
      static void _set_GetAvailableMatchmakingServerRequest(MasterServer::MessageHandler::DedicatedServerMessageType value);
      // static field const value: static public MasterServer.MessageHandler/DedicatedServerMessageType GetAvailableMatchmakingServerResponse
      static constexpr const int GetAvailableMatchmakingServerResponse = 5;
      // Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType GetAvailableMatchmakingServerResponse
      static MasterServer::MessageHandler::DedicatedServerMessageType _get_GetAvailableMatchmakingServerResponse();
      // Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType GetAvailableMatchmakingServerResponse
      static void _set_GetAvailableMatchmakingServerResponse(MasterServer::MessageHandler::DedicatedServerMessageType value);
      // static field const value: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerUnavailableRequest
      static constexpr const int DedicatedServerUnavailableRequest = 6;
      // Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerUnavailableRequest
      static MasterServer::MessageHandler::DedicatedServerMessageType _get_DedicatedServerUnavailableRequest();
      // Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerUnavailableRequest
      static void _set_DedicatedServerUnavailableRequest(MasterServer::MessageHandler::DedicatedServerMessageType value);
      // static field const value: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerHeartbeatRequest
      static constexpr const int DedicatedServerHeartbeatRequest = 7;
      // Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerHeartbeatRequest
      static MasterServer::MessageHandler::DedicatedServerMessageType _get_DedicatedServerHeartbeatRequest();
      // Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerHeartbeatRequest
      static void _set_DedicatedServerHeartbeatRequest(MasterServer::MessageHandler::DedicatedServerMessageType value);
      // static field const value: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerHeartbeatResponse
      static constexpr const int DedicatedServerHeartbeatResponse = 8;
      // Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerHeartbeatResponse
      static MasterServer::MessageHandler::DedicatedServerMessageType _get_DedicatedServerHeartbeatResponse();
      // Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerHeartbeatResponse
      static void _set_DedicatedServerHeartbeatResponse(MasterServer::MessageHandler::DedicatedServerMessageType value);
      // static field const value: static public MasterServer.MessageHandler/DedicatedServerMessageType RelayServerStatusUpdateRequest
      static constexpr const int RelayServerStatusUpdateRequest = 9;
      // Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType RelayServerStatusUpdateRequest
      static MasterServer::MessageHandler::DedicatedServerMessageType _get_RelayServerStatusUpdateRequest();
      // Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType RelayServerStatusUpdateRequest
      static void _set_RelayServerStatusUpdateRequest(MasterServer::MessageHandler::DedicatedServerMessageType value);
      // static field const value: static public MasterServer.MessageHandler/DedicatedServerMessageType MatchmakingServerStatusUpdateRequest
      static constexpr const int MatchmakingServerStatusUpdateRequest = 10;
      // Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType MatchmakingServerStatusUpdateRequest
      static MasterServer::MessageHandler::DedicatedServerMessageType _get_MatchmakingServerStatusUpdateRequest();
      // Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType MatchmakingServerStatusUpdateRequest
      static void _set_MatchmakingServerStatusUpdateRequest(MasterServer::MessageHandler::DedicatedServerMessageType value);
      // static field const value: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerShutDownRequest
      static constexpr const int DedicatedServerShutDownRequest = 11;
      // Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerShutDownRequest
      static MasterServer::MessageHandler::DedicatedServerMessageType _get_DedicatedServerShutDownRequest();
      // Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerShutDownRequest
      static void _set_DedicatedServerShutDownRequest(MasterServer::MessageHandler::DedicatedServerMessageType value);
      // static field const value: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerPrepareForConnectionRequest
      static constexpr const int DedicatedServerPrepareForConnectionRequest = 12;
      // Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerPrepareForConnectionRequest
      static MasterServer::MessageHandler::DedicatedServerMessageType _get_DedicatedServerPrepareForConnectionRequest();
      // Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType DedicatedServerPrepareForConnectionRequest
      static void _set_DedicatedServerPrepareForConnectionRequest(MasterServer::MessageHandler::DedicatedServerMessageType value);
      // static field const value: static public MasterServer.MessageHandler/DedicatedServerMessageType MessageReceivedAcknowledge
      static constexpr const int MessageReceivedAcknowledge = 13;
      // Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType MessageReceivedAcknowledge
      static MasterServer::MessageHandler::DedicatedServerMessageType _get_MessageReceivedAcknowledge();
      // Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType MessageReceivedAcknowledge
      static void _set_MessageReceivedAcknowledge(MasterServer::MessageHandler::DedicatedServerMessageType value);
      // static field const value: static public MasterServer.MessageHandler/DedicatedServerMessageType MultipartMessage
      static constexpr const int MultipartMessage = 14;
      // Get static field: static public MasterServer.MessageHandler/DedicatedServerMessageType MultipartMessage
      static MasterServer::MessageHandler::DedicatedServerMessageType _get_MultipartMessage();
      // Set static field: static public MasterServer.MessageHandler/DedicatedServerMessageType MultipartMessage
      static void _set_MultipartMessage(MasterServer::MessageHandler::DedicatedServerMessageType value);
    }; // MasterServer.MessageHandler/DedicatedServerMessageType
    // private readonly NetworkPacketSerializer`2<MasterServer.MessageHandler/HandshakeMessageType,MasterServer.MessageHandler/MessageOrigin> _handshakeMessageSerializer
    // Offset: 0x10
    GlobalNamespace::NetworkPacketSerializer_2<MasterServer::MessageHandler::HandshakeMessageType, MasterServer::MessageHandler::MessageOrigin>* handshakeMessageSerializer;
    // private readonly NetworkPacketSerializer`2<MasterServer.MessageHandler/UserMessageType,MasterServer.MessageHandler/MessageOrigin> _userMessageSerializer
    // Offset: 0x18
    GlobalNamespace::NetworkPacketSerializer_2<MasterServer::MessageHandler::UserMessageType, MasterServer::MessageHandler::MessageOrigin>* userMessageSerializer;
    // private readonly NetworkPacketSerializer`2<MasterServer.MessageHandler/DedicatedServerMessageType,MasterServer.MessageHandler/MessageOrigin> _dedicatedServerMessageSerializer
    // Offset: 0x20
    GlobalNamespace::NetworkPacketSerializer_2<MasterServer::MessageHandler::DedicatedServerMessageType, MasterServer::MessageHandler::MessageOrigin>* dedicatedServerMessageSerializer;
    // private readonly LiteNetLib.Utils.NetDataWriter _dataWriter
    // Offset: 0x28
    LiteNetLib::Utils::NetDataWriter* dataWriter;
    // private readonly LiteNetLib.Utils.NetDataReader _multipartReader
    // Offset: 0x30
    LiteNetLib::Utils::NetDataReader* multipartReader;
    // protected readonly PacketEncryptionLayer encryptionLayer
    // Offset: 0x38
    GlobalNamespace::PacketEncryptionLayer* encryptionLayer;
    // private readonly MasterServer.MessageHandler/IMessageSender _sender
    // Offset: 0x40
    MasterServer::MessageHandler::IMessageSender* sender;
    // protected readonly MasterServer.IAnalyticsManager analytics
    // Offset: 0x48
    MasterServer::IAnalyticsManager* analytics;
    // private readonly ExpiringDictionary`2<MasterServer.MessageHandler/RequestWaiterId,MasterServer.MessageHandler/SentRequestWaiter> _sentRequestWaiters
    // Offset: 0x50
    GlobalNamespace::ExpiringDictionary_2<MasterServer::MessageHandler::RequestWaiterId, MasterServer::MessageHandler::SentRequestWaiter*>* sentRequestWaiters;
    // private readonly ExpiringDictionary`2<MasterServer.MessageHandler/RequestWaiterId,MasterServer.MessageHandler/RequestResponseWaiter> _requestResponseWaiters
    // Offset: 0x58
    GlobalNamespace::ExpiringDictionary_2<MasterServer::MessageHandler::RequestWaiterId, MasterServer::MessageHandler::RequestResponseWaiter*>* requestResponseWaiters;
    // private readonly ExpiringDictionary`2<System.Net.IPEndPoint,MasterServer.MessageHandler/ConnectionState> _connectionStates
    // Offset: 0x60
    GlobalNamespace::ExpiringDictionary_2<System::Net::IPEndPoint*, MasterServer::MessageHandler::ConnectionState*>* connectionStates;
    // private readonly ExpiringDictionary`2<MasterServer.MessageHandler/RequestWaiterId,MasterServer.MessageHandler/MultipartMessageWaiter> _multipartMessageBuffer
    // Offset: 0x68
    GlobalNamespace::ExpiringDictionary_2<MasterServer::MessageHandler::RequestWaiterId, MasterServer::MessageHandler::MultipartMessageWaiter*>* multipartMessageBuffer;
    // private readonly SmallBufferPool _bufferPool
    // Offset: 0x70
    GlobalNamespace::SmallBufferPool* bufferPool;
    // private readonly System.Threading.CancellationTokenSource _disposedTokenSource
    // Offset: 0x78
    System::Threading::CancellationTokenSource* disposedTokenSource;
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // static field const value: static private System.UInt32 kHandshakeMessageType
    static constexpr const uint kHandshakeMessageType = 3192347326u;
    // Get static field: static private System.UInt32 kHandshakeMessageType
    static uint _get_kHandshakeMessageType();
    // Set static field: static private System.UInt32 kHandshakeMessageType
    static void _set_kHandshakeMessageType(uint value);
    // static field const value: static private System.UInt32 kUserMessageType
    static constexpr const uint kUserMessageType = 1u;
    // Get static field: static private System.UInt32 kUserMessageType
    static uint _get_kUserMessageType();
    // Set static field: static private System.UInt32 kUserMessageType
    static void _set_kUserMessageType(uint value);
    // static field const value: static private System.UInt32 kDedicatedServerMessageType
    static constexpr const uint kDedicatedServerMessageType = 2u;
    // Get static field: static private System.UInt32 kDedicatedServerMessageType
    static uint _get_kDedicatedServerMessageType();
    // Set static field: static private System.UInt32 kDedicatedServerMessageType
    static void _set_kDedicatedServerMessageType(uint value);
    // static field const value: static public System.UInt32 kProtocolVersion
    static constexpr const uint kProtocolVersion = 1u;
    // Get static field: static public System.UInt32 kProtocolVersion
    static uint _get_kProtocolVersion();
    // Set static field: static public System.UInt32 kProtocolVersion
    static void _set_kProtocolVersion(uint value);
    // static field const value: static public System.Int32 kMaxPublicKeyLength
    static constexpr const int kMaxPublicKeyLength = 2048;
    // Get static field: static public System.Int32 kMaxPublicKeyLength
    static int _get_kMaxPublicKeyLength();
    // Set static field: static public System.Int32 kMaxPublicKeyLength
    static void _set_kMaxPublicKeyLength(int value);
    // static field const value: static public System.Int32 kMinSignatureLength
    static constexpr const int kMinSignatureLength = 128;
    // Get static field: static public System.Int32 kMinSignatureLength
    static int _get_kMinSignatureLength();
    // Set static field: static public System.Int32 kMinSignatureLength
    static void _set_kMinSignatureLength(int value);
    // static field const value: static public System.Int32 kMaxSignatureLength
    static constexpr const int kMaxSignatureLength = 512;
    // Get static field: static public System.Int32 kMaxSignatureLength
    static int _get_kMaxSignatureLength();
    // Set static field: static public System.Int32 kMaxSignatureLength
    static void _set_kMaxSignatureLength(int value);
    // static field const value: static private System.Int32 kMaxPacketSize
    static constexpr const int kMaxPacketSize = 412;
    // Get static field: static private System.Int32 kMaxPacketSize
    static int _get_kMaxPacketSize();
    // Set static field: static private System.Int32 kMaxPacketSize
    static void _set_kMaxPacketSize(int value);
    // static field const value: static private System.Int32 kRetryCount
    static constexpr const int kRetryCount = 5;
    // Get static field: static private System.Int32 kRetryCount
    static int _get_kRetryCount();
    // Set static field: static private System.Int32 kRetryCount
    static void _set_kRetryCount(int value);
    // static field const value: static private System.Int32 kRetryDelay0Ms
    static constexpr const int kRetryDelay0Ms = 200;
    // Get static field: static private System.Int32 kRetryDelay0Ms
    static int _get_kRetryDelay0Ms();
    // Set static field: static private System.Int32 kRetryDelay0Ms
    static void _set_kRetryDelay0Ms(int value);
    // static field const value: static private System.Int32 kRetryDelay1Ms
    static constexpr const int kRetryDelay1Ms = 300;
    // Get static field: static private System.Int32 kRetryDelay1Ms
    static int _get_kRetryDelay1Ms();
    // Set static field: static private System.Int32 kRetryDelay1Ms
    static void _set_kRetryDelay1Ms(int value);
    // static field const value: static private System.Int32 kRetryDelay2Ms
    static constexpr const int kRetryDelay2Ms = 450;
    // Get static field: static private System.Int32 kRetryDelay2Ms
    static int _get_kRetryDelay2Ms();
    // Set static field: static private System.Int32 kRetryDelay2Ms
    static void _set_kRetryDelay2Ms(int value);
    // static field const value: static private System.Int32 kRetryDelay3Ms
    static constexpr const int kRetryDelay3Ms = 600;
    // Get static field: static private System.Int32 kRetryDelay3Ms
    static int _get_kRetryDelay3Ms();
    // Set static field: static private System.Int32 kRetryDelay3Ms
    static void _set_kRetryDelay3Ms(int value);
    // static field const value: static private System.Int32 kRetryDelay4Ms
    static constexpr const int kRetryDelay4Ms = 1000;
    // Get static field: static private System.Int32 kRetryDelay4Ms
    static int _get_kRetryDelay4Ms();
    // Set static field: static private System.Int32 kRetryDelay4Ms
    static void _set_kRetryDelay4Ms(int value);
    // static field const value: static private System.Int64 kConnectionStateTimeout
    static constexpr const int64_t kConnectionStateTimeout = 3000000000;
    // Get static field: static private System.Int64 kConnectionStateTimeout
    static int64_t _get_kConnectionStateTimeout();
    // Set static field: static private System.Int64 kConnectionStateTimeout
    static void _set_kConnectionStateTimeout(int64_t value);
    // static field const value: static private System.Int64 kSentRequestTimeout
    static constexpr const int64_t kSentRequestTimeout = 50000000;
    // Get static field: static private System.Int64 kSentRequestTimeout
    static int64_t _get_kSentRequestTimeout();
    // Set static field: static private System.Int64 kSentRequestTimeout
    static void _set_kSentRequestTimeout(int64_t value);
    // static field const value: static private System.Int64 kSentRequestWithResponseTimeout
    static constexpr const int64_t kSentRequestWithResponseTimeout = 150000000;
    // Get static field: static private System.Int64 kSentRequestWithResponseTimeout
    static int64_t _get_kSentRequestWithResponseTimeout();
    // Set static field: static private System.Int64 kSentRequestWithResponseTimeout
    static void _set_kSentRequestWithResponseTimeout(int64_t value);
    // static field const value: static private System.Int64 kMultipartMessageTimeout
    static constexpr const int64_t kMultipartMessageTimeout = 100000000;
    // Get static field: static private System.Int64 kMultipartMessageTimeout
    static int64_t _get_kMultipartMessageTimeout();
    // Set static field: static private System.Int64 kMultipartMessageTimeout
    static void _set_kMultipartMessageTimeout(int64_t value);
    // protected System.Void .ctor(MasterServer.MessageHandler/IMessageSender sender, PacketEncryptionLayer encryptionLayer, MasterServer.IAnalyticsManager analytics)
    // Offset: 0x1AD75B8
    static MessageHandler* New_ctor(MasterServer::MessageHandler::IMessageSender* sender, GlobalNamespace::PacketEncryptionLayer* encryptionLayer, MasterServer::IAnalyticsManager* analytics);
    // private System.Void RegisterHandshakeMessageHandlers()
    // Offset: 0x1AD78B0
    void RegisterHandshakeMessageHandlers();
    // protected System.Boolean ShouldHandleHandshakeMessage(MasterServer.IHandshakeMessage packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x1AD7FB8
    bool ShouldHandleHandshakeMessage(MasterServer::IHandshakeMessage* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleClientHelloRequest(MasterServer.ClientHelloRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x1AD7FC0
    void HandleClientHelloRequest(MasterServer::ClientHelloRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleHelloVerifyRequest(MasterServer.HelloVerifyRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x1AD7FE0
    void HandleHelloVerifyRequest(MasterServer::HelloVerifyRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleClientHelloWithCookieRequest(MasterServer.ClientHelloWithCookieRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x1AD825C
    void HandleClientHelloWithCookieRequest(MasterServer::ClientHelloWithCookieRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void RegisterUserMessageHandlers()
    // Offset: 0x1AD827C
    void RegisterUserMessageHandlers();
    // protected System.Boolean ShouldHandleUserMessage(MasterServer.IUserMessage packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x1AD8E74
    bool ShouldHandleUserMessage(MasterServer::IUserMessage* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleBroadcastServerStatusRequest(MasterServer.BroadcastServerStatusRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x1AD8E7C
    void HandleBroadcastServerStatusRequest(MasterServer::BroadcastServerStatusRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleBroadcastServerHeartbeatRequest(MasterServer.BroadcastServerHeartbeatRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x1AD8E9C
    void HandleBroadcastServerHeartbeatRequest(MasterServer::BroadcastServerHeartbeatRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleBroadcastServerHeartbeatResponse(MasterServer.BroadcastServerHeartbeatResponse packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x1AD8EB4
    void HandleBroadcastServerHeartbeatResponse(MasterServer::BroadcastServerHeartbeatResponse* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleBroadcastServerRemoveRequest(MasterServer.BroadcastServerRemoveRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x1AD8ECC
    void HandleBroadcastServerRemoveRequest(MasterServer::BroadcastServerRemoveRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleConnectToServerRequest(MasterServer.ConnectToServerRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x1AD8EE4
    void HandleConnectToServerRequest(MasterServer::ConnectToServerRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleConnectToMatchmakingRequest(MasterServer.ConnectToMatchmakingRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x1AD8F04
    void HandleConnectToMatchmakingRequest(MasterServer::ConnectToMatchmakingRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandlePrepareForConnectionRequest(MasterServer.PrepareForConnectionRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x1AD8F24
    void HandlePrepareForConnectionRequest(MasterServer::PrepareForConnectionRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleGetPublicServersRequest(MasterServer.GetPublicServersRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x1AD8F44
    void HandleGetPublicServersRequest(MasterServer::GetPublicServersRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // private System.Void HandleSessionKeepaliveMessage(MasterServer.SessionKeepaliveMessage packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x1AD8F64
    void HandleSessionKeepaliveMessage(MasterServer::SessionKeepaliveMessage* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void RegisterDedicatedServerHandlers()
    // Offset: 0x1AD8FD8
    void RegisterDedicatedServerHandlers();
    // protected System.Boolean ShouldHandleDedicatedServerMessage(MasterServer.IDedicatedServerMessage packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x1AD9A74
    bool ShouldHandleDedicatedServerMessage(MasterServer::IDedicatedServerMessage* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleGetAvailableRelayServerRequest(MasterServer.GetAvailableRelayServerRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x1AD9A7C
    void HandleGetAvailableRelayServerRequest(MasterServer::GetAvailableRelayServerRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleGetAvailableMatchmakingServerRequest(MasterServer.GetAvailableMatchmakingServerRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x1AD9A9C
    void HandleGetAvailableMatchmakingServerRequest(MasterServer::GetAvailableMatchmakingServerRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleDedicatedServerUnavailableRequest(MasterServer.DedicatedServerNoLongerOccupiedRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x1AD9ABC
    void HandleDedicatedServerUnavailableRequest(MasterServer::DedicatedServerNoLongerOccupiedRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleDedicatedServerHeartbeatRequest(MasterServer.DedicatedServerHeartbeatRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x1AD9ADC
    void HandleDedicatedServerHeartbeatRequest(MasterServer::DedicatedServerHeartbeatRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleDedicatedServerHeartbeatResponse(MasterServer.DedicatedServerHeartbeatResponse packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x1AD9AF4
    void HandleDedicatedServerHeartbeatResponse(MasterServer::DedicatedServerHeartbeatResponse* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleRelayServerStatusUpdateRequest(MasterServer.RelayServerStatusUpdateRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x1AD9B0C
    void HandleRelayServerStatusUpdateRequest(MasterServer::RelayServerStatusUpdateRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleMatchmakingServerStatusUpdateRequest(MasterServer.MatchmakingServerStatusUpdateRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x1AD9B2C
    void HandleMatchmakingServerStatusUpdateRequest(MasterServer::MatchmakingServerStatusUpdateRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleDedicatedServerShutDownRequest(MasterServer.DedicatedServerShutDownRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x1AD9B4C
    void HandleDedicatedServerShutDownRequest(MasterServer::DedicatedServerShutDownRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void HandleDedicatedServerPrepareForConnectionRequest(MasterServer.DedicatedServerPrepareForConnectionRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x1AD9B64
    void HandleDedicatedServerPrepareForConnectionRequest(MasterServer::DedicatedServerPrepareForConnectionRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // private System.Void DefaultAcknowledgeHandler(T packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0xFFFFFFFF
    template<class T>
    void DefaultAcknowledgeHandler(T packet, MasterServer::MessageHandler::MessageOrigin origin) {
      static_assert(std::is_base_of_v<MasterServer::IMasterServerMessage, std::remove_pointer_t<T>> && std::is_base_of_v<MasterServer::IMasterServerAcknowledgeMessage, std::remove_pointer_t<T>>);
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "DefaultAcknowledgeHandler", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, packet, origin));
    }
    // private System.Void DefaultResponseHandler(T packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0xFFFFFFFF
    template<class T>
    void DefaultResponseHandler(T packet, MasterServer::MessageHandler::MessageOrigin origin) {
      static_assert(std::is_base_of_v<MasterServer::IMasterServerReliableResponse, std::remove_pointer_t<T>>);
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "DefaultResponseHandler", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, packet, origin));
    }
    // private System.Void DefaultMultipartMessageHandler(T packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0xFFFFFFFF
    template<class T>
    void DefaultMultipartMessageHandler(T packet, MasterServer::MessageHandler::MessageOrigin origin) {
      static_assert(std::is_base_of_v<MasterServer::IMasterServerMultipartMessage, std::remove_pointer_t<T>>);
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "DefaultMultipartMessageHandler", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, packet, origin));
    }
    // private System.Action`2<T,MasterServer.MessageHandler/MessageOrigin> CustomResponseHandler(System.Action`2<T,MasterServer.MessageHandler/MessageOrigin> customHandler)
    // Offset: 0xFFFFFFFF
    template<class T>
    System::Action_2<T, MasterServer::MessageHandler::MessageOrigin>* CustomResponseHandler(System::Action_2<T, MasterServer::MessageHandler::MessageOrigin>* customHandler) {
      static_assert(std::is_base_of_v<MasterServer::IMasterServerReliableRequest, std::remove_pointer_t<T>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<System::Action_2<T, MasterServer::MessageHandler::MessageOrigin>*>(this, "CustomResponseHandler", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, customHandler)));
    }
    // private System.Action`2<T,MasterServer.MessageHandler/MessageOrigin> CustomUnreliableResponseHandler(System.Action`2<T,MasterServer.MessageHandler/MessageOrigin> customHandler)
    // Offset: 0xFFFFFFFF
    template<class T>
    System::Action_2<T, MasterServer::MessageHandler::MessageOrigin>* CustomUnreliableResponseHandler(System::Action_2<T, MasterServer::MessageHandler::MessageOrigin>* customHandler) {
      static_assert(std::is_base_of_v<MasterServer::IMasterServerUnreliableMessage, std::remove_pointer_t<T>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<System::Action_2<T, MasterServer::MessageHandler::MessageOrigin>*>(this, "CustomUnreliableResponseHandler", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, customHandler)));
    }
    // private System.Boolean IsUnhandledMessage(MasterServer.IMasterServerReliableRequest packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x1AD9B84
    bool IsUnhandledMessage(MasterServer::IMasterServerReliableRequest* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // private System.Void CompleteSend(MasterServer.IMasterServerResponse packet, System.Net.IPEndPoint remoteEndPoint)
    // Offset: 0x1ADA42C
    void CompleteSend(MasterServer::IMasterServerResponse* packet, System::Net::IPEndPoint* remoteEndPoint);
    // private System.Boolean CompleteRequest(MasterServer.IMasterServerReliableResponse packet, System.Net.IPEndPoint remoteEndPoint)
    // Offset: 0x1AD812C
    bool CompleteRequest(MasterServer::IMasterServerReliableResponse* packet, System::Net::IPEndPoint* remoteEndPoint);
    // private System.Boolean ShouldHandleMessage(MasterServer.IMasterServerMessage packet, MasterServer.MessageHandler/MessageOrigin origin)
    // Offset: 0x1ADA098
    bool ShouldHandleMessage(MasterServer::IMasterServerMessage* packet, MasterServer::MessageHandler::MessageOrigin origin);
    // protected System.Void GetAndSendResponse(TRequest request, MasterServer.MessageHandler/MessageOrigin origin, System.Func`3<TRequest,MasterServer.MessageHandler/MessageOrigin,System.Threading.Tasks.Task`1<TResponse>> tryGetResponse, System.Func`1<TResponse> getFailureResponse)
    // Offset: 0xFFFFFFFF
    template<class TRequest, class TResponse>
    void GetAndSendResponse(TRequest request, MasterServer::MessageHandler::MessageOrigin origin, System::Func_3<TRequest, MasterServer::MessageHandler::MessageOrigin, System::Threading::Tasks::Task_1<TResponse>*>* tryGetResponse, System::Func_1<TResponse>* getFailureResponse) {
      static_assert(std::is_base_of_v<MasterServer::IMasterServerReliableRequest, std::remove_pointer_t<TRequest>>);
      static_assert(std::is_base_of_v<MasterServer::IMasterServerReliableResponse, std::remove_pointer_t<TResponse>>);
      THROW_UNLESS((il2cpp_utils::RunGenericMethod(this, "GetAndSendResponse", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TRequest>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResponse>::get()}, request, origin, tryGetResponse, getFailureResponse)));
    }
    // protected System.Threading.Tasks.Task GetAndSendResponseAsync(TRequest request, MasterServer.MessageHandler/MessageOrigin origin, System.Func`3<TRequest,MasterServer.MessageHandler/MessageOrigin,System.Threading.Tasks.Task`1<TResponse>> tryGetResponse, System.Func`1<TResponse> getFailureResponse)
    // Offset: 0xFFFFFFFF
    template<class TRequest, class TResponse>
    System::Threading::Tasks::Task* GetAndSendResponseAsync(TRequest request, MasterServer::MessageHandler::MessageOrigin origin, System::Func_3<TRequest, MasterServer::MessageHandler::MessageOrigin, System::Threading::Tasks::Task_1<TResponse>*>* tryGetResponse, System::Func_1<TResponse>* getFailureResponse) {
      static_assert(std::is_base_of_v<MasterServer::IMasterServerReliableRequest, std::remove_pointer_t<TRequest>>);
      static_assert(std::is_base_of_v<MasterServer::IMasterServerReliableResponse, std::remove_pointer_t<TResponse>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<System::Threading::Tasks::Task*>(this, "GetAndSendResponseAsync", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TRequest>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResponse>::get()}, request, origin, tryGetResponse, getFailureResponse)));
    }
    // protected System.Void GetAndSendUnreilableResponse(TRequest request, MasterServer.MessageHandler/MessageOrigin origin, System.Func`3<TRequest,MasterServer.MessageHandler/MessageOrigin,System.Threading.Tasks.Task`1<TResponse>> tryGetResponse, System.Func`1<TResponse> getFailureResponse)
    // Offset: 0xFFFFFFFF
    template<class TRequest, class TResponse>
    void GetAndSendUnreilableResponse(TRequest request, MasterServer::MessageHandler::MessageOrigin origin, System::Func_3<TRequest, MasterServer::MessageHandler::MessageOrigin, System::Threading::Tasks::Task_1<TResponse>*>* tryGetResponse, System::Func_1<TResponse>* getFailureResponse) {
      static_assert(std::is_base_of_v<MasterServer::IMasterServerUnreliableMessage, std::remove_pointer_t<TRequest>>);
      static_assert(std::is_base_of_v<MasterServer::IMasterServerUnreliableMessage, std::remove_pointer_t<TResponse>>);
      THROW_UNLESS((il2cpp_utils::RunGenericMethod(this, "GetAndSendUnreilableResponse", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TRequest>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TResponse>::get()}, request, origin, tryGetResponse, getFailureResponse)));
    }
    // protected System.Void SendUnreliableMessage(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, MasterServer.IMasterServerUnreliableMessage message)
    // Offset: 0x1ADA79C
    void SendUnreliableMessage(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerUnreliableMessage* message);
    // protected System.Void SendUnreliableResponse(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, MasterServer.IMasterServerReliableRequest request, MasterServer.IMasterServerResponse response)
    // Offset: 0x1ADA9F0
    void SendUnreliableResponse(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* request, MasterServer::IMasterServerResponse* response);
    // protected System.Void SendUnreliableResponse(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, System.UInt32 responseId, MasterServer.IMasterServerResponse response)
    // Offset: 0x1ADA1A8
    void SendUnreliableResponse(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, uint responseId, MasterServer::IMasterServerResponse* response);
    // protected System.Void SendReliableRequest(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, MasterServer.IMasterServerReliableRequest request, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1ADAB40
    void SendReliableRequest(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* request, System::Threading::CancellationToken cancellationToken);
    // protected System.Threading.Tasks.Task SendReliableRequestAsync(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, MasterServer.IMasterServerReliableRequest request, System.Func`5<System.UInt32,System.Net.IPEndPoint,MasterServer.IMasterServerReliableRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task> onSendFailed, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1ADAE10
    System::Threading::Tasks::Task* SendReliableRequestAsync(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* request, System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task*>* onSendFailed, System::Threading::CancellationToken cancellationToken);
    // protected System.Void SendReliableResponse(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, MasterServer.IMasterServerReliableRequest request, MasterServer.IMasterServerReliableResponse response, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1ADB028
    void SendReliableResponse(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* request, MasterServer::IMasterServerReliableResponse* response, System::Threading::CancellationToken cancellationToken);
    // protected System.Void SendReliableResponse(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, System.UInt32 responseId, MasterServer.IMasterServerReliableResponse response, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1ADB188
    void SendReliableResponse(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, uint responseId, MasterServer::IMasterServerReliableResponse* response, System::Threading::CancellationToken cancellationToken);
    // protected System.Threading.Tasks.Task SendReliableResponseAsync(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, MasterServer.IMasterServerReliableRequest request, MasterServer.IMasterServerReliableResponse response, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1ADB308
    System::Threading::Tasks::Task* SendReliableResponseAsync(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* request, MasterServer::IMasterServerReliableResponse* response, System::Threading::CancellationToken cancellationToken);
    // protected System.Threading.Tasks.Task`1<T> SendReliableRequestAndAwaitResponseAsync(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, MasterServer.IMasterServerReliableRequest request, System.Func`5<System.UInt32,System.Net.IPEndPoint,MasterServer.IMasterServerReliableRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task`1<T>> onSendFailedAwaitResponse, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFF
    template<class T>
    System::Threading::Tasks::Task_1<T>* SendReliableRequestAndAwaitResponseAsync(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* request, System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task_1<T>*>* onSendFailedAwaitResponse, System::Threading::CancellationToken cancellationToken) {
      static_assert(std::is_base_of_v<MasterServer::IMasterServerReliableResponse, std::remove_pointer_t<T>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<System::Threading::Tasks::Task_1<T>*>(this, "SendReliableRequestAndAwaitResponseAsync", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, protocolVersion, remoteEndPoint, request, onSendFailedAwaitResponse, cancellationToken)));
    }
    // protected System.Threading.Tasks.Task`1<T> SendReliableResponseAndAwaitResponseAsync(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, MasterServer.IMasterServerReliableRequest request, MasterServer.IMasterServerReliableResponse response, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFF
    template<class T>
    System::Threading::Tasks::Task_1<T>* SendReliableResponseAndAwaitResponseAsync(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* request, MasterServer::IMasterServerReliableResponse* response, System::Threading::CancellationToken cancellationToken) {
      static_assert(std::is_base_of_v<MasterServer::IMasterServerReliableResponse, std::remove_pointer_t<T>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<System::Threading::Tasks::Task_1<T>*>(this, "SendReliableResponseAndAwaitResponseAsync", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, protocolVersion, remoteEndPoint, request, response, cancellationToken)));
    }
    // protected System.Threading.Tasks.Task`1<T> SendReliableResponseAndAwaitResponseAsync(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, System.UInt32 responseId, MasterServer.IMasterServerReliableResponse response, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFF
    template<class T>
    System::Threading::Tasks::Task_1<T>* SendReliableResponseAndAwaitResponseAsync(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, uint responseId, MasterServer::IMasterServerReliableResponse* response, System::Threading::CancellationToken cancellationToken) {
      static_assert(std::is_base_of_v<MasterServer::IMasterServerReliableResponse, std::remove_pointer_t<T>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<System::Threading::Tasks::Task_1<T>*>(this, "SendReliableResponseAndAwaitResponseAsync", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, protocolVersion, remoteEndPoint, responseId, response, cancellationToken)));
    }
    // private System.Void SendMessage(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, MasterServer.IMasterServerMessage message)
    // Offset: 0x1ADA880
    void SendMessage(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerMessage* message);
    // private System.Void SendMessageWithRetry(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, MasterServer.IMasterServerReliableRequest message, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1ADACE8
    void SendMessageWithRetry(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* message, System::Threading::CancellationToken cancellationToken);
    // private System.Threading.Tasks.Task SendMessageWithRetryAsync(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, MasterServer.IMasterServerReliableRequest message, System.Func`5<System.UInt32,System.Net.IPEndPoint,MasterServer.IMasterServerReliableRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task> onSendFailed, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1ADAF94
    System::Threading::Tasks::Task* SendMessageWithRetryAsync(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* message, System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task*>* onSendFailed, System::Threading::CancellationToken cancellationToken);
    // private System.Threading.Tasks.Task SendMultipartMessageWithRetryAsync(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, MasterServer.IMasterServerReliableRequest message, LiteNetLib.Utils.NetDataWriter data, System.Func`5<System.UInt32,System.Net.IPEndPoint,MasterServer.IMasterServerReliableRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task> onSendFailed, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1ADB740
    System::Threading::Tasks::Task* SendMultipartMessageWithRetryAsync(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* message, LiteNetLib::Utils::NetDataWriter* data, System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task*>* onSendFailed, System::Threading::CancellationToken cancellationToken);
    // private System.Threading.Tasks.Task SendMessageWithRetryAsyncInternal(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, MasterServer.IMasterServerReliableRequest message, System.Func`5<System.UInt32,System.Net.IPEndPoint,MasterServer.IMasterServerReliableRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task> onSendFailed, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1ADB8DC
    System::Threading::Tasks::Task* SendMessageWithRetryAsyncInternal(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* message, System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task*>* onSendFailed, System::Threading::CancellationToken cancellationToken);
    // private System.Threading.Tasks.Task`1<T> SendMessageWithRetryAwaitResponseAsync(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, MasterServer.IMasterServerReliableRequest message, System.Func`5<System.UInt32,System.Net.IPEndPoint,MasterServer.IMasterServerReliableRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task`1<T>> onSendFailedAwaitResponse, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFF
    template<class T>
    System::Threading::Tasks::Task_1<T>* SendMessageWithRetryAwaitResponseAsync(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, MasterServer::IMasterServerReliableRequest* message, System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task_1<T>*>* onSendFailedAwaitResponse, System::Threading::CancellationToken cancellationToken) {
      static_assert(std::is_base_of_v<MasterServer::IMasterServerMessage, std::remove_pointer_t<T>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<System::Threading::Tasks::Task_1<T>*>(this, "SendMessageWithRetryAwaitResponseAsync", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, protocolVersion, remoteEndPoint, message, onSendFailedAwaitResponse, cancellationToken)));
    }
    // private System.Func`5<System.UInt32,System.Net.IPEndPoint,MasterServer.IMasterServerReliableRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task> WrapOnSendFailedAwaitResponse(MasterServer.MessageHandler/RequestResponseWaiter waiter, System.Func`5<System.UInt32,System.Net.IPEndPoint,MasterServer.IMasterServerReliableRequest,System.Threading.CancellationToken,System.Threading.Tasks.Task`1<T>> onSendFailed)
    // Offset: 0xFFFFFFFF
    template<class T>
    System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task*>* WrapOnSendFailedAwaitResponse(MasterServer::MessageHandler::RequestResponseWaiter* waiter, System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task_1<T>*>* onSendFailed) {
      static_assert(std::is_base_of_v<MasterServer::IMasterServerMessage, std::remove_pointer_t<T>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<System::Func_5<uint, System::Net::IPEndPoint*, MasterServer::IMasterServerReliableRequest*, System::Threading::CancellationToken, System::Threading::Tasks::Task*>*>(this, "WrapOnSendFailedAwaitResponse", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, waiter, onSendFailed)));
    }
    // protected System.Threading.Tasks.Task`1<T> AwaitResponseAsync(System.UInt32 protocolVersion, System.Net.IPEndPoint remoteEndPoint, System.UInt32 requestId, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFF
    template<class T>
    System::Threading::Tasks::Task_1<T>* AwaitResponseAsync(uint protocolVersion, System::Net::IPEndPoint* remoteEndPoint, uint requestId, System::Threading::CancellationToken cancellationToken) {
      static_assert(std::is_base_of_v<MasterServer::IMasterServerReliableResponse, std::remove_pointer_t<T>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<System::Threading::Tasks::Task_1<T>*>(this, "AwaitResponseAsync", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, protocolVersion, remoteEndPoint, requestId, cancellationToken)));
    }
    // private System.Threading.Tasks.Task WaitForRetry(System.Int32 retryAttempt, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1ADBA64
    System::Threading::Tasks::Task* WaitForRetry(int retryAttempt, System::Threading::CancellationToken cancellationToken);
    // private LiteNetLib.Utils.NetDataWriter Write(System.UInt32 protocolVersion, LiteNetLib.Utils.INetSerializable message)
    // Offset: 0x1ADB564
    LiteNetLib::Utils::NetDataWriter* Write(uint protocolVersion, LiteNetLib::Utils::INetSerializable* message);
    // public System.Void PollUpdate()
    // Offset: 0x1ADBC44
    void PollUpdate();
    // public System.Void ReceiveMessage(System.Net.IPEndPoint remoteEndPoint, LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0x1ADBCDC
    void ReceiveMessage(System::Net::IPEndPoint* remoteEndPoint, LiteNetLib::Utils::NetDataReader* reader);
    // protected System.Boolean ShouldHandleMessageFromEndPoint(System.Net.IPEndPoint endPoint)
    // Offset: 0x1ADBF1C
    bool ShouldHandleMessageFromEndPoint(System::Net::IPEndPoint* endPoint);
    // protected System.Void ReceivedMessageException(System.Net.IPEndPoint endPoint, System.Exception exception)
    // Offset: 0x1ADBF24
    void ReceivedMessageException(System::Net::IPEndPoint* endPoint, System::Exception* exception);
    // protected System.Void BeginSession(System.Net.IPEndPoint endPoint)
    // Offset: 0x1ADBFAC
    void BeginSession(System::Net::IPEndPoint* endPoint);
    // protected System.Void BeginSession(System.Net.IPEndPoint endPoint, System.UInt32 requestId)
    // Offset: 0x1ADC114
    void BeginSession(System::Net::IPEndPoint* endPoint, uint requestId);
    // protected System.UInt32 GetNextRequestId(System.Net.IPEndPoint endPoint)
    // Offset: 0x1ADACB4
    uint GetNextRequestId(System::Net::IPEndPoint* endPoint);
    // protected MasterServer.MessageHandler/ConnectionState GetConnectionState(System.Net.IPEndPoint endPoint)
    // Offset: 0x1ADBFC8
    MasterServer::MessageHandler::ConnectionState* GetConnectionState(System::Net::IPEndPoint* endPoint);
    // protected System.Boolean IsValidSessionStartRequestId(System.Net.IPEndPoint endPoint, System.UInt32 requestId)
    // Offset: 0x1ADC200
    bool IsValidSessionStartRequestId(System::Net::IPEndPoint* endPoint, uint requestId);
    // protected System.Boolean IsConnectionStateEncrypted(System.Net.IPEndPoint endPoint)
    // Offset: 0x1ADC300
    bool IsConnectionStateEncrypted(System::Net::IPEndPoint* endPoint);
    // private INetworkPacketSerializer`1<MasterServer.MessageHandler/MessageOrigin> GetSerializer(System.UInt32 protocolVersion, System.UInt32 messageType)
    // Offset: 0x1ADBB1C
    GlobalNamespace::INetworkPacketSerializer_1<MasterServer::MessageHandler::MessageOrigin>* GetSerializer(uint protocolVersion, uint messageType);
    // static private System.Byte[] CreateHandshakeHeader()
    // Offset: 0x1AD7E94
    static ::Array<uint8_t>* CreateHandshakeHeader();
    // public System.Void Dispose()
    // Offset: 0x1ADC450
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
  }; // MasterServer.MessageHandler
}
DEFINE_IL2CPP_ARG_TYPE(MasterServer::MessageHandler*, "MasterServer", "MessageHandler");
DEFINE_IL2CPP_ARG_TYPE(MasterServer::MessageHandler::RequestWaiterId, "MasterServer", "MessageHandler/RequestWaiterId");
DEFINE_IL2CPP_ARG_TYPE(MasterServer::MessageHandler::MessageOrigin, "MasterServer", "MessageHandler/MessageOrigin");
DEFINE_IL2CPP_ARG_TYPE(MasterServer::MessageHandler::HandshakeMessageType, "MasterServer", "MessageHandler/HandshakeMessageType");
DEFINE_IL2CPP_ARG_TYPE(MasterServer::MessageHandler::UserMessageType, "MasterServer", "MessageHandler/UserMessageType");
DEFINE_IL2CPP_ARG_TYPE(MasterServer::MessageHandler::DedicatedServerMessageType, "MasterServer", "MessageHandler/DedicatedServerMessageType");
#pragma pack(pop)
