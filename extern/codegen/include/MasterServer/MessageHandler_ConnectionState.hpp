// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.MessageHandler
#include "MasterServer/MessageHandler.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: PacketEncryptionLayer
#include "GlobalNamespace/PacketEncryptionLayer.hpp"
// Including type: System.UInt32
#include "System/UInt32.hpp"
// Completed includes
// Type namespace: MasterServer
namespace MasterServer {
  // Autogenerated type: MasterServer.MessageHandler/ConnectionState
  class MessageHandler::ConnectionState : public ::Il2CppObject/*, public System::IDisposable*/ {
    public:
    // private System.String _userId
    // Offset: 0x10
    ::Il2CppString* userId;
    // private System.String _userName
    // Offset: 0x18
    ::Il2CppString* userName;
    // private System.UInt32 _protocolVersion
    // Offset: 0x20
    uint protocolVersion;
    // private System.Boolean _hasIdentity
    // Offset: 0x24
    bool hasIdentity;
    // private PacketEncryptionLayer/IEncryptionState _encryptionState
    // Offset: 0x28
    GlobalNamespace::PacketEncryptionLayer::IEncryptionState* encryptionState;
    // private System.Int32 _lastReceivedRequestIndex
    // Offset: 0x30
    int lastReceivedRequestIndex;
    // private System.UInt32 _lastReceivedRequestId
    // Offset: 0x34
    uint lastReceivedRequestId;
    // private System.Int32 _receivedRequestCount
    // Offset: 0x38
    int receivedRequestCount;
    // private readonly System.Boolean[] _receivedRequest
    // Offset: 0x40
    ::Array<bool>* receivedRequest;
    // private System.UInt32 _currentRequestId
    // Offset: 0x48
    uint currentRequestId;
    // private System.UInt32 _currentEpoch
    // Offset: 0x4C
    uint currentEpoch;
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // static field const value: static private System.Int32 kEpochBitOffset
    static constexpr const int kEpochBitOffset = 24;
    // Get static field: static private System.Int32 kEpochBitOffset
    static int _get_kEpochBitOffset();
    // Set static field: static private System.Int32 kEpochBitOffset
    static void _set_kEpochBitOffset(int value);
    // static field const value: static private System.UInt32 kRequestIdRange
    static constexpr const uint kRequestIdRange = 16777216u;
    // Get static field: static private System.UInt32 kRequestIdRange
    static uint _get_kRequestIdRange();
    // Set static field: static private System.UInt32 kRequestIdRange
    static void _set_kRequestIdRange(uint value);
    // static field const value: static private System.UInt32 kRangeMask
    static constexpr const uint kRangeMask = 16777215u;
    // Get static field: static private System.UInt32 kRangeMask
    static uint _get_kRangeMask();
    // Set static field: static private System.UInt32 kRangeMask
    static void _set_kRangeMask(uint value);
    // static field const value: static private System.UInt32 kEpochMask
    static constexpr const uint kEpochMask = 4278190080u;
    // Get static field: static private System.UInt32 kEpochMask
    static uint _get_kEpochMask();
    // Set static field: static private System.UInt32 kEpochMask
    static void _set_kEpochMask(uint value);
    // static field const value: static private System.Int32 kRequestBufferLength
    static constexpr const int kRequestBufferLength = 64;
    // Get static field: static private System.Int32 kRequestBufferLength
    static int _get_kRequestBufferLength();
    // Set static field: static private System.Int32 kRequestBufferLength
    static void _set_kRequestBufferLength(int value);
    // public System.Boolean get_isEncrypted()
    // Offset: 0x1ADC394
    bool get_isEncrypted();
    // public System.UInt32 GetNextRequestId()
    // Offset: 0x1ADC178
    uint GetNextRequestId();
    // public System.Void BeginSession()
    // Offset: 0x1ADC080
    void BeginSession();
    // public System.Boolean IsValidSessionStartRequestId(System.UInt32 requestId)
    // Offset: 0x1ADC2C4
    bool IsValidSessionStartRequestId(uint requestId);
    // public System.Void BeginSession(System.UInt32 requestId)
    // Offset: 0x1ADC140
    void BeginSession(uint requestId);
    // private System.Void SetEpoch(System.UInt32 epoch)
    // Offset: 0x1ADDDAC
    void SetEpoch(uint epoch);
    // public System.Boolean CanAcceptRequest(System.UInt32 requestId)
    // Offset: 0x1ADA308
    bool CanAcceptRequest(uint requestId);
    // public System.Void SetEncryptionState(PacketEncryptionLayer/IEncryptionState encryptionState)
    // Offset: 0x1ADDDD0
    void SetEncryptionState(GlobalNamespace::PacketEncryptionLayer::IEncryptionState* encryptionState);
    // public System.Void SetIdentity(System.UInt32 protocolVersion, System.String userId, System.String userName)
    // Offset: 0x1ADDDD8
    void SetIdentity(uint protocolVersion, ::Il2CppString* userId, ::Il2CppString* userName);
    // public System.Boolean VerifyIdentity(System.UInt32 protocolVersion, System.String userId, System.String userName)
    // Offset: 0x1ADDE20
    bool VerifyIdentity(uint protocolVersion, ::Il2CppString* userId, ::Il2CppString* userName);
    // static private System.Void LogD(System.String message)
    // Offset: 0x1ADDED8
    static void LogD(::Il2CppString* message);
    // public System.Void Dispose()
    // Offset: 0x1ADDE90
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
    // public System.Void .ctor()
    // Offset: 0x1ADC194
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static MessageHandler::ConnectionState* New_ctor();
  }; // MasterServer.MessageHandler/ConnectionState
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(MasterServer::MessageHandler::ConnectionState*, "MasterServer", "MessageHandler/ConnectionState");
#pragma pack(pop)
