// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BaseMasterServerReliableResponse
#include "GlobalNamespace/BaseMasterServerReliableResponse.hpp"
// Including type: MasterServer.IDedicatedServerMessage
#include "MasterServer/IDedicatedServerMessage.hpp"
// Including type: MasterServer.IMasterServerAuthenticateRequest
#include "MasterServer/IMasterServerAuthenticateRequest.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ByteArrayNetSerializable
  class ByteArrayNetSerializable;
  // Forward declaring type: PacketPool`1<T>
  template<typename T>
  class PacketPool_1;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: NetDataReader
  class NetDataReader;
}
// Completed forward declares
// Type namespace: MasterServer
namespace MasterServer {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: MasterServer.AuthenticateDedicatedServerRequest
  // [] Offset: FFFFFFFF
  class AuthenticateDedicatedServerRequest : public GlobalNamespace::BaseMasterServerReliableResponse/*, public MasterServer::IDedicatedServerMessage, public MasterServer::IMasterServerAuthenticateRequest*/ {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xD1C0BC
    // private System.String <dedicatedServerId>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* dedicatedServerId;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public readonly ByteArrayNetSerializable nonce
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::ByteArrayNetSerializable* nonce;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ByteArrayNetSerializable*) == 0x8);
    // public readonly ByteArrayNetSerializable hash
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::ByteArrayNetSerializable* hash;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ByteArrayNetSerializable*) == 0x8);
    // public System.Int64 timestamp
    // Size: 0x8
    // Offset: 0x30
    int64_t timestamp;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // Creating value type constructor for type: AuthenticateDedicatedServerRequest
    AuthenticateDedicatedServerRequest(::Il2CppString* dedicatedServerId_ = {}, GlobalNamespace::ByteArrayNetSerializable* nonce_ = {}, GlobalNamespace::ByteArrayNetSerializable* hash_ = {}, int64_t timestamp_ = {}) noexcept : dedicatedServerId{dedicatedServerId_}, nonce{nonce_}, hash{hash_}, timestamp{timestamp_} {}
    // Creating interface conversion operator: operator MasterServer::IDedicatedServerMessage
    operator MasterServer::IDedicatedServerMessage() noexcept {
      return *reinterpret_cast<MasterServer::IDedicatedServerMessage*>(this);
    }
    // Creating interface conversion operator: operator MasterServer::IMasterServerAuthenticateRequest
    operator MasterServer::IMasterServerAuthenticateRequest() noexcept {
      return *reinterpret_cast<MasterServer::IMasterServerAuthenticateRequest*>(this);
    }
    // static public PacketPool`1<MasterServer.AuthenticateDedicatedServerRequest> get_pool()
    // Offset: 0x11D9868
    static GlobalNamespace::PacketPool_1<MasterServer::AuthenticateDedicatedServerRequest*>* get_pool();
    // public System.String get_dedicatedServerId()
    // Offset: 0x11D98B0
    ::Il2CppString* get_dedicatedServerId();
    // private System.Void set_dedicatedServerId(System.String value)
    // Offset: 0x11D98B8
    void set_dedicatedServerId(::Il2CppString* value);
    // public MasterServer.AuthenticateDedicatedServerRequest Init(System.String dedicatedServerId, System.Byte[] nonce, System.Byte[] hash, System.Int64 timestamp)
    // Offset: 0x11D98C0
    MasterServer::AuthenticateDedicatedServerRequest* Init(::Il2CppString* dedicatedServerId, ::Array<uint8_t>* nonce, ::Array<uint8_t>* hash, int64_t timestamp);
    // public override System.Void Serialize(LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0x11D9934
    // Implemented from: BaseMasterServerReliableResponse
    // Base method: System.Void BaseMasterServerReliableResponse::Serialize(LiteNetLib.Utils.NetDataWriter writer)
    void Serialize(LiteNetLib::Utils::NetDataWriter* writer);
    // Creating proxy method: LiteNetLib_Utils_INetSerializable_Serialize
    // Maps to method: Serialize
    void LiteNetLib_Utils_INetSerializable_Serialize(LiteNetLib::Utils::NetDataWriter* writer);
    // public override System.Void Deserialize(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0x11D999C
    // Implemented from: BaseMasterServerReliableResponse
    // Base method: System.Void BaseMasterServerReliableResponse::Deserialize(LiteNetLib.Utils.NetDataReader reader)
    void Deserialize(LiteNetLib::Utils::NetDataReader* reader);
    // Creating proxy method: LiteNetLib_Utils_INetSerializable_Deserialize
    // Maps to method: Deserialize
    void LiteNetLib_Utils_INetSerializable_Deserialize(LiteNetLib::Utils::NetDataReader* reader);
    // public override System.Void Release()
    // Offset: 0x11D9A20
    // Implemented from: BaseMasterServerReliableResponse
    // Base method: System.Void BaseMasterServerReliableResponse::Release()
    void Release();
    // public System.Void .ctor()
    // Offset: 0x11D9AA4
    // Implemented from: BaseMasterServerReliableResponse
    // Base method: System.Void BaseMasterServerReliableResponse::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AuthenticateDedicatedServerRequest* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::AuthenticateDedicatedServerRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AuthenticateDedicatedServerRequest*, creationType>()));
    }
  }; // MasterServer.AuthenticateDedicatedServerRequest
  #pragma pack(pop)
  static check_size<sizeof(AuthenticateDedicatedServerRequest), 48 + sizeof(int64_t)> __MasterServer_AuthenticateDedicatedServerRequestSizeCheck;
  static_assert(sizeof(AuthenticateDedicatedServerRequest) == 0x38);
}
DEFINE_IL2CPP_ARG_TYPE(MasterServer::AuthenticateDedicatedServerRequest*, "MasterServer", "AuthenticateDedicatedServerRequest");
