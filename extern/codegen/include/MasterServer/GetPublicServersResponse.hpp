// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BaseMasterServerReliableResponse
#include "GlobalNamespace/BaseMasterServerReliableResponse.hpp"
// Including type: MasterServer.IUserServerToClientMessage
#include "MasterServer/IUserServerToClientMessage.hpp"
// Including type: PublicServerInfo
#include "GlobalNamespace/PublicServerInfo.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PacketPool`1<T>
  template<typename T>
  class PacketPool_1;
}
// Forward declaring namespace: MasterServer
namespace MasterServer {
  // Skipping declaration: Result because it is already included!
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: NetDataReader
  class NetDataReader;
}
// Completed forward declares
// Type namespace: MasterServer
namespace MasterServer {
  // Autogenerated type: MasterServer.GetPublicServersResponse
  class GetPublicServersResponse : public GlobalNamespace::BaseMasterServerReliableResponse/*, public MasterServer::IUserServerToClientMessage*/ {
    public:
    // Nested type: MasterServer::GetPublicServersResponse::Result
    struct Result;
    // Autogenerated type: MasterServer.GetPublicServersResponse/Result
    struct Result : public System::Enum {
      public:
      // public System.Byte value__
      // Offset: 0x0
      uint8_t value;
      // Creating value type constructor for type: Result
      constexpr Result(uint8_t value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator uint8_t
      constexpr operator uint8_t() const noexcept {
        return value;
      }
      // static field const value: static public MasterServer.GetPublicServersResponse/Result Success
      static constexpr const uint8_t Success = 0u;
      // Get static field: static public MasterServer.GetPublicServersResponse/Result Success
      static MasterServer::GetPublicServersResponse::Result _get_Success();
      // Set static field: static public MasterServer.GetPublicServersResponse/Result Success
      static void _set_Success(MasterServer::GetPublicServersResponse::Result value);
      // static field const value: static public MasterServer.GetPublicServersResponse/Result UnknownError
      static constexpr const uint8_t UnknownError = 1u;
      // Get static field: static public MasterServer.GetPublicServersResponse/Result UnknownError
      static MasterServer::GetPublicServersResponse::Result _get_UnknownError();
      // Set static field: static public MasterServer.GetPublicServersResponse/Result UnknownError
      static void _set_UnknownError(MasterServer::GetPublicServersResponse::Result value);
    }; // MasterServer.GetPublicServersResponse/Result
    // public MasterServer.GetPublicServersResponse/Result result
    // Offset: 0x18
    MasterServer::GetPublicServersResponse::Result result;
    // public readonly System.Collections.Generic.List`1<PublicServerInfo> publicServers
    // Offset: 0x20
    System::Collections::Generic::List_1<GlobalNamespace::PublicServerInfo>* publicServers;
    // Creating interface conversion operator: operator MasterServer::IUserServerToClientMessage
    operator MasterServer::IUserServerToClientMessage() noexcept {
      return *reinterpret_cast<MasterServer::IUserServerToClientMessage*>(this);
    }
    // static public PacketPool`1<MasterServer.GetPublicServersResponse> get_pool()
    // Offset: 0x1AD6AC8
    static GlobalNamespace::PacketPool_1<MasterServer::GetPublicServersResponse*>* get_pool();
    // public MasterServer.GetPublicServersResponse InitForFailure(MasterServer.GetPublicServersResponse/Result result)
    // Offset: 0x1AD6BA8
    MasterServer::GetPublicServersResponse* InitForFailure(MasterServer::GetPublicServersResponse::Result result);
    // public MasterServer.GetPublicServersResponse InitForSuccess(System.Collections.Generic.IEnumerable`1<PublicServerInfo> publicServers)
    // Offset: 0x1AD6C40
    MasterServer::GetPublicServersResponse* InitForSuccess(System::Collections::Generic::IEnumerable_1<GlobalNamespace::PublicServerInfo>* publicServers);
    // public override System.Byte get_resultCode()
    // Offset: 0x1AD6B10
    // Implemented from: BaseMasterServerReliableResponse
    // Base method: System.Byte BaseMasterServerReliableResponse::get_resultCode()
    uint8_t get_resultCode();
    // public override System.String get_resultCodeString()
    // Offset: 0x1AD6B18
    // Implemented from: BaseMasterServerReliableResponse
    // Base method: System.String BaseMasterServerReliableResponse::get_resultCodeString()
    ::Il2CppString* get_resultCodeString();
    // public override System.Void Serialize(LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0x1AD6D0C
    // Implemented from: BaseMasterServerReliableResponse
    // Base method: System.Void BaseMasterServerReliableResponse::Serialize(LiteNetLib.Utils.NetDataWriter writer)
    void Serialize(LiteNetLib::Utils::NetDataWriter* writer);
    // Creating proxy method: LiteNetLib_Utils_INetSerializable_Serialize
    // Maps to method: Serialize
    void LiteNetLib_Utils_INetSerializable_Serialize(LiteNetLib::Utils::NetDataWriter* writer);
    // public override System.Void Deserialize(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0x1AD6E30
    // Implemented from: BaseMasterServerReliableResponse
    // Base method: System.Void BaseMasterServerReliableResponse::Deserialize(LiteNetLib.Utils.NetDataReader reader)
    void Deserialize(LiteNetLib::Utils::NetDataReader* reader);
    // Creating proxy method: LiteNetLib_Utils_INetSerializable_Deserialize
    // Maps to method: Deserialize
    void LiteNetLib_Utils_INetSerializable_Deserialize(LiteNetLib::Utils::NetDataReader* reader);
    // public override System.Void Release()
    // Offset: 0x1AD6F4C
    // Implemented from: BaseMasterServerReliableResponse
    // Base method: System.Void BaseMasterServerReliableResponse::Release()
    void Release();
    // public System.Void .ctor()
    // Offset: 0x1AD6FC0
    // Implemented from: BaseMasterServerReliableResponse
    // Base method: System.Void BaseMasterServerReliableResponse::.ctor()
    // Base method: System.Void Object::.ctor()
    static GetPublicServersResponse* New_ctor();
  }; // MasterServer.GetPublicServersResponse
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(MasterServer::GetPublicServersResponse*, "MasterServer", "GetPublicServersResponse");
DEFINE_IL2CPP_ARG_TYPE(MasterServer::GetPublicServersResponse::Result, "MasterServer", "GetPublicServersResponse/Result");
#pragma pack(pop)
