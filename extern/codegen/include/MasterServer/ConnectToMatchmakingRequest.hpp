// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MasterServer.BaseConnectToServerRequest
#include "MasterServer/BaseConnectToServerRequest.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PacketPool`1<T>
  template<typename T>
  class PacketPool_1;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: NetDataReader
  class NetDataReader;
}
// Completed forward declares
// Type namespace: MasterServer
namespace MasterServer {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: MasterServer.ConnectToMatchmakingRequest
  // [] Offset: FFFFFFFF
  class ConnectToMatchmakingRequest : public MasterServer::BaseConnectToServerRequest {
    public:
    // public GameplayServerConfiguration configuration
    // Size: 0x18
    // Offset: 0x38
    GlobalNamespace::GameplayServerConfiguration configuration;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayServerConfiguration) == 0x18);
    // public System.String secret
    // Size: 0x8
    // Offset: 0x50
    ::Il2CppString* secret;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // Creating value type constructor for type: ConnectToMatchmakingRequest
    ConnectToMatchmakingRequest(GlobalNamespace::GameplayServerConfiguration configuration_ = {}, ::Il2CppString* secret_ = {}) noexcept : configuration{configuration_}, secret{secret_} {}
    // static public PacketPool`1<MasterServer.ConnectToMatchmakingRequest> get_pool()
    // Offset: 0x111A7C4
    static GlobalNamespace::PacketPool_1<MasterServer::ConnectToMatchmakingRequest*>* get_pool();
    // public MasterServer.ConnectToMatchmakingRequest Init(System.String userId, System.String userName, GameplayServerConfiguration configuration, System.String secret)
    // Offset: 0x111A80C
    MasterServer::ConnectToMatchmakingRequest* Init(::Il2CppString* userId, ::Il2CppString* userName, GlobalNamespace::GameplayServerConfiguration configuration, ::Il2CppString* secret);
    // public override System.Void Serialize(LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0x111A878
    // Implemented from: MasterServer.BaseConnectToServerRequest
    // Base method: System.Void BaseConnectToServerRequest::Serialize(LiteNetLib.Utils.NetDataWriter writer)
    void Serialize(LiteNetLib::Utils::NetDataWriter* writer);
    // Creating proxy method: LiteNetLib_Utils_INetSerializable_Serialize
    // Maps to method: Serialize
    void LiteNetLib_Utils_INetSerializable_Serialize(LiteNetLib::Utils::NetDataWriter* writer);
    // public override System.Void Deserialize(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0x111A8C4
    // Implemented from: MasterServer.BaseConnectToServerRequest
    // Base method: System.Void BaseConnectToServerRequest::Deserialize(LiteNetLib.Utils.NetDataReader reader)
    void Deserialize(LiteNetLib::Utils::NetDataReader* reader);
    // Creating proxy method: LiteNetLib_Utils_INetSerializable_Deserialize
    // Maps to method: Deserialize
    void LiteNetLib_Utils_INetSerializable_Deserialize(LiteNetLib::Utils::NetDataReader* reader);
    // public override System.Void Release()
    // Offset: 0x111A938
    // Implemented from: MasterServer.BaseConnectToServerRequest
    // Base method: System.Void BaseConnectToServerRequest::Release()
    void Release();
    // public System.Void .ctor()
    // Offset: 0x111A9A0
    // Implemented from: MasterServer.BaseConnectToServerRequest
    // Base method: System.Void BaseConnectToServerRequest::.ctor()
    // Base method: System.Void BaseMasterServerReliableRequest::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConnectToMatchmakingRequest* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("MasterServer::ConnectToMatchmakingRequest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConnectToMatchmakingRequest*, creationType>()));
    }
  }; // MasterServer.ConnectToMatchmakingRequest
  #pragma pack(pop)
  static check_size<sizeof(ConnectToMatchmakingRequest), 80 + sizeof(::Il2CppString*)> __MasterServer_ConnectToMatchmakingRequestSizeCheck;
  static_assert(sizeof(ConnectToMatchmakingRequest) == 0x58);
}
DEFINE_IL2CPP_ARG_TYPE(MasterServer::ConnectToMatchmakingRequest*, "MasterServer", "ConnectToMatchmakingRequest");
