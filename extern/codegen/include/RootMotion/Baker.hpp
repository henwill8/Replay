// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationClip
  class AnimationClip;
  // Forward declaring type: Animator
  class Animator;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: PlayableDirector
  class PlayableDirector;
}
// Completed forward declares
// Type namespace: RootMotion
namespace RootMotion {
  // Size: 0x74
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.Baker
  // [] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: D26344
  // [AddComponentMenu] Offset: D26344
  class Baker : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: RootMotion::Baker::Mode
    struct Mode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: RootMotion.Baker/Mode
    // [] Offset: FFFFFFFF
    struct Mode/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: Mode
      constexpr Mode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public RootMotion.Baker/Mode AnimationClips
      static constexpr const int AnimationClips = 0;
      // Get static field: static public RootMotion.Baker/Mode AnimationClips
      static RootMotion::Baker::Mode _get_AnimationClips();
      // Set static field: static public RootMotion.Baker/Mode AnimationClips
      static void _set_AnimationClips(RootMotion::Baker::Mode value);
      // static field const value: static public RootMotion.Baker/Mode AnimationStates
      static constexpr const int AnimationStates = 1;
      // Get static field: static public RootMotion.Baker/Mode AnimationStates
      static RootMotion::Baker::Mode _get_AnimationStates();
      // Set static field: static public RootMotion.Baker/Mode AnimationStates
      static void _set_AnimationStates(RootMotion::Baker::Mode value);
      // static field const value: static public RootMotion.Baker/Mode PlayableDirector
      static constexpr const int PlayableDirector = 2;
      // Get static field: static public RootMotion.Baker/Mode PlayableDirector
      static RootMotion::Baker::Mode _get_PlayableDirector();
      // Set static field: static public RootMotion.Baker/Mode PlayableDirector
      static void _set_PlayableDirector(RootMotion::Baker::Mode value);
      // static field const value: static public RootMotion.Baker/Mode Realtime
      static constexpr const int Realtime = 3;
      // Get static field: static public RootMotion.Baker/Mode Realtime
      static RootMotion::Baker::Mode _get_Realtime();
      // Set static field: static public RootMotion.Baker/Mode Realtime
      static void _set_Realtime(RootMotion::Baker::Mode value);
    }; // RootMotion.Baker/Mode
    #pragma pack(pop)
    static check_size<sizeof(Baker::Mode), 0 + sizeof(int)> __RootMotion_Baker_ModeSizeCheck;
    static_assert(sizeof(Baker::Mode) == 0x4);
    // [TooltipAttribute] Offset: 0xD26DB0
    // [RangeAttribute] Offset: 0xD26DB0
    // public System.Int32 frameRate
    // Size: 0x4
    // Offset: 0x18
    int frameRate;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [TooltipAttribute] Offset: 0xD26E08
    // [RangeAttribute] Offset: 0xD26E08
    // public System.Single keyReductionError
    // Size: 0x4
    // Offset: 0x1C
    float keyReductionError;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xD26E60
    // public RootMotion.Baker/Mode mode
    // Size: 0x4
    // Offset: 0x20
    RootMotion::Baker::Mode mode;
    // Field size check
    static_assert(sizeof(RootMotion::Baker::Mode) == 0x4);
    // Padding between fields: mode and: animationClips
    char __padding2[0x4] = {};
    // [TooltipAttribute] Offset: 0xD26E98
    // public UnityEngine.AnimationClip[] animationClips
    // Size: 0x8
    // Offset: 0x28
    ::Array<UnityEngine::AnimationClip*>* animationClips;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::AnimationClip*>*) == 0x8);
    // [TooltipAttribute] Offset: 0xD26ED0
    // public System.String[] animationStates
    // Size: 0x8
    // Offset: 0x30
    ::Array<::Il2CppString*>* animationStates;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // [TooltipAttribute] Offset: 0xD26F08
    // public System.Boolean loop
    // Size: 0x1
    // Offset: 0x38
    bool loop;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: loop and: saveToFolder
    char __padding5[0x7] = {};
    // [TooltipAttribute] Offset: 0xD26F40
    // public System.String saveToFolder
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppString* saveToFolder;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [TooltipAttribute] Offset: 0xD26F78
    // public System.String appendName
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppString* appendName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [TooltipAttribute] Offset: 0xD26FB0
    // public System.String saveName
    // Size: 0x8
    // Offset: 0x50
    ::Il2CppString* saveName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD26FE8
    // private System.Boolean <isBaking>k__BackingField
    // Size: 0x1
    // Offset: 0x58
    bool isBaking;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isBaking and: bakingProgress
    char __padding9[0x3] = {};
    // [CompilerGeneratedAttribute] Offset: 0xD26FF8
    // private System.Single <bakingProgress>k__BackingField
    // Size: 0x4
    // Offset: 0x5C
    float bakingProgress;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HideInInspector] Offset: 0xD27008
    // public UnityEngine.Animator animator
    // Size: 0x8
    // Offset: 0x60
    UnityEngine::Animator* animator;
    // Field size check
    static_assert(sizeof(UnityEngine::Animator*) == 0x8);
    // [HideInInspector] Offset: 0xD27040
    // public UnityEngine.Playables.PlayableDirector director
    // Size: 0x8
    // Offset: 0x68
    UnityEngine::Playables::PlayableDirector* director;
    // Field size check
    static_assert(sizeof(UnityEngine::Playables::PlayableDirector*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD27078
    // private System.Single <clipLength>k__BackingField
    // Size: 0x4
    // Offset: 0x70
    float clipLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: Baker
    Baker(int frameRate_ = {}, float keyReductionError_ = {}, RootMotion::Baker::Mode mode_ = {}, ::Array<UnityEngine::AnimationClip*>* animationClips_ = {}, ::Array<::Il2CppString*>* animationStates_ = {}, bool loop_ = {}, ::Il2CppString* saveToFolder_ = {}, ::Il2CppString* appendName_ = {}, ::Il2CppString* saveName_ = {}, bool isBaking_ = {}, float bakingProgress_ = {}, UnityEngine::Animator* animator_ = {}, UnityEngine::Playables::PlayableDirector* director_ = {}, float clipLength_ = {}) noexcept : frameRate{frameRate_}, keyReductionError{keyReductionError_}, mode{mode_}, animationClips{animationClips_}, animationStates{animationStates_}, loop{loop_}, saveToFolder{saveToFolder_}, appendName{appendName_}, saveName{saveName_}, isBaking{isBaking_}, bakingProgress{bakingProgress_}, animator{animator_}, director{director_}, clipLength{clipLength_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // private System.Void OpenUserManual()
    // Offset: 0x1B44664
    void OpenUserManual();
    // private System.Void OpenScriptReference()
    // Offset: 0x1B446B0
    void OpenScriptReference();
    // private System.Void SupportGroup()
    // Offset: 0x1B446FC
    void SupportGroup();
    // private System.Void ASThread()
    // Offset: 0x1B44748
    void ASThread();
    // public System.Boolean get_isBaking()
    // Offset: 0x1B44794
    bool get_isBaking();
    // private System.Void set_isBaking(System.Boolean value)
    // Offset: 0x1B4479C
    void set_isBaking(bool value);
    // public System.Single get_bakingProgress()
    // Offset: 0x1B447A8
    float get_bakingProgress();
    // private System.Void set_bakingProgress(System.Single value)
    // Offset: 0x1B447B0
    void set_bakingProgress(float value);
    // protected UnityEngine.Transform GetCharacterRoot()
    // Offset: 0xFFFFFFFF
    UnityEngine::Transform* GetCharacterRoot();
    // protected System.Void OnStartBaking()
    // Offset: 0xFFFFFFFF
    void OnStartBaking();
    // protected System.Void OnSetLoopFrame(System.Single time)
    // Offset: 0xFFFFFFFF
    void OnSetLoopFrame(float time);
    // protected System.Void OnSetCurves(ref UnityEngine.AnimationClip clip)
    // Offset: 0xFFFFFFFF
    void OnSetCurves(UnityEngine::AnimationClip*& clip);
    // protected System.Void OnSetKeyframes(System.Single time, System.Boolean lastFrame)
    // Offset: 0xFFFFFFFF
    void OnSetKeyframes(float time, bool lastFrame);
    // protected System.Single get_clipLength()
    // Offset: 0x1B447B8
    float get_clipLength();
    // private System.Void set_clipLength(System.Single value)
    // Offset: 0x1B447C0
    void set_clipLength(float value);
    // public System.Void BakeClip()
    // Offset: 0x1B447C8
    void BakeClip();
    // public System.Void StartBaking()
    // Offset: 0x1B447CC
    void StartBaking();
    // public System.Void StopBaking()
    // Offset: 0x1B447D0
    void StopBaking();
    // protected System.Void .ctor()
    // Offset: 0x1B447D4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Baker* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::Baker::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Baker*, creationType>()));
    }
  }; // RootMotion.Baker
  #pragma pack(pop)
  static check_size<sizeof(Baker), 112 + sizeof(float)> __RootMotion_BakerSizeCheck;
  static_assert(sizeof(Baker) == 0x74);
}
DEFINE_IL2CPP_ARG_TYPE(RootMotion::Baker*, "RootMotion", "Baker");
DEFINE_IL2CPP_ARG_TYPE(RootMotion::Baker::Mode, "RootMotion", "Baker/Mode");
