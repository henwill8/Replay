// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.BipedNaming
#include "RootMotion/BipedNaming.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: RootMotion
namespace RootMotion {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Animator
  class Animator;
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Completed forward declares
// Type namespace: RootMotion
namespace RootMotion {
  // Autogenerated type: RootMotion.BipedReferences
  class BipedReferences : public ::Il2CppObject {
    public:
    // Nested type: RootMotion::BipedReferences::AutoDetectParams
    struct AutoDetectParams;
    // public UnityEngine.Transform root
    // Offset: 0x10
    UnityEngine::Transform* root;
    // public UnityEngine.Transform pelvis
    // Offset: 0x18
    UnityEngine::Transform* pelvis;
    // public UnityEngine.Transform leftThigh
    // Offset: 0x20
    UnityEngine::Transform* leftThigh;
    // public UnityEngine.Transform leftCalf
    // Offset: 0x28
    UnityEngine::Transform* leftCalf;
    // public UnityEngine.Transform leftFoot
    // Offset: 0x30
    UnityEngine::Transform* leftFoot;
    // public UnityEngine.Transform rightThigh
    // Offset: 0x38
    UnityEngine::Transform* rightThigh;
    // public UnityEngine.Transform rightCalf
    // Offset: 0x40
    UnityEngine::Transform* rightCalf;
    // public UnityEngine.Transform rightFoot
    // Offset: 0x48
    UnityEngine::Transform* rightFoot;
    // public UnityEngine.Transform leftUpperArm
    // Offset: 0x50
    UnityEngine::Transform* leftUpperArm;
    // public UnityEngine.Transform leftForearm
    // Offset: 0x58
    UnityEngine::Transform* leftForearm;
    // public UnityEngine.Transform leftHand
    // Offset: 0x60
    UnityEngine::Transform* leftHand;
    // public UnityEngine.Transform rightUpperArm
    // Offset: 0x68
    UnityEngine::Transform* rightUpperArm;
    // public UnityEngine.Transform rightForearm
    // Offset: 0x70
    UnityEngine::Transform* rightForearm;
    // public UnityEngine.Transform rightHand
    // Offset: 0x78
    UnityEngine::Transform* rightHand;
    // public UnityEngine.Transform head
    // Offset: 0x80
    UnityEngine::Transform* head;
    // public UnityEngine.Transform[] spine
    // Offset: 0x88
    ::Array<UnityEngine::Transform*>* spine;
    // public UnityEngine.Transform[] eyes
    // Offset: 0x90
    ::Array<UnityEngine::Transform*>* eyes;
    // public System.Boolean get_isFilled()
    // Offset: 0x13A7070
    bool get_isFilled();
    // public System.Boolean get_isEmpty()
    // Offset: 0x13A745C
    bool get_isEmpty();
    // public System.Boolean IsEmpty(System.Boolean includeRoot)
    // Offset: 0x13A746C
    bool IsEmpty(bool includeRoot);
    // public System.Boolean Contains(UnityEngine.Transform t, System.Boolean ignoreRoot)
    // Offset: 0x13A7898
    bool Contains(UnityEngine::Transform* t, bool ignoreRoot);
    // static public System.Boolean AutoDetectReferences(ref RootMotion.BipedReferences references, UnityEngine.Transform root, RootMotion.BipedReferences/AutoDetectParams autoDetectParams)
    // Offset: 0x13A7CD0
    static bool AutoDetectReferences(RootMotion::BipedReferences*& references, UnityEngine::Transform* root, RootMotion::BipedReferences::AutoDetectParams autoDetectParams);
    // static public System.Void DetectReferencesByNaming(ref RootMotion.BipedReferences references, UnityEngine.Transform root, RootMotion.BipedReferences/AutoDetectParams autoDetectParams)
    // Offset: 0x13A83DC
    static void DetectReferencesByNaming(RootMotion::BipedReferences*& references, UnityEngine::Transform* root, RootMotion::BipedReferences::AutoDetectParams autoDetectParams);
    // static public System.Void AssignHumanoidReferences(ref RootMotion.BipedReferences references, UnityEngine.Animator animator, RootMotion.BipedReferences/AutoDetectParams autoDetectParams)
    // Offset: 0x13A7F4C
    static void AssignHumanoidReferences(RootMotion::BipedReferences*& references, UnityEngine::Animator* animator, RootMotion::BipedReferences::AutoDetectParams autoDetectParams);
    // static public System.Boolean SetupError(RootMotion.BipedReferences references, ref System.String errorMessage)
    // Offset: 0x13A8C10
    static bool SetupError(RootMotion::BipedReferences* references, ::Il2CppString*& errorMessage);
    // static public System.Boolean SetupWarning(RootMotion.BipedReferences references, ref System.String warningMessage)
    // Offset: 0x13A8D10
    static bool SetupWarning(RootMotion::BipedReferences* references, ::Il2CppString*& warningMessage);
    // static private System.Boolean IsNeckBone(UnityEngine.Transform bone, UnityEngine.Transform leftUpperArm)
    // Offset: 0x13A92C4
    static bool IsNeckBone(UnityEngine::Transform* bone, UnityEngine::Transform* leftUpperArm);
    // static private System.Boolean AddBoneToEyes(UnityEngine.Transform bone, ref RootMotion.BipedReferences references, RootMotion.BipedReferences/AutoDetectParams autoDetectParams)
    // Offset: 0x13A90B4
    static bool AddBoneToEyes(UnityEngine::Transform* bone, RootMotion::BipedReferences*& references, RootMotion::BipedReferences::AutoDetectParams autoDetectParams);
    // static private System.Boolean AddBoneToSpine(UnityEngine.Transform bone, ref RootMotion.BipedReferences references, RootMotion.BipedReferences/AutoDetectParams autoDetectParams)
    // Offset: 0x13A8F2C
    static bool AddBoneToSpine(UnityEngine::Transform* bone, RootMotion::BipedReferences*& references, RootMotion::BipedReferences::AutoDetectParams autoDetectParams);
    // static private System.Void DetectLimb(RootMotion.BipedNaming/BoneType boneType, RootMotion.BipedNaming/BoneSide boneSide, ref UnityEngine.Transform firstBone, ref UnityEngine.Transform secondBone, ref UnityEngine.Transform lastBone, UnityEngine.Transform[] transforms)
    // Offset: 0x13A8DB0
    static void DetectLimb(RootMotion::BipedNaming::BoneType boneType, RootMotion::BipedNaming::BoneSide boneSide, UnityEngine::Transform*& firstBone, UnityEngine::Transform*& secondBone, UnityEngine::Transform*& lastBone, ::Array<UnityEngine::Transform*>* transforms);
    // static private System.Void AddBoneToHierarchy(ref UnityEngine.Transform[] bones, UnityEngine.Transform transform)
    // Offset: 0x13A91B8
    static void AddBoneToHierarchy(::Array<UnityEngine::Transform*>*& bones, UnityEngine::Transform* transform);
    // static private System.Boolean LimbError(UnityEngine.Transform bone1, UnityEngine.Transform bone2, UnityEngine.Transform bone3, ref System.String errorMessage)
    // Offset: 0x13A93C0
    static bool LimbError(UnityEngine::Transform* bone1, UnityEngine::Transform* bone2, UnityEngine::Transform* bone3, ::Il2CppString*& errorMessage);
    // static private System.Boolean LimbWarning(UnityEngine.Transform bone1, UnityEngine.Transform bone2, UnityEngine.Transform bone3, ref System.String warningMessage)
    // Offset: 0x13A9F24
    static bool LimbWarning(UnityEngine::Transform* bone1, UnityEngine::Transform* bone2, UnityEngine::Transform* bone3, ::Il2CppString*& warningMessage);
    // static private System.Boolean SpineError(RootMotion.BipedReferences references, ref System.String errorMessage)
    // Offset: 0x13A99F0
    static bool SpineError(RootMotion::BipedReferences* references, ::Il2CppString*& errorMessage);
    // static private System.Boolean SpineWarning(RootMotion.BipedReferences references, ref System.String warningMessage)
    // Offset: 0x13AA26C
    static bool SpineWarning(RootMotion::BipedReferences* references, ::Il2CppString*& warningMessage);
    // static private System.Boolean EyesError(RootMotion.BipedReferences references, ref System.String errorMessage)
    // Offset: 0x13A9D3C
    static bool EyesError(RootMotion::BipedReferences* references, ::Il2CppString*& errorMessage);
    // static private System.Boolean EyesWarning(RootMotion.BipedReferences references, ref System.String warningMessage)
    // Offset: 0x13AA274
    static bool EyesWarning(RootMotion::BipedReferences* references, ::Il2CppString*& warningMessage);
    // static private System.Boolean RootHeightWarning(RootMotion.BipedReferences references, ref System.String warningMessage)
    // Offset: 0x13AA27C
    static bool RootHeightWarning(RootMotion::BipedReferences* references, ::Il2CppString*& warningMessage);
    // static private System.Boolean FacingAxisWarning(RootMotion.BipedReferences references, ref System.String warningMessage)
    // Offset: 0x13AA448
    static bool FacingAxisWarning(RootMotion::BipedReferences* references, ::Il2CppString*& warningMessage);
    // static private System.Single GetVerticalOffset(UnityEngine.Vector3 p1, UnityEngine.Vector3 p2, UnityEngine.Quaternion rotation)
    // Offset: 0x13AA66C
    static float GetVerticalOffset(UnityEngine::Vector3 p1, UnityEngine::Vector3 p2, UnityEngine::Quaternion rotation);
    // public System.Void .ctor()
    // Offset: 0x13A7EC4
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static BipedReferences* New_ctor();
  }; // RootMotion.BipedReferences
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(RootMotion::BipedReferences*, "RootMotion", "BipedReferences");
#pragma pack(pop)
