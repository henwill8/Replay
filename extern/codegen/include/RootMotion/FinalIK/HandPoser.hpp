// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.Poser
#include "RootMotion/FinalIK/Poser.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.HandPoser
  // [] Offset: FFFFFFFF
  class HandPoser : public RootMotion::FinalIK::Poser {
    public:
    // Writing base type padding for base size: 0x4D to desired offset: 0x50
    char ___base_padding[0x3] = {};
    // protected UnityEngine.Transform[] children
    // Size: 0x8
    // Offset: 0x50
    ::Array<UnityEngine::Transform*>* children;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Transform*>*) == 0x8);
    // private UnityEngine.Transform _poseRoot
    // Size: 0x8
    // Offset: 0x58
    UnityEngine::Transform* poseRoot;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform[] poseChildren
    // Size: 0x8
    // Offset: 0x60
    ::Array<UnityEngine::Transform*>* poseChildren;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Transform*>*) == 0x8);
    // private UnityEngine.Vector3[] defaultLocalPositions
    // Size: 0x8
    // Offset: 0x68
    ::Array<UnityEngine::Vector3>* defaultLocalPositions;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Vector3>*) == 0x8);
    // private UnityEngine.Quaternion[] defaultLocalRotations
    // Size: 0x8
    // Offset: 0x70
    ::Array<UnityEngine::Quaternion>* defaultLocalRotations;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Quaternion>*) == 0x8);
    // Creating value type constructor for type: HandPoser
    HandPoser(::Array<UnityEngine::Transform*>* children_ = {}, UnityEngine::Transform* poseRoot_ = {}, ::Array<UnityEngine::Transform*>* poseChildren_ = {}, ::Array<UnityEngine::Vector3>* defaultLocalPositions_ = {}, ::Array<UnityEngine::Quaternion>* defaultLocalRotations_ = {}) noexcept : children{children_}, poseRoot{poseRoot_}, poseChildren{poseChildren_}, defaultLocalPositions{defaultLocalPositions_}, defaultLocalRotations{defaultLocalRotations_} {}
    // protected System.Void StoreDefaultState()
    // Offset: 0x1AF6DE0
    void StoreDefaultState();
    // public override System.Void AutoMapping()
    // Offset: 0x1AF6CB0
    // Implemented from: RootMotion.FinalIK.Poser
    // Base method: System.Void Poser::AutoMapping()
    void AutoMapping();
    // protected override System.Void InitiatePoser()
    // Offset: 0x1AF6D78
    // Implemented from: RootMotion.FinalIK.Poser
    // Base method: System.Void Poser::InitiatePoser()
    void InitiatePoser();
    // protected override System.Void FixPoserTransforms()
    // Offset: 0x1AF6F5C
    // Implemented from: RootMotion.FinalIK.Poser
    // Base method: System.Void Poser::FixPoserTransforms()
    void FixPoserTransforms();
    // protected override System.Void UpdatePoser()
    // Offset: 0x1AF7058
    // Implemented from: RootMotion.FinalIK.Poser
    // Base method: System.Void Poser::UpdatePoser()
    void UpdatePoser();
    // public System.Void .ctor()
    // Offset: 0x1AF7408
    // Implemented from: RootMotion.FinalIK.Poser
    // Base method: System.Void Poser::.ctor()
    // Base method: System.Void SolverManager::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HandPoser* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::HandPoser::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HandPoser*, creationType>()));
    }
  }; // RootMotion.FinalIK.HandPoser
  #pragma pack(pop)
  static check_size<sizeof(HandPoser), 112 + sizeof(::Array<UnityEngine::Quaternion>*)> __RootMotion_FinalIK_HandPoserSizeCheck;
  static_assert(sizeof(HandPoser) == 0x78);
}
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::HandPoser*, "RootMotion.FinalIK", "HandPoser");
