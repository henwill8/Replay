// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.RotationLimit
  // [] Offset: FFFFFFFF
  class RotationLimit : public UnityEngine::MonoBehaviour {
    public:
    // public UnityEngine.Vector3 axis
    // Size: 0xC
    // Offset: 0x18
    UnityEngine::Vector3 axis;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [HideInInspector] Offset: 0xD298E8
    // public UnityEngine.Quaternion defaultLocalRotation
    // Size: 0x10
    // Offset: 0x24
    UnityEngine::Quaternion defaultLocalRotation;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // [CompilerGeneratedAttribute] Offset: 0xD298F8
    // private System.Boolean <defaultLocalRotationOverride>k__BackingField
    // Size: 0x1
    // Offset: 0x34
    bool defaultLocalRotationOverride;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean initiated
    // Size: 0x1
    // Offset: 0x35
    bool initiated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean applicationQuit
    // Size: 0x1
    // Offset: 0x36
    bool applicationQuit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean defaultLocalRotationSet
    // Size: 0x1
    // Offset: 0x37
    bool defaultLocalRotationSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: RotationLimit
    RotationLimit(UnityEngine::Vector3 axis_ = {}, UnityEngine::Quaternion defaultLocalRotation_ = {}, bool defaultLocalRotationOverride_ = {}, bool initiated_ = {}, bool applicationQuit_ = {}, bool defaultLocalRotationSet_ = {}) noexcept : axis{axis_}, defaultLocalRotation{defaultLocalRotation_}, defaultLocalRotationOverride{defaultLocalRotationOverride_}, initiated{initiated_}, applicationQuit{applicationQuit_}, defaultLocalRotationSet{defaultLocalRotationSet_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void SetDefaultLocalRotation()
    // Offset: 0x1966848
    void SetDefaultLocalRotation();
    // public System.Void SetDefaultLocalRotation(UnityEngine.Quaternion localRotation)
    // Offset: 0x1966890
    void SetDefaultLocalRotation(UnityEngine::Quaternion localRotation);
    // public UnityEngine.Quaternion GetLimitedLocalRotation(UnityEngine.Quaternion localRotation, out System.Boolean changed)
    // Offset: 0x19668A8
    UnityEngine::Quaternion GetLimitedLocalRotation(UnityEngine::Quaternion localRotation, bool& changed);
    // public System.Boolean Apply()
    // Offset: 0x1966B3C
    bool Apply();
    // public System.Void Disable()
    // Offset: 0x1966BAC
    void Disable();
    // public UnityEngine.Vector3 get_secondaryAxis()
    // Offset: 0x1966BE4
    UnityEngine::Vector3 get_secondaryAxis();
    // public UnityEngine.Vector3 get_crossAxis()
    // Offset: 0x1966C20
    UnityEngine::Vector3 get_crossAxis();
    // public System.Boolean get_defaultLocalRotationOverride()
    // Offset: 0x1966CF0
    bool get_defaultLocalRotationOverride();
    // private System.Void set_defaultLocalRotationOverride(System.Boolean value)
    // Offset: 0x1966CF8
    void set_defaultLocalRotationOverride(bool value);
    // protected UnityEngine.Quaternion LimitRotation(UnityEngine.Quaternion rotation)
    // Offset: 0xFFFFFFFF
    UnityEngine::Quaternion LimitRotation(UnityEngine::Quaternion rotation);
    // private System.Void Awake()
    // Offset: 0x1966A4C
    void Awake();
    // private System.Void LateUpdate()
    // Offset: 0x1966D04
    void LateUpdate();
    // public System.Void LogWarning(System.String message)
    // Offset: 0x1966D08
    void LogWarning(::Il2CppString* message);
    // static protected UnityEngine.Quaternion Limit1DOF(UnityEngine.Quaternion rotation, UnityEngine.Vector3 axis)
    // Offset: 0x1966D38
    static UnityEngine::Quaternion Limit1DOF(UnityEngine::Quaternion rotation, UnityEngine::Vector3 axis);
    // static protected UnityEngine.Quaternion LimitTwist(UnityEngine.Quaternion rotation, UnityEngine.Vector3 axis, UnityEngine.Vector3 orthoAxis, System.Single twistLimit)
    // Offset: 0x1966E1C
    static UnityEngine::Quaternion LimitTwist(UnityEngine::Quaternion rotation, UnityEngine::Vector3 axis, UnityEngine::Vector3 orthoAxis, float twistLimit);
    // static protected System.Single GetOrthogonalAngle(UnityEngine.Vector3 v1, UnityEngine.Vector3 v2, UnityEngine.Vector3 normal)
    // Offset: 0x1967098
    static float GetOrthogonalAngle(UnityEngine::Vector3 v1, UnityEngine::Vector3 v2, UnityEngine::Vector3 normal);
    // protected System.Void .ctor()
    // Offset: 0x1967154
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RotationLimit* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimit::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RotationLimit*, creationType>()));
    }
  }; // RootMotion.FinalIK.RotationLimit
  #pragma pack(pop)
  static check_size<sizeof(RotationLimit), 55 + sizeof(bool)> __RootMotion_FinalIK_RotationLimitSizeCheck;
  static_assert(sizeof(RotationLimit) == 0x38);
}
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::RotationLimit*, "RootMotion.FinalIK", "RotationLimit");
