// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.RotationLimit
#include "RootMotion/FinalIK/RotationLimit.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Quaternion because it is already included!
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.RotationLimitAngle
  // [] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: D26BD0
  // [AddComponentMenu] Offset: D26BD0
  class RotationLimitAngle : public RootMotion::FinalIK::RotationLimit {
    public:
    // [RangeAttribute] Offset: 0xD29908
    // public System.Single limit
    // Size: 0x4
    // Offset: 0x38
    float limit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xD29924
    // public System.Single twistLimit
    // Size: 0x4
    // Offset: 0x3C
    float twistLimit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: RotationLimitAngle
    RotationLimitAngle(float limit_ = {}, float twistLimit_ = {}) noexcept : limit{limit_}, twistLimit{twistLimit_} {}
    // private System.Void OpenUserManual()
    // Offset: 0x19671CC
    void OpenUserManual();
    // private System.Void OpenScriptReference()
    // Offset: 0x1967218
    void OpenScriptReference();
    // private System.Void SupportGroup()
    // Offset: 0x1967264
    void SupportGroup();
    // private System.Void ASThread()
    // Offset: 0x19672B0
    void ASThread();
    // private UnityEngine.Quaternion LimitSwing(UnityEngine.Quaternion rotation)
    // Offset: 0x19673B4
    UnityEngine::Quaternion LimitSwing(UnityEngine::Quaternion rotation);
    // protected override UnityEngine.Quaternion LimitRotation(UnityEngine.Quaternion rotation)
    // Offset: 0x19672FC
    // Implemented from: RootMotion.FinalIK.RotationLimit
    // Base method: UnityEngine.Quaternion RotationLimit::LimitRotation(UnityEngine.Quaternion rotation)
    UnityEngine::Quaternion LimitRotation(UnityEngine::Quaternion rotation);
    // public System.Void .ctor()
    // Offset: 0x19675FC
    // Implemented from: RootMotion.FinalIK.RotationLimit
    // Base method: System.Void RotationLimit::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RotationLimitAngle* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitAngle::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RotationLimitAngle*, creationType>()));
    }
  }; // RootMotion.FinalIK.RotationLimitAngle
  #pragma pack(pop)
  static check_size<sizeof(RotationLimitAngle), 60 + sizeof(float)> __RootMotion_FinalIK_RotationLimitAngleSizeCheck;
  static_assert(sizeof(RotationLimitAngle) == 0x40);
}
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::RotationLimitAngle*, "RootMotion.FinalIK", "RotationLimitAngle");
