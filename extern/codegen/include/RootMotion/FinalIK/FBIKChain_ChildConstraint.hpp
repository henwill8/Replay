// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.FBIKChain
#include "RootMotion/FinalIK/FBIKChain.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: RootMotion::FinalIK
namespace RootMotion::FinalIK {
  // Forward declaring type: IKSolverFullBody
  class IKSolverFullBody;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.FBIKChain/ChildConstraint
  // [] Offset: FFFFFFFF
  class FBIKChain::ChildConstraint : public ::Il2CppObject {
    public:
    // public System.Single pushElasticity
    // Size: 0x4
    // Offset: 0x10
    float pushElasticity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single pullElasticity
    // Size: 0x4
    // Offset: 0x14
    float pullElasticity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Transform bone1
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::Transform* bone1;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform bone2
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::Transform* bone2;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD2ACE8
    // private System.Single <nominalDistance>k__BackingField
    // Size: 0x4
    // Offset: 0x28
    float nominalDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xD2ACF8
    // private System.Boolean <isRigid>k__BackingField
    // Size: 0x1
    // Offset: 0x2C
    bool isRigid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isRigid and: crossFade
    char __padding5[0x3] = {};
    // private System.Single crossFade
    // Size: 0x4
    // Offset: 0x30
    float crossFade;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single inverseCrossFade
    // Size: 0x4
    // Offset: 0x34
    float inverseCrossFade;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 chain1Index
    // Size: 0x4
    // Offset: 0x38
    int chain1Index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 chain2Index
    // Size: 0x4
    // Offset: 0x3C
    int chain2Index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: ChildConstraint
    ChildConstraint(float pushElasticity_ = {}, float pullElasticity_ = {}, UnityEngine::Transform* bone1_ = {}, UnityEngine::Transform* bone2_ = {}, float nominalDistance_ = {}, bool isRigid_ = {}, float crossFade_ = {}, float inverseCrossFade_ = {}, int chain1Index_ = {}, int chain2Index_ = {}) noexcept : pushElasticity{pushElasticity_}, pullElasticity{pullElasticity_}, bone1{bone1_}, bone2{bone2_}, nominalDistance{nominalDistance_}, isRigid{isRigid_}, crossFade{crossFade_}, inverseCrossFade{inverseCrossFade_}, chain1Index{chain1Index_}, chain2Index{chain2Index_} {}
    // public System.Single get_nominalDistance()
    // Offset: 0x1B5A8A8
    float get_nominalDistance();
    // private System.Void set_nominalDistance(System.Single value)
    // Offset: 0x1B5A8B0
    void set_nominalDistance(float value);
    // public System.Boolean get_isRigid()
    // Offset: 0x1B5A8B8
    bool get_isRigid();
    // private System.Void set_isRigid(System.Boolean value)
    // Offset: 0x1B5A8C0
    void set_isRigid(bool value);
    // public System.Void .ctor(UnityEngine.Transform bone1, UnityEngine.Transform bone2, System.Single pushElasticity, System.Single pullElasticity)
    // Offset: 0x1B5A8CC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FBIKChain::ChildConstraint* New_ctor(UnityEngine::Transform* bone1, UnityEngine::Transform* bone2, float pushElasticity, float pullElasticity) {
      static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::FBIKChain::ChildConstraint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FBIKChain::ChildConstraint*, creationType>(bone1, bone2, pushElasticity, pullElasticity)));
    }
    // public System.Void Initiate(RootMotion.FinalIK.IKSolverFullBody solver)
    // Offset: 0x1B5862C
    void Initiate(RootMotion::FinalIK::IKSolverFullBody* solver);
    // public System.Void OnPreSolve(RootMotion.FinalIK.IKSolverFullBody solver)
    // Offset: 0x1B58B6C
    void OnPreSolve(RootMotion::FinalIK::IKSolverFullBody* solver);
    // public System.Void Solve(RootMotion.FinalIK.IKSolverFullBody solver)
    // Offset: 0x1B5A5A4
    void Solve(RootMotion::FinalIK::IKSolverFullBody* solver);
  }; // RootMotion.FinalIK.FBIKChain/ChildConstraint
  #pragma pack(pop)
  static check_size<sizeof(FBIKChain::ChildConstraint), 60 + sizeof(int)> __RootMotion_FinalIK_FBIKChain_ChildConstraintSizeCheck;
  static_assert(sizeof(FBIKChain::ChildConstraint) == 0x40);
}
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::FBIKChain::ChildConstraint*, "RootMotion.FinalIK", "FBIKChain/ChildConstraint");
