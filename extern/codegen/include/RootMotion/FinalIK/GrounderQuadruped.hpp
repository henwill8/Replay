// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.Grounder
#include "RootMotion/FinalIK/Grounder.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: RootMotion::FinalIK
namespace RootMotion::FinalIK {
  // Skipping declaration: Grounding because it is already included!
  // Forward declaring type: IK
  class IK;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Rigidbody
  class Rigidbody;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Autogenerated type: RootMotion.FinalIK.GrounderQuadruped
  class GrounderQuadruped : public RootMotion::FinalIK::Grounder {
    public:
    // Nested type: RootMotion::FinalIK::GrounderQuadruped::Foot
    struct Foot;
    // public RootMotion.FinalIK.Grounding forelegSolver
    // Offset: 0x40
    RootMotion::FinalIK::Grounding* forelegSolver;
    // public System.Single rootRotationWeight
    // Offset: 0x48
    float rootRotationWeight;
    // public System.Single minRootRotation
    // Offset: 0x4C
    float minRootRotation;
    // public System.Single maxRootRotation
    // Offset: 0x50
    float maxRootRotation;
    // public System.Single rootRotationSpeed
    // Offset: 0x54
    float rootRotationSpeed;
    // public System.Single maxLegOffset
    // Offset: 0x58
    float maxLegOffset;
    // public System.Single maxForeLegOffset
    // Offset: 0x5C
    float maxForeLegOffset;
    // public System.Single maintainHeadRotationWeight
    // Offset: 0x60
    float maintainHeadRotationWeight;
    // public UnityEngine.Transform characterRoot
    // Offset: 0x68
    UnityEngine::Transform* characterRoot;
    // public UnityEngine.Transform pelvis
    // Offset: 0x70
    UnityEngine::Transform* pelvis;
    // public UnityEngine.Transform lastSpineBone
    // Offset: 0x78
    UnityEngine::Transform* lastSpineBone;
    // public UnityEngine.Transform head
    // Offset: 0x80
    UnityEngine::Transform* head;
    // public RootMotion.FinalIK.IK[] legs
    // Offset: 0x88
    ::Array<RootMotion::FinalIK::IK*>* legs;
    // public RootMotion.FinalIK.IK[] forelegs
    // Offset: 0x90
    ::Array<RootMotion::FinalIK::IK*>* forelegs;
    // public UnityEngine.Vector3 gravity
    // Offset: 0x98
    UnityEngine::Vector3 gravity;
    // private RootMotion.FinalIK.GrounderQuadruped/Foot[] feet
    // Offset: 0xA8
    ::Array<RootMotion::FinalIK::GrounderQuadruped::Foot>* feet;
    // private UnityEngine.Vector3 animatedPelvisLocalPosition
    // Offset: 0xB0
    UnityEngine::Vector3 animatedPelvisLocalPosition;
    // private UnityEngine.Quaternion animatedPelvisLocalRotation
    // Offset: 0xBC
    UnityEngine::Quaternion animatedPelvisLocalRotation;
    // private UnityEngine.Quaternion animatedHeadLocalRotation
    // Offset: 0xCC
    UnityEngine::Quaternion animatedHeadLocalRotation;
    // private UnityEngine.Vector3 solvedPelvisLocalPosition
    // Offset: 0xDC
    UnityEngine::Vector3 solvedPelvisLocalPosition;
    // private UnityEngine.Quaternion solvedPelvisLocalRotation
    // Offset: 0xE8
    UnityEngine::Quaternion solvedPelvisLocalRotation;
    // private UnityEngine.Quaternion solvedHeadLocalRotation
    // Offset: 0xF8
    UnityEngine::Quaternion solvedHeadLocalRotation;
    // private System.Int32 solvedFeet
    // Offset: 0x108
    int solvedFeet;
    // private System.Boolean solved
    // Offset: 0x10C
    bool solved;
    // private System.Single angle
    // Offset: 0x110
    float angle;
    // private UnityEngine.Transform forefeetRoot
    // Offset: 0x118
    UnityEngine::Transform* forefeetRoot;
    // private UnityEngine.Quaternion headRotation
    // Offset: 0x120
    UnityEngine::Quaternion headRotation;
    // private System.Single lastWeight
    // Offset: 0x130
    float lastWeight;
    // private UnityEngine.Rigidbody characterRootRigidbody
    // Offset: 0x138
    UnityEngine::Rigidbody* characterRootRigidbody;
    // private System.Boolean IsReadyToInitiate()
    // Offset: 0x13790F4
    bool IsReadyToInitiate();
    // private System.Boolean IsReadyToInitiateLegs(RootMotion.FinalIK.IK[] ikComponents)
    // Offset: 0x1379224
    bool IsReadyToInitiateLegs(::Array<RootMotion::FinalIK::IK*>* ikComponents);
    // private System.Void OnDisable()
    // Offset: 0x13793E4
    void OnDisable();
    // private System.Void Update()
    // Offset: 0x137944C
    void Update();
    // private System.Void Initiate()
    // Offset: 0x1379504
    void Initiate();
    // private UnityEngine.Transform[] InitiateFeet(RootMotion.FinalIK.IK[] ikComponents, ref RootMotion.FinalIK.GrounderQuadruped/Foot[] f, System.Int32 indexOffset)
    // Offset: 0x1379838
    ::Array<UnityEngine::Transform*>* InitiateFeet(::Array<RootMotion::FinalIK::IK*>* ikComponents, ::Array<RootMotion::FinalIK::GrounderQuadruped::Foot>*& f, int indexOffset);
    // private System.Void LateUpdate()
    // Offset: 0x1379C10
    void LateUpdate();
    // private System.Void RootRotation()
    // Offset: 0x1379D5C
    void RootRotation();
    // private System.Void OnSolverUpdate()
    // Offset: 0x137A200
    void OnSolverUpdate();
    // private System.Void UpdateForefeetRoot()
    // Offset: 0x137A9F0
    void UpdateForefeetRoot();
    // private System.Void SetFootIK(RootMotion.FinalIK.GrounderQuadruped/Foot foot, System.Single maxOffset)
    // Offset: 0x137ACB0
    void SetFootIK(RootMotion::FinalIK::GrounderQuadruped::Foot foot, float maxOffset);
    // private System.Void OnPostSolverUpdate()
    // Offset: 0x137AE10
    void OnPostSolverUpdate();
    // private System.Void OnDestroy()
    // Offset: 0x137B0EC
    void OnDestroy();
    // private System.Void DestroyLegs(RootMotion.FinalIK.IK[] ikComponents)
    // Offset: 0x137B124
    void DestroyLegs(::Array<RootMotion::FinalIK::IK*>* ikComponents);
    // protected override System.Void OpenUserManual()
    // Offset: 0x1379028
    // Implemented from: RootMotion.FinalIK.Grounder
    // Base method: System.Void Grounder::OpenUserManual()
    void OpenUserManual();
    // protected override System.Void OpenScriptReference()
    // Offset: 0x1379074
    // Implemented from: RootMotion.FinalIK.Grounder
    // Base method: System.Void Grounder::OpenScriptReference()
    void OpenScriptReference();
    // public override System.Void ResetPosition()
    // Offset: 0x13790C0
    // Implemented from: RootMotion.FinalIK.Grounder
    // Base method: System.Void Grounder::ResetPosition()
    void ResetPosition();
    // public System.Void .ctor()
    // Offset: 0x137B308
    // Implemented from: RootMotion.FinalIK.Grounder
    // Base method: System.Void Grounder::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static GrounderQuadruped* New_ctor();
  }; // RootMotion.FinalIK.GrounderQuadruped
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::GrounderQuadruped*, "RootMotion.FinalIK", "GrounderQuadruped");
#pragma pack(pop)
