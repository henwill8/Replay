// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKMapping
#include "RootMotion/FinalIK/IKMapping.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: RootMotion::FinalIK
namespace RootMotion::FinalIK {
  // Forward declaring type: IKSolver
  class IKSolver;
  // Forward declaring type: IKSolverFullBody
  class IKSolverFullBody;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.IKMappingBone
  // [] Offset: FFFFFFFF
  class IKMappingBone : public RootMotion::FinalIK::IKMapping {
    public:
    // public UnityEngine.Transform bone
    // Size: 0x8
    // Offset: 0x10
    UnityEngine::Transform* bone;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // [RangeAttribute] Offset: 0xD28A90
    // public System.Single maintainRotationWeight
    // Size: 0x4
    // Offset: 0x18
    float maintainRotationWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: maintainRotationWeight and: boneMap
    char __padding1[0x4] = {};
    // private RootMotion.FinalIK.IKMapping/BoneMap boneMap
    // Size: 0x8
    // Offset: 0x20
    RootMotion::FinalIK::IKMapping::BoneMap* boneMap;
    // Field size check
    static_assert(sizeof(RootMotion::FinalIK::IKMapping::BoneMap*) == 0x8);
    // Creating value type constructor for type: IKMappingBone
    IKMappingBone(UnityEngine::Transform* bone_ = {}, float maintainRotationWeight_ = {}, RootMotion::FinalIK::IKMapping::BoneMap* boneMap_ = {}) noexcept : bone{bone_}, maintainRotationWeight{maintainRotationWeight_}, boneMap{boneMap_} {}
    // public System.Void .ctor(UnityEngine.Transform bone)
    // Offset: 0x1AFE9A0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IKMappingBone* New_ctor(UnityEngine::Transform* bone) {
      static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingBone::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IKMappingBone*, creationType>(bone)));
    }
    // public System.Void StoreDefaultLocalState()
    // Offset: 0x1AFEA4C
    void StoreDefaultLocalState();
    // public System.Void FixTransforms()
    // Offset: 0x1AFEA64
    void FixTransforms();
    // public System.Void ReadPose()
    // Offset: 0x1AFEB2C
    void ReadPose();
    // public System.Void WritePose(System.Single solverWeight)
    // Offset: 0x1AFEB44
    void WritePose(float solverWeight);
    // public override System.Boolean IsValid(RootMotion.FinalIK.IKSolver solver, ref System.String message)
    // Offset: 0x1AFE864
    // Implemented from: RootMotion.FinalIK.IKMapping
    // Base method: System.Boolean IKMapping::IsValid(RootMotion.FinalIK.IKSolver solver, ref System.String message)
    bool IsValid(RootMotion::FinalIK::IKSolver* solver, ::Il2CppString*& message);
    // public System.Void .ctor()
    // Offset: 0x1AFE910
    // Implemented from: RootMotion.FinalIK.IKMapping
    // Base method: System.Void IKMapping::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IKMappingBone* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingBone::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IKMappingBone*, creationType>()));
    }
    // public override System.Void Initiate(RootMotion.FinalIK.IKSolverFullBody solver)
    // Offset: 0x1AFEA80
    // Implemented from: RootMotion.FinalIK.IKMapping
    // Base method: System.Void IKMapping::Initiate(RootMotion.FinalIK.IKSolverFullBody solver)
    void Initiate(RootMotion::FinalIK::IKSolverFullBody* solver);
  }; // RootMotion.FinalIK.IKMappingBone
  #pragma pack(pop)
  static check_size<sizeof(IKMappingBone), 32 + sizeof(RootMotion::FinalIK::IKMapping::BoneMap*)> __RootMotion_FinalIK_IKMappingBoneSizeCheck;
  static_assert(sizeof(IKMappingBone) == 0x28);
}
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::IKMappingBone*, "RootMotion.FinalIK", "IKMappingBone");
