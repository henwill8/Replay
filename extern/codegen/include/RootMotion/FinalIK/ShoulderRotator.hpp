// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: RootMotion.FinalIK.IKMapping
#include "RootMotion/FinalIK/IKMapping.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: RootMotion::FinalIK
namespace RootMotion::FinalIK {
  // Forward declaring type: FullBodyBipedIK
  class FullBodyBipedIK;
  // Forward declaring type: FullBodyBipedChain
  struct FullBodyBipedChain;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.ShoulderRotator
  // [] Offset: FFFFFFFF
  class ShoulderRotator : public UnityEngine::MonoBehaviour {
    public:
    // [TooltipAttribute] Offset: 0xD2A7C4
    // public System.Single weight
    // Size: 0x4
    // Offset: 0x18
    float weight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xD2A7FC
    // public System.Single offset
    // Size: 0x4
    // Offset: 0x1C
    float offset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private RootMotion.FinalIK.FullBodyBipedIK ik
    // Size: 0x8
    // Offset: 0x20
    RootMotion::FinalIK::FullBodyBipedIK* ik;
    // Field size check
    static_assert(sizeof(RootMotion::FinalIK::FullBodyBipedIK*) == 0x8);
    // private System.Boolean skip
    // Size: 0x1
    // Offset: 0x28
    bool skip;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: ShoulderRotator
    ShoulderRotator(float weight_ = {}, float offset_ = {}, RootMotion::FinalIK::FullBodyBipedIK* ik_ = {}, bool skip_ = {}) noexcept : weight{weight_}, offset{offset_}, ik{ik_}, skip{skip_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // private System.Void Start()
    // Offset: 0x196A118
    void Start();
    // private System.Void RotateShoulders()
    // Offset: 0x196A20C
    void RotateShoulders();
    // private System.Void RotateShoulder(RootMotion.FinalIK.FullBodyBipedChain chain, System.Single weight, System.Single offset)
    // Offset: 0x196A2F8
    void RotateShoulder(RootMotion::FinalIK::FullBodyBipedChain chain, float weight, float offset);
    // private RootMotion.FinalIK.IKMapping/BoneMap GetParentBoneMap(RootMotion.FinalIK.FullBodyBipedChain chain)
    // Offset: 0x196A740
    RootMotion::FinalIK::IKMapping::BoneMap* GetParentBoneMap(RootMotion::FinalIK::FullBodyBipedChain chain);
    // private System.Void OnDestroy()
    // Offset: 0x196A778
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0x196A894
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ShoulderRotator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::ShoulderRotator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ShoulderRotator*, creationType>()));
    }
  }; // RootMotion.FinalIK.ShoulderRotator
  #pragma pack(pop)
  static check_size<sizeof(ShoulderRotator), 40 + sizeof(bool)> __RootMotion_FinalIK_ShoulderRotatorSizeCheck;
  static_assert(sizeof(ShoulderRotator) == 0x29);
}
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::ShoulderRotator*, "RootMotion.FinalIK", "ShoulderRotator");
