// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.RotationLimit
#include "RootMotion/FinalIK/RotationLimit.hpp"
// Including type: UnityEngine.Keyframe
#include "UnityEngine/Keyframe.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Skipping declaration: Quaternion because it is already included!
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.RotationLimitSpline
  // [] Offset: FFFFFFFF
  // [HelpURLAttribute] Offset: D26CF0
  // [AddComponentMenu] Offset: D26CF0
  class RotationLimitSpline : public RootMotion::FinalIK::RotationLimit {
    public:
    // [RangeAttribute] Offset: 0xD29A2C
    // public System.Single twistLimit
    // Size: 0x4
    // Offset: 0x38
    float twistLimit;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: twistLimit and: spline
    char __padding0[0x4] = {};
    // [HideInInspector] Offset: 0xD29A48
    // public UnityEngine.AnimationCurve spline
    // Size: 0x8
    // Offset: 0x40
    UnityEngine::AnimationCurve* spline;
    // Field size check
    static_assert(sizeof(UnityEngine::AnimationCurve*) == 0x8);
    // Creating value type constructor for type: RotationLimitSpline
    RotationLimitSpline(float twistLimit_ = {}, UnityEngine::AnimationCurve* spline_ = {}) noexcept : twistLimit{twistLimit_}, spline{spline_} {}
    // private System.Void OpenUserManual()
    // Offset: 0x1969BDC
    void OpenUserManual();
    // private System.Void OpenScriptReference()
    // Offset: 0x1969C28
    void OpenScriptReference();
    // private System.Void SupportGroup()
    // Offset: 0x1969C74
    void SupportGroup();
    // private System.Void ASThread()
    // Offset: 0x1969CC0
    void ASThread();
    // public System.Void SetSpline(UnityEngine.Keyframe[] keyframes)
    // Offset: 0x1969D0C
    void SetSpline(::Array<UnityEngine::Keyframe>* keyframes);
    // public UnityEngine.Quaternion LimitSwing(UnityEngine.Quaternion rotation)
    // Offset: 0x1969DE0
    UnityEngine::Quaternion LimitSwing(UnityEngine::Quaternion rotation);
    // protected override UnityEngine.Quaternion LimitRotation(UnityEngine.Quaternion rotation)
    // Offset: 0x1969D28
    // Implemented from: RootMotion.FinalIK.RotationLimit
    // Base method: UnityEngine.Quaternion RotationLimit::LimitRotation(UnityEngine.Quaternion rotation)
    UnityEngine::Quaternion LimitRotation(UnityEngine::Quaternion rotation);
    // public System.Void .ctor()
    // Offset: 0x196A10C
    // Implemented from: RootMotion.FinalIK.RotationLimit
    // Base method: System.Void RotationLimit::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RotationLimitSpline* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::RotationLimitSpline::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RotationLimitSpline*, creationType>()));
    }
  }; // RootMotion.FinalIK.RotationLimitSpline
  #pragma pack(pop)
  static check_size<sizeof(RotationLimitSpline), 64 + sizeof(UnityEngine::AnimationCurve*)> __RootMotion_FinalIK_RotationLimitSplineSizeCheck;
  static_assert(sizeof(RotationLimitSpline) == 0x48);
}
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::RotationLimitSpline*, "RootMotion.FinalIK", "RotationLimitSpline");
