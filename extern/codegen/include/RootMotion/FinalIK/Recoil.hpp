// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.OffsetModifier
#include "RootMotion/FinalIK/OffsetModifier.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: RootMotion::FinalIK
namespace RootMotion::FinalIK {
  // Forward declaring type: AimIK
  class AimIK;
  // Forward declaring type: IKEffector
  class IKEffector;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Autogenerated type: RootMotion.FinalIK.Recoil
  class Recoil : public RootMotion::FinalIK::OffsetModifier {
    public:
    // Nested type: RootMotion::FinalIK::Recoil::RecoilOffset
    class RecoilOffset;
    // Nested type: RootMotion::FinalIK::Recoil::Handedness
    struct Handedness;
    // Autogenerated type: RootMotion.FinalIK.Recoil/Handedness
    struct Handedness : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: Handedness
      constexpr Handedness(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public RootMotion.FinalIK.Recoil/Handedness Right
      static constexpr const int Right = 0;
      // Get static field: static public RootMotion.FinalIK.Recoil/Handedness Right
      static RootMotion::FinalIK::Recoil::Handedness _get_Right();
      // Set static field: static public RootMotion.FinalIK.Recoil/Handedness Right
      static void _set_Right(RootMotion::FinalIK::Recoil::Handedness value);
      // static field const value: static public RootMotion.FinalIK.Recoil/Handedness Left
      static constexpr const int Left = 1;
      // Get static field: static public RootMotion.FinalIK.Recoil/Handedness Left
      static RootMotion::FinalIK::Recoil::Handedness _get_Left();
      // Set static field: static public RootMotion.FinalIK.Recoil/Handedness Left
      static void _set_Left(RootMotion::FinalIK::Recoil::Handedness value);
    }; // RootMotion.FinalIK.Recoil/Handedness
    // public RootMotion.FinalIK.AimIK aimIK
    // Offset: 0x30
    RootMotion::FinalIK::AimIK* aimIK;
    // public System.Boolean aimIKSolvedLast
    // Offset: 0x38
    bool aimIKSolvedLast;
    // public RootMotion.FinalIK.Recoil/Handedness handedness
    // Offset: 0x3C
    RootMotion::FinalIK::Recoil::Handedness handedness;
    // public System.Boolean twoHanded
    // Offset: 0x40
    bool twoHanded;
    // public UnityEngine.AnimationCurve recoilWeight
    // Offset: 0x48
    UnityEngine::AnimationCurve* recoilWeight;
    // public System.Single magnitudeRandom
    // Offset: 0x50
    float magnitudeRandom;
    // public UnityEngine.Vector3 rotationRandom
    // Offset: 0x54
    UnityEngine::Vector3 rotationRandom;
    // public UnityEngine.Vector3 handRotationOffset
    // Offset: 0x60
    UnityEngine::Vector3 handRotationOffset;
    // public System.Single blendTime
    // Offset: 0x6C
    float blendTime;
    // public RootMotion.FinalIK.Recoil/RecoilOffset[] offsets
    // Offset: 0x70
    ::Array<RootMotion::FinalIK::Recoil::RecoilOffset*>* offsets;
    // public UnityEngine.Quaternion rotationOffset
    // Offset: 0x78
    UnityEngine::Quaternion rotationOffset;
    // private System.Single magnitudeMlp
    // Offset: 0x88
    float magnitudeMlp;
    // private System.Single endTime
    // Offset: 0x8C
    float endTime;
    // private UnityEngine.Quaternion handRotation
    // Offset: 0x90
    UnityEngine::Quaternion handRotation;
    // private UnityEngine.Quaternion secondaryHandRelativeRotation
    // Offset: 0xA0
    UnityEngine::Quaternion secondaryHandRelativeRotation;
    // private UnityEngine.Quaternion randomRotation
    // Offset: 0xB0
    UnityEngine::Quaternion randomRotation;
    // private System.Single length
    // Offset: 0xC0
    float length;
    // private System.Boolean initiated
    // Offset: 0xC4
    bool initiated;
    // private System.Single blendWeight
    // Offset: 0xC8
    float blendWeight;
    // private System.Single w
    // Offset: 0xCC
    float w;
    // private UnityEngine.Quaternion primaryHandRotation
    // Offset: 0xD0
    UnityEngine::Quaternion primaryHandRotation;
    // private System.Boolean handRotationsSet
    // Offset: 0xE0
    bool handRotationsSet;
    // private UnityEngine.Vector3 aimIKAxis
    // Offset: 0xE4
    UnityEngine::Vector3 aimIKAxis;
    // public System.Boolean get_isFinished()
    // Offset: 0x1236664
    bool get_isFinished();
    // public System.Void SetHandRotations(UnityEngine.Quaternion leftHandRotation, UnityEngine.Quaternion rightHandRotation)
    // Offset: 0x1236694
    void SetHandRotations(UnityEngine::Quaternion leftHandRotation, UnityEngine::Quaternion rightHandRotation);
    // public System.Void Fire(System.Single magnitude)
    // Offset: 0x12366C0
    void Fire(float magnitude);
    // private System.Void AfterFBBIK()
    // Offset: 0x1237774
    void AfterFBBIK();
    // private System.Void AfterAimIK()
    // Offset: 0x12378CC
    void AfterAimIK();
    // private RootMotion.FinalIK.IKEffector get_primaryHandEffector()
    // Offset: 0x12376F4
    RootMotion::FinalIK::IKEffector* get_primaryHandEffector();
    // private RootMotion.FinalIK.IKEffector get_secondaryHandEffector()
    // Offset: 0x1237734
    RootMotion::FinalIK::IKEffector* get_secondaryHandEffector();
    // private UnityEngine.Transform get_primaryHand()
    // Offset: 0x12376B4
    UnityEngine::Transform* get_primaryHand();
    // private UnityEngine.Transform get_secondaryHand()
    // Offset: 0x12376D4
    UnityEngine::Transform* get_secondaryHand();
    // protected override System.Void OnModifyOffset()
    // Offset: 0x123693C
    // Implemented from: RootMotion.FinalIK.OffsetModifier
    // Base method: System.Void OffsetModifier::OnModifyOffset()
    void OnModifyOffset();
    // protected override System.Void OnDestroy()
    // Offset: 0x1237908
    // Implemented from: RootMotion.FinalIK.OffsetModifier
    // Base method: System.Void OffsetModifier::OnDestroy()
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0x1237AD4
    // Implemented from: RootMotion.FinalIK.OffsetModifier
    // Base method: System.Void OffsetModifier::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static Recoil* New_ctor();
  }; // RootMotion.FinalIK.Recoil
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::Recoil*, "RootMotion.FinalIK", "Recoil");
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::Recoil::Handedness, "RootMotion.FinalIK", "Recoil/Handedness");
#pragma pack(pop)
