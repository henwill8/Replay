// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.VRIKCalibrator/CalibrationData
#include "RootMotion/FinalIK/VRIKCalibrator_CalibrationData.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.VRIKCalibrator/CalibrationData/Target
  // [] Offset: FFFFFFFF
  class VRIKCalibrator::CalibrationData::Target : public ::Il2CppObject {
    public:
    // public System.Boolean used
    // Size: 0x1
    // Offset: 0x10
    bool used;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: used and: localPosition
    char __padding0[0x3] = {};
    // public UnityEngine.Vector3 localPosition
    // Size: 0xC
    // Offset: 0x14
    UnityEngine::Vector3 localPosition;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion localRotation
    // Size: 0x10
    // Offset: 0x20
    UnityEngine::Quaternion localRotation;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // Creating value type constructor for type: Target
    Target(bool used_ = {}, UnityEngine::Vector3 localPosition_ = {}, UnityEngine::Quaternion localRotation_ = {}) noexcept : used{used_}, localPosition{localPosition_}, localRotation{localRotation_} {}
    // public System.Void .ctor(UnityEngine.Transform t)
    // Offset: 0x196ECC4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VRIKCalibrator::CalibrationData::Target* New_ctor(UnityEngine::Transform* t) {
      static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIKCalibrator::CalibrationData::Target::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VRIKCalibrator::CalibrationData::Target*, creationType>(t)));
    }
    // public System.Void SetTo(UnityEngine.Transform t)
    // Offset: 0x196F838
    void SetTo(UnityEngine::Transform* t);
  }; // RootMotion.FinalIK.VRIKCalibrator/CalibrationData/Target
  #pragma pack(pop)
  static check_size<sizeof(VRIKCalibrator::CalibrationData::Target), 32 + sizeof(UnityEngine::Quaternion)> __RootMotion_FinalIK_VRIKCalibrator_CalibrationData_TargetSizeCheck;
  static_assert(sizeof(VRIKCalibrator::CalibrationData::Target) == 0x30);
}
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::VRIKCalibrator::CalibrationData::Target*, "RootMotion.FinalIK", "VRIKCalibrator/CalibrationData/Target");
