// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKMapping
#include "RootMotion/FinalIK/IKMapping.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Vector3
  struct Vector3;
}
// Forward declaring namespace: RootMotion::FinalIK
namespace RootMotion::FinalIK {
  // Forward declaring type: IKSolverFullBody
  class IKSolverFullBody;
  // Forward declaring type: IKSolver
  class IKSolver;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0x71
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.IKMappingSpine
  // [] Offset: FFFFFFFF
  class IKMappingSpine : public RootMotion::FinalIK::IKMapping {
    public:
    // public UnityEngine.Transform[] spineBones
    // Size: 0x8
    // Offset: 0x10
    ::Array<UnityEngine::Transform*>* spineBones;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Transform*>*) == 0x8);
    // public UnityEngine.Transform leftUpperArmBone
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::Transform* leftUpperArmBone;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform rightUpperArmBone
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::Transform* rightUpperArmBone;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform leftThighBone
    // Size: 0x8
    // Offset: 0x28
    UnityEngine::Transform* leftThighBone;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform rightThighBone
    // Size: 0x8
    // Offset: 0x30
    UnityEngine::Transform* rightThighBone;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // [RangeAttribute] Offset: 0xD28AD8
    // public System.Int32 iterations
    // Size: 0x4
    // Offset: 0x38
    int iterations;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [RangeAttribute] Offset: 0xD28AF0
    // public System.Single twistWeight
    // Size: 0x4
    // Offset: 0x3C
    float twistWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 rootNodeIndex
    // Size: 0x4
    // Offset: 0x40
    int rootNodeIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: rootNodeIndex and: spine
    char __padding7[0x4] = {};
    // private RootMotion.FinalIK.IKMapping/BoneMap[] spine
    // Size: 0x8
    // Offset: 0x48
    ::Array<RootMotion::FinalIK::IKMapping::BoneMap*>* spine;
    // Field size check
    static_assert(sizeof(::Array<RootMotion::FinalIK::IKMapping::BoneMap*>*) == 0x8);
    // private RootMotion.FinalIK.IKMapping/BoneMap leftUpperArm
    // Size: 0x8
    // Offset: 0x50
    RootMotion::FinalIK::IKMapping::BoneMap* leftUpperArm;
    // Field size check
    static_assert(sizeof(RootMotion::FinalIK::IKMapping::BoneMap*) == 0x8);
    // private RootMotion.FinalIK.IKMapping/BoneMap rightUpperArm
    // Size: 0x8
    // Offset: 0x58
    RootMotion::FinalIK::IKMapping::BoneMap* rightUpperArm;
    // Field size check
    static_assert(sizeof(RootMotion::FinalIK::IKMapping::BoneMap*) == 0x8);
    // private RootMotion.FinalIK.IKMapping/BoneMap leftThigh
    // Size: 0x8
    // Offset: 0x60
    RootMotion::FinalIK::IKMapping::BoneMap* leftThigh;
    // Field size check
    static_assert(sizeof(RootMotion::FinalIK::IKMapping::BoneMap*) == 0x8);
    // private RootMotion.FinalIK.IKMapping/BoneMap rightThigh
    // Size: 0x8
    // Offset: 0x68
    RootMotion::FinalIK::IKMapping::BoneMap* rightThigh;
    // Field size check
    static_assert(sizeof(RootMotion::FinalIK::IKMapping::BoneMap*) == 0x8);
    // private System.Boolean useFABRIK
    // Size: 0x1
    // Offset: 0x70
    bool useFABRIK;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: IKMappingSpine
    IKMappingSpine(::Array<UnityEngine::Transform*>* spineBones_ = {}, UnityEngine::Transform* leftUpperArmBone_ = {}, UnityEngine::Transform* rightUpperArmBone_ = {}, UnityEngine::Transform* leftThighBone_ = {}, UnityEngine::Transform* rightThighBone_ = {}, int iterations_ = {}, float twistWeight_ = {}, int rootNodeIndex_ = {}, ::Array<RootMotion::FinalIK::IKMapping::BoneMap*>* spine_ = {}, RootMotion::FinalIK::IKMapping::BoneMap* leftUpperArm_ = {}, RootMotion::FinalIK::IKMapping::BoneMap* rightUpperArm_ = {}, RootMotion::FinalIK::IKMapping::BoneMap* leftThigh_ = {}, RootMotion::FinalIK::IKMapping::BoneMap* rightThigh_ = {}, bool useFABRIK_ = {}) noexcept : spineBones{spineBones_}, leftUpperArmBone{leftUpperArmBone_}, rightUpperArmBone{rightUpperArmBone_}, leftThighBone{leftThighBone_}, rightThighBone{rightThighBone_}, iterations{iterations_}, twistWeight{twistWeight_}, rootNodeIndex{rootNodeIndex_}, spine{spine_}, leftUpperArm{leftUpperArm_}, rightUpperArm{rightUpperArm_}, leftThigh{leftThigh_}, rightThigh{rightThigh_}, useFABRIK{useFABRIK_} {}
    // public System.Void .ctor(UnityEngine.Transform[] spineBones, UnityEngine.Transform leftUpperArmBone, UnityEngine.Transform rightUpperArmBone, UnityEngine.Transform leftThighBone, UnityEngine.Transform rightThighBone)
    // Offset: 0x1AFFDBC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IKMappingSpine* New_ctor(::Array<UnityEngine::Transform*>* spineBones, UnityEngine::Transform* leftUpperArmBone, UnityEngine::Transform* rightUpperArmBone, UnityEngine::Transform* leftThighBone, UnityEngine::Transform* rightThighBone) {
      static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingSpine::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IKMappingSpine*, creationType>(spineBones, leftUpperArmBone, rightUpperArmBone, leftThighBone, rightThighBone)));
    }
    // public System.Void SetBones(UnityEngine.Transform[] spineBones, UnityEngine.Transform leftUpperArmBone, UnityEngine.Transform rightUpperArmBone, UnityEngine.Transform leftThighBone, UnityEngine.Transform rightThighBone)
    // Offset: 0x1AFFF5C
    void SetBones(::Array<UnityEngine::Transform*>* spineBones, UnityEngine::Transform* leftUpperArmBone, UnityEngine::Transform* rightUpperArmBone, UnityEngine::Transform* leftThighBone, UnityEngine::Transform* rightThighBone);
    // public System.Void StoreDefaultLocalState()
    // Offset: 0x1AFFFDC
    void StoreDefaultLocalState();
    // public System.Void FixTransforms()
    // Offset: 0x1B00044
    void FixTransforms();
    // private System.Boolean UseFABRIK()
    // Offset: 0x1B0079C
    bool UseFABRIK();
    // public System.Void ReadPose()
    // Offset: 0x1B007D4
    void ReadPose();
    // public System.Void WritePose(RootMotion.FinalIK.IKSolverFullBody solver)
    // Offset: 0x1B00AB4
    void WritePose(RootMotion::FinalIK::IKSolverFullBody* solver);
    // public System.Void ForwardReach(UnityEngine.Vector3 position)
    // Offset: 0x1B00E68
    void ForwardReach(UnityEngine::Vector3 position);
    // private System.Void BackwardReach(UnityEngine.Vector3 position)
    // Offset: 0x1B00F54
    void BackwardReach(UnityEngine::Vector3 position);
    // private System.Void MapToSolverPositions(RootMotion.FinalIK.IKSolverFullBody solver)
    // Offset: 0x1B0101C
    void MapToSolverPositions(RootMotion::FinalIK::IKSolverFullBody* solver);
    // public override System.Boolean IsValid(RootMotion.FinalIK.IKSolver solver, ref System.String message)
    // Offset: 0x1AFF96C
    // Implemented from: RootMotion.FinalIK.IKMapping
    // Base method: System.Boolean IKMapping::IsValid(RootMotion.FinalIK.IKSolver solver, ref System.String message)
    bool IsValid(RootMotion::FinalIK::IKSolver* solver, ::Il2CppString*& message);
    // public System.Void .ctor()
    // Offset: 0x1AFFC64
    // Implemented from: RootMotion.FinalIK.IKMapping
    // Base method: System.Void IKMapping::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IKMappingSpine* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKMappingSpine::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IKMappingSpine*, creationType>()));
    }
    // public override System.Void Initiate(RootMotion.FinalIK.IKSolverFullBody solver)
    // Offset: 0x1B000C4
    // Implemented from: RootMotion.FinalIK.IKMapping
    // Base method: System.Void IKMapping::Initiate(RootMotion.FinalIK.IKSolverFullBody solver)
    void Initiate(RootMotion::FinalIK::IKSolverFullBody* solver);
  }; // RootMotion.FinalIK.IKMappingSpine
  #pragma pack(pop)
  static check_size<sizeof(IKMappingSpine), 112 + sizeof(bool)> __RootMotion_FinalIK_IKMappingSpineSizeCheck;
  static_assert(sizeof(IKMappingSpine) == 0x71);
}
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::IKMappingSpine*, "RootMotion.FinalIK", "IKMappingSpine");
