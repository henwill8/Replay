// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: RootMotion::FinalIK
namespace RootMotion::FinalIK {
  // Forward declaring type: FullBodyBipedIK
  class FullBodyBipedIK;
  // Forward declaring type: IKEffector
  class IKEffector;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Autogenerated type: RootMotion.FinalIK.FBBIKHeadEffector
  class FBBIKHeadEffector : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: RootMotion::FinalIK::FBBIKHeadEffector::BendBone
    class BendBone;
    // public RootMotion.FinalIK.FullBodyBipedIK ik
    // Offset: 0x18
    RootMotion::FinalIK::FullBodyBipedIK* ik;
    // public System.Single positionWeight
    // Offset: 0x20
    float positionWeight;
    // public System.Single bodyWeight
    // Offset: 0x24
    float bodyWeight;
    // public System.Single thighWeight
    // Offset: 0x28
    float thighWeight;
    // public System.Boolean handsPullBody
    // Offset: 0x2C
    bool handsPullBody;
    // public System.Single rotationWeight
    // Offset: 0x30
    float rotationWeight;
    // public System.Single bodyClampWeight
    // Offset: 0x34
    float bodyClampWeight;
    // public System.Single headClampWeight
    // Offset: 0x38
    float headClampWeight;
    // public System.Single bendWeight
    // Offset: 0x3C
    float bendWeight;
    // public RootMotion.FinalIK.FBBIKHeadEffector/BendBone[] bendBones
    // Offset: 0x40
    ::Array<RootMotion::FinalIK::FBBIKHeadEffector::BendBone*>* bendBones;
    // public System.Single CCDWeight
    // Offset: 0x48
    float CCDWeight;
    // public System.Single roll
    // Offset: 0x4C
    float roll;
    // public System.Single damper
    // Offset: 0x50
    float damper;
    // public UnityEngine.Transform[] CCDBones
    // Offset: 0x58
    ::Array<UnityEngine::Transform*>* CCDBones;
    // public System.Single postStretchWeight
    // Offset: 0x60
    float postStretchWeight;
    // public System.Single maxStretch
    // Offset: 0x64
    float maxStretch;
    // public System.Single stretchDamper
    // Offset: 0x68
    float stretchDamper;
    // public System.Boolean fixHead
    // Offset: 0x6C
    bool fixHead;
    // public UnityEngine.Transform[] stretchBones
    // Offset: 0x70
    ::Array<UnityEngine::Transform*>* stretchBones;
    // public UnityEngine.Vector3 chestDirection
    // Offset: 0x78
    UnityEngine::Vector3 chestDirection;
    // public System.Single chestDirectionWeight
    // Offset: 0x84
    float chestDirectionWeight;
    // public UnityEngine.Transform[] chestBones
    // Offset: 0x88
    ::Array<UnityEngine::Transform*>* chestBones;
    // public RootMotion.FinalIK.IKSolver/UpdateDelegate OnPostHeadEffectorFK
    // Offset: 0x90
    RootMotion::FinalIK::IKSolver::UpdateDelegate* OnPostHeadEffectorFK;
    // private UnityEngine.Vector3 offset
    // Offset: 0x98
    UnityEngine::Vector3 offset;
    // private UnityEngine.Vector3 headToBody
    // Offset: 0xA4
    UnityEngine::Vector3 headToBody;
    // private UnityEngine.Vector3 shoulderCenterToHead
    // Offset: 0xB0
    UnityEngine::Vector3 shoulderCenterToHead;
    // private UnityEngine.Vector3 headToLeftThigh
    // Offset: 0xBC
    UnityEngine::Vector3 headToLeftThigh;
    // private UnityEngine.Vector3 headToRightThigh
    // Offset: 0xC8
    UnityEngine::Vector3 headToRightThigh;
    // private UnityEngine.Vector3 leftShoulderPos
    // Offset: 0xD4
    UnityEngine::Vector3 leftShoulderPos;
    // private UnityEngine.Vector3 rightShoulderPos
    // Offset: 0xE0
    UnityEngine::Vector3 rightShoulderPos;
    // private System.Single shoulderDist
    // Offset: 0xEC
    float shoulderDist;
    // private System.Single leftShoulderDist
    // Offset: 0xF0
    float leftShoulderDist;
    // private System.Single rightShoulderDist
    // Offset: 0xF4
    float rightShoulderDist;
    // private UnityEngine.Quaternion chestRotation
    // Offset: 0xF8
    UnityEngine::Quaternion chestRotation;
    // private UnityEngine.Quaternion headRotationRelativeToRoot
    // Offset: 0x108
    UnityEngine::Quaternion headRotationRelativeToRoot;
    // private UnityEngine.Quaternion[] ccdDefaultLocalRotations
    // Offset: 0x118
    ::Array<UnityEngine::Quaternion>* ccdDefaultLocalRotations;
    // private UnityEngine.Vector3 headLocalPosition
    // Offset: 0x120
    UnityEngine::Vector3 headLocalPosition;
    // private UnityEngine.Quaternion headLocalRotation
    // Offset: 0x12C
    UnityEngine::Quaternion headLocalRotation;
    // private UnityEngine.Vector3[] stretchLocalPositions
    // Offset: 0x140
    ::Array<UnityEngine::Vector3>* stretchLocalPositions;
    // private UnityEngine.Quaternion[] stretchLocalRotations
    // Offset: 0x148
    ::Array<UnityEngine::Quaternion>* stretchLocalRotations;
    // private UnityEngine.Vector3[] chestLocalPositions
    // Offset: 0x150
    ::Array<UnityEngine::Vector3>* chestLocalPositions;
    // private UnityEngine.Quaternion[] chestLocalRotations
    // Offset: 0x158
    ::Array<UnityEngine::Quaternion>* chestLocalRotations;
    // private System.Int32 bendBonesCount
    // Offset: 0x160
    int bendBonesCount;
    // private System.Int32 ccdBonesCount
    // Offset: 0x164
    int ccdBonesCount;
    // private System.Int32 stretchBonesCount
    // Offset: 0x168
    int stretchBonesCount;
    // private System.Int32 chestBonesCount
    // Offset: 0x16C
    int chestBonesCount;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // private System.Void Start()
    // Offset: 0x13B0828
    void Start();
    // private System.Void OnStoreDefaultLocalState()
    // Offset: 0x13B0BAC
    void OnStoreDefaultLocalState();
    // private System.Void OnFixTransforms()
    // Offset: 0x13B10A8
    void OnFixTransforms();
    // private System.Void OnPreRead()
    // Offset: 0x13B149C
    void OnPreRead();
    // private System.Void SpineBend()
    // Offset: 0x13B1E14
    void SpineBend();
    // private System.Void CCDPass()
    // Offset: 0x13B2160
    void CCDPass();
    // private System.Void Iterate(System.Int32 iteration)
    // Offset: 0x13B24FC
    void Iterate(int iteration);
    // private System.Void OnPostUpdate()
    // Offset: 0x13B2F68
    void OnPostUpdate();
    // private System.Void ChestDirection()
    // Offset: 0x13B1B40
    void ChestDirection();
    // private System.Void PostStretching()
    // Offset: 0x13B3178
    void PostStretching();
    // private System.Void LerpSolverPosition(RootMotion.FinalIK.IKEffector effector, UnityEngine.Vector3 position, System.Single weight, UnityEngine.Vector3 offset)
    // Offset: 0x13B2E24
    void LerpSolverPosition(RootMotion::FinalIK::IKEffector* effector, UnityEngine::Vector3 position, float weight, UnityEngine::Vector3 offset);
    // private System.Void Solve(ref UnityEngine.Vector3 pos1, ref UnityEngine.Vector3 pos2, System.Single nominalDistance)
    // Offset: 0x13B2C88
    void Solve(UnityEngine::Vector3& pos1, UnityEngine::Vector3& pos2, float nominalDistance);
    // private System.Void OnDestroy()
    // Offset: 0x13B34E4
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0x13B37C8
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static FBBIKHeadEffector* New_ctor();
  }; // RootMotion.FinalIK.FBBIKHeadEffector
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::FBBIKHeadEffector*, "RootMotion.FinalIK", "FBBIKHeadEffector");
#pragma pack(pop)
