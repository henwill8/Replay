// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.RotationLimit
#include "RootMotion/FinalIK/RotationLimit.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: RootMotion::FinalIK
namespace RootMotion::FinalIK {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Autogenerated type: RootMotion.FinalIK.RotationLimitPolygonal
  class RotationLimitPolygonal : public RootMotion::FinalIK::RotationLimit {
    public:
    // Nested type: RootMotion::FinalIK::RotationLimitPolygonal::ReachCone
    class ReachCone;
    // Nested type: RootMotion::FinalIK::RotationLimitPolygonal::LimitPoint
    class LimitPoint;
    // public System.Single twistLimit
    // Offset: 0x38
    float twistLimit;
    // public System.Int32 smoothIterations
    // Offset: 0x3C
    int smoothIterations;
    // public RootMotion.FinalIK.RotationLimitPolygonal/LimitPoint[] points
    // Offset: 0x40
    ::Array<RootMotion::FinalIK::RotationLimitPolygonal::LimitPoint*>* points;
    // public UnityEngine.Vector3[] P
    // Offset: 0x48
    ::Array<UnityEngine::Vector3>* P;
    // public RootMotion.FinalIK.RotationLimitPolygonal/ReachCone[] reachCones
    // Offset: 0x50
    ::Array<RootMotion::FinalIK::RotationLimitPolygonal::ReachCone*>* reachCones;
    // private System.Void OpenUserManual()
    // Offset: 0x1238E48
    void OpenUserManual();
    // private System.Void OpenScriptReference()
    // Offset: 0x1238E94
    void OpenScriptReference();
    // private System.Void SupportGroup()
    // Offset: 0x1238EE0
    void SupportGroup();
    // private System.Void ASThread()
    // Offset: 0x1238F2C
    void ASThread();
    // public System.Void SetLimitPoints(RootMotion.FinalIK.RotationLimitPolygonal/LimitPoint[] points)
    // Offset: 0x1238F78
    void SetLimitPoints(::Array<RootMotion::FinalIK::RotationLimitPolygonal::LimitPoint*>* points);
    // private System.Void Start()
    // Offset: 0x12395B0
    void Start();
    // public System.Void ResetToDefault()
    // Offset: 0x1239BB0
    void ResetToDefault();
    // public System.Void BuildReachCones()
    // Offset: 0x1239020
    void BuildReachCones();
    // private UnityEngine.Vector3[] SmoothPoints()
    // Offset: 0x123A024
    ::Array<UnityEngine::Vector3>* SmoothPoints();
    // private System.Single GetScalar(System.Int32 k)
    // Offset: 0x123A910
    float GetScalar(int k);
    // private UnityEngine.Vector3 PointToTangentPlane(UnityEngine.Vector3 p, System.Single r)
    // Offset: 0x123A954
    UnityEngine::Vector3 PointToTangentPlane(UnityEngine::Vector3 p, float r);
    // private UnityEngine.Vector3 TangentPointToSphere(UnityEngine.Vector3 q, System.Single r)
    // Offset: 0x123AA9C
    UnityEngine::Vector3 TangentPointToSphere(UnityEngine::Vector3 q, float r);
    // private UnityEngine.Quaternion LimitSwing(UnityEngine.Quaternion rotation)
    // Offset: 0x1239878
    UnityEngine::Quaternion LimitSwing(UnityEngine::Quaternion rotation);
    // private System.Int32 GetReachCone(UnityEngine.Vector3 L)
    // Offset: 0x123AC2C
    int GetReachCone(UnityEngine::Vector3 L);
    // protected override UnityEngine.Quaternion LimitRotation(UnityEngine.Quaternion rotation)
    // Offset: 0x12394B8
    // Implemented from: RootMotion.FinalIK.RotationLimit
    // Base method: UnityEngine.Quaternion RotationLimit::LimitRotation(UnityEngine.Quaternion rotation)
    UnityEngine::Quaternion LimitRotation(UnityEngine::Quaternion rotation);
    // public System.Void .ctor()
    // Offset: 0x123ADDC
    // Implemented from: RootMotion.FinalIK.RotationLimit
    // Base method: System.Void RotationLimit::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static RotationLimitPolygonal* New_ctor();
  }; // RootMotion.FinalIK.RotationLimitPolygonal
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::RotationLimitPolygonal*, "RootMotion.FinalIK", "RotationLimitPolygonal");
#pragma pack(pop)
