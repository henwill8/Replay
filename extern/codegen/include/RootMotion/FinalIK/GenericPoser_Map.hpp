// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.GenericPoser
#include "RootMotion/FinalIK/GenericPoser.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.GenericPoser/Map
  // [] Offset: FFFFFFFF
  class GenericPoser::Map : public ::Il2CppObject {
    public:
    // public UnityEngine.Transform bone
    // Size: 0x8
    // Offset: 0x10
    UnityEngine::Transform* bone;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform target
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::Transform* target;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 defaultLocalPosition
    // Size: 0xC
    // Offset: 0x20
    UnityEngine::Vector3 defaultLocalPosition;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion defaultLocalRotation
    // Size: 0x10
    // Offset: 0x2C
    UnityEngine::Quaternion defaultLocalRotation;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // Creating value type constructor for type: Map
    Map(UnityEngine::Transform* bone_ = {}, UnityEngine::Transform* target_ = {}, UnityEngine::Vector3 defaultLocalPosition_ = {}, UnityEngine::Quaternion defaultLocalRotation_ = {}) noexcept : bone{bone_}, target{target_}, defaultLocalPosition{defaultLocalPosition_}, defaultLocalRotation{defaultLocalRotation_} {}
    // public System.Void .ctor(UnityEngine.Transform bone, UnityEngine.Transform target)
    // Offset: 0x1AEC3C8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GenericPoser::Map* New_ctor(UnityEngine::Transform* bone, UnityEngine::Transform* target) {
      static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::GenericPoser::Map::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GenericPoser::Map*, creationType>(bone, target)));
    }
    // public System.Void StoreDefaultState()
    // Offset: 0x1AEC7E8
    void StoreDefaultState();
    // public System.Void FixTransform()
    // Offset: 0x1AEC79C
    void FixTransform();
    // public System.Void Update(System.Single localRotationWeight, System.Single localPositionWeight)
    // Offset: 0x1AEC594
    void Update(float localRotationWeight, float localPositionWeight);
  }; // RootMotion.FinalIK.GenericPoser/Map
  #pragma pack(pop)
  static check_size<sizeof(GenericPoser::Map), 44 + sizeof(UnityEngine::Quaternion)> __RootMotion_FinalIK_GenericPoser_MapSizeCheck;
  static_assert(sizeof(GenericPoser::Map) == 0x3C);
}
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::GenericPoser::Map*, "RootMotion.FinalIK", "GenericPoser/Map");
