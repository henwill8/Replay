// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverVR
#include "RootMotion/FinalIK/IKSolverVR.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: RootMotion
namespace RootMotion {
  // Forward declaring type: InterpolationMode
  struct InterpolationMode;
}
// Forward declaring namespace: UnityEngine::Events
namespace UnityEngine::Events {
  // Forward declaring type: UnityEvent
  class UnityEvent;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Autogenerated type: RootMotion.FinalIK.IKSolverVR/Footstep
  class IKSolverVR::Footstep : public ::Il2CppObject {
    public:
    // public System.Single stepSpeed
    // Offset: 0x10
    float stepSpeed;
    // public UnityEngine.Vector3 characterSpaceOffset
    // Offset: 0x14
    UnityEngine::Vector3 characterSpaceOffset;
    // public UnityEngine.Vector3 position
    // Offset: 0x20
    UnityEngine::Vector3 position;
    // public UnityEngine.Quaternion rotation
    // Offset: 0x2C
    UnityEngine::Quaternion rotation;
    // public UnityEngine.Quaternion stepToRootRot
    // Offset: 0x3C
    UnityEngine::Quaternion stepToRootRot;
    // public System.Boolean isSupportLeg
    // Offset: 0x4C
    bool isSupportLeg;
    // private System.Single <stepProgress>k__BackingField
    // Offset: 0x50
    float stepProgress;
    // public UnityEngine.Vector3 stepFrom
    // Offset: 0x54
    UnityEngine::Vector3 stepFrom;
    // public UnityEngine.Vector3 stepTo
    // Offset: 0x60
    UnityEngine::Vector3 stepTo;
    // public UnityEngine.Quaternion stepFromRot
    // Offset: 0x6C
    UnityEngine::Quaternion stepFromRot;
    // public UnityEngine.Quaternion stepToRot
    // Offset: 0x7C
    UnityEngine::Quaternion stepToRot;
    // private UnityEngine.Quaternion footRelativeToRoot
    // Offset: 0x8C
    UnityEngine::Quaternion footRelativeToRoot;
    // private System.Single supportLegW
    // Offset: 0x9C
    float supportLegW;
    // private System.Single supportLegWV
    // Offset: 0xA0
    float supportLegWV;
    // public System.Boolean get_isStepping()
    // Offset: 0x1440D5C
    bool get_isStepping();
    // public System.Single get_stepProgress()
    // Offset: 0x1440D70
    float get_stepProgress();
    // private System.Void set_stepProgress(System.Single value)
    // Offset: 0x1440D78
    void set_stepProgress(float value);
    // public System.Void .ctor(UnityEngine.Quaternion rootRotation, UnityEngine.Vector3 footPosition, UnityEngine.Quaternion footRotation, UnityEngine.Vector3 characterSpaceOffset)
    // Offset: 0x1440D80
    static IKSolverVR::Footstep* New_ctor(UnityEngine::Quaternion rootRotation, UnityEngine::Vector3 footPosition, UnityEngine::Quaternion footRotation, UnityEngine::Vector3 characterSpaceOffset);
    // public System.Void Reset(UnityEngine.Quaternion rootRotation, UnityEngine.Vector3 footPosition, UnityEngine.Quaternion footRotation)
    // Offset: 0x1440F10
    void Reset(UnityEngine::Quaternion rootRotation, UnityEngine::Vector3 footPosition, UnityEngine::Quaternion footRotation);
    // public System.Void StepTo(UnityEngine.Vector3 p, UnityEngine.Quaternion rootRotation, System.Single stepThreshold)
    // Offset: 0x1440F58
    void StepTo(UnityEngine::Vector3 p, UnityEngine::Quaternion rootRotation, float stepThreshold);
    // public System.Void UpdateStepping(UnityEngine.Vector3 p, UnityEngine.Quaternion rootRotation, System.Single speed)
    // Offset: 0x1441118
    void UpdateStepping(UnityEngine::Vector3 p, UnityEngine::Quaternion rootRotation, float speed);
    // public System.Void UpdateStanding(UnityEngine.Quaternion rootRotation, System.Single minAngle, System.Single speed)
    // Offset: 0x14412F0
    void UpdateStanding(UnityEngine::Quaternion rootRotation, float minAngle, float speed);
    // public System.Void Update(RootMotion.InterpolationMode interpolation, UnityEngine.Events.UnityEvent onStep)
    // Offset: 0x14414DC
    void Update(RootMotion::InterpolationMode interpolation, UnityEngine::Events::UnityEvent* onStep);
  }; // RootMotion.FinalIK.IKSolverVR/Footstep
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::IKSolverVR::Footstep*, "RootMotion.FinalIK", "IKSolverVR/Footstep");
#pragma pack(pop)
