// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolver
#include "RootMotion/FinalIK/IKSolver.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: RootMotion::FinalIK
namespace RootMotion::FinalIK {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Autogenerated type: RootMotion.FinalIK.IKSolverLookAt
  class IKSolverLookAt : public RootMotion::FinalIK::IKSolver {
    public:
    // Nested type: RootMotion::FinalIK::IKSolverLookAt::LookAtBone
    class LookAtBone;
    // public UnityEngine.Transform target
    // Offset: 0x58
    UnityEngine::Transform* target;
    // public RootMotion.FinalIK.IKSolverLookAt/LookAtBone[] spine
    // Offset: 0x60
    ::Array<RootMotion::FinalIK::IKSolverLookAt::LookAtBone*>* spine;
    // public RootMotion.FinalIK.IKSolverLookAt/LookAtBone head
    // Offset: 0x68
    RootMotion::FinalIK::IKSolverLookAt::LookAtBone* head;
    // public RootMotion.FinalIK.IKSolverLookAt/LookAtBone[] eyes
    // Offset: 0x70
    ::Array<RootMotion::FinalIK::IKSolverLookAt::LookAtBone*>* eyes;
    // public System.Single bodyWeight
    // Offset: 0x78
    float bodyWeight;
    // public System.Single headWeight
    // Offset: 0x7C
    float headWeight;
    // public System.Single eyesWeight
    // Offset: 0x80
    float eyesWeight;
    // public System.Single clampWeight
    // Offset: 0x84
    float clampWeight;
    // public System.Single clampWeightHead
    // Offset: 0x88
    float clampWeightHead;
    // public System.Single clampWeightEyes
    // Offset: 0x8C
    float clampWeightEyes;
    // public System.Int32 clampSmoothing
    // Offset: 0x90
    int clampSmoothing;
    // public UnityEngine.AnimationCurve spineWeightCurve
    // Offset: 0x98
    UnityEngine::AnimationCurve* spineWeightCurve;
    // public UnityEngine.Vector3 spineTargetOffset
    // Offset: 0xA0
    UnityEngine::Vector3 spineTargetOffset;
    // protected UnityEngine.Vector3[] spineForwards
    // Offset: 0xB0
    ::Array<UnityEngine::Vector3>* spineForwards;
    // protected UnityEngine.Vector3[] headForwards
    // Offset: 0xB8
    ::Array<UnityEngine::Vector3>* headForwards;
    // protected UnityEngine.Vector3[] eyeForward
    // Offset: 0xC0
    ::Array<UnityEngine::Vector3>* eyeForward;
    // public System.Void SetLookAtWeight(System.Single weight)
    // Offset: 0x135306C
    void SetLookAtWeight(float weight);
    // public System.Void SetLookAtWeight(System.Single weight, System.Single bodyWeight)
    // Offset: 0x13530F0
    void SetLookAtWeight(float weight, float bodyWeight);
    // public System.Void SetLookAtWeight(System.Single weight, System.Single bodyWeight, System.Single headWeight)
    // Offset: 0x135319C
    void SetLookAtWeight(float weight, float bodyWeight, float headWeight);
    // public System.Void SetLookAtWeight(System.Single weight, System.Single bodyWeight, System.Single headWeight, System.Single eyesWeight)
    // Offset: 0x1353264
    void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight);
    // public System.Void SetLookAtWeight(System.Single weight, System.Single bodyWeight, System.Single headWeight, System.Single eyesWeight, System.Single clampWeight)
    // Offset: 0x1353350
    void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight);
    // public System.Void SetLookAtWeight(System.Single weight, System.Single bodyWeight, System.Single headWeight, System.Single eyesWeight, System.Single clampWeight, System.Single clampWeightHead, System.Single clampWeightEyes)
    // Offset: 0x135345C
    void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight, float clampWeightHead, float clampWeightEyes);
    // public System.Boolean SetChain(UnityEngine.Transform[] spine, UnityEngine.Transform head, UnityEngine.Transform[] eyes, UnityEngine.Transform root)
    // Offset: 0x135405C
    bool SetChain(::Array<UnityEngine::Transform*>* spine, UnityEngine::Transform* head, ::Array<UnityEngine::Transform*>* eyes, UnityEngine::Transform* root);
    // protected System.Boolean get_spineIsValid()
    // Offset: 0x13539B8
    bool get_spineIsValid();
    // protected System.Boolean get_spineIsEmpty()
    // Offset: 0x1353B90
    bool get_spineIsEmpty();
    // protected System.Void SolveSpine()
    // Offset: 0x135489C
    void SolveSpine();
    // protected System.Boolean get_headIsValid()
    // Offset: 0x1353A9C
    bool get_headIsValid();
    // protected System.Boolean get_headIsEmpty()
    // Offset: 0x1353BB4
    bool get_headIsEmpty();
    // protected System.Void SolveHead()
    // Offset: 0x1354AC8
    void SolveHead();
    // protected System.Boolean get_eyesIsValid()
    // Offset: 0x1353AAC
    bool get_eyesIsValid();
    // protected System.Boolean get_eyesIsEmpty()
    // Offset: 0x1353C30
    bool get_eyesIsEmpty();
    // protected System.Void SolveEyes()
    // Offset: 0x1354D24
    void SolveEyes();
    // protected UnityEngine.Vector3[] GetForwards(ref UnityEngine.Vector3[] forwards, UnityEngine.Vector3 baseForward, UnityEngine.Vector3 targetForward, System.Int32 bones, System.Single clamp)
    // Offset: 0x1355250
    ::Array<UnityEngine::Vector3>* GetForwards(::Array<UnityEngine::Vector3>*& forwards, UnityEngine::Vector3 baseForward, UnityEngine::Vector3 targetForward, int bones, float clamp);
    // protected System.Void SetBones(UnityEngine.Transform[] array, ref RootMotion.FinalIK.IKSolverLookAt/LookAtBone[] bones)
    // Offset: 0x1354124
    void SetBones(::Array<UnityEngine::Transform*>* array, ::Array<RootMotion::FinalIK::IKSolverLookAt::LookAtBone*>*& bones);
    // public override System.Void StoreDefaultLocalState()
    // Offset: 0x13535A4
    // Implemented from: RootMotion.FinalIK.IKSolver
    // Base method: System.Void IKSolver::StoreDefaultLocalState()
    void StoreDefaultLocalState();
    // public override System.Void FixTransforms()
    // Offset: 0x13536D4
    // Implemented from: RootMotion.FinalIK.IKSolver
    // Base method: System.Void IKSolver::FixTransforms()
    void FixTransforms();
    // public override System.Boolean IsValid(ref System.String message)
    // Offset: 0x1353818
    // Implemented from: RootMotion.FinalIK.IKSolver
    // Base method: System.Boolean IKSolver::IsValid(ref System.String message)
    bool IsValid(::Il2CppString*& message);
    // public override RootMotion.FinalIK.IKSolver/Point[] GetPoints()
    // Offset: 0x1353C54
    // Implemented from: RootMotion.FinalIK.IKSolver
    // Base method: RootMotion.FinalIK.IKSolver/Point[] IKSolver::GetPoints()
    ::Array<RootMotion::FinalIK::IKSolver::Point*>* GetPoints();
    // public override RootMotion.FinalIK.IKSolver/Point GetPoint(UnityEngine.Transform transform)
    // Offset: 0x1353EBC
    // Implemented from: RootMotion.FinalIK.IKSolver
    // Base method: RootMotion.FinalIK.IKSolver/Point IKSolver::GetPoint(UnityEngine.Transform transform)
    RootMotion::FinalIK::IKSolver::Point* GetPoint(UnityEngine::Transform* transform);
    // protected override System.Void OnInitiate()
    // Offset: 0x1354308
    // Implemented from: RootMotion.FinalIK.IKSolver
    // Base method: System.Void IKSolver::OnInitiate()
    void OnInitiate();
    // protected override System.Void OnUpdate()
    // Offset: 0x1354798
    // Implemented from: RootMotion.FinalIK.IKSolver
    // Base method: System.Void IKSolver::OnUpdate()
    void OnUpdate();
    // public System.Void .ctor()
    // Offset: 0x13556F0
    // Implemented from: RootMotion.FinalIK.IKSolver
    // Base method: System.Void IKSolver::.ctor()
    // Base method: System.Void Object::.ctor()
    static IKSolverLookAt* New_ctor();
  }; // RootMotion.FinalIK.IKSolverLookAt
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::IKSolverLookAt*, "RootMotion.FinalIK", "IKSolverLookAt");
#pragma pack(pop)
