// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverTrigonometric
#include "RootMotion/FinalIK/IKSolverTrigonometric.hpp"
// Including type: UnityEngine.AvatarIKGoal
#include "UnityEngine/AvatarIKGoal.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0x140
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.IKSolverLimb
  // [] Offset: FFFFFFFF
  class IKSolverLimb : public RootMotion::FinalIK::IKSolverTrigonometric {
    public:
    // Writing base type padding for base size: 0xA5 to desired offset: 0xA8
    char ___base_padding[0x3] = {};
    // Nested type: RootMotion::FinalIK::IKSolverLimb::BendModifier
    struct BendModifier;
    // Nested type: RootMotion::FinalIK::IKSolverLimb::AxisDirection
    struct AxisDirection;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: RootMotion.FinalIK.IKSolverLimb/BendModifier
    // [] Offset: FFFFFFFF
    struct BendModifier/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: BendModifier
      constexpr BendModifier(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public RootMotion.FinalIK.IKSolverLimb/BendModifier Animation
      static constexpr const int Animation = 0;
      // Get static field: static public RootMotion.FinalIK.IKSolverLimb/BendModifier Animation
      static RootMotion::FinalIK::IKSolverLimb::BendModifier _get_Animation();
      // Set static field: static public RootMotion.FinalIK.IKSolverLimb/BendModifier Animation
      static void _set_Animation(RootMotion::FinalIK::IKSolverLimb::BendModifier value);
      // static field const value: static public RootMotion.FinalIK.IKSolverLimb/BendModifier Target
      static constexpr const int Target = 1;
      // Get static field: static public RootMotion.FinalIK.IKSolverLimb/BendModifier Target
      static RootMotion::FinalIK::IKSolverLimb::BendModifier _get_Target();
      // Set static field: static public RootMotion.FinalIK.IKSolverLimb/BendModifier Target
      static void _set_Target(RootMotion::FinalIK::IKSolverLimb::BendModifier value);
      // static field const value: static public RootMotion.FinalIK.IKSolverLimb/BendModifier Parent
      static constexpr const int Parent = 2;
      // Get static field: static public RootMotion.FinalIK.IKSolverLimb/BendModifier Parent
      static RootMotion::FinalIK::IKSolverLimb::BendModifier _get_Parent();
      // Set static field: static public RootMotion.FinalIK.IKSolverLimb/BendModifier Parent
      static void _set_Parent(RootMotion::FinalIK::IKSolverLimb::BendModifier value);
      // static field const value: static public RootMotion.FinalIK.IKSolverLimb/BendModifier Arm
      static constexpr const int Arm = 3;
      // Get static field: static public RootMotion.FinalIK.IKSolverLimb/BendModifier Arm
      static RootMotion::FinalIK::IKSolverLimb::BendModifier _get_Arm();
      // Set static field: static public RootMotion.FinalIK.IKSolverLimb/BendModifier Arm
      static void _set_Arm(RootMotion::FinalIK::IKSolverLimb::BendModifier value);
      // static field const value: static public RootMotion.FinalIK.IKSolverLimb/BendModifier Goal
      static constexpr const int Goal = 4;
      // Get static field: static public RootMotion.FinalIK.IKSolverLimb/BendModifier Goal
      static RootMotion::FinalIK::IKSolverLimb::BendModifier _get_Goal();
      // Set static field: static public RootMotion.FinalIK.IKSolverLimb/BendModifier Goal
      static void _set_Goal(RootMotion::FinalIK::IKSolverLimb::BendModifier value);
    }; // RootMotion.FinalIK.IKSolverLimb/BendModifier
    #pragma pack(pop)
    static check_size<sizeof(IKSolverLimb::BendModifier), 0 + sizeof(int)> __RootMotion_FinalIK_IKSolverLimb_BendModifierSizeCheck;
    static_assert(sizeof(IKSolverLimb::BendModifier) == 0x4);
    // Size: 0x1C
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: RootMotion.FinalIK.IKSolverLimb/AxisDirection
    // [] Offset: FFFFFFFF
    struct AxisDirection/*, public System::ValueType*/ {
      public:
      // public UnityEngine.Vector3 direction
      // Size: 0xC
      // Offset: 0x0
      UnityEngine::Vector3 direction;
      // Field size check
      static_assert(sizeof(UnityEngine::Vector3) == 0xC);
      // public UnityEngine.Vector3 axis
      // Size: 0xC
      // Offset: 0xC
      UnityEngine::Vector3 axis;
      // Field size check
      static_assert(sizeof(UnityEngine::Vector3) == 0xC);
      // public System.Single dot
      // Size: 0x4
      // Offset: 0x18
      float dot;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // Creating value type constructor for type: AxisDirection
      constexpr AxisDirection(UnityEngine::Vector3 direction_ = {}, UnityEngine::Vector3 axis_ = {}, float dot_ = {}) noexcept : direction{direction_}, axis{axis_}, dot{dot_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
      // public System.Void .ctor(UnityEngine.Vector3 direction, UnityEngine.Vector3 axis)
      // Offset: 0xE15374
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      AxisDirection(UnityEngine::Vector3 direction, UnityEngine::Vector3 axis) {
        static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::AxisDirection::.ctor");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, ".ctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(direction, axis)));
        ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, direction, axis);
      }
    }; // RootMotion.FinalIK.IKSolverLimb/AxisDirection
    #pragma pack(pop)
    static check_size<sizeof(IKSolverLimb::AxisDirection), 24 + sizeof(float)> __RootMotion_FinalIK_IKSolverLimb_AxisDirectionSizeCheck;
    static_assert(sizeof(IKSolverLimb::AxisDirection) == 0x1C);
    // public UnityEngine.AvatarIKGoal goal
    // Size: 0x4
    // Offset: 0xA8
    UnityEngine::AvatarIKGoal goal;
    // Field size check
    static_assert(sizeof(UnityEngine::AvatarIKGoal) == 0x4);
    // public RootMotion.FinalIK.IKSolverLimb/BendModifier bendModifier
    // Size: 0x4
    // Offset: 0xAC
    RootMotion::FinalIK::IKSolverLimb::BendModifier bendModifier;
    // Field size check
    static_assert(sizeof(RootMotion::FinalIK::IKSolverLimb::BendModifier) == 0x4);
    // [RangeAttribute] Offset: 0xD28CB4
    // public System.Single maintainRotationWeight
    // Size: 0x4
    // Offset: 0xB0
    float maintainRotationWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xD28CCC
    // public System.Single bendModifierWeight
    // Size: 0x4
    // Offset: 0xB4
    float bendModifierWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Transform bendGoal
    // Size: 0x8
    // Offset: 0xB8
    UnityEngine::Transform* bendGoal;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // private System.Boolean maintainBendFor1Frame
    // Size: 0x1
    // Offset: 0xC0
    bool maintainBendFor1Frame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean maintainRotationFor1Frame
    // Size: 0x1
    // Offset: 0xC1
    bool maintainRotationFor1Frame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: maintainRotationFor1Frame and: defaultRootRotation
    char __padding6[0x2] = {};
    // private UnityEngine.Quaternion defaultRootRotation
    // Size: 0x10
    // Offset: 0xC4
    UnityEngine::Quaternion defaultRootRotation;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion parentDefaultRotation
    // Size: 0x10
    // Offset: 0xD4
    UnityEngine::Quaternion parentDefaultRotation;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion bone3RotationBeforeSolve
    // Size: 0x10
    // Offset: 0xE4
    UnityEngine::Quaternion bone3RotationBeforeSolve;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion maintainRotation
    // Size: 0x10
    // Offset: 0xF4
    UnityEngine::Quaternion maintainRotation;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion bone3DefaultRotation
    // Size: 0x10
    // Offset: 0x104
    UnityEngine::Quaternion bone3DefaultRotation;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Vector3 _bendNormal
    // Size: 0xC
    // Offset: 0x114
    UnityEngine::Vector3 bendNormal;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 animationNormal
    // Size: 0xC
    // Offset: 0x120
    UnityEngine::Vector3 animationNormal;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // Padding between fields: animationNormal and: axisDirectionsLeft
    char __padding13[0x4] = {};
    // private RootMotion.FinalIK.IKSolverLimb/AxisDirection[] axisDirectionsLeft
    // Size: 0x8
    // Offset: 0x130
    ::Array<RootMotion::FinalIK::IKSolverLimb::AxisDirection>* axisDirectionsLeft;
    // Field size check
    static_assert(sizeof(::Array<RootMotion::FinalIK::IKSolverLimb::AxisDirection>*) == 0x8);
    // private RootMotion.FinalIK.IKSolverLimb/AxisDirection[] axisDirectionsRight
    // Size: 0x8
    // Offset: 0x138
    ::Array<RootMotion::FinalIK::IKSolverLimb::AxisDirection>* axisDirectionsRight;
    // Field size check
    static_assert(sizeof(::Array<RootMotion::FinalIK::IKSolverLimb::AxisDirection>*) == 0x8);
    // Creating value type constructor for type: IKSolverLimb
    IKSolverLimb(UnityEngine::AvatarIKGoal goal_ = {}, RootMotion::FinalIK::IKSolverLimb::BendModifier bendModifier_ = {}, float maintainRotationWeight_ = {}, float bendModifierWeight_ = {}, UnityEngine::Transform* bendGoal_ = {}, bool maintainBendFor1Frame_ = {}, bool maintainRotationFor1Frame_ = {}, UnityEngine::Quaternion defaultRootRotation_ = {}, UnityEngine::Quaternion parentDefaultRotation_ = {}, UnityEngine::Quaternion bone3RotationBeforeSolve_ = {}, UnityEngine::Quaternion maintainRotation_ = {}, UnityEngine::Quaternion bone3DefaultRotation_ = {}, UnityEngine::Vector3 bendNormal_ = {}, UnityEngine::Vector3 animationNormal_ = {}, ::Array<RootMotion::FinalIK::IKSolverLimb::AxisDirection>* axisDirectionsLeft_ = {}, ::Array<RootMotion::FinalIK::IKSolverLimb::AxisDirection>* axisDirectionsRight_ = {}) noexcept : goal{goal_}, bendModifier{bendModifier_}, maintainRotationWeight{maintainRotationWeight_}, bendModifierWeight{bendModifierWeight_}, bendGoal{bendGoal_}, maintainBendFor1Frame{maintainBendFor1Frame_}, maintainRotationFor1Frame{maintainRotationFor1Frame_}, defaultRootRotation{defaultRootRotation_}, parentDefaultRotation{parentDefaultRotation_}, bone3RotationBeforeSolve{bone3RotationBeforeSolve_}, maintainRotation{maintainRotation_}, bone3DefaultRotation{bone3DefaultRotation_}, bendNormal{bendNormal_}, animationNormal{animationNormal_}, axisDirectionsLeft{axisDirectionsLeft_}, axisDirectionsRight{axisDirectionsRight_} {}
    // public System.Void MaintainRotation()
    // Offset: 0x1ADEF24
    void MaintainRotation();
    // public System.Void MaintainBend()
    // Offset: 0x1ADEF74
    void MaintainBend();
    // public System.Void .ctor(UnityEngine.AvatarIKGoal goal)
    // Offset: 0x1AE05DC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IKSolverLimb* New_ctor(UnityEngine::AvatarIKGoal goal) {
      static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IKSolverLimb*, creationType>(goal)));
    }
    // private RootMotion.FinalIK.IKSolverLimb/AxisDirection[] get_axisDirections()
    // Offset: 0x1AE067C
    ::Array<RootMotion::FinalIK::IKSolverLimb::AxisDirection>* get_axisDirections();
    // private System.Void StoreAxisDirections(ref RootMotion.FinalIK.IKSolverLimb/AxisDirection[] axisDirections)
    // Offset: 0x1ADF404
    void StoreAxisDirections(::Array<RootMotion::FinalIK::IKSolverLimb::AxisDirection>*& axisDirections);
    // private UnityEngine.Vector3 GetModifiedBendNormal()
    // Offset: 0x1ADF824
    UnityEngine::Vector3 GetModifiedBendNormal();
    // protected override System.Void OnInitiateVirtual()
    // Offset: 0x1ADF088
    // Implemented from: RootMotion.FinalIK.IKSolverTrigonometric
    // Base method: System.Void IKSolverTrigonometric::OnInitiateVirtual()
    void OnInitiateVirtual();
    // protected override System.Void OnUpdateVirtual()
    // Offset: 0x1ADF6F8
    // Implemented from: RootMotion.FinalIK.IKSolverTrigonometric
    // Base method: System.Void IKSolverTrigonometric::OnUpdateVirtual()
    void OnUpdateVirtual();
    // protected override System.Void OnPostSolveVirtual()
    // Offset: 0x1AE02D4
    // Implemented from: RootMotion.FinalIK.IKSolverTrigonometric
    // Base method: System.Void IKSolverTrigonometric::OnPostSolveVirtual()
    void OnPostSolveVirtual();
    // public System.Void .ctor()
    // Offset: 0x1AE041C
    // Implemented from: RootMotion.FinalIK.IKSolverTrigonometric
    // Base method: System.Void IKSolverTrigonometric::.ctor()
    // Base method: System.Void IKSolver::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IKSolverLimb* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverLimb::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IKSolverLimb*, creationType>()));
    }
  }; // RootMotion.FinalIK.IKSolverLimb
  #pragma pack(pop)
  static check_size<sizeof(IKSolverLimb), 312 + sizeof(::Array<RootMotion::FinalIK::IKSolverLimb::AxisDirection>*)> __RootMotion_FinalIK_IKSolverLimbSizeCheck;
  static_assert(sizeof(IKSolverLimb) == 0x140);
}
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::IKSolverLimb*, "RootMotion.FinalIK", "IKSolverLimb");
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::IKSolverLimb::BendModifier, "RootMotion.FinalIK", "IKSolverLimb/BendModifier");
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::IKSolverLimb::AxisDirection, "RootMotion.FinalIK", "IKSolverLimb/AxisDirection");
