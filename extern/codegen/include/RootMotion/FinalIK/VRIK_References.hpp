// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.VRIK
#include "RootMotion/FinalIK/VRIK.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0xC0
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.VRIK/References
  // [] Offset: FFFFFFFF
  class VRIK::References : public ::Il2CppObject {
    public:
    // public UnityEngine.Transform root
    // Size: 0x8
    // Offset: 0x10
    UnityEngine::Transform* root;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform pelvis
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::Transform* pelvis;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform spine
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::Transform* spine;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0xD2A99C
    // public UnityEngine.Transform chest
    // Size: 0x8
    // Offset: 0x28
    UnityEngine::Transform* chest;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0xD2A9D4
    // public UnityEngine.Transform neck
    // Size: 0x8
    // Offset: 0x30
    UnityEngine::Transform* neck;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform head
    // Size: 0x8
    // Offset: 0x38
    UnityEngine::Transform* head;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0xD2AA0C
    // public UnityEngine.Transform leftShoulder
    // Size: 0x8
    // Offset: 0x40
    UnityEngine::Transform* leftShoulder;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform leftUpperArm
    // Size: 0x8
    // Offset: 0x48
    UnityEngine::Transform* leftUpperArm;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform leftForearm
    // Size: 0x8
    // Offset: 0x50
    UnityEngine::Transform* leftForearm;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform leftHand
    // Size: 0x8
    // Offset: 0x58
    UnityEngine::Transform* leftHand;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0xD2AA44
    // public UnityEngine.Transform rightShoulder
    // Size: 0x8
    // Offset: 0x60
    UnityEngine::Transform* rightShoulder;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform rightUpperArm
    // Size: 0x8
    // Offset: 0x68
    UnityEngine::Transform* rightUpperArm;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform rightForearm
    // Size: 0x8
    // Offset: 0x70
    UnityEngine::Transform* rightForearm;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform rightHand
    // Size: 0x8
    // Offset: 0x78
    UnityEngine::Transform* rightHand;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0xD2AA7C
    // public UnityEngine.Transform leftThigh
    // Size: 0x8
    // Offset: 0x80
    UnityEngine::Transform* leftThigh;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0xD2AAB4
    // public UnityEngine.Transform leftCalf
    // Size: 0x8
    // Offset: 0x88
    UnityEngine::Transform* leftCalf;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0xD2AAEC
    // public UnityEngine.Transform leftFoot
    // Size: 0x8
    // Offset: 0x90
    UnityEngine::Transform* leftFoot;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0xD2AB24
    // public UnityEngine.Transform leftToes
    // Size: 0x8
    // Offset: 0x98
    UnityEngine::Transform* leftToes;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0xD2AB5C
    // public UnityEngine.Transform rightThigh
    // Size: 0x8
    // Offset: 0xA0
    UnityEngine::Transform* rightThigh;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0xD2AB94
    // public UnityEngine.Transform rightCalf
    // Size: 0x8
    // Offset: 0xA8
    UnityEngine::Transform* rightCalf;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0xD2ABCC
    // public UnityEngine.Transform rightFoot
    // Size: 0x8
    // Offset: 0xB0
    UnityEngine::Transform* rightFoot;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0xD2AC04
    // public UnityEngine.Transform rightToes
    // Size: 0x8
    // Offset: 0xB8
    UnityEngine::Transform* rightToes;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // Creating value type constructor for type: References
    References(UnityEngine::Transform* root_ = {}, UnityEngine::Transform* pelvis_ = {}, UnityEngine::Transform* spine_ = {}, UnityEngine::Transform* chest_ = {}, UnityEngine::Transform* neck_ = {}, UnityEngine::Transform* head_ = {}, UnityEngine::Transform* leftShoulder_ = {}, UnityEngine::Transform* leftUpperArm_ = {}, UnityEngine::Transform* leftForearm_ = {}, UnityEngine::Transform* leftHand_ = {}, UnityEngine::Transform* rightShoulder_ = {}, UnityEngine::Transform* rightUpperArm_ = {}, UnityEngine::Transform* rightForearm_ = {}, UnityEngine::Transform* rightHand_ = {}, UnityEngine::Transform* leftThigh_ = {}, UnityEngine::Transform* leftCalf_ = {}, UnityEngine::Transform* leftFoot_ = {}, UnityEngine::Transform* leftToes_ = {}, UnityEngine::Transform* rightThigh_ = {}, UnityEngine::Transform* rightCalf_ = {}, UnityEngine::Transform* rightFoot_ = {}, UnityEngine::Transform* rightToes_ = {}) noexcept : root{root_}, pelvis{pelvis_}, spine{spine_}, chest{chest_}, neck{neck_}, head{head_}, leftShoulder{leftShoulder_}, leftUpperArm{leftUpperArm_}, leftForearm{leftForearm_}, leftHand{leftHand_}, rightShoulder{rightShoulder_}, rightUpperArm{rightUpperArm_}, rightForearm{rightForearm_}, rightHand{rightHand_}, leftThigh{leftThigh_}, leftCalf{leftCalf_}, leftFoot{leftFoot_}, leftToes{leftToes_}, rightThigh{rightThigh_}, rightCalf{rightCalf_}, rightFoot{rightFoot_}, rightToes{rightToes_} {}
    // public UnityEngine.Transform[] GetTransforms()
    // Offset: 0x196C6F4
    ::Array<UnityEngine::Transform*>* GetTransforms();
    // public System.Boolean get_isFilled()
    // Offset: 0x196C058
    bool get_isFilled();
    // public System.Boolean get_isEmpty()
    // Offset: 0x196BBDC
    bool get_isEmpty();
    // static public System.Boolean AutoDetectReferences(UnityEngine.Transform root, out RootMotion.FinalIK.VRIK/References references)
    // Offset: 0x196B6B8
    static bool AutoDetectReferences(UnityEngine::Transform* root, RootMotion::FinalIK::VRIK::References*& references);
    // public System.Void .ctor()
    // Offset: 0x196C6EC
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VRIK::References* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::VRIK::References::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VRIK::References*, creationType>()));
    }
  }; // RootMotion.FinalIK.VRIK/References
  #pragma pack(pop)
  static check_size<sizeof(VRIK::References), 184 + sizeof(UnityEngine::Transform*)> __RootMotion_FinalIK_VRIK_ReferencesSizeCheck;
  static_assert(sizeof(VRIK::References) == 0xC0);
}
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::VRIK::References*, "RootMotion.FinalIK", "VRIK/References");
