// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: RootMotion.Warning
#include "RootMotion/Warning.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: RootMotion::FinalIK
namespace RootMotion::FinalIK {
  // Forward declaring type: IKSolverFullBody
  class IKSolverFullBody;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0x86
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.IKConstraintBend
  // [] Offset: FFFFFFFF
  class IKConstraintBend : public ::Il2CppObject {
    public:
    // public UnityEngine.Transform bone1
    // Size: 0x8
    // Offset: 0x10
    UnityEngine::Transform* bone1;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform bone2
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::Transform* bone2;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform bone3
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::Transform* bone3;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform bendGoal
    // Size: 0x8
    // Offset: 0x28
    UnityEngine::Transform* bendGoal;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Vector3 direction
    // Size: 0xC
    // Offset: 0x30
    UnityEngine::Vector3 direction;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion rotationOffset
    // Size: 0x10
    // Offset: 0x3C
    UnityEngine::Quaternion rotationOffset;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // [RangeAttribute] Offset: 0xD28A10
    // public System.Single weight
    // Size: 0x4
    // Offset: 0x4C
    float weight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Vector3 defaultLocalDirection
    // Size: 0xC
    // Offset: 0x50
    UnityEngine::Vector3 defaultLocalDirection;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Vector3 defaultChildDirection
    // Size: 0xC
    // Offset: 0x5C
    UnityEngine::Vector3 defaultChildDirection;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // public System.Single clampF
    // Size: 0x4
    // Offset: 0x68
    float clampF;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 chainIndex1
    // Size: 0x4
    // Offset: 0x6C
    int chainIndex1;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 nodeIndex1
    // Size: 0x4
    // Offset: 0x70
    int nodeIndex1;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 chainIndex2
    // Size: 0x4
    // Offset: 0x74
    int chainIndex2;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 nodeIndex2
    // Size: 0x4
    // Offset: 0x78
    int nodeIndex2;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 chainIndex3
    // Size: 0x4
    // Offset: 0x7C
    int chainIndex3;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 nodeIndex3
    // Size: 0x4
    // Offset: 0x80
    int nodeIndex3;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xD28A28
    // private System.Boolean <initiated>k__BackingField
    // Size: 0x1
    // Offset: 0x84
    bool initiated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean limbOrientationsSet
    // Size: 0x1
    // Offset: 0x85
    bool limbOrientationsSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: IKConstraintBend
    IKConstraintBend(UnityEngine::Transform* bone1_ = {}, UnityEngine::Transform* bone2_ = {}, UnityEngine::Transform* bone3_ = {}, UnityEngine::Transform* bendGoal_ = {}, UnityEngine::Vector3 direction_ = {}, UnityEngine::Quaternion rotationOffset_ = {}, float weight_ = {}, UnityEngine::Vector3 defaultLocalDirection_ = {}, UnityEngine::Vector3 defaultChildDirection_ = {}, float clampF_ = {}, int chainIndex1_ = {}, int nodeIndex1_ = {}, int chainIndex2_ = {}, int nodeIndex2_ = {}, int chainIndex3_ = {}, int nodeIndex3_ = {}, bool initiated_ = {}, bool limbOrientationsSet_ = {}) noexcept : bone1{bone1_}, bone2{bone2_}, bone3{bone3_}, bendGoal{bendGoal_}, direction{direction_}, rotationOffset{rotationOffset_}, weight{weight_}, defaultLocalDirection{defaultLocalDirection_}, defaultChildDirection{defaultChildDirection_}, clampF{clampF_}, chainIndex1{chainIndex1_}, nodeIndex1{nodeIndex1_}, chainIndex2{chainIndex2_}, nodeIndex2{nodeIndex2_}, chainIndex3{chainIndex3_}, nodeIndex3{nodeIndex3_}, initiated{initiated_}, limbOrientationsSet{limbOrientationsSet_} {}
    // public System.Boolean IsValid(RootMotion.FinalIK.IKSolverFullBody solver, RootMotion.Warning/Logger logger)
    // Offset: 0x1AF9AC0
    bool IsValid(RootMotion::FinalIK::IKSolverFullBody* solver, RootMotion::Warning::Logger* logger);
    // public System.Boolean get_initiated()
    // Offset: 0x1AF9C88
    bool get_initiated();
    // private System.Void set_initiated(System.Boolean value)
    // Offset: 0x1AF9C90
    void set_initiated(bool value);
    // public System.Void .ctor(UnityEngine.Transform bone1, UnityEngine.Transform bone2, UnityEngine.Transform bone3)
    // Offset: 0x1AF9D20
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IKConstraintBend* New_ctor(UnityEngine::Transform* bone1, UnityEngine::Transform* bone2, UnityEngine::Transform* bone3) {
      static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKConstraintBend::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IKConstraintBend*, creationType>(bone1, bone2, bone3)));
    }
    // public System.Void SetBones(UnityEngine.Transform bone1, UnityEngine.Transform bone2, UnityEngine.Transform bone3)
    // Offset: 0x1AF9DD4
    void SetBones(UnityEngine::Transform* bone1, UnityEngine::Transform* bone2, UnityEngine::Transform* bone3);
    // public System.Void Initiate(RootMotion.FinalIK.IKSolverFullBody solver)
    // Offset: 0x1AF9E24
    void Initiate(RootMotion::FinalIK::IKSolverFullBody* solver);
    // public System.Void SetLimbOrientation(UnityEngine.Vector3 upper, UnityEngine.Vector3 lower, UnityEngine.Vector3 last)
    // Offset: 0x1AFA314
    void SetLimbOrientation(UnityEngine::Vector3 upper, UnityEngine::Vector3 lower, UnityEngine::Vector3 last);
    // public System.Void LimitBend(System.Single solverWeight, System.Single positionWeight)
    // Offset: 0x1AFA54C
    void LimitBend(float solverWeight, float positionWeight);
    // public UnityEngine.Vector3 GetDir(RootMotion.FinalIK.IKSolverFullBody solver)
    // Offset: 0x1AFA9E8
    UnityEngine::Vector3 GetDir(RootMotion::FinalIK::IKSolverFullBody* solver);
    // private UnityEngine.Vector3 OrthoToLimb(RootMotion.FinalIK.IKSolverFullBody solver, UnityEngine.Vector3 tangent)
    // Offset: 0x1AFA0D4
    UnityEngine::Vector3 OrthoToLimb(RootMotion::FinalIK::IKSolverFullBody* solver, UnityEngine::Vector3 tangent);
    // private UnityEngine.Vector3 OrthoToBone1(RootMotion.FinalIK.IKSolverFullBody solver, UnityEngine.Vector3 tangent)
    // Offset: 0x1AFA1F4
    UnityEngine::Vector3 OrthoToBone1(RootMotion::FinalIK::IKSolverFullBody* solver, UnityEngine::Vector3 tangent);
    // public System.Void .ctor()
    // Offset: 0x1AF9C9C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IKConstraintBend* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKConstraintBend::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IKConstraintBend*, creationType>()));
    }
  }; // RootMotion.FinalIK.IKConstraintBend
  #pragma pack(pop)
  static check_size<sizeof(IKConstraintBend), 133 + sizeof(bool)> __RootMotion_FinalIK_IKConstraintBendSizeCheck;
  static_assert(sizeof(IKConstraintBend) == 0x86);
}
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::IKConstraintBend*, "RootMotion.FinalIK", "IKConstraintBend");
