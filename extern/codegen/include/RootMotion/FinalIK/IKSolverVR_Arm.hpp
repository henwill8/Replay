// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverVR
#include "RootMotion/FinalIK/IKSolverVR.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/BodyPart
#include "RootMotion/FinalIK/IKSolverVR_BodyPart.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Autogenerated type: RootMotion.FinalIK.IKSolverVR/Arm
  class IKSolverVR::Arm : public RootMotion::FinalIK::IKSolverVR::BodyPart {
    public:
    // Nested type: RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode
    struct ShoulderRotationMode;
    // Autogenerated type: RootMotion.FinalIK.IKSolverVR/Arm/ShoulderRotationMode
    struct ShoulderRotationMode : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: ShoulderRotationMode
      constexpr ShoulderRotationMode(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public RootMotion.FinalIK.IKSolverVR/Arm/ShoulderRotationMode YawPitch
      static constexpr const int YawPitch = 0;
      // Get static field: static public RootMotion.FinalIK.IKSolverVR/Arm/ShoulderRotationMode YawPitch
      static RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode _get_YawPitch();
      // Set static field: static public RootMotion.FinalIK.IKSolverVR/Arm/ShoulderRotationMode YawPitch
      static void _set_YawPitch(RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode value);
      // static field const value: static public RootMotion.FinalIK.IKSolverVR/Arm/ShoulderRotationMode FromTo
      static constexpr const int FromTo = 1;
      // Get static field: static public RootMotion.FinalIK.IKSolverVR/Arm/ShoulderRotationMode FromTo
      static RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode _get_FromTo();
      // Set static field: static public RootMotion.FinalIK.IKSolverVR/Arm/ShoulderRotationMode FromTo
      static void _set_FromTo(RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode value);
    }; // RootMotion.FinalIK.IKSolverVR/Arm/ShoulderRotationMode
    // public UnityEngine.Transform target
    // Offset: 0x48
    UnityEngine::Transform* target;
    // public UnityEngine.Transform bendGoal
    // Offset: 0x50
    UnityEngine::Transform* bendGoal;
    // public System.Single positionWeight
    // Offset: 0x58
    float positionWeight;
    // public System.Single rotationWeight
    // Offset: 0x5C
    float rotationWeight;
    // public RootMotion.FinalIK.IKSolverVR/Arm/ShoulderRotationMode shoulderRotationMode
    // Offset: 0x60
    RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode shoulderRotationMode;
    // public System.Single shoulderRotationWeight
    // Offset: 0x64
    float shoulderRotationWeight;
    // public System.Single shoulderTwistWeight
    // Offset: 0x68
    float shoulderTwistWeight;
    // public System.Single bendGoalWeight
    // Offset: 0x6C
    float bendGoalWeight;
    // public System.Single swivelOffset
    // Offset: 0x70
    float swivelOffset;
    // public UnityEngine.Vector3 wristToPalmAxis
    // Offset: 0x74
    UnityEngine::Vector3 wristToPalmAxis;
    // public UnityEngine.Vector3 palmToThumbAxis
    // Offset: 0x80
    UnityEngine::Vector3 palmToThumbAxis;
    // public System.Single armLengthMlp
    // Offset: 0x8C
    float armLengthMlp;
    // public UnityEngine.AnimationCurve stretchCurve
    // Offset: 0x90
    UnityEngine::AnimationCurve* stretchCurve;
    // public UnityEngine.Vector3 IKPosition
    // Offset: 0x98
    UnityEngine::Vector3 IKPosition;
    // public UnityEngine.Quaternion IKRotation
    // Offset: 0xA4
    UnityEngine::Quaternion IKRotation;
    // public UnityEngine.Vector3 bendDirection
    // Offset: 0xB4
    UnityEngine::Vector3 bendDirection;
    // public UnityEngine.Vector3 handPositionOffset
    // Offset: 0xC0
    UnityEngine::Vector3 handPositionOffset;
    // private UnityEngine.Vector3 <position>k__BackingField
    // Offset: 0xCC
    UnityEngine::Vector3 position;
    // private UnityEngine.Quaternion <rotation>k__BackingField
    // Offset: 0xD8
    UnityEngine::Quaternion rotation;
    // private System.Boolean hasShoulder
    // Offset: 0xE8
    bool hasShoulder;
    // private UnityEngine.Vector3 chestForwardAxis
    // Offset: 0xEC
    UnityEngine::Vector3 chestForwardAxis;
    // private UnityEngine.Vector3 chestUpAxis
    // Offset: 0xF8
    UnityEngine::Vector3 chestUpAxis;
    // private UnityEngine.Quaternion chestRotation
    // Offset: 0x104
    UnityEngine::Quaternion chestRotation;
    // private UnityEngine.Vector3 chestForward
    // Offset: 0x114
    UnityEngine::Vector3 chestForward;
    // private UnityEngine.Vector3 chestUp
    // Offset: 0x120
    UnityEngine::Vector3 chestUp;
    // private UnityEngine.Quaternion forearmRelToUpperArm
    // Offset: 0x12C
    UnityEngine::Quaternion forearmRelToUpperArm;
    // private UnityEngine.Vector3 upperArmBendAxis
    // Offset: 0x13C
    UnityEngine::Vector3 upperArmBendAxis;
    // static field const value: static private System.Single yawOffsetAngle
    static constexpr const float yawOffsetAngle = 45;
    // Get static field: static private System.Single yawOffsetAngle
    static float _get_yawOffsetAngle();
    // Set static field: static private System.Single yawOffsetAngle
    static void _set_yawOffsetAngle(float value);
    // static field const value: static private System.Single pitchOffsetAngle
    static constexpr const float pitchOffsetAngle = -30;
    // Get static field: static private System.Single pitchOffsetAngle
    static float _get_pitchOffsetAngle();
    // Set static field: static private System.Single pitchOffsetAngle
    static void _set_pitchOffsetAngle(float value);
    // public UnityEngine.Vector3 get_position()
    // Offset: 0x143C4E8
    UnityEngine::Vector3 get_position();
    // private System.Void set_position(UnityEngine.Vector3 value)
    // Offset: 0x143C4F4
    void set_position(UnityEngine::Vector3 value);
    // public UnityEngine.Quaternion get_rotation()
    // Offset: 0x143C500
    UnityEngine::Quaternion get_rotation();
    // private System.Void set_rotation(UnityEngine.Quaternion value)
    // Offset: 0x143C50C
    void set_rotation(UnityEngine::Quaternion value);
    // private RootMotion.FinalIK.IKSolverVR/VirtualBone get_shoulder()
    // Offset: 0x143C518
    RootMotion::FinalIK::IKSolverVR::VirtualBone* get_shoulder();
    // private RootMotion.FinalIK.IKSolverVR/VirtualBone get_upperArm()
    // Offset: 0x143C54C
    RootMotion::FinalIK::IKSolverVR::VirtualBone* get_upperArm();
    // private RootMotion.FinalIK.IKSolverVR/VirtualBone get_forearm()
    // Offset: 0x143C58C
    RootMotion::FinalIK::IKSolverVR::VirtualBone* get_forearm();
    // private RootMotion.FinalIK.IKSolverVR/VirtualBone get_hand()
    // Offset: 0x143C5D8
    RootMotion::FinalIK::IKSolverVR::VirtualBone* get_hand();
    // private System.Void Stretching()
    // Offset: 0x143D2C4
    void Stretching();
    // public System.Void Solve(System.Boolean isLeft)
    // Offset: 0x143D6DC
    void Solve(bool isLeft);
    // private System.Single DamperValue(System.Single value, System.Single min, System.Single max, System.Single weight)
    // Offset: 0x143EC30
    float DamperValue(float value, float min, float max, float weight);
    // private UnityEngine.Vector3 GetBendNormal(UnityEngine.Vector3 dir)
    // Offset: 0x143EF3C
    UnityEngine::Vector3 GetBendNormal(UnityEngine::Vector3 dir);
    // private System.Void Visualize(RootMotion.FinalIK.IKSolverVR/VirtualBone bone1, RootMotion.FinalIK.IKSolverVR/VirtualBone bone2, RootMotion.FinalIK.IKSolverVR/VirtualBone bone3, UnityEngine.Color color)
    // Offset: 0x143FED0
    void Visualize(RootMotion::FinalIK::IKSolverVR::VirtualBone* bone1, RootMotion::FinalIK::IKSolverVR::VirtualBone* bone2, RootMotion::FinalIK::IKSolverVR::VirtualBone* bone3, UnityEngine::Color color);
    // protected override System.Void OnRead(UnityEngine.Vector3[] positions, UnityEngine.Quaternion[] rotations, System.Boolean hasChest, System.Boolean hasNeck, System.Boolean hasShoulders, System.Boolean hasToes, System.Boolean hasLegs, System.Int32 rootIndex, System.Int32 index)
    // Offset: 0x143C624
    // Implemented from: RootMotion.FinalIK.IKSolverVR/BodyPart
    // Base method: System.Void BodyPart::OnRead(UnityEngine.Vector3[] positions, UnityEngine.Quaternion[] rotations, System.Boolean hasChest, System.Boolean hasNeck, System.Boolean hasShoulders, System.Boolean hasToes, System.Boolean hasLegs, System.Int32 rootIndex, System.Int32 index)
    void OnRead(::Array<UnityEngine::Vector3>* positions, ::Array<UnityEngine::Quaternion>* rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index);
    // public override System.Void PreSolve()
    // Offset: 0x143D024
    // Implemented from: RootMotion.FinalIK.IKSolverVR/BodyPart
    // Base method: System.Void BodyPart::PreSolve()
    void PreSolve();
    // public override System.Void ApplyOffsets()
    // Offset: 0x143D218
    // Implemented from: RootMotion.FinalIK.IKSolverVR/BodyPart
    // Base method: System.Void BodyPart::ApplyOffsets()
    void ApplyOffsets();
    // public override System.Void ResetOffsets()
    // Offset: 0x143FC40
    // Implemented from: RootMotion.FinalIK.IKSolverVR/BodyPart
    // Base method: System.Void BodyPart::ResetOffsets()
    void ResetOffsets();
    // public override System.Void Write(ref UnityEngine.Vector3[] solvedPositions, ref UnityEngine.Quaternion[] solvedRotations)
    // Offset: 0x143FCB0
    // Implemented from: RootMotion.FinalIK.IKSolverVR/BodyPart
    // Base method: System.Void BodyPart::Write(ref UnityEngine.Vector3[] solvedPositions, ref UnityEngine.Quaternion[] solvedRotations)
    void Write(::Array<UnityEngine::Vector3>*& solvedPositions, ::Array<UnityEngine::Quaternion>*& solvedRotations);
    // public System.Void .ctor()
    // Offset: 0x143FFF8
    // Implemented from: RootMotion.FinalIK.IKSolverVR/BodyPart
    // Base method: System.Void BodyPart::.ctor()
    // Base method: System.Void Object::.ctor()
    static IKSolverVR::Arm* New_ctor();
  }; // RootMotion.FinalIK.IKSolverVR/Arm
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::IKSolverVR::Arm*, "RootMotion.FinalIK", "IKSolverVR/Arm");
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::IKSolverVR::Arm::ShoulderRotationMode, "RootMotion.FinalIK", "IKSolverVR/Arm/ShoulderRotationMode");
#pragma pack(pop)
