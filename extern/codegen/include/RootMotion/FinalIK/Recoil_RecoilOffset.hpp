// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.Recoil
#include "RootMotion/FinalIK/Recoil.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: RootMotion::FinalIK
namespace RootMotion::FinalIK {
  // Forward declaring type: IKSolverFullBodyBiped
  class IKSolverFullBodyBiped;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Quaternion
  struct Quaternion;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.Recoil/RecoilOffset
  // [] Offset: FFFFFFFF
  class Recoil::RecoilOffset : public ::Il2CppObject {
    public:
    // Nested type: RootMotion::FinalIK::Recoil::RecoilOffset::EffectorLink
    class EffectorLink;
    // [TooltipAttribute] Offset: 0xD2D3E4
    // public UnityEngine.Vector3 offset
    // Size: 0xC
    // Offset: 0x10
    UnityEngine::Vector3 offset;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [TooltipAttribute] Offset: 0xD2D41C
    // [RangeAttribute] Offset: 0xD2D41C
    // public System.Single additivity
    // Size: 0x4
    // Offset: 0x1C
    float additivity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xD2D470
    // public System.Single maxAdditiveOffsetMag
    // Size: 0x4
    // Offset: 0x20
    float maxAdditiveOffsetMag;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: maxAdditiveOffsetMag and: effectorLinks
    char __padding2[0x4] = {};
    // [TooltipAttribute] Offset: 0xD2D4A8
    // public RootMotion.FinalIK.Recoil/RecoilOffset/EffectorLink[] effectorLinks
    // Size: 0x8
    // Offset: 0x28
    ::Array<RootMotion::FinalIK::Recoil::RecoilOffset::EffectorLink*>* effectorLinks;
    // Field size check
    static_assert(sizeof(::Array<RootMotion::FinalIK::Recoil::RecoilOffset::EffectorLink*>*) == 0x8);
    // private UnityEngine.Vector3 additiveOffset
    // Size: 0xC
    // Offset: 0x30
    UnityEngine::Vector3 additiveOffset;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 lastOffset
    // Size: 0xC
    // Offset: 0x3C
    UnityEngine::Vector3 lastOffset;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // Creating value type constructor for type: RecoilOffset
    RecoilOffset(UnityEngine::Vector3 offset_ = {}, float additivity_ = {}, float maxAdditiveOffsetMag_ = {}, ::Array<RootMotion::FinalIK::Recoil::RecoilOffset::EffectorLink*>* effectorLinks_ = {}, UnityEngine::Vector3 additiveOffset_ = {}, UnityEngine::Vector3 lastOffset_ = {}) noexcept : offset{offset_}, additivity{additivity_}, maxAdditiveOffsetMag{maxAdditiveOffsetMag_}, effectorLinks{effectorLinks_}, additiveOffset{additiveOffset_}, lastOffset{lastOffset_} {}
    // public System.Void Start()
    // Offset: 0x1965530
    void Start();
    // public System.Void Apply(RootMotion.FinalIK.IKSolverFullBodyBiped solver, UnityEngine.Quaternion rotation, System.Single masterWeight, System.Single length, System.Single timeLeft)
    // Offset: 0x19660E4
    void Apply(RootMotion::FinalIK::IKSolverFullBodyBiped* solver, UnityEngine::Quaternion rotation, float masterWeight, float length, float timeLeft);
    // public System.Void .ctor()
    // Offset: 0x196682C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Recoil::RecoilOffset* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::Recoil::RecoilOffset::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Recoil::RecoilOffset*, creationType>()));
    }
  }; // RootMotion.FinalIK.Recoil/RecoilOffset
  #pragma pack(pop)
  static check_size<sizeof(Recoil::RecoilOffset), 60 + sizeof(UnityEngine::Vector3)> __RootMotion_FinalIK_Recoil_RecoilOffsetSizeCheck;
  static_assert(sizeof(Recoil::RecoilOffset) == 0x48);
}
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::Recoil::RecoilOffset*, "RootMotion.FinalIK", "Recoil/RecoilOffset");
