// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverVR
#include "RootMotion/FinalIK/IKSolverVR.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/BodyPart
#include "RootMotion/FinalIK/IKSolverVR_BodyPart.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Autogenerated type: RootMotion.FinalIK.IKSolverVR/Spine
  class IKSolverVR::Spine : public RootMotion::FinalIK::IKSolverVR::BodyPart {
    public:
    // public UnityEngine.Transform headTarget
    // Offset: 0x48
    UnityEngine::Transform* headTarget;
    // public UnityEngine.Transform pelvisTarget
    // Offset: 0x50
    UnityEngine::Transform* pelvisTarget;
    // public System.Single positionWeight
    // Offset: 0x58
    float positionWeight;
    // public System.Single rotationWeight
    // Offset: 0x5C
    float rotationWeight;
    // public System.Single pelvisPositionWeight
    // Offset: 0x60
    float pelvisPositionWeight;
    // public System.Single pelvisRotationWeight
    // Offset: 0x64
    float pelvisRotationWeight;
    // public UnityEngine.Transform chestGoal
    // Offset: 0x68
    UnityEngine::Transform* chestGoal;
    // public System.Single chestGoalWeight
    // Offset: 0x70
    float chestGoalWeight;
    // public System.Single minHeadHeight
    // Offset: 0x74
    float minHeadHeight;
    // public System.Single bodyPosStiffness
    // Offset: 0x78
    float bodyPosStiffness;
    // public System.Single bodyRotStiffness
    // Offset: 0x7C
    float bodyRotStiffness;
    // public System.Single neckStiffness
    // Offset: 0x80
    float neckStiffness;
    // public System.Single rotateChestByHands
    // Offset: 0x84
    float rotateChestByHands;
    // public System.Single chestClampWeight
    // Offset: 0x88
    float chestClampWeight;
    // public System.Single headClampWeight
    // Offset: 0x8C
    float headClampWeight;
    // public System.Single moveBodyBackWhenCrouching
    // Offset: 0x90
    float moveBodyBackWhenCrouching;
    // public System.Single maintainPelvisPosition
    // Offset: 0x94
    float maintainPelvisPosition;
    // public System.Single maxRootAngle
    // Offset: 0x98
    float maxRootAngle;
    // public System.Single rootHeadingOffset
    // Offset: 0x9C
    float rootHeadingOffset;
    // public UnityEngine.Vector3 IKPositionHead
    // Offset: 0xA0
    UnityEngine::Vector3 IKPositionHead;
    // public UnityEngine.Quaternion IKRotationHead
    // Offset: 0xAC
    UnityEngine::Quaternion IKRotationHead;
    // public UnityEngine.Vector3 IKPositionPelvis
    // Offset: 0xBC
    UnityEngine::Vector3 IKPositionPelvis;
    // public UnityEngine.Quaternion IKRotationPelvis
    // Offset: 0xC8
    UnityEngine::Quaternion IKRotationPelvis;
    // public UnityEngine.Vector3 goalPositionChest
    // Offset: 0xD8
    UnityEngine::Vector3 goalPositionChest;
    // public UnityEngine.Vector3 pelvisPositionOffset
    // Offset: 0xE4
    UnityEngine::Vector3 pelvisPositionOffset;
    // public UnityEngine.Vector3 chestPositionOffset
    // Offset: 0xF0
    UnityEngine::Vector3 chestPositionOffset;
    // public UnityEngine.Vector3 headPositionOffset
    // Offset: 0xFC
    UnityEngine::Vector3 headPositionOffset;
    // public UnityEngine.Quaternion pelvisRotationOffset
    // Offset: 0x108
    UnityEngine::Quaternion pelvisRotationOffset;
    // public UnityEngine.Quaternion chestRotationOffset
    // Offset: 0x118
    UnityEngine::Quaternion chestRotationOffset;
    // public UnityEngine.Quaternion headRotationOffset
    // Offset: 0x128
    UnityEngine::Quaternion headRotationOffset;
    // public UnityEngine.Vector3 faceDirection
    // Offset: 0x138
    UnityEngine::Vector3 faceDirection;
    // public UnityEngine.Vector3 locomotionHeadPositionOffset
    // Offset: 0x144
    UnityEngine::Vector3 locomotionHeadPositionOffset;
    // public UnityEngine.Vector3 headPosition
    // Offset: 0x150
    UnityEngine::Vector3 headPosition;
    // private UnityEngine.Quaternion <anchorRotation>k__BackingField
    // Offset: 0x15C
    UnityEngine::Quaternion anchorRotation;
    // private UnityEngine.Quaternion <anchorRelativeToHead>k__BackingField
    // Offset: 0x16C
    UnityEngine::Quaternion anchorRelativeToHead;
    // private UnityEngine.Quaternion headRotation
    // Offset: 0x17C
    UnityEngine::Quaternion headRotation;
    // private UnityEngine.Quaternion pelvisRotation
    // Offset: 0x18C
    UnityEngine::Quaternion pelvisRotation;
    // private UnityEngine.Quaternion anchorRelativeToPelvis
    // Offset: 0x19C
    UnityEngine::Quaternion anchorRelativeToPelvis;
    // private UnityEngine.Quaternion pelvisRelativeRotation
    // Offset: 0x1AC
    UnityEngine::Quaternion pelvisRelativeRotation;
    // private UnityEngine.Quaternion chestRelativeRotation
    // Offset: 0x1BC
    UnityEngine::Quaternion chestRelativeRotation;
    // private UnityEngine.Vector3 headDeltaPosition
    // Offset: 0x1CC
    UnityEngine::Vector3 headDeltaPosition;
    // private UnityEngine.Quaternion pelvisDeltaRotation
    // Offset: 0x1D8
    UnityEngine::Quaternion pelvisDeltaRotation;
    // private UnityEngine.Quaternion chestTargetRotation
    // Offset: 0x1E8
    UnityEngine::Quaternion chestTargetRotation;
    // private System.Int32 pelvisIndex
    // Offset: 0x1F8
    int pelvisIndex;
    // private System.Int32 spineIndex
    // Offset: 0x1FC
    int spineIndex;
    // private System.Int32 chestIndex
    // Offset: 0x200
    int chestIndex;
    // private System.Int32 neckIndex
    // Offset: 0x204
    int neckIndex;
    // private System.Int32 headIndex
    // Offset: 0x208
    int headIndex;
    // private System.Single length
    // Offset: 0x20C
    float length;
    // private System.Boolean hasChest
    // Offset: 0x210
    bool hasChest;
    // private System.Boolean hasNeck
    // Offset: 0x211
    bool hasNeck;
    // private System.Boolean hasLegs
    // Offset: 0x212
    bool hasLegs;
    // private System.Single headHeight
    // Offset: 0x214
    float headHeight;
    // private System.Single sizeMlp
    // Offset: 0x218
    float sizeMlp;
    // private UnityEngine.Vector3 chestForward
    // Offset: 0x21C
    UnityEngine::Vector3 chestForward;
    // public RootMotion.FinalIK.IKSolverVR/VirtualBone get_pelvis()
    // Offset: 0x1445D2C
    RootMotion::FinalIK::IKSolverVR::VirtualBone* get_pelvis();
    // public RootMotion.FinalIK.IKSolverVR/VirtualBone get_firstSpineBone()
    // Offset: 0x14463B0
    RootMotion::FinalIK::IKSolverVR::VirtualBone* get_firstSpineBone();
    // public RootMotion.FinalIK.IKSolverVR/VirtualBone get_chest()
    // Offset: 0x14463F0
    RootMotion::FinalIK::IKSolverVR::VirtualBone* get_chest();
    // private RootMotion.FinalIK.IKSolverVR/VirtualBone get_neck()
    // Offset: 0x1446444
    RootMotion::FinalIK::IKSolverVR::VirtualBone* get_neck();
    // public RootMotion.FinalIK.IKSolverVR/VirtualBone get_head()
    // Offset: 0x1445D6C
    RootMotion::FinalIK::IKSolverVR::VirtualBone* get_head();
    // public UnityEngine.Quaternion get_anchorRotation()
    // Offset: 0x1446484
    UnityEngine::Quaternion get_anchorRotation();
    // private System.Void set_anchorRotation(UnityEngine.Quaternion value)
    // Offset: 0x1446498
    void set_anchorRotation(UnityEngine::Quaternion value);
    // public UnityEngine.Quaternion get_anchorRelativeToHead()
    // Offset: 0x14464AC
    UnityEngine::Quaternion get_anchorRelativeToHead();
    // private System.Void set_anchorRelativeToHead(UnityEngine.Quaternion value)
    // Offset: 0x14464C0
    void set_anchorRelativeToHead(UnityEngine::Quaternion value);
    // private System.Void CalculateChestTargetRotation(RootMotion.FinalIK.IKSolverVR/VirtualBone rootBone, RootMotion.FinalIK.IKSolverVR/Arm[] arms)
    // Offset: 0x1447868
    void CalculateChestTargetRotation(RootMotion::FinalIK::IKSolverVR::VirtualBone* rootBone, ::Array<RootMotion::FinalIK::IKSolverVR::Arm*>* arms);
    // public System.Void Solve(RootMotion.FinalIK.IKSolverVR/VirtualBone rootBone, RootMotion.FinalIK.IKSolverVR/Leg[] legs, RootMotion.FinalIK.IKSolverVR/Arm[] arms)
    // Offset: 0x1447E28
    void Solve(RootMotion::FinalIK::IKSolverVR::VirtualBone* rootBone, ::Array<RootMotion::FinalIK::IKSolverVR::Leg*>* legs, ::Array<RootMotion::FinalIK::IKSolverVR::Arm*>* arms);
    // private System.Void FABRIKPass(UnityEngine.Vector3 animatedPelvisPos, UnityEngine.Vector3 rootUp, System.Single weight)
    // Offset: 0x1448868
    void FABRIKPass(UnityEngine::Vector3 animatedPelvisPos, UnityEngine::Vector3 rootUp, float weight);
    // private System.Void SolvePelvis()
    // Offset: 0x1449094
    void SolvePelvis();
    // private System.Void AdjustChestByHands(ref UnityEngine.Quaternion chestTargetRotation, RootMotion.FinalIK.IKSolverVR/Arm[] arms)
    // Offset: 0x1447A98
    void AdjustChestByHands(UnityEngine::Quaternion& chestTargetRotation, ::Array<RootMotion::FinalIK::IKSolverVR::Arm*>* arms);
    // public System.Void InverseTranslateToHead(RootMotion.FinalIK.IKSolverVR/Leg[] legs, System.Boolean limited, System.Boolean useCurrentLegMag, UnityEngine.Vector3 offset, System.Single w)
    // Offset: 0x1448CDC
    void InverseTranslateToHead(::Array<RootMotion::FinalIK::IKSolverVR::Leg*>* legs, bool limited, bool useCurrentLegMag, UnityEngine::Vector3 offset, float w);
    // private System.Void TranslatePelvis(RootMotion.FinalIK.IKSolverVR/Leg[] legs, UnityEngine.Vector3 deltaPosition, UnityEngine.Quaternion deltaRotation)
    // Offset: 0x144844C
    void TranslatePelvis(::Array<RootMotion::FinalIK::IKSolverVR::Leg*>* legs, UnityEngine::Vector3 deltaPosition, UnityEngine::Quaternion deltaRotation);
    // private UnityEngine.Vector3 LimitPelvisPosition(RootMotion.FinalIK.IKSolverVR/Leg[] legs, UnityEngine.Vector3 pelvisPosition, System.Boolean useCurrentLegMag, System.Int32 it)
    // Offset: 0x1449B54
    UnityEngine::Vector3 LimitPelvisPosition(::Array<RootMotion::FinalIK::IKSolverVR::Leg*>* legs, UnityEngine::Vector3 pelvisPosition, bool useCurrentLegMag, int it);
    // private System.Void Bend(RootMotion.FinalIK.IKSolverVR/VirtualBone[] bones, System.Int32 firstIndex, System.Int32 lastIndex, UnityEngine.Quaternion targetRotation, System.Single clampWeight, System.Boolean uniformWeight, System.Single w)
    // Offset: 0x1448E48
    void Bend(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, int firstIndex, int lastIndex, UnityEngine::Quaternion targetRotation, float clampWeight, bool uniformWeight, float w);
    // private System.Void Bend(RootMotion.FinalIK.IKSolverVR/VirtualBone[] bones, System.Int32 firstIndex, System.Int32 lastIndex, UnityEngine.Quaternion targetRotation, UnityEngine.Quaternion rotationOffset, System.Single clampWeight, System.Boolean uniformWeight, System.Single w)
    // Offset: 0x1448A28
    void Bend(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, int firstIndex, int lastIndex, UnityEngine::Quaternion targetRotation, UnityEngine::Quaternion rotationOffset, float clampWeight, bool uniformWeight, float w);
    // protected override System.Void OnRead(UnityEngine.Vector3[] positions, UnityEngine.Quaternion[] rotations, System.Boolean hasChest, System.Boolean hasNeck, System.Boolean hasShoulders, System.Boolean hasToes, System.Boolean hasLegs, System.Int32 rootIndex, System.Int32 index)
    // Offset: 0x14464D4
    // Implemented from: RootMotion.FinalIK.IKSolverVR/BodyPart
    // Base method: System.Void BodyPart::OnRead(UnityEngine.Vector3[] positions, UnityEngine.Quaternion[] rotations, System.Boolean hasChest, System.Boolean hasNeck, System.Boolean hasShoulders, System.Boolean hasToes, System.Boolean hasLegs, System.Int32 rootIndex, System.Int32 index)
    void OnRead(::Array<UnityEngine::Vector3>* positions, ::Array<UnityEngine::Quaternion>* rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index);
    // public override System.Void PreSolve()
    // Offset: 0x1446FE0
    // Implemented from: RootMotion.FinalIK.IKSolverVR/BodyPart
    // Base method: System.Void BodyPart::PreSolve()
    void PreSolve();
    // public override System.Void ApplyOffsets()
    // Offset: 0x14471F0
    // Implemented from: RootMotion.FinalIK.IKSolverVR/BodyPart
    // Base method: System.Void BodyPart::ApplyOffsets()
    void ApplyOffsets();
    // public override System.Void Write(ref UnityEngine.Vector3[] solvedPositions, ref UnityEngine.Quaternion[] solvedRotations)
    // Offset: 0x144987C
    // Implemented from: RootMotion.FinalIK.IKSolverVR/BodyPart
    // Base method: System.Void BodyPart::Write(ref UnityEngine.Vector3[] solvedPositions, ref UnityEngine.Quaternion[] solvedRotations)
    void Write(::Array<UnityEngine::Vector3>*& solvedPositions, ::Array<UnityEngine::Quaternion>*& solvedRotations);
    // public override System.Void ResetOffsets()
    // Offset: 0x1449A58
    // Implemented from: RootMotion.FinalIK.IKSolverVR/BodyPart
    // Base method: System.Void BodyPart::ResetOffsets()
    void ResetOffsets();
    // public System.Void .ctor()
    // Offset: 0x1449E7C
    // Implemented from: RootMotion.FinalIK.IKSolverVR/BodyPart
    // Base method: System.Void BodyPart::.ctor()
    // Base method: System.Void Object::.ctor()
    static IKSolverVR::Spine* New_ctor();
  }; // RootMotion.FinalIK.IKSolverVR/Spine
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::IKSolverVR::Spine*, "RootMotion.FinalIK", "IKSolverVR/Spine");
#pragma pack(pop)
