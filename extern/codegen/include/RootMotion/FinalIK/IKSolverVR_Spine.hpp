// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RootMotion.FinalIK.IKSolverVR
#include "RootMotion/FinalIK/IKSolverVR.hpp"
// Including type: RootMotion.FinalIK.IKSolverVR/BodyPart
#include "RootMotion/FinalIK/IKSolverVR_BodyPart.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: RootMotion.FinalIK
namespace RootMotion::FinalIK {
  // Size: 0x228
  #pragma pack(push, 1)
  // Autogenerated type: RootMotion.FinalIK.IKSolverVR/Spine
  // [] Offset: FFFFFFFF
  class IKSolverVR::Spine : public RootMotion::FinalIK::IKSolverVR::BodyPart {
    public:
    // [TooltipAttribute] Offset: 0xD2B960
    // public UnityEngine.Transform headTarget
    // Size: 0x8
    // Offset: 0x48
    UnityEngine::Transform* headTarget;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0xD2B998
    // public UnityEngine.Transform pelvisTarget
    // Size: 0x8
    // Offset: 0x50
    UnityEngine::Transform* pelvisTarget;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0xD2B9D0
    // [RangeAttribute] Offset: 0xD2B9D0
    // public System.Single positionWeight
    // Size: 0x4
    // Offset: 0x58
    float positionWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xD2BA24
    // [RangeAttribute] Offset: 0xD2BA24
    // public System.Single rotationWeight
    // Size: 0x4
    // Offset: 0x5C
    float rotationWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xD2BA78
    // [RangeAttribute] Offset: 0xD2BA78
    // public System.Single pelvisPositionWeight
    // Size: 0x4
    // Offset: 0x60
    float pelvisPositionWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xD2BACC
    // [RangeAttribute] Offset: 0xD2BACC
    // public System.Single pelvisRotationWeight
    // Size: 0x4
    // Offset: 0x64
    float pelvisRotationWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xD2BB20
    // public UnityEngine.Transform chestGoal
    // Size: 0x8
    // Offset: 0x68
    UnityEngine::Transform* chestGoal;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // [TooltipAttribute] Offset: 0xD2BB58
    // [RangeAttribute] Offset: 0xD2BB58
    // public System.Single chestGoalWeight
    // Size: 0x4
    // Offset: 0x70
    float chestGoalWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xD2BBAC
    // public System.Single minHeadHeight
    // Size: 0x4
    // Offset: 0x74
    float minHeadHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xD2BBE4
    // [RangeAttribute] Offset: 0xD2BBE4
    // public System.Single bodyPosStiffness
    // Size: 0x4
    // Offset: 0x78
    float bodyPosStiffness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xD2BC38
    // [RangeAttribute] Offset: 0xD2BC38
    // public System.Single bodyRotStiffness
    // Size: 0x4
    // Offset: 0x7C
    float bodyRotStiffness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xD2BC8C
    // [FormerlySerializedAsAttribute] Offset: 0xD2BC8C
    // [RangeAttribute] Offset: 0xD2BC8C
    // public System.Single neckStiffness
    // Size: 0x4
    // Offset: 0x80
    float neckStiffness;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xD2BD04
    // [RangeAttribute] Offset: 0xD2BD04
    // public System.Single rotateChestByHands
    // Size: 0x4
    // Offset: 0x84
    float rotateChestByHands;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xD2BD58
    // [RangeAttribute] Offset: 0xD2BD58
    // public System.Single chestClampWeight
    // Size: 0x4
    // Offset: 0x88
    float chestClampWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xD2BDAC
    // [RangeAttribute] Offset: 0xD2BDAC
    // public System.Single headClampWeight
    // Size: 0x4
    // Offset: 0x8C
    float headClampWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xD2BE00
    // public System.Single moveBodyBackWhenCrouching
    // Size: 0x4
    // Offset: 0x90
    float moveBodyBackWhenCrouching;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xD2BE38
    // [RangeAttribute] Offset: 0xD2BE38
    // public System.Single maintainPelvisPosition
    // Size: 0x4
    // Offset: 0x94
    float maintainPelvisPosition;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xD2BE8C
    // [RangeAttribute] Offset: 0xD2BE8C
    // public System.Single maxRootAngle
    // Size: 0x4
    // Offset: 0x98
    float maxRootAngle;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xD2BEE4
    // [RangeAttribute] Offset: 0xD2BEE4
    // public System.Single rootHeadingOffset
    // Size: 0x4
    // Offset: 0x9C
    float rootHeadingOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [HideInInspector] Offset: 0xD2BF40
    // public UnityEngine.Vector3 IKPositionHead
    // Size: 0xC
    // Offset: 0xA0
    UnityEngine::Vector3 IKPositionHead;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [HideInInspector] Offset: 0xD2BF50
    // public UnityEngine.Quaternion IKRotationHead
    // Size: 0x10
    // Offset: 0xAC
    UnityEngine::Quaternion IKRotationHead;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // [HideInInspector] Offset: 0xD2BF60
    // public UnityEngine.Vector3 IKPositionPelvis
    // Size: 0xC
    // Offset: 0xBC
    UnityEngine::Vector3 IKPositionPelvis;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [HideInInspector] Offset: 0xD2BF70
    // public UnityEngine.Quaternion IKRotationPelvis
    // Size: 0x10
    // Offset: 0xC8
    UnityEngine::Quaternion IKRotationPelvis;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // [HideInInspector] Offset: 0xD2BF80
    // public UnityEngine.Vector3 goalPositionChest
    // Size: 0xC
    // Offset: 0xD8
    UnityEngine::Vector3 goalPositionChest;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [HideInInspector] Offset: 0xD2BF90
    // public UnityEngine.Vector3 pelvisPositionOffset
    // Size: 0xC
    // Offset: 0xE4
    UnityEngine::Vector3 pelvisPositionOffset;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [HideInInspector] Offset: 0xD2BFA0
    // public UnityEngine.Vector3 chestPositionOffset
    // Size: 0xC
    // Offset: 0xF0
    UnityEngine::Vector3 chestPositionOffset;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [HideInInspector] Offset: 0xD2BFB0
    // public UnityEngine.Vector3 headPositionOffset
    // Size: 0xC
    // Offset: 0xFC
    UnityEngine::Vector3 headPositionOffset;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [HideInInspector] Offset: 0xD2BFC0
    // public UnityEngine.Quaternion pelvisRotationOffset
    // Size: 0x10
    // Offset: 0x108
    UnityEngine::Quaternion pelvisRotationOffset;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // [HideInInspector] Offset: 0xD2BFD0
    // public UnityEngine.Quaternion chestRotationOffset
    // Size: 0x10
    // Offset: 0x118
    UnityEngine::Quaternion chestRotationOffset;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // [HideInInspector] Offset: 0xD2BFE0
    // public UnityEngine.Quaternion headRotationOffset
    // Size: 0x10
    // Offset: 0x128
    UnityEngine::Quaternion headRotationOffset;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // [HideInInspector] Offset: 0xD2BFF0
    // public UnityEngine.Vector3 faceDirection
    // Size: 0xC
    // Offset: 0x138
    UnityEngine::Vector3 faceDirection;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [HideInInspector] Offset: 0xD2C000
    // public UnityEngine.Vector3 locomotionHeadPositionOffset
    // Size: 0xC
    // Offset: 0x144
    UnityEngine::Vector3 locomotionHeadPositionOffset;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [HideInInspector] Offset: 0xD2C010
    // public UnityEngine.Vector3 headPosition
    // Size: 0xC
    // Offset: 0x150
    UnityEngine::Vector3 headPosition;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [CompilerGeneratedAttribute] Offset: 0xD2C020
    // private UnityEngine.Quaternion <anchorRotation>k__BackingField
    // Size: 0x10
    // Offset: 0x15C
    UnityEngine::Quaternion anchorRotation;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // [CompilerGeneratedAttribute] Offset: 0xD2C030
    // private UnityEngine.Quaternion <anchorRelativeToHead>k__BackingField
    // Size: 0x10
    // Offset: 0x16C
    UnityEngine::Quaternion anchorRelativeToHead;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion headRotation
    // Size: 0x10
    // Offset: 0x17C
    UnityEngine::Quaternion headRotation;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion pelvisRotation
    // Size: 0x10
    // Offset: 0x18C
    UnityEngine::Quaternion pelvisRotation;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion anchorRelativeToPelvis
    // Size: 0x10
    // Offset: 0x19C
    UnityEngine::Quaternion anchorRelativeToPelvis;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion pelvisRelativeRotation
    // Size: 0x10
    // Offset: 0x1AC
    UnityEngine::Quaternion pelvisRelativeRotation;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion chestRelativeRotation
    // Size: 0x10
    // Offset: 0x1BC
    UnityEngine::Quaternion chestRelativeRotation;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Vector3 headDeltaPosition
    // Size: 0xC
    // Offset: 0x1CC
    UnityEngine::Vector3 headDeltaPosition;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Quaternion pelvisDeltaRotation
    // Size: 0x10
    // Offset: 0x1D8
    UnityEngine::Quaternion pelvisDeltaRotation;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion chestTargetRotation
    // Size: 0x10
    // Offset: 0x1E8
    UnityEngine::Quaternion chestTargetRotation;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // private System.Int32 pelvisIndex
    // Size: 0x4
    // Offset: 0x1F8
    int pelvisIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 spineIndex
    // Size: 0x4
    // Offset: 0x1FC
    int spineIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 chestIndex
    // Size: 0x4
    // Offset: 0x200
    int chestIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 neckIndex
    // Size: 0x4
    // Offset: 0x204
    int neckIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 headIndex
    // Size: 0x4
    // Offset: 0x208
    int headIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single length
    // Size: 0x4
    // Offset: 0x20C
    float length;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean hasChest
    // Size: 0x1
    // Offset: 0x210
    bool hasChest;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean hasNeck
    // Size: 0x1
    // Offset: 0x211
    bool hasNeck;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean hasLegs
    // Size: 0x1
    // Offset: 0x212
    bool hasLegs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasLegs and: headHeight
    char __padding51[0x1] = {};
    // private System.Single headHeight
    // Size: 0x4
    // Offset: 0x214
    float headHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single sizeMlp
    // Size: 0x4
    // Offset: 0x218
    float sizeMlp;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 chestForward
    // Size: 0xC
    // Offset: 0x21C
    UnityEngine::Vector3 chestForward;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // Creating value type constructor for type: Spine
    Spine(UnityEngine::Transform* headTarget_ = {}, UnityEngine::Transform* pelvisTarget_ = {}, float positionWeight_ = {}, float rotationWeight_ = {}, float pelvisPositionWeight_ = {}, float pelvisRotationWeight_ = {}, UnityEngine::Transform* chestGoal_ = {}, float chestGoalWeight_ = {}, float minHeadHeight_ = {}, float bodyPosStiffness_ = {}, float bodyRotStiffness_ = {}, float neckStiffness_ = {}, float rotateChestByHands_ = {}, float chestClampWeight_ = {}, float headClampWeight_ = {}, float moveBodyBackWhenCrouching_ = {}, float maintainPelvisPosition_ = {}, float maxRootAngle_ = {}, float rootHeadingOffset_ = {}, UnityEngine::Vector3 IKPositionHead_ = {}, UnityEngine::Quaternion IKRotationHead_ = {}, UnityEngine::Vector3 IKPositionPelvis_ = {}, UnityEngine::Quaternion IKRotationPelvis_ = {}, UnityEngine::Vector3 goalPositionChest_ = {}, UnityEngine::Vector3 pelvisPositionOffset_ = {}, UnityEngine::Vector3 chestPositionOffset_ = {}, UnityEngine::Vector3 headPositionOffset_ = {}, UnityEngine::Quaternion pelvisRotationOffset_ = {}, UnityEngine::Quaternion chestRotationOffset_ = {}, UnityEngine::Quaternion headRotationOffset_ = {}, UnityEngine::Vector3 faceDirection_ = {}, UnityEngine::Vector3 locomotionHeadPositionOffset_ = {}, UnityEngine::Vector3 headPosition_ = {}, UnityEngine::Quaternion anchorRotation_ = {}, UnityEngine::Quaternion anchorRelativeToHead_ = {}, UnityEngine::Quaternion headRotation_ = {}, UnityEngine::Quaternion pelvisRotation_ = {}, UnityEngine::Quaternion anchorRelativeToPelvis_ = {}, UnityEngine::Quaternion pelvisRelativeRotation_ = {}, UnityEngine::Quaternion chestRelativeRotation_ = {}, UnityEngine::Vector3 headDeltaPosition_ = {}, UnityEngine::Quaternion pelvisDeltaRotation_ = {}, UnityEngine::Quaternion chestTargetRotation_ = {}, int pelvisIndex_ = {}, int spineIndex_ = {}, int chestIndex_ = {}, int neckIndex_ = {}, int headIndex_ = {}, float length_ = {}, bool hasChest_ = {}, bool hasNeck_ = {}, bool hasLegs_ = {}, float headHeight_ = {}, float sizeMlp_ = {}, UnityEngine::Vector3 chestForward_ = {}) noexcept : headTarget{headTarget_}, pelvisTarget{pelvisTarget_}, positionWeight{positionWeight_}, rotationWeight{rotationWeight_}, pelvisPositionWeight{pelvisPositionWeight_}, pelvisRotationWeight{pelvisRotationWeight_}, chestGoal{chestGoal_}, chestGoalWeight{chestGoalWeight_}, minHeadHeight{minHeadHeight_}, bodyPosStiffness{bodyPosStiffness_}, bodyRotStiffness{bodyRotStiffness_}, neckStiffness{neckStiffness_}, rotateChestByHands{rotateChestByHands_}, chestClampWeight{chestClampWeight_}, headClampWeight{headClampWeight_}, moveBodyBackWhenCrouching{moveBodyBackWhenCrouching_}, maintainPelvisPosition{maintainPelvisPosition_}, maxRootAngle{maxRootAngle_}, rootHeadingOffset{rootHeadingOffset_}, IKPositionHead{IKPositionHead_}, IKRotationHead{IKRotationHead_}, IKPositionPelvis{IKPositionPelvis_}, IKRotationPelvis{IKRotationPelvis_}, goalPositionChest{goalPositionChest_}, pelvisPositionOffset{pelvisPositionOffset_}, chestPositionOffset{chestPositionOffset_}, headPositionOffset{headPositionOffset_}, pelvisRotationOffset{pelvisRotationOffset_}, chestRotationOffset{chestRotationOffset_}, headRotationOffset{headRotationOffset_}, faceDirection{faceDirection_}, locomotionHeadPositionOffset{locomotionHeadPositionOffset_}, headPosition{headPosition_}, anchorRotation{anchorRotation_}, anchorRelativeToHead{anchorRelativeToHead_}, headRotation{headRotation_}, pelvisRotation{pelvisRotation_}, anchorRelativeToPelvis{anchorRelativeToPelvis_}, pelvisRelativeRotation{pelvisRelativeRotation_}, chestRelativeRotation{chestRelativeRotation_}, headDeltaPosition{headDeltaPosition_}, pelvisDeltaRotation{pelvisDeltaRotation_}, chestTargetRotation{chestTargetRotation_}, pelvisIndex{pelvisIndex_}, spineIndex{spineIndex_}, chestIndex{chestIndex_}, neckIndex{neckIndex_}, headIndex{headIndex_}, length{length_}, hasChest{hasChest_}, hasNeck{hasNeck_}, hasLegs{hasLegs_}, headHeight{headHeight_}, sizeMlp{sizeMlp_}, chestForward{chestForward_} {}
    // public RootMotion.FinalIK.IKSolverVR/VirtualBone get_pelvis()
    // Offset: 0x1C2D654
    RootMotion::FinalIK::IKSolverVR::VirtualBone* get_pelvis();
    // public RootMotion.FinalIK.IKSolverVR/VirtualBone get_firstSpineBone()
    // Offset: 0x1C2DCD8
    RootMotion::FinalIK::IKSolverVR::VirtualBone* get_firstSpineBone();
    // public RootMotion.FinalIK.IKSolverVR/VirtualBone get_chest()
    // Offset: 0x1C2DD18
    RootMotion::FinalIK::IKSolverVR::VirtualBone* get_chest();
    // private RootMotion.FinalIK.IKSolverVR/VirtualBone get_neck()
    // Offset: 0x1C2DD6C
    RootMotion::FinalIK::IKSolverVR::VirtualBone* get_neck();
    // public RootMotion.FinalIK.IKSolverVR/VirtualBone get_head()
    // Offset: 0x1C2D694
    RootMotion::FinalIK::IKSolverVR::VirtualBone* get_head();
    // public UnityEngine.Quaternion get_anchorRotation()
    // Offset: 0x1C2DDAC
    UnityEngine::Quaternion get_anchorRotation();
    // private System.Void set_anchorRotation(UnityEngine.Quaternion value)
    // Offset: 0x1C2DDC0
    void set_anchorRotation(UnityEngine::Quaternion value);
    // public UnityEngine.Quaternion get_anchorRelativeToHead()
    // Offset: 0x1C2DDD4
    UnityEngine::Quaternion get_anchorRelativeToHead();
    // private System.Void set_anchorRelativeToHead(UnityEngine.Quaternion value)
    // Offset: 0x1C2DDE8
    void set_anchorRelativeToHead(UnityEngine::Quaternion value);
    // private System.Void CalculateChestTargetRotation(RootMotion.FinalIK.IKSolverVR/VirtualBone rootBone, RootMotion.FinalIK.IKSolverVR/Arm[] arms)
    // Offset: 0x1C2F190
    void CalculateChestTargetRotation(RootMotion::FinalIK::IKSolverVR::VirtualBone* rootBone, ::Array<RootMotion::FinalIK::IKSolverVR::Arm*>* arms);
    // public System.Void Solve(RootMotion.FinalIK.IKSolverVR/VirtualBone rootBone, RootMotion.FinalIK.IKSolverVR/Leg[] legs, RootMotion.FinalIK.IKSolverVR/Arm[] arms)
    // Offset: 0x1C2F750
    void Solve(RootMotion::FinalIK::IKSolverVR::VirtualBone* rootBone, ::Array<RootMotion::FinalIK::IKSolverVR::Leg*>* legs, ::Array<RootMotion::FinalIK::IKSolverVR::Arm*>* arms);
    // private System.Void FABRIKPass(UnityEngine.Vector3 animatedPelvisPos, UnityEngine.Vector3 rootUp, System.Single weight)
    // Offset: 0x1C30190
    void FABRIKPass(UnityEngine::Vector3 animatedPelvisPos, UnityEngine::Vector3 rootUp, float weight);
    // private System.Void SolvePelvis()
    // Offset: 0x1C309BC
    void SolvePelvis();
    // private System.Void AdjustChestByHands(ref UnityEngine.Quaternion chestTargetRotation, RootMotion.FinalIK.IKSolverVR/Arm[] arms)
    // Offset: 0x1C2F3C0
    void AdjustChestByHands(UnityEngine::Quaternion& chestTargetRotation, ::Array<RootMotion::FinalIK::IKSolverVR::Arm*>* arms);
    // public System.Void InverseTranslateToHead(RootMotion.FinalIK.IKSolverVR/Leg[] legs, System.Boolean limited, System.Boolean useCurrentLegMag, UnityEngine.Vector3 offset, System.Single w)
    // Offset: 0x1C30604
    void InverseTranslateToHead(::Array<RootMotion::FinalIK::IKSolverVR::Leg*>* legs, bool limited, bool useCurrentLegMag, UnityEngine::Vector3 offset, float w);
    // private System.Void TranslatePelvis(RootMotion.FinalIK.IKSolverVR/Leg[] legs, UnityEngine.Vector3 deltaPosition, UnityEngine.Quaternion deltaRotation)
    // Offset: 0x1C2FD74
    void TranslatePelvis(::Array<RootMotion::FinalIK::IKSolverVR::Leg*>* legs, UnityEngine::Vector3 deltaPosition, UnityEngine::Quaternion deltaRotation);
    // private UnityEngine.Vector3 LimitPelvisPosition(RootMotion.FinalIK.IKSolverVR/Leg[] legs, UnityEngine.Vector3 pelvisPosition, System.Boolean useCurrentLegMag, System.Int32 it)
    // Offset: 0x1C3147C
    UnityEngine::Vector3 LimitPelvisPosition(::Array<RootMotion::FinalIK::IKSolverVR::Leg*>* legs, UnityEngine::Vector3 pelvisPosition, bool useCurrentLegMag, int it);
    // private System.Void Bend(RootMotion.FinalIK.IKSolverVR/VirtualBone[] bones, System.Int32 firstIndex, System.Int32 lastIndex, UnityEngine.Quaternion targetRotation, System.Single clampWeight, System.Boolean uniformWeight, System.Single w)
    // Offset: 0x1C30770
    void Bend(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, int firstIndex, int lastIndex, UnityEngine::Quaternion targetRotation, float clampWeight, bool uniformWeight, float w);
    // private System.Void Bend(RootMotion.FinalIK.IKSolverVR/VirtualBone[] bones, System.Int32 firstIndex, System.Int32 lastIndex, UnityEngine.Quaternion targetRotation, UnityEngine.Quaternion rotationOffset, System.Single clampWeight, System.Boolean uniformWeight, System.Single w)
    // Offset: 0x1C30350
    void Bend(::Array<RootMotion::FinalIK::IKSolverVR::VirtualBone*>* bones, int firstIndex, int lastIndex, UnityEngine::Quaternion targetRotation, UnityEngine::Quaternion rotationOffset, float clampWeight, bool uniformWeight, float w);
    // protected override System.Void OnRead(UnityEngine.Vector3[] positions, UnityEngine.Quaternion[] rotations, System.Boolean hasChest, System.Boolean hasNeck, System.Boolean hasShoulders, System.Boolean hasToes, System.Boolean hasLegs, System.Int32 rootIndex, System.Int32 index)
    // Offset: 0x1C2DDFC
    // Implemented from: RootMotion.FinalIK.IKSolverVR/BodyPart
    // Base method: System.Void BodyPart::OnRead(UnityEngine.Vector3[] positions, UnityEngine.Quaternion[] rotations, System.Boolean hasChest, System.Boolean hasNeck, System.Boolean hasShoulders, System.Boolean hasToes, System.Boolean hasLegs, System.Int32 rootIndex, System.Int32 index)
    void OnRead(::Array<UnityEngine::Vector3>* positions, ::Array<UnityEngine::Quaternion>* rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index);
    // public override System.Void PreSolve()
    // Offset: 0x1C2E908
    // Implemented from: RootMotion.FinalIK.IKSolverVR/BodyPart
    // Base method: System.Void BodyPart::PreSolve()
    void PreSolve();
    // public override System.Void ApplyOffsets()
    // Offset: 0x1C2EB18
    // Implemented from: RootMotion.FinalIK.IKSolverVR/BodyPart
    // Base method: System.Void BodyPart::ApplyOffsets()
    void ApplyOffsets();
    // public override System.Void Write(ref UnityEngine.Vector3[] solvedPositions, ref UnityEngine.Quaternion[] solvedRotations)
    // Offset: 0x1C311A4
    // Implemented from: RootMotion.FinalIK.IKSolverVR/BodyPart
    // Base method: System.Void BodyPart::Write(ref UnityEngine.Vector3[] solvedPositions, ref UnityEngine.Quaternion[] solvedRotations)
    void Write(::Array<UnityEngine::Vector3>*& solvedPositions, ::Array<UnityEngine::Quaternion>*& solvedRotations);
    // public override System.Void ResetOffsets()
    // Offset: 0x1C31380
    // Implemented from: RootMotion.FinalIK.IKSolverVR/BodyPart
    // Base method: System.Void BodyPart::ResetOffsets()
    void ResetOffsets();
    // public System.Void .ctor()
    // Offset: 0x1C317A4
    // Implemented from: RootMotion.FinalIK.IKSolverVR/BodyPart
    // Base method: System.Void BodyPart::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IKSolverVR::Spine* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("RootMotion::FinalIK::IKSolverVR::Spine::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IKSolverVR::Spine*, creationType>()));
    }
  }; // RootMotion.FinalIK.IKSolverVR/Spine
  #pragma pack(pop)
  static check_size<sizeof(IKSolverVR::Spine), 540 + sizeof(UnityEngine::Vector3)> __RootMotion_FinalIK_IKSolverVR_SpineSizeCheck;
  static_assert(sizeof(IKSolverVR::Spine) == 0x228);
}
DEFINE_IL2CPP_ARG_TYPE(RootMotion::FinalIK::IKSolverVR::Spine*, "RootMotion.FinalIK", "IKSolverVR/Spine");
