// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Experimental.GlobalIllumination.LinearColor
#include "UnityEngine/Experimental/GlobalIllumination/LinearColor.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Experimental.GlobalIllumination.LightType
#include "UnityEngine/Experimental/GlobalIllumination/LightType.hpp"
// Including type: UnityEngine.Experimental.GlobalIllumination.LightMode
#include "UnityEngine/Experimental/GlobalIllumination/LightMode.hpp"
// Including type: UnityEngine.Experimental.GlobalIllumination.FalloffType
#include "UnityEngine/Experimental/GlobalIllumination/FalloffType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Experimental::GlobalIllumination
namespace UnityEngine::Experimental::GlobalIllumination {
  // Forward declaring type: DirectionalLight
  struct DirectionalLight;
  // Forward declaring type: PointLight
  struct PointLight;
  // Forward declaring type: SpotLight
  struct SpotLight;
  // Forward declaring type: RectangleLight
  struct RectangleLight;
  // Forward declaring type: DiscLight
  struct DiscLight;
}
// Completed forward declares
// Type namespace: UnityEngine.Experimental.GlobalIllumination
namespace UnityEngine::Experimental::GlobalIllumination {
  // Autogenerated type: UnityEngine.Experimental.GlobalIllumination.LightDataGI
  struct LightDataGI : public System::ValueType {
    public:
    // public System.Int32 instanceID
    // Offset: 0x0
    int instanceID;
    // public UnityEngine.Experimental.GlobalIllumination.LinearColor color
    // Offset: 0x4
    UnityEngine::Experimental::GlobalIllumination::LinearColor color;
    // public UnityEngine.Experimental.GlobalIllumination.LinearColor indirectColor
    // Offset: 0x14
    UnityEngine::Experimental::GlobalIllumination::LinearColor indirectColor;
    // public UnityEngine.Quaternion orientation
    // Offset: 0x24
    UnityEngine::Quaternion orientation;
    // public UnityEngine.Vector3 position
    // Offset: 0x34
    UnityEngine::Vector3 position;
    // public System.Single range
    // Offset: 0x40
    float range;
    // public System.Single coneAngle
    // Offset: 0x44
    float coneAngle;
    // public System.Single innerConeAngle
    // Offset: 0x48
    float innerConeAngle;
    // public System.Single shape0
    // Offset: 0x4C
    float shape0;
    // public System.Single shape1
    // Offset: 0x50
    float shape1;
    // public UnityEngine.Experimental.GlobalIllumination.LightType type
    // Offset: 0x54
    UnityEngine::Experimental::GlobalIllumination::LightType type;
    // public UnityEngine.Experimental.GlobalIllumination.LightMode mode
    // Offset: 0x55
    UnityEngine::Experimental::GlobalIllumination::LightMode mode;
    // public System.Byte shadow
    // Offset: 0x56
    uint8_t shadow;
    // public UnityEngine.Experimental.GlobalIllumination.FalloffType falloff
    // Offset: 0x57
    UnityEngine::Experimental::GlobalIllumination::FalloffType falloff;
    // Creating value type constructor for type: LightDataGI
    constexpr LightDataGI(int instanceID_ = {}, UnityEngine::Experimental::GlobalIllumination::LinearColor color_ = {}, UnityEngine::Experimental::GlobalIllumination::LinearColor indirectColor_ = {}, UnityEngine::Quaternion orientation_ = {}, UnityEngine::Vector3 position_ = {}, float range_ = {}, float coneAngle_ = {}, float innerConeAngle_ = {}, float shape0_ = {}, float shape1_ = {}, UnityEngine::Experimental::GlobalIllumination::LightType type_ = {}, UnityEngine::Experimental::GlobalIllumination::LightMode mode_ = {}, uint8_t shadow_ = {}, UnityEngine::Experimental::GlobalIllumination::FalloffType falloff_ = {}) noexcept : instanceID{instanceID_}, color{color_}, indirectColor{indirectColor_}, orientation{orientation_}, position{position_}, range{range_}, coneAngle{coneAngle_}, innerConeAngle{innerConeAngle_}, shape0{shape0_}, shape1{shape1_}, type{type_}, mode{mode_}, shadow{shadow_}, falloff{falloff_} {}
    // public System.Void Init(ref UnityEngine.Experimental.GlobalIllumination.DirectionalLight light)
    // Offset: 0xA45B78
    void Init(UnityEngine::Experimental::GlobalIllumination::DirectionalLight& light);
    // public System.Void Init(ref UnityEngine.Experimental.GlobalIllumination.PointLight light)
    // Offset: 0xA45B80
    void Init(UnityEngine::Experimental::GlobalIllumination::PointLight& light);
    // public System.Void Init(ref UnityEngine.Experimental.GlobalIllumination.SpotLight light)
    // Offset: 0xA45B88
    void Init(UnityEngine::Experimental::GlobalIllumination::SpotLight& light);
    // public System.Void Init(ref UnityEngine.Experimental.GlobalIllumination.RectangleLight light)
    // Offset: 0xA45B90
    void Init(UnityEngine::Experimental::GlobalIllumination::RectangleLight& light);
    // public System.Void Init(ref UnityEngine.Experimental.GlobalIllumination.DiscLight light)
    // Offset: 0xA45B98
    void Init(UnityEngine::Experimental::GlobalIllumination::DiscLight& light);
    // public System.Void InitNoBake(System.Int32 lightInstanceID)
    // Offset: 0xA45BA0
    void InitNoBake(int lightInstanceID);
  }; // UnityEngine.Experimental.GlobalIllumination.LightDataGI
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Experimental::GlobalIllumination::LightDataGI, "UnityEngine.Experimental.GlobalIllumination", "LightDataGI");
#pragma pack(pop)
