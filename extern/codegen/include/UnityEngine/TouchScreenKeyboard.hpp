// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Including type: UnityEngine.TouchScreenKeyboardType
#include "UnityEngine/TouchScreenKeyboardType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: TouchScreenKeyboard_InternalConstructorHelperArguments
  struct TouchScreenKeyboard_InternalConstructorHelperArguments;
  // Forward declaring type: RangeInt
  struct RangeInt;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.TouchScreenKeyboard
  // [] Offset: FFFFFFFF
  // [NativeHeaderAttribute] Offset: CBF96C
  // [NativeHeaderAttribute] Offset: CBF96C
  // [NativeConditionalAttribute] Offset: CBF96C
  class TouchScreenKeyboard : public ::Il2CppObject {
    public:
    // Nested type: UnityEngine::TouchScreenKeyboard::Status
    struct Status;
    // System.IntPtr m_Ptr
    // Size: 0x8
    // Offset: 0x10
    System::IntPtr m_Ptr;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // Creating value type constructor for type: TouchScreenKeyboard
    TouchScreenKeyboard(System::IntPtr m_Ptr_ = {}) noexcept : m_Ptr{m_Ptr_} {}
    // Creating conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept {
      return m_Ptr;
    }
    // static private System.Void Internal_Destroy(System.IntPtr ptr)
    // Offset: 0x1AB7F00
    static void Internal_Destroy(System::IntPtr ptr);
    // private System.Void Destroy()
    // Offset: 0x1AB7F40
    void Destroy();
    // public System.Void .ctor(System.String text, UnityEngine.TouchScreenKeyboardType keyboardType, System.Boolean autocorrection, System.Boolean multiline, System.Boolean secure, System.Boolean alert, System.String textPlaceholder, System.Int32 characterLimit)
    // Offset: 0x1AB805C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TouchScreenKeyboard* New_ctor(::Il2CppString* text, UnityEngine::TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure, bool alert, ::Il2CppString* textPlaceholder, int characterLimit) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::TouchScreenKeyboard::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TouchScreenKeyboard*, creationType>(text, keyboardType, autocorrection, multiline, secure, alert, textPlaceholder, characterLimit)));
    }
    // static private System.IntPtr TouchScreenKeyboard_InternalConstructorHelper(ref UnityEngine.TouchScreenKeyboard_InternalConstructorHelperArguments arguments, System.String text, System.String textPlaceholder)
    // Offset: 0x1AB81C0
    static System::IntPtr TouchScreenKeyboard_InternalConstructorHelper(UnityEngine::TouchScreenKeyboard_InternalConstructorHelperArguments& arguments, ::Il2CppString* text, ::Il2CppString* textPlaceholder);
    // static public System.Boolean get_isSupported()
    // Offset: 0x1AB8218
    static bool get_isSupported();
    // static public System.Boolean get_isInPlaceEditingAllowed()
    // Offset: 0x1AB8284
    static bool get_isInPlaceEditingAllowed();
    // static public UnityEngine.TouchScreenKeyboard Open(System.String text, UnityEngine.TouchScreenKeyboardType keyboardType, System.Boolean autocorrection, System.Boolean multiline, System.Boolean secure, System.Boolean alert, System.String textPlaceholder, System.Int32 characterLimit)
    // Offset: 0x1AB828C
    static UnityEngine::TouchScreenKeyboard* Open(::Il2CppString* text, UnityEngine::TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure, bool alert, ::Il2CppString* textPlaceholder, int characterLimit);
    // static public UnityEngine.TouchScreenKeyboard Open(System.String text, UnityEngine.TouchScreenKeyboardType keyboardType, System.Boolean autocorrection, System.Boolean multiline, System.Boolean secure)
    // Offset: 0x1AB834C
    static UnityEngine::TouchScreenKeyboard* Open(::Il2CppString* text, UnityEngine::TouchScreenKeyboardType keyboardType, bool autocorrection, bool multiline, bool secure);
    // public System.String get_text()
    // Offset: 0x1AB83E0
    ::Il2CppString* get_text();
    // public System.Void set_text(System.String value)
    // Offset: 0x1AB8420
    void set_text(::Il2CppString* value);
    // static public System.Void set_hideInput(System.Boolean value)
    // Offset: 0x1AB8470
    static void set_hideInput(bool value);
    // public System.Boolean get_active()
    // Offset: 0x1AB84B0
    bool get_active();
    // public System.Void set_active(System.Boolean value)
    // Offset: 0x1AB84F0
    void set_active(bool value);
    // public UnityEngine.TouchScreenKeyboard/Status get_status()
    // Offset: 0x1AB8540
    UnityEngine::TouchScreenKeyboard::Status get_status();
    // public System.Void set_characterLimit(System.Int32 value)
    // Offset: 0x1AB8580
    void set_characterLimit(int value);
    // public System.Boolean get_canGetSelection()
    // Offset: 0x1AB85D0
    bool get_canGetSelection();
    // public System.Boolean get_canSetSelection()
    // Offset: 0x1AB8610
    bool get_canSetSelection();
    // public UnityEngine.RangeInt get_selection()
    // Offset: 0x1AB8650
    UnityEngine::RangeInt get_selection();
    // public System.Void set_selection(UnityEngine.RangeInt value)
    // Offset: 0x1AB86FC
    void set_selection(UnityEngine::RangeInt value);
    // static private System.Void GetSelection(out System.Int32 start, out System.Int32 length)
    // Offset: 0x1AB86AC
    static void GetSelection(int& start, int& length);
    // static private System.Void SetSelection(System.Int32 start, System.Int32 length)
    // Offset: 0x1AB8804
    static void SetSelection(int start, int length);
    // protected override System.Void Finalize()
    // Offset: 0x1AB7FF4
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // UnityEngine.TouchScreenKeyboard
  #pragma pack(pop)
  static check_size<sizeof(TouchScreenKeyboard), 16 + sizeof(System::IntPtr)> __UnityEngine_TouchScreenKeyboardSizeCheck;
  static_assert(sizeof(TouchScreenKeyboard) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::TouchScreenKeyboard*, "UnityEngine", "TouchScreenKeyboard");
