// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Object
#include "UnityEngine/Object.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector4
  struct Vector4;
  // Forward declaring type: Matrix4x4
  struct Matrix4x4;
  // Forward declaring type: Texture
  class Texture;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Autogenerated type: UnityEngine.Shader
  class Shader : public UnityEngine::Object {
    public:
    // static public UnityEngine.Shader Find(System.String name)
    // Offset: 0x16C0844
    static UnityEngine::Shader* Find(::Il2CppString* name);
    // public System.Boolean get_isSupported()
    // Offset: 0x16C0884
    bool get_isSupported();
    // static public System.Void EnableKeyword(System.String keyword)
    // Offset: 0x16C08C4
    static void EnableKeyword(::Il2CppString* keyword);
    // static public System.Void DisableKeyword(System.String keyword)
    // Offset: 0x16C0904
    static void DisableKeyword(::Il2CppString* keyword);
    // static public System.Int32 PropertyToID(System.String name)
    // Offset: 0x16BBF34
    static int PropertyToID(::Il2CppString* name);
    // static private System.Void SetGlobalFloatImpl(System.Int32 name, System.Single value)
    // Offset: 0x16C0944
    static void SetGlobalFloatImpl(int name, float value);
    // static private System.Void SetGlobalVectorImpl(System.Int32 name, UnityEngine.Vector4 value)
    // Offset: 0x16C0994
    static void SetGlobalVectorImpl(int name, UnityEngine::Vector4 value);
    // static private System.Void SetGlobalMatrixImpl(System.Int32 name, UnityEngine.Matrix4x4 value)
    // Offset: 0x16C0A3C
    static void SetGlobalMatrixImpl(int name, UnityEngine::Matrix4x4 value);
    // static private System.Void SetGlobalTextureImpl(System.Int32 name, UnityEngine.Texture value)
    // Offset: 0x16C0ADC
    static void SetGlobalTextureImpl(int name, UnityEngine::Texture* value);
    // static private System.Void SetGlobalFloatArrayImpl(System.Int32 name, System.Single[] values, System.Int32 count)
    // Offset: 0x16C0B2C
    static void SetGlobalFloatArrayImpl(int name, ::Array<float>* values, int count);
    // static private System.Void SetGlobalVectorArrayImpl(System.Int32 name, UnityEngine.Vector4[] values, System.Int32 count)
    // Offset: 0x16C0B84
    static void SetGlobalVectorArrayImpl(int name, ::Array<UnityEngine::Vector4>* values, int count);
    // static private System.Void SetGlobalFloatArray(System.Int32 name, System.Single[] values, System.Int32 count)
    // Offset: 0x16C0BDC
    static void SetGlobalFloatArray(int name, ::Array<float>* values, int count);
    // static private System.Void SetGlobalVectorArray(System.Int32 name, UnityEngine.Vector4[] values, System.Int32 count)
    // Offset: 0x16C0CF0
    static void SetGlobalVectorArray(int name, ::Array<UnityEngine::Vector4>* values, int count);
    // static public System.Void SetGlobalFloat(System.Int32 nameID, System.Single value)
    // Offset: 0x16C0E04
    static void SetGlobalFloat(int nameID, float value);
    // static public System.Void SetGlobalInt(System.Int32 nameID, System.Int32 value)
    // Offset: 0x16C0E54
    static void SetGlobalInt(int nameID, int value);
    // static public System.Void SetGlobalVector(System.Int32 nameID, UnityEngine.Vector4 value)
    // Offset: 0x16C0EA4
    static void SetGlobalVector(int nameID, UnityEngine::Vector4 value);
    // static public System.Void SetGlobalMatrix(System.Int32 nameID, UnityEngine.Matrix4x4 value)
    // Offset: 0x16C0EA8
    static void SetGlobalMatrix(int nameID, UnityEngine::Matrix4x4 value);
    // static public System.Void SetGlobalTexture(System.String name, UnityEngine.Texture value)
    // Offset: 0x16C0F08
    static void SetGlobalTexture(::Il2CppString* name, UnityEngine::Texture* value);
    // static public System.Void SetGlobalTexture(System.Int32 nameID, UnityEngine.Texture value)
    // Offset: 0x16C0F84
    static void SetGlobalTexture(int nameID, UnityEngine::Texture* value);
    // static public System.Void SetGlobalFloatArray(System.Int32 nameID, System.Single[] values)
    // Offset: 0x16C0FD4
    static void SetGlobalFloatArray(int nameID, ::Array<float>* values);
    // static public System.Void SetGlobalVectorArray(System.Int32 nameID, UnityEngine.Vector4[] values)
    // Offset: 0x16C0FEC
    static void SetGlobalVectorArray(int nameID, ::Array<UnityEngine::Vector4>* values);
    // static private System.Void SetGlobalVectorImpl_Injected(System.Int32 name, ref UnityEngine.Vector4 value)
    // Offset: 0x16C09EC
    static void SetGlobalVectorImpl_Injected(int name, UnityEngine::Vector4& value);
    // static private System.Void SetGlobalMatrixImpl_Injected(System.Int32 name, ref UnityEngine.Matrix4x4 value)
    // Offset: 0x16C0A8C
    static void SetGlobalMatrixImpl_Injected(int name, UnityEngine::Matrix4x4& value);
    // private System.Void .ctor()
    // Offset: 0x16C1004
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static Shader* New_ctor();
  }; // UnityEngine.Shader
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Shader*, "UnityEngine", "Shader");
#pragma pack(pop)
