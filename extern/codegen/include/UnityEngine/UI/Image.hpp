// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.UI.MaskableGraphic
#include "UnityEngine/UI/MaskableGraphic.hpp"
// Including type: UnityEngine.ISerializationCallbackReceiver
#include "UnityEngine/ISerializationCallbackReceiver.hpp"
// Including type: UnityEngine.UI.ILayoutElement
#include "UnityEngine/UI/ILayoutElement.hpp"
// Including type: UnityEngine.ICanvasRaycastFilter
#include "UnityEngine/ICanvasRaycastFilter.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector2 because it is already included!
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Sprite
  class Sprite;
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: Rect
  struct Rect;
  // Skipping declaration: Vector4 because it is already included!
  // Skipping declaration: Color32 because it is already included!
  // Forward declaring type: Texture
  class Texture;
  // Forward declaring type: Camera
  class Camera;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Skipping declaration: Type because it is already included!
  // Skipping declaration: FillMethod because it is already included!
  // Forward declaring type: VertexHelper
  class VertexHelper;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine::U2D
namespace UnityEngine::U2D {
  // Forward declaring type: SpriteAtlas
  class SpriteAtlas;
}
// Completed forward declares
// Type namespace: UnityEngine.UI
namespace UnityEngine::UI {
  // Autogenerated type: UnityEngine.UI.Image
  class Image : public UnityEngine::UI::MaskableGraphic, public UnityEngine::ISerializationCallbackReceiver, public UnityEngine::UI::ILayoutElement, public UnityEngine::ICanvasRaycastFilter {
    public:
    // Nested type: UnityEngine::UI::Image::Type
    struct Type;
    // Nested type: UnityEngine::UI::Image::FillMethod
    struct FillMethod;
    // Nested type: UnityEngine::UI::Image::OriginHorizontal
    struct OriginHorizontal;
    // Nested type: UnityEngine::UI::Image::OriginVertical
    struct OriginVertical;
    // Nested type: UnityEngine::UI::Image::Origin90
    struct Origin90;
    // Nested type: UnityEngine::UI::Image::Origin180
    struct Origin180;
    // Nested type: UnityEngine::UI::Image::Origin360
    struct Origin360;
    // Autogenerated type: UnityEngine.UI.Image/Type
    struct Type : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: Type
      constexpr Type(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.UI.Image/Type Simple
      static constexpr const int Simple = 0;
      // Get static field: static public UnityEngine.UI.Image/Type Simple
      static UnityEngine::UI::Image::Type _get_Simple();
      // Set static field: static public UnityEngine.UI.Image/Type Simple
      static void _set_Simple(UnityEngine::UI::Image::Type value);
      // static field const value: static public UnityEngine.UI.Image/Type Sliced
      static constexpr const int Sliced = 1;
      // Get static field: static public UnityEngine.UI.Image/Type Sliced
      static UnityEngine::UI::Image::Type _get_Sliced();
      // Set static field: static public UnityEngine.UI.Image/Type Sliced
      static void _set_Sliced(UnityEngine::UI::Image::Type value);
      // static field const value: static public UnityEngine.UI.Image/Type Tiled
      static constexpr const int Tiled = 2;
      // Get static field: static public UnityEngine.UI.Image/Type Tiled
      static UnityEngine::UI::Image::Type _get_Tiled();
      // Set static field: static public UnityEngine.UI.Image/Type Tiled
      static void _set_Tiled(UnityEngine::UI::Image::Type value);
      // static field const value: static public UnityEngine.UI.Image/Type Filled
      static constexpr const int Filled = 3;
      // Get static field: static public UnityEngine.UI.Image/Type Filled
      static UnityEngine::UI::Image::Type _get_Filled();
      // Set static field: static public UnityEngine.UI.Image/Type Filled
      static void _set_Filled(UnityEngine::UI::Image::Type value);
    }; // UnityEngine.UI.Image/Type
    // Autogenerated type: UnityEngine.UI.Image/FillMethod
    struct FillMethod : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: FillMethod
      constexpr FillMethod(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.UI.Image/FillMethod Horizontal
      static constexpr const int Horizontal = 0;
      // Get static field: static public UnityEngine.UI.Image/FillMethod Horizontal
      static UnityEngine::UI::Image::FillMethod _get_Horizontal();
      // Set static field: static public UnityEngine.UI.Image/FillMethod Horizontal
      static void _set_Horizontal(UnityEngine::UI::Image::FillMethod value);
      // static field const value: static public UnityEngine.UI.Image/FillMethod Vertical
      static constexpr const int Vertical = 1;
      // Get static field: static public UnityEngine.UI.Image/FillMethod Vertical
      static UnityEngine::UI::Image::FillMethod _get_Vertical();
      // Set static field: static public UnityEngine.UI.Image/FillMethod Vertical
      static void _set_Vertical(UnityEngine::UI::Image::FillMethod value);
      // static field const value: static public UnityEngine.UI.Image/FillMethod Radial90
      static constexpr const int Radial90 = 2;
      // Get static field: static public UnityEngine.UI.Image/FillMethod Radial90
      static UnityEngine::UI::Image::FillMethod _get_Radial90();
      // Set static field: static public UnityEngine.UI.Image/FillMethod Radial90
      static void _set_Radial90(UnityEngine::UI::Image::FillMethod value);
      // static field const value: static public UnityEngine.UI.Image/FillMethod Radial180
      static constexpr const int Radial180 = 3;
      // Get static field: static public UnityEngine.UI.Image/FillMethod Radial180
      static UnityEngine::UI::Image::FillMethod _get_Radial180();
      // Set static field: static public UnityEngine.UI.Image/FillMethod Radial180
      static void _set_Radial180(UnityEngine::UI::Image::FillMethod value);
      // static field const value: static public UnityEngine.UI.Image/FillMethod Radial360
      static constexpr const int Radial360 = 4;
      // Get static field: static public UnityEngine.UI.Image/FillMethod Radial360
      static UnityEngine::UI::Image::FillMethod _get_Radial360();
      // Set static field: static public UnityEngine.UI.Image/FillMethod Radial360
      static void _set_Radial360(UnityEngine::UI::Image::FillMethod value);
    }; // UnityEngine.UI.Image/FillMethod
    // private UnityEngine.Sprite m_Sprite
    // Offset: 0xC0
    UnityEngine::Sprite* m_Sprite;
    // private UnityEngine.Sprite m_OverrideSprite
    // Offset: 0xC8
    UnityEngine::Sprite* m_OverrideSprite;
    // private UnityEngine.UI.Image/Type m_Type
    // Offset: 0xD0
    UnityEngine::UI::Image::Type m_Type;
    // private System.Boolean m_PreserveAspect
    // Offset: 0xD4
    bool m_PreserveAspect;
    // private System.Boolean m_FillCenter
    // Offset: 0xD5
    bool m_FillCenter;
    // private UnityEngine.UI.Image/FillMethod m_FillMethod
    // Offset: 0xD8
    UnityEngine::UI::Image::FillMethod m_FillMethod;
    // private System.Single m_FillAmount
    // Offset: 0xDC
    float m_FillAmount;
    // private System.Boolean m_FillClockwise
    // Offset: 0xE0
    bool m_FillClockwise;
    // private System.Int32 m_FillOrigin
    // Offset: 0xE4
    int m_FillOrigin;
    // private System.Single m_AlphaHitTestMinimumThreshold
    // Offset: 0xE8
    float m_AlphaHitTestMinimumThreshold;
    // private System.Boolean m_Tracked
    // Offset: 0xEC
    bool m_Tracked;
    // private System.Boolean m_UseSpriteMesh
    // Offset: 0xED
    bool m_UseSpriteMesh;
    // private System.Single m_PixelsPerUnitMultiplier
    // Offset: 0xF0
    float m_PixelsPerUnitMultiplier;
    // private System.Single m_CachedReferencePixelsPerUnit
    // Offset: 0xF4
    float m_CachedReferencePixelsPerUnit;
    // Get static field: static protected UnityEngine.Material s_ETC1DefaultUI
    static UnityEngine::Material* _get_s_ETC1DefaultUI();
    // Set static field: static protected UnityEngine.Material s_ETC1DefaultUI
    static void _set_s_ETC1DefaultUI(UnityEngine::Material* value);
    // Get static field: static private readonly UnityEngine.Vector2[] s_VertScratch
    static ::Array<UnityEngine::Vector2>* _get_s_VertScratch();
    // Set static field: static private readonly UnityEngine.Vector2[] s_VertScratch
    static void _set_s_VertScratch(::Array<UnityEngine::Vector2>* value);
    // Get static field: static private readonly UnityEngine.Vector2[] s_UVScratch
    static ::Array<UnityEngine::Vector2>* _get_s_UVScratch();
    // Set static field: static private readonly UnityEngine.Vector2[] s_UVScratch
    static void _set_s_UVScratch(::Array<UnityEngine::Vector2>* value);
    // Get static field: static private readonly UnityEngine.Vector3[] s_Xy
    static ::Array<UnityEngine::Vector3>* _get_s_Xy();
    // Set static field: static private readonly UnityEngine.Vector3[] s_Xy
    static void _set_s_Xy(::Array<UnityEngine::Vector3>* value);
    // Get static field: static private readonly UnityEngine.Vector3[] s_Uv
    static ::Array<UnityEngine::Vector3>* _get_s_Uv();
    // Set static field: static private readonly UnityEngine.Vector3[] s_Uv
    static void _set_s_Uv(::Array<UnityEngine::Vector3>* value);
    // Get static field: static private System.Collections.Generic.List`1<UnityEngine.UI.Image> m_TrackedTexturelessImages
    static System::Collections::Generic::List_1<UnityEngine::UI::Image*>* _get_m_TrackedTexturelessImages();
    // Set static field: static private System.Collections.Generic.List`1<UnityEngine.UI.Image> m_TrackedTexturelessImages
    static void _set_m_TrackedTexturelessImages(System::Collections::Generic::List_1<UnityEngine::UI::Image*>* value);
    // Get static field: static private System.Boolean s_Initialized
    static bool _get_s_Initialized();
    // Set static field: static private System.Boolean s_Initialized
    static void _set_s_Initialized(bool value);
    // public UnityEngine.Sprite get_sprite()
    // Offset: 0x11709F4
    UnityEngine::Sprite* get_sprite();
    // public System.Void set_sprite(UnityEngine.Sprite value)
    // Offset: 0x11709FC
    void set_sprite(UnityEngine::Sprite* value);
    // public System.Void DisableSpriteOptimizations()
    // Offset: 0x1170E24
    void DisableSpriteOptimizations();
    // public UnityEngine.Sprite get_overrideSprite()
    // Offset: 0x1170E2C
    UnityEngine::Sprite* get_overrideSprite();
    // public System.Void set_overrideSprite(UnityEngine.Sprite value)
    // Offset: 0x1170EB8
    void set_overrideSprite(UnityEngine::Sprite* value);
    // private UnityEngine.Sprite get_activeSprite()
    // Offset: 0x1170E30
    UnityEngine::Sprite* get_activeSprite();
    // public UnityEngine.UI.Image/Type get_type()
    // Offset: 0x1170F48
    UnityEngine::UI::Image::Type get_type();
    // public System.Void set_type(UnityEngine.UI.Image/Type value)
    // Offset: 0x1170F50
    void set_type(UnityEngine::UI::Image::Type value);
    // public System.Boolean get_preserveAspect()
    // Offset: 0x1170FD8
    bool get_preserveAspect();
    // public System.Void set_preserveAspect(System.Boolean value)
    // Offset: 0x1170FE0
    void set_preserveAspect(bool value);
    // public System.Boolean get_fillCenter()
    // Offset: 0x1171068
    bool get_fillCenter();
    // public System.Void set_fillCenter(System.Boolean value)
    // Offset: 0x1171070
    void set_fillCenter(bool value);
    // public UnityEngine.UI.Image/FillMethod get_fillMethod()
    // Offset: 0x11710F8
    UnityEngine::UI::Image::FillMethod get_fillMethod();
    // public System.Void set_fillMethod(UnityEngine.UI.Image/FillMethod value)
    // Offset: 0x1171100
    void set_fillMethod(UnityEngine::UI::Image::FillMethod value);
    // public System.Single get_fillAmount()
    // Offset: 0x1171180
    float get_fillAmount();
    // public System.Void set_fillAmount(System.Single value)
    // Offset: 0x1171188
    void set_fillAmount(float value);
    // public System.Boolean get_fillClockwise()
    // Offset: 0x117123C
    bool get_fillClockwise();
    // public System.Void set_fillClockwise(System.Boolean value)
    // Offset: 0x1171244
    void set_fillClockwise(bool value);
    // public System.Int32 get_fillOrigin()
    // Offset: 0x11712CC
    int get_fillOrigin();
    // public System.Void set_fillOrigin(System.Int32 value)
    // Offset: 0x11712D4
    void set_fillOrigin(int value);
    // public System.Single get_eventAlphaThreshold()
    // Offset: 0x117135C
    float get_eventAlphaThreshold();
    // public System.Void set_eventAlphaThreshold(System.Single value)
    // Offset: 0x117136C
    void set_eventAlphaThreshold(float value);
    // public System.Single get_alphaHitTestMinimumThreshold()
    // Offset: 0x117137C
    float get_alphaHitTestMinimumThreshold();
    // public System.Void set_alphaHitTestMinimumThreshold(System.Single value)
    // Offset: 0x1171384
    void set_alphaHitTestMinimumThreshold(float value);
    // public System.Boolean get_useSpriteMesh()
    // Offset: 0x117138C
    bool get_useSpriteMesh();
    // public System.Void set_useSpriteMesh(System.Boolean value)
    // Offset: 0x1171394
    void set_useSpriteMesh(bool value);
    // static public UnityEngine.Material get_defaultETC1GraphicMaterial()
    // Offset: 0x1171468
    static UnityEngine::Material* get_defaultETC1GraphicMaterial();
    // public System.Boolean get_hasBorder()
    // Offset: 0x1171704
    bool get_hasBorder();
    // public System.Single get_pixelsPerUnitMultiplier()
    // Offset: 0x11717D0
    float get_pixelsPerUnitMultiplier();
    // public System.Void set_pixelsPerUnitMultiplier(System.Single value)
    // Offset: 0x11717D8
    void set_pixelsPerUnitMultiplier(float value);
    // public System.Single get_pixelsPerUnit()
    // Offset: 0x117185C
    float get_pixelsPerUnit();
    // protected System.Single get_multipliedPixelsPerUnit()
    // Offset: 0x1171970
    float get_multipliedPixelsPerUnit();
    // private System.Void PreserveSpriteAspectRatio(ref UnityEngine.Rect rect, UnityEngine.Vector2 spriteSize)
    // Offset: 0x1171BAC
    void PreserveSpriteAspectRatio(UnityEngine::Rect& rect, UnityEngine::Vector2 spriteSize);
    // private UnityEngine.Vector4 GetDrawingDimensions(System.Boolean shouldPreserveAspect)
    // Offset: 0x1171D08
    UnityEngine::Vector4 GetDrawingDimensions(bool shouldPreserveAspect);
    // private System.Void TrackSprite()
    // Offset: 0x1170D1C
    void TrackSprite();
    // private System.Void GenerateSimpleSprite(UnityEngine.UI.VertexHelper vh, System.Boolean lPreserveAspect)
    // Offset: 0x1172360
    void GenerateSimpleSprite(UnityEngine::UI::VertexHelper* vh, bool lPreserveAspect);
    // private System.Void GenerateSprite(UnityEngine.UI.VertexHelper vh, System.Boolean lPreserveAspect)
    // Offset: 0x11726A8
    void GenerateSprite(UnityEngine::UI::VertexHelper* vh, bool lPreserveAspect);
    // private System.Void GenerateSlicedSprite(UnityEngine.UI.VertexHelper toFill)
    // Offset: 0x1172AE4
    void GenerateSlicedSprite(UnityEngine::UI::VertexHelper* toFill);
    // private System.Void GenerateTiledSprite(UnityEngine.UI.VertexHelper toFill)
    // Offset: 0x1173238
    void GenerateTiledSprite(UnityEngine::UI::VertexHelper* toFill);
    // static private System.Void AddQuad(UnityEngine.UI.VertexHelper vertexHelper, UnityEngine.Vector3[] quadPositions, UnityEngine.Color32 color, UnityEngine.Vector3[] quadUVs)
    // Offset: 0x1175DA0
    static void AddQuad(UnityEngine::UI::VertexHelper* vertexHelper, ::Array<UnityEngine::Vector3>* quadPositions, UnityEngine::Color32 color, ::Array<UnityEngine::Vector3>* quadUVs);
    // static private System.Void AddQuad(UnityEngine.UI.VertexHelper vertexHelper, UnityEngine.Vector2 posMin, UnityEngine.Vector2 posMax, UnityEngine.Color32 color, UnityEngine.Vector2 uvMin, UnityEngine.Vector2 uvMax)
    // Offset: 0x1175B94
    static void AddQuad(UnityEngine::UI::VertexHelper* vertexHelper, UnityEngine::Vector2 posMin, UnityEngine::Vector2 posMax, UnityEngine::Color32 color, UnityEngine::Vector2 uvMin, UnityEngine::Vector2 uvMax);
    // private UnityEngine.Vector4 GetAdjustedBorders(UnityEngine.Vector4 border, UnityEngine.Rect adjustedRect)
    // Offset: 0x1175998
    UnityEngine::Vector4 GetAdjustedBorders(UnityEngine::Vector4 border, UnityEngine::Rect adjustedRect);
    // private System.Void GenerateFilledSprite(UnityEngine.UI.VertexHelper toFill, System.Boolean preserveAspect)
    // Offset: 0x11746CC
    void GenerateFilledSprite(UnityEngine::UI::VertexHelper* toFill, bool preserveAspect);
    // static private System.Boolean RadialCut(UnityEngine.Vector3[] xy, UnityEngine.Vector3[] uv, System.Single fill, System.Boolean invert, System.Int32 corner)
    // Offset: 0x1175F28
    static bool RadialCut(::Array<UnityEngine::Vector3>* xy, ::Array<UnityEngine::Vector3>* uv, float fill, bool invert, int corner);
    // static private System.Void RadialCut(UnityEngine.Vector3[] xy, System.Single cos, System.Single sin, System.Boolean invert, System.Int32 corner)
    // Offset: 0x1176094
    static void RadialCut(::Array<UnityEngine::Vector3>* xy, float cos, float sin, bool invert, int corner);
    // private UnityEngine.Vector2 MapCoordinate(UnityEngine.Vector2 local, UnityEngine.Rect rect)
    // Offset: 0x1176BBC
    UnityEngine::Vector2 MapCoordinate(UnityEngine::Vector2 local, UnityEngine::Rect rect);
    // static private System.Void RebuildImage(UnityEngine.U2D.SpriteAtlas spriteAtlas)
    // Offset: 0x11770AC
    static void RebuildImage(UnityEngine::U2D::SpriteAtlas* spriteAtlas);
    // static private System.Void TrackImage(UnityEngine.UI.Image g)
    // Offset: 0x1175500
    static void TrackImage(UnityEngine::UI::Image* g);
    // static private System.Void UnTrackImage(UnityEngine.UI.Image g)
    // Offset: 0x11756E4
    static void UnTrackImage(UnityEngine::UI::Image* g);
    // protected System.Void .ctor()
    // Offset: 0x117141C
    // Implemented from: UnityEngine.UI.MaskableGraphic
    // Base method: System.Void MaskableGraphic::.ctor()
    // Base method: System.Void Graphic::.ctor()
    // Base method: System.Void UIBehaviour::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static Image* New_ctor();
    // public override UnityEngine.Texture get_mainTexture()
    // Offset: 0x1171568
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: UnityEngine.Texture Graphic::get_mainTexture()
    UnityEngine::Texture* get_mainTexture();
    // public override UnityEngine.Material get_material()
    // Offset: 0x1171998
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: UnityEngine.Material Graphic::get_material()
    UnityEngine::Material* get_material();
    // public override System.Void set_material(UnityEngine.Material value)
    // Offset: 0x1171AF0
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::set_material(UnityEngine.Material value)
    void set_material(UnityEngine::Material* value);
    // public System.Void OnBeforeSerialize()
    // Offset: 0x1171AF4
    // Implemented from: UnityEngine.ISerializationCallbackReceiver
    // Base method: System.Void ISerializationCallbackReceiver::OnBeforeSerialize()
    void OnBeforeSerialize();
    // Creating proxy method: UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize
    // Maps to method: OnBeforeSerialize
    void UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize();
    // public System.Void OnAfterDeserialize()
    // Offset: 0x1171AF8
    // Implemented from: UnityEngine.ISerializationCallbackReceiver
    // Base method: System.Void ISerializationCallbackReceiver::OnAfterDeserialize()
    void OnAfterDeserialize();
    // Creating proxy method: UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize
    // Maps to method: OnAfterDeserialize
    void UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize();
    // public override System.Void SetNativeSize()
    // Offset: 0x1172078
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::SetNativeSize()
    void SetNativeSize();
    // protected override System.Void OnPopulateMesh(UnityEngine.UI.VertexHelper toFill)
    // Offset: 0x1172210
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::OnPopulateMesh(UnityEngine.UI.VertexHelper toFill)
    void OnPopulateMesh(UnityEngine::UI::VertexHelper* toFill);
    // protected override System.Void OnEnable()
    // Offset: 0x1175638
    // Implemented from: UnityEngine.UI.MaskableGraphic
    // Base method: System.Void MaskableGraphic::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x1175660
    // Implemented from: UnityEngine.UI.MaskableGraphic
    // Base method: System.Void MaskableGraphic::OnDisable()
    void OnDisable();
    // protected override System.Void UpdateMaterial()
    // Offset: 0x1175768
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::UpdateMaterial()
    void UpdateMaterial();
    // protected override System.Void OnCanvasHierarchyChanged()
    // Offset: 0x1175880
    // Implemented from: UnityEngine.UI.MaskableGraphic
    // Base method: System.Void MaskableGraphic::OnCanvasHierarchyChanged()
    void OnCanvasHierarchyChanged();
    // public System.Void CalculateLayoutInputHorizontal()
    // Offset: 0x117660C
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Void ILayoutElement::CalculateLayoutInputHorizontal()
    void CalculateLayoutInputHorizontal();
    // public System.Void CalculateLayoutInputVertical()
    // Offset: 0x1176610
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Void ILayoutElement::CalculateLayoutInputVertical()
    void CalculateLayoutInputVertical();
    // public System.Single get_minWidth()
    // Offset: 0x1176614
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Single ILayoutElement::get_minWidth()
    float get_minWidth();
    // public System.Single get_preferredWidth()
    // Offset: 0x117661C
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Single ILayoutElement::get_preferredWidth()
    float get_preferredWidth();
    // public System.Single get_flexibleWidth()
    // Offset: 0x1176710
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Single ILayoutElement::get_flexibleWidth()
    float get_flexibleWidth();
    // public System.Single get_minHeight()
    // Offset: 0x1176718
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Single ILayoutElement::get_minHeight()
    float get_minHeight();
    // public System.Single get_preferredHeight()
    // Offset: 0x1176720
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Single ILayoutElement::get_preferredHeight()
    float get_preferredHeight();
    // public System.Single get_flexibleHeight()
    // Offset: 0x1176814
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Single ILayoutElement::get_flexibleHeight()
    float get_flexibleHeight();
    // public System.Int32 get_layoutPriority()
    // Offset: 0x117681C
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Int32 ILayoutElement::get_layoutPriority()
    int get_layoutPriority();
    // public System.Boolean IsRaycastLocationValid(UnityEngine.Vector2 screenPoint, UnityEngine.Camera eventCamera)
    // Offset: 0x1176824
    // Implemented from: UnityEngine.ICanvasRaycastFilter
    // Base method: System.Boolean ICanvasRaycastFilter::IsRaycastLocationValid(UnityEngine.Vector2 screenPoint, UnityEngine.Camera eventCamera)
    bool IsRaycastLocationValid(UnityEngine::Vector2 screenPoint, UnityEngine::Camera* eventCamera);
    // protected override System.Void OnDidApplyAnimationProperties()
    // Offset: 0x117720C
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::OnDidApplyAnimationProperties()
    void OnDidApplyAnimationProperties();
    // static private System.Void .cctor()
    // Offset: 0x1177248
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::.cctor()
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // UnityEngine.UI.Image
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::Image*, "UnityEngine.UI", "Image");
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::Image::Type, "UnityEngine.UI", "Image/Type");
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::Image::FillMethod, "UnityEngine.UI", "Image/FillMethod");
#pragma pack(pop)
