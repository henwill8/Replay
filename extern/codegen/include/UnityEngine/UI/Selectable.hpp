// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.EventSystems.UIBehaviour
#include "UnityEngine/EventSystems/UIBehaviour.hpp"
// Including type: UnityEngine.EventSystems.IMoveHandler
#include "UnityEngine/EventSystems/IMoveHandler.hpp"
// Including type: UnityEngine.EventSystems.IPointerDownHandler
#include "UnityEngine/EventSystems/IPointerDownHandler.hpp"
// Including type: UnityEngine.EventSystems.IPointerUpHandler
#include "UnityEngine/EventSystems/IPointerUpHandler.hpp"
// Including type: UnityEngine.EventSystems.IPointerEnterHandler
#include "UnityEngine/EventSystems/IPointerEnterHandler.hpp"
// Including type: UnityEngine.EventSystems.IPointerExitHandler
#include "UnityEngine/EventSystems/IPointerExitHandler.hpp"
// Including type: UnityEngine.EventSystems.ISelectHandler
#include "UnityEngine/EventSystems/ISelectHandler.hpp"
// Including type: UnityEngine.EventSystems.IDeselectHandler
#include "UnityEngine/EventSystems/IDeselectHandler.hpp"
// Including type: UnityEngine.UI.Navigation
#include "UnityEngine/UI/Navigation.hpp"
// Including type: UnityEngine.UI.ColorBlock
#include "UnityEngine/UI/ColorBlock.hpp"
// Including type: UnityEngine.UI.SpriteState
#include "UnityEngine/UI/SpriteState.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: AnimationTriggers
  class AnimationTriggers;
  // Forward declaring type: Graphic
  class Graphic;
  // Skipping declaration: Transition because it is already included!
  // Forward declaring type: Image
  class Image;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: CanvasGroup
  class CanvasGroup;
  // Forward declaring type: Animator
  class Animator;
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: Vector2
  struct Vector2;
  // Skipping declaration: Color because it is already included!
  // Forward declaring type: Sprite
  class Sprite;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: AxisEventData
  class AxisEventData;
  // Forward declaring type: PointerEventData
  class PointerEventData;
  // Forward declaring type: BaseEventData
  class BaseEventData;
}
// Completed forward declares
// Type namespace: UnityEngine.UI
namespace UnityEngine::UI {
  // Autogenerated type: UnityEngine.UI.Selectable
  class Selectable : public UnityEngine::EventSystems::UIBehaviour, public UnityEngine::EventSystems::IMoveHandler, public UnityEngine::EventSystems::IPointerDownHandler, public UnityEngine::EventSystems::IPointerUpHandler, public UnityEngine::EventSystems::IPointerEnterHandler, public UnityEngine::EventSystems::IPointerExitHandler, public UnityEngine::EventSystems::ISelectHandler, public UnityEngine::EventSystems::IDeselectHandler {
    public:
    // Nested type: UnityEngine::UI::Selectable::Transition
    struct Transition;
    // Nested type: UnityEngine::UI::Selectable::SelectionState
    struct SelectionState;
    // Autogenerated type: UnityEngine.UI.Selectable/Transition
    struct Transition : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: Transition
      constexpr Transition(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.UI.Selectable/Transition None
      static constexpr const int None = 0;
      // Get static field: static public UnityEngine.UI.Selectable/Transition None
      static UnityEngine::UI::Selectable::Transition _get_None();
      // Set static field: static public UnityEngine.UI.Selectable/Transition None
      static void _set_None(UnityEngine::UI::Selectable::Transition value);
      // static field const value: static public UnityEngine.UI.Selectable/Transition ColorTint
      static constexpr const int ColorTint = 1;
      // Get static field: static public UnityEngine.UI.Selectable/Transition ColorTint
      static UnityEngine::UI::Selectable::Transition _get_ColorTint();
      // Set static field: static public UnityEngine.UI.Selectable/Transition ColorTint
      static void _set_ColorTint(UnityEngine::UI::Selectable::Transition value);
      // static field const value: static public UnityEngine.UI.Selectable/Transition SpriteSwap
      static constexpr const int SpriteSwap = 2;
      // Get static field: static public UnityEngine.UI.Selectable/Transition SpriteSwap
      static UnityEngine::UI::Selectable::Transition _get_SpriteSwap();
      // Set static field: static public UnityEngine.UI.Selectable/Transition SpriteSwap
      static void _set_SpriteSwap(UnityEngine::UI::Selectable::Transition value);
      // static field const value: static public UnityEngine.UI.Selectable/Transition Animation
      static constexpr const int Animation = 3;
      // Get static field: static public UnityEngine.UI.Selectable/Transition Animation
      static UnityEngine::UI::Selectable::Transition _get_Animation();
      // Set static field: static public UnityEngine.UI.Selectable/Transition Animation
      static void _set_Animation(UnityEngine::UI::Selectable::Transition value);
    }; // UnityEngine.UI.Selectable/Transition
    // private UnityEngine.UI.Navigation m_Navigation
    // Offset: 0x18
    UnityEngine::UI::Navigation m_Navigation;
    // private UnityEngine.UI.Selectable/Transition m_Transition
    // Offset: 0x40
    UnityEngine::UI::Selectable::Transition m_Transition;
    // private UnityEngine.UI.ColorBlock m_Colors
    // Offset: 0x44
    UnityEngine::UI::ColorBlock m_Colors;
    // private UnityEngine.UI.SpriteState m_SpriteState
    // Offset: 0xA0
    UnityEngine::UI::SpriteState m_SpriteState;
    // private UnityEngine.UI.AnimationTriggers m_AnimationTriggers
    // Offset: 0xC0
    UnityEngine::UI::AnimationTriggers* m_AnimationTriggers;
    // private System.Boolean m_Interactable
    // Offset: 0xC8
    bool m_Interactable;
    // private UnityEngine.UI.Graphic m_TargetGraphic
    // Offset: 0xD0
    UnityEngine::UI::Graphic* m_TargetGraphic;
    // private System.Boolean m_GroupsAllowInteraction
    // Offset: 0xD8
    bool m_GroupsAllowInteraction;
    // protected System.Int32 m_CurrentIndex
    // Offset: 0xDC
    int m_CurrentIndex;
    // private System.Boolean <isPointerInside>k__BackingField
    // Offset: 0xE0
    bool isPointerInside;
    // private System.Boolean <isPointerDown>k__BackingField
    // Offset: 0xE1
    bool isPointerDown;
    // private System.Boolean <hasSelection>k__BackingField
    // Offset: 0xE2
    bool hasSelection;
    // private readonly System.Collections.Generic.List`1<UnityEngine.CanvasGroup> m_CanvasGroupCache
    // Offset: 0xE8
    System::Collections::Generic::List_1<UnityEngine::CanvasGroup*>* m_CanvasGroupCache;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get static field: static protected UnityEngine.UI.Selectable[] s_Selectables
    static ::Array<UnityEngine::UI::Selectable*>* _get_s_Selectables();
    // Set static field: static protected UnityEngine.UI.Selectable[] s_Selectables
    static void _set_s_Selectables(::Array<UnityEngine::UI::Selectable*>* value);
    // Get static field: static protected System.Int32 s_SelectableCount
    static int _get_s_SelectableCount();
    // Set static field: static protected System.Int32 s_SelectableCount
    static void _set_s_SelectableCount(int value);
    // static public UnityEngine.UI.Selectable[] get_allSelectablesArray()
    // Offset: 0x1211920
    static ::Array<UnityEngine::UI::Selectable*>* get_allSelectablesArray();
    // static public System.Int32 get_allSelectableCount()
    // Offset: 0x12119C0
    static int get_allSelectableCount();
    // static public System.Collections.Generic.List`1<UnityEngine.UI.Selectable> get_allSelectables()
    // Offset: 0x1211A28
    static System::Collections::Generic::List_1<UnityEngine::UI::Selectable*>* get_allSelectables();
    // static public System.Int32 AllSelectablesNoAlloc(UnityEngine.UI.Selectable[] selectables)
    // Offset: 0x1211ABC
    static int AllSelectablesNoAlloc(::Array<UnityEngine::UI::Selectable*>* selectables);
    // public UnityEngine.UI.Navigation get_navigation()
    // Offset: 0x1211BA0
    UnityEngine::UI::Navigation get_navigation();
    // public System.Void set_navigation(UnityEngine.UI.Navigation value)
    // Offset: 0x1211BB8
    void set_navigation(UnityEngine::UI::Navigation value);
    // public UnityEngine.UI.Selectable/Transition get_transition()
    // Offset: 0x1211CBC
    UnityEngine::UI::Selectable::Transition get_transition();
    // public System.Void set_transition(UnityEngine.UI.Selectable/Transition value)
    // Offset: 0x1211CC4
    void set_transition(UnityEngine::UI::Selectable::Transition value);
    // public UnityEngine.UI.ColorBlock get_colors()
    // Offset: 0x1211D40
    UnityEngine::UI::ColorBlock get_colors();
    // public System.Void set_colors(UnityEngine.UI.ColorBlock value)
    // Offset: 0x1211D50
    void set_colors(UnityEngine::UI::ColorBlock value);
    // public UnityEngine.UI.SpriteState get_spriteState()
    // Offset: 0x1211DF0
    UnityEngine::UI::SpriteState get_spriteState();
    // public System.Void set_spriteState(UnityEngine.UI.SpriteState value)
    // Offset: 0x1211DFC
    void set_spriteState(UnityEngine::UI::SpriteState value);
    // public UnityEngine.UI.AnimationTriggers get_animationTriggers()
    // Offset: 0x1211E84
    UnityEngine::UI::AnimationTriggers* get_animationTriggers();
    // public System.Void set_animationTriggers(UnityEngine.UI.AnimationTriggers value)
    // Offset: 0x1211E8C
    void set_animationTriggers(UnityEngine::UI::AnimationTriggers* value);
    // public UnityEngine.UI.Graphic get_targetGraphic()
    // Offset: 0x1211F08
    UnityEngine::UI::Graphic* get_targetGraphic();
    // public System.Void set_targetGraphic(UnityEngine.UI.Graphic value)
    // Offset: 0x1211F10
    void set_targetGraphic(UnityEngine::UI::Graphic* value);
    // public System.Boolean get_interactable()
    // Offset: 0x1211F8C
    bool get_interactable();
    // public System.Void set_interactable(System.Boolean value)
    // Offset: 0x1211F94
    void set_interactable(bool value);
    // private System.Boolean get_isPointerInside()
    // Offset: 0x121211C
    bool get_isPointerInside();
    // private System.Void set_isPointerInside(System.Boolean value)
    // Offset: 0x1212124
    void set_isPointerInside(bool value);
    // private System.Boolean get_isPointerDown()
    // Offset: 0x1212130
    bool get_isPointerDown();
    // private System.Void set_isPointerDown(System.Boolean value)
    // Offset: 0x1212138
    void set_isPointerDown(bool value);
    // private System.Boolean get_hasSelection()
    // Offset: 0x1212144
    bool get_hasSelection();
    // private System.Void set_hasSelection(System.Boolean value)
    // Offset: 0x121214C
    void set_hasSelection(bool value);
    // public UnityEngine.UI.Image get_image()
    // Offset: 0x1212158
    UnityEngine::UI::Image* get_image();
    // public System.Void set_image(UnityEngine.UI.Image value)
    // Offset: 0x12121DC
    void set_image(UnityEngine::UI::Image* value);
    // public UnityEngine.Animator get_animator()
    // Offset: 0x12121E4
    UnityEngine::Animator* get_animator();
    // public System.Boolean IsInteractable()
    // Offset: 0x121249C
    bool IsInteractable();
    // private System.Void OnSetProperty()
    // Offset: 0x1211C4C
    void OnSetProperty();
    // protected UnityEngine.UI.Selectable/SelectionState get_currentSelectionState()
    // Offset: 0x12124C0
    UnityEngine::UI::Selectable::SelectionState get_currentSelectionState();
    // protected System.Void InstantClearState()
    // Offset: 0x1212550
    void InstantClearState();
    // protected System.Void DoStateTransition(UnityEngine.UI.Selectable/SelectionState state, System.Boolean instant)
    // Offset: 0x1212934
    void DoStateTransition(UnityEngine::UI::Selectable::SelectionState state, bool instant);
    // public UnityEngine.UI.Selectable FindSelectable(UnityEngine.Vector3 dir)
    // Offset: 0x1212AD8
    UnityEngine::UI::Selectable* FindSelectable(UnityEngine::Vector3 dir);
    // static private UnityEngine.Vector3 GetPointOnRectEdge(UnityEngine.RectTransform rect, UnityEngine.Vector2 dir)
    // Offset: 0x1212F5C
    static UnityEngine::Vector3 GetPointOnRectEdge(UnityEngine::RectTransform* rect, UnityEngine::Vector2 dir);
    // private System.Void Navigate(UnityEngine.EventSystems.AxisEventData eventData, UnityEngine.UI.Selectable sel)
    // Offset: 0x1213190
    void Navigate(UnityEngine::EventSystems::AxisEventData* eventData, UnityEngine::UI::Selectable* sel);
    // public UnityEngine.UI.Selectable FindSelectableOnLeft()
    // Offset: 0x1210FB4
    UnityEngine::UI::Selectable* FindSelectableOnLeft();
    // public UnityEngine.UI.Selectable FindSelectableOnRight()
    // Offset: 0x1211118
    UnityEngine::UI::Selectable* FindSelectableOnRight();
    // public UnityEngine.UI.Selectable FindSelectableOnUp()
    // Offset: 0x121127C
    UnityEngine::UI::Selectable* FindSelectableOnUp();
    // public UnityEngine.UI.Selectable FindSelectableOnDown()
    // Offset: 0x12113E0
    UnityEngine::UI::Selectable* FindSelectableOnDown();
    // private System.Void StartColorTween(UnityEngine.Color targetColor, System.Boolean instant)
    // Offset: 0x12125E0
    void StartColorTween(UnityEngine::Color targetColor, bool instant);
    // private System.Void DoSpriteSwap(UnityEngine.Sprite newSprite)
    // Offset: 0x12126D8
    void DoSpriteSwap(UnityEngine::Sprite* newSprite);
    // private System.Void TriggerAnimation(System.String triggername)
    // Offset: 0x1212790
    void TriggerAnimation(::Il2CppString* triggername);
    // protected System.Boolean IsHighlighted()
    // Offset: 0x1213258
    bool IsHighlighted();
    // protected System.Boolean IsPressed()
    // Offset: 0x12132C0
    bool IsPressed();
    // private System.Void EvaluateAndTransitionToSelectionState()
    // Offset: 0x1213318
    void EvaluateAndTransitionToSelectionState();
    // public System.Void Select()
    // Offset: 0x12133E8
    void Select();
    // protected System.Void .ctor()
    // Offset: 0x120FA4C
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static Selectable* New_ctor();
    // protected override System.Void Awake()
    // Offset: 0x1212234
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::Awake()
    void Awake();
    // protected override System.Void OnCanvasGroupChanged()
    // Offset: 0x12122E8
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnCanvasGroupChanged()
    void OnCanvasGroupChanged();
    // protected override System.Void OnDidApplyAnimationProperties()
    // Offset: 0x12124BC
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnDidApplyAnimationProperties()
    void OnDidApplyAnimationProperties();
    // protected override System.Void OnEnable()
    // Offset: 0x120FE6C
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnEnable()
    void OnEnable();
    // protected override System.Void OnTransformParentChanged()
    // Offset: 0x121251C
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnTransformParentChanged()
    void OnTransformParentChanged();
    // protected override System.Void OnDisable()
    // Offset: 0x1210094
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnDisable()
    void OnDisable();
    // public System.Void OnMove(UnityEngine.EventSystems.AxisEventData eventData)
    // Offset: 0x1210EF8
    // Implemented from: UnityEngine.EventSystems.IMoveHandler
    // Base method: System.Void IMoveHandler::OnMove(UnityEngine.EventSystems.AxisEventData eventData)
    void OnMove(UnityEngine::EventSystems::AxisEventData* eventData);
    // public System.Void OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x1210A14
    // Implemented from: UnityEngine.EventSystems.IPointerDownHandler
    // Base method: System.Void IPointerDownHandler::OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData)
    void OnPointerDown(UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnPointerUp(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x1210C40
    // Implemented from: UnityEngine.EventSystems.IPointerUpHandler
    // Base method: System.Void IPointerUpHandler::OnPointerUp(UnityEngine.EventSystems.PointerEventData eventData)
    void OnPointerUp(UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnPointerEnter(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x12133C0
    // Implemented from: UnityEngine.EventSystems.IPointerEnterHandler
    // Base method: System.Void IPointerEnterHandler::OnPointerEnter(UnityEngine.EventSystems.PointerEventData eventData)
    void OnPointerEnter(UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnPointerExit(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x12133CC
    // Implemented from: UnityEngine.EventSystems.IPointerExitHandler
    // Base method: System.Void IPointerExitHandler::OnPointerExit(UnityEngine.EventSystems.PointerEventData eventData)
    void OnPointerExit(UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnSelect(UnityEngine.EventSystems.BaseEventData eventData)
    // Offset: 0x12133D4
    // Implemented from: UnityEngine.EventSystems.ISelectHandler
    // Base method: System.Void ISelectHandler::OnSelect(UnityEngine.EventSystems.BaseEventData eventData)
    void OnSelect(UnityEngine::EventSystems::BaseEventData* eventData);
    // public System.Void OnDeselect(UnityEngine.EventSystems.BaseEventData eventData)
    // Offset: 0x12133E0
    // Implemented from: UnityEngine.EventSystems.IDeselectHandler
    // Base method: System.Void IDeselectHandler::OnDeselect(UnityEngine.EventSystems.BaseEventData eventData)
    void OnDeselect(UnityEngine::EventSystems::BaseEventData* eventData);
    // static private System.Void .cctor()
    // Offset: 0x1213514
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // UnityEngine.UI.Selectable
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::Selectable*, "UnityEngine.UI", "Selectable");
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::Selectable::Transition, "UnityEngine.UI", "Selectable/Transition");
#pragma pack(pop)
