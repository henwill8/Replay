// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Collections.Generic.IList`1
#include "System/Collections/Generic/IList_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: IEnumerator`1<T>
  template<typename T>
  class IEnumerator_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Predicate`1<T>
  template<typename T>
  class Predicate_1;
  // Forward declaring type: Comparison`1<T>
  template<typename T>
  class Comparison_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: UnityEngine.UI.Collections
namespace UnityEngine::UI::Collections {
  // Autogenerated type: UnityEngine.UI.Collections.IndexedSet`1
  template<typename T>
  class IndexedSet_1 : public ::Il2CppObject, public System::Collections::Generic::IList_1<T> {
    public:
    // private readonly System.Collections.Generic.List`1<T> m_List
    // Offset: 0x0
    System::Collections::Generic::List_1<T>* m_List;
    // private System.Collections.Generic.Dictionary`2<T,System.Int32> m_Dictionary
    // Offset: 0x0
    System::Collections::Generic::Dictionary_2<T, int>* m_Dictionary;
    // public System.Boolean AddUnique(T item)
    // Offset: 0xFFFFFFFF
    bool AddUnique(T item) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "AddUnique", item));
    }
    // public System.Void RemoveAll(System.Predicate`1<T> match)
    // Offset: 0xFFFFFFFF
    void RemoveAll(System::Predicate_1<T>* match) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "RemoveAll", match));
    }
    // public System.Void Sort(System.Comparison`1<T> sortLayoutFunction)
    // Offset: 0xFFFFFFFF
    void Sort(System::Comparison_1<T>* sortLayoutFunction) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Sort", sortLayoutFunction));
    }
    // public System.Void Add(T item)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Void ICollection`1::Add(T item)
    void Add(T item) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Add", item));
    }
    // Creating proxy method: System_Collections_Generic_ICollection_1_Add
    // Maps to method: Add
    void System_Collections_Generic_ICollection_1_Add(T item) {
      Add(item);
    }
    // public System.Boolean Remove(T item)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Boolean ICollection`1::Remove(T item)
    bool Remove(T item) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "Remove", item));
    }
    // Creating proxy method: System_Collections_Generic_ICollection_1_Remove
    // Maps to method: Remove
    bool System_Collections_Generic_ICollection_1_Remove(T item) {
      return Remove(item);
    }
    // public System.Collections.Generic.IEnumerator`1<T> GetEnumerator()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.IEnumerable`1
    // Base method: System.Collections.Generic.IEnumerator`1<T> IEnumerable`1::GetEnumerator()
    System::Collections::Generic::IEnumerator_1<T>* GetEnumerator() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::Generic::IEnumerator_1<T>*>(this, "GetEnumerator"));
    }
    // Creating proxy method: System_Collections_Generic_IEnumerable_1_GetEnumerator
    // Maps to method: GetEnumerator
    System::Collections::Generic::IEnumerator_1<T>* System_Collections_Generic_IEnumerable_1_GetEnumerator() {
      return GetEnumerator();
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.IEnumerable
    // Base method: System.Collections.IEnumerator IEnumerable::GetEnumerator()
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::IEnumerator*>(this, "System.Collections.IEnumerable.GetEnumerator"));
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Void ICollection`1::Clear()
    void Clear() {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Clear"));
    }
    // Creating proxy method: System_Collections_Generic_ICollection_1_Clear
    // Maps to method: Clear
    void System_Collections_Generic_ICollection_1_Clear() {
      Clear();
    }
    // public System.Boolean Contains(T item)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Boolean ICollection`1::Contains(T item)
    bool Contains(T item) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "Contains", item));
    }
    // Creating proxy method: System_Collections_Generic_ICollection_1_Contains
    // Maps to method: Contains
    bool System_Collections_Generic_ICollection_1_Contains(T item) {
      return Contains(item);
    }
    // public System.Void CopyTo(T[] array, System.Int32 arrayIndex)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Void ICollection`1::CopyTo(T[] array, System.Int32 arrayIndex)
    void CopyTo(::Array<T>* array, int arrayIndex) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "CopyTo", array, arrayIndex));
    }
    // Creating proxy method: System_Collections_Generic_ICollection_1_CopyTo
    // Maps to method: CopyTo
    void System_Collections_Generic_ICollection_1_CopyTo(::Array<T>* array, int arrayIndex) {
      CopyTo(array, arrayIndex);
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Int32 ICollection`1::get_Count()
    int get_Count() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_Count"));
    }
    // Creating proxy method: System_Collections_Generic_ICollection_1_get_Count
    // Maps to method: get_Count
    int System_Collections_Generic_ICollection_1_get_Count() {
      return get_Count();
    }
    // public System.Boolean get_IsReadOnly()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.ICollection`1
    // Base method: System.Boolean ICollection`1::get_IsReadOnly()
    bool get_IsReadOnly() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "get_IsReadOnly"));
    }
    // Creating proxy method: System_Collections_Generic_ICollection_1_get_IsReadOnly
    // Maps to method: get_IsReadOnly
    bool System_Collections_Generic_ICollection_1_get_IsReadOnly() {
      return get_IsReadOnly();
    }
    // public System.Int32 IndexOf(T item)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.IList`1
    // Base method: System.Int32 IList`1::IndexOf(T item)
    int IndexOf(T item) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "IndexOf", item));
    }
    // Creating proxy method: System_Collections_Generic_IList_1_IndexOf
    // Maps to method: IndexOf
    int System_Collections_Generic_IList_1_IndexOf(T item) {
      return IndexOf(item);
    }
    // public System.Void Insert(System.Int32 index, T item)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.IList`1
    // Base method: System.Void IList`1::Insert(System.Int32 index, T item)
    void Insert(int index, T item) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Insert", index, item));
    }
    // Creating proxy method: System_Collections_Generic_IList_1_Insert
    // Maps to method: Insert
    void System_Collections_Generic_IList_1_Insert(int index, T item) {
      Insert(index, item);
    }
    // public System.Void RemoveAt(System.Int32 index)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.IList`1
    // Base method: System.Void IList`1::RemoveAt(System.Int32 index)
    void RemoveAt(int index) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "RemoveAt", index));
    }
    // Creating proxy method: System_Collections_Generic_IList_1_RemoveAt
    // Maps to method: RemoveAt
    void System_Collections_Generic_IList_1_RemoveAt(int index) {
      RemoveAt(index);
    }
    // public T get_Item(System.Int32 index)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.IList`1
    // Base method: T IList`1::get_Item(System.Int32 index)
    T get_Item(int index) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<T>(this, "get_Item", index));
    }
    // Creating proxy method: System_Collections_Generic_IList_1_get_Item
    // Maps to method: get_Item
    T System_Collections_Generic_IList_1_get_Item(int index) {
      return get_Item(index);
    }
    // public System.Void set_Item(System.Int32 index, T value)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.IList`1
    // Base method: System.Void IList`1::set_Item(System.Int32 index, T value)
    void set_Item(int index, T value) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_Item", index, value));
    }
    // Creating proxy method: System_Collections_Generic_IList_1_set_Item
    // Maps to method: set_Item
    void System_Collections_Generic_IList_1_set_Item(int index, T value) {
      set_Item(index, value);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static IndexedSet_1<T>* New_ctor() {
      return THROW_UNLESS(il2cpp_utils::New<IndexedSet_1<T>*>());
    }
  }; // UnityEngine.UI.Collections.IndexedSet`1
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(UnityEngine::UI::Collections::IndexedSet_1, "UnityEngine.UI.Collections", "IndexedSet`1");
#pragma pack(pop)
