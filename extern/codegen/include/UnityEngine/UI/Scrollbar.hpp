// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.UI.Selectable
#include "UnityEngine/UI/Selectable.hpp"
// Including type: UnityEngine.EventSystems.IBeginDragHandler
#include "UnityEngine/EventSystems/IBeginDragHandler.hpp"
// Including type: UnityEngine.EventSystems.IDragHandler
#include "UnityEngine/EventSystems/IDragHandler.hpp"
// Including type: UnityEngine.EventSystems.IInitializePotentialDragHandler
#include "UnityEngine/EventSystems/IInitializePotentialDragHandler.hpp"
// Including type: UnityEngine.UI.ICanvasElement
#include "UnityEngine/UI/ICanvasElement.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.DrivenRectTransformTracker
#include "UnityEngine/DrivenRectTransformTracker.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Coroutine
  class Coroutine;
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Skipping declaration: Direction because it is already included!
  // Forward declaring type: CanvasUpdate
  struct CanvasUpdate;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: PointerEventData
  class PointerEventData;
  // Forward declaring type: AxisEventData
  class AxisEventData;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: UnityEngine.UI
namespace UnityEngine::UI {
  // Size: 0x132
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UI.Scrollbar
  // [] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: CEF11C
  // [ExecuteAlways] Offset: CEF11C
  // [RequireComponent] Offset: CEF11C
  class Scrollbar : public UnityEngine::UI::Selectable/*, public UnityEngine::EventSystems::IBeginDragHandler, public UnityEngine::EventSystems::IDragHandler, public UnityEngine::EventSystems::IInitializePotentialDragHandler, public UnityEngine::UI::ICanvasElement*/ {
    public:
    // Nested type: UnityEngine::UI::Scrollbar::Direction
    struct Direction;
    // Nested type: UnityEngine::UI::Scrollbar::ScrollEvent
    class ScrollEvent;
    // Nested type: UnityEngine::UI::Scrollbar::Axis
    struct Axis;
    // Nested type: UnityEngine::UI::Scrollbar::$ClickRepeat$d__58
    class $ClickRepeat$d__58;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.UI.Scrollbar/Direction
    // [] Offset: FFFFFFFF
    struct Direction/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: Direction
      constexpr Direction(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.UI.Scrollbar/Direction LeftToRight
      static constexpr const int LeftToRight = 0;
      // Get static field: static public UnityEngine.UI.Scrollbar/Direction LeftToRight
      static UnityEngine::UI::Scrollbar::Direction _get_LeftToRight();
      // Set static field: static public UnityEngine.UI.Scrollbar/Direction LeftToRight
      static void _set_LeftToRight(UnityEngine::UI::Scrollbar::Direction value);
      // static field const value: static public UnityEngine.UI.Scrollbar/Direction RightToLeft
      static constexpr const int RightToLeft = 1;
      // Get static field: static public UnityEngine.UI.Scrollbar/Direction RightToLeft
      static UnityEngine::UI::Scrollbar::Direction _get_RightToLeft();
      // Set static field: static public UnityEngine.UI.Scrollbar/Direction RightToLeft
      static void _set_RightToLeft(UnityEngine::UI::Scrollbar::Direction value);
      // static field const value: static public UnityEngine.UI.Scrollbar/Direction BottomToTop
      static constexpr const int BottomToTop = 2;
      // Get static field: static public UnityEngine.UI.Scrollbar/Direction BottomToTop
      static UnityEngine::UI::Scrollbar::Direction _get_BottomToTop();
      // Set static field: static public UnityEngine.UI.Scrollbar/Direction BottomToTop
      static void _set_BottomToTop(UnityEngine::UI::Scrollbar::Direction value);
      // static field const value: static public UnityEngine.UI.Scrollbar/Direction TopToBottom
      static constexpr const int TopToBottom = 3;
      // Get static field: static public UnityEngine.UI.Scrollbar/Direction TopToBottom
      static UnityEngine::UI::Scrollbar::Direction _get_TopToBottom();
      // Set static field: static public UnityEngine.UI.Scrollbar/Direction TopToBottom
      static void _set_TopToBottom(UnityEngine::UI::Scrollbar::Direction value);
    }; // UnityEngine.UI.Scrollbar/Direction
    #pragma pack(pop)
    static check_size<sizeof(Scrollbar::Direction), 0 + sizeof(int)> __UnityEngine_UI_Scrollbar_DirectionSizeCheck;
    static_assert(sizeof(Scrollbar::Direction) == 0x4);
    // private UnityEngine.RectTransform m_HandleRect
    // Size: 0x8
    // Offset: 0xF0
    UnityEngine::RectTransform* m_HandleRect;
    // Field size check
    static_assert(sizeof(UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.UI.Scrollbar/Direction m_Direction
    // Size: 0x4
    // Offset: 0xF8
    UnityEngine::UI::Scrollbar::Direction m_Direction;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Scrollbar::Direction) == 0x4);
    // [RangeAttribute] Offset: 0xCF0E7C
    // private System.Single m_Value
    // Size: 0x4
    // Offset: 0xFC
    float m_Value;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xCF0EBC
    // private System.Single m_Size
    // Size: 0x4
    // Offset: 0x100
    float m_Size;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xCF0EFC
    // private System.Int32 m_NumberOfSteps
    // Size: 0x4
    // Offset: 0x104
    int m_NumberOfSteps;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [SpaceAttribute] Offset: 0xCF0F3C
    // private UnityEngine.UI.Scrollbar/ScrollEvent m_OnValueChanged
    // Size: 0x8
    // Offset: 0x108
    UnityEngine::UI::Scrollbar::ScrollEvent* m_OnValueChanged;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Scrollbar::ScrollEvent*) == 0x8);
    // private UnityEngine.RectTransform m_ContainerRect
    // Size: 0x8
    // Offset: 0x110
    UnityEngine::RectTransform* m_ContainerRect;
    // Field size check
    static_assert(sizeof(UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.Vector2 m_Offset
    // Size: 0x8
    // Offset: 0x118
    UnityEngine::Vector2 m_Offset;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector2) == 0x8);
    // private UnityEngine.DrivenRectTransformTracker m_Tracker
    // Size: 0x1
    // Offset: 0x120
    UnityEngine::DrivenRectTransformTracker m_Tracker;
    // Field size check
    static_assert(sizeof(UnityEngine::DrivenRectTransformTracker) == 0x1);
    // Padding between fields: m_Tracker and: m_PointerDownRepeat
    char __padding8[0x7] = {};
    // private UnityEngine.Coroutine m_PointerDownRepeat
    // Size: 0x8
    // Offset: 0x128
    UnityEngine::Coroutine* m_PointerDownRepeat;
    // Field size check
    static_assert(sizeof(UnityEngine::Coroutine*) == 0x8);
    // private System.Boolean isPointerDownAndNotDragging
    // Size: 0x1
    // Offset: 0x130
    bool isPointerDownAndNotDragging;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_DelayedUpdateVisuals
    // Size: 0x1
    // Offset: 0x131
    bool m_DelayedUpdateVisuals;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: Scrollbar
    Scrollbar(UnityEngine::RectTransform* m_HandleRect_ = {}, UnityEngine::UI::Scrollbar::Direction m_Direction_ = {}, float m_Value_ = {}, float m_Size_ = {}, int m_NumberOfSteps_ = {}, UnityEngine::UI::Scrollbar::ScrollEvent* m_OnValueChanged_ = {}, UnityEngine::RectTransform* m_ContainerRect_ = {}, UnityEngine::Vector2 m_Offset_ = {}, UnityEngine::DrivenRectTransformTracker m_Tracker_ = {}, UnityEngine::Coroutine* m_PointerDownRepeat_ = {}, bool isPointerDownAndNotDragging_ = {}, bool m_DelayedUpdateVisuals_ = {}) noexcept : m_HandleRect{m_HandleRect_}, m_Direction{m_Direction_}, m_Value{m_Value_}, m_Size{m_Size_}, m_NumberOfSteps{m_NumberOfSteps_}, m_OnValueChanged{m_OnValueChanged_}, m_ContainerRect{m_ContainerRect_}, m_Offset{m_Offset_}, m_Tracker{m_Tracker_}, m_PointerDownRepeat{m_PointerDownRepeat_}, isPointerDownAndNotDragging{isPointerDownAndNotDragging_}, m_DelayedUpdateVisuals{m_DelayedUpdateVisuals_} {}
    // Creating interface conversion operator: operator UnityEngine::EventSystems::IBeginDragHandler
    operator UnityEngine::EventSystems::IBeginDragHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::IBeginDragHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::EventSystems::IDragHandler
    operator UnityEngine::EventSystems::IDragHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::IDragHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::EventSystems::IInitializePotentialDragHandler
    operator UnityEngine::EventSystems::IInitializePotentialDragHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::IInitializePotentialDragHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::UI::ICanvasElement
    operator UnityEngine::UI::ICanvasElement() noexcept {
      return *reinterpret_cast<UnityEngine::UI::ICanvasElement*>(this);
    }
    // public UnityEngine.RectTransform get_handleRect()
    // Offset: 0x18F1678
    UnityEngine::RectTransform* get_handleRect();
    // public System.Void set_handleRect(UnityEngine.RectTransform value)
    // Offset: 0x18F1680
    void set_handleRect(UnityEngine::RectTransform* value);
    // public UnityEngine.UI.Scrollbar/Direction get_direction()
    // Offset: 0x18F19E4
    UnityEngine::UI::Scrollbar::Direction get_direction();
    // public System.Void set_direction(UnityEngine.UI.Scrollbar/Direction value)
    // Offset: 0x18F19EC
    void set_direction(UnityEngine::UI::Scrollbar::Direction value);
    // public System.Single get_value()
    // Offset: 0x18F1C98
    float get_value();
    // public System.Void set_value(System.Single value)
    // Offset: 0x18EFFC4
    void set_value(float value);
    // public System.Void SetValueWithoutNotify(System.Single input)
    // Offset: 0x18F1E70
    void SetValueWithoutNotify(float input);
    // public System.Single get_size()
    // Offset: 0x18F1E78
    float get_size();
    // public System.Void set_size(System.Single value)
    // Offset: 0x18EFDCC
    void set_size(float value);
    // public System.Int32 get_numberOfSteps()
    // Offset: 0x18F1E80
    int get_numberOfSteps();
    // public System.Void set_numberOfSteps(System.Int32 value)
    // Offset: 0x18F1E88
    void set_numberOfSteps(int value);
    // public UnityEngine.UI.Scrollbar/ScrollEvent get_onValueChanged()
    // Offset: 0x18F1F14
    UnityEngine::UI::Scrollbar::ScrollEvent* get_onValueChanged();
    // public System.Void set_onValueChanged(UnityEngine.UI.Scrollbar/ScrollEvent value)
    // Offset: 0x18F1F1C
    void set_onValueChanged(UnityEngine::UI::Scrollbar::ScrollEvent* value);
    // private System.Single get_stepSize()
    // Offset: 0x18F1F2C
    float get_stepSize();
    // protected System.Void Update()
    // Offset: 0x18F2340
    void Update();
    // private System.Void UpdateCachedReferences()
    // Offset: 0x18F1704
    void UpdateCachedReferences();
    // private System.Void Set(System.Single input, System.Boolean sendCallback)
    // Offset: 0x18F1DA4
    void Set(float input, bool sendCallback);
    // private UnityEngine.UI.Scrollbar/Axis get_axis()
    // Offset: 0x18F239C
    UnityEngine::UI::Scrollbar::Axis get_axis();
    // private System.Boolean get_reverseValue()
    // Offset: 0x18F23AC
    bool get_reverseValue();
    // private System.Void UpdateVisuals()
    // Offset: 0x18F1808
    void UpdateVisuals();
    // private System.Void UpdateDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x18F23C0
    void UpdateDrag(UnityEngine::EventSystems::PointerEventData* eventData);
    // private System.Void DoUpdateDrag(UnityEngine.Vector2 handleCorner, System.Single remainingSize)
    // Offset: 0x18F2674
    void DoUpdateDrag(UnityEngine::Vector2 handleCorner, float remainingSize);
    // private System.Boolean MayDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x18F27B8
    bool MayDrag(UnityEngine::EventSystems::PointerEventData* eventData);
    // protected System.Collections.IEnumerator ClickRepeat(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x18F2D64
    System::Collections::IEnumerator* ClickRepeat(UnityEngine::EventSystems::PointerEventData* eventData);
    // protected System.Collections.IEnumerator ClickRepeat(UnityEngine.Vector2 screenPosition, UnityEngine.Camera camera)
    // Offset: 0x18F2CB8
    System::Collections::IEnumerator* ClickRepeat(UnityEngine::Vector2 screenPosition, UnityEngine::Camera* camera);
    // public System.Void SetDirection(UnityEngine.UI.Scrollbar/Direction direction, System.Boolean includeRectLayouts)
    // Offset: 0x18F36F8
    void SetDirection(UnityEngine::UI::Scrollbar::Direction direction, bool includeRectLayouts);
    // protected System.Void .ctor()
    // Offset: 0x18F1A68
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::.ctor()
    // Base method: System.Void UIBehaviour::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Scrollbar* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UI::Scrollbar::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Scrollbar*, creationType>()));
    }
    // public System.Void Rebuild(UnityEngine.UI.CanvasUpdate executing)
    // Offset: 0x18F1F58
    // Implemented from: UnityEngine.UI.ICanvasElement
    // Base method: System.Void ICanvasElement::Rebuild(UnityEngine.UI.CanvasUpdate executing)
    void Rebuild(UnityEngine::UI::CanvasUpdate executing);
    // public System.Void LayoutComplete()
    // Offset: 0x18F1F5C
    // Implemented from: UnityEngine.UI.ICanvasElement
    // Base method: System.Void ICanvasElement::LayoutComplete()
    void LayoutComplete();
    // public System.Void GraphicUpdateComplete()
    // Offset: 0x18F1F60
    // Implemented from: UnityEngine.UI.ICanvasElement
    // Base method: System.Void ICanvasElement::GraphicUpdateComplete()
    void GraphicUpdateComplete();
    // protected override System.Void OnEnable()
    // Offset: 0x18F1F64
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x18F219C
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnDisable()
    void OnDisable();
    // protected override System.Void OnRectTransformDimensionsChange()
    // Offset: 0x18F2354
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::OnRectTransformDimensionsChange()
    void OnRectTransformDimensionsChange();
    // public System.Void OnBeginDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x18F2820
    // Implemented from: UnityEngine.EventSystems.IBeginDragHandler
    // Base method: System.Void IBeginDragHandler::OnBeginDrag(UnityEngine.EventSystems.PointerEventData eventData)
    void OnBeginDrag(UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x18F2A2C
    // Implemented from: UnityEngine.EventSystems.IDragHandler
    // Base method: System.Void IDragHandler::OnDrag(UnityEngine.EventSystems.PointerEventData eventData)
    void OnDrag(UnityEngine::EventSystems::PointerEventData* eventData);
    // public override System.Void OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x18F2AD8
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData)
    void OnPointerDown(UnityEngine::EventSystems::PointerEventData* eventData);
    // public override System.Void OnPointerUp(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x18F2DDC
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnPointerUp(UnityEngine.EventSystems.PointerEventData eventData)
    void OnPointerUp(UnityEngine::EventSystems::PointerEventData* eventData);
    // public override System.Void OnMove(UnityEngine.EventSystems.AxisEventData eventData)
    // Offset: 0x18F2E24
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnMove(UnityEngine.EventSystems.AxisEventData eventData)
    void OnMove(UnityEngine::EventSystems::AxisEventData* eventData);
    // public override UnityEngine.UI.Selectable FindSelectableOnLeft()
    // Offset: 0x18F3150
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: UnityEngine.UI.Selectable Selectable::FindSelectableOnLeft()
    UnityEngine::UI::Selectable* FindSelectableOnLeft();
    // public override UnityEngine.UI.Selectable FindSelectableOnRight()
    // Offset: 0x18F32B4
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: UnityEngine.UI.Selectable Selectable::FindSelectableOnRight()
    UnityEngine::UI::Selectable* FindSelectableOnRight();
    // public override UnityEngine.UI.Selectable FindSelectableOnUp()
    // Offset: 0x18F3418
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: UnityEngine.UI.Selectable Selectable::FindSelectableOnUp()
    UnityEngine::UI::Selectable* FindSelectableOnUp();
    // public override UnityEngine.UI.Selectable FindSelectableOnDown()
    // Offset: 0x18F357C
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: UnityEngine.UI.Selectable Selectable::FindSelectableOnDown()
    UnityEngine::UI::Selectable* FindSelectableOnDown();
    // public System.Void OnInitializePotentialDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x18F36E0
    // Implemented from: UnityEngine.EventSystems.IInitializePotentialDragHandler
    // Base method: System.Void IInitializePotentialDragHandler::OnInitializePotentialDrag(UnityEngine.EventSystems.PointerEventData eventData)
    void OnInitializePotentialDrag(UnityEngine::EventSystems::PointerEventData* eventData);
    // private UnityEngine.Transform UnityEngine.UI.ICanvasElement.get_transform()
    // Offset: 0x18F388C
    // Implemented from: UnityEngine.UI.ICanvasElement
    // Base method: UnityEngine.Transform ICanvasElement::get_transform()
    UnityEngine::Transform* UnityEngine_UI_ICanvasElement_get_transform();
  }; // UnityEngine.UI.Scrollbar
  #pragma pack(pop)
  static check_size<sizeof(Scrollbar), 305 + sizeof(bool)> __UnityEngine_UI_ScrollbarSizeCheck;
  static_assert(sizeof(Scrollbar) == 0x132);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::Scrollbar*, "UnityEngine.UI", "Scrollbar");
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::Scrollbar::Direction, "UnityEngine.UI", "Scrollbar/Direction");
