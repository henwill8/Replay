// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
// Including type: UnityEngine.UI.Selectable
#include "UnityEngine/UI/Selectable.hpp"
// Including type: UnityEngine.EventSystems.IUpdateSelectedHandler
#include "UnityEngine/EventSystems/IUpdateSelectedHandler.hpp"
// Including type: UnityEngine.EventSystems.IBeginDragHandler
#include "UnityEngine/EventSystems/IBeginDragHandler.hpp"
// Including type: UnityEngine.EventSystems.IDragHandler
#include "UnityEngine/EventSystems/IDragHandler.hpp"
// Including type: UnityEngine.EventSystems.IEndDragHandler
#include "UnityEngine/EventSystems/IEndDragHandler.hpp"
// Including type: UnityEngine.EventSystems.IPointerClickHandler
#include "UnityEngine/EventSystems/IPointerClickHandler.hpp"
// Including type: UnityEngine.EventSystems.ISubmitHandler
#include "UnityEngine/EventSystems/ISubmitHandler.hpp"
// Including type: UnityEngine.UI.ICanvasElement
#include "UnityEngine/UI/ICanvasElement.hpp"
// Including type: UnityEngine.UI.ILayoutElement
#include "UnityEngine/UI/ILayoutElement.hpp"
// Including type: UnityEngine.TouchScreenKeyboardType
#include "UnityEngine/TouchScreenKeyboardType.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: CanvasRenderer
  class CanvasRenderer;
  // Forward declaring type: TextGenerator
  class TextGenerator;
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: UIVertex
  struct UIVertex;
  // Forward declaring type: TouchScreenKeyboard
  class TouchScreenKeyboard;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Coroutine
  class Coroutine;
  // Forward declaring type: WaitForSecondsRealtime
  class WaitForSecondsRealtime;
  // Forward declaring type: Event
  class Event;
  // Forward declaring type: Vector2
  struct Vector2;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
  // Forward declaring type: Graphic
  class Graphic;
  // Skipping declaration: ContentType because it is already included!
  // Skipping declaration: LineType because it is already included!
  // Skipping declaration: InputType because it is already included!
  // Skipping declaration: CharacterValidation because it is already included!
  // Forward declaring type: VertexHelper
  class VertexHelper;
  // Forward declaring type: CanvasUpdate
  struct CanvasUpdate;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: BaseInput
  class BaseInput;
  // Forward declaring type: PointerEventData
  class PointerEventData;
  // Forward declaring type: BaseEventData
  class BaseEventData;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: UnityEngine.UI
namespace UnityEngine::UI {
  // Autogenerated type: UnityEngine.UI.InputField
  class InputField : public UnityEngine::UI::Selectable/*, public UnityEngine::EventSystems::IUpdateSelectedHandler, public UnityEngine::EventSystems::IBeginDragHandler, public UnityEngine::EventSystems::IDragHandler, public UnityEngine::EventSystems::IEndDragHandler, public UnityEngine::EventSystems::IPointerClickHandler, public UnityEngine::EventSystems::ISubmitHandler, public UnityEngine::UI::ICanvasElement, public UnityEngine::UI::ILayoutElement*/ {
    public:
    // Nested type: UnityEngine::UI::InputField::ContentType
    struct ContentType;
    // Nested type: UnityEngine::UI::InputField::InputType
    struct InputType;
    // Nested type: UnityEngine::UI::InputField::CharacterValidation
    struct CharacterValidation;
    // Nested type: UnityEngine::UI::InputField::LineType
    struct LineType;
    // Nested type: UnityEngine::UI::InputField::OnValidateInput
    class OnValidateInput;
    // Nested type: UnityEngine::UI::InputField::SubmitEvent
    class SubmitEvent;
    // Nested type: UnityEngine::UI::InputField::OnChangeEvent
    class OnChangeEvent;
    // Nested type: UnityEngine::UI::InputField::EditState
    struct EditState;
    // Nested type: UnityEngine::UI::InputField::$CaretBlink$d__159
    class $CaretBlink$d__159;
    // Nested type: UnityEngine::UI::InputField::$MouseDragOutsideRect$d__179
    class $MouseDragOutsideRect$d__179;
    // Autogenerated type: UnityEngine.UI.InputField/ContentType
    struct ContentType : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: ContentType
      constexpr ContentType(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.UI.InputField/ContentType Standard
      static constexpr const int Standard = 0;
      // Get static field: static public UnityEngine.UI.InputField/ContentType Standard
      static UnityEngine::UI::InputField::ContentType _get_Standard();
      // Set static field: static public UnityEngine.UI.InputField/ContentType Standard
      static void _set_Standard(UnityEngine::UI::InputField::ContentType value);
      // static field const value: static public UnityEngine.UI.InputField/ContentType Autocorrected
      static constexpr const int Autocorrected = 1;
      // Get static field: static public UnityEngine.UI.InputField/ContentType Autocorrected
      static UnityEngine::UI::InputField::ContentType _get_Autocorrected();
      // Set static field: static public UnityEngine.UI.InputField/ContentType Autocorrected
      static void _set_Autocorrected(UnityEngine::UI::InputField::ContentType value);
      // static field const value: static public UnityEngine.UI.InputField/ContentType IntegerNumber
      static constexpr const int IntegerNumber = 2;
      // Get static field: static public UnityEngine.UI.InputField/ContentType IntegerNumber
      static UnityEngine::UI::InputField::ContentType _get_IntegerNumber();
      // Set static field: static public UnityEngine.UI.InputField/ContentType IntegerNumber
      static void _set_IntegerNumber(UnityEngine::UI::InputField::ContentType value);
      // static field const value: static public UnityEngine.UI.InputField/ContentType DecimalNumber
      static constexpr const int DecimalNumber = 3;
      // Get static field: static public UnityEngine.UI.InputField/ContentType DecimalNumber
      static UnityEngine::UI::InputField::ContentType _get_DecimalNumber();
      // Set static field: static public UnityEngine.UI.InputField/ContentType DecimalNumber
      static void _set_DecimalNumber(UnityEngine::UI::InputField::ContentType value);
      // static field const value: static public UnityEngine.UI.InputField/ContentType Alphanumeric
      static constexpr const int Alphanumeric = 4;
      // Get static field: static public UnityEngine.UI.InputField/ContentType Alphanumeric
      static UnityEngine::UI::InputField::ContentType _get_Alphanumeric();
      // Set static field: static public UnityEngine.UI.InputField/ContentType Alphanumeric
      static void _set_Alphanumeric(UnityEngine::UI::InputField::ContentType value);
      // static field const value: static public UnityEngine.UI.InputField/ContentType Name
      static constexpr const int Name = 5;
      // Get static field: static public UnityEngine.UI.InputField/ContentType Name
      static UnityEngine::UI::InputField::ContentType _get_Name();
      // Set static field: static public UnityEngine.UI.InputField/ContentType Name
      static void _set_Name(UnityEngine::UI::InputField::ContentType value);
      // static field const value: static public UnityEngine.UI.InputField/ContentType EmailAddress
      static constexpr const int EmailAddress = 6;
      // Get static field: static public UnityEngine.UI.InputField/ContentType EmailAddress
      static UnityEngine::UI::InputField::ContentType _get_EmailAddress();
      // Set static field: static public UnityEngine.UI.InputField/ContentType EmailAddress
      static void _set_EmailAddress(UnityEngine::UI::InputField::ContentType value);
      // static field const value: static public UnityEngine.UI.InputField/ContentType Password
      static constexpr const int Password = 7;
      // Get static field: static public UnityEngine.UI.InputField/ContentType Password
      static UnityEngine::UI::InputField::ContentType _get_Password();
      // Set static field: static public UnityEngine.UI.InputField/ContentType Password
      static void _set_Password(UnityEngine::UI::InputField::ContentType value);
      // static field const value: static public UnityEngine.UI.InputField/ContentType Pin
      static constexpr const int Pin = 8;
      // Get static field: static public UnityEngine.UI.InputField/ContentType Pin
      static UnityEngine::UI::InputField::ContentType _get_Pin();
      // Set static field: static public UnityEngine.UI.InputField/ContentType Pin
      static void _set_Pin(UnityEngine::UI::InputField::ContentType value);
      // static field const value: static public UnityEngine.UI.InputField/ContentType Custom
      static constexpr const int Custom = 9;
      // Get static field: static public UnityEngine.UI.InputField/ContentType Custom
      static UnityEngine::UI::InputField::ContentType _get_Custom();
      // Set static field: static public UnityEngine.UI.InputField/ContentType Custom
      static void _set_Custom(UnityEngine::UI::InputField::ContentType value);
    }; // UnityEngine.UI.InputField/ContentType
    // Autogenerated type: UnityEngine.UI.InputField/InputType
    struct InputType : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: InputType
      constexpr InputType(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.UI.InputField/InputType Standard
      static constexpr const int Standard = 0;
      // Get static field: static public UnityEngine.UI.InputField/InputType Standard
      static UnityEngine::UI::InputField::InputType _get_Standard();
      // Set static field: static public UnityEngine.UI.InputField/InputType Standard
      static void _set_Standard(UnityEngine::UI::InputField::InputType value);
      // static field const value: static public UnityEngine.UI.InputField/InputType AutoCorrect
      static constexpr const int AutoCorrect = 1;
      // Get static field: static public UnityEngine.UI.InputField/InputType AutoCorrect
      static UnityEngine::UI::InputField::InputType _get_AutoCorrect();
      // Set static field: static public UnityEngine.UI.InputField/InputType AutoCorrect
      static void _set_AutoCorrect(UnityEngine::UI::InputField::InputType value);
      // static field const value: static public UnityEngine.UI.InputField/InputType Password
      static constexpr const int Password = 2;
      // Get static field: static public UnityEngine.UI.InputField/InputType Password
      static UnityEngine::UI::InputField::InputType _get_Password();
      // Set static field: static public UnityEngine.UI.InputField/InputType Password
      static void _set_Password(UnityEngine::UI::InputField::InputType value);
    }; // UnityEngine.UI.InputField/InputType
    // Autogenerated type: UnityEngine.UI.InputField/CharacterValidation
    struct CharacterValidation : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: CharacterValidation
      constexpr CharacterValidation(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.UI.InputField/CharacterValidation None
      static constexpr const int None = 0;
      // Get static field: static public UnityEngine.UI.InputField/CharacterValidation None
      static UnityEngine::UI::InputField::CharacterValidation _get_None();
      // Set static field: static public UnityEngine.UI.InputField/CharacterValidation None
      static void _set_None(UnityEngine::UI::InputField::CharacterValidation value);
      // static field const value: static public UnityEngine.UI.InputField/CharacterValidation Integer
      static constexpr const int Integer = 1;
      // Get static field: static public UnityEngine.UI.InputField/CharacterValidation Integer
      static UnityEngine::UI::InputField::CharacterValidation _get_Integer();
      // Set static field: static public UnityEngine.UI.InputField/CharacterValidation Integer
      static void _set_Integer(UnityEngine::UI::InputField::CharacterValidation value);
      // static field const value: static public UnityEngine.UI.InputField/CharacterValidation Decimal
      static constexpr const int Decimal = 2;
      // Get static field: static public UnityEngine.UI.InputField/CharacterValidation Decimal
      static UnityEngine::UI::InputField::CharacterValidation _get_Decimal();
      // Set static field: static public UnityEngine.UI.InputField/CharacterValidation Decimal
      static void _set_Decimal(UnityEngine::UI::InputField::CharacterValidation value);
      // static field const value: static public UnityEngine.UI.InputField/CharacterValidation Alphanumeric
      static constexpr const int Alphanumeric = 3;
      // Get static field: static public UnityEngine.UI.InputField/CharacterValidation Alphanumeric
      static UnityEngine::UI::InputField::CharacterValidation _get_Alphanumeric();
      // Set static field: static public UnityEngine.UI.InputField/CharacterValidation Alphanumeric
      static void _set_Alphanumeric(UnityEngine::UI::InputField::CharacterValidation value);
      // static field const value: static public UnityEngine.UI.InputField/CharacterValidation Name
      static constexpr const int Name = 4;
      // Get static field: static public UnityEngine.UI.InputField/CharacterValidation Name
      static UnityEngine::UI::InputField::CharacterValidation _get_Name();
      // Set static field: static public UnityEngine.UI.InputField/CharacterValidation Name
      static void _set_Name(UnityEngine::UI::InputField::CharacterValidation value);
      // static field const value: static public UnityEngine.UI.InputField/CharacterValidation EmailAddress
      static constexpr const int EmailAddress = 5;
      // Get static field: static public UnityEngine.UI.InputField/CharacterValidation EmailAddress
      static UnityEngine::UI::InputField::CharacterValidation _get_EmailAddress();
      // Set static field: static public UnityEngine.UI.InputField/CharacterValidation EmailAddress
      static void _set_EmailAddress(UnityEngine::UI::InputField::CharacterValidation value);
    }; // UnityEngine.UI.InputField/CharacterValidation
    // Autogenerated type: UnityEngine.UI.InputField/LineType
    struct LineType : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: LineType
      constexpr LineType(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.UI.InputField/LineType SingleLine
      static constexpr const int SingleLine = 0;
      // Get static field: static public UnityEngine.UI.InputField/LineType SingleLine
      static UnityEngine::UI::InputField::LineType _get_SingleLine();
      // Set static field: static public UnityEngine.UI.InputField/LineType SingleLine
      static void _set_SingleLine(UnityEngine::UI::InputField::LineType value);
      // static field const value: static public UnityEngine.UI.InputField/LineType MultiLineSubmit
      static constexpr const int MultiLineSubmit = 1;
      // Get static field: static public UnityEngine.UI.InputField/LineType MultiLineSubmit
      static UnityEngine::UI::InputField::LineType _get_MultiLineSubmit();
      // Set static field: static public UnityEngine.UI.InputField/LineType MultiLineSubmit
      static void _set_MultiLineSubmit(UnityEngine::UI::InputField::LineType value);
      // static field const value: static public UnityEngine.UI.InputField/LineType MultiLineNewline
      static constexpr const int MultiLineNewline = 2;
      // Get static field: static public UnityEngine.UI.InputField/LineType MultiLineNewline
      static UnityEngine::UI::InputField::LineType _get_MultiLineNewline();
      // Set static field: static public UnityEngine.UI.InputField/LineType MultiLineNewline
      static void _set_MultiLineNewline(UnityEngine::UI::InputField::LineType value);
    }; // UnityEngine.UI.InputField/LineType
    // protected UnityEngine.TouchScreenKeyboard m_Keyboard
    // Offset: 0xF0
    UnityEngine::TouchScreenKeyboard* m_Keyboard;
    // protected UnityEngine.UI.Text m_TextComponent
    // Offset: 0xF8
    UnityEngine::UI::Text* m_TextComponent;
    // protected UnityEngine.UI.Graphic m_Placeholder
    // Offset: 0x100
    UnityEngine::UI::Graphic* m_Placeholder;
    // private UnityEngine.UI.InputField/ContentType m_ContentType
    // Offset: 0x108
    UnityEngine::UI::InputField::ContentType m_ContentType;
    // private UnityEngine.UI.InputField/InputType m_InputType
    // Offset: 0x10C
    UnityEngine::UI::InputField::InputType m_InputType;
    // private System.Char m_AsteriskChar
    // Offset: 0x110
    ::Il2CppChar m_AsteriskChar;
    // private UnityEngine.TouchScreenKeyboardType m_KeyboardType
    // Offset: 0x114
    UnityEngine::TouchScreenKeyboardType m_KeyboardType;
    // private UnityEngine.UI.InputField/LineType m_LineType
    // Offset: 0x118
    UnityEngine::UI::InputField::LineType m_LineType;
    // private System.Boolean m_HideMobileInput
    // Offset: 0x11C
    bool m_HideMobileInput;
    // private UnityEngine.UI.InputField/CharacterValidation m_CharacterValidation
    // Offset: 0x120
    UnityEngine::UI::InputField::CharacterValidation m_CharacterValidation;
    // private System.Int32 m_CharacterLimit
    // Offset: 0x124
    int m_CharacterLimit;
    // private UnityEngine.UI.InputField/SubmitEvent m_OnEndEdit
    // Offset: 0x128
    UnityEngine::UI::InputField::SubmitEvent* m_OnEndEdit;
    // private UnityEngine.UI.InputField/OnChangeEvent m_OnValueChanged
    // Offset: 0x130
    UnityEngine::UI::InputField::OnChangeEvent* m_OnValueChanged;
    // private UnityEngine.UI.InputField/OnValidateInput m_OnValidateInput
    // Offset: 0x138
    UnityEngine::UI::InputField::OnValidateInput* m_OnValidateInput;
    // private UnityEngine.Color m_CaretColor
    // Offset: 0x140
    UnityEngine::Color m_CaretColor;
    // private System.Boolean m_CustomCaretColor
    // Offset: 0x150
    bool m_CustomCaretColor;
    // private UnityEngine.Color m_SelectionColor
    // Offset: 0x154
    UnityEngine::Color m_SelectionColor;
    // protected System.String m_Text
    // Offset: 0x168
    ::Il2CppString* m_Text;
    // private System.Single m_CaretBlinkRate
    // Offset: 0x170
    float m_CaretBlinkRate;
    // private System.Int32 m_CaretWidth
    // Offset: 0x174
    int m_CaretWidth;
    // private System.Boolean m_ReadOnly
    // Offset: 0x178
    bool m_ReadOnly;
    // protected System.Int32 m_CaretPosition
    // Offset: 0x17C
    int m_CaretPosition;
    // protected System.Int32 m_CaretSelectPosition
    // Offset: 0x180
    int m_CaretSelectPosition;
    // private UnityEngine.RectTransform caretRectTrans
    // Offset: 0x188
    UnityEngine::RectTransform* caretRectTrans;
    // protected UnityEngine.UIVertex[] m_CursorVerts
    // Offset: 0x190
    ::Array<UnityEngine::UIVertex>* m_CursorVerts;
    // private UnityEngine.TextGenerator m_InputTextCache
    // Offset: 0x198
    UnityEngine::TextGenerator* m_InputTextCache;
    // private UnityEngine.CanvasRenderer m_CachedInputRenderer
    // Offset: 0x1A0
    UnityEngine::CanvasRenderer* m_CachedInputRenderer;
    // private System.Boolean m_PreventFontCallback
    // Offset: 0x1A8
    bool m_PreventFontCallback;
    // protected UnityEngine.Mesh m_Mesh
    // Offset: 0x1B0
    UnityEngine::Mesh* m_Mesh;
    // private System.Boolean m_AllowInput
    // Offset: 0x1B8
    bool m_AllowInput;
    // private System.Boolean m_ShouldActivateNextUpdate
    // Offset: 0x1B9
    bool m_ShouldActivateNextUpdate;
    // private System.Boolean m_UpdateDrag
    // Offset: 0x1BA
    bool m_UpdateDrag;
    // private System.Boolean m_DragPositionOutOfBounds
    // Offset: 0x1BB
    bool m_DragPositionOutOfBounds;
    // protected System.Boolean m_CaretVisible
    // Offset: 0x1BC
    bool m_CaretVisible;
    // private UnityEngine.Coroutine m_BlinkCoroutine
    // Offset: 0x1C0
    UnityEngine::Coroutine* m_BlinkCoroutine;
    // private System.Single m_BlinkStartTime
    // Offset: 0x1C8
    float m_BlinkStartTime;
    // protected System.Int32 m_DrawStart
    // Offset: 0x1CC
    int m_DrawStart;
    // protected System.Int32 m_DrawEnd
    // Offset: 0x1D0
    int m_DrawEnd;
    // private UnityEngine.Coroutine m_DragCoroutine
    // Offset: 0x1D8
    UnityEngine::Coroutine* m_DragCoroutine;
    // private System.String m_OriginalText
    // Offset: 0x1E0
    ::Il2CppString* m_OriginalText;
    // private System.Boolean m_WasCanceled
    // Offset: 0x1E8
    bool m_WasCanceled;
    // private System.Boolean m_HasDoneFocusTransition
    // Offset: 0x1E9
    bool m_HasDoneFocusTransition;
    // private UnityEngine.WaitForSecondsRealtime m_WaitForSecondsRealtime
    // Offset: 0x1F0
    UnityEngine::WaitForSecondsRealtime* m_WaitForSecondsRealtime;
    // private System.Boolean m_TouchKeyboardAllowsInPlaceEditing
    // Offset: 0x1F8
    bool m_TouchKeyboardAllowsInPlaceEditing;
    // private UnityEngine.Event m_ProcessingEvent
    // Offset: 0x200
    UnityEngine::Event* m_ProcessingEvent;
    // Creating interface conversion operator: operator UnityEngine::EventSystems::IUpdateSelectedHandler
    operator UnityEngine::EventSystems::IUpdateSelectedHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::IUpdateSelectedHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::EventSystems::IBeginDragHandler
    operator UnityEngine::EventSystems::IBeginDragHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::IBeginDragHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::EventSystems::IDragHandler
    operator UnityEngine::EventSystems::IDragHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::IDragHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::EventSystems::IEndDragHandler
    operator UnityEngine::EventSystems::IEndDragHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::IEndDragHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::EventSystems::IPointerClickHandler
    operator UnityEngine::EventSystems::IPointerClickHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::IPointerClickHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::EventSystems::ISubmitHandler
    operator UnityEngine::EventSystems::ISubmitHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::ISubmitHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::UI::ICanvasElement
    operator UnityEngine::UI::ICanvasElement() noexcept {
      return *reinterpret_cast<UnityEngine::UI::ICanvasElement*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::UI::ILayoutElement
    operator UnityEngine::UI::ILayoutElement() noexcept {
      return *reinterpret_cast<UnityEngine::UI::ILayoutElement*>(this);
    }
    // Get static field: static private readonly System.Char[] kSeparators
    static ::Array<::Il2CppChar>* _get_kSeparators();
    // Set static field: static private readonly System.Char[] kSeparators
    static void _set_kSeparators(::Array<::Il2CppChar>* value);
    // static field const value: static private System.Single kHScrollSpeed
    static constexpr const float kHScrollSpeed = 0.05;
    // Get static field: static private System.Single kHScrollSpeed
    static float _get_kHScrollSpeed();
    // Set static field: static private System.Single kHScrollSpeed
    static void _set_kHScrollSpeed(float value);
    // static field const value: static private System.Single kVScrollSpeed
    static constexpr const float kVScrollSpeed = 0.1;
    // Get static field: static private System.Single kVScrollSpeed
    static float _get_kVScrollSpeed();
    // Set static field: static private System.Single kVScrollSpeed
    static void _set_kVScrollSpeed(float value);
    // static field const value: static private System.String kEmailSpecialCharacters
    static constexpr const char* kEmailSpecialCharacters = "!#$%&'*+-/=?^_`{|}~";
    // Get static field: static private System.String kEmailSpecialCharacters
    static ::Il2CppString* _get_kEmailSpecialCharacters();
    // Set static field: static private System.String kEmailSpecialCharacters
    static void _set_kEmailSpecialCharacters(::Il2CppString* value);
    // static field const value: static private System.Int32 k_MaxTextLength
    static constexpr const int k_MaxTextLength = 16382;
    // Get static field: static private System.Int32 k_MaxTextLength
    static int _get_k_MaxTextLength();
    // Set static field: static private System.Int32 k_MaxTextLength
    static void _set_k_MaxTextLength(int value);
    // private UnityEngine.EventSystems.BaseInput get_input()
    // Offset: 0x14D4040
    UnityEngine::EventSystems::BaseInput* get_input();
    // private System.String get_compositionString()
    // Offset: 0x14D4180
    ::Il2CppString* get_compositionString();
    // protected UnityEngine.Mesh get_mesh()
    // Offset: 0x14D4494
    UnityEngine::Mesh* get_mesh();
    // protected UnityEngine.TextGenerator get_cachedInputTextGenerator()
    // Offset: 0x14D4540
    UnityEngine::TextGenerator* get_cachedInputTextGenerator();
    // public System.Void set_shouldHideMobileInput(System.Boolean value)
    // Offset: 0x14D45BC
    void set_shouldHideMobileInput(bool value);
    // public System.Boolean get_shouldHideMobileInput()
    // Offset: 0x14D461C
    bool get_shouldHideMobileInput();
    // private System.Boolean get_shouldActivateOnSelect()
    // Offset: 0x14D4670
    bool get_shouldActivateOnSelect();
    // public System.String get_text()
    // Offset: 0x14D4690
    ::Il2CppString* get_text();
    // public System.Void set_text(System.String value)
    // Offset: 0x14D4698
    void set_text(::Il2CppString* value);
    // public System.Void SetTextWithoutNotify(System.String input)
    // Offset: 0x14D498C
    void SetTextWithoutNotify(::Il2CppString* input);
    // private System.Void SetText(System.String value, System.Boolean sendCallback)
    // Offset: 0x14D46A0
    void SetText(::Il2CppString* value, bool sendCallback);
    // public System.Boolean get_isFocused()
    // Offset: 0x14D4E98
    bool get_isFocused();
    // public System.Single get_caretBlinkRate()
    // Offset: 0x14D4EA0
    float get_caretBlinkRate();
    // public System.Void set_caretBlinkRate(System.Single value)
    // Offset: 0x14D4EA8
    void set_caretBlinkRate(float value);
    // public System.Int32 get_caretWidth()
    // Offset: 0x14D4FA0
    int get_caretWidth();
    // public System.Void set_caretWidth(System.Int32 value)
    // Offset: 0x14D4FA8
    void set_caretWidth(int value);
    // public UnityEngine.UI.Text get_textComponent()
    // Offset: 0x14D508C
    UnityEngine::UI::Text* get_textComponent();
    // public System.Void set_textComponent(UnityEngine.UI.Text value)
    // Offset: 0x14D5094
    void set_textComponent(UnityEngine::UI::Text* value);
    // public UnityEngine.UI.Graphic get_placeholder()
    // Offset: 0x14D52F8
    UnityEngine::UI::Graphic* get_placeholder();
    // public System.Void set_placeholder(UnityEngine.UI.Graphic value)
    // Offset: 0x14D5300
    void set_placeholder(UnityEngine::UI::Graphic* value);
    // public UnityEngine.Color get_caretColor()
    // Offset: 0x14D5360
    UnityEngine::Color get_caretColor();
    // public System.Void set_caretColor(UnityEngine.Color value)
    // Offset: 0x14D53A8
    void set_caretColor(UnityEngine::Color value);
    // public System.Boolean get_customCaretColor()
    // Offset: 0x14D53E4
    bool get_customCaretColor();
    // public System.Void set_customCaretColor(System.Boolean value)
    // Offset: 0x14D53EC
    void set_customCaretColor(bool value);
    // public UnityEngine.Color get_selectionColor()
    // Offset: 0x14D5410
    UnityEngine::Color get_selectionColor();
    // public System.Void set_selectionColor(UnityEngine.Color value)
    // Offset: 0x14D5424
    void set_selectionColor(UnityEngine::Color value);
    // public UnityEngine.UI.InputField/SubmitEvent get_onEndEdit()
    // Offset: 0x14D5460
    UnityEngine::UI::InputField::SubmitEvent* get_onEndEdit();
    // public System.Void set_onEndEdit(UnityEngine.UI.InputField/SubmitEvent value)
    // Offset: 0x14D5468
    void set_onEndEdit(UnityEngine::UI::InputField::SubmitEvent* value);
    // public UnityEngine.UI.InputField/OnChangeEvent get_onValueChange()
    // Offset: 0x14D54C8
    UnityEngine::UI::InputField::OnChangeEvent* get_onValueChange();
    // public System.Void set_onValueChange(UnityEngine.UI.InputField/OnChangeEvent value)
    // Offset: 0x14D54D0
    void set_onValueChange(UnityEngine::UI::InputField::OnChangeEvent* value);
    // public UnityEngine.UI.InputField/OnChangeEvent get_onValueChanged()
    // Offset: 0x14D5534
    UnityEngine::UI::InputField::OnChangeEvent* get_onValueChanged();
    // public System.Void set_onValueChanged(UnityEngine.UI.InputField/OnChangeEvent value)
    // Offset: 0x14D54D4
    void set_onValueChanged(UnityEngine::UI::InputField::OnChangeEvent* value);
    // public UnityEngine.UI.InputField/OnValidateInput get_onValidateInput()
    // Offset: 0x14D553C
    UnityEngine::UI::InputField::OnValidateInput* get_onValidateInput();
    // public System.Void set_onValidateInput(UnityEngine.UI.InputField/OnValidateInput value)
    // Offset: 0x14D5544
    void set_onValidateInput(UnityEngine::UI::InputField::OnValidateInput* value);
    // public System.Int32 get_characterLimit()
    // Offset: 0x14D55A4
    int get_characterLimit();
    // public System.Void set_characterLimit(System.Int32 value)
    // Offset: 0x14D55AC
    void set_characterLimit(int value);
    // public UnityEngine.UI.InputField/ContentType get_contentType()
    // Offset: 0x14D5670
    UnityEngine::UI::InputField::ContentType get_contentType();
    // public System.Void set_contentType(UnityEngine.UI.InputField/ContentType value)
    // Offset: 0x14D5678
    void set_contentType(UnityEngine::UI::InputField::ContentType value);
    // public UnityEngine.UI.InputField/LineType get_lineType()
    // Offset: 0x14D57AC
    UnityEngine::UI::InputField::LineType get_lineType();
    // public System.Void set_lineType(UnityEngine.UI.InputField/LineType value)
    // Offset: 0x14D57B4
    void set_lineType(UnityEngine::UI::InputField::LineType value);
    // public UnityEngine.UI.InputField/InputType get_inputType()
    // Offset: 0x14D58E8
    UnityEngine::UI::InputField::InputType get_inputType();
    // public System.Void set_inputType(UnityEngine.UI.InputField/InputType value)
    // Offset: 0x14D58F0
    void set_inputType(UnityEngine::UI::InputField::InputType value);
    // public UnityEngine.TouchScreenKeyboard get_touchScreenKeyboard()
    // Offset: 0x14D5994
    UnityEngine::TouchScreenKeyboard* get_touchScreenKeyboard();
    // public UnityEngine.TouchScreenKeyboardType get_keyboardType()
    // Offset: 0x14D599C
    UnityEngine::TouchScreenKeyboardType get_keyboardType();
    // public System.Void set_keyboardType(UnityEngine.TouchScreenKeyboardType value)
    // Offset: 0x14D59A4
    void set_keyboardType(UnityEngine::TouchScreenKeyboardType value);
    // public UnityEngine.UI.InputField/CharacterValidation get_characterValidation()
    // Offset: 0x14D5A30
    UnityEngine::UI::InputField::CharacterValidation get_characterValidation();
    // public System.Void set_characterValidation(UnityEngine.UI.InputField/CharacterValidation value)
    // Offset: 0x14D5A38
    void set_characterValidation(UnityEngine::UI::InputField::CharacterValidation value);
    // public System.Boolean get_readOnly()
    // Offset: 0x14D5AC4
    bool get_readOnly();
    // public System.Void set_readOnly(System.Boolean value)
    // Offset: 0x14D5ACC
    void set_readOnly(bool value);
    // public System.Boolean get_multiLine()
    // Offset: 0x14D5AD8
    bool get_multiLine();
    // public System.Char get_asteriskChar()
    // Offset: 0x14D5AEC
    ::Il2CppChar get_asteriskChar();
    // public System.Void set_asteriskChar(System.Char value)
    // Offset: 0x14D5AF4
    void set_asteriskChar(::Il2CppChar value);
    // public System.Boolean get_wasCanceled()
    // Offset: 0x14D5B70
    bool get_wasCanceled();
    // protected System.Void ClampPos(ref System.Int32 pos)
    // Offset: 0x14D5B78
    void ClampPos(int& pos);
    // protected System.Int32 get_caretPositionInternal()
    // Offset: 0x14D5BB0
    int get_caretPositionInternal();
    // protected System.Void set_caretPositionInternal(System.Int32 value)
    // Offset: 0x14D5BE0
    void set_caretPositionInternal(int value);
    // protected System.Int32 get_caretSelectPositionInternal()
    // Offset: 0x14D5C18
    int get_caretSelectPositionInternal();
    // protected System.Void set_caretSelectPositionInternal(System.Int32 value)
    // Offset: 0x14D5C48
    void set_caretSelectPositionInternal(int value);
    // public System.Int32 get_caretPosition()
    // Offset: 0x14D5CB4
    int get_caretPosition();
    // public System.Void set_caretPosition(System.Int32 value)
    // Offset: 0x14D5CE4
    void set_caretPosition(int value);
    // public System.Int32 get_selectionAnchorPosition()
    // Offset: 0x14D5DD0
    int get_selectionAnchorPosition();
    // public System.Void set_selectionAnchorPosition(System.Int32 value)
    // Offset: 0x14D5D10
    void set_selectionAnchorPosition(int value);
    // public System.Int32 get_selectionFocusPosition()
    // Offset: 0x14D5E00
    int get_selectionFocusPosition();
    // public System.Void set_selectionFocusPosition(System.Int32 value)
    // Offset: 0x14D5D70
    void set_selectionFocusPosition(int value);
    // private System.Collections.IEnumerator CaretBlink()
    // Offset: 0x14D6468
    System::Collections::IEnumerator* CaretBlink();
    // private System.Void SetCaretVisible()
    // Offset: 0x14D64E4
    void SetCaretVisible();
    // private System.Void SetCaretActive()
    // Offset: 0x14D4F2C
    void SetCaretActive();
    // private System.Void UpdateCaretMaterial()
    // Offset: 0x14D6524
    void UpdateCaretMaterial();
    // protected System.Void OnFocus()
    // Offset: 0x14D6650
    void OnFocus();
    // protected System.Void SelectAll()
    // Offset: 0x14D6654
    void SelectAll();
    // public System.Void MoveTextEnd(System.Boolean shift)
    // Offset: 0x14D66A0
    void MoveTextEnd(bool shift);
    // public System.Void MoveTextStart(System.Boolean shift)
    // Offset: 0x14D673C
    void MoveTextStart(bool shift);
    // static private System.String get_clipboard()
    // Offset: 0x14D67C4
    static ::Il2CppString* get_clipboard();
    // static private System.Void set_clipboard(System.String value)
    // Offset: 0x14D67CC
    static void set_clipboard(::Il2CppString* value);
    // private System.Boolean InPlaceEditing()
    // Offset: 0x14D67D4
    bool InPlaceEditing();
    // private System.Void UpdateCaretFromKeyboard()
    // Offset: 0x14D6810
    void UpdateCaretFromKeyboard();
    // protected System.Void LateUpdate()
    // Offset: 0x14D68FC
    void LateUpdate();
    // public UnityEngine.Vector2 ScreenToLocal(UnityEngine.Vector2 screen)
    // Offset: 0x14D7D14
    UnityEngine::Vector2 ScreenToLocal(UnityEngine::Vector2 screen);
    // private System.Int32 GetUnclampedCharacterLineFromPosition(UnityEngine.Vector2 pos, UnityEngine.TextGenerator generator)
    // Offset: 0x14D8008
    int GetUnclampedCharacterLineFromPosition(UnityEngine::Vector2 pos, UnityEngine::TextGenerator* generator);
    // protected System.Int32 GetCharacterIndexFromPosition(UnityEngine.Vector2 pos)
    // Offset: 0x14D823C
    int GetCharacterIndexFromPosition(UnityEngine::Vector2 pos);
    // private System.Boolean MayDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x14D86D8
    bool MayDrag(UnityEngine::EventSystems::PointerEventData* eventData);
    // private System.Collections.IEnumerator MouseDragOutsideRect(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x14D89E4
    System::Collections::IEnumerator* MouseDragOutsideRect(UnityEngine::EventSystems::PointerEventData* eventData);
    // protected UnityEngine.UI.InputField/EditState KeyPressed(UnityEngine.Event evt)
    // Offset: 0x14D8CA4
    UnityEngine::UI::InputField::EditState KeyPressed(UnityEngine::Event* evt);
    // private System.Boolean IsValidChar(System.Char c)
    // Offset: 0x14D9870
    bool IsValidChar(::Il2CppChar c);
    // public System.Void ProcessEvent(UnityEngine.Event e)
    // Offset: 0x14D98E0
    void ProcessEvent(UnityEngine::Event* e);
    // private System.String GetSelectedString()
    // Offset: 0x14D9268
    ::Il2CppString* GetSelectedString();
    // private System.Int32 FindtNextWordBegin()
    // Offset: 0x14D9A18
    int FindtNextWordBegin();
    // private System.Void MoveRight(System.Boolean shift, System.Boolean ctrl)
    // Offset: 0x14D96D0
    void MoveRight(bool shift, bool ctrl);
    // private System.Int32 FindtPrevWordBegin()
    // Offset: 0x14D9AEC
    int FindtPrevWordBegin();
    // private System.Void MoveLeft(System.Boolean shift, System.Boolean ctrl)
    // Offset: 0x14D9548
    void MoveLeft(bool shift, bool ctrl);
    // private System.Int32 DetermineCharacterLine(System.Int32 charPos, UnityEngine.TextGenerator generator)
    // Offset: 0x14D9BA4
    int DetermineCharacterLine(int charPos, UnityEngine::TextGenerator* generator);
    // private System.Int32 LineUpCharacterPosition(System.Int32 originalPos, System.Boolean goToFirstChar)
    // Offset: 0x14D9CC4
    int LineUpCharacterPosition(int originalPos, bool goToFirstChar);
    // private System.Int32 LineDownCharacterPosition(System.Int32 originalPos, System.Boolean goToLastChar)
    // Offset: 0x14DA034
    int LineDownCharacterPosition(int originalPos, bool goToLastChar);
    // private System.Void MoveDown(System.Boolean shift)
    // Offset: 0x14D9864
    void MoveDown(bool shift);
    // private System.Void MoveDown(System.Boolean shift, System.Boolean goToLastChar)
    // Offset: 0x14DA300
    void MoveDown(bool shift, bool goToLastChar);
    // private System.Void MoveUp(System.Boolean shift)
    // Offset: 0x14D9858
    void MoveUp(bool shift);
    // private System.Void MoveUp(System.Boolean shift, System.Boolean goToFirstChar)
    // Offset: 0x14DA498
    void MoveUp(bool shift, bool goToFirstChar);
    // private System.Void Delete()
    // Offset: 0x14D9318
    void Delete();
    // private System.Void ForwardSpace()
    // Offset: 0x14D91A4
    void ForwardSpace();
    // private System.Void Backspace()
    // Offset: 0x14D9098
    void Backspace();
    // private System.Void Insert(System.Char c)
    // Offset: 0x14DA63C
    void Insert(::Il2CppChar c);
    // private System.Void UpdateTouchKeyboardFromEditChanges()
    // Offset: 0x14D94F0
    void UpdateTouchKeyboardFromEditChanges();
    // private System.Void SendOnValueChangedAndUpdateLabel()
    // Offset: 0x14D7CF0
    void SendOnValueChangedAndUpdateLabel();
    // private System.Void SendOnValueChanged()
    // Offset: 0x14D4994
    void SendOnValueChanged();
    // protected System.Void SendOnSubmit()
    // Offset: 0x14DA738
    void SendOnSubmit();
    // protected System.Void Append(System.String input)
    // Offset: 0x14DA7B4
    void Append(::Il2CppString* input);
    // protected System.Void Append(System.Char input)
    // Offset: 0x14DA874
    void Append(::Il2CppChar input);
    // protected System.Void UpdateLabel()
    // Offset: 0x14D4A10
    void UpdateLabel();
    // private System.Boolean IsSelectionVisible()
    // Offset: 0x14DB5D8
    bool IsSelectionVisible();
    // static private System.Int32 GetLineStartPosition(UnityEngine.TextGenerator gen, System.Int32 line)
    // Offset: 0x14DB648
    static int GetLineStartPosition(UnityEngine::TextGenerator* gen, int line);
    // static private System.Int32 GetLineEndPosition(UnityEngine.TextGenerator gen, System.Int32 line)
    // Offset: 0x14D852C
    static int GetLineEndPosition(UnityEngine::TextGenerator* gen, int line);
    // private System.Void SetDrawRangeToContainCaretPosition(System.Int32 caretPos)
    // Offset: 0x14DA9D4
    void SetDrawRangeToContainCaretPosition(int caretPos);
    // public System.Void ForceLabelUpdate()
    // Offset: 0x14DB7D8
    void ForceLabelUpdate();
    // private System.Void MarkGeometryAsDirty()
    // Offset: 0x14D5024
    void MarkGeometryAsDirty();
    // private System.Void UpdateGeometry()
    // Offset: 0x14DB7EC
    void UpdateGeometry();
    // private System.Void AssignPositioningIfNeeded()
    // Offset: 0x14D7070
    void AssignPositioningIfNeeded();
    // private System.Void OnFillVBO(UnityEngine.Mesh vbo)
    // Offset: 0x14DBC20
    void OnFillVBO(UnityEngine::Mesh* vbo);
    // private System.Void GenerateCaret(UnityEngine.UI.VertexHelper vbo, UnityEngine.Vector2 roundingOffset)
    // Offset: 0x14DBE4C
    void GenerateCaret(UnityEngine::UI::VertexHelper* vbo, UnityEngine::Vector2 roundingOffset);
    // private System.Void CreateCursorVerts()
    // Offset: 0x14DCF7C
    void CreateCursorVerts();
    // private System.Void GenerateHighlight(UnityEngine.UI.VertexHelper vbo, UnityEngine.Vector2 roundingOffset)
    // Offset: 0x14DC630
    void GenerateHighlight(UnityEngine::UI::VertexHelper* vbo, UnityEngine::Vector2 roundingOffset);
    // protected System.Char Validate(System.String text, System.Int32 pos, System.Char ch)
    // Offset: 0x14D7678
    ::Il2CppChar Validate(::Il2CppString* text, int pos, ::Il2CppChar ch);
    // public System.Void ActivateInputField()
    // Offset: 0x14DD0DC
    void ActivateInputField();
    // private System.Void ActivateInputFieldInternal()
    // Offset: 0x14D6D10
    void ActivateInputFieldInternal();
    // public System.Void DeactivateInputField()
    // Offset: 0x14D62B0
    void DeactivateInputField();
    // private System.Void EnforceContentType()
    // Offset: 0x14D56F4
    void EnforceContentType();
    // private System.Void EnforceTextHOverflow()
    // Offset: 0x14D43E4
    void EnforceTextHOverflow();
    // private System.Void SetToCustomIfContentTypeIsNot(params UnityEngine.UI.InputField/ContentType[] allowedContentTypes)
    // Offset: 0x14D5878
    void SetToCustomIfContentTypeIsNot(::Array<UnityEngine::UI::InputField::ContentType>* allowedContentTypes);
    // Creating initializer_list -> params proxy for: System.Void SetToCustomIfContentTypeIsNot(params UnityEngine.UI.InputField/ContentType[] allowedContentTypes)
    void SetToCustomIfContentTypeIsNot(std::initializer_list<UnityEngine::UI::InputField::ContentType> allowedContentTypes);
    // Creating TArgs -> initializer_list proxy for: System.Void SetToCustomIfContentTypeIsNot(params UnityEngine.UI.InputField/ContentType[] allowedContentTypes)
    template<class ...TParams>
    void SetToCustomIfContentTypeIsNot(TParams&&... allowedContentTypes) {
      SetToCustomIfContentTypeIsNot({allowedContentTypes...});
    }
    // private System.Void SetToCustom()
    // Offset: 0x14D597C
    void SetToCustom();
    // protected System.Void .ctor()
    // Offset: 0x14D4224
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::.ctor()
    // Base method: System.Void UIBehaviour::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static InputField* New_ctor();
    // private System.Boolean get_hasSelection()
    // Offset: 0x14D5C80
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Boolean Selectable::get_hasSelection()
    bool get_hasSelection();
    // protected override System.Void OnEnable()
    // Offset: 0x14D5E30
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x14D607C
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnDisable()
    void OnDisable();
    // public System.Void OnBeginDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x14D87C8
    // Implemented from: UnityEngine.EventSystems.IBeginDragHandler
    // Base method: System.Void IBeginDragHandler::OnBeginDrag(UnityEngine.EventSystems.PointerEventData eventData)
    void OnBeginDrag(UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x14D87F4
    // Implemented from: UnityEngine.EventSystems.IDragHandler
    // Base method: System.Void IDragHandler::OnDrag(UnityEngine.EventSystems.PointerEventData eventData)
    void OnDrag(UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnEndDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x14D8A7C
    // Implemented from: UnityEngine.EventSystems.IEndDragHandler
    // Base method: System.Void IEndDragHandler::OnEndDrag(UnityEngine.EventSystems.PointerEventData eventData)
    void OnEndDrag(UnityEngine::EventSystems::PointerEventData* eventData);
    // public override System.Void OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x14D8AA4
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData)
    void OnPointerDown(UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnUpdateSelected(UnityEngine.EventSystems.BaseEventData eventData)
    // Offset: 0x14D98E4
    // Implemented from: UnityEngine.EventSystems.IUpdateSelectedHandler
    // Base method: System.Void IUpdateSelectedHandler::OnUpdateSelected(UnityEngine.EventSystems.BaseEventData eventData)
    void OnUpdateSelected(UnityEngine::EventSystems::BaseEventData* eventData);
    // public System.Void Rebuild(UnityEngine.UI.CanvasUpdate update)
    // Offset: 0x14DB7DC
    // Implemented from: UnityEngine.UI.ICanvasElement
    // Base method: System.Void ICanvasElement::Rebuild(UnityEngine.UI.CanvasUpdate update)
    void Rebuild(UnityEngine::UI::CanvasUpdate update);
    // public System.Void LayoutComplete()
    // Offset: 0x14DBC18
    // Implemented from: UnityEngine.UI.ICanvasElement
    // Base method: System.Void ICanvasElement::LayoutComplete()
    void LayoutComplete();
    // public System.Void GraphicUpdateComplete()
    // Offset: 0x14DBC1C
    // Implemented from: UnityEngine.UI.ICanvasElement
    // Base method: System.Void ICanvasElement::GraphicUpdateComplete()
    void GraphicUpdateComplete();
    // public override System.Void OnSelect(UnityEngine.EventSystems.BaseEventData eventData)
    // Offset: 0x14DD21C
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnSelect(UnityEngine.EventSystems.BaseEventData eventData)
    void OnSelect(UnityEngine::EventSystems::BaseEventData* eventData);
    // public System.Void OnPointerClick(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x14DD260
    // Implemented from: UnityEngine.EventSystems.IPointerClickHandler
    // Base method: System.Void IPointerClickHandler::OnPointerClick(UnityEngine.EventSystems.PointerEventData eventData)
    void OnPointerClick(UnityEngine::EventSystems::PointerEventData* eventData);
    // public override System.Void OnDeselect(UnityEngine.EventSystems.BaseEventData eventData)
    // Offset: 0x14DD280
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnDeselect(UnityEngine.EventSystems.BaseEventData eventData)
    void OnDeselect(UnityEngine::EventSystems::BaseEventData* eventData);
    // public System.Void OnSubmit(UnityEngine.EventSystems.BaseEventData eventData)
    // Offset: 0x14DD2B0
    // Implemented from: UnityEngine.EventSystems.ISubmitHandler
    // Base method: System.Void ISubmitHandler::OnSubmit(UnityEngine.EventSystems.BaseEventData eventData)
    void OnSubmit(UnityEngine::EventSystems::BaseEventData* eventData);
    // protected override System.Void DoStateTransition(UnityEngine.UI.Selectable/SelectionState state, System.Boolean instant)
    // Offset: 0x14DD304
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::DoStateTransition(UnityEngine.UI.Selectable/SelectionState state, System.Boolean instant)
    void DoStateTransition(UnityEngine::UI::Selectable::SelectionState state, bool instant);
    // public System.Void CalculateLayoutInputHorizontal()
    // Offset: 0x14DD330
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Void ILayoutElement::CalculateLayoutInputHorizontal()
    void CalculateLayoutInputHorizontal();
    // public System.Void CalculateLayoutInputVertical()
    // Offset: 0x14DD334
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Void ILayoutElement::CalculateLayoutInputVertical()
    void CalculateLayoutInputVertical();
    // public System.Single get_minWidth()
    // Offset: 0x14DD338
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Single ILayoutElement::get_minWidth()
    float get_minWidth();
    // public System.Single get_preferredWidth()
    // Offset: 0x14DD340
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Single ILayoutElement::get_preferredWidth()
    float get_preferredWidth();
    // public System.Single get_flexibleWidth()
    // Offset: 0x14DD4A0
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Single ILayoutElement::get_flexibleWidth()
    float get_flexibleWidth();
    // public System.Single get_minHeight()
    // Offset: 0x14DD4A8
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Single ILayoutElement::get_minHeight()
    float get_minHeight();
    // public System.Single get_preferredHeight()
    // Offset: 0x14DD4B0
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Single ILayoutElement::get_preferredHeight()
    float get_preferredHeight();
    // public System.Single get_flexibleHeight()
    // Offset: 0x14DD62C
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Single ILayoutElement::get_flexibleHeight()
    float get_flexibleHeight();
    // public System.Int32 get_layoutPriority()
    // Offset: 0x14DD634
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Int32 ILayoutElement::get_layoutPriority()
    int get_layoutPriority();
    // static private System.Void .cctor()
    // Offset: 0x14DD63C
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::.cctor()
    // Base method: System.Void Object::.cctor()
    static void _cctor();
    // private UnityEngine.Transform UnityEngine.UI.ICanvasElement.get_transform()
    // Offset: 0x14DD6BC
    // Implemented from: UnityEngine.UI.ICanvasElement
    // Base method: UnityEngine.Transform ICanvasElement::get_transform()
    UnityEngine::Transform* UnityEngine_UI_ICanvasElement_get_transform();
  }; // UnityEngine.UI.InputField
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::InputField*, "UnityEngine.UI", "InputField");
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::InputField::ContentType, "UnityEngine.UI", "InputField/ContentType");
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::InputField::InputType, "UnityEngine.UI", "InputField/InputType");
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::InputField::CharacterValidation, "UnityEngine.UI", "InputField/CharacterValidation");
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::InputField::LineType, "UnityEngine.UI", "InputField/LineType");
#pragma pack(pop)
