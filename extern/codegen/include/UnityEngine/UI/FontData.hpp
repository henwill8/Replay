// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.ISerializationCallbackReceiver
#include "UnityEngine/ISerializationCallbackReceiver.hpp"
// Including type: UnityEngine.FontStyle
#include "UnityEngine/FontStyle.hpp"
// Including type: UnityEngine.TextAnchor
#include "UnityEngine/TextAnchor.hpp"
// Including type: UnityEngine.HorizontalWrapMode
#include "UnityEngine/HorizontalWrapMode.hpp"
// Including type: UnityEngine.VerticalWrapMode
#include "UnityEngine/VerticalWrapMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Font
  class Font;
}
// Completed forward declares
// Type namespace: UnityEngine.UI
namespace UnityEngine::UI {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.UI.FontData
  // [] Offset: FFFFFFFF
  class FontData : public ::Il2CppObject/*, public UnityEngine::ISerializationCallbackReceiver*/ {
    public:
    // [FormerlySerializedAsAttribute] Offset: 0xCEFE20
    // private UnityEngine.Font m_Font
    // Size: 0x8
    // Offset: 0x10
    UnityEngine::Font* m_Font;
    // Field size check
    static_assert(sizeof(UnityEngine::Font*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xCEFE6C
    // private System.Int32 m_FontSize
    // Size: 0x4
    // Offset: 0x18
    int m_FontSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [FormerlySerializedAsAttribute] Offset: 0xCEFEB8
    // private UnityEngine.FontStyle m_FontStyle
    // Size: 0x4
    // Offset: 0x1C
    UnityEngine::FontStyle m_FontStyle;
    // Field size check
    static_assert(sizeof(UnityEngine::FontStyle) == 0x4);
    // private System.Boolean m_BestFit
    // Size: 0x1
    // Offset: 0x20
    bool m_BestFit;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_BestFit and: m_MinSize
    char __padding3[0x3] = {};
    // private System.Int32 m_MinSize
    // Size: 0x4
    // Offset: 0x24
    int m_MinSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_MaxSize
    // Size: 0x4
    // Offset: 0x28
    int m_MaxSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [FormerlySerializedAsAttribute] Offset: 0xCEFF34
    // private UnityEngine.TextAnchor m_Alignment
    // Size: 0x4
    // Offset: 0x2C
    UnityEngine::TextAnchor m_Alignment;
    // Field size check
    static_assert(sizeof(UnityEngine::TextAnchor) == 0x4);
    // private System.Boolean m_AlignByGeometry
    // Size: 0x1
    // Offset: 0x30
    bool m_AlignByGeometry;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [FormerlySerializedAsAttribute] Offset: 0xCEFF90
    // private System.Boolean m_RichText
    // Size: 0x1
    // Offset: 0x31
    bool m_RichText;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_RichText and: m_HorizontalOverflow
    char __padding8[0x2] = {};
    // private UnityEngine.HorizontalWrapMode m_HorizontalOverflow
    // Size: 0x4
    // Offset: 0x34
    UnityEngine::HorizontalWrapMode m_HorizontalOverflow;
    // Field size check
    static_assert(sizeof(UnityEngine::HorizontalWrapMode) == 0x4);
    // private UnityEngine.VerticalWrapMode m_VerticalOverflow
    // Size: 0x4
    // Offset: 0x38
    UnityEngine::VerticalWrapMode m_VerticalOverflow;
    // Field size check
    static_assert(sizeof(UnityEngine::VerticalWrapMode) == 0x4);
    // private System.Single m_LineSpacing
    // Size: 0x4
    // Offset: 0x3C
    float m_LineSpacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: FontData
    FontData(UnityEngine::Font* m_Font_ = {}, int m_FontSize_ = {}, UnityEngine::FontStyle m_FontStyle_ = {}, bool m_BestFit_ = {}, int m_MinSize_ = {}, int m_MaxSize_ = {}, UnityEngine::TextAnchor m_Alignment_ = {}, bool m_AlignByGeometry_ = {}, bool m_RichText_ = {}, UnityEngine::HorizontalWrapMode m_HorizontalOverflow_ = {}, UnityEngine::VerticalWrapMode m_VerticalOverflow_ = {}, float m_LineSpacing_ = {}) noexcept : m_Font{m_Font_}, m_FontSize{m_FontSize_}, m_FontStyle{m_FontStyle_}, m_BestFit{m_BestFit_}, m_MinSize{m_MinSize_}, m_MaxSize{m_MaxSize_}, m_Alignment{m_Alignment_}, m_AlignByGeometry{m_AlignByGeometry_}, m_RichText{m_RichText_}, m_HorizontalOverflow{m_HorizontalOverflow_}, m_VerticalOverflow{m_VerticalOverflow_}, m_LineSpacing{m_LineSpacing_} {}
    // Creating interface conversion operator: operator UnityEngine::ISerializationCallbackReceiver
    operator UnityEngine::ISerializationCallbackReceiver() noexcept {
      return *reinterpret_cast<UnityEngine::ISerializationCallbackReceiver*>(this);
    }
    // static public UnityEngine.UI.FontData get_defaultFontData()
    // Offset: 0x1809808
    static UnityEngine::UI::FontData* get_defaultFontData();
    // public UnityEngine.Font get_font()
    // Offset: 0x18098A8
    UnityEngine::Font* get_font();
    // public System.Void set_font(UnityEngine.Font value)
    // Offset: 0x18098B0
    void set_font(UnityEngine::Font* value);
    // public System.Int32 get_fontSize()
    // Offset: 0x18098B8
    int get_fontSize();
    // public System.Void set_fontSize(System.Int32 value)
    // Offset: 0x18098C0
    void set_fontSize(int value);
    // public UnityEngine.FontStyle get_fontStyle()
    // Offset: 0x18098C8
    UnityEngine::FontStyle get_fontStyle();
    // public System.Void set_fontStyle(UnityEngine.FontStyle value)
    // Offset: 0x18098D0
    void set_fontStyle(UnityEngine::FontStyle value);
    // public System.Boolean get_bestFit()
    // Offset: 0x18098D8
    bool get_bestFit();
    // public System.Void set_bestFit(System.Boolean value)
    // Offset: 0x18098E0
    void set_bestFit(bool value);
    // public System.Int32 get_minSize()
    // Offset: 0x18098EC
    int get_minSize();
    // public System.Void set_minSize(System.Int32 value)
    // Offset: 0x18098F4
    void set_minSize(int value);
    // public System.Int32 get_maxSize()
    // Offset: 0x18098FC
    int get_maxSize();
    // public System.Void set_maxSize(System.Int32 value)
    // Offset: 0x1809904
    void set_maxSize(int value);
    // public UnityEngine.TextAnchor get_alignment()
    // Offset: 0x180990C
    UnityEngine::TextAnchor get_alignment();
    // public System.Void set_alignment(UnityEngine.TextAnchor value)
    // Offset: 0x1809914
    void set_alignment(UnityEngine::TextAnchor value);
    // public System.Boolean get_alignByGeometry()
    // Offset: 0x180991C
    bool get_alignByGeometry();
    // public System.Void set_alignByGeometry(System.Boolean value)
    // Offset: 0x1809924
    void set_alignByGeometry(bool value);
    // public System.Boolean get_richText()
    // Offset: 0x1809930
    bool get_richText();
    // public System.Void set_richText(System.Boolean value)
    // Offset: 0x1809938
    void set_richText(bool value);
    // public UnityEngine.HorizontalWrapMode get_horizontalOverflow()
    // Offset: 0x1809944
    UnityEngine::HorizontalWrapMode get_horizontalOverflow();
    // public System.Void set_horizontalOverflow(UnityEngine.HorizontalWrapMode value)
    // Offset: 0x180994C
    void set_horizontalOverflow(UnityEngine::HorizontalWrapMode value);
    // public UnityEngine.VerticalWrapMode get_verticalOverflow()
    // Offset: 0x1809954
    UnityEngine::VerticalWrapMode get_verticalOverflow();
    // public System.Void set_verticalOverflow(UnityEngine.VerticalWrapMode value)
    // Offset: 0x180995C
    void set_verticalOverflow(UnityEngine::VerticalWrapMode value);
    // public System.Single get_lineSpacing()
    // Offset: 0x1809964
    float get_lineSpacing();
    // public System.Void set_lineSpacing(System.Single value)
    // Offset: 0x180996C
    void set_lineSpacing(float value);
    // private System.Void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize()
    // Offset: 0x1809974
    // Implemented from: UnityEngine.ISerializationCallbackReceiver
    // Base method: System.Void ISerializationCallbackReceiver::OnBeforeSerialize()
    void UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize();
    // private System.Void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize()
    // Offset: 0x1809978
    // Implemented from: UnityEngine.ISerializationCallbackReceiver
    // Base method: System.Void ISerializationCallbackReceiver::OnAfterDeserialize()
    void UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize();
    // public System.Void .ctor()
    // Offset: 0x18098A0
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FontData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::UI::FontData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FontData*, creationType>()));
    }
  }; // UnityEngine.UI.FontData
  #pragma pack(pop)
  static check_size<sizeof(FontData), 60 + sizeof(float)> __UnityEngine_UI_FontDataSizeCheck;
  static_assert(sizeof(FontData) == 0x40);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::UI::FontData*, "UnityEngine.UI", "FontData");
