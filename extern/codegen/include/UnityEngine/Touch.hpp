// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.TouchPhase
#include "UnityEngine/TouchPhase.hpp"
// Including type: UnityEngine.TouchType
#include "UnityEngine/TouchType.hpp"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Autogenerated type: UnityEngine.Touch
  struct Touch : public System::ValueType {
    public:
    // private System.Int32 m_FingerId
    // Offset: 0x0
    int m_FingerId;
    // private UnityEngine.Vector2 m_Position
    // Offset: 0x4
    UnityEngine::Vector2 m_Position;
    // private UnityEngine.Vector2 m_RawPosition
    // Offset: 0xC
    UnityEngine::Vector2 m_RawPosition;
    // private UnityEngine.Vector2 m_PositionDelta
    // Offset: 0x14
    UnityEngine::Vector2 m_PositionDelta;
    // private System.Single m_TimeDelta
    // Offset: 0x1C
    float m_TimeDelta;
    // private System.Int32 m_TapCount
    // Offset: 0x20
    int m_TapCount;
    // private UnityEngine.TouchPhase m_Phase
    // Offset: 0x24
    UnityEngine::TouchPhase m_Phase;
    // private UnityEngine.TouchType m_Type
    // Offset: 0x28
    UnityEngine::TouchType m_Type;
    // private System.Single m_Pressure
    // Offset: 0x2C
    float m_Pressure;
    // private System.Single m_maximumPossiblePressure
    // Offset: 0x30
    float m_maximumPossiblePressure;
    // private System.Single m_Radius
    // Offset: 0x34
    float m_Radius;
    // private System.Single m_RadiusVariance
    // Offset: 0x38
    float m_RadiusVariance;
    // private System.Single m_AltitudeAngle
    // Offset: 0x3C
    float m_AltitudeAngle;
    // private System.Single m_AzimuthAngle
    // Offset: 0x40
    float m_AzimuthAngle;
    // Creating value type constructor for type: Touch
    constexpr Touch(int m_FingerId_ = {}, UnityEngine::Vector2 m_Position_ = {}, UnityEngine::Vector2 m_RawPosition_ = {}, UnityEngine::Vector2 m_PositionDelta_ = {}, float m_TimeDelta_ = {}, int m_TapCount_ = {}, UnityEngine::TouchPhase m_Phase_ = {}, UnityEngine::TouchType m_Type_ = {}, float m_Pressure_ = {}, float m_maximumPossiblePressure_ = {}, float m_Radius_ = {}, float m_RadiusVariance_ = {}, float m_AltitudeAngle_ = {}, float m_AzimuthAngle_ = {}) noexcept : m_FingerId{m_FingerId_}, m_Position{m_Position_}, m_RawPosition{m_RawPosition_}, m_PositionDelta{m_PositionDelta_}, m_TimeDelta{m_TimeDelta_}, m_TapCount{m_TapCount_}, m_Phase{m_Phase_}, m_Type{m_Type_}, m_Pressure{m_Pressure_}, m_maximumPossiblePressure{m_maximumPossiblePressure_}, m_Radius{m_Radius_}, m_RadiusVariance{m_RadiusVariance_}, m_AltitudeAngle{m_AltitudeAngle_}, m_AzimuthAngle{m_AzimuthAngle_} {}
    // public System.Int32 get_fingerId()
    // Offset: 0xA60A34
    int get_fingerId();
    // public UnityEngine.Vector2 get_position()
    // Offset: 0xA60A3C
    UnityEngine::Vector2 get_position();
    // public UnityEngine.TouchPhase get_phase()
    // Offset: 0xA60A44
    UnityEngine::TouchPhase get_phase();
    // public UnityEngine.TouchType get_type()
    // Offset: 0xA60A4C
    UnityEngine::TouchType get_type();
  }; // UnityEngine.Touch
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Touch, "UnityEngine", "Touch");
#pragma pack(pop)
