// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Autogenerated type: UnityEngine.ParticleSystem/Particle
  struct ParticleSystem::Particle : public System::ValueType {
    public:
    // private UnityEngine.Vector3 m_Position
    // Offset: 0x0
    UnityEngine::Vector3 m_Position;
    // private UnityEngine.Vector3 m_Velocity
    // Offset: 0xC
    UnityEngine::Vector3 m_Velocity;
    // private UnityEngine.Vector3 m_AnimatedVelocity
    // Offset: 0x18
    UnityEngine::Vector3 m_AnimatedVelocity;
    // private UnityEngine.Vector3 m_InitialVelocity
    // Offset: 0x24
    UnityEngine::Vector3 m_InitialVelocity;
    // private UnityEngine.Vector3 m_AxisOfRotation
    // Offset: 0x30
    UnityEngine::Vector3 m_AxisOfRotation;
    // private UnityEngine.Vector3 m_Rotation
    // Offset: 0x3C
    UnityEngine::Vector3 m_Rotation;
    // private UnityEngine.Vector3 m_AngularVelocity
    // Offset: 0x48
    UnityEngine::Vector3 m_AngularVelocity;
    // private UnityEngine.Vector3 m_StartSize
    // Offset: 0x54
    UnityEngine::Vector3 m_StartSize;
    // private UnityEngine.Color32 m_StartColor
    // Offset: 0x60
    UnityEngine::Color32 m_StartColor;
    // private System.UInt32 m_RandomSeed
    // Offset: 0x64
    uint m_RandomSeed;
    // private System.UInt32 m_ParentRandomSeed
    // Offset: 0x68
    uint m_ParentRandomSeed;
    // private System.Single m_Lifetime
    // Offset: 0x6C
    float m_Lifetime;
    // private System.Single m_StartLifetime
    // Offset: 0x70
    float m_StartLifetime;
    // private System.Int32 m_MeshIndex
    // Offset: 0x74
    int m_MeshIndex;
    // private System.Single m_EmitAccumulator0
    // Offset: 0x78
    float m_EmitAccumulator0;
    // private System.Single m_EmitAccumulator1
    // Offset: 0x7C
    float m_EmitAccumulator1;
    // private System.UInt32 m_Flags
    // Offset: 0x80
    uint m_Flags;
    // Creating value type constructor for type: Particle
    constexpr Particle(UnityEngine::Vector3 m_Position_ = {}, UnityEngine::Vector3 m_Velocity_ = {}, UnityEngine::Vector3 m_AnimatedVelocity_ = {}, UnityEngine::Vector3 m_InitialVelocity_ = {}, UnityEngine::Vector3 m_AxisOfRotation_ = {}, UnityEngine::Vector3 m_Rotation_ = {}, UnityEngine::Vector3 m_AngularVelocity_ = {}, UnityEngine::Vector3 m_StartSize_ = {}, UnityEngine::Color32 m_StartColor_ = {}, uint m_RandomSeed_ = {}, uint m_ParentRandomSeed_ = {}, float m_Lifetime_ = {}, float m_StartLifetime_ = {}, int m_MeshIndex_ = {}, float m_EmitAccumulator0_ = {}, float m_EmitAccumulator1_ = {}, uint m_Flags_ = {}) noexcept : m_Position{m_Position_}, m_Velocity{m_Velocity_}, m_AnimatedVelocity{m_AnimatedVelocity_}, m_InitialVelocity{m_InitialVelocity_}, m_AxisOfRotation{m_AxisOfRotation_}, m_Rotation{m_Rotation_}, m_AngularVelocity{m_AngularVelocity_}, m_StartSize{m_StartSize_}, m_StartColor{m_StartColor_}, m_RandomSeed{m_RandomSeed_}, m_ParentRandomSeed{m_ParentRandomSeed_}, m_Lifetime{m_Lifetime_}, m_StartLifetime{m_StartLifetime_}, m_MeshIndex{m_MeshIndex_}, m_EmitAccumulator0{m_EmitAccumulator0_}, m_EmitAccumulator1{m_EmitAccumulator1_}, m_Flags{m_Flags_} {}
    // public System.Void set_lifetime(System.Single value)
    // Offset: 0xA5FCFC
    void set_lifetime(float value);
    // public System.Void set_position(UnityEngine.Vector3 value)
    // Offset: 0xA5FD04
    void set_position(UnityEngine::Vector3 value);
    // public System.Void set_velocity(UnityEngine.Vector3 value)
    // Offset: 0xA5FD10
    void set_velocity(UnityEngine::Vector3 value);
    // public System.Void set_remainingLifetime(System.Single value)
    // Offset: 0xA5FD1C
    void set_remainingLifetime(float value);
    // public System.Void set_startLifetime(System.Single value)
    // Offset: 0xA5FD24
    void set_startLifetime(float value);
    // public System.Void set_startColor(UnityEngine.Color32 value)
    // Offset: 0xA5FD2C
    void set_startColor(UnityEngine::Color32 value);
    // public System.Void set_randomSeed(System.UInt32 value)
    // Offset: 0xA5FD34
    void set_randomSeed(uint value);
    // public System.Void set_startSize(System.Single value)
    // Offset: 0xA5FD3C
    void set_startSize(float value);
    // public System.Void set_rotation3D(UnityEngine.Vector3 value)
    // Offset: 0xA5FD8C
    void set_rotation3D(UnityEngine::Vector3 value);
    // public System.Void set_angularVelocity3D(UnityEngine.Vector3 value)
    // Offset: 0xA5FD94
    void set_angularVelocity3D(UnityEngine::Vector3 value);
  }; // UnityEngine.ParticleSystem/Particle
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::ParticleSystem::Particle, "UnityEngine", "ParticleSystem/Particle");
#pragma pack(pop)
