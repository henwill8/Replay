// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.ContactPoint
#include "UnityEngine/ContactPoint.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Rigidbody
  class Rigidbody;
  // Forward declaring type: Collider
  class Collider;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x50
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Collision
  // [] Offset: FFFFFFFF
  // [RequiredByNativeCodeAttribute] Offset: CCE3B0
  class Collision : public ::Il2CppObject {
    public:
    // UnityEngine.Vector3 m_Impulse
    // Size: 0xC
    // Offset: 0x10
    UnityEngine::Vector3 m_Impulse;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // UnityEngine.Vector3 m_RelativeVelocity
    // Size: 0xC
    // Offset: 0x1C
    UnityEngine::Vector3 m_RelativeVelocity;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // UnityEngine.Rigidbody m_Rigidbody
    // Size: 0x8
    // Offset: 0x28
    UnityEngine::Rigidbody* m_Rigidbody;
    // Field size check
    static_assert(sizeof(UnityEngine::Rigidbody*) == 0x8);
    // UnityEngine.Collider m_Collider
    // Size: 0x8
    // Offset: 0x30
    UnityEngine::Collider* m_Collider;
    // Field size check
    static_assert(sizeof(UnityEngine::Collider*) == 0x8);
    // System.Int32 m_ContactCount
    // Size: 0x4
    // Offset: 0x38
    int m_ContactCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_ContactCount and: m_ReusedContacts
    char __padding4[0x4] = {};
    // UnityEngine.ContactPoint[] m_ReusedContacts
    // Size: 0x8
    // Offset: 0x40
    ::Array<UnityEngine::ContactPoint>* m_ReusedContacts;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::ContactPoint>*) == 0x8);
    // UnityEngine.ContactPoint[] m_LegacyContacts
    // Size: 0x8
    // Offset: 0x48
    ::Array<UnityEngine::ContactPoint>* m_LegacyContacts;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::ContactPoint>*) == 0x8);
    // Creating value type constructor for type: Collision
    Collision(UnityEngine::Vector3 m_Impulse_ = {}, UnityEngine::Vector3 m_RelativeVelocity_ = {}, UnityEngine::Rigidbody* m_Rigidbody_ = {}, UnityEngine::Collider* m_Collider_ = {}, int m_ContactCount_ = {}, ::Array<UnityEngine::ContactPoint>* m_ReusedContacts_ = {}, ::Array<UnityEngine::ContactPoint>* m_LegacyContacts_ = {}) noexcept : m_Impulse{m_Impulse_}, m_RelativeVelocity{m_RelativeVelocity_}, m_Rigidbody{m_Rigidbody_}, m_Collider{m_Collider_}, m_ContactCount{m_ContactCount_}, m_ReusedContacts{m_ReusedContacts_}, m_LegacyContacts{m_LegacyContacts_} {}
  }; // UnityEngine.Collision
  #pragma pack(pop)
  static check_size<sizeof(Collision), 72 + sizeof(::Array<UnityEngine::ContactPoint>*)> __UnityEngine_CollisionSizeCheck;
  static_assert(sizeof(Collision) == 0x50);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Collision*, "UnityEngine", "Collision");
