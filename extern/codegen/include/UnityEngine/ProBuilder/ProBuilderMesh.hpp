// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.UInt32
#include "System/UInt32.hpp"
// Including type: System.Collections.Generic.KeyValuePair`2
#include "System/Collections/Generic/KeyValuePair_2.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.ProBuilder.Edge
#include "UnityEngine/ProBuilder/Edge.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: UnityEngine::ProBuilder
namespace UnityEngine::ProBuilder {
  // Forward declaring type: Face
  class Face;
  // Forward declaring type: SharedVertex
  class SharedVertex;
  // Forward declaring type: Vertex
  class Vertex;
  // Forward declaring type: UnwrapParameters
  class UnwrapParameters;
  // Forward declaring type: MeshArrays
  struct MeshArrays;
  // Forward declaring type: MeshSyncState
  struct MeshSyncState;
  // Forward declaring type: RefreshMask
  struct RefreshMask;
  // Forward declaring type: AutoUnwrapSettings
  struct AutoUnwrapSettings;
}
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: ReadOnlyCollection`1<T>
  template<typename T>
  class ReadOnlyCollection_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: MeshFilter
  class MeshFilter;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: MeshTopology
  struct MeshTopology;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: UnityEngine.ProBuilder
namespace UnityEngine::ProBuilder {
  // Autogenerated type: UnityEngine.ProBuilder.ProBuilderMesh
  class ProBuilderMesh : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: UnityEngine::ProBuilder::ProBuilderMesh::CacheValidState
    struct CacheValidState;
    // Nested type: UnityEngine::ProBuilder::ProBuilderMesh::$$c
    class $$c;
    // Nested type: UnityEngine::ProBuilder::ProBuilderMesh::$$c__DisplayClass143_0
    class $$c__DisplayClass143_0;
    // Nested type: UnityEngine::ProBuilder::ProBuilderMesh::$$c__DisplayClass145_0
    class $$c__DisplayClass145_0;
    // Autogenerated type: UnityEngine.ProBuilder.ProBuilderMesh/CacheValidState
    struct CacheValidState : public System::Enum {
      public:
      // public System.Byte value__
      // Offset: 0x0
      uint8_t value;
      // Creating value type constructor for type: CacheValidState
      constexpr CacheValidState(uint8_t value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator uint8_t
      constexpr operator uint8_t() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.ProBuilder.ProBuilderMesh/CacheValidState SharedVertex
      static constexpr const uint8_t SharedVertex = 1u;
      // Get static field: static public UnityEngine.ProBuilder.ProBuilderMesh/CacheValidState SharedVertex
      static UnityEngine::ProBuilder::ProBuilderMesh::CacheValidState _get_SharedVertex();
      // Set static field: static public UnityEngine.ProBuilder.ProBuilderMesh/CacheValidState SharedVertex
      static void _set_SharedVertex(UnityEngine::ProBuilder::ProBuilderMesh::CacheValidState value);
      // static field const value: static public UnityEngine.ProBuilder.ProBuilderMesh/CacheValidState SharedTexture
      static constexpr const uint8_t SharedTexture = 2u;
      // Get static field: static public UnityEngine.ProBuilder.ProBuilderMesh/CacheValidState SharedTexture
      static UnityEngine::ProBuilder::ProBuilderMesh::CacheValidState _get_SharedTexture();
      // Set static field: static public UnityEngine.ProBuilder.ProBuilderMesh/CacheValidState SharedTexture
      static void _set_SharedTexture(UnityEngine::ProBuilder::ProBuilderMesh::CacheValidState value);
    }; // UnityEngine.ProBuilder.ProBuilderMesh/CacheValidState
    // private System.Int32 m_MeshFormatVersion
    // Offset: 0x18
    int m_MeshFormatVersion;
    // private UnityEngine.ProBuilder.Face[] m_Faces
    // Offset: 0x20
    ::Array<UnityEngine::ProBuilder::Face*>* m_Faces;
    // private UnityEngine.ProBuilder.SharedVertex[] m_SharedVertices
    // Offset: 0x28
    ::Array<UnityEngine::ProBuilder::SharedVertex*>* m_SharedVertices;
    // private UnityEngine.ProBuilder.ProBuilderMesh/CacheValidState m_CacheValid
    // Offset: 0x30
    UnityEngine::ProBuilder::ProBuilderMesh::CacheValidState m_CacheValid;
    // private System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> m_SharedVertexLookup
    // Offset: 0x38
    System::Collections::Generic::Dictionary_2<int, int>* m_SharedVertexLookup;
    // private UnityEngine.ProBuilder.SharedVertex[] m_SharedTextures
    // Offset: 0x40
    ::Array<UnityEngine::ProBuilder::SharedVertex*>* m_SharedTextures;
    // private System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> m_SharedTextureLookup
    // Offset: 0x48
    System::Collections::Generic::Dictionary_2<int, int>* m_SharedTextureLookup;
    // private UnityEngine.Vector3[] m_Positions
    // Offset: 0x50
    ::Array<UnityEngine::Vector3>* m_Positions;
    // private UnityEngine.Vector2[] m_Textures0
    // Offset: 0x58
    ::Array<UnityEngine::Vector2>* m_Textures0;
    // private System.Collections.Generic.List`1<UnityEngine.Vector4> m_Textures2
    // Offset: 0x60
    System::Collections::Generic::List_1<UnityEngine::Vector4>* m_Textures2;
    // private System.Collections.Generic.List`1<UnityEngine.Vector4> m_Textures3
    // Offset: 0x68
    System::Collections::Generic::List_1<UnityEngine::Vector4>* m_Textures3;
    // private UnityEngine.Vector4[] m_Tangents
    // Offset: 0x70
    ::Array<UnityEngine::Vector4>* m_Tangents;
    // private UnityEngine.Vector3[] m_Normals
    // Offset: 0x78
    ::Array<UnityEngine::Vector3>* m_Normals;
    // private UnityEngine.Color[] m_Colors
    // Offset: 0x80
    ::Array<UnityEngine::Color>* m_Colors;
    // private System.Boolean <userCollisions>k__BackingField
    // Offset: 0x88
    bool userCollisions;
    // private UnityEngine.ProBuilder.UnwrapParameters m_UnwrapParameters
    // Offset: 0x90
    UnityEngine::ProBuilder::UnwrapParameters* m_UnwrapParameters;
    // private System.Boolean m_PreserveMeshAssetOnDestroy
    // Offset: 0x98
    bool m_PreserveMeshAssetOnDestroy;
    // System.String assetGuid
    // Offset: 0xA0
    ::Il2CppString* assetGuid;
    // private UnityEngine.MeshRenderer m_MeshRenderer
    // Offset: 0xA8
    UnityEngine::MeshRenderer* m_MeshRenderer;
    // private UnityEngine.MeshFilter m_MeshFilter
    // Offset: 0xB0
    UnityEngine::MeshFilter* m_MeshFilter;
    // private System.Boolean m_IsSelectable
    // Offset: 0xB8
    bool m_IsSelectable;
    // private System.Int32[] m_SelectedFaces
    // Offset: 0xC0
    ::Array<int>* m_SelectedFaces;
    // private UnityEngine.ProBuilder.Edge[] m_SelectedEdges
    // Offset: 0xC8
    ::Array<UnityEngine::ProBuilder::Edge>* m_SelectedEdges;
    // private System.Int32[] m_SelectedVertices
    // Offset: 0xD0
    ::Array<int>* m_SelectedVertices;
    // private System.Boolean m_SelectedCacheDirty
    // Offset: 0xD8
    bool m_SelectedCacheDirty;
    // private System.Int32 m_SelectedSharedVerticesCount
    // Offset: 0xDC
    int m_SelectedSharedVerticesCount;
    // private System.Int32 m_SelectedCoincidentVertexCount
    // Offset: 0xE0
    int m_SelectedCoincidentVertexCount;
    // private System.Collections.Generic.HashSet`1<System.Int32> m_SelectedSharedVertices
    // Offset: 0xE8
    System::Collections::Generic::HashSet_1<int>* m_SelectedSharedVertices;
    // private System.Collections.Generic.List`1<System.Int32> m_SelectedCoincidentVertices
    // Offset: 0xF0
    System::Collections::Generic::List_1<int>* m_SelectedCoincidentVertices;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Int32 k_UVChannelCount
    static constexpr const int k_UVChannelCount = 4;
    // Get static field: static private System.Int32 k_UVChannelCount
    static int _get_k_UVChannelCount();
    // Set static field: static private System.Int32 k_UVChannelCount
    static void _set_k_UVChannelCount(int value);
    // static field const value: static private System.Int32 k_MeshFormatVersion
    static constexpr const int k_MeshFormatVersion = 1;
    // Get static field: static private System.Int32 k_MeshFormatVersion
    static int _get_k_MeshFormatVersion();
    // Set static field: static private System.Int32 k_MeshFormatVersion
    static void _set_k_MeshFormatVersion(int value);
    // static field const value: static private System.Int32 k_MeshFormatVersionSubmeshMaterialRefactor
    static constexpr const int k_MeshFormatVersionSubmeshMaterialRefactor = 1;
    // Get static field: static private System.Int32 k_MeshFormatVersionSubmeshMaterialRefactor
    static int _get_k_MeshFormatVersionSubmeshMaterialRefactor();
    // Set static field: static private System.Int32 k_MeshFormatVersionSubmeshMaterialRefactor
    static void _set_k_MeshFormatVersionSubmeshMaterialRefactor(int value);
    // static field const value: static public System.UInt32 maxVertexCount
    static constexpr const uint maxVertexCount = 65535u;
    // Get static field: static public System.UInt32 maxVertexCount
    static uint _get_maxVertexCount();
    // Set static field: static public System.UInt32 maxVertexCount
    static void _set_maxVertexCount(uint value);
    // Get static field: static private System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> meshWillBeDestroyed
    static System::Action_1<UnityEngine::ProBuilder::ProBuilderMesh*>* _get_meshWillBeDestroyed();
    // Set static field: static private System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> meshWillBeDestroyed
    static void _set_meshWillBeDestroyed(System::Action_1<UnityEngine::ProBuilder::ProBuilderMesh*>* value);
    // Get static field: static private System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> componentWillBeDestroyed
    static System::Action_1<UnityEngine::ProBuilder::ProBuilderMesh*>* _get_componentWillBeDestroyed();
    // Set static field: static private System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> componentWillBeDestroyed
    static void _set_componentWillBeDestroyed(System::Action_1<UnityEngine::ProBuilder::ProBuilderMesh*>* value);
    // Get static field: static private System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> elementSelectionChanged
    static System::Action_1<UnityEngine::ProBuilder::ProBuilderMesh*>* _get_elementSelectionChanged();
    // Set static field: static private System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> elementSelectionChanged
    static void _set_elementSelectionChanged(System::Action_1<UnityEngine::ProBuilder::ProBuilderMesh*>* value);
    // Get static field: static private System.Collections.Generic.HashSet`1<System.Int32> s_CachedHashSet
    static System::Collections::Generic::HashSet_1<int>* _get_s_CachedHashSet();
    // Set static field: static private System.Collections.Generic.HashSet`1<System.Int32> s_CachedHashSet
    static void _set_s_CachedHashSet(System::Collections::Generic::HashSet_1<int>* value);
    // public System.Boolean get_userCollisions()
    // Offset: 0x1033D58
    bool get_userCollisions();
    // public System.Void set_userCollisions(System.Boolean value)
    // Offset: 0x1033D60
    void set_userCollisions(bool value);
    // public UnityEngine.ProBuilder.UnwrapParameters get_unwrapParameters()
    // Offset: 0x1033D6C
    UnityEngine::ProBuilder::UnwrapParameters* get_unwrapParameters();
    // public System.Void set_unwrapParameters(UnityEngine.ProBuilder.UnwrapParameters value)
    // Offset: 0x1033D74
    void set_unwrapParameters(UnityEngine::ProBuilder::UnwrapParameters* value);
    // UnityEngine.MeshRenderer get_renderer()
    // Offset: 0x1033D7C
    UnityEngine::MeshRenderer* get_renderer();
    // UnityEngine.MeshFilter get_filter()
    // Offset: 0x1033E28
    UnityEngine::MeshFilter* get_filter();
    // public System.Boolean get_preserveMeshAssetOnDestroy()
    // Offset: 0x1033ED4
    bool get_preserveMeshAssetOnDestroy();
    // public System.Void set_preserveMeshAssetOnDestroy(System.Boolean value)
    // Offset: 0x1033EDC
    void set_preserveMeshAssetOnDestroy(bool value);
    // public System.Boolean HasArrays(UnityEngine.ProBuilder.MeshArrays channels)
    // Offset: 0x1033EE8
    bool HasArrays(UnityEngine::ProBuilder::MeshArrays channels);
    // UnityEngine.ProBuilder.Face[] get_facesInternal()
    // Offset: 0x1034124
    ::Array<UnityEngine::ProBuilder::Face*>* get_facesInternal();
    // System.Void set_facesInternal(UnityEngine.ProBuilder.Face[] value)
    // Offset: 0x103412C
    void set_facesInternal(::Array<UnityEngine::ProBuilder::Face*>* value);
    // public System.Collections.Generic.IList`1<UnityEngine.ProBuilder.Face> get_faces()
    // Offset: 0x1034134
    System::Collections::Generic::IList_1<UnityEngine::ProBuilder::Face*>* get_faces();
    // public System.Void set_faces(System.Collections.Generic.IList`1<UnityEngine.ProBuilder.Face> value)
    // Offset: 0x10341A4
    void set_faces(System::Collections::Generic::IList_1<UnityEngine::ProBuilder::Face*>* value);
    // System.Void InvalidateSharedVertexLookup()
    // Offset: 0x1034250
    void InvalidateSharedVertexLookup();
    // System.Void InvalidateSharedTextureLookup()
    // Offset: 0x1034300
    void InvalidateSharedTextureLookup();
    // System.Void InvalidateFaces()
    // Offset: 0x10343B0
    void InvalidateFaces();
    // System.Void InvalidateCaches()
    // Offset: 0x1034660
    void InvalidateCaches();
    // UnityEngine.ProBuilder.SharedVertex[] get_sharedVerticesInternal()
    // Offset: 0x1034698
    ::Array<UnityEngine::ProBuilder::SharedVertex*>* get_sharedVerticesInternal();
    // System.Void set_sharedVerticesInternal(UnityEngine.ProBuilder.SharedVertex[] value)
    // Offset: 0x10346A0
    void set_sharedVerticesInternal(::Array<UnityEngine::ProBuilder::SharedVertex*>* value);
    // public System.Collections.Generic.IList`1<UnityEngine.ProBuilder.SharedVertex> get_sharedVertices()
    // Offset: 0x10346C8
    System::Collections::Generic::IList_1<UnityEngine::ProBuilder::SharedVertex*>* get_sharedVertices();
    // public System.Void set_sharedVertices(System.Collections.Generic.IList`1<UnityEngine.ProBuilder.SharedVertex> value)
    // Offset: 0x1034738
    void set_sharedVertices(System::Collections::Generic::IList_1<UnityEngine::ProBuilder::SharedVertex*>* value);
    // System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> get_sharedVertexLookup()
    // Offset: 0x1034980
    System::Collections::Generic::Dictionary_2<int, int>* get_sharedVertexLookup();
    // System.Void SetSharedVertices(System.Collections.Generic.IEnumerable`1<System.Collections.Generic.KeyValuePair`2<System.Int32,System.Int32>> indexes)
    // Offset: 0x1034A30
    void SetSharedVertices(System::Collections::Generic::IEnumerable_1<System::Collections::Generic::KeyValuePair_2<int, int>>* indexes);
    // UnityEngine.ProBuilder.SharedVertex[] get_sharedTextures()
    // Offset: 0x1034ADC
    ::Array<UnityEngine::ProBuilder::SharedVertex*>* get_sharedTextures();
    // System.Void set_sharedTextures(UnityEngine.ProBuilder.SharedVertex[] value)
    // Offset: 0x1034AE4
    void set_sharedTextures(::Array<UnityEngine::ProBuilder::SharedVertex*>* value);
    // System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> get_sharedTextureLookup()
    // Offset: 0x1034B0C
    System::Collections::Generic::Dictionary_2<int, int>* get_sharedTextureLookup();
    // System.Void SetSharedTextures(System.Collections.Generic.IEnumerable`1<System.Collections.Generic.KeyValuePair`2<System.Int32,System.Int32>> indexes)
    // Offset: 0x1034B54
    void SetSharedTextures(System::Collections::Generic::IEnumerable_1<System::Collections::Generic::KeyValuePair_2<int, int>>* indexes);
    // UnityEngine.Vector3[] get_positionsInternal()
    // Offset: 0x1034C00
    ::Array<UnityEngine::Vector3>* get_positionsInternal();
    // System.Void set_positionsInternal(UnityEngine.Vector3[] value)
    // Offset: 0x1034C08
    void set_positionsInternal(::Array<UnityEngine::Vector3>* value);
    // public System.Collections.Generic.IList`1<UnityEngine.Vector3> get_positions()
    // Offset: 0x1034C10
    System::Collections::Generic::IList_1<UnityEngine::Vector3>* get_positions();
    // public System.Void set_positions(System.Collections.Generic.IList`1<UnityEngine.Vector3> value)
    // Offset: 0x1034C80
    void set_positions(System::Collections::Generic::IList_1<UnityEngine::Vector3>* value);
    // public UnityEngine.ProBuilder.Vertex[] GetVertices(System.Collections.Generic.IList`1<System.Int32> indexes)
    // Offset: 0x1034D2C
    ::Array<UnityEngine::ProBuilder::Vertex*>* GetVertices(System::Collections::Generic::IList_1<int>* indexes);
    // public System.Void SetVertices(System.Collections.Generic.IList`1<UnityEngine.ProBuilder.Vertex> vertices, System.Boolean applyMesh)
    // Offset: 0x10357C8
    void SetVertices(System::Collections::Generic::IList_1<UnityEngine::ProBuilder::Vertex*>* vertices, bool applyMesh);
    // public System.Collections.Generic.IList`1<UnityEngine.Vector3> get_normals()
    // Offset: 0x1035BE8
    System::Collections::Generic::IList_1<UnityEngine::Vector3>* get_normals();
    // UnityEngine.Vector3[] get_normalsInternal()
    // Offset: 0x1035C64
    ::Array<UnityEngine::Vector3>* get_normalsInternal();
    // System.Void set_normalsInternal(UnityEngine.Vector3[] value)
    // Offset: 0x1035C6C
    void set_normalsInternal(::Array<UnityEngine::Vector3>* value);
    // public UnityEngine.Vector3[] GetNormals()
    // Offset: 0x1035464
    ::Array<UnityEngine::Vector3>* GetNormals();
    // UnityEngine.Color[] get_colorsInternal()
    // Offset: 0x1035C74
    ::Array<UnityEngine::Color>* get_colorsInternal();
    // System.Void set_colorsInternal(UnityEngine.Color[] value)
    // Offset: 0x1035C7C
    void set_colorsInternal(::Array<UnityEngine::Color>* value);
    // public System.Collections.Generic.IList`1<UnityEngine.Color> get_colors()
    // Offset: 0x1035C84
    System::Collections::Generic::IList_1<UnityEngine::Color>* get_colors();
    // public System.Void set_colors(System.Collections.Generic.IList`1<UnityEngine.Color> value)
    // Offset: 0x1035D00
    void set_colors(System::Collections::Generic::IList_1<UnityEngine::Color>* value);
    // public UnityEngine.Color[] GetColors()
    // Offset: 0x1035DF0
    ::Array<UnityEngine::Color>* GetColors();
    // public System.Collections.Generic.IList`1<UnityEngine.Vector4> get_tangents()
    // Offset: 0x1035E88
    System::Collections::Generic::IList_1<UnityEngine::Vector4>* get_tangents();
    // public System.Void set_tangents(System.Collections.Generic.IList`1<UnityEngine.Vector4> value)
    // Offset: 0x1035F1C
    void set_tangents(System::Collections::Generic::IList_1<UnityEngine::Vector4>* value);
    // UnityEngine.Vector4[] get_tangentsInternal()
    // Offset: 0x103600C
    ::Array<UnityEngine::Vector4>* get_tangentsInternal();
    // System.Void set_tangentsInternal(UnityEngine.Vector4[] value)
    // Offset: 0x1036014
    void set_tangentsInternal(::Array<UnityEngine::Vector4>* value);
    // public UnityEngine.Vector4[] GetTangents()
    // Offset: 0x10353D4
    ::Array<UnityEngine::Vector4>* GetTangents();
    // UnityEngine.Vector2[] get_texturesInternal()
    // Offset: 0x103601C
    ::Array<UnityEngine::Vector2>* get_texturesInternal();
    // System.Void set_texturesInternal(UnityEngine.Vector2[] value)
    // Offset: 0x1036024
    void set_texturesInternal(::Array<UnityEngine::Vector2>* value);
    // public System.Collections.Generic.IList`1<UnityEngine.Vector2> get_textures()
    // Offset: 0x103602C
    System::Collections::Generic::IList_1<UnityEngine::Vector2>* get_textures();
    // public System.Void set_textures(System.Collections.Generic.IList`1<UnityEngine.Vector2> value)
    // Offset: 0x10360A8
    void set_textures(System::Collections::Generic::IList_1<UnityEngine::Vector2>* value);
    // public System.Void GetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector4> uvs)
    // Offset: 0x10354F4
    void GetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector4>* uvs);
    // System.Collections.ObjectModel.ReadOnlyCollection`1<UnityEngine.Vector2> GetUVs(System.Int32 channel)
    // Offset: 0x103618C
    System::Collections::ObjectModel::ReadOnlyCollection_1<UnityEngine::Vector2>* GetUVs(int channel);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector4> uvs)
    // Offset: 0x1036294
    void SetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector4>* uvs);
    // public System.Int32 get_faceCount()
    // Offset: 0x1036594
    int get_faceCount();
    // public System.Int32 get_vertexCount()
    // Offset: 0x10340EC
    int get_vertexCount();
    // public System.Int32 get_edgeCount()
    // Offset: 0x10365AC
    int get_edgeCount();
    // public System.Int32 get_indexCount()
    // Offset: 0x1036644
    int get_indexCount();
    // public System.Int32 get_triangleCount()
    // Offset: 0x1036754
    int get_triangleCount();
    // static public System.Void add_meshWillBeDestroyed(System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> value)
    // Offset: 0x1036874
    static void add_meshWillBeDestroyed(System::Action_1<UnityEngine::ProBuilder::ProBuilderMesh*>* value);
    // static public System.Void remove_meshWillBeDestroyed(System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> value)
    // Offset: 0x1036960
    static void remove_meshWillBeDestroyed(System::Action_1<UnityEngine::ProBuilder::ProBuilderMesh*>* value);
    // static System.Void add_componentWillBeDestroyed(System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> value)
    // Offset: 0x1036A4C
    static void add_componentWillBeDestroyed(System::Action_1<UnityEngine::ProBuilder::ProBuilderMesh*>* value);
    // static System.Void remove_componentWillBeDestroyed(System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> value)
    // Offset: 0x1036B3C
    static void remove_componentWillBeDestroyed(System::Action_1<UnityEngine::ProBuilder::ProBuilderMesh*>* value);
    // static public System.Void add_elementSelectionChanged(System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> value)
    // Offset: 0x1036C2C
    static void add_elementSelectionChanged(System::Action_1<UnityEngine::ProBuilder::ProBuilderMesh*>* value);
    // static public System.Void remove_elementSelectionChanged(System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> value)
    // Offset: 0x1036D1C
    static void remove_elementSelectionChanged(System::Action_1<UnityEngine::ProBuilder::ProBuilderMesh*>* value);
    // UnityEngine.Mesh get_mesh()
    // Offset: 0x1034104
    UnityEngine::Mesh* get_mesh();
    // System.Void set_mesh(UnityEngine.Mesh value)
    // Offset: 0x1036E0C
    void set_mesh(UnityEngine::Mesh* value);
    // System.Int32 get_id()
    // Offset: 0x1036E3C
    int get_id();
    // public UnityEngine.ProBuilder.MeshSyncState get_meshSyncState()
    // Offset: 0x1036E60
    UnityEngine::ProBuilder::MeshSyncState get_meshSyncState();
    // public System.Void Clear()
    // Offset: 0x1035AA8
    void Clear();
    // private System.Void Awake()
    // Offset: 0x1037028
    void Awake();
    // private System.Void OnDestroy()
    // Offset: 0x10370C4
    void OnDestroy();
    // static UnityEngine.ProBuilder.ProBuilderMesh CreateInstanceWithPoints(UnityEngine.Vector3[] positions)
    // Offset: 0x103727C
    static UnityEngine::ProBuilder::ProBuilderMesh* CreateInstanceWithPoints(::Array<UnityEngine::Vector3>* positions);
    // static public UnityEngine.ProBuilder.ProBuilderMesh Create()
    // Offset: 0x10375AC
    static UnityEngine::ProBuilder::ProBuilderMesh* Create();
    // static public UnityEngine.ProBuilder.ProBuilderMesh Create(System.Collections.Generic.IEnumerable`1<UnityEngine.Vector3> positions, System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Face> faces)
    // Offset: 0x1037638
    static UnityEngine::ProBuilder::ProBuilderMesh* Create(System::Collections::Generic::IEnumerable_1<UnityEngine::Vector3>* positions, System::Collections::Generic::IEnumerable_1<UnityEngine::ProBuilder::Face*>* faces);
    // static public UnityEngine.ProBuilder.ProBuilderMesh Create(System.Collections.Generic.IList`1<UnityEngine.ProBuilder.Vertex> vertices, System.Collections.Generic.IList`1<UnityEngine.ProBuilder.Face> faces, System.Collections.Generic.IList`1<UnityEngine.ProBuilder.SharedVertex> sharedVertices, System.Collections.Generic.IList`1<UnityEngine.ProBuilder.SharedVertex> sharedTextures, System.Collections.Generic.IList`1<UnityEngine.Material> materials)
    // Offset: 0x1037818
    static UnityEngine::ProBuilder::ProBuilderMesh* Create(System::Collections::Generic::IList_1<UnityEngine::ProBuilder::Vertex*>* vertices, System::Collections::Generic::IList_1<UnityEngine::ProBuilder::Face*>* faces, System::Collections::Generic::IList_1<UnityEngine::ProBuilder::SharedVertex*>* sharedVertices, System::Collections::Generic::IList_1<UnityEngine::ProBuilder::SharedVertex*>* sharedTextures, System::Collections::Generic::IList_1<UnityEngine::Material*>* materials);
    // private System.Void GeometryWithPoints(UnityEngine.Vector3[] points)
    // Offset: 0x1037374
    void GeometryWithPoints(::Array<UnityEngine::Vector3>* points);
    // public System.Void RebuildWithPositionsAndFaces(System.Collections.Generic.IEnumerable`1<UnityEngine.Vector3> vertices, System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Face> faces)
    // Offset: 0x10376F8
    void RebuildWithPositionsAndFaces(System::Collections::Generic::IEnumerable_1<UnityEngine::Vector3>* vertices, System::Collections::Generic::IEnumerable_1<UnityEngine::ProBuilder::Face*>* faces);
    // System.Void Rebuild()
    // Offset: 0x1037098
    void Rebuild();
    // public System.Void ToMesh(UnityEngine.MeshTopology preferredTopology)
    // Offset: 0x103799C
    void ToMesh(UnityEngine::MeshTopology preferredTopology);
    // System.Void MakeUnique()
    // Offset: 0x1037D00
    void MakeUnique();
    // public System.Void CopyFrom(UnityEngine.ProBuilder.ProBuilderMesh other)
    // Offset: 0x1037D7C
    void CopyFrom(UnityEngine::ProBuilder::ProBuilderMesh* other);
    // public System.Void Refresh(UnityEngine.ProBuilder.RefreshMask mask)
    // Offset: 0x1037C88
    void Refresh(UnityEngine::ProBuilder::RefreshMask mask);
    // private System.Void RefreshCollisions()
    // Offset: 0x1038640
    void RefreshCollisions();
    // System.Int32 GetUnusedTextureGroup(System.Int32 i)
    // Offset: 0x1038758
    int GetUnusedTextureGroup(int i);
    // static private System.Boolean IsValidTextureGroup(System.Int32 group)
    // Offset: 0x1038844
    static bool IsValidTextureGroup(int group);
    // System.Int32 UnusedElementGroup(System.Int32 i)
    // Offset: 0x1038850
    int UnusedElementGroup(int i);
    // public System.Void RefreshUV(System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Face> facesToRefresh)
    // Offset: 0x1038024
    void RefreshUV(System::Collections::Generic::IEnumerable_1<UnityEngine::ProBuilder::Face*>* facesToRefresh);
    // System.Void SetGroupUV(UnityEngine.ProBuilder.AutoUnwrapSettings settings, System.Int32 group)
    // Offset: 0x103893C
    void SetGroupUV(UnityEngine::ProBuilder::AutoUnwrapSettings settings, int group);
    // private System.Void RefreshColors()
    // Offset: 0x10384FC
    void RefreshColors();
    // public System.Void SetFaceColor(UnityEngine.ProBuilder.Face face, UnityEngine.Color color)
    // Offset: 0x1038A18
    void SetFaceColor(UnityEngine::ProBuilder::Face* face, UnityEngine::Color color);
    // public System.Void SetMaterial(System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Face> faces, UnityEngine.Material material)
    // Offset: 0x1038D08
    void SetMaterial(System::Collections::Generic::IEnumerable_1<UnityEngine::ProBuilder::Face*>* faces, UnityEngine::Material* material);
    // private System.Void RefreshNormals()
    // Offset: 0x1038538
    void RefreshNormals();
    // private System.Void RefreshTangents()
    // Offset: 0x10385BC
    void RefreshTangents();
    // System.Int32 GetSharedVertexHandle(System.Int32 vertex)
    // Offset: 0x10391C4
    int GetSharedVertexHandle(int vertex);
    // System.Collections.Generic.HashSet`1<System.Int32> GetSharedVertexHandles(System.Collections.Generic.IEnumerable`1<System.Int32> vertices)
    // Offset: 0x1039334
    System::Collections::Generic::HashSet_1<int>* GetSharedVertexHandles(System::Collections::Generic::IEnumerable_1<int>* vertices);
    // public System.Collections.Generic.List`1<System.Int32> GetCoincidentVertices(System.Collections.Generic.IEnumerable`1<System.Int32> vertices)
    // Offset: 0x1039620
    System::Collections::Generic::List_1<int>* GetCoincidentVertices(System::Collections::Generic::IEnumerable_1<int>* vertices);
    // public System.Void GetCoincidentVertices(System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Face> faces, System.Collections.Generic.List`1<System.Int32> coincident)
    // Offset: 0x1039B48
    void GetCoincidentVertices(System::Collections::Generic::IEnumerable_1<UnityEngine::ProBuilder::Face*>* faces, System::Collections::Generic::List_1<int>* coincident);
    // public System.Void GetCoincidentVertices(System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Edge> edges, System.Collections.Generic.List`1<System.Int32> coincident)
    // Offset: 0x103A01C
    void GetCoincidentVertices(System::Collections::Generic::IEnumerable_1<UnityEngine::ProBuilder::Edge>* edges, System::Collections::Generic::List_1<int>* coincident);
    // public System.Void GetCoincidentVertices(System.Collections.Generic.IEnumerable`1<System.Int32> vertices, System.Collections.Generic.List`1<System.Int32> coincident)
    // Offset: 0x10396E4
    void GetCoincidentVertices(System::Collections::Generic::IEnumerable_1<int>* vertices, System::Collections::Generic::List_1<int>* coincident);
    // public System.Void GetCoincidentVertices(System.Int32 vertex, System.Collections.Generic.List`1<System.Int32> coincident)
    // Offset: 0x103A570
    void GetCoincidentVertices(int vertex, System::Collections::Generic::List_1<int>* coincident);
    // public System.Void SetVerticesCoincident(System.Collections.Generic.IEnumerable`1<System.Int32> vertices)
    // Offset: 0x103A6E4
    void SetVerticesCoincident(System::Collections::Generic::IEnumerable_1<int>* vertices);
    // System.Void SetTexturesCoincident(System.Collections.Generic.IEnumerable`1<System.Int32> vertices)
    // Offset: 0x103A790
    void SetTexturesCoincident(System::Collections::Generic::IEnumerable_1<int>* vertices);
    // System.Void AddToSharedVertex(System.Int32 sharedVertexHandle, System.Int32 vertex)
    // Offset: 0x103A7DC
    void AddToSharedVertex(int sharedVertexHandle, int vertex);
    // System.Void AddSharedVertex(UnityEngine.ProBuilder.SharedVertex vertex)
    // Offset: 0x103A8B0
    void AddSharedVertex(UnityEngine::ProBuilder::SharedVertex* vertex);
    // public System.Boolean get_selectable()
    // Offset: 0x103A96C
    bool get_selectable();
    // public System.Void set_selectable(System.Boolean value)
    // Offset: 0x103A974
    void set_selectable(bool value);
    // public System.Int32 get_selectedFaceCount()
    // Offset: 0x103A980
    int get_selectedFaceCount();
    // public System.Int32 get_selectedVertexCount()
    // Offset: 0x103A99C
    int get_selectedVertexCount();
    // public System.Int32 get_selectedEdgeCount()
    // Offset: 0x103A9B8
    int get_selectedEdgeCount();
    // System.Int32 get_selectedSharedVerticesCount()
    // Offset: 0x103A9D4
    int get_selectedSharedVerticesCount();
    // System.Int32 get_selectedCoincidentVertexCount()
    // Offset: 0x103AD84
    int get_selectedCoincidentVertexCount();
    // System.Collections.Generic.IEnumerable`1<System.Int32> get_selectedSharedVertices()
    // Offset: 0x103ADA8
    System::Collections::Generic::IEnumerable_1<int>* get_selectedSharedVertices();
    // System.Collections.Generic.IEnumerable`1<System.Int32> get_selectedCoincidentVertices()
    // Offset: 0x103ADCC
    System::Collections::Generic::IEnumerable_1<int>* get_selectedCoincidentVertices();
    // private System.Void CacheSelection()
    // Offset: 0x103A9F8
    void CacheSelection();
    // public UnityEngine.ProBuilder.Face[] GetSelectedFaces()
    // Offset: 0x103ADF0
    ::Array<UnityEngine::ProBuilder::Face*>* GetSelectedFaces();
    // public System.Collections.ObjectModel.ReadOnlyCollection`1<System.Int32> get_selectedFaceIndexes()
    // Offset: 0x103AF20
    System::Collections::ObjectModel::ReadOnlyCollection_1<int>* get_selectedFaceIndexes();
    // public System.Collections.ObjectModel.ReadOnlyCollection`1<System.Int32> get_selectedVertices()
    // Offset: 0x103AF90
    System::Collections::ObjectModel::ReadOnlyCollection_1<int>* get_selectedVertices();
    // public System.Collections.ObjectModel.ReadOnlyCollection`1<UnityEngine.ProBuilder.Edge> get_selectedEdges()
    // Offset: 0x103B000
    System::Collections::ObjectModel::ReadOnlyCollection_1<UnityEngine::ProBuilder::Edge>* get_selectedEdges();
    // UnityEngine.ProBuilder.Face[] get_selectedFacesInternal()
    // Offset: 0x103B070
    ::Array<UnityEngine::ProBuilder::Face*>* get_selectedFacesInternal();
    // System.Void set_selectedFacesInternal(UnityEngine.ProBuilder.Face[] value)
    // Offset: 0x103B074
    void set_selectedFacesInternal(::Array<UnityEngine::ProBuilder::Face*>* value);
    // System.Int32[] get_selectedFaceIndicesInternal()
    // Offset: 0x103B128
    ::Array<int>* get_selectedFaceIndicesInternal();
    // System.Void set_selectedFaceIndicesInternal(System.Int32[] value)
    // Offset: 0x103B130
    void set_selectedFaceIndicesInternal(::Array<int>* value);
    // UnityEngine.ProBuilder.Edge[] get_selectedEdgesInternal()
    // Offset: 0x103B138
    ::Array<UnityEngine::ProBuilder::Edge>* get_selectedEdgesInternal();
    // System.Void set_selectedEdgesInternal(UnityEngine.ProBuilder.Edge[] value)
    // Offset: 0x103B140
    void set_selectedEdgesInternal(::Array<UnityEngine::ProBuilder::Edge>* value);
    // System.Int32[] get_selectedIndexesInternal()
    // Offset: 0x103B148
    ::Array<int>* get_selectedIndexesInternal();
    // System.Void set_selectedIndexesInternal(System.Int32[] value)
    // Offset: 0x103B150
    void set_selectedIndexesInternal(::Array<int>* value);
    // UnityEngine.ProBuilder.Face GetActiveFace()
    // Offset: 0x103B158
    UnityEngine::ProBuilder::Face* GetActiveFace();
    // UnityEngine.ProBuilder.Edge GetActiveEdge()
    // Offset: 0x103B1C0
    UnityEngine::ProBuilder::Edge GetActiveEdge();
    // System.Int32 GetActiveVertex()
    // Offset: 0x103B258
    int GetActiveVertex();
    // System.Void AddToFaceSelection(System.Int32 index)
    // Offset: 0x103B294
    void AddToFaceSelection(int index);
    // public System.Void SetSelectedFaces(System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Face> selected)
    // Offset: 0x103B500
    void SetSelectedFaces(System::Collections::Generic::IEnumerable_1<UnityEngine::ProBuilder::Face*>* selected);
    // System.Void SetSelectedFaces(System.Collections.Generic.IEnumerable`1<System.Int32> selected)
    // Offset: 0x103B314
    void SetSelectedFaces(System::Collections::Generic::IEnumerable_1<int>* selected);
    // public System.Void SetSelectedEdges(System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Edge> edges)
    // Offset: 0x103B5B4
    void SetSelectedEdges(System::Collections::Generic::IEnumerable_1<UnityEngine::ProBuilder::Edge>* edges);
    // public System.Void SetSelectedVertices(System.Collections.Generic.IEnumerable`1<System.Int32> vertices)
    // Offset: 0x103B6FC
    void SetSelectedVertices(System::Collections::Generic::IEnumerable_1<int>* vertices);
    // System.Void RemoveFromFaceSelectionAtIndex(System.Int32 index)
    // Offset: 0x103B864
    void RemoveFromFaceSelectionAtIndex(int index);
    // public System.Void ClearSelection()
    // Offset: 0x1036F7C
    void ClearSelection();
    // private System.Int32 <set_selectedFacesInternal>b__200_0(UnityEngine.ProBuilder.Face x)
    // Offset: 0x103BA64
    int $set_selectedFacesInternal$b__200_0(UnityEngine::ProBuilder::Face* x);
    // private System.Int32 <SetSelectedFaces>b__214_0(UnityEngine.ProBuilder.Face x)
    // Offset: 0x103BAC4
    int $SetSelectedFaces$b__214_0(UnityEngine::ProBuilder::Face* x);
    // private System.Collections.Generic.IEnumerable`1<System.Int32> <SetSelectedFaces>b__215_0(System.Int32 x)
    // Offset: 0x103BB24
    System::Collections::Generic::IEnumerable_1<int>* $SetSelectedFaces$b__215_0(int x);
    // private System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Edge> <SetSelectedFaces>b__215_1(System.Int32 x)
    // Offset: 0x103BB68
    System::Collections::Generic::IEnumerable_1<UnityEngine::ProBuilder::Edge>* $SetSelectedFaces$b__215_1(int x);
    // public System.Void .ctor()
    // Offset: 0x103B8D0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static ProBuilderMesh* New_ctor();
    // static private System.Void .cctor()
    // Offset: 0x103B9EC
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // UnityEngine.ProBuilder.ProBuilderMesh
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::ProBuilder::ProBuilderMesh*, "UnityEngine.ProBuilder", "ProBuilderMesh");
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::ProBuilder::ProBuilderMesh::CacheValidState, "UnityEngine.ProBuilder", "ProBuilderMesh/CacheValidState");
#pragma pack(pop)
