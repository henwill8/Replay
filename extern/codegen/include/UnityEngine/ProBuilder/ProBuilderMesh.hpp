// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: UnityEngine.ProBuilder.Edge
#include "UnityEngine/ProBuilder/Edge.hpp"
// Including type: UnityEngine.HideFlags
#include "UnityEngine/HideFlags.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.UInt32
#include "System/UInt32.hpp"
// Including type: System.Collections.Generic.KeyValuePair`2
#include "System/Collections/Generic/KeyValuePair_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: UnityEngine::ProBuilder
namespace UnityEngine::ProBuilder {
  // Forward declaring type: Face
  class Face;
  // Forward declaring type: SharedVertex
  class SharedVertex;
  // Forward declaring type: UnwrapParameters
  class UnwrapParameters;
  // Forward declaring type: MeshArrays
  struct MeshArrays;
  // Forward declaring type: Vertex
  class Vertex;
  // Forward declaring type: MeshSyncState
  struct MeshSyncState;
  // Forward declaring type: RefreshMask
  struct RefreshMask;
  // Forward declaring type: AutoUnwrapSettings
  struct AutoUnwrapSettings;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: MeshFilter
  class MeshFilter;
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: MeshTopology
  struct MeshTopology;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections::ObjectModel
namespace System::Collections::ObjectModel {
  // Forward declaring type: ReadOnlyCollection`1<T>
  template<typename T>
  class ReadOnlyCollection_1;
}
// Completed forward declares
// Type namespace: UnityEngine.ProBuilder
namespace UnityEngine::ProBuilder {
  // Size: 0x100
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.ProBuilder.ProBuilderMesh
  // [] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: D552F0
  // [RequireComponent] Offset: D552F0
  // [DisallowMultipleComponent] Offset: D552F0
  // [ExecuteInEditMode] Offset: D552F0
  // [ExcludeFromPresetAttribute] Offset: D552F0
  // [ExcludeFromObjectFactoryAttribute] Offset: D552F0
  class ProBuilderMesh : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: UnityEngine::ProBuilder::ProBuilderMesh::CacheValidState
    struct CacheValidState;
    // Nested type: UnityEngine::ProBuilder::ProBuilderMesh::$$c
    class $$c;
    // Nested type: UnityEngine::ProBuilder::ProBuilderMesh::$$c__DisplayClass150_0
    class $$c__DisplayClass150_0;
    // Nested type: UnityEngine::ProBuilder::ProBuilderMesh::$$c__DisplayClass152_0
    class $$c__DisplayClass152_0;
    // Size: 0x1
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.ProBuilder.ProBuilderMesh/CacheValidState
    // [] Offset: FFFFFFFF
    // [FlagsAttribute] Offset: FFFFFFFF
    struct CacheValidState/*, public System::Enum*/ {
      public:
      // public System.Byte value__
      // Size: 0x1
      // Offset: 0x0
      uint8_t value;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      // Creating value type constructor for type: CacheValidState
      constexpr CacheValidState(uint8_t value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator uint8_t
      constexpr operator uint8_t() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.ProBuilder.ProBuilderMesh/CacheValidState SharedVertex
      static constexpr const uint8_t SharedVertex = 1u;
      // Get static field: static public UnityEngine.ProBuilder.ProBuilderMesh/CacheValidState SharedVertex
      static UnityEngine::ProBuilder::ProBuilderMesh::CacheValidState _get_SharedVertex();
      // Set static field: static public UnityEngine.ProBuilder.ProBuilderMesh/CacheValidState SharedVertex
      static void _set_SharedVertex(UnityEngine::ProBuilder::ProBuilderMesh::CacheValidState value);
      // static field const value: static public UnityEngine.ProBuilder.ProBuilderMesh/CacheValidState SharedTexture
      static constexpr const uint8_t SharedTexture = 2u;
      // Get static field: static public UnityEngine.ProBuilder.ProBuilderMesh/CacheValidState SharedTexture
      static UnityEngine::ProBuilder::ProBuilderMesh::CacheValidState _get_SharedTexture();
      // Set static field: static public UnityEngine.ProBuilder.ProBuilderMesh/CacheValidState SharedTexture
      static void _set_SharedTexture(UnityEngine::ProBuilder::ProBuilderMesh::CacheValidState value);
    }; // UnityEngine.ProBuilder.ProBuilderMesh/CacheValidState
    #pragma pack(pop)
    static check_size<sizeof(ProBuilderMesh::CacheValidState), 0 + sizeof(uint8_t)> __UnityEngine_ProBuilder_ProBuilderMesh_CacheValidStateSizeCheck;
    static_assert(sizeof(ProBuilderMesh::CacheValidState) == 0x1);
    // private System.Int32 m_MeshFormatVersion
    // Size: 0x4
    // Offset: 0x18
    int m_MeshFormatVersion;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_MeshFormatVersion and: m_Faces
    char __padding0[0x4] = {};
    // [FormerlySerializedAsAttribute] Offset: 0xD57300
    // private UnityEngine.ProBuilder.Face[] m_Faces
    // Size: 0x8
    // Offset: 0x20
    ::Array<UnityEngine::ProBuilder::Face*>* m_Faces;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::ProBuilder::Face*>*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xD5734C
    // [FormerlySerializedAsAttribute] Offset: 0xD5734C
    // private UnityEngine.ProBuilder.SharedVertex[] m_SharedVertices
    // Size: 0x8
    // Offset: 0x28
    ::Array<UnityEngine::ProBuilder::SharedVertex*>* m_SharedVertices;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::ProBuilder::SharedVertex*>*) == 0x8);
    // private UnityEngine.ProBuilder.ProBuilderMesh/CacheValidState m_CacheValid
    // Size: 0x1
    // Offset: 0x30
    UnityEngine::ProBuilder::ProBuilderMesh::CacheValidState m_CacheValid;
    // Field size check
    static_assert(sizeof(UnityEngine::ProBuilder::ProBuilderMesh::CacheValidState) == 0x1);
    // Padding between fields: m_CacheValid and: m_SharedVertexLookup
    char __padding3[0x7] = {};
    // private System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> m_SharedVertexLookup
    // Size: 0x8
    // Offset: 0x38
    System::Collections::Generic::Dictionary_2<int, int>* m_SharedVertexLookup;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<int, int>*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xD573BC
    // private UnityEngine.ProBuilder.SharedVertex[] m_SharedTextures
    // Size: 0x8
    // Offset: 0x40
    ::Array<UnityEngine::ProBuilder::SharedVertex*>* m_SharedTextures;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::ProBuilder::SharedVertex*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> m_SharedTextureLookup
    // Size: 0x8
    // Offset: 0x48
    System::Collections::Generic::Dictionary_2<int, int>* m_SharedTextureLookup;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<int, int>*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xD57408
    // private UnityEngine.Vector3[] m_Positions
    // Size: 0x8
    // Offset: 0x50
    ::Array<UnityEngine::Vector3>* m_Positions;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Vector3>*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xD57454
    // private UnityEngine.Vector2[] m_Textures0
    // Size: 0x8
    // Offset: 0x58
    ::Array<UnityEngine::Vector2>* m_Textures0;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Vector2>*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xD574A0
    // private System.Collections.Generic.List`1<UnityEngine.Vector4> m_Textures2
    // Size: 0x8
    // Offset: 0x60
    System::Collections::Generic::List_1<UnityEngine::Vector4>* m_Textures2;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<UnityEngine::Vector4>*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xD574EC
    // private System.Collections.Generic.List`1<UnityEngine.Vector4> m_Textures3
    // Size: 0x8
    // Offset: 0x68
    System::Collections::Generic::List_1<UnityEngine::Vector4>* m_Textures3;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<UnityEngine::Vector4>*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xD57538
    // private UnityEngine.Vector4[] m_Tangents
    // Size: 0x8
    // Offset: 0x70
    ::Array<UnityEngine::Vector4>* m_Tangents;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Vector4>*) == 0x8);
    // private UnityEngine.Vector3[] m_Normals
    // Size: 0x8
    // Offset: 0x78
    ::Array<UnityEngine::Vector3>* m_Normals;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Vector3>*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xD57584
    // private UnityEngine.Color[] m_Colors
    // Size: 0x8
    // Offset: 0x80
    ::Array<UnityEngine::Color>* m_Colors;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Color>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD575D0
    // private System.Boolean <userCollisions>k__BackingField
    // Size: 0x1
    // Offset: 0x88
    bool userCollisions;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: userCollisions and: m_UnwrapParameters
    char __padding14[0x7] = {};
    // [FormerlySerializedAsAttribute] Offset: 0xD575E0
    // private UnityEngine.ProBuilder.UnwrapParameters m_UnwrapParameters
    // Size: 0x8
    // Offset: 0x90
    UnityEngine::ProBuilder::UnwrapParameters* m_UnwrapParameters;
    // Field size check
    static_assert(sizeof(UnityEngine::ProBuilder::UnwrapParameters*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xD5762C
    // private System.Boolean m_PreserveMeshAssetOnDestroy
    // Size: 0x1
    // Offset: 0x98
    bool m_PreserveMeshAssetOnDestroy;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_PreserveMeshAssetOnDestroy and: assetGuid
    char __padding16[0x7] = {};
    // System.String assetGuid
    // Size: 0x8
    // Offset: 0xA0
    ::Il2CppString* assetGuid;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private UnityEngine.Mesh m_Mesh
    // Size: 0x8
    // Offset: 0xA8
    UnityEngine::Mesh* m_Mesh;
    // Field size check
    static_assert(sizeof(UnityEngine::Mesh*) == 0x8);
    // private UnityEngine.MeshRenderer m_MeshRenderer
    // Size: 0x8
    // Offset: 0xB0
    UnityEngine::MeshRenderer* m_MeshRenderer;
    // Field size check
    static_assert(sizeof(UnityEngine::MeshRenderer*) == 0x8);
    // private UnityEngine.MeshFilter m_MeshFilter
    // Size: 0x8
    // Offset: 0xB8
    UnityEngine::MeshFilter* m_MeshFilter;
    // Field size check
    static_assert(sizeof(UnityEngine::MeshFilter*) == 0x8);
    // private System.Boolean m_IsSelectable
    // Size: 0x1
    // Offset: 0xC0
    bool m_IsSelectable;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_IsSelectable and: m_SelectedFaces
    char __padding21[0x7] = {};
    // private System.Int32[] m_SelectedFaces
    // Size: 0x8
    // Offset: 0xC8
    ::Array<int>* m_SelectedFaces;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // private UnityEngine.ProBuilder.Edge[] m_SelectedEdges
    // Size: 0x8
    // Offset: 0xD0
    ::Array<UnityEngine::ProBuilder::Edge>* m_SelectedEdges;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::ProBuilder::Edge>*) == 0x8);
    // private System.Int32[] m_SelectedVertices
    // Size: 0x8
    // Offset: 0xD8
    ::Array<int>* m_SelectedVertices;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // private System.Boolean m_SelectedCacheDirty
    // Size: 0x1
    // Offset: 0xE0
    bool m_SelectedCacheDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_SelectedCacheDirty and: m_SelectedSharedVerticesCount
    char __padding25[0x3] = {};
    // private System.Int32 m_SelectedSharedVerticesCount
    // Size: 0x4
    // Offset: 0xE4
    int m_SelectedSharedVerticesCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_SelectedCoincidentVertexCount
    // Size: 0x4
    // Offset: 0xE8
    int m_SelectedCoincidentVertexCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_SelectedCoincidentVertexCount and: m_SelectedSharedVertices
    char __padding27[0x4] = {};
    // private System.Collections.Generic.HashSet`1<System.Int32> m_SelectedSharedVertices
    // Size: 0x8
    // Offset: 0xF0
    System::Collections::Generic::HashSet_1<int>* m_SelectedSharedVertices;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::HashSet_1<int>*) == 0x8);
    // private System.Collections.Generic.List`1<System.Int32> m_SelectedCoincidentVertices
    // Size: 0x8
    // Offset: 0xF8
    System::Collections::Generic::List_1<int>* m_SelectedCoincidentVertices;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<int>*) == 0x8);
    // Creating value type constructor for type: ProBuilderMesh
    ProBuilderMesh(int m_MeshFormatVersion_ = {}, ::Array<UnityEngine::ProBuilder::Face*>* m_Faces_ = {}, ::Array<UnityEngine::ProBuilder::SharedVertex*>* m_SharedVertices_ = {}, UnityEngine::ProBuilder::ProBuilderMesh::CacheValidState m_CacheValid_ = {}, System::Collections::Generic::Dictionary_2<int, int>* m_SharedVertexLookup_ = {}, ::Array<UnityEngine::ProBuilder::SharedVertex*>* m_SharedTextures_ = {}, System::Collections::Generic::Dictionary_2<int, int>* m_SharedTextureLookup_ = {}, ::Array<UnityEngine::Vector3>* m_Positions_ = {}, ::Array<UnityEngine::Vector2>* m_Textures0_ = {}, System::Collections::Generic::List_1<UnityEngine::Vector4>* m_Textures2_ = {}, System::Collections::Generic::List_1<UnityEngine::Vector4>* m_Textures3_ = {}, ::Array<UnityEngine::Vector4>* m_Tangents_ = {}, ::Array<UnityEngine::Vector3>* m_Normals_ = {}, ::Array<UnityEngine::Color>* m_Colors_ = {}, bool userCollisions_ = {}, UnityEngine::ProBuilder::UnwrapParameters* m_UnwrapParameters_ = {}, bool m_PreserveMeshAssetOnDestroy_ = {}, ::Il2CppString* assetGuid_ = {}, UnityEngine::Mesh* m_Mesh_ = {}, UnityEngine::MeshRenderer* m_MeshRenderer_ = {}, UnityEngine::MeshFilter* m_MeshFilter_ = {}, bool m_IsSelectable_ = {}, ::Array<int>* m_SelectedFaces_ = {}, ::Array<UnityEngine::ProBuilder::Edge>* m_SelectedEdges_ = {}, ::Array<int>* m_SelectedVertices_ = {}, bool m_SelectedCacheDirty_ = {}, int m_SelectedSharedVerticesCount_ = {}, int m_SelectedCoincidentVertexCount_ = {}, System::Collections::Generic::HashSet_1<int>* m_SelectedSharedVertices_ = {}, System::Collections::Generic::List_1<int>* m_SelectedCoincidentVertices_ = {}) noexcept : m_MeshFormatVersion{m_MeshFormatVersion_}, m_Faces{m_Faces_}, m_SharedVertices{m_SharedVertices_}, m_CacheValid{m_CacheValid_}, m_SharedVertexLookup{m_SharedVertexLookup_}, m_SharedTextures{m_SharedTextures_}, m_SharedTextureLookup{m_SharedTextureLookup_}, m_Positions{m_Positions_}, m_Textures0{m_Textures0_}, m_Textures2{m_Textures2_}, m_Textures3{m_Textures3_}, m_Tangents{m_Tangents_}, m_Normals{m_Normals_}, m_Colors{m_Colors_}, userCollisions{userCollisions_}, m_UnwrapParameters{m_UnwrapParameters_}, m_PreserveMeshAssetOnDestroy{m_PreserveMeshAssetOnDestroy_}, assetGuid{assetGuid_}, m_Mesh{m_Mesh_}, m_MeshRenderer{m_MeshRenderer_}, m_MeshFilter{m_MeshFilter_}, m_IsSelectable{m_IsSelectable_}, m_SelectedFaces{m_SelectedFaces_}, m_SelectedEdges{m_SelectedEdges_}, m_SelectedVertices{m_SelectedVertices_}, m_SelectedCacheDirty{m_SelectedCacheDirty_}, m_SelectedSharedVerticesCount{m_SelectedSharedVerticesCount_}, m_SelectedCoincidentVertexCount{m_SelectedCoincidentVertexCount_}, m_SelectedSharedVertices{m_SelectedSharedVertices_}, m_SelectedCoincidentVertices{m_SelectedCoincidentVertices_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static UnityEngine.HideFlags k_MeshFilterHideFlags
    static constexpr const int k_MeshFilterHideFlags = 10;
    // Get static field: static UnityEngine.HideFlags k_MeshFilterHideFlags
    static UnityEngine::HideFlags _get_k_MeshFilterHideFlags();
    // Set static field: static UnityEngine.HideFlags k_MeshFilterHideFlags
    static void _set_k_MeshFilterHideFlags(UnityEngine::HideFlags value);
    // static field const value: static private System.Int32 k_UVChannelCount
    static constexpr const int k_UVChannelCount = 4;
    // Get static field: static private System.Int32 k_UVChannelCount
    static int _get_k_UVChannelCount();
    // Set static field: static private System.Int32 k_UVChannelCount
    static void _set_k_UVChannelCount(int value);
    // static field const value: static private System.Int32 k_MeshFormatVersion
    static constexpr const int k_MeshFormatVersion = 1;
    // Get static field: static private System.Int32 k_MeshFormatVersion
    static int _get_k_MeshFormatVersion();
    // Set static field: static private System.Int32 k_MeshFormatVersion
    static void _set_k_MeshFormatVersion(int value);
    // static field const value: static private System.Int32 k_MeshFormatVersionSubmeshMaterialRefactor
    static constexpr const int k_MeshFormatVersionSubmeshMaterialRefactor = 1;
    // Get static field: static private System.Int32 k_MeshFormatVersionSubmeshMaterialRefactor
    static int _get_k_MeshFormatVersionSubmeshMaterialRefactor();
    // Set static field: static private System.Int32 k_MeshFormatVersionSubmeshMaterialRefactor
    static void _set_k_MeshFormatVersionSubmeshMaterialRefactor(int value);
    // static field const value: static public System.UInt32 maxVertexCount
    static constexpr const uint maxVertexCount = 65535u;
    // Get static field: static public System.UInt32 maxVertexCount
    static uint _get_maxVertexCount();
    // Set static field: static public System.UInt32 maxVertexCount
    static void _set_maxVertexCount(uint value);
    // [CompilerGeneratedAttribute] Offset: 0xD57698
    // Get static field: static private System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> meshWillBeDestroyed
    static System::Action_1<UnityEngine::ProBuilder::ProBuilderMesh*>* _get_meshWillBeDestroyed();
    // Set static field: static private System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> meshWillBeDestroyed
    static void _set_meshWillBeDestroyed(System::Action_1<UnityEngine::ProBuilder::ProBuilderMesh*>* value);
    // [CompilerGeneratedAttribute] Offset: 0xD576A8
    // Get static field: static private System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> componentWillBeDestroyed
    static System::Action_1<UnityEngine::ProBuilder::ProBuilderMesh*>* _get_componentWillBeDestroyed();
    // Set static field: static private System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> componentWillBeDestroyed
    static void _set_componentWillBeDestroyed(System::Action_1<UnityEngine::ProBuilder::ProBuilderMesh*>* value);
    // [CompilerGeneratedAttribute] Offset: 0xD576B8
    // Get static field: static private System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> componentHasBeenReset
    static System::Action_1<UnityEngine::ProBuilder::ProBuilderMesh*>* _get_componentHasBeenReset();
    // Set static field: static private System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> componentHasBeenReset
    static void _set_componentHasBeenReset(System::Action_1<UnityEngine::ProBuilder::ProBuilderMesh*>* value);
    // [CompilerGeneratedAttribute] Offset: 0xD576C8
    // Get static field: static private System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> elementSelectionChanged
    static System::Action_1<UnityEngine::ProBuilder::ProBuilderMesh*>* _get_elementSelectionChanged();
    // Set static field: static private System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> elementSelectionChanged
    static void _set_elementSelectionChanged(System::Action_1<UnityEngine::ProBuilder::ProBuilderMesh*>* value);
    // Get static field: static private System.Collections.Generic.HashSet`1<System.Int32> s_CachedHashSet
    static System::Collections::Generic::HashSet_1<int>* _get_s_CachedHashSet();
    // Set static field: static private System.Collections.Generic.HashSet`1<System.Int32> s_CachedHashSet
    static void _set_s_CachedHashSet(System::Collections::Generic::HashSet_1<int>* value);
    // public System.Boolean get_userCollisions()
    // Offset: 0x165A508
    bool get_userCollisions();
    // public System.Void set_userCollisions(System.Boolean value)
    // Offset: 0x165A510
    void set_userCollisions(bool value);
    // public UnityEngine.ProBuilder.UnwrapParameters get_unwrapParameters()
    // Offset: 0x165A51C
    UnityEngine::ProBuilder::UnwrapParameters* get_unwrapParameters();
    // public System.Void set_unwrapParameters(UnityEngine.ProBuilder.UnwrapParameters value)
    // Offset: 0x165A524
    void set_unwrapParameters(UnityEngine::ProBuilder::UnwrapParameters* value);
    // UnityEngine.MeshRenderer get_renderer()
    // Offset: 0x165A52C
    UnityEngine::MeshRenderer* get_renderer();
    // UnityEngine.MeshFilter get_filter()
    // Offset: 0x165A5A8
    UnityEngine::MeshFilter* get_filter();
    // public System.Boolean get_preserveMeshAssetOnDestroy()
    // Offset: 0x165A664
    bool get_preserveMeshAssetOnDestroy();
    // public System.Void set_preserveMeshAssetOnDestroy(System.Boolean value)
    // Offset: 0x165A66C
    void set_preserveMeshAssetOnDestroy(bool value);
    // public System.Boolean HasArrays(UnityEngine.ProBuilder.MeshArrays channels)
    // Offset: 0x165A678
    bool HasArrays(UnityEngine::ProBuilder::MeshArrays channels);
    // UnityEngine.ProBuilder.Face[] get_facesInternal()
    // Offset: 0x165A968
    ::Array<UnityEngine::ProBuilder::Face*>* get_facesInternal();
    // System.Void set_facesInternal(UnityEngine.ProBuilder.Face[] value)
    // Offset: 0x165A970
    void set_facesInternal(::Array<UnityEngine::ProBuilder::Face*>* value);
    // public System.Collections.Generic.IList`1<UnityEngine.ProBuilder.Face> get_faces()
    // Offset: 0x165A978
    System::Collections::Generic::IList_1<UnityEngine::ProBuilder::Face*>* get_faces();
    // public System.Void set_faces(System.Collections.Generic.IList`1<UnityEngine.ProBuilder.Face> value)
    // Offset: 0x165A9E8
    void set_faces(System::Collections::Generic::IList_1<UnityEngine::ProBuilder::Face*>* value);
    // System.Void InvalidateSharedVertexLookup()
    // Offset: 0x165AA94
    void InvalidateSharedVertexLookup();
    // System.Void InvalidateSharedTextureLookup()
    // Offset: 0x165AB44
    void InvalidateSharedTextureLookup();
    // System.Void InvalidateFaces()
    // Offset: 0x165ABF4
    void InvalidateFaces();
    // System.Void InvalidateCaches()
    // Offset: 0x165AEA4
    void InvalidateCaches();
    // UnityEngine.ProBuilder.SharedVertex[] get_sharedVerticesInternal()
    // Offset: 0x165AEDC
    ::Array<UnityEngine::ProBuilder::SharedVertex*>* get_sharedVerticesInternal();
    // System.Void set_sharedVerticesInternal(UnityEngine.ProBuilder.SharedVertex[] value)
    // Offset: 0x165AEE4
    void set_sharedVerticesInternal(::Array<UnityEngine::ProBuilder::SharedVertex*>* value);
    // public System.Collections.Generic.IList`1<UnityEngine.ProBuilder.SharedVertex> get_sharedVertices()
    // Offset: 0x165AF0C
    System::Collections::Generic::IList_1<UnityEngine::ProBuilder::SharedVertex*>* get_sharedVertices();
    // public System.Void set_sharedVertices(System.Collections.Generic.IList`1<UnityEngine.ProBuilder.SharedVertex> value)
    // Offset: 0x165AF7C
    void set_sharedVertices(System::Collections::Generic::IList_1<UnityEngine::ProBuilder::SharedVertex*>* value);
    // System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> get_sharedVertexLookup()
    // Offset: 0x165B1C4
    System::Collections::Generic::Dictionary_2<int, int>* get_sharedVertexLookup();
    // System.Void SetSharedVertices(System.Collections.Generic.IEnumerable`1<System.Collections.Generic.KeyValuePair`2<System.Int32,System.Int32>> indexes)
    // Offset: 0x165B274
    void SetSharedVertices(System::Collections::Generic::IEnumerable_1<System::Collections::Generic::KeyValuePair_2<int, int>>* indexes);
    // UnityEngine.ProBuilder.SharedVertex[] get_sharedTextures()
    // Offset: 0x165B320
    ::Array<UnityEngine::ProBuilder::SharedVertex*>* get_sharedTextures();
    // System.Void set_sharedTextures(UnityEngine.ProBuilder.SharedVertex[] value)
    // Offset: 0x165B328
    void set_sharedTextures(::Array<UnityEngine::ProBuilder::SharedVertex*>* value);
    // System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> get_sharedTextureLookup()
    // Offset: 0x165B350
    System::Collections::Generic::Dictionary_2<int, int>* get_sharedTextureLookup();
    // System.Void SetSharedTextures(System.Collections.Generic.IEnumerable`1<System.Collections.Generic.KeyValuePair`2<System.Int32,System.Int32>> indexes)
    // Offset: 0x165B404
    void SetSharedTextures(System::Collections::Generic::IEnumerable_1<System::Collections::Generic::KeyValuePair_2<int, int>>* indexes);
    // UnityEngine.Vector3[] get_positionsInternal()
    // Offset: 0x165B4B0
    ::Array<UnityEngine::Vector3>* get_positionsInternal();
    // System.Void set_positionsInternal(UnityEngine.Vector3[] value)
    // Offset: 0x165B4B8
    void set_positionsInternal(::Array<UnityEngine::Vector3>* value);
    // public System.Collections.Generic.IList`1<UnityEngine.Vector3> get_positions()
    // Offset: 0x165B4C0
    System::Collections::Generic::IList_1<UnityEngine::Vector3>* get_positions();
    // public System.Void set_positions(System.Collections.Generic.IList`1<UnityEngine.Vector3> value)
    // Offset: 0x165B530
    void set_positions(System::Collections::Generic::IList_1<UnityEngine::Vector3>* value);
    // public UnityEngine.ProBuilder.Vertex[] GetVertices(System.Collections.Generic.IList`1<System.Int32> indexes)
    // Offset: 0x165B5DC
    ::Array<UnityEngine::ProBuilder::Vertex*>* GetVertices(System::Collections::Generic::IList_1<int>* indexes);
    // public System.Void SetVertices(System.Collections.Generic.IList`1<UnityEngine.ProBuilder.Vertex> vertices, System.Boolean applyMesh)
    // Offset: 0x165C078
    void SetVertices(System::Collections::Generic::IList_1<UnityEngine::ProBuilder::Vertex*>* vertices, bool applyMesh);
    // public System.Collections.Generic.IList`1<UnityEngine.Vector3> get_normals()
    // Offset: 0x165C498
    System::Collections::Generic::IList_1<UnityEngine::Vector3>* get_normals();
    // UnityEngine.Vector3[] get_normalsInternal()
    // Offset: 0x165C514
    ::Array<UnityEngine::Vector3>* get_normalsInternal();
    // System.Void set_normalsInternal(UnityEngine.Vector3[] value)
    // Offset: 0x165C51C
    void set_normalsInternal(::Array<UnityEngine::Vector3>* value);
    // public UnityEngine.Vector3[] GetNormals()
    // Offset: 0x165BD14
    ::Array<UnityEngine::Vector3>* GetNormals();
    // UnityEngine.Color[] get_colorsInternal()
    // Offset: 0x165C524
    ::Array<UnityEngine::Color>* get_colorsInternal();
    // System.Void set_colorsInternal(UnityEngine.Color[] value)
    // Offset: 0x165C52C
    void set_colorsInternal(::Array<UnityEngine::Color>* value);
    // public System.Collections.Generic.IList`1<UnityEngine.Color> get_colors()
    // Offset: 0x165C534
    System::Collections::Generic::IList_1<UnityEngine::Color>* get_colors();
    // public System.Void set_colors(System.Collections.Generic.IList`1<UnityEngine.Color> value)
    // Offset: 0x165C5B0
    void set_colors(System::Collections::Generic::IList_1<UnityEngine::Color>* value);
    // public UnityEngine.Color[] GetColors()
    // Offset: 0x165C6A0
    ::Array<UnityEngine::Color>* GetColors();
    // public System.Collections.Generic.IList`1<UnityEngine.Vector4> get_tangents()
    // Offset: 0x165C738
    System::Collections::Generic::IList_1<UnityEngine::Vector4>* get_tangents();
    // public System.Void set_tangents(System.Collections.Generic.IList`1<UnityEngine.Vector4> value)
    // Offset: 0x165C7CC
    void set_tangents(System::Collections::Generic::IList_1<UnityEngine::Vector4>* value);
    // UnityEngine.Vector4[] get_tangentsInternal()
    // Offset: 0x165C8BC
    ::Array<UnityEngine::Vector4>* get_tangentsInternal();
    // System.Void set_tangentsInternal(UnityEngine.Vector4[] value)
    // Offset: 0x165C8C4
    void set_tangentsInternal(::Array<UnityEngine::Vector4>* value);
    // public UnityEngine.Vector4[] GetTangents()
    // Offset: 0x165BC84
    ::Array<UnityEngine::Vector4>* GetTangents();
    // UnityEngine.Vector2[] get_texturesInternal()
    // Offset: 0x165C8CC
    ::Array<UnityEngine::Vector2>* get_texturesInternal();
    // System.Void set_texturesInternal(UnityEngine.Vector2[] value)
    // Offset: 0x165C8D4
    void set_texturesInternal(::Array<UnityEngine::Vector2>* value);
    // public System.Collections.Generic.IList`1<UnityEngine.Vector2> get_textures()
    // Offset: 0x165C8DC
    System::Collections::Generic::IList_1<UnityEngine::Vector2>* get_textures();
    // public System.Void set_textures(System.Collections.Generic.IList`1<UnityEngine.Vector2> value)
    // Offset: 0x165C958
    void set_textures(System::Collections::Generic::IList_1<UnityEngine::Vector2>* value);
    // public System.Void GetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector4> uvs)
    // Offset: 0x165BDA4
    void GetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector4>* uvs);
    // System.Collections.ObjectModel.ReadOnlyCollection`1<UnityEngine.Vector2> GetUVs(System.Int32 channel)
    // Offset: 0x165CA3C
    System::Collections::ObjectModel::ReadOnlyCollection_1<UnityEngine::Vector2>* GetUVs(int channel);
    // public System.Void SetUVs(System.Int32 channel, System.Collections.Generic.List`1<UnityEngine.Vector4> uvs)
    // Offset: 0x165CB44
    void SetUVs(int channel, System::Collections::Generic::List_1<UnityEngine::Vector4>* uvs);
    // public System.Int32 get_faceCount()
    // Offset: 0x165CE44
    int get_faceCount();
    // public System.Int32 get_vertexCount()
    // Offset: 0x165A864
    int get_vertexCount();
    // public System.Int32 get_edgeCount()
    // Offset: 0x165CE5C
    int get_edgeCount();
    // public System.Int32 get_indexCount()
    // Offset: 0x165CEF4
    int get_indexCount();
    // public System.Int32 get_triangleCount()
    // Offset: 0x165D004
    int get_triangleCount();
    // static public System.Void add_meshWillBeDestroyed(System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> value)
    // Offset: 0x165D124
    static void add_meshWillBeDestroyed(System::Action_1<UnityEngine::ProBuilder::ProBuilderMesh*>* value);
    // static public System.Void remove_meshWillBeDestroyed(System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> value)
    // Offset: 0x165D210
    static void remove_meshWillBeDestroyed(System::Action_1<UnityEngine::ProBuilder::ProBuilderMesh*>* value);
    // static System.Void add_componentWillBeDestroyed(System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> value)
    // Offset: 0x165D2FC
    static void add_componentWillBeDestroyed(System::Action_1<UnityEngine::ProBuilder::ProBuilderMesh*>* value);
    // static System.Void remove_componentWillBeDestroyed(System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> value)
    // Offset: 0x165D3EC
    static void remove_componentWillBeDestroyed(System::Action_1<UnityEngine::ProBuilder::ProBuilderMesh*>* value);
    // static System.Void add_componentHasBeenReset(System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> value)
    // Offset: 0x165D4DC
    static void add_componentHasBeenReset(System::Action_1<UnityEngine::ProBuilder::ProBuilderMesh*>* value);
    // static System.Void remove_componentHasBeenReset(System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> value)
    // Offset: 0x165D5CC
    static void remove_componentHasBeenReset(System::Action_1<UnityEngine::ProBuilder::ProBuilderMesh*>* value);
    // static public System.Void add_elementSelectionChanged(System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> value)
    // Offset: 0x165D6BC
    static void add_elementSelectionChanged(System::Action_1<UnityEngine::ProBuilder::ProBuilderMesh*>* value);
    // static public System.Void remove_elementSelectionChanged(System.Action`1<UnityEngine.ProBuilder.ProBuilderMesh> value)
    // Offset: 0x165D7AC
    static void remove_elementSelectionChanged(System::Action_1<UnityEngine::ProBuilder::ProBuilderMesh*>* value);
    // UnityEngine.Mesh get_mesh()
    // Offset: 0x165A87C
    UnityEngine::Mesh* get_mesh();
    // System.Void set_mesh(UnityEngine.Mesh value)
    // Offset: 0x165D89C
    void set_mesh(UnityEngine::Mesh* value);
    // System.Int32 get_id()
    // Offset: 0x165D8A4
    int get_id();
    // public UnityEngine.ProBuilder.MeshSyncState get_meshSyncState()
    // Offset: 0x165D8C8
    UnityEngine::ProBuilder::MeshSyncState get_meshSyncState();
    // private System.Void Awake()
    // Offset: 0x165D9E4
    void Awake();
    // private System.Void Reset()
    // Offset: 0x165DBC8
    void Reset();
    // private System.Void OnDestroy()
    // Offset: 0x165DCB4
    void OnDestroy();
    // public System.Void Clear()
    // Offset: 0x165C358
    void Clear();
    // System.Void EnsureMeshFilterIsAssigned()
    // Offset: 0x165DA58
    void EnsureMeshFilterIsAssigned();
    // static UnityEngine.ProBuilder.ProBuilderMesh CreateInstanceWithPoints(UnityEngine.Vector3[] positions)
    // Offset: 0x165E04C
    static UnityEngine::ProBuilder::ProBuilderMesh* CreateInstanceWithPoints(::Array<UnityEngine::Vector3>* positions);
    // static public UnityEngine.ProBuilder.ProBuilderMesh Create()
    // Offset: 0x165E37C
    static UnityEngine::ProBuilder::ProBuilderMesh* Create();
    // static public UnityEngine.ProBuilder.ProBuilderMesh Create(System.Collections.Generic.IEnumerable`1<UnityEngine.Vector3> positions, System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Face> faces)
    // Offset: 0x165E408
    static UnityEngine::ProBuilder::ProBuilderMesh* Create(System::Collections::Generic::IEnumerable_1<UnityEngine::Vector3>* positions, System::Collections::Generic::IEnumerable_1<UnityEngine::ProBuilder::Face*>* faces);
    // static public UnityEngine.ProBuilder.ProBuilderMesh Create(System.Collections.Generic.IList`1<UnityEngine.ProBuilder.Vertex> vertices, System.Collections.Generic.IList`1<UnityEngine.ProBuilder.Face> faces, System.Collections.Generic.IList`1<UnityEngine.ProBuilder.SharedVertex> sharedVertices, System.Collections.Generic.IList`1<UnityEngine.ProBuilder.SharedVertex> sharedTextures, System.Collections.Generic.IList`1<UnityEngine.Material> materials)
    // Offset: 0x165E5E8
    static UnityEngine::ProBuilder::ProBuilderMesh* Create(System::Collections::Generic::IList_1<UnityEngine::ProBuilder::Vertex*>* vertices, System::Collections::Generic::IList_1<UnityEngine::ProBuilder::Face*>* faces, System::Collections::Generic::IList_1<UnityEngine::ProBuilder::SharedVertex*>* sharedVertices, System::Collections::Generic::IList_1<UnityEngine::ProBuilder::SharedVertex*>* sharedTextures, System::Collections::Generic::IList_1<UnityEngine::Material*>* materials);
    // private System.Void GeometryWithPoints(UnityEngine.Vector3[] points)
    // Offset: 0x165E144
    void GeometryWithPoints(::Array<UnityEngine::Vector3>* points);
    // public System.Void RebuildWithPositionsAndFaces(System.Collections.Generic.IEnumerable`1<UnityEngine.Vector3> vertices, System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Face> faces)
    // Offset: 0x165E4C8
    void RebuildWithPositionsAndFaces(System::Collections::Generic::IEnumerable_1<UnityEngine::Vector3>* vertices, System::Collections::Generic::IEnumerable_1<UnityEngine::ProBuilder::Face*>* faces);
    // System.Void Rebuild()
    // Offset: 0x165DB9C
    void Rebuild();
    // public System.Void ToMesh(UnityEngine.MeshTopology preferredTopology)
    // Offset: 0x165E76C
    void ToMesh(UnityEngine::MeshTopology preferredTopology);
    // System.Void MakeUnique()
    // Offset: 0x165EAD0
    void MakeUnique();
    // public System.Void CopyFrom(UnityEngine.ProBuilder.ProBuilderMesh other)
    // Offset: 0x165EB50
    void CopyFrom(UnityEngine::ProBuilder::ProBuilderMesh* other);
    // public System.Void Refresh(UnityEngine.ProBuilder.RefreshMask mask)
    // Offset: 0x165EA58
    void Refresh(UnityEngine::ProBuilder::RefreshMask mask);
    // private System.Void EnsureMeshColliderIsAssigned()
    // Offset: 0x165DF8C
    void EnsureMeshColliderIsAssigned();
    // System.Int32 GetUnusedTextureGroup(System.Int32 i)
    // Offset: 0x165F418
    int GetUnusedTextureGroup(int i);
    // static private System.Boolean IsValidTextureGroup(System.Int32 group)
    // Offset: 0x165F504
    static bool IsValidTextureGroup(int group);
    // System.Int32 UnusedElementGroup(System.Int32 i)
    // Offset: 0x165F510
    int UnusedElementGroup(int i);
    // public System.Void RefreshUV(System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Face> facesToRefresh)
    // Offset: 0x165EDFC
    void RefreshUV(System::Collections::Generic::IEnumerable_1<UnityEngine::ProBuilder::Face*>* facesToRefresh);
    // System.Void SetGroupUV(UnityEngine.ProBuilder.AutoUnwrapSettings settings, System.Int32 group)
    // Offset: 0x165F5FC
    void SetGroupUV(UnityEngine::ProBuilder::AutoUnwrapSettings settings, int group);
    // private System.Void RefreshColors()
    // Offset: 0x165F2D4
    void RefreshColors();
    // public System.Void SetFaceColor(UnityEngine.ProBuilder.Face face, UnityEngine.Color color)
    // Offset: 0x165F6D8
    void SetFaceColor(UnityEngine::ProBuilder::Face* face, UnityEngine::Color color);
    // public System.Void SetMaterial(System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Face> faces, UnityEngine.Material material)
    // Offset: 0x165F9C8
    void SetMaterial(System::Collections::Generic::IEnumerable_1<UnityEngine::ProBuilder::Face*>* faces, UnityEngine::Material* material);
    // private System.Void RefreshNormals()
    // Offset: 0x165F310
    void RefreshNormals();
    // private System.Void RefreshTangents()
    // Offset: 0x165F394
    void RefreshTangents();
    // System.Int32 GetSharedVertexHandle(System.Int32 vertex)
    // Offset: 0x165FE84
    int GetSharedVertexHandle(int vertex);
    // System.Collections.Generic.HashSet`1<System.Int32> GetSharedVertexHandles(System.Collections.Generic.IEnumerable`1<System.Int32> vertices)
    // Offset: 0x165FFF4
    System::Collections::Generic::HashSet_1<int>* GetSharedVertexHandles(System::Collections::Generic::IEnumerable_1<int>* vertices);
    // public System.Collections.Generic.List`1<System.Int32> GetCoincidentVertices(System.Collections.Generic.IEnumerable`1<System.Int32> vertices)
    // Offset: 0x16602E0
    System::Collections::Generic::List_1<int>* GetCoincidentVertices(System::Collections::Generic::IEnumerable_1<int>* vertices);
    // public System.Void GetCoincidentVertices(System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Face> faces, System.Collections.Generic.List`1<System.Int32> coincident)
    // Offset: 0x1660808
    void GetCoincidentVertices(System::Collections::Generic::IEnumerable_1<UnityEngine::ProBuilder::Face*>* faces, System::Collections::Generic::List_1<int>* coincident);
    // public System.Void GetCoincidentVertices(System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Edge> edges, System.Collections.Generic.List`1<System.Int32> coincident)
    // Offset: 0x1660CDC
    void GetCoincidentVertices(System::Collections::Generic::IEnumerable_1<UnityEngine::ProBuilder::Edge>* edges, System::Collections::Generic::List_1<int>* coincident);
    // public System.Void GetCoincidentVertices(System.Collections.Generic.IEnumerable`1<System.Int32> vertices, System.Collections.Generic.List`1<System.Int32> coincident)
    // Offset: 0x16603A4
    void GetCoincidentVertices(System::Collections::Generic::IEnumerable_1<int>* vertices, System::Collections::Generic::List_1<int>* coincident);
    // public System.Void GetCoincidentVertices(System.Int32 vertex, System.Collections.Generic.List`1<System.Int32> coincident)
    // Offset: 0x1661230
    void GetCoincidentVertices(int vertex, System::Collections::Generic::List_1<int>* coincident);
    // public System.Void SetVerticesCoincident(System.Collections.Generic.IEnumerable`1<System.Int32> vertices)
    // Offset: 0x16613A4
    void SetVerticesCoincident(System::Collections::Generic::IEnumerable_1<int>* vertices);
    // System.Void SetTexturesCoincident(System.Collections.Generic.IEnumerable`1<System.Int32> vertices)
    // Offset: 0x1661450
    void SetTexturesCoincident(System::Collections::Generic::IEnumerable_1<int>* vertices);
    // System.Void AddToSharedVertex(System.Int32 sharedVertexHandle, System.Int32 vertex)
    // Offset: 0x166149C
    void AddToSharedVertex(int sharedVertexHandle, int vertex);
    // System.Void AddSharedVertex(UnityEngine.ProBuilder.SharedVertex vertex)
    // Offset: 0x1661570
    void AddSharedVertex(UnityEngine::ProBuilder::SharedVertex* vertex);
    // public System.Boolean get_selectable()
    // Offset: 0x166162C
    bool get_selectable();
    // public System.Void set_selectable(System.Boolean value)
    // Offset: 0x1661634
    void set_selectable(bool value);
    // public System.Int32 get_selectedFaceCount()
    // Offset: 0x1661640
    int get_selectedFaceCount();
    // public System.Int32 get_selectedVertexCount()
    // Offset: 0x166165C
    int get_selectedVertexCount();
    // public System.Int32 get_selectedEdgeCount()
    // Offset: 0x1661678
    int get_selectedEdgeCount();
    // System.Int32 get_selectedSharedVerticesCount()
    // Offset: 0x1661694
    int get_selectedSharedVerticesCount();
    // System.Int32 get_selectedCoincidentVertexCount()
    // Offset: 0x1661B60
    int get_selectedCoincidentVertexCount();
    // System.Collections.Generic.IEnumerable`1<System.Int32> get_selectedSharedVertices()
    // Offset: 0x1661B84
    System::Collections::Generic::IEnumerable_1<int>* get_selectedSharedVertices();
    // System.Collections.Generic.IEnumerable`1<System.Int32> get_selectedCoincidentVertices()
    // Offset: 0x1661BA8
    System::Collections::Generic::IEnumerable_1<int>* get_selectedCoincidentVertices();
    // private System.Void CacheSelection()
    // Offset: 0x16616B8
    void CacheSelection();
    // public UnityEngine.ProBuilder.Face[] GetSelectedFaces()
    // Offset: 0x1661BCC
    ::Array<UnityEngine::ProBuilder::Face*>* GetSelectedFaces();
    // public System.Collections.ObjectModel.ReadOnlyCollection`1<System.Int32> get_selectedFaceIndexes()
    // Offset: 0x1661CFC
    System::Collections::ObjectModel::ReadOnlyCollection_1<int>* get_selectedFaceIndexes();
    // public System.Collections.ObjectModel.ReadOnlyCollection`1<System.Int32> get_selectedVertices()
    // Offset: 0x1661D6C
    System::Collections::ObjectModel::ReadOnlyCollection_1<int>* get_selectedVertices();
    // public System.Collections.ObjectModel.ReadOnlyCollection`1<UnityEngine.ProBuilder.Edge> get_selectedEdges()
    // Offset: 0x1661DDC
    System::Collections::ObjectModel::ReadOnlyCollection_1<UnityEngine::ProBuilder::Edge>* get_selectedEdges();
    // UnityEngine.ProBuilder.Face[] get_selectedFacesInternal()
    // Offset: 0x1661E4C
    ::Array<UnityEngine::ProBuilder::Face*>* get_selectedFacesInternal();
    // System.Void set_selectedFacesInternal(UnityEngine.ProBuilder.Face[] value)
    // Offset: 0x1661E50
    void set_selectedFacesInternal(::Array<UnityEngine::ProBuilder::Face*>* value);
    // System.Int32[] get_selectedFaceIndicesInternal()
    // Offset: 0x1661F04
    ::Array<int>* get_selectedFaceIndicesInternal();
    // System.Void set_selectedFaceIndicesInternal(System.Int32[] value)
    // Offset: 0x1661F0C
    void set_selectedFaceIndicesInternal(::Array<int>* value);
    // UnityEngine.ProBuilder.Edge[] get_selectedEdgesInternal()
    // Offset: 0x1661F14
    ::Array<UnityEngine::ProBuilder::Edge>* get_selectedEdgesInternal();
    // System.Void set_selectedEdgesInternal(UnityEngine.ProBuilder.Edge[] value)
    // Offset: 0x1661F1C
    void set_selectedEdgesInternal(::Array<UnityEngine::ProBuilder::Edge>* value);
    // System.Int32[] get_selectedIndexesInternal()
    // Offset: 0x1661F24
    ::Array<int>* get_selectedIndexesInternal();
    // System.Void set_selectedIndexesInternal(System.Int32[] value)
    // Offset: 0x1661F2C
    void set_selectedIndexesInternal(::Array<int>* value);
    // UnityEngine.ProBuilder.Face GetActiveFace()
    // Offset: 0x1661F34
    UnityEngine::ProBuilder::Face* GetActiveFace();
    // UnityEngine.ProBuilder.Edge GetActiveEdge()
    // Offset: 0x1661F9C
    UnityEngine::ProBuilder::Edge GetActiveEdge();
    // System.Int32 GetActiveVertex()
    // Offset: 0x1662034
    int GetActiveVertex();
    // System.Void AddToFaceSelection(System.Int32 index)
    // Offset: 0x1662070
    void AddToFaceSelection(int index);
    // public System.Void SetSelectedFaces(System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Face> selected)
    // Offset: 0x16622DC
    void SetSelectedFaces(System::Collections::Generic::IEnumerable_1<UnityEngine::ProBuilder::Face*>* selected);
    // System.Void SetSelectedFaces(System.Collections.Generic.IEnumerable`1<System.Int32> selected)
    // Offset: 0x16620F0
    void SetSelectedFaces(System::Collections::Generic::IEnumerable_1<int>* selected);
    // public System.Void SetSelectedEdges(System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Edge> edges)
    // Offset: 0x1662390
    void SetSelectedEdges(System::Collections::Generic::IEnumerable_1<UnityEngine::ProBuilder::Edge>* edges);
    // public System.Void SetSelectedVertices(System.Collections.Generic.IEnumerable`1<System.Int32> vertices)
    // Offset: 0x16624D8
    void SetSelectedVertices(System::Collections::Generic::IEnumerable_1<int>* vertices);
    // System.Void RemoveFromFaceSelectionAtIndex(System.Int32 index)
    // Offset: 0x1662640
    void RemoveFromFaceSelectionAtIndex(int index);
    // public System.Void ClearSelection()
    // Offset: 0x165DEE0
    void ClearSelection();
    // private System.Int32 <set_selectedFacesInternal>b__207_0(UnityEngine.ProBuilder.Face x)
    // Offset: 0x1662840
    int $set_selectedFacesInternal$b__207_0(UnityEngine::ProBuilder::Face* x);
    // private System.Int32 <SetSelectedFaces>b__221_0(UnityEngine.ProBuilder.Face x)
    // Offset: 0x16628A0
    int $SetSelectedFaces$b__221_0(UnityEngine::ProBuilder::Face* x);
    // private System.Collections.Generic.IEnumerable`1<System.Int32> <SetSelectedFaces>b__222_0(System.Int32 x)
    // Offset: 0x1662900
    System::Collections::Generic::IEnumerable_1<int>* $SetSelectedFaces$b__222_0(int x);
    // private System.Collections.Generic.IEnumerable`1<UnityEngine.ProBuilder.Edge> <SetSelectedFaces>b__222_1(System.Int32 x)
    // Offset: 0x1662944
    System::Collections::Generic::IEnumerable_1<UnityEngine::ProBuilder::Edge>* $SetSelectedFaces$b__222_1(int x);
    // public System.Void .ctor()
    // Offset: 0x16626AC
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ProBuilderMesh* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::ProBuilder::ProBuilderMesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ProBuilderMesh*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x16627C8
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // UnityEngine.ProBuilder.ProBuilderMesh
  #pragma pack(pop)
  static check_size<sizeof(ProBuilderMesh), 248 + sizeof(System::Collections::Generic::List_1<int>*)> __UnityEngine_ProBuilder_ProBuilderMeshSizeCheck;
  static_assert(sizeof(ProBuilderMesh) == 0x100);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::ProBuilder::ProBuilderMesh*, "UnityEngine.ProBuilder", "ProBuilderMesh");
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::ProBuilder::ProBuilderMesh::CacheValidState, "UnityEngine.ProBuilder", "ProBuilderMesh/CacheValidState");
