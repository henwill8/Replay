// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin il2cpp-utils forward declares
template<class T>
struct Array;
// Completed il2cpp-utils forward declares
// Type namespace: UnityEngine.ProBuilder.KdTree
namespace UnityEngine::ProBuilder::KdTree {
  // Autogenerated type: UnityEngine.ProBuilder.KdTree.ITypeMath`1
  template<typename T>
  class ITypeMath_1 {
    public:
    // public System.Int32 Compare(T a, T b)
    // Offset: 0xFFFFFFFF
    int Compare(T a, T b) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "Compare", a, b));
    }
    // public T get_MinValue()
    // Offset: 0xFFFFFFFF
    T get_MinValue() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<T>(this, "get_MinValue"));
    }
    // public System.Boolean AreEqual(T[] a, T[] b)
    // Offset: 0xFFFFFFFF
    bool AreEqual(::Array<T>* a, ::Array<T>* b) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "AreEqual", a, b));
    }
    // public T Multiply(T a, T b)
    // Offset: 0xFFFFFFFF
    T Multiply(T a, T b) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<T>(this, "Multiply", a, b));
    }
    // public T get_NegativeInfinity()
    // Offset: 0xFFFFFFFF
    T get_NegativeInfinity() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<T>(this, "get_NegativeInfinity"));
    }
    // public T get_PositiveInfinity()
    // Offset: 0xFFFFFFFF
    T get_PositiveInfinity() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<T>(this, "get_PositiveInfinity"));
    }
    // public T DistanceSquaredBetweenPoints(T[] a, T[] b)
    // Offset: 0xFFFFFFFF
    T DistanceSquaredBetweenPoints(::Array<T>* a, ::Array<T>* b) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<T>(this, "DistanceSquaredBetweenPoints", a, b));
    }
  }; // UnityEngine.ProBuilder.KdTree.ITypeMath`1
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(UnityEngine::ProBuilder::KdTree::ITypeMath_1, "UnityEngine.ProBuilder.KdTree", "ITypeMath`1");
#pragma pack(pop)
