// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Vector4
#include "UnityEngine/Vector4.hpp"
// Completed includes
// Type namespace: UnityEngine.ProBuilder
namespace UnityEngine::ProBuilder {
  // Autogenerated type: UnityEngine.ProBuilder.Normal
  struct Normal : public System::ValueType/*, public System::IEquatable_1<UnityEngine::ProBuilder::Normal>*/ {
    public:
    // private UnityEngine.Vector3 <normal>k__BackingField
    // Offset: 0x0
    UnityEngine::Vector3 normal;
    // private UnityEngine.Vector4 <tangent>k__BackingField
    // Offset: 0xC
    UnityEngine::Vector4 tangent;
    // private UnityEngine.Vector3 <bitangent>k__BackingField
    // Offset: 0x1C
    UnityEngine::Vector3 bitangent;
    // Creating value type constructor for type: Normal
    constexpr Normal(UnityEngine::Vector3 normal_ = {}, UnityEngine::Vector4 tangent_ = {}, UnityEngine::Vector3 bitangent_ = {}) noexcept : normal{normal_}, tangent{tangent_}, bitangent{bitangent_} {}
    // Creating interface conversion operator: operator System::IEquatable_1<UnityEngine::ProBuilder::Normal>
    operator System::IEquatable_1<UnityEngine::ProBuilder::Normal>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<UnityEngine::ProBuilder::Normal>*>(this);
    }
    // public UnityEngine.Vector3 get_normal()
    // Offset: 0xC9E7A4
    UnityEngine::Vector3 get_normal();
    // public System.Void set_normal(UnityEngine.Vector3 value)
    // Offset: 0xC9E7B0
    void set_normal(UnityEngine::Vector3 value);
    // public UnityEngine.Vector4 get_tangent()
    // Offset: 0xC9E7BC
    UnityEngine::Vector4 get_tangent();
    // public System.Void set_tangent(UnityEngine.Vector4 value)
    // Offset: 0xC9E7C8
    void set_tangent(UnityEngine::Vector4 value);
    // public UnityEngine.Vector3 get_bitangent()
    // Offset: 0xC9E7D4
    UnityEngine::Vector3 get_bitangent();
    // public System.Void set_bitangent(UnityEngine.Vector3 value)
    // Offset: 0xC9E7E0
    void set_bitangent(UnityEngine::Vector3 value);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xC9E7EC
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xC9E7F4
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public System.Boolean Equals(UnityEngine.ProBuilder.Normal other)
    // Offset: 0xC9E7FC
    // Implemented from: System.IEquatable`1
    // Base method: System.Boolean IEquatable_1::Equals(UnityEngine.ProBuilder.Normal other)
    bool Equals(UnityEngine::ProBuilder::Normal other);
  }; // UnityEngine.ProBuilder.Normal
  // static public System.Boolean op_Equality(UnityEngine.ProBuilder.Normal a, UnityEngine.ProBuilder.Normal b)
  // Offset: 0x139CF94
  bool operator ==(const UnityEngine::ProBuilder::Normal& a, const UnityEngine::ProBuilder::Normal& b);
  // static public System.Boolean op_Inequality(UnityEngine.ProBuilder.Normal a, UnityEngine.ProBuilder.Normal b)
  // Offset: 0x139CFC8
  bool operator !=(const UnityEngine::ProBuilder::Normal& a, const UnityEngine::ProBuilder::Normal& b);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::ProBuilder::Normal, "UnityEngine.ProBuilder", "Normal");
#pragma pack(pop)
