// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
// Including type: UnityEngine.ILogger
#include "UnityEngine/ILogger.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: ILogHandler because it is already included!
  // Forward declaring type: Object
  class Object;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Exception
  class Exception;
}
// Completed forward declares
// Type namespace: UnityEngine
namespace UnityEngine {
  // Autogenerated type: UnityEngine.Logger
  class Logger : public ::Il2CppObject, public UnityEngine::ILogger {
    public:
    // private UnityEngine.ILogHandler <logHandler>k__BackingField
    // Offset: 0x10
    UnityEngine::ILogHandler* logHandler;
    // private System.Boolean <logEnabled>k__BackingField
    // Offset: 0x18
    bool logEnabled;
    // private UnityEngine.LogType <filterLogType>k__BackingField
    // Offset: 0x1C
    UnityEngine::LogType filterLogType;
    // public System.Void .ctor(UnityEngine.ILogHandler logHandler)
    // Offset: 0x130DF44
    static Logger* New_ctor(UnityEngine::ILogHandler* logHandler);
    // public System.Void set_logHandler(UnityEngine.ILogHandler value)
    // Offset: 0x1316AD0
    void set_logHandler(UnityEngine::ILogHandler* value);
    // public System.Boolean get_logEnabled()
    // Offset: 0x1316AD8
    bool get_logEnabled();
    // public System.Void set_logEnabled(System.Boolean value)
    // Offset: 0x1316AE0
    void set_logEnabled(bool value);
    // public UnityEngine.LogType get_filterLogType()
    // Offset: 0x1316AEC
    UnityEngine::LogType get_filterLogType();
    // public System.Void set_filterLogType(UnityEngine.LogType value)
    // Offset: 0x1316AF4
    void set_filterLogType(UnityEngine::LogType value);
    // public System.Boolean IsLogTypeAllowed(UnityEngine.LogType logType)
    // Offset: 0x1316AFC
    bool IsLogTypeAllowed(UnityEngine::LogType logType);
    // static private System.String GetString(System.Object message)
    // Offset: 0x1316B38
    static ::Il2CppString* GetString(::Il2CppObject* message);
    // public UnityEngine.ILogHandler get_logHandler()
    // Offset: 0x1316AC8
    // Implemented from: UnityEngine.ILogger
    // Base method: UnityEngine.ILogHandler ILogger::get_logHandler()
    UnityEngine::ILogHandler* get_logHandler();
    // public System.Void Log(UnityEngine.LogType logType, System.Object message)
    // Offset: 0x1316C68
    // Implemented from: UnityEngine.ILogger
    // Base method: System.Void ILogger::Log(UnityEngine.LogType logType, System.Object message)
    void Log(UnityEngine::LogType logType, ::Il2CppObject* message);
    // public System.Void Log(UnityEngine.LogType logType, System.Object message, UnityEngine.Object context)
    // Offset: 0x1316DE8
    // Implemented from: UnityEngine.ILogger
    // Base method: System.Void ILogger::Log(UnityEngine.LogType logType, System.Object message, UnityEngine.Object context)
    void Log(UnityEngine::LogType logType, ::Il2CppObject* message, UnityEngine::Object* context);
    // public System.Void LogFormat(UnityEngine.LogType logType, System.String format, params System.Object[] args)
    // Offset: 0x1316F78
    // Implemented from: UnityEngine.ILogger
    // Base method: System.Void ILogger::LogFormat(UnityEngine.LogType logType, System.String format, params System.Object[] args)
    void LogFormat(UnityEngine::LogType logType, ::Il2CppString* format, ::Array<::Il2CppObject*>* args);
    // Creating initializer_list -> params proxy for: System.Void LogFormat(UnityEngine.LogType logType, System.String format, params System.Object[] args)
    void LogFormat(UnityEngine::LogType logType, ::Il2CppString* format, std::initializer_list<::Il2CppObject*> args);
    // Creating TArgs -> initializer_list proxy for: System.Void LogFormat(UnityEngine.LogType logType, System.String format, params System.Object[] args)
    template<class ...TParams>
    void LogFormat(UnityEngine::LogType logType, ::Il2CppString* format, TParams&&... args) {
      LogFormat(logType, format, {args...});
    }
    // public System.Void LogFormat(UnityEngine.LogType logType, UnityEngine.Object context, System.String format, params System.Object[] args)
    // Offset: 0x131708C
    // Implemented from: UnityEngine.ILogHandler
    // Base method: System.Void ILogHandler::LogFormat(UnityEngine.LogType logType, UnityEngine.Object context, System.String format, params System.Object[] args)
    void LogFormat(UnityEngine::LogType logType, UnityEngine::Object* context, ::Il2CppString* format, ::Array<::Il2CppObject*>* args);
    // Creating initializer_list -> params proxy for: System.Void LogFormat(UnityEngine.LogType logType, UnityEngine.Object context, System.String format, params System.Object[] args)
    void LogFormat(UnityEngine::LogType logType, UnityEngine::Object* context, ::Il2CppString* format, std::initializer_list<::Il2CppObject*> args);
    // Creating TArgs -> initializer_list proxy for: System.Void LogFormat(UnityEngine.LogType logType, UnityEngine.Object context, System.String format, params System.Object[] args)
    template<class ...TParams>
    void LogFormat(UnityEngine::LogType logType, UnityEngine::Object* context, ::Il2CppString* format, TParams&&... args) {
      LogFormat(logType, context, format, {args...});
    }
    // public System.Void LogException(System.Exception exception, UnityEngine.Object context)
    // Offset: 0x13171A4
    // Implemented from: UnityEngine.ILogHandler
    // Base method: System.Void ILogHandler::LogException(System.Exception exception, UnityEngine.Object context)
    void LogException(System::Exception* exception, UnityEngine::Object* context);
  }; // UnityEngine.Logger
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Logger*, "UnityEngine", "Logger");
#pragma pack(pop)
