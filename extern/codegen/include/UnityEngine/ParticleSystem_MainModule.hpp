// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Including type: UnityEngine.ParticleSystem
#include "UnityEngine/ParticleSystem.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x8
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.ParticleSystem/MainModule
  // [] Offset: FFFFFFFF
  struct ParticleSystem::MainModule/*, public System::ValueType*/ {
    public:
    // UnityEngine.ParticleSystem m_ParticleSystem
    // Size: 0x8
    // Offset: 0x0
    UnityEngine::ParticleSystem* m_ParticleSystem;
    // Field size check
    static_assert(sizeof(UnityEngine::ParticleSystem*) == 0x8);
    // Creating value type constructor for type: MainModule
    constexpr MainModule(UnityEngine::ParticleSystem* m_ParticleSystem_ = {}) noexcept : m_ParticleSystem{m_ParticleSystem_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating conversion operator: operator UnityEngine::ParticleSystem*
    constexpr operator UnityEngine::ParticleSystem*() const noexcept {
      return m_ParticleSystem;
    }
    // System.Void .ctor(UnityEngine.ParticleSystem particleSystem)
    // Offset: 0xE315E0
    // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    // ABORTED: conflicts with another method.  MainModule(UnityEngine::ParticleSystem* particleSystem)
    // public System.Single get_duration()
    // Offset: 0xE315E8
    float get_duration();
    // public System.Boolean get_loop()
    // Offset: 0xE31628
    bool get_loop();
    // public UnityEngine.ParticleSystem/MinMaxCurve get_startDelay()
    // Offset: 0xE31668
    UnityEngine::ParticleSystem::MinMaxCurve get_startDelay();
    // public UnityEngine.ParticleSystem/MinMaxCurve get_startLifetime()
    // Offset: 0xE316D4
    UnityEngine::ParticleSystem::MinMaxCurve get_startLifetime();
    // public System.Void set_startLifetime(UnityEngine.ParticleSystem/MinMaxCurve value)
    // Offset: 0xE31740
    void set_startLifetime(UnityEngine::ParticleSystem::MinMaxCurve value);
    // public UnityEngine.ParticleSystem/MinMaxCurve get_startSpeed()
    // Offset: 0xE31798
    UnityEngine::ParticleSystem::MinMaxCurve get_startSpeed();
    // public System.Void set_startSpeedMultiplier(System.Single value)
    // Offset: 0xE31804
    void set_startSpeedMultiplier(float value);
    // public UnityEngine.ParticleSystem/MinMaxGradient get_startColor()
    // Offset: 0xE31854
    UnityEngine::ParticleSystem::MinMaxGradient get_startColor();
    // public System.Void set_startColor(UnityEngine.ParticleSystem/MinMaxGradient value)
    // Offset: 0xE318D8
    void set_startColor(UnityEngine::ParticleSystem::MinMaxGradient value);
    // public System.Int32 get_maxParticles()
    // Offset: 0xE31940
    int get_maxParticles();
    // public System.Void set_maxParticles(System.Int32 value)
    // Offset: 0xE31980
    void set_maxParticles(int value);
    // static private System.Single get_duration_Injected(ref UnityEngine.ParticleSystem/MainModule _unity_self)
    // Offset: 0x22D2CF0
    static float get_duration_Injected(UnityEngine::ParticleSystem::MainModule& _unity_self);
    // static private System.Boolean get_loop_Injected(ref UnityEngine.ParticleSystem/MainModule _unity_self)
    // Offset: 0x22D2D70
    static bool get_loop_Injected(UnityEngine::ParticleSystem::MainModule& _unity_self);
    // static private System.Void get_startDelay_Injected(ref UnityEngine.ParticleSystem/MainModule _unity_self, out UnityEngine.ParticleSystem/MinMaxCurve ret)
    // Offset: 0x22D2E1C
    static void get_startDelay_Injected(UnityEngine::ParticleSystem::MainModule& _unity_self, UnityEngine::ParticleSystem::MinMaxCurve& ret);
    // static private System.Void get_startLifetime_Injected(ref UnityEngine.ParticleSystem/MainModule _unity_self, out UnityEngine.ParticleSystem/MinMaxCurve ret)
    // Offset: 0x22D2ED8
    static void get_startLifetime_Injected(UnityEngine::ParticleSystem::MainModule& _unity_self, UnityEngine::ParticleSystem::MinMaxCurve& ret);
    // static private System.Void set_startLifetime_Injected(ref UnityEngine.ParticleSystem/MainModule _unity_self, ref UnityEngine.ParticleSystem/MinMaxCurve value)
    // Offset: 0x22D2F78
    static void set_startLifetime_Injected(UnityEngine::ParticleSystem::MainModule& _unity_self, UnityEngine::ParticleSystem::MinMaxCurve& value);
    // static private System.Void get_startSpeed_Injected(ref UnityEngine.ParticleSystem/MainModule _unity_self, out UnityEngine.ParticleSystem/MinMaxCurve ret)
    // Offset: 0x22D3034
    static void get_startSpeed_Injected(UnityEngine::ParticleSystem::MainModule& _unity_self, UnityEngine::ParticleSystem::MinMaxCurve& ret);
    // static private System.Void set_startSpeedMultiplier_Injected(ref UnityEngine.ParticleSystem/MainModule _unity_self, System.Single value)
    // Offset: 0x22D30D4
    static void set_startSpeedMultiplier_Injected(UnityEngine::ParticleSystem::MainModule& _unity_self, float value);
    // static private System.Void get_startColor_Injected(ref UnityEngine.ParticleSystem/MainModule _unity_self, out UnityEngine.ParticleSystem/MinMaxGradient ret)
    // Offset: 0x22D31A8
    static void get_startColor_Injected(UnityEngine::ParticleSystem::MainModule& _unity_self, UnityEngine::ParticleSystem::MinMaxGradient& ret);
    // static private System.Void set_startColor_Injected(ref UnityEngine.ParticleSystem/MainModule _unity_self, ref UnityEngine.ParticleSystem/MinMaxGradient value)
    // Offset: 0x22D3248
    static void set_startColor_Injected(UnityEngine::ParticleSystem::MainModule& _unity_self, UnityEngine::ParticleSystem::MinMaxGradient& value);
    // static private System.Int32 get_maxParticles_Injected(ref UnityEngine.ParticleSystem/MainModule _unity_self)
    // Offset: 0x22D32D8
    static int get_maxParticles_Injected(UnityEngine::ParticleSystem::MainModule& _unity_self);
    // static private System.Void set_maxParticles_Injected(ref UnityEngine.ParticleSystem/MainModule _unity_self, System.Int32 value)
    // Offset: 0x22D3368
    static void set_maxParticles_Injected(UnityEngine::ParticleSystem::MainModule& _unity_self, int value);
  }; // UnityEngine.ParticleSystem/MainModule
  #pragma pack(pop)
  static check_size<sizeof(ParticleSystem::MainModule), 0 + sizeof(UnityEngine::ParticleSystem*)> __UnityEngine_ParticleSystem_MainModuleSizeCheck;
  static_assert(sizeof(ParticleSystem::MainModule) == 0x8);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::ParticleSystem::MainModule, "UnityEngine", "ParticleSystem/MainModule");
