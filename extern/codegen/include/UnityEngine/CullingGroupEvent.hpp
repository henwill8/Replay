// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include <stdint.h>
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x6
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.CullingGroupEvent
  // [] Offset: FFFFFFFF
  struct CullingGroupEvent/*, public System::ValueType*/ {
    public:
    // private System.Int32 m_Index
    // Size: 0x4
    // Offset: 0x0
    int m_Index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Byte m_PrevState
    // Size: 0x1
    // Offset: 0x4
    uint8_t m_PrevState;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // private System.Byte m_ThisState
    // Size: 0x1
    // Offset: 0x5
    uint8_t m_ThisState;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Creating value type constructor for type: CullingGroupEvent
    constexpr CullingGroupEvent(int m_Index_ = {}, uint8_t m_PrevState_ = {}, uint8_t m_ThisState_ = {}) noexcept : m_Index{m_Index_}, m_PrevState{m_PrevState_}, m_ThisState{m_ThisState_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
  }; // UnityEngine.CullingGroupEvent
  #pragma pack(pop)
  static check_size<sizeof(CullingGroupEvent), 5 + sizeof(uint8_t)> __UnityEngine_CullingGroupEventSizeCheck;
  static_assert(sizeof(CullingGroupEvent) == 0x6);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::CullingGroupEvent, "UnityEngine", "CullingGroupEvent");
