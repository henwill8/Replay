// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Completed includes
// Type namespace: UnityEngine
namespace UnityEngine {
  // Size: 0x28
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.HumanPose
  // [] Offset: FFFFFFFF
  struct HumanPose/*, public System::ValueType*/ {
    public:
    // public UnityEngine.Vector3 bodyPosition
    // Size: 0xC
    // Offset: 0x0
    UnityEngine::Vector3 bodyPosition;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // public UnityEngine.Quaternion bodyRotation
    // Size: 0x10
    // Offset: 0xC
    UnityEngine::Quaternion bodyRotation;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // Padding between fields: bodyRotation and: muscles
    char __padding1[0x4] = {};
    // public System.Single[] muscles
    // Size: 0x8
    // Offset: 0x20
    ::Array<float>* muscles;
    // Field size check
    static_assert(sizeof(::Array<float>*) == 0x8);
    // Creating value type constructor for type: HumanPose
    constexpr HumanPose(UnityEngine::Vector3 bodyPosition_ = {}, UnityEngine::Quaternion bodyRotation_ = {}, ::Array<float>* muscles_ = {}) noexcept : bodyPosition{bodyPosition_}, bodyRotation{bodyRotation_}, muscles{muscles_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // System.Void Init()
    // Offset: 0xE2FD4C
    void Init();
  }; // UnityEngine.HumanPose
  #pragma pack(pop)
  static check_size<sizeof(HumanPose), 32 + sizeof(::Array<float>*)> __UnityEngine_HumanPoseSizeCheck;
  static_assert(sizeof(HumanPose) == 0x28);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::HumanPose, "UnityEngine", "HumanPose");
