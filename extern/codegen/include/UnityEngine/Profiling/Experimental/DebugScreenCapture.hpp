// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Unity.Collections.NativeArray`1
#include "Unity/Collections/NativeArray_1.hpp"
// Including type: UnityEngine.TextureFormat
#include "UnityEngine/TextureFormat.hpp"
// Completed includes
// Type namespace: UnityEngine.Profiling.Experimental
namespace UnityEngine::Profiling::Experimental {
  // WARNING Size may be invalid!
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.Profiling.Experimental.DebugScreenCapture
  // [] Offset: FFFFFFFF
  struct DebugScreenCapture/*, public System::ValueType*/ {
    public:
    // [DebuggerBrowsableAttribute] Offset: 0xCC2C1C
    // [CompilerGeneratedAttribute] Offset: 0xCC2C1C
    // private Unity.Collections.NativeArray`1<System.Byte> <rawImageDataReference>k__BackingField
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    Unity::Collections::NativeArray_1<uint8_t> rawImageDataReference;
    // [CompilerGeneratedAttribute] Offset: 0xCC2C58
    // [DebuggerBrowsableAttribute] Offset: 0xCC2C58
    // private UnityEngine.TextureFormat <imageFormat>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    UnityEngine::TextureFormat imageFormat;
    // Field size check
    static_assert(sizeof(UnityEngine::TextureFormat) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0xCC2C94
    // [CompilerGeneratedAttribute] Offset: 0xCC2C94
    // private System.Int32 <width>k__BackingField
    // Size: 0x4
    // Offset: 0x14
    int width;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [DebuggerBrowsableAttribute] Offset: 0xCC2CD0
    // [CompilerGeneratedAttribute] Offset: 0xCC2CD0
    // private System.Int32 <height>k__BackingField
    // Size: 0x4
    // Offset: 0x18
    int height;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: DebugScreenCapture
    constexpr DebugScreenCapture(Unity::Collections::NativeArray_1<uint8_t> rawImageDataReference_ = {}, UnityEngine::TextureFormat imageFormat_ = {}, int width_ = {}, int height_ = {}) noexcept : rawImageDataReference{rawImageDataReference_}, imageFormat{imageFormat_}, width{width_}, height{height_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // public System.Void set_rawImageDataReference(Unity.Collections.NativeArray`1<System.Byte> value)
    // Offset: 0xE18314
    void set_rawImageDataReference(Unity::Collections::NativeArray_1<uint8_t> value);
    // public System.Void set_imageFormat(UnityEngine.TextureFormat value)
    // Offset: 0xE1831C
    void set_imageFormat(UnityEngine::TextureFormat value);
    // public System.Void set_width(System.Int32 value)
    // Offset: 0xE18324
    void set_width(int value);
    // public System.Void set_height(System.Int32 value)
    // Offset: 0xE1832C
    void set_height(int value);
  }; // UnityEngine.Profiling.Experimental.DebugScreenCapture
  // WARNING Not writing size check since size may be invalid!
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Profiling::Experimental::DebugScreenCapture, "UnityEngine.Profiling.Experimental", "DebugScreenCapture");
