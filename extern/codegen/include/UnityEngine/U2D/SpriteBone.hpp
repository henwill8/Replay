// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
// Completed includes
// Type namespace: UnityEngine.U2D
namespace UnityEngine::U2D {
  // Size: 0x2C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: UnityEngine.U2D.SpriteBone
  // [] Offset: FFFFFFFF
  // [NativeTypeAttribute] Offset: CBFC34
  // [NativeHeaderAttribute] Offset: CBFC34
  // [RequiredByNativeCodeAttribute] Offset: CBFC34
  // [NativeHeaderAttribute] Offset: CBFC34
  // [MovedFromAttribute] Offset: CBFC34
  struct SpriteBone/*, public System::ValueType*/ {
    public:
    // [NativeNameAttribute] Offset: 0xCC2A28
    // private System.String m_Name
    // Size: 0x8
    // Offset: 0x0
    ::Il2CppString* m_Name;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [NativeNameAttribute] Offset: 0xCC2A74
    // private UnityEngine.Vector3 m_Position
    // Size: 0xC
    // Offset: 0x8
    UnityEngine::Vector3 m_Position;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [NativeNameAttribute] Offset: 0xCC2AC0
    // private UnityEngine.Quaternion m_Rotation
    // Size: 0x10
    // Offset: 0x14
    UnityEngine::Quaternion m_Rotation;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // [NativeNameAttribute] Offset: 0xCC2B0C
    // private System.Single m_Length
    // Size: 0x4
    // Offset: 0x24
    float m_Length;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [NativeNameAttribute] Offset: 0xCC2B58
    // private System.Int32 m_ParentId
    // Size: 0x4
    // Offset: 0x28
    int m_ParentId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: SpriteBone
    constexpr SpriteBone(::Il2CppString* m_Name_ = {}, UnityEngine::Vector3 m_Position_ = {}, UnityEngine::Quaternion m_Rotation_ = {}, float m_Length_ = {}, int m_ParentId_ = {}) noexcept : m_Name{m_Name_}, m_Position{m_Position_}, m_Rotation{m_Rotation_}, m_Length{m_Length_}, m_ParentId{m_ParentId_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
  }; // UnityEngine.U2D.SpriteBone
  #pragma pack(pop)
  static check_size<sizeof(SpriteBone), 40 + sizeof(int)> __UnityEngine_U2D_SpriteBoneSizeCheck;
  static_assert(sizeof(SpriteBone) == 0x2C);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::U2D::SpriteBone, "UnityEngine.U2D", "SpriteBone");
