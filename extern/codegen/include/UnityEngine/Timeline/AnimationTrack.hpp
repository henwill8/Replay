// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.TrackAsset
#include "UnityEngine/Timeline/TrackAsset.hpp"
// Including type: UnityEngine.Timeline.ILayerable
#include "UnityEngine/Timeline/ILayerable.hpp"
// Including type: UnityEngine.Timeline.TimelineClip/ClipExtrapolation
#include "UnityEngine/Timeline/TimelineClip.hpp"
// Including type: UnityEngine.Timeline.AnimationPlayableAsset/LoopMode
#include "UnityEngine/Timeline/AnimationPlayableAsset.hpp"
// Including type: UnityEngine.Timeline.MatchTargetFields
#include "UnityEngine/Timeline/MatchTargetFields.hpp"
// Including type: UnityEngine.Timeline.TrackOffset
#include "UnityEngine/Timeline/TrackOffset.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Timeline
namespace UnityEngine::Timeline {
  // Skipping declaration: TimelineClip because it is already included!
  // Forward declaring type: IntervalTree`1<T>
  template<typename T>
  class IntervalTree_1;
  // Forward declaring type: RuntimeElement
  class RuntimeElement;
  // Forward declaring type: AppliedOffsetMode
  struct AppliedOffsetMode;
  // Forward declaring type: IPropertyCollector
  class IPropertyCollector;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AvatarMask
  class AvatarMask;
  // Forward declaring type: AnimationClip
  class AnimationClip;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Animator
  class Animator;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Skipping declaration: Playable because it is already included!
  // Forward declaring type: PlayableGraph
  struct PlayableGraph;
  // Forward declaring type: PlayableDirector
  class PlayableDirector;
}
// Forward declaring namespace: UnityEngine::Animations
namespace UnityEngine::Animations {
  // Forward declaring type: AnimationLayerMixerPlayable
  struct AnimationLayerMixerPlayable;
}
// Completed forward declares
// Type namespace: UnityEngine.Timeline
namespace UnityEngine::Timeline {
  // WARNING Size may be invalid!
  // Autogenerated type: UnityEngine.Timeline.AnimationTrack
  // [] Offset: FFFFFFFF
  // [TrackClipTypeAttribute] Offset: CFEA60
  // [TrackBindingTypeAttribute] Offset: CFEA60
  // [ExcludeFromPresetAttribute] Offset: CFEA60
  class AnimationTrack : public UnityEngine::Timeline::TrackAsset/*, public UnityEngine::Timeline::ILayerable*/ {
    public:
    // Nested type: UnityEngine::Timeline::AnimationTrack::AnimationTrackUpgrade
    class AnimationTrackUpgrade;
    // Nested type: UnityEngine::Timeline::AnimationTrack::$get_outputs$d__49
    class $get_outputs$d__49;
    // [FormerlySerializedAsAttribute] Offset: 0xCFF374
    // private UnityEngine.Timeline.TimelineClip/ClipExtrapolation m_InfiniteClipPreExtrapolation
    // Size: 0x4
    // Offset: 0xA0
    UnityEngine::Timeline::TimelineClip::ClipExtrapolation m_InfiniteClipPreExtrapolation;
    // Field size check
    static_assert(sizeof(UnityEngine::Timeline::TimelineClip::ClipExtrapolation) == 0x4);
    // [FormerlySerializedAsAttribute] Offset: 0xCFF3C0
    // private UnityEngine.Timeline.TimelineClip/ClipExtrapolation m_InfiniteClipPostExtrapolation
    // Size: 0x4
    // Offset: 0xA4
    UnityEngine::Timeline::TimelineClip::ClipExtrapolation m_InfiniteClipPostExtrapolation;
    // Field size check
    static_assert(sizeof(UnityEngine::Timeline::TimelineClip::ClipExtrapolation) == 0x4);
    // [FormerlySerializedAsAttribute] Offset: 0xCFF40C
    // private UnityEngine.Vector3 m_InfiniteClipOffsetPosition
    // Size: 0xC
    // Offset: 0xA8
    UnityEngine::Vector3 m_InfiniteClipOffsetPosition;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [FormerlySerializedAsAttribute] Offset: 0xCFF458
    // private UnityEngine.Vector3 m_InfiniteClipOffsetEulerAngles
    // Size: 0xC
    // Offset: 0xB4
    UnityEngine::Vector3 m_InfiniteClipOffsetEulerAngles;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [FormerlySerializedAsAttribute] Offset: 0xCFF4A4
    // private System.Double m_InfiniteClipTimeOffset
    // Size: 0x8
    // Offset: 0xC0
    double m_InfiniteClipTimeOffset;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xCFF4F0
    // private System.Boolean m_InfiniteClipRemoveOffset
    // Size: 0x1
    // Offset: 0xC8
    bool m_InfiniteClipRemoveOffset;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_InfiniteClipApplyFootIK
    // Size: 0x1
    // Offset: 0xC9
    bool m_InfiniteClipApplyFootIK;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [HideInInspector] Offset: 0xCFF54C
    // private UnityEngine.Timeline.AnimationPlayableAsset/LoopMode mInfiniteClipLoop
    // Size: 0x4
    // Offset: 0xCC
    UnityEngine::Timeline::AnimationPlayableAsset::LoopMode mInfiniteClipLoop;
    // Field size check
    static_assert(sizeof(UnityEngine::Timeline::AnimationPlayableAsset::LoopMode) == 0x4);
    // private UnityEngine.Timeline.MatchTargetFields m_MatchTargetFields
    // Size: 0x4
    // Offset: 0xD0
    UnityEngine::Timeline::MatchTargetFields m_MatchTargetFields;
    // Field size check
    static_assert(sizeof(UnityEngine::Timeline::MatchTargetFields) == 0x4);
    // private UnityEngine.Vector3 m_Position
    // Size: 0xC
    // Offset: 0xD4
    UnityEngine::Vector3 m_Position;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 m_EulerAngles
    // Size: 0xC
    // Offset: 0xE0
    UnityEngine::Vector3 m_EulerAngles;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.AvatarMask m_AvatarMask
    // Size: 0x8
    // Offset: 0xF0
    UnityEngine::AvatarMask* m_AvatarMask;
    // Field size check
    static_assert(sizeof(UnityEngine::AvatarMask*) == 0x8);
    // private System.Boolean m_ApplyAvatarMask
    // Size: 0x1
    // Offset: 0xF8
    bool m_ApplyAvatarMask;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.Timeline.TrackOffset m_TrackOffset
    // Size: 0x4
    // Offset: 0xFC
    UnityEngine::Timeline::TrackOffset m_TrackOffset;
    // Field size check
    static_assert(sizeof(UnityEngine::Timeline::TrackOffset) == 0x4);
    // [HideInInspector] Offset: 0xCFF5E4
    // private UnityEngine.AnimationClip m_InfiniteClip
    // Size: 0x8
    // Offset: 0x100
    UnityEngine::AnimationClip* m_InfiniteClip;
    // Field size check
    static_assert(sizeof(UnityEngine::AnimationClip*) == 0x8);
    // [ObsoleteAttribute] Offset: 0xCFF61C
    // [HideInInspector] Offset: 0xCFF61C
    // private UnityEngine.Quaternion m_OpenClipOffsetRotation
    // Size: 0x10
    // Offset: 0x108
    UnityEngine::Quaternion m_OpenClipOffsetRotation;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // [ObsoleteAttribute] Offset: 0xCFF67C
    // [HideInInspector] Offset: 0xCFF67C
    // private UnityEngine.Quaternion m_Rotation
    // Size: 0x10
    // Offset: 0x118
    UnityEngine::Quaternion m_Rotation;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // [ObsoleteAttribute] Offset: 0xCFF6DC
    // [HideInInspector] Offset: 0xCFF6DC
    // private System.Boolean m_ApplyOffsets
    // Size: 0x1
    // Offset: 0x128
    bool m_ApplyOffsets;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: AnimationTrack
    AnimationTrack(UnityEngine::Timeline::TimelineClip::ClipExtrapolation m_InfiniteClipPreExtrapolation_ = {}, UnityEngine::Timeline::TimelineClip::ClipExtrapolation m_InfiniteClipPostExtrapolation_ = {}, UnityEngine::Vector3 m_InfiniteClipOffsetPosition_ = {}, UnityEngine::Vector3 m_InfiniteClipOffsetEulerAngles_ = {}, double m_InfiniteClipTimeOffset_ = {}, bool m_InfiniteClipRemoveOffset_ = {}, bool m_InfiniteClipApplyFootIK_ = {}, UnityEngine::Timeline::AnimationPlayableAsset::LoopMode mInfiniteClipLoop_ = {}, UnityEngine::Timeline::MatchTargetFields m_MatchTargetFields_ = {}, UnityEngine::Vector3 m_Position_ = {}, UnityEngine::Vector3 m_EulerAngles_ = {}, UnityEngine::AvatarMask* m_AvatarMask_ = {}, bool m_ApplyAvatarMask_ = {}, UnityEngine::Timeline::TrackOffset m_TrackOffset_ = {}, UnityEngine::AnimationClip* m_InfiniteClip_ = {}, UnityEngine::Quaternion m_OpenClipOffsetRotation_ = {}, UnityEngine::Quaternion m_Rotation_ = {}, bool m_ApplyOffsets_ = {}) noexcept : m_InfiniteClipPreExtrapolation{m_InfiniteClipPreExtrapolation_}, m_InfiniteClipPostExtrapolation{m_InfiniteClipPostExtrapolation_}, m_InfiniteClipOffsetPosition{m_InfiniteClipOffsetPosition_}, m_InfiniteClipOffsetEulerAngles{m_InfiniteClipOffsetEulerAngles_}, m_InfiniteClipTimeOffset{m_InfiniteClipTimeOffset_}, m_InfiniteClipRemoveOffset{m_InfiniteClipRemoveOffset_}, m_InfiniteClipApplyFootIK{m_InfiniteClipApplyFootIK_}, mInfiniteClipLoop{mInfiniteClipLoop_}, m_MatchTargetFields{m_MatchTargetFields_}, m_Position{m_Position_}, m_EulerAngles{m_EulerAngles_}, m_AvatarMask{m_AvatarMask_}, m_ApplyAvatarMask{m_ApplyAvatarMask_}, m_TrackOffset{m_TrackOffset_}, m_InfiniteClip{m_InfiniteClip_}, m_OpenClipOffsetRotation{m_OpenClipOffsetRotation_}, m_Rotation{m_Rotation_}, m_ApplyOffsets{m_ApplyOffsets_} {}
    // Creating interface conversion operator: operator UnityEngine::Timeline::ILayerable
    operator UnityEngine::Timeline::ILayerable() noexcept {
      return *reinterpret_cast<UnityEngine::Timeline::ILayerable*>(this);
    }
    // static field const value: static private System.String k_DefaultInfiniteClipName
    static constexpr const char* k_DefaultInfiniteClipName = "Recorded";
    // Get static field: static private System.String k_DefaultInfiniteClipName
    static ::Il2CppString* _get_k_DefaultInfiniteClipName();
    // Set static field: static private System.String k_DefaultInfiniteClipName
    static void _set_k_DefaultInfiniteClipName(::Il2CppString* value);
    // static field const value: static private System.String k_DefaultRecordableClipName
    static constexpr const char* k_DefaultRecordableClipName = "Recorded";
    // Get static field: static private System.String k_DefaultRecordableClipName
    static ::Il2CppString* _get_k_DefaultRecordableClipName();
    // Set static field: static private System.String k_DefaultRecordableClipName
    static void _set_k_DefaultRecordableClipName(::Il2CppString* value);
    // Get static field: static private readonly System.Collections.Generic.Queue`1<UnityEngine.Transform> s_CachedQueue
    static System::Collections::Generic::Queue_1<UnityEngine::Transform*>* _get_s_CachedQueue();
    // Set static field: static private readonly System.Collections.Generic.Queue`1<UnityEngine.Transform> s_CachedQueue
    static void _set_s_CachedQueue(System::Collections::Generic::Queue_1<UnityEngine::Transform*>* value);
    // public UnityEngine.Vector3 get_position()
    // Offset: 0x17279CC
    UnityEngine::Vector3 get_position();
    // public System.Void set_position(UnityEngine.Vector3 value)
    // Offset: 0x17279D8
    void set_position(UnityEngine::Vector3 value);
    // public UnityEngine.Quaternion get_rotation()
    // Offset: 0x17279E4
    UnityEngine::Quaternion get_rotation();
    // public System.Void set_rotation(UnityEngine.Quaternion value)
    // Offset: 0x1727A6C
    void set_rotation(UnityEngine::Quaternion value);
    // public UnityEngine.Vector3 get_eulerAngles()
    // Offset: 0x1727AAC
    UnityEngine::Vector3 get_eulerAngles();
    // public System.Void set_eulerAngles(UnityEngine.Vector3 value)
    // Offset: 0x1727AB8
    void set_eulerAngles(UnityEngine::Vector3 value);
    // public System.Boolean get_applyOffsets()
    // Offset: 0x1727AC4
    bool get_applyOffsets();
    // public System.Void set_applyOffsets(System.Boolean value)
    // Offset: 0x1727ACC
    void set_applyOffsets(bool value);
    // public UnityEngine.Timeline.TrackOffset get_trackOffset()
    // Offset: 0x1727AD0
    UnityEngine::Timeline::TrackOffset get_trackOffset();
    // public System.Void set_trackOffset(UnityEngine.Timeline.TrackOffset value)
    // Offset: 0x1727AD8
    void set_trackOffset(UnityEngine::Timeline::TrackOffset value);
    // public UnityEngine.Timeline.MatchTargetFields get_matchTargetFields()
    // Offset: 0x1727AE0
    UnityEngine::Timeline::MatchTargetFields get_matchTargetFields();
    // public System.Void set_matchTargetFields(UnityEngine.Timeline.MatchTargetFields value)
    // Offset: 0x1727AE8
    void set_matchTargetFields(UnityEngine::Timeline::MatchTargetFields value);
    // public UnityEngine.AnimationClip get_infiniteClip()
    // Offset: 0x1727B68
    UnityEngine::AnimationClip* get_infiniteClip();
    // System.Void set_infiniteClip(UnityEngine.AnimationClip value)
    // Offset: 0x1727B70
    void set_infiniteClip(UnityEngine::AnimationClip* value);
    // System.Boolean get_infiniteClipRemoveOffset()
    // Offset: 0x1727B80
    bool get_infiniteClipRemoveOffset();
    // System.Void set_infiniteClipRemoveOffset(System.Boolean value)
    // Offset: 0x1727B88
    void set_infiniteClipRemoveOffset(bool value);
    // public UnityEngine.AvatarMask get_avatarMask()
    // Offset: 0x1727B94
    UnityEngine::AvatarMask* get_avatarMask();
    // public System.Void set_avatarMask(UnityEngine.AvatarMask value)
    // Offset: 0x1727B9C
    void set_avatarMask(UnityEngine::AvatarMask* value);
    // public System.Boolean get_applyAvatarMask()
    // Offset: 0x1727BA4
    bool get_applyAvatarMask();
    // public System.Void set_applyAvatarMask(System.Boolean value)
    // Offset: 0x1727BAC
    void set_applyAvatarMask(bool value);
    // public System.Boolean get_inClipMode()
    // Offset: 0x1727D3C
    bool get_inClipMode();
    // public UnityEngine.Vector3 get_infiniteClipOffsetPosition()
    // Offset: 0x1727D84
    UnityEngine::Vector3 get_infiniteClipOffsetPosition();
    // public System.Void set_infiniteClipOffsetPosition(UnityEngine.Vector3 value)
    // Offset: 0x1727D90
    void set_infiniteClipOffsetPosition(UnityEngine::Vector3 value);
    // public UnityEngine.Quaternion get_infiniteClipOffsetRotation()
    // Offset: 0x1727D9C
    UnityEngine::Quaternion get_infiniteClipOffsetRotation();
    // public System.Void set_infiniteClipOffsetRotation(UnityEngine.Quaternion value)
    // Offset: 0x1727E24
    void set_infiniteClipOffsetRotation(UnityEngine::Quaternion value);
    // public UnityEngine.Vector3 get_infiniteClipOffsetEulerAngles()
    // Offset: 0x1727E64
    UnityEngine::Vector3 get_infiniteClipOffsetEulerAngles();
    // public System.Void set_infiniteClipOffsetEulerAngles(UnityEngine.Vector3 value)
    // Offset: 0x1727E70
    void set_infiniteClipOffsetEulerAngles(UnityEngine::Vector3 value);
    // System.Boolean get_infiniteClipApplyFootIK()
    // Offset: 0x1727E7C
    bool get_infiniteClipApplyFootIK();
    // System.Void set_infiniteClipApplyFootIK(System.Boolean value)
    // Offset: 0x1727E84
    void set_infiniteClipApplyFootIK(bool value);
    // System.Double get_infiniteClipTimeOffset()
    // Offset: 0x1727E90
    double get_infiniteClipTimeOffset();
    // System.Void set_infiniteClipTimeOffset(System.Double value)
    // Offset: 0x1727E98
    void set_infiniteClipTimeOffset(double value);
    // public UnityEngine.Timeline.TimelineClip/ClipExtrapolation get_infiniteClipPreExtrapolation()
    // Offset: 0x1727EA0
    UnityEngine::Timeline::TimelineClip::ClipExtrapolation get_infiniteClipPreExtrapolation();
    // public System.Void set_infiniteClipPreExtrapolation(UnityEngine.Timeline.TimelineClip/ClipExtrapolation value)
    // Offset: 0x1727EA8
    void set_infiniteClipPreExtrapolation(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value);
    // public UnityEngine.Timeline.TimelineClip/ClipExtrapolation get_infiniteClipPostExtrapolation()
    // Offset: 0x1727EB0
    UnityEngine::Timeline::TimelineClip::ClipExtrapolation get_infiniteClipPostExtrapolation();
    // public System.Void set_infiniteClipPostExtrapolation(UnityEngine.Timeline.TimelineClip/ClipExtrapolation value)
    // Offset: 0x1727EB8
    void set_infiniteClipPostExtrapolation(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value);
    // UnityEngine.Timeline.AnimationPlayableAsset/LoopMode get_infiniteClipLoop()
    // Offset: 0x1727EC0
    UnityEngine::Timeline::AnimationPlayableAsset::LoopMode get_infiniteClipLoop();
    // System.Void set_infiniteClipLoop(UnityEngine.Timeline.AnimationPlayableAsset/LoopMode value)
    // Offset: 0x1727EC8
    void set_infiniteClipLoop(UnityEngine::Timeline::AnimationPlayableAsset::LoopMode value);
    // private System.Void ResetOffsets()
    // Offset: 0x1727ED0
    void ResetOffsets();
    // public UnityEngine.Timeline.TimelineClip CreateClip(UnityEngine.AnimationClip clip)
    // Offset: 0x1727F54
    UnityEngine::Timeline::TimelineClip* CreateClip(UnityEngine::AnimationClip* clip);
    // public System.Void CreateInfiniteClip(System.String infiniteClipName)
    // Offset: 0x1728258
    void CreateInfiniteClip(::Il2CppString* infiniteClipName);
    // public UnityEngine.Timeline.TimelineClip CreateRecordableClip(System.String animClipName)
    // Offset: 0x1728378
    UnityEngine::Timeline::TimelineClip* CreateRecordableClip(::Il2CppString* animClipName);
    // System.Void UpdateClipOffsets()
    // Offset: 0x1727F50
    void UpdateClipOffsets();
    // private UnityEngine.Playables.Playable CompileTrackPlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.Timeline.AnimationTrack track, UnityEngine.GameObject go, UnityEngine.Timeline.IntervalTree`1<UnityEngine.Timeline.RuntimeElement> tree, UnityEngine.Timeline.AppliedOffsetMode mode)
    // Offset: 0x17285C8
    UnityEngine::Playables::Playable CompileTrackPlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::Timeline::AnimationTrack* track, UnityEngine::GameObject* go, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>* tree, UnityEngine::Timeline::AppliedOffsetMode mode);
    // private System.Int32 GetDefaultBlendCount()
    // Offset: 0x1729D50
    int GetDefaultBlendCount();
    // private System.Void AttachDefaultBlend(UnityEngine.Playables.PlayableGraph graph, UnityEngine.Animations.AnimationLayerMixerPlayable mixer, System.Boolean requireOffset)
    // Offset: 0x172A240
    void AttachDefaultBlend(UnityEngine::Playables::PlayableGraph graph, UnityEngine::Animations::AnimationLayerMixerPlayable mixer, bool requireOffset);
    // private UnityEngine.Playables.Playable AttachOffsetPlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.Playables.Playable playable, UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    // Offset: 0x172A25C
    UnityEngine::Playables::Playable AttachOffsetPlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::Playables::Playable playable, UnityEngine::Vector3 pos, UnityEngine::Quaternion rot);
    // private System.Boolean RequiresMotionXPlayable(UnityEngine.Timeline.AppliedOffsetMode mode, UnityEngine.GameObject gameObject)
    // Offset: 0x172A124
    bool RequiresMotionXPlayable(UnityEngine::Timeline::AppliedOffsetMode mode, UnityEngine::GameObject* gameObject);
    // static private System.Boolean UsesAbsoluteMotion(UnityEngine.Timeline.AppliedOffsetMode mode)
    // Offset: 0x172A244
    static bool UsesAbsoluteMotion(UnityEngine::Timeline::AppliedOffsetMode mode);
    // private System.Boolean HasController(UnityEngine.GameObject gameObject)
    // Offset: 0x172A5A0
    bool HasController(UnityEngine::GameObject* gameObject);
    // UnityEngine.Animator GetBinding(UnityEngine.Playables.PlayableDirector director)
    // Offset: 0x172A3AC
    UnityEngine::Animator* GetBinding(UnityEngine::Playables::PlayableDirector* director);
    // static private UnityEngine.Animations.AnimationLayerMixerPlayable CreateGroupMixer(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go, System.Int32 inputCount)
    // Offset: 0x1729D58
    static UnityEngine::Animations::AnimationLayerMixerPlayable CreateGroupMixer(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go, int inputCount);
    // private UnityEngine.Playables.Playable CreateInfiniteTrackPlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go, UnityEngine.Timeline.IntervalTree`1<UnityEngine.Timeline.RuntimeElement> tree, UnityEngine.Timeline.AppliedOffsetMode mode)
    // Offset: 0x1729DD8
    UnityEngine::Playables::Playable CreateInfiniteTrackPlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>* tree, UnityEngine::Timeline::AppliedOffsetMode mode);
    // private UnityEngine.Playables.Playable ApplyTrackOffset(UnityEngine.Playables.PlayableGraph graph, UnityEngine.Playables.Playable root, UnityEngine.GameObject go, UnityEngine.Timeline.AppliedOffsetMode mode)
    // Offset: 0x1728DCC
    UnityEngine::Playables::Playable ApplyTrackOffset(UnityEngine::Playables::PlayableGraph graph, UnityEngine::Playables::Playable root, UnityEngine::GameObject* go, UnityEngine::Timeline::AppliedOffsetMode mode);
    // private System.Void AssignAnimationClip(UnityEngine.Timeline.TimelineClip clip, UnityEngine.AnimationClip animClip)
    // Offset: 0x1728000
    void AssignAnimationClip(UnityEngine::Timeline::TimelineClip* clip, UnityEngine::AnimationClip* animClip);
    // private System.Void GetAnimationClips(System.Collections.Generic.List`1<UnityEngine.AnimationClip> animClips)
    // Offset: 0x172A8C0
    void GetAnimationClips(System::Collections::Generic::List_1<UnityEngine::AnimationClip*>* animClips);
    // private UnityEngine.Timeline.AppliedOffsetMode GetOffsetMode(UnityEngine.GameObject go, System.Boolean animatesRootTransform)
    // Offset: 0x1729CDC
    UnityEngine::Timeline::AppliedOffsetMode GetOffsetMode(UnityEngine::GameObject* go, bool animatesRootTransform);
    // private System.Boolean IsRootTransformDisabledByMask(UnityEngine.GameObject gameObject, UnityEngine.Transform genericRootNode)
    // Offset: 0x1729A54
    bool IsRootTransformDisabledByMask(UnityEngine::GameObject* gameObject, UnityEngine::Transform* genericRootNode);
    // private UnityEngine.Transform GetGenericRootNode(UnityEngine.GameObject gameObject)
    // Offset: 0x172985C
    UnityEngine::Transform* GetGenericRootNode(UnityEngine::GameObject* gameObject);
    // System.Boolean AnimatesRootTransform()
    // Offset: 0x1728A24
    bool AnimatesRootTransform();
    // static private UnityEngine.Transform FindInHierarchyBreadthFirst(UnityEngine.Transform t, System.String name)
    // Offset: 0x172AD40
    static UnityEngine::Transform* FindInHierarchyBreadthFirst(UnityEngine::Transform* t, ::Il2CppString* name);
    // public UnityEngine.Vector3 get_openClipOffsetPosition()
    // Offset: 0x172AF14
    UnityEngine::Vector3 get_openClipOffsetPosition();
    // public System.Void set_openClipOffsetPosition(UnityEngine.Vector3 value)
    // Offset: 0x172AF20
    void set_openClipOffsetPosition(UnityEngine::Vector3 value);
    // public UnityEngine.Quaternion get_openClipOffsetRotation()
    // Offset: 0x172AF2C
    UnityEngine::Quaternion get_openClipOffsetRotation();
    // public System.Void set_openClipOffsetRotation(UnityEngine.Quaternion value)
    // Offset: 0x172AF30
    void set_openClipOffsetRotation(UnityEngine::Quaternion value);
    // public UnityEngine.Vector3 get_openClipOffsetEulerAngles()
    // Offset: 0x172AF70
    UnityEngine::Vector3 get_openClipOffsetEulerAngles();
    // public System.Void set_openClipOffsetEulerAngles(UnityEngine.Vector3 value)
    // Offset: 0x172AF7C
    void set_openClipOffsetEulerAngles(UnityEngine::Vector3 value);
    // public UnityEngine.Timeline.TimelineClip/ClipExtrapolation get_openClipPreExtrapolation()
    // Offset: 0x172AF88
    UnityEngine::Timeline::TimelineClip::ClipExtrapolation get_openClipPreExtrapolation();
    // public System.Void set_openClipPreExtrapolation(UnityEngine.Timeline.TimelineClip/ClipExtrapolation value)
    // Offset: 0x172AF90
    void set_openClipPreExtrapolation(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value);
    // public UnityEngine.Timeline.TimelineClip/ClipExtrapolation get_openClipPostExtrapolation()
    // Offset: 0x172AF98
    UnityEngine::Timeline::TimelineClip::ClipExtrapolation get_openClipPostExtrapolation();
    // public System.Void set_openClipPostExtrapolation(UnityEngine.Timeline.TimelineClip/ClipExtrapolation value)
    // Offset: 0x172AFA0
    void set_openClipPostExtrapolation(UnityEngine::Timeline::TimelineClip::ClipExtrapolation value);
    // override System.Boolean CanCompileClips()
    // Offset: 0x1727BB8
    // Implemented from: UnityEngine.Timeline.TrackAsset
    // Base method: System.Boolean TrackAsset::CanCompileClips()
    bool CanCompileClips();
    // public override System.Collections.Generic.IEnumerable`1<UnityEngine.Playables.PlayableBinding> get_outputs()
    // Offset: 0x1727C78
    // Implemented from: UnityEngine.Timeline.TrackAsset
    // Base method: System.Collections.Generic.IEnumerable`1<UnityEngine.Playables.PlayableBinding> TrackAsset::get_outputs()
    System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>* get_outputs();
    // protected override System.Void OnCreateClip(UnityEngine.Timeline.TimelineClip clip)
    // Offset: 0x17284C4
    // Implemented from: UnityEngine.Timeline.TrackAsset
    // Base method: System.Void TrackAsset::OnCreateClip(UnityEngine.Timeline.TimelineClip clip)
    void OnCreateClip(UnityEngine::Timeline::TimelineClip* clip);
    // protected internal override System.Int32 CalculateItemsHash()
    // Offset: 0x1728514
    // Implemented from: UnityEngine.Timeline.TrackAsset
    // Base method: System.Int32 TrackAsset::CalculateItemsHash()
    int CalculateItemsHash();
    // private UnityEngine.Playables.Playable UnityEngine.Timeline.ILayerable.CreateLayerMixer(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go, System.Int32 inputCount)
    // Offset: 0x1728F64
    // Implemented from: UnityEngine.Timeline.ILayerable
    // Base method: UnityEngine.Playables.Playable ILayerable::CreateLayerMixer(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go, System.Int32 inputCount)
    UnityEngine::Playables::Playable UnityEngine_Timeline_ILayerable_CreateLayerMixer(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go, int inputCount);
    // override UnityEngine.Playables.Playable OnCreateClipPlayableGraph(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go, UnityEngine.Timeline.IntervalTree`1<UnityEngine.Timeline.RuntimeElement> tree)
    // Offset: 0x1728FC4
    // Implemented from: UnityEngine.Timeline.TrackAsset
    // Base method: UnityEngine.Playables.Playable TrackAsset::OnCreateClipPlayableGraph(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go, UnityEngine.Timeline.IntervalTree`1<UnityEngine.Timeline.RuntimeElement> tree)
    UnityEngine::Playables::Playable OnCreateClipPlayableGraph(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go, UnityEngine::Timeline::IntervalTree_1<UnityEngine::Timeline::RuntimeElement*>* tree);
    // override System.Void GetEvaluationTime(out System.Double outStart, out System.Double outDuration)
    // Offset: 0x172A70C
    // Implemented from: UnityEngine.Timeline.TrackAsset
    // Base method: System.Void TrackAsset::GetEvaluationTime(out System.Double outStart, out System.Double outDuration)
    void GetEvaluationTime(double& outStart, double& outDuration);
    // override System.Void GetSequenceTime(out System.Double outStart, out System.Double outDuration)
    // Offset: 0x172A7BC
    // Implemented from: UnityEngine.Timeline.TrackAsset
    // Base method: System.Void TrackAsset::GetSequenceTime(out System.Double outStart, out System.Double outDuration)
    void GetSequenceTime(double& outStart, double& outDuration);
    // public override System.Void GatherProperties(UnityEngine.Playables.PlayableDirector director, UnityEngine.Timeline.IPropertyCollector driver)
    // Offset: 0x172A8BC
    // Implemented from: UnityEngine.Timeline.TrackAsset
    // Base method: System.Void TrackAsset::GatherProperties(UnityEngine.Playables.PlayableDirector director, UnityEngine.Timeline.IPropertyCollector driver)
    void GatherProperties(UnityEngine::Playables::PlayableDirector* director, UnityEngine::Timeline::IPropertyCollector* driver);
    // override System.Void OnUpgradeFromVersion(System.Int32 oldVersion)
    // Offset: 0x172AFA8
    // Implemented from: UnityEngine.Timeline.TrackAsset
    // Base method: System.Void TrackAsset::OnUpgradeFromVersion(System.Int32 oldVersion)
    void OnUpgradeFromVersion(int oldVersion);
    // public System.Void .ctor()
    // Offset: 0x172B120
    // Implemented from: UnityEngine.Timeline.TrackAsset
    // Base method: System.Void TrackAsset::.ctor()
    // Base method: System.Void PlayableAsset::.ctor()
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AnimationTrack* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::AnimationTrack::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AnimationTrack*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x172B27C
    // Implemented from: UnityEngine.Timeline.TrackAsset
    // Base method: System.Void TrackAsset::.cctor()
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // UnityEngine.Timeline.AnimationTrack
  // WARNING Not writing size check since size may be invalid!
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Timeline::AnimationTrack*, "UnityEngine.Timeline", "AnimationTrack");
