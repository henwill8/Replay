// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Timeline.IInterval
#include "UnityEngine/Timeline/IInterval.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: FrameData
  struct FrameData;
}
// Completed forward declares
// Type namespace: UnityEngine.Timeline
namespace UnityEngine::Timeline {
  // Size: 0x14
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Timeline.RuntimeElement
  // [] Offset: FFFFFFFF
  class RuntimeElement : public ::Il2CppObject/*, public UnityEngine::Timeline::IInterval*/ {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xCFFE9C
    // private System.Int32 <intervalBit>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int intervalBit;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: RuntimeElement
    RuntimeElement(int intervalBit_ = {}) noexcept : intervalBit{intervalBit_} {}
    // Creating interface conversion operator: operator UnityEngine::Timeline::IInterval
    operator UnityEngine::Timeline::IInterval() noexcept {
      return *reinterpret_cast<UnityEngine::Timeline::IInterval*>(this);
    }
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return intervalBit;
    }
    // public System.Int32 get_intervalBit()
    // Offset: 0x17359F4
    int get_intervalBit();
    // public System.Void set_intervalBit(System.Int32 value)
    // Offset: 0x17359FC
    void set_intervalBit(int value);
    // public System.Void set_enable(System.Boolean value)
    // Offset: 0xFFFFFFFF
    void set_enable(bool value);
    // public System.Void EvaluateAt(System.Double localTime, UnityEngine.Playables.FrameData frameData)
    // Offset: 0xFFFFFFFF
    void EvaluateAt(double localTime, UnityEngine::Playables::FrameData frameData);
    // public System.Void Reset()
    // Offset: 0x1735A04
    void Reset();
    // public System.Int64 get_intervalStart()
    // Offset: 0xFFFFFFFF
    // Implemented from: UnityEngine.Timeline.IInterval
    // Base method: System.Int64 IInterval::get_intervalStart()
    int64_t get_intervalStart();
    // public System.Int64 get_intervalEnd()
    // Offset: 0xFFFFFFFF
    // Implemented from: UnityEngine.Timeline.IInterval
    // Base method: System.Int64 IInterval::get_intervalEnd()
    int64_t get_intervalEnd();
    // protected System.Void .ctor()
    // Offset: 0x1732924
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RuntimeElement* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::RuntimeElement::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RuntimeElement*, creationType>()));
    }
  }; // UnityEngine.Timeline.RuntimeElement
  #pragma pack(pop)
  static check_size<sizeof(RuntimeElement), 16 + sizeof(int)> __UnityEngine_Timeline_RuntimeElementSizeCheck;
  static_assert(sizeof(RuntimeElement) == 0x14);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Timeline::RuntimeElement*, "UnityEngine.Timeline", "RuntimeElement");
