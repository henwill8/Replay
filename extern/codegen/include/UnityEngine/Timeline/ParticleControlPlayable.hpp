// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Playables.PlayableBehaviour
#include "UnityEngine/Playables/PlayableBehaviour.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: ParticleSystem
  class ParticleSystem;
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: ScriptPlayable`1<T>
  template<typename T>
  struct ScriptPlayable_1;
  // Forward declaring type: PlayableGraph
  struct PlayableGraph;
  // Forward declaring type: Playable
  struct Playable;
  // Forward declaring type: FrameData
  struct FrameData;
}
// Completed forward declares
// Type namespace: UnityEngine.Timeline
namespace UnityEngine::Timeline {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Timeline.ParticleControlPlayable
  // [] Offset: FFFFFFFF
  class ParticleControlPlayable : public UnityEngine::Playables::PlayableBehaviour {
    public:
    // private System.Single m_LastTime
    // Size: 0x4
    // Offset: 0x10
    float m_LastTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.UInt32 m_RandomSeed
    // Size: 0x4
    // Offset: 0x14
    uint m_RandomSeed;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Single m_SystemTime
    // Size: 0x4
    // Offset: 0x18
    float m_SystemTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_SystemTime and: particleSystem
    char __padding2[0x4] = {};
    // [CompilerGeneratedAttribute] Offset: 0xCFFFB4
    // private UnityEngine.ParticleSystem <particleSystem>k__BackingField
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::ParticleSystem* particleSystem;
    // Field size check
    static_assert(sizeof(UnityEngine::ParticleSystem*) == 0x8);
    // Creating value type constructor for type: ParticleControlPlayable
    ParticleControlPlayable(float m_LastTime_ = {}, uint m_RandomSeed_ = {}, float m_SystemTime_ = {}, UnityEngine::ParticleSystem* particleSystem_ = {}) noexcept : m_LastTime{m_LastTime_}, m_RandomSeed{m_RandomSeed_}, m_SystemTime{m_SystemTime_}, particleSystem{particleSystem_} {}
    // static field const value: static private System.Single kUnsetTime
    static constexpr const float kUnsetTime = -1;
    // Get static field: static private System.Single kUnsetTime
    static float _get_kUnsetTime();
    // Set static field: static private System.Single kUnsetTime
    static void _set_kUnsetTime(float value);
    // static public UnityEngine.Playables.ScriptPlayable`1<UnityEngine.Timeline.ParticleControlPlayable> Create(UnityEngine.Playables.PlayableGraph graph, UnityEngine.ParticleSystem component, System.UInt32 randomSeed)
    // Offset: 0x172EB98
    static UnityEngine::Playables::ScriptPlayable_1<UnityEngine::Timeline::ParticleControlPlayable*> Create(UnityEngine::Playables::PlayableGraph graph, UnityEngine::ParticleSystem* component, uint randomSeed);
    // public UnityEngine.ParticleSystem get_particleSystem()
    // Offset: 0x1734630
    UnityEngine::ParticleSystem* get_particleSystem();
    // private System.Void set_particleSystem(UnityEngine.ParticleSystem value)
    // Offset: 0x1734638
    void set_particleSystem(UnityEngine::ParticleSystem* value);
    // public System.Void Initialize(UnityEngine.ParticleSystem ps, System.UInt32 randomSeed)
    // Offset: 0x1734594
    void Initialize(UnityEngine::ParticleSystem* ps, uint randomSeed);
    // private System.Void SetRandomSeed()
    // Offset: 0x1734640
    void SetRandomSeed();
    // public override System.Void PrepareFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData data)
    // Offset: 0x1734748
    // Implemented from: UnityEngine.Playables.PlayableBehaviour
    // Base method: System.Void PlayableBehaviour::PrepareFrame(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData data)
    void PrepareFrame(UnityEngine::Playables::Playable playable, UnityEngine::Playables::FrameData data);
    // public override System.Void OnBehaviourPlay(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info)
    // Offset: 0x1734B30
    // Implemented from: UnityEngine.Playables.PlayableBehaviour
    // Base method: System.Void PlayableBehaviour::OnBehaviourPlay(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info)
    void OnBehaviourPlay(UnityEngine::Playables::Playable playable, UnityEngine::Playables::FrameData info);
    // public override System.Void OnBehaviourPause(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info)
    // Offset: 0x1734B3C
    // Implemented from: UnityEngine.Playables.PlayableBehaviour
    // Base method: System.Void PlayableBehaviour::OnBehaviourPause(UnityEngine.Playables.Playable playable, UnityEngine.Playables.FrameData info)
    void OnBehaviourPause(UnityEngine::Playables::Playable playable, UnityEngine::Playables::FrameData info);
    // public System.Void .ctor()
    // Offset: 0x1734B48
    // Implemented from: UnityEngine.Playables.PlayableBehaviour
    // Base method: System.Void PlayableBehaviour::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ParticleControlPlayable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::ParticleControlPlayable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ParticleControlPlayable*, creationType>()));
    }
  }; // UnityEngine.Timeline.ParticleControlPlayable
  #pragma pack(pop)
  static check_size<sizeof(ParticleControlPlayable), 32 + sizeof(UnityEngine::ParticleSystem*)> __UnityEngine_Timeline_ParticleControlPlayableSizeCheck;
  static_assert(sizeof(ParticleControlPlayable) == 0x28);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Timeline::ParticleControlPlayable*, "UnityEngine.Timeline", "ParticleControlPlayable");
