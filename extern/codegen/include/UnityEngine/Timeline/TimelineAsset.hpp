// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Playables.PlayableAsset
#include "UnityEngine/Playables/PlayableAsset.hpp"
// Including type: UnityEngine.ISerializationCallbackReceiver
#include "UnityEngine/ISerializationCallbackReceiver.hpp"
// Including type: UnityEngine.Timeline.ITimelineClipAsset
#include "UnityEngine/Timeline/ITimelineClipAsset.hpp"
// Including type: UnityEngine.Timeline.IPropertyPreview
#include "UnityEngine/Timeline/IPropertyPreview.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::Timeline
namespace UnityEngine::Timeline {
  // Forward declaring type: MarkerTrack
  class MarkerTrack;
  // Forward declaring type: TrackAsset
  class TrackAsset;
  // Skipping declaration: DurationMode because it is already included!
  // Forward declaring type: TimelineClip
  class TimelineClip;
  // Forward declaring type: ClipCaps
  struct ClipCaps;
  // Forward declaring type: IPropertyCollector
  class IPropertyCollector;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: ScriptableObject because it is already included!
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: UnityEngine::Playables
namespace UnityEngine::Playables {
  // Forward declaring type: Playable
  struct Playable;
  // Forward declaring type: PlayableGraph
  struct PlayableGraph;
  // Forward declaring type: PlayableDirector
  class PlayableDirector;
}
// Completed forward declares
// Type namespace: UnityEngine.Timeline
namespace UnityEngine::Timeline {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngine.Timeline.TimelineAsset
  // [] Offset: FFFFFFFF
  // [ExcludeFromPresetAttribute] Offset: CFEB00
  class TimelineAsset : public UnityEngine::Playables::PlayableAsset/*, public UnityEngine::ISerializationCallbackReceiver, public UnityEngine::Timeline::ITimelineClipAsset, public UnityEngine::Timeline::IPropertyPreview*/ {
    public:
    // Nested type: UnityEngine::Timeline::TimelineAsset::Versions
    struct Versions;
    // Nested type: UnityEngine::Timeline::TimelineAsset::TimelineAssetUpgrade
    class TimelineAssetUpgrade;
    // Nested type: UnityEngine::Timeline::TimelineAsset::MediaType
    struct MediaType;
    // Nested type: UnityEngine::Timeline::TimelineAsset::DurationMode
    struct DurationMode;
    // Nested type: UnityEngine::Timeline::TimelineAsset::EditorSettings
    class EditorSettings;
    // Nested type: UnityEngine::Timeline::TimelineAsset::$get_outputs$d__27
    class $get_outputs$d__27;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: UnityEngine.Timeline.TimelineAsset/DurationMode
    // [] Offset: FFFFFFFF
    struct DurationMode/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: DurationMode
      constexpr DurationMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public UnityEngine.Timeline.TimelineAsset/DurationMode BasedOnClips
      static constexpr const int BasedOnClips = 0;
      // Get static field: static public UnityEngine.Timeline.TimelineAsset/DurationMode BasedOnClips
      static UnityEngine::Timeline::TimelineAsset::DurationMode _get_BasedOnClips();
      // Set static field: static public UnityEngine.Timeline.TimelineAsset/DurationMode BasedOnClips
      static void _set_BasedOnClips(UnityEngine::Timeline::TimelineAsset::DurationMode value);
      // static field const value: static public UnityEngine.Timeline.TimelineAsset/DurationMode FixedLength
      static constexpr const int FixedLength = 1;
      // Get static field: static public UnityEngine.Timeline.TimelineAsset/DurationMode FixedLength
      static UnityEngine::Timeline::TimelineAsset::DurationMode _get_FixedLength();
      // Set static field: static public UnityEngine.Timeline.TimelineAsset/DurationMode FixedLength
      static void _set_FixedLength(UnityEngine::Timeline::TimelineAsset::DurationMode value);
    }; // UnityEngine.Timeline.TimelineAsset/DurationMode
    #pragma pack(pop)
    static check_size<sizeof(TimelineAsset::DurationMode), 0 + sizeof(int)> __UnityEngine_Timeline_TimelineAsset_DurationModeSizeCheck;
    static_assert(sizeof(TimelineAsset::DurationMode) == 0x4);
    // [HideInInspector] Offset: 0xCFF910
    // private System.Int32 m_Version
    // Size: 0x4
    // Offset: 0x18
    int m_Version;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_Version and: m_Tracks
    char __padding0[0x4] = {};
    // [HideInInspector] Offset: 0xCFF948
    // private System.Collections.Generic.List`1<UnityEngine.ScriptableObject> m_Tracks
    // Size: 0x8
    // Offset: 0x20
    System::Collections::Generic::List_1<UnityEngine::ScriptableObject*>* m_Tracks;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<UnityEngine::ScriptableObject*>*) == 0x8);
    // [HideInInspector] Offset: 0xCFF980
    // private System.Double m_FixedDuration
    // Size: 0x8
    // Offset: 0x28
    double m_FixedDuration;
    // Field size check
    static_assert(sizeof(double) == 0x8);
    // [HideInInspector] Offset: 0xCFF9B8
    // private UnityEngine.Timeline.TrackAsset[] m_CacheOutputTracks
    // Size: 0x8
    // Offset: 0x30
    ::Array<UnityEngine::Timeline::TrackAsset*>* m_CacheOutputTracks;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Timeline::TrackAsset*>*) == 0x8);
    // [HideInInspector] Offset: 0xCFF9C8
    // private System.Collections.Generic.List`1<UnityEngine.Timeline.TrackAsset> m_CacheRootTracks
    // Size: 0x8
    // Offset: 0x38
    System::Collections::Generic::List_1<UnityEngine::Timeline::TrackAsset*>* m_CacheRootTracks;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<UnityEngine::Timeline::TrackAsset*>*) == 0x8);
    // [HideInInspector] Offset: 0xCFF9D8
    // private System.Collections.Generic.List`1<UnityEngine.Timeline.TrackAsset> m_CacheFlattenedTracks
    // Size: 0x8
    // Offset: 0x40
    System::Collections::Generic::List_1<UnityEngine::Timeline::TrackAsset*>* m_CacheFlattenedTracks;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<UnityEngine::Timeline::TrackAsset*>*) == 0x8);
    // [HideInInspector] Offset: 0xCFF9E8
    // private UnityEngine.Timeline.TimelineAsset/EditorSettings m_EditorSettings
    // Size: 0x8
    // Offset: 0x48
    UnityEngine::Timeline::TimelineAsset::EditorSettings* m_EditorSettings;
    // Field size check
    static_assert(sizeof(UnityEngine::Timeline::TimelineAsset::EditorSettings*) == 0x8);
    // private UnityEngine.Timeline.TimelineAsset/DurationMode m_DurationMode
    // Size: 0x4
    // Offset: 0x50
    UnityEngine::Timeline::TimelineAsset::DurationMode m_DurationMode;
    // Field size check
    static_assert(sizeof(UnityEngine::Timeline::TimelineAsset::DurationMode) == 0x4);
    // Padding between fields: m_DurationMode and: m_MarkerTrack
    char __padding7[0x4] = {};
    // [HideInInspector] Offset: 0xCFFA30
    // private UnityEngine.Timeline.MarkerTrack m_MarkerTrack
    // Size: 0x8
    // Offset: 0x58
    UnityEngine::Timeline::MarkerTrack* m_MarkerTrack;
    // Field size check
    static_assert(sizeof(UnityEngine::Timeline::MarkerTrack*) == 0x8);
    // Creating value type constructor for type: TimelineAsset
    TimelineAsset(int m_Version_ = {}, System::Collections::Generic::List_1<UnityEngine::ScriptableObject*>* m_Tracks_ = {}, double m_FixedDuration_ = {}, ::Array<UnityEngine::Timeline::TrackAsset*>* m_CacheOutputTracks_ = {}, System::Collections::Generic::List_1<UnityEngine::Timeline::TrackAsset*>* m_CacheRootTracks_ = {}, System::Collections::Generic::List_1<UnityEngine::Timeline::TrackAsset*>* m_CacheFlattenedTracks_ = {}, UnityEngine::Timeline::TimelineAsset::EditorSettings* m_EditorSettings_ = {}, UnityEngine::Timeline::TimelineAsset::DurationMode m_DurationMode_ = {}, UnityEngine::Timeline::MarkerTrack* m_MarkerTrack_ = {}) noexcept : m_Version{m_Version_}, m_Tracks{m_Tracks_}, m_FixedDuration{m_FixedDuration_}, m_CacheOutputTracks{m_CacheOutputTracks_}, m_CacheRootTracks{m_CacheRootTracks_}, m_CacheFlattenedTracks{m_CacheFlattenedTracks_}, m_EditorSettings{m_EditorSettings_}, m_DurationMode{m_DurationMode_}, m_MarkerTrack{m_MarkerTrack_} {}
    // Creating interface conversion operator: operator UnityEngine::ISerializationCallbackReceiver
    operator UnityEngine::ISerializationCallbackReceiver() noexcept {
      return *reinterpret_cast<UnityEngine::ISerializationCallbackReceiver*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::Timeline::ITimelineClipAsset
    operator UnityEngine::Timeline::ITimelineClipAsset() noexcept {
      return *reinterpret_cast<UnityEngine::Timeline::ITimelineClipAsset*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::Timeline::IPropertyPreview
    operator UnityEngine::Timeline::IPropertyPreview() noexcept {
      return *reinterpret_cast<UnityEngine::Timeline::IPropertyPreview*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Int32 k_LatestVersion
    static constexpr const int k_LatestVersion = 0;
    // Get static field: static private System.Int32 k_LatestVersion
    static int _get_k_LatestVersion();
    // Set static field: static private System.Int32 k_LatestVersion
    static void _set_k_LatestVersion(int value);
    // private System.Void UpgradeToLatestVersion()
    // Offset: 0x17393BC
    void UpgradeToLatestVersion();
    // public UnityEngine.Timeline.TimelineAsset/EditorSettings get_editorSettings()
    // Offset: 0x17393C0
    UnityEngine::Timeline::TimelineAsset::EditorSettings* get_editorSettings();
    // public System.Double get_fixedDuration()
    // Offset: 0x1739750
    double get_fixedDuration();
    // public System.Void set_fixedDuration(System.Double value)
    // Offset: 0x1739820
    void set_fixedDuration(double value);
    // public UnityEngine.Timeline.TimelineAsset/DurationMode get_durationMode()
    // Offset: 0x17398A0
    UnityEngine::Timeline::TimelineAsset::DurationMode get_durationMode();
    // public System.Void set_durationMode(UnityEngine.Timeline.TimelineAsset/DurationMode value)
    // Offset: 0x17398A8
    void set_durationMode(UnityEngine::Timeline::TimelineAsset::DurationMode value);
    // public System.Int32 get_outputTrackCount()
    // Offset: 0x1739C90
    int get_outputTrackCount();
    // public System.Int32 get_rootTrackCount()
    // Offset: 0x173A0AC
    int get_rootTrackCount();
    // private System.Void OnValidate()
    // Offset: 0x173A36C
    void OnValidate();
    // static System.Single GetValidFramerate(System.Single framerate)
    // Offset: 0x173A3A0
    static float GetValidFramerate(float framerate);
    // public UnityEngine.Timeline.TrackAsset GetRootTrack(System.Int32 index)
    // Offset: 0x173A450
    UnityEngine::Timeline::TrackAsset* GetRootTrack(int index);
    // public System.Collections.Generic.IEnumerable`1<UnityEngine.Timeline.TrackAsset> GetRootTracks()
    // Offset: 0x1739C6C
    System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::TrackAsset*>* GetRootTracks();
    // public UnityEngine.Timeline.TrackAsset GetOutputTrack(System.Int32 index)
    // Offset: 0x173A4D0
    UnityEngine::Timeline::TrackAsset* GetOutputTrack(int index);
    // public System.Collections.Generic.IEnumerable`1<UnityEngine.Timeline.TrackAsset> GetOutputTracks()
    // Offset: 0x173A520
    System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::TrackAsset*>* GetOutputTracks();
    // private System.Void UpdateRootTrackCache()
    // Offset: 0x173A104
    void UpdateRootTrackCache();
    // private System.Void UpdateOutputTrackCache()
    // Offset: 0x1739CC0
    void UpdateOutputTrackCache();
    // System.Collections.Generic.IEnumerable`1<UnityEngine.Timeline.TrackAsset> get_flattenedTracks()
    // Offset: 0x173A544
    System::Collections::Generic::IEnumerable_1<UnityEngine::Timeline::TrackAsset*>* get_flattenedTracks();
    // public UnityEngine.Timeline.MarkerTrack get_markerTrack()
    // Offset: 0x173A92C
    UnityEngine::Timeline::MarkerTrack* get_markerTrack();
    // System.Collections.Generic.List`1<UnityEngine.ScriptableObject> get_trackObjects()
    // Offset: 0x173A934
    System::Collections::Generic::List_1<UnityEngine::ScriptableObject*>* get_trackObjects();
    // System.Void AddTrackInternal(UnityEngine.Timeline.TrackAsset track)
    // Offset: 0x173A93C
    void AddTrackInternal(UnityEngine::Timeline::TrackAsset* track);
    // System.Void RemoveTrack(UnityEngine.Timeline.TrackAsset track)
    // Offset: 0x173AA04
    void RemoveTrack(UnityEngine::Timeline::TrackAsset* track);
    // private System.Void __internalAwake()
    // Offset: 0x173AC80
    void __internalAwake();
    // public System.Void CreateMarkerTrack()
    // Offset: 0x173ADE8
    void CreateMarkerTrack();
    // System.Void Invalidate()
    // Offset: 0x173A9C0
    void Invalidate();
    // private System.Double CalculateDuration()
    // Offset: 0x17393DC
    double CalculateDuration();
    // static private System.Void AddSubTracksRecursive(UnityEngine.Timeline.TrackAsset track, ref System.Collections.Generic.List`1<UnityEngine.Timeline.TrackAsset> allTracks)
    // Offset: 0x173A654
    static void AddSubTracksRecursive(UnityEngine::Timeline::TrackAsset* track, System::Collections::Generic::List_1<UnityEngine::Timeline::TrackAsset*>*& allTracks);
    // public UnityEngine.Timeline.TrackAsset CreateTrack(System.Type type, UnityEngine.Timeline.TrackAsset parent, System.String name)
    // Offset: 0x173AEE4
    UnityEngine::Timeline::TrackAsset* CreateTrack(System::Type* type, UnityEngine::Timeline::TrackAsset* parent, ::Il2CppString* name);
    // public T CreateTrack(UnityEngine.Timeline.TrackAsset parent, System.String trackName)
    // Offset: 0xFFFFFFFF
    template<class T>
    T CreateTrack(UnityEngine::Timeline::TrackAsset* parent, ::Il2CppString* trackName) {
      static_assert(std::is_convertible_v<T, UnityEngine::Timeline::TrackAsset*>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::CreateTrack");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CreateTrack", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(parent, trackName)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<T, false>(this, ___generic__method, parent, trackName);
    }
    // public T CreateTrack(System.String trackName)
    // Offset: 0xFFFFFFFF
    template<class T>
    T CreateTrack(::Il2CppString* trackName) {
      static_assert(std::is_convertible_v<T, UnityEngine::Timeline::TrackAsset*>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::CreateTrack");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CreateTrack", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(trackName)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<T, false>(this, ___generic__method, trackName);
    }
    // public T CreateTrack()
    // Offset: 0xFFFFFFFF
    template<class T>
    T CreateTrack() {
      static_assert(std::is_convertible_v<T, UnityEngine::Timeline::TrackAsset*>);
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::CreateTrack");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CreateTrack", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes()));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<T, false>(this, ___generic__method);
    }
    // public System.Boolean DeleteClip(UnityEngine.Timeline.TimelineClip clip)
    // Offset: 0x173B4A8
    bool DeleteClip(UnityEngine::Timeline::TimelineClip* clip);
    // public System.Boolean DeleteTrack(UnityEngine.Timeline.TrackAsset track)
    // Offset: 0x173B7F8
    bool DeleteTrack(UnityEngine::Timeline::TrackAsset* track);
    // System.Void MoveLastTrackBefore(UnityEngine.Timeline.TrackAsset asset)
    // Offset: 0x173BDF0
    void MoveLastTrackBefore(UnityEngine::Timeline::TrackAsset* asset);
    // UnityEngine.Timeline.TrackAsset AllocateTrack(UnityEngine.Timeline.TrackAsset trackAssetParent, System.String trackName, System.Type trackType)
    // Offset: 0x173B270
    UnityEngine::Timeline::TrackAsset* AllocateTrack(UnityEngine::Timeline::TrackAsset* trackAssetParent, ::Il2CppString* trackName, System::Type* trackType);
    // private System.Void DeleteRecordedAnimation(UnityEngine.Timeline.TrackAsset track)
    // Offset: 0x173BC84
    void DeleteRecordedAnimation(UnityEngine::Timeline::TrackAsset* track);
    // private System.Void DeleteRecordedAnimation(UnityEngine.Timeline.TimelineClip clip)
    // Offset: 0x173B68C
    void DeleteRecordedAnimation(UnityEngine::Timeline::TimelineClip* clip);
    // public override System.Double get_duration()
    // Offset: 0x17393C8
    // Implemented from: UnityEngine.Playables.PlayableAsset
    // Base method: System.Double PlayableAsset::get_duration()
    double get_duration();
    // public override System.Collections.Generic.IEnumerable`1<UnityEngine.Playables.PlayableBinding> get_outputs()
    // Offset: 0x17398B0
    // Implemented from: UnityEngine.Playables.PlayableAsset
    // Base method: System.Collections.Generic.IEnumerable`1<UnityEngine.Playables.PlayableBinding> PlayableAsset::get_outputs()
    System::Collections::Generic::IEnumerable_1<UnityEngine::Playables::PlayableBinding>* get_outputs();
    // public UnityEngine.Timeline.ClipCaps get_clipCaps()
    // Offset: 0x1739974
    // Implemented from: UnityEngine.Timeline.ITimelineClipAsset
    // Base method: UnityEngine.Timeline.ClipCaps ITimelineClipAsset::get_clipCaps()
    UnityEngine::Timeline::ClipCaps get_clipCaps();
    // public override UnityEngine.Playables.Playable CreatePlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go)
    // Offset: 0x173AB14
    // Implemented from: UnityEngine.Playables.PlayableAsset
    // Base method: UnityEngine.Playables.Playable PlayableAsset::CreatePlayable(UnityEngine.Playables.PlayableGraph graph, UnityEngine.GameObject go)
    UnityEngine::Playables::Playable CreatePlayable(UnityEngine::Playables::PlayableGraph graph, UnityEngine::GameObject* go);
    // private System.Void UnityEngine.ISerializationCallbackReceiver.OnBeforeSerialize()
    // Offset: 0x173AC74
    // Implemented from: UnityEngine.ISerializationCallbackReceiver
    // Base method: System.Void ISerializationCallbackReceiver::OnBeforeSerialize()
    void UnityEngine_ISerializationCallbackReceiver_OnBeforeSerialize();
    // private System.Void UnityEngine.ISerializationCallbackReceiver.OnAfterDeserialize()
    // Offset: 0x173AC7C
    // Implemented from: UnityEngine.ISerializationCallbackReceiver
    // Base method: System.Void ISerializationCallbackReceiver::OnAfterDeserialize()
    void UnityEngine_ISerializationCallbackReceiver_OnAfterDeserialize();
    // public System.Void GatherProperties(UnityEngine.Playables.PlayableDirector director, UnityEngine.Timeline.IPropertyCollector driver)
    // Offset: 0x1730250
    // Implemented from: UnityEngine.Timeline.IPropertyPreview
    // Base method: System.Void IPropertyPreview::GatherProperties(UnityEngine.Playables.PlayableDirector director, UnityEngine.Timeline.IPropertyCollector driver)
    void GatherProperties(UnityEngine::Playables::PlayableDirector* director, UnityEngine::Timeline::IPropertyCollector* driver);
    // public System.Void .ctor()
    // Offset: 0x173C01C
    // Implemented from: UnityEngine.Playables.PlayableAsset
    // Base method: System.Void PlayableAsset::.ctor()
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TimelineAsset* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngine::Timeline::TimelineAsset::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TimelineAsset*, creationType>()));
    }
  }; // UnityEngine.Timeline.TimelineAsset
  #pragma pack(pop)
  static check_size<sizeof(TimelineAsset), 88 + sizeof(UnityEngine::Timeline::MarkerTrack*)> __UnityEngine_Timeline_TimelineAssetSizeCheck;
  static_assert(sizeof(TimelineAsset) == 0x60);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Timeline::TimelineAsset*, "UnityEngine.Timeline", "TimelineAsset");
DEFINE_IL2CPP_ARG_TYPE(UnityEngine::Timeline::TimelineAsset::DurationMode, "UnityEngine.Timeline", "TimelineAsset/DurationMode");
