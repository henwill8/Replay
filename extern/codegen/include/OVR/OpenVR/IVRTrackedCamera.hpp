// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: OVR::OpenVR
namespace OVR::OpenVR {
}
// Completed forward declares
// Type namespace: OVR.OpenVR
namespace OVR::OpenVR {
  // Size: 0x60
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVR.OpenVR.IVRTrackedCamera
  // [] Offset: FFFFFFFF
  struct IVRTrackedCamera/*, public System::ValueType*/ {
    public:
    // Nested type: OVR::OpenVR::IVRTrackedCamera::_GetCameraErrorNameFromEnum
    class _GetCameraErrorNameFromEnum;
    // Nested type: OVR::OpenVR::IVRTrackedCamera::_HasCamera
    class _HasCamera;
    // Nested type: OVR::OpenVR::IVRTrackedCamera::_GetCameraFrameSize
    class _GetCameraFrameSize;
    // Nested type: OVR::OpenVR::IVRTrackedCamera::_GetCameraIntrinsics
    class _GetCameraIntrinsics;
    // Nested type: OVR::OpenVR::IVRTrackedCamera::_GetCameraProjection
    class _GetCameraProjection;
    // Nested type: OVR::OpenVR::IVRTrackedCamera::_AcquireVideoStreamingService
    class _AcquireVideoStreamingService;
    // Nested type: OVR::OpenVR::IVRTrackedCamera::_ReleaseVideoStreamingService
    class _ReleaseVideoStreamingService;
    // Nested type: OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamFrameBuffer
    class _GetVideoStreamFrameBuffer;
    // Nested type: OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureSize
    class _GetVideoStreamTextureSize;
    // Nested type: OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureD3D11
    class _GetVideoStreamTextureD3D11;
    // Nested type: OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureGL
    class _GetVideoStreamTextureGL;
    // Nested type: OVR::OpenVR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL
    class _ReleaseVideoStreamTextureGL;
    // OVR.OpenVR.IVRTrackedCamera/_GetCameraErrorNameFromEnum GetCameraErrorNameFromEnum
    // Size: 0x8
    // Offset: 0x0
    OVR::OpenVR::IVRTrackedCamera::_GetCameraErrorNameFromEnum* GetCameraErrorNameFromEnum;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVRTrackedCamera::_GetCameraErrorNameFromEnum*) == 0x8);
    // OVR.OpenVR.IVRTrackedCamera/_HasCamera HasCamera
    // Size: 0x8
    // Offset: 0x8
    OVR::OpenVR::IVRTrackedCamera::_HasCamera* HasCamera;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVRTrackedCamera::_HasCamera*) == 0x8);
    // OVR.OpenVR.IVRTrackedCamera/_GetCameraFrameSize GetCameraFrameSize
    // Size: 0x8
    // Offset: 0x10
    OVR::OpenVR::IVRTrackedCamera::_GetCameraFrameSize* GetCameraFrameSize;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVRTrackedCamera::_GetCameraFrameSize*) == 0x8);
    // OVR.OpenVR.IVRTrackedCamera/_GetCameraIntrinsics GetCameraIntrinsics
    // Size: 0x8
    // Offset: 0x18
    OVR::OpenVR::IVRTrackedCamera::_GetCameraIntrinsics* GetCameraIntrinsics;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVRTrackedCamera::_GetCameraIntrinsics*) == 0x8);
    // OVR.OpenVR.IVRTrackedCamera/_GetCameraProjection GetCameraProjection
    // Size: 0x8
    // Offset: 0x20
    OVR::OpenVR::IVRTrackedCamera::_GetCameraProjection* GetCameraProjection;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVRTrackedCamera::_GetCameraProjection*) == 0x8);
    // OVR.OpenVR.IVRTrackedCamera/_AcquireVideoStreamingService AcquireVideoStreamingService
    // Size: 0x8
    // Offset: 0x28
    OVR::OpenVR::IVRTrackedCamera::_AcquireVideoStreamingService* AcquireVideoStreamingService;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVRTrackedCamera::_AcquireVideoStreamingService*) == 0x8);
    // OVR.OpenVR.IVRTrackedCamera/_ReleaseVideoStreamingService ReleaseVideoStreamingService
    // Size: 0x8
    // Offset: 0x30
    OVR::OpenVR::IVRTrackedCamera::_ReleaseVideoStreamingService* ReleaseVideoStreamingService;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVRTrackedCamera::_ReleaseVideoStreamingService*) == 0x8);
    // OVR.OpenVR.IVRTrackedCamera/_GetVideoStreamFrameBuffer GetVideoStreamFrameBuffer
    // Size: 0x8
    // Offset: 0x38
    OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamFrameBuffer* GetVideoStreamFrameBuffer;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamFrameBuffer*) == 0x8);
    // OVR.OpenVR.IVRTrackedCamera/_GetVideoStreamTextureSize GetVideoStreamTextureSize
    // Size: 0x8
    // Offset: 0x40
    OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureSize* GetVideoStreamTextureSize;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureSize*) == 0x8);
    // OVR.OpenVR.IVRTrackedCamera/_GetVideoStreamTextureD3D11 GetVideoStreamTextureD3D11
    // Size: 0x8
    // Offset: 0x48
    OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureD3D11* GetVideoStreamTextureD3D11;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureD3D11*) == 0x8);
    // OVR.OpenVR.IVRTrackedCamera/_GetVideoStreamTextureGL GetVideoStreamTextureGL
    // Size: 0x8
    // Offset: 0x50
    OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureGL* GetVideoStreamTextureGL;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureGL*) == 0x8);
    // OVR.OpenVR.IVRTrackedCamera/_ReleaseVideoStreamTextureGL ReleaseVideoStreamTextureGL
    // Size: 0x8
    // Offset: 0x58
    OVR::OpenVR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL* ReleaseVideoStreamTextureGL;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL*) == 0x8);
    // Creating value type constructor for type: IVRTrackedCamera
    constexpr IVRTrackedCamera(OVR::OpenVR::IVRTrackedCamera::_GetCameraErrorNameFromEnum* GetCameraErrorNameFromEnum_ = {}, OVR::OpenVR::IVRTrackedCamera::_HasCamera* HasCamera_ = {}, OVR::OpenVR::IVRTrackedCamera::_GetCameraFrameSize* GetCameraFrameSize_ = {}, OVR::OpenVR::IVRTrackedCamera::_GetCameraIntrinsics* GetCameraIntrinsics_ = {}, OVR::OpenVR::IVRTrackedCamera::_GetCameraProjection* GetCameraProjection_ = {}, OVR::OpenVR::IVRTrackedCamera::_AcquireVideoStreamingService* AcquireVideoStreamingService_ = {}, OVR::OpenVR::IVRTrackedCamera::_ReleaseVideoStreamingService* ReleaseVideoStreamingService_ = {}, OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamFrameBuffer* GetVideoStreamFrameBuffer_ = {}, OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureSize* GetVideoStreamTextureSize_ = {}, OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureD3D11* GetVideoStreamTextureD3D11_ = {}, OVR::OpenVR::IVRTrackedCamera::_GetVideoStreamTextureGL* GetVideoStreamTextureGL_ = {}, OVR::OpenVR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL* ReleaseVideoStreamTextureGL_ = {}) noexcept : GetCameraErrorNameFromEnum{GetCameraErrorNameFromEnum_}, HasCamera{HasCamera_}, GetCameraFrameSize{GetCameraFrameSize_}, GetCameraIntrinsics{GetCameraIntrinsics_}, GetCameraProjection{GetCameraProjection_}, AcquireVideoStreamingService{AcquireVideoStreamingService_}, ReleaseVideoStreamingService{ReleaseVideoStreamingService_}, GetVideoStreamFrameBuffer{GetVideoStreamFrameBuffer_}, GetVideoStreamTextureSize{GetVideoStreamTextureSize_}, GetVideoStreamTextureD3D11{GetVideoStreamTextureD3D11_}, GetVideoStreamTextureGL{GetVideoStreamTextureGL_}, ReleaseVideoStreamTextureGL{ReleaseVideoStreamTextureGL_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
  }; // OVR.OpenVR.IVRTrackedCamera
  #pragma pack(pop)
  static check_size<sizeof(IVRTrackedCamera), 88 + sizeof(OVR::OpenVR::IVRTrackedCamera::_ReleaseVideoStreamTextureGL*)> __OVR_OpenVR_IVRTrackedCameraSizeCheck;
  static_assert(sizeof(IVRTrackedCamera) == 0x60);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(OVR::OpenVR::IVRTrackedCamera, "OVR.OpenVR", "IVRTrackedCamera");
