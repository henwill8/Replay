// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRIOBuffer
#include "OVR/OpenVR/IVRIOBuffer.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: OVR::OpenVR
namespace OVR::OpenVR {
  // Forward declaring type: EIOBufferError
  struct EIOBufferError;
  // Forward declaring type: EIOBufferMode
  struct EIOBufferMode;
}
// Completed forward declares
// Type namespace: OVR.OpenVR
namespace OVR::OpenVR {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: OVR.OpenVR.CVRIOBuffer
  // [] Offset: FFFFFFFF
  class CVRIOBuffer : public ::Il2CppObject {
    public:
    // private OVR.OpenVR.IVRIOBuffer FnTable
    // Size: 0x28
    // Offset: 0x10
    OVR::OpenVR::IVRIOBuffer FnTable;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVRIOBuffer) == 0x28);
    // Creating value type constructor for type: CVRIOBuffer
    CVRIOBuffer(OVR::OpenVR::IVRIOBuffer FnTable_ = {}) noexcept : FnTable{FnTable_} {}
    // Creating conversion operator: operator OVR::OpenVR::IVRIOBuffer
    constexpr operator OVR::OpenVR::IVRIOBuffer() const noexcept {
      return FnTable;
    }
    // System.Void .ctor(System.IntPtr pInterface)
    // Offset: 0x1426E54
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CVRIOBuffer* New_ctor(System::IntPtr pInterface) {
      static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRIOBuffer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CVRIOBuffer*, creationType>(pInterface)));
    }
    // public OVR.OpenVR.EIOBufferError Open(System.String pchPath, OVR.OpenVR.EIOBufferMode mode, System.UInt32 unElementSize, System.UInt32 unElements, ref System.UInt64 pulBuffer)
    // Offset: 0x1426F64
    OVR::OpenVR::EIOBufferError Open(::Il2CppString* pchPath, OVR::OpenVR::EIOBufferMode mode, uint unElementSize, uint unElements, uint64_t& pulBuffer);
    // public OVR.OpenVR.EIOBufferError Close(System.UInt64 ulBuffer)
    // Offset: 0x1426F84
    OVR::OpenVR::EIOBufferError Close(uint64_t ulBuffer);
    // public OVR.OpenVR.EIOBufferError Read(System.UInt64 ulBuffer, System.IntPtr pDst, System.UInt32 unBytes, ref System.UInt32 punRead)
    // Offset: 0x1426FA0
    OVR::OpenVR::EIOBufferError Read(uint64_t ulBuffer, System::IntPtr pDst, uint unBytes, uint& punRead);
    // public OVR.OpenVR.EIOBufferError Write(System.UInt64 ulBuffer, System.IntPtr pSrc, System.UInt32 unBytes)
    // Offset: 0x1426FC0
    OVR::OpenVR::EIOBufferError Write(uint64_t ulBuffer, System::IntPtr pSrc, uint unBytes);
    // public System.UInt64 PropertyContainer(System.UInt64 ulBuffer)
    // Offset: 0x1426FDC
    uint64_t PropertyContainer(uint64_t ulBuffer);
  }; // OVR.OpenVR.CVRIOBuffer
  #pragma pack(pop)
  static check_size<sizeof(CVRIOBuffer), 16 + sizeof(OVR::OpenVR::IVRIOBuffer)> __OVR_OpenVR_CVRIOBufferSizeCheck;
  static_assert(sizeof(CVRIOBuffer) == 0x38);
}
DEFINE_IL2CPP_ARG_TYPE(OVR::OpenVR::CVRIOBuffer*, "OVR.OpenVR", "CVRIOBuffer");
