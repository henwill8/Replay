// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: OVR::OpenVR
namespace OVR::OpenVR {
}
// Completed forward declares
// Type namespace: OVR.OpenVR
namespace OVR::OpenVR {
  // Size: 0x290
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVR.OpenVR.IVROverlay
  // [] Offset: FFFFFFFF
  struct IVROverlay/*, public System::ValueType*/ {
    public:
    // Nested type: OVR::OpenVR::IVROverlay::_FindOverlay
    class _FindOverlay;
    // Nested type: OVR::OpenVR::IVROverlay::_CreateOverlay
    class _CreateOverlay;
    // Nested type: OVR::OpenVR::IVROverlay::_DestroyOverlay
    class _DestroyOverlay;
    // Nested type: OVR::OpenVR::IVROverlay::_SetHighQualityOverlay
    class _SetHighQualityOverlay;
    // Nested type: OVR::OpenVR::IVROverlay::_GetHighQualityOverlay
    class _GetHighQualityOverlay;
    // Nested type: OVR::OpenVR::IVROverlay::_GetOverlayKey
    class _GetOverlayKey;
    // Nested type: OVR::OpenVR::IVROverlay::_GetOverlayName
    class _GetOverlayName;
    // Nested type: OVR::OpenVR::IVROverlay::_SetOverlayName
    class _SetOverlayName;
    // Nested type: OVR::OpenVR::IVROverlay::_GetOverlayImageData
    class _GetOverlayImageData;
    // Nested type: OVR::OpenVR::IVROverlay::_GetOverlayErrorNameFromEnum
    class _GetOverlayErrorNameFromEnum;
    // Nested type: OVR::OpenVR::IVROverlay::_SetOverlayRenderingPid
    class _SetOverlayRenderingPid;
    // Nested type: OVR::OpenVR::IVROverlay::_GetOverlayRenderingPid
    class _GetOverlayRenderingPid;
    // Nested type: OVR::OpenVR::IVROverlay::_SetOverlayFlag
    class _SetOverlayFlag;
    // Nested type: OVR::OpenVR::IVROverlay::_GetOverlayFlag
    class _GetOverlayFlag;
    // Nested type: OVR::OpenVR::IVROverlay::_SetOverlayColor
    class _SetOverlayColor;
    // Nested type: OVR::OpenVR::IVROverlay::_GetOverlayColor
    class _GetOverlayColor;
    // Nested type: OVR::OpenVR::IVROverlay::_SetOverlayAlpha
    class _SetOverlayAlpha;
    // Nested type: OVR::OpenVR::IVROverlay::_GetOverlayAlpha
    class _GetOverlayAlpha;
    // Nested type: OVR::OpenVR::IVROverlay::_SetOverlayTexelAspect
    class _SetOverlayTexelAspect;
    // Nested type: OVR::OpenVR::IVROverlay::_GetOverlayTexelAspect
    class _GetOverlayTexelAspect;
    // Nested type: OVR::OpenVR::IVROverlay::_SetOverlaySortOrder
    class _SetOverlaySortOrder;
    // Nested type: OVR::OpenVR::IVROverlay::_GetOverlaySortOrder
    class _GetOverlaySortOrder;
    // Nested type: OVR::OpenVR::IVROverlay::_SetOverlayWidthInMeters
    class _SetOverlayWidthInMeters;
    // Nested type: OVR::OpenVR::IVROverlay::_GetOverlayWidthInMeters
    class _GetOverlayWidthInMeters;
    // Nested type: OVR::OpenVR::IVROverlay::_SetOverlayAutoCurveDistanceRangeInMeters
    class _SetOverlayAutoCurveDistanceRangeInMeters;
    // Nested type: OVR::OpenVR::IVROverlay::_GetOverlayAutoCurveDistanceRangeInMeters
    class _GetOverlayAutoCurveDistanceRangeInMeters;
    // Nested type: OVR::OpenVR::IVROverlay::_SetOverlayTextureColorSpace
    class _SetOverlayTextureColorSpace;
    // Nested type: OVR::OpenVR::IVROverlay::_GetOverlayTextureColorSpace
    class _GetOverlayTextureColorSpace;
    // Nested type: OVR::OpenVR::IVROverlay::_SetOverlayTextureBounds
    class _SetOverlayTextureBounds;
    // Nested type: OVR::OpenVR::IVROverlay::_GetOverlayTextureBounds
    class _GetOverlayTextureBounds;
    // Nested type: OVR::OpenVR::IVROverlay::_GetOverlayRenderModel
    class _GetOverlayRenderModel;
    // Nested type: OVR::OpenVR::IVROverlay::_SetOverlayRenderModel
    class _SetOverlayRenderModel;
    // Nested type: OVR::OpenVR::IVROverlay::_GetOverlayTransformType
    class _GetOverlayTransformType;
    // Nested type: OVR::OpenVR::IVROverlay::_SetOverlayTransformAbsolute
    class _SetOverlayTransformAbsolute;
    // Nested type: OVR::OpenVR::IVROverlay::_GetOverlayTransformAbsolute
    class _GetOverlayTransformAbsolute;
    // Nested type: OVR::OpenVR::IVROverlay::_SetOverlayTransformTrackedDeviceRelative
    class _SetOverlayTransformTrackedDeviceRelative;
    // Nested type: OVR::OpenVR::IVROverlay::_GetOverlayTransformTrackedDeviceRelative
    class _GetOverlayTransformTrackedDeviceRelative;
    // Nested type: OVR::OpenVR::IVROverlay::_SetOverlayTransformTrackedDeviceComponent
    class _SetOverlayTransformTrackedDeviceComponent;
    // Nested type: OVR::OpenVR::IVROverlay::_GetOverlayTransformTrackedDeviceComponent
    class _GetOverlayTransformTrackedDeviceComponent;
    // Nested type: OVR::OpenVR::IVROverlay::_GetOverlayTransformOverlayRelative
    class _GetOverlayTransformOverlayRelative;
    // Nested type: OVR::OpenVR::IVROverlay::_SetOverlayTransformOverlayRelative
    class _SetOverlayTransformOverlayRelative;
    // Nested type: OVR::OpenVR::IVROverlay::_ShowOverlay
    class _ShowOverlay;
    // Nested type: OVR::OpenVR::IVROverlay::_HideOverlay
    class _HideOverlay;
    // Nested type: OVR::OpenVR::IVROverlay::_IsOverlayVisible
    class _IsOverlayVisible;
    // Nested type: OVR::OpenVR::IVROverlay::_GetTransformForOverlayCoordinates
    class _GetTransformForOverlayCoordinates;
    // Nested type: OVR::OpenVR::IVROverlay::_PollNextOverlayEvent
    class _PollNextOverlayEvent;
    // Nested type: OVR::OpenVR::IVROverlay::_GetOverlayInputMethod
    class _GetOverlayInputMethod;
    // Nested type: OVR::OpenVR::IVROverlay::_SetOverlayInputMethod
    class _SetOverlayInputMethod;
    // Nested type: OVR::OpenVR::IVROverlay::_GetOverlayMouseScale
    class _GetOverlayMouseScale;
    // Nested type: OVR::OpenVR::IVROverlay::_SetOverlayMouseScale
    class _SetOverlayMouseScale;
    // Nested type: OVR::OpenVR::IVROverlay::_ComputeOverlayIntersection
    class _ComputeOverlayIntersection;
    // Nested type: OVR::OpenVR::IVROverlay::_IsHoverTargetOverlay
    class _IsHoverTargetOverlay;
    // Nested type: OVR::OpenVR::IVROverlay::_GetGamepadFocusOverlay
    class _GetGamepadFocusOverlay;
    // Nested type: OVR::OpenVR::IVROverlay::_SetGamepadFocusOverlay
    class _SetGamepadFocusOverlay;
    // Nested type: OVR::OpenVR::IVROverlay::_SetOverlayNeighbor
    class _SetOverlayNeighbor;
    // Nested type: OVR::OpenVR::IVROverlay::_MoveGamepadFocusToNeighbor
    class _MoveGamepadFocusToNeighbor;
    // Nested type: OVR::OpenVR::IVROverlay::_SetOverlayDualAnalogTransform
    class _SetOverlayDualAnalogTransform;
    // Nested type: OVR::OpenVR::IVROverlay::_GetOverlayDualAnalogTransform
    class _GetOverlayDualAnalogTransform;
    // Nested type: OVR::OpenVR::IVROverlay::_SetOverlayTexture
    class _SetOverlayTexture;
    // Nested type: OVR::OpenVR::IVROverlay::_ClearOverlayTexture
    class _ClearOverlayTexture;
    // Nested type: OVR::OpenVR::IVROverlay::_SetOverlayRaw
    class _SetOverlayRaw;
    // Nested type: OVR::OpenVR::IVROverlay::_SetOverlayFromFile
    class _SetOverlayFromFile;
    // Nested type: OVR::OpenVR::IVROverlay::_GetOverlayTexture
    class _GetOverlayTexture;
    // Nested type: OVR::OpenVR::IVROverlay::_ReleaseNativeOverlayHandle
    class _ReleaseNativeOverlayHandle;
    // Nested type: OVR::OpenVR::IVROverlay::_GetOverlayTextureSize
    class _GetOverlayTextureSize;
    // Nested type: OVR::OpenVR::IVROverlay::_CreateDashboardOverlay
    class _CreateDashboardOverlay;
    // Nested type: OVR::OpenVR::IVROverlay::_IsDashboardVisible
    class _IsDashboardVisible;
    // Nested type: OVR::OpenVR::IVROverlay::_IsActiveDashboardOverlay
    class _IsActiveDashboardOverlay;
    // Nested type: OVR::OpenVR::IVROverlay::_SetDashboardOverlaySceneProcess
    class _SetDashboardOverlaySceneProcess;
    // Nested type: OVR::OpenVR::IVROverlay::_GetDashboardOverlaySceneProcess
    class _GetDashboardOverlaySceneProcess;
    // Nested type: OVR::OpenVR::IVROverlay::_ShowDashboard
    class _ShowDashboard;
    // Nested type: OVR::OpenVR::IVROverlay::_GetPrimaryDashboardDevice
    class _GetPrimaryDashboardDevice;
    // Nested type: OVR::OpenVR::IVROverlay::_ShowKeyboard
    class _ShowKeyboard;
    // Nested type: OVR::OpenVR::IVROverlay::_ShowKeyboardForOverlay
    class _ShowKeyboardForOverlay;
    // Nested type: OVR::OpenVR::IVROverlay::_GetKeyboardText
    class _GetKeyboardText;
    // Nested type: OVR::OpenVR::IVROverlay::_HideKeyboard
    class _HideKeyboard;
    // Nested type: OVR::OpenVR::IVROverlay::_SetKeyboardTransformAbsolute
    class _SetKeyboardTransformAbsolute;
    // Nested type: OVR::OpenVR::IVROverlay::_SetKeyboardPositionForOverlay
    class _SetKeyboardPositionForOverlay;
    // Nested type: OVR::OpenVR::IVROverlay::_SetOverlayIntersectionMask
    class _SetOverlayIntersectionMask;
    // Nested type: OVR::OpenVR::IVROverlay::_GetOverlayFlags
    class _GetOverlayFlags;
    // Nested type: OVR::OpenVR::IVROverlay::_ShowMessageOverlay
    class _ShowMessageOverlay;
    // Nested type: OVR::OpenVR::IVROverlay::_CloseMessageOverlay
    class _CloseMessageOverlay;
    // OVR.OpenVR.IVROverlay/_FindOverlay FindOverlay
    // Size: 0x8
    // Offset: 0x0
    OVR::OpenVR::IVROverlay::_FindOverlay* FindOverlay;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_FindOverlay*) == 0x8);
    // OVR.OpenVR.IVROverlay/_CreateOverlay CreateOverlay
    // Size: 0x8
    // Offset: 0x8
    OVR::OpenVR::IVROverlay::_CreateOverlay* CreateOverlay;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_CreateOverlay*) == 0x8);
    // OVR.OpenVR.IVROverlay/_DestroyOverlay DestroyOverlay
    // Size: 0x8
    // Offset: 0x10
    OVR::OpenVR::IVROverlay::_DestroyOverlay* DestroyOverlay;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_DestroyOverlay*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetHighQualityOverlay SetHighQualityOverlay
    // Size: 0x8
    // Offset: 0x18
    OVR::OpenVR::IVROverlay::_SetHighQualityOverlay* SetHighQualityOverlay;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetHighQualityOverlay*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetHighQualityOverlay GetHighQualityOverlay
    // Size: 0x8
    // Offset: 0x20
    OVR::OpenVR::IVROverlay::_GetHighQualityOverlay* GetHighQualityOverlay;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetHighQualityOverlay*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetOverlayKey GetOverlayKey
    // Size: 0x8
    // Offset: 0x28
    OVR::OpenVR::IVROverlay::_GetOverlayKey* GetOverlayKey;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetOverlayKey*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetOverlayName GetOverlayName
    // Size: 0x8
    // Offset: 0x30
    OVR::OpenVR::IVROverlay::_GetOverlayName* GetOverlayName;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetOverlayName*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetOverlayName SetOverlayName
    // Size: 0x8
    // Offset: 0x38
    OVR::OpenVR::IVROverlay::_SetOverlayName* SetOverlayName;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetOverlayName*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetOverlayImageData GetOverlayImageData
    // Size: 0x8
    // Offset: 0x40
    OVR::OpenVR::IVROverlay::_GetOverlayImageData* GetOverlayImageData;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetOverlayImageData*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetOverlayErrorNameFromEnum GetOverlayErrorNameFromEnum
    // Size: 0x8
    // Offset: 0x48
    OVR::OpenVR::IVROverlay::_GetOverlayErrorNameFromEnum* GetOverlayErrorNameFromEnum;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetOverlayErrorNameFromEnum*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetOverlayRenderingPid SetOverlayRenderingPid
    // Size: 0x8
    // Offset: 0x50
    OVR::OpenVR::IVROverlay::_SetOverlayRenderingPid* SetOverlayRenderingPid;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetOverlayRenderingPid*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetOverlayRenderingPid GetOverlayRenderingPid
    // Size: 0x8
    // Offset: 0x58
    OVR::OpenVR::IVROverlay::_GetOverlayRenderingPid* GetOverlayRenderingPid;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetOverlayRenderingPid*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetOverlayFlag SetOverlayFlag
    // Size: 0x8
    // Offset: 0x60
    OVR::OpenVR::IVROverlay::_SetOverlayFlag* SetOverlayFlag;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetOverlayFlag*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetOverlayFlag GetOverlayFlag
    // Size: 0x8
    // Offset: 0x68
    OVR::OpenVR::IVROverlay::_GetOverlayFlag* GetOverlayFlag;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetOverlayFlag*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetOverlayColor SetOverlayColor
    // Size: 0x8
    // Offset: 0x70
    OVR::OpenVR::IVROverlay::_SetOverlayColor* SetOverlayColor;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetOverlayColor*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetOverlayColor GetOverlayColor
    // Size: 0x8
    // Offset: 0x78
    OVR::OpenVR::IVROverlay::_GetOverlayColor* GetOverlayColor;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetOverlayColor*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetOverlayAlpha SetOverlayAlpha
    // Size: 0x8
    // Offset: 0x80
    OVR::OpenVR::IVROverlay::_SetOverlayAlpha* SetOverlayAlpha;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetOverlayAlpha*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetOverlayAlpha GetOverlayAlpha
    // Size: 0x8
    // Offset: 0x88
    OVR::OpenVR::IVROverlay::_GetOverlayAlpha* GetOverlayAlpha;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetOverlayAlpha*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetOverlayTexelAspect SetOverlayTexelAspect
    // Size: 0x8
    // Offset: 0x90
    OVR::OpenVR::IVROverlay::_SetOverlayTexelAspect* SetOverlayTexelAspect;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetOverlayTexelAspect*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetOverlayTexelAspect GetOverlayTexelAspect
    // Size: 0x8
    // Offset: 0x98
    OVR::OpenVR::IVROverlay::_GetOverlayTexelAspect* GetOverlayTexelAspect;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetOverlayTexelAspect*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetOverlaySortOrder SetOverlaySortOrder
    // Size: 0x8
    // Offset: 0xA0
    OVR::OpenVR::IVROverlay::_SetOverlaySortOrder* SetOverlaySortOrder;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetOverlaySortOrder*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetOverlaySortOrder GetOverlaySortOrder
    // Size: 0x8
    // Offset: 0xA8
    OVR::OpenVR::IVROverlay::_GetOverlaySortOrder* GetOverlaySortOrder;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetOverlaySortOrder*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetOverlayWidthInMeters SetOverlayWidthInMeters
    // Size: 0x8
    // Offset: 0xB0
    OVR::OpenVR::IVROverlay::_SetOverlayWidthInMeters* SetOverlayWidthInMeters;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetOverlayWidthInMeters*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetOverlayWidthInMeters GetOverlayWidthInMeters
    // Size: 0x8
    // Offset: 0xB8
    OVR::OpenVR::IVROverlay::_GetOverlayWidthInMeters* GetOverlayWidthInMeters;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetOverlayWidthInMeters*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetOverlayAutoCurveDistanceRangeInMeters SetOverlayAutoCurveDistanceRangeInMeters
    // Size: 0x8
    // Offset: 0xC0
    OVR::OpenVR::IVROverlay::_SetOverlayAutoCurveDistanceRangeInMeters* SetOverlayAutoCurveDistanceRangeInMeters;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetOverlayAutoCurveDistanceRangeInMeters*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetOverlayAutoCurveDistanceRangeInMeters GetOverlayAutoCurveDistanceRangeInMeters
    // Size: 0x8
    // Offset: 0xC8
    OVR::OpenVR::IVROverlay::_GetOverlayAutoCurveDistanceRangeInMeters* GetOverlayAutoCurveDistanceRangeInMeters;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetOverlayAutoCurveDistanceRangeInMeters*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetOverlayTextureColorSpace SetOverlayTextureColorSpace
    // Size: 0x8
    // Offset: 0xD0
    OVR::OpenVR::IVROverlay::_SetOverlayTextureColorSpace* SetOverlayTextureColorSpace;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetOverlayTextureColorSpace*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetOverlayTextureColorSpace GetOverlayTextureColorSpace
    // Size: 0x8
    // Offset: 0xD8
    OVR::OpenVR::IVROverlay::_GetOverlayTextureColorSpace* GetOverlayTextureColorSpace;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetOverlayTextureColorSpace*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetOverlayTextureBounds SetOverlayTextureBounds
    // Size: 0x8
    // Offset: 0xE0
    OVR::OpenVR::IVROverlay::_SetOverlayTextureBounds* SetOverlayTextureBounds;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetOverlayTextureBounds*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetOverlayTextureBounds GetOverlayTextureBounds
    // Size: 0x8
    // Offset: 0xE8
    OVR::OpenVR::IVROverlay::_GetOverlayTextureBounds* GetOverlayTextureBounds;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetOverlayTextureBounds*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetOverlayRenderModel GetOverlayRenderModel
    // Size: 0x8
    // Offset: 0xF0
    OVR::OpenVR::IVROverlay::_GetOverlayRenderModel* GetOverlayRenderModel;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetOverlayRenderModel*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetOverlayRenderModel SetOverlayRenderModel
    // Size: 0x8
    // Offset: 0xF8
    OVR::OpenVR::IVROverlay::_SetOverlayRenderModel* SetOverlayRenderModel;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetOverlayRenderModel*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetOverlayTransformType GetOverlayTransformType
    // Size: 0x8
    // Offset: 0x100
    OVR::OpenVR::IVROverlay::_GetOverlayTransformType* GetOverlayTransformType;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetOverlayTransformType*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetOverlayTransformAbsolute SetOverlayTransformAbsolute
    // Size: 0x8
    // Offset: 0x108
    OVR::OpenVR::IVROverlay::_SetOverlayTransformAbsolute* SetOverlayTransformAbsolute;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetOverlayTransformAbsolute*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetOverlayTransformAbsolute GetOverlayTransformAbsolute
    // Size: 0x8
    // Offset: 0x110
    OVR::OpenVR::IVROverlay::_GetOverlayTransformAbsolute* GetOverlayTransformAbsolute;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetOverlayTransformAbsolute*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetOverlayTransformTrackedDeviceRelative SetOverlayTransformTrackedDeviceRelative
    // Size: 0x8
    // Offset: 0x118
    OVR::OpenVR::IVROverlay::_SetOverlayTransformTrackedDeviceRelative* SetOverlayTransformTrackedDeviceRelative;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetOverlayTransformTrackedDeviceRelative*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetOverlayTransformTrackedDeviceRelative GetOverlayTransformTrackedDeviceRelative
    // Size: 0x8
    // Offset: 0x120
    OVR::OpenVR::IVROverlay::_GetOverlayTransformTrackedDeviceRelative* GetOverlayTransformTrackedDeviceRelative;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetOverlayTransformTrackedDeviceRelative*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetOverlayTransformTrackedDeviceComponent SetOverlayTransformTrackedDeviceComponent
    // Size: 0x8
    // Offset: 0x128
    OVR::OpenVR::IVROverlay::_SetOverlayTransformTrackedDeviceComponent* SetOverlayTransformTrackedDeviceComponent;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetOverlayTransformTrackedDeviceComponent*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetOverlayTransformTrackedDeviceComponent GetOverlayTransformTrackedDeviceComponent
    // Size: 0x8
    // Offset: 0x130
    OVR::OpenVR::IVROverlay::_GetOverlayTransformTrackedDeviceComponent* GetOverlayTransformTrackedDeviceComponent;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetOverlayTransformTrackedDeviceComponent*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetOverlayTransformOverlayRelative GetOverlayTransformOverlayRelative
    // Size: 0x8
    // Offset: 0x138
    OVR::OpenVR::IVROverlay::_GetOverlayTransformOverlayRelative* GetOverlayTransformOverlayRelative;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetOverlayTransformOverlayRelative*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetOverlayTransformOverlayRelative SetOverlayTransformOverlayRelative
    // Size: 0x8
    // Offset: 0x140
    OVR::OpenVR::IVROverlay::_SetOverlayTransformOverlayRelative* SetOverlayTransformOverlayRelative;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetOverlayTransformOverlayRelative*) == 0x8);
    // OVR.OpenVR.IVROverlay/_ShowOverlay ShowOverlay
    // Size: 0x8
    // Offset: 0x148
    OVR::OpenVR::IVROverlay::_ShowOverlay* ShowOverlay;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_ShowOverlay*) == 0x8);
    // OVR.OpenVR.IVROverlay/_HideOverlay HideOverlay
    // Size: 0x8
    // Offset: 0x150
    OVR::OpenVR::IVROverlay::_HideOverlay* HideOverlay;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_HideOverlay*) == 0x8);
    // OVR.OpenVR.IVROverlay/_IsOverlayVisible IsOverlayVisible
    // Size: 0x8
    // Offset: 0x158
    OVR::OpenVR::IVROverlay::_IsOverlayVisible* IsOverlayVisible;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_IsOverlayVisible*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetTransformForOverlayCoordinates GetTransformForOverlayCoordinates
    // Size: 0x8
    // Offset: 0x160
    OVR::OpenVR::IVROverlay::_GetTransformForOverlayCoordinates* GetTransformForOverlayCoordinates;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetTransformForOverlayCoordinates*) == 0x8);
    // OVR.OpenVR.IVROverlay/_PollNextOverlayEvent PollNextOverlayEvent
    // Size: 0x8
    // Offset: 0x168
    OVR::OpenVR::IVROverlay::_PollNextOverlayEvent* PollNextOverlayEvent;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_PollNextOverlayEvent*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetOverlayInputMethod GetOverlayInputMethod
    // Size: 0x8
    // Offset: 0x170
    OVR::OpenVR::IVROverlay::_GetOverlayInputMethod* GetOverlayInputMethod;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetOverlayInputMethod*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetOverlayInputMethod SetOverlayInputMethod
    // Size: 0x8
    // Offset: 0x178
    OVR::OpenVR::IVROverlay::_SetOverlayInputMethod* SetOverlayInputMethod;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetOverlayInputMethod*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetOverlayMouseScale GetOverlayMouseScale
    // Size: 0x8
    // Offset: 0x180
    OVR::OpenVR::IVROverlay::_GetOverlayMouseScale* GetOverlayMouseScale;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetOverlayMouseScale*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetOverlayMouseScale SetOverlayMouseScale
    // Size: 0x8
    // Offset: 0x188
    OVR::OpenVR::IVROverlay::_SetOverlayMouseScale* SetOverlayMouseScale;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetOverlayMouseScale*) == 0x8);
    // OVR.OpenVR.IVROverlay/_ComputeOverlayIntersection ComputeOverlayIntersection
    // Size: 0x8
    // Offset: 0x190
    OVR::OpenVR::IVROverlay::_ComputeOverlayIntersection* ComputeOverlayIntersection;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_ComputeOverlayIntersection*) == 0x8);
    // OVR.OpenVR.IVROverlay/_IsHoverTargetOverlay IsHoverTargetOverlay
    // Size: 0x8
    // Offset: 0x198
    OVR::OpenVR::IVROverlay::_IsHoverTargetOverlay* IsHoverTargetOverlay;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_IsHoverTargetOverlay*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetGamepadFocusOverlay GetGamepadFocusOverlay
    // Size: 0x8
    // Offset: 0x1A0
    OVR::OpenVR::IVROverlay::_GetGamepadFocusOverlay* GetGamepadFocusOverlay;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetGamepadFocusOverlay*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetGamepadFocusOverlay SetGamepadFocusOverlay
    // Size: 0x8
    // Offset: 0x1A8
    OVR::OpenVR::IVROverlay::_SetGamepadFocusOverlay* SetGamepadFocusOverlay;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetGamepadFocusOverlay*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetOverlayNeighbor SetOverlayNeighbor
    // Size: 0x8
    // Offset: 0x1B0
    OVR::OpenVR::IVROverlay::_SetOverlayNeighbor* SetOverlayNeighbor;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetOverlayNeighbor*) == 0x8);
    // OVR.OpenVR.IVROverlay/_MoveGamepadFocusToNeighbor MoveGamepadFocusToNeighbor
    // Size: 0x8
    // Offset: 0x1B8
    OVR::OpenVR::IVROverlay::_MoveGamepadFocusToNeighbor* MoveGamepadFocusToNeighbor;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_MoveGamepadFocusToNeighbor*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetOverlayDualAnalogTransform SetOverlayDualAnalogTransform
    // Size: 0x8
    // Offset: 0x1C0
    OVR::OpenVR::IVROverlay::_SetOverlayDualAnalogTransform* SetOverlayDualAnalogTransform;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetOverlayDualAnalogTransform*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetOverlayDualAnalogTransform GetOverlayDualAnalogTransform
    // Size: 0x8
    // Offset: 0x1C8
    OVR::OpenVR::IVROverlay::_GetOverlayDualAnalogTransform* GetOverlayDualAnalogTransform;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetOverlayDualAnalogTransform*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetOverlayTexture SetOverlayTexture
    // Size: 0x8
    // Offset: 0x1D0
    OVR::OpenVR::IVROverlay::_SetOverlayTexture* SetOverlayTexture;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetOverlayTexture*) == 0x8);
    // OVR.OpenVR.IVROverlay/_ClearOverlayTexture ClearOverlayTexture
    // Size: 0x8
    // Offset: 0x1D8
    OVR::OpenVR::IVROverlay::_ClearOverlayTexture* ClearOverlayTexture;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_ClearOverlayTexture*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetOverlayRaw SetOverlayRaw
    // Size: 0x8
    // Offset: 0x1E0
    OVR::OpenVR::IVROverlay::_SetOverlayRaw* SetOverlayRaw;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetOverlayRaw*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetOverlayFromFile SetOverlayFromFile
    // Size: 0x8
    // Offset: 0x1E8
    OVR::OpenVR::IVROverlay::_SetOverlayFromFile* SetOverlayFromFile;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetOverlayFromFile*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetOverlayTexture GetOverlayTexture
    // Size: 0x8
    // Offset: 0x1F0
    OVR::OpenVR::IVROverlay::_GetOverlayTexture* GetOverlayTexture;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetOverlayTexture*) == 0x8);
    // OVR.OpenVR.IVROverlay/_ReleaseNativeOverlayHandle ReleaseNativeOverlayHandle
    // Size: 0x8
    // Offset: 0x1F8
    OVR::OpenVR::IVROverlay::_ReleaseNativeOverlayHandle* ReleaseNativeOverlayHandle;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_ReleaseNativeOverlayHandle*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetOverlayTextureSize GetOverlayTextureSize
    // Size: 0x8
    // Offset: 0x200
    OVR::OpenVR::IVROverlay::_GetOverlayTextureSize* GetOverlayTextureSize;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetOverlayTextureSize*) == 0x8);
    // OVR.OpenVR.IVROverlay/_CreateDashboardOverlay CreateDashboardOverlay
    // Size: 0x8
    // Offset: 0x208
    OVR::OpenVR::IVROverlay::_CreateDashboardOverlay* CreateDashboardOverlay;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_CreateDashboardOverlay*) == 0x8);
    // OVR.OpenVR.IVROverlay/_IsDashboardVisible IsDashboardVisible
    // Size: 0x8
    // Offset: 0x210
    OVR::OpenVR::IVROverlay::_IsDashboardVisible* IsDashboardVisible;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_IsDashboardVisible*) == 0x8);
    // OVR.OpenVR.IVROverlay/_IsActiveDashboardOverlay IsActiveDashboardOverlay
    // Size: 0x8
    // Offset: 0x218
    OVR::OpenVR::IVROverlay::_IsActiveDashboardOverlay* IsActiveDashboardOverlay;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_IsActiveDashboardOverlay*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetDashboardOverlaySceneProcess SetDashboardOverlaySceneProcess
    // Size: 0x8
    // Offset: 0x220
    OVR::OpenVR::IVROverlay::_SetDashboardOverlaySceneProcess* SetDashboardOverlaySceneProcess;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetDashboardOverlaySceneProcess*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetDashboardOverlaySceneProcess GetDashboardOverlaySceneProcess
    // Size: 0x8
    // Offset: 0x228
    OVR::OpenVR::IVROverlay::_GetDashboardOverlaySceneProcess* GetDashboardOverlaySceneProcess;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetDashboardOverlaySceneProcess*) == 0x8);
    // OVR.OpenVR.IVROverlay/_ShowDashboard ShowDashboard
    // Size: 0x8
    // Offset: 0x230
    OVR::OpenVR::IVROverlay::_ShowDashboard* ShowDashboard;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_ShowDashboard*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetPrimaryDashboardDevice GetPrimaryDashboardDevice
    // Size: 0x8
    // Offset: 0x238
    OVR::OpenVR::IVROverlay::_GetPrimaryDashboardDevice* GetPrimaryDashboardDevice;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetPrimaryDashboardDevice*) == 0x8);
    // OVR.OpenVR.IVROverlay/_ShowKeyboard ShowKeyboard
    // Size: 0x8
    // Offset: 0x240
    OVR::OpenVR::IVROverlay::_ShowKeyboard* ShowKeyboard;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_ShowKeyboard*) == 0x8);
    // OVR.OpenVR.IVROverlay/_ShowKeyboardForOverlay ShowKeyboardForOverlay
    // Size: 0x8
    // Offset: 0x248
    OVR::OpenVR::IVROverlay::_ShowKeyboardForOverlay* ShowKeyboardForOverlay;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_ShowKeyboardForOverlay*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetKeyboardText GetKeyboardText
    // Size: 0x8
    // Offset: 0x250
    OVR::OpenVR::IVROverlay::_GetKeyboardText* GetKeyboardText;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetKeyboardText*) == 0x8);
    // OVR.OpenVR.IVROverlay/_HideKeyboard HideKeyboard
    // Size: 0x8
    // Offset: 0x258
    OVR::OpenVR::IVROverlay::_HideKeyboard* HideKeyboard;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_HideKeyboard*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetKeyboardTransformAbsolute SetKeyboardTransformAbsolute
    // Size: 0x8
    // Offset: 0x260
    OVR::OpenVR::IVROverlay::_SetKeyboardTransformAbsolute* SetKeyboardTransformAbsolute;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetKeyboardTransformAbsolute*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetKeyboardPositionForOverlay SetKeyboardPositionForOverlay
    // Size: 0x8
    // Offset: 0x268
    OVR::OpenVR::IVROverlay::_SetKeyboardPositionForOverlay* SetKeyboardPositionForOverlay;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetKeyboardPositionForOverlay*) == 0x8);
    // OVR.OpenVR.IVROverlay/_SetOverlayIntersectionMask SetOverlayIntersectionMask
    // Size: 0x8
    // Offset: 0x270
    OVR::OpenVR::IVROverlay::_SetOverlayIntersectionMask* SetOverlayIntersectionMask;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_SetOverlayIntersectionMask*) == 0x8);
    // OVR.OpenVR.IVROverlay/_GetOverlayFlags GetOverlayFlags
    // Size: 0x8
    // Offset: 0x278
    OVR::OpenVR::IVROverlay::_GetOverlayFlags* GetOverlayFlags;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_GetOverlayFlags*) == 0x8);
    // OVR.OpenVR.IVROverlay/_ShowMessageOverlay ShowMessageOverlay
    // Size: 0x8
    // Offset: 0x280
    OVR::OpenVR::IVROverlay::_ShowMessageOverlay* ShowMessageOverlay;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_ShowMessageOverlay*) == 0x8);
    // OVR.OpenVR.IVROverlay/_CloseMessageOverlay CloseMessageOverlay
    // Size: 0x8
    // Offset: 0x288
    OVR::OpenVR::IVROverlay::_CloseMessageOverlay* CloseMessageOverlay;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVROverlay::_CloseMessageOverlay*) == 0x8);
    // Creating value type constructor for type: IVROverlay
    constexpr IVROverlay(OVR::OpenVR::IVROverlay::_FindOverlay* FindOverlay_ = {}, OVR::OpenVR::IVROverlay::_CreateOverlay* CreateOverlay_ = {}, OVR::OpenVR::IVROverlay::_DestroyOverlay* DestroyOverlay_ = {}, OVR::OpenVR::IVROverlay::_SetHighQualityOverlay* SetHighQualityOverlay_ = {}, OVR::OpenVR::IVROverlay::_GetHighQualityOverlay* GetHighQualityOverlay_ = {}, OVR::OpenVR::IVROverlay::_GetOverlayKey* GetOverlayKey_ = {}, OVR::OpenVR::IVROverlay::_GetOverlayName* GetOverlayName_ = {}, OVR::OpenVR::IVROverlay::_SetOverlayName* SetOverlayName_ = {}, OVR::OpenVR::IVROverlay::_GetOverlayImageData* GetOverlayImageData_ = {}, OVR::OpenVR::IVROverlay::_GetOverlayErrorNameFromEnum* GetOverlayErrorNameFromEnum_ = {}, OVR::OpenVR::IVROverlay::_SetOverlayRenderingPid* SetOverlayRenderingPid_ = {}, OVR::OpenVR::IVROverlay::_GetOverlayRenderingPid* GetOverlayRenderingPid_ = {}, OVR::OpenVR::IVROverlay::_SetOverlayFlag* SetOverlayFlag_ = {}, OVR::OpenVR::IVROverlay::_GetOverlayFlag* GetOverlayFlag_ = {}, OVR::OpenVR::IVROverlay::_SetOverlayColor* SetOverlayColor_ = {}, OVR::OpenVR::IVROverlay::_GetOverlayColor* GetOverlayColor_ = {}, OVR::OpenVR::IVROverlay::_SetOverlayAlpha* SetOverlayAlpha_ = {}, OVR::OpenVR::IVROverlay::_GetOverlayAlpha* GetOverlayAlpha_ = {}, OVR::OpenVR::IVROverlay::_SetOverlayTexelAspect* SetOverlayTexelAspect_ = {}, OVR::OpenVR::IVROverlay::_GetOverlayTexelAspect* GetOverlayTexelAspect_ = {}, OVR::OpenVR::IVROverlay::_SetOverlaySortOrder* SetOverlaySortOrder_ = {}, OVR::OpenVR::IVROverlay::_GetOverlaySortOrder* GetOverlaySortOrder_ = {}, OVR::OpenVR::IVROverlay::_SetOverlayWidthInMeters* SetOverlayWidthInMeters_ = {}, OVR::OpenVR::IVROverlay::_GetOverlayWidthInMeters* GetOverlayWidthInMeters_ = {}, OVR::OpenVR::IVROverlay::_SetOverlayAutoCurveDistanceRangeInMeters* SetOverlayAutoCurveDistanceRangeInMeters_ = {}, OVR::OpenVR::IVROverlay::_GetOverlayAutoCurveDistanceRangeInMeters* GetOverlayAutoCurveDistanceRangeInMeters_ = {}, OVR::OpenVR::IVROverlay::_SetOverlayTextureColorSpace* SetOverlayTextureColorSpace_ = {}, OVR::OpenVR::IVROverlay::_GetOverlayTextureColorSpace* GetOverlayTextureColorSpace_ = {}, OVR::OpenVR::IVROverlay::_SetOverlayTextureBounds* SetOverlayTextureBounds_ = {}, OVR::OpenVR::IVROverlay::_GetOverlayTextureBounds* GetOverlayTextureBounds_ = {}, OVR::OpenVR::IVROverlay::_GetOverlayRenderModel* GetOverlayRenderModel_ = {}, OVR::OpenVR::IVROverlay::_SetOverlayRenderModel* SetOverlayRenderModel_ = {}, OVR::OpenVR::IVROverlay::_GetOverlayTransformType* GetOverlayTransformType_ = {}, OVR::OpenVR::IVROverlay::_SetOverlayTransformAbsolute* SetOverlayTransformAbsolute_ = {}, OVR::OpenVR::IVROverlay::_GetOverlayTransformAbsolute* GetOverlayTransformAbsolute_ = {}, OVR::OpenVR::IVROverlay::_SetOverlayTransformTrackedDeviceRelative* SetOverlayTransformTrackedDeviceRelative_ = {}, OVR::OpenVR::IVROverlay::_GetOverlayTransformTrackedDeviceRelative* GetOverlayTransformTrackedDeviceRelative_ = {}, OVR::OpenVR::IVROverlay::_SetOverlayTransformTrackedDeviceComponent* SetOverlayTransformTrackedDeviceComponent_ = {}, OVR::OpenVR::IVROverlay::_GetOverlayTransformTrackedDeviceComponent* GetOverlayTransformTrackedDeviceComponent_ = {}, OVR::OpenVR::IVROverlay::_GetOverlayTransformOverlayRelative* GetOverlayTransformOverlayRelative_ = {}, OVR::OpenVR::IVROverlay::_SetOverlayTransformOverlayRelative* SetOverlayTransformOverlayRelative_ = {}, OVR::OpenVR::IVROverlay::_ShowOverlay* ShowOverlay_ = {}, OVR::OpenVR::IVROverlay::_HideOverlay* HideOverlay_ = {}, OVR::OpenVR::IVROverlay::_IsOverlayVisible* IsOverlayVisible_ = {}, OVR::OpenVR::IVROverlay::_GetTransformForOverlayCoordinates* GetTransformForOverlayCoordinates_ = {}, OVR::OpenVR::IVROverlay::_PollNextOverlayEvent* PollNextOverlayEvent_ = {}, OVR::OpenVR::IVROverlay::_GetOverlayInputMethod* GetOverlayInputMethod_ = {}, OVR::OpenVR::IVROverlay::_SetOverlayInputMethod* SetOverlayInputMethod_ = {}, OVR::OpenVR::IVROverlay::_GetOverlayMouseScale* GetOverlayMouseScale_ = {}, OVR::OpenVR::IVROverlay::_SetOverlayMouseScale* SetOverlayMouseScale_ = {}, OVR::OpenVR::IVROverlay::_ComputeOverlayIntersection* ComputeOverlayIntersection_ = {}, OVR::OpenVR::IVROverlay::_IsHoverTargetOverlay* IsHoverTargetOverlay_ = {}, OVR::OpenVR::IVROverlay::_GetGamepadFocusOverlay* GetGamepadFocusOverlay_ = {}, OVR::OpenVR::IVROverlay::_SetGamepadFocusOverlay* SetGamepadFocusOverlay_ = {}, OVR::OpenVR::IVROverlay::_SetOverlayNeighbor* SetOverlayNeighbor_ = {}, OVR::OpenVR::IVROverlay::_MoveGamepadFocusToNeighbor* MoveGamepadFocusToNeighbor_ = {}, OVR::OpenVR::IVROverlay::_SetOverlayDualAnalogTransform* SetOverlayDualAnalogTransform_ = {}, OVR::OpenVR::IVROverlay::_GetOverlayDualAnalogTransform* GetOverlayDualAnalogTransform_ = {}, OVR::OpenVR::IVROverlay::_SetOverlayTexture* SetOverlayTexture_ = {}, OVR::OpenVR::IVROverlay::_ClearOverlayTexture* ClearOverlayTexture_ = {}, OVR::OpenVR::IVROverlay::_SetOverlayRaw* SetOverlayRaw_ = {}, OVR::OpenVR::IVROverlay::_SetOverlayFromFile* SetOverlayFromFile_ = {}, OVR::OpenVR::IVROverlay::_GetOverlayTexture* GetOverlayTexture_ = {}, OVR::OpenVR::IVROverlay::_ReleaseNativeOverlayHandle* ReleaseNativeOverlayHandle_ = {}, OVR::OpenVR::IVROverlay::_GetOverlayTextureSize* GetOverlayTextureSize_ = {}, OVR::OpenVR::IVROverlay::_CreateDashboardOverlay* CreateDashboardOverlay_ = {}, OVR::OpenVR::IVROverlay::_IsDashboardVisible* IsDashboardVisible_ = {}, OVR::OpenVR::IVROverlay::_IsActiveDashboardOverlay* IsActiveDashboardOverlay_ = {}, OVR::OpenVR::IVROverlay::_SetDashboardOverlaySceneProcess* SetDashboardOverlaySceneProcess_ = {}, OVR::OpenVR::IVROverlay::_GetDashboardOverlaySceneProcess* GetDashboardOverlaySceneProcess_ = {}, OVR::OpenVR::IVROverlay::_ShowDashboard* ShowDashboard_ = {}, OVR::OpenVR::IVROverlay::_GetPrimaryDashboardDevice* GetPrimaryDashboardDevice_ = {}, OVR::OpenVR::IVROverlay::_ShowKeyboard* ShowKeyboard_ = {}, OVR::OpenVR::IVROverlay::_ShowKeyboardForOverlay* ShowKeyboardForOverlay_ = {}, OVR::OpenVR::IVROverlay::_GetKeyboardText* GetKeyboardText_ = {}, OVR::OpenVR::IVROverlay::_HideKeyboard* HideKeyboard_ = {}, OVR::OpenVR::IVROverlay::_SetKeyboardTransformAbsolute* SetKeyboardTransformAbsolute_ = {}, OVR::OpenVR::IVROverlay::_SetKeyboardPositionForOverlay* SetKeyboardPositionForOverlay_ = {}, OVR::OpenVR::IVROverlay::_SetOverlayIntersectionMask* SetOverlayIntersectionMask_ = {}, OVR::OpenVR::IVROverlay::_GetOverlayFlags* GetOverlayFlags_ = {}, OVR::OpenVR::IVROverlay::_ShowMessageOverlay* ShowMessageOverlay_ = {}, OVR::OpenVR::IVROverlay::_CloseMessageOverlay* CloseMessageOverlay_ = {}) noexcept : FindOverlay{FindOverlay_}, CreateOverlay{CreateOverlay_}, DestroyOverlay{DestroyOverlay_}, SetHighQualityOverlay{SetHighQualityOverlay_}, GetHighQualityOverlay{GetHighQualityOverlay_}, GetOverlayKey{GetOverlayKey_}, GetOverlayName{GetOverlayName_}, SetOverlayName{SetOverlayName_}, GetOverlayImageData{GetOverlayImageData_}, GetOverlayErrorNameFromEnum{GetOverlayErrorNameFromEnum_}, SetOverlayRenderingPid{SetOverlayRenderingPid_}, GetOverlayRenderingPid{GetOverlayRenderingPid_}, SetOverlayFlag{SetOverlayFlag_}, GetOverlayFlag{GetOverlayFlag_}, SetOverlayColor{SetOverlayColor_}, GetOverlayColor{GetOverlayColor_}, SetOverlayAlpha{SetOverlayAlpha_}, GetOverlayAlpha{GetOverlayAlpha_}, SetOverlayTexelAspect{SetOverlayTexelAspect_}, GetOverlayTexelAspect{GetOverlayTexelAspect_}, SetOverlaySortOrder{SetOverlaySortOrder_}, GetOverlaySortOrder{GetOverlaySortOrder_}, SetOverlayWidthInMeters{SetOverlayWidthInMeters_}, GetOverlayWidthInMeters{GetOverlayWidthInMeters_}, SetOverlayAutoCurveDistanceRangeInMeters{SetOverlayAutoCurveDistanceRangeInMeters_}, GetOverlayAutoCurveDistanceRangeInMeters{GetOverlayAutoCurveDistanceRangeInMeters_}, SetOverlayTextureColorSpace{SetOverlayTextureColorSpace_}, GetOverlayTextureColorSpace{GetOverlayTextureColorSpace_}, SetOverlayTextureBounds{SetOverlayTextureBounds_}, GetOverlayTextureBounds{GetOverlayTextureBounds_}, GetOverlayRenderModel{GetOverlayRenderModel_}, SetOverlayRenderModel{SetOverlayRenderModel_}, GetOverlayTransformType{GetOverlayTransformType_}, SetOverlayTransformAbsolute{SetOverlayTransformAbsolute_}, GetOverlayTransformAbsolute{GetOverlayTransformAbsolute_}, SetOverlayTransformTrackedDeviceRelative{SetOverlayTransformTrackedDeviceRelative_}, GetOverlayTransformTrackedDeviceRelative{GetOverlayTransformTrackedDeviceRelative_}, SetOverlayTransformTrackedDeviceComponent{SetOverlayTransformTrackedDeviceComponent_}, GetOverlayTransformTrackedDeviceComponent{GetOverlayTransformTrackedDeviceComponent_}, GetOverlayTransformOverlayRelative{GetOverlayTransformOverlayRelative_}, SetOverlayTransformOverlayRelative{SetOverlayTransformOverlayRelative_}, ShowOverlay{ShowOverlay_}, HideOverlay{HideOverlay_}, IsOverlayVisible{IsOverlayVisible_}, GetTransformForOverlayCoordinates{GetTransformForOverlayCoordinates_}, PollNextOverlayEvent{PollNextOverlayEvent_}, GetOverlayInputMethod{GetOverlayInputMethod_}, SetOverlayInputMethod{SetOverlayInputMethod_}, GetOverlayMouseScale{GetOverlayMouseScale_}, SetOverlayMouseScale{SetOverlayMouseScale_}, ComputeOverlayIntersection{ComputeOverlayIntersection_}, IsHoverTargetOverlay{IsHoverTargetOverlay_}, GetGamepadFocusOverlay{GetGamepadFocusOverlay_}, SetGamepadFocusOverlay{SetGamepadFocusOverlay_}, SetOverlayNeighbor{SetOverlayNeighbor_}, MoveGamepadFocusToNeighbor{MoveGamepadFocusToNeighbor_}, SetOverlayDualAnalogTransform{SetOverlayDualAnalogTransform_}, GetOverlayDualAnalogTransform{GetOverlayDualAnalogTransform_}, SetOverlayTexture{SetOverlayTexture_}, ClearOverlayTexture{ClearOverlayTexture_}, SetOverlayRaw{SetOverlayRaw_}, SetOverlayFromFile{SetOverlayFromFile_}, GetOverlayTexture{GetOverlayTexture_}, ReleaseNativeOverlayHandle{ReleaseNativeOverlayHandle_}, GetOverlayTextureSize{GetOverlayTextureSize_}, CreateDashboardOverlay{CreateDashboardOverlay_}, IsDashboardVisible{IsDashboardVisible_}, IsActiveDashboardOverlay{IsActiveDashboardOverlay_}, SetDashboardOverlaySceneProcess{SetDashboardOverlaySceneProcess_}, GetDashboardOverlaySceneProcess{GetDashboardOverlaySceneProcess_}, ShowDashboard{ShowDashboard_}, GetPrimaryDashboardDevice{GetPrimaryDashboardDevice_}, ShowKeyboard{ShowKeyboard_}, ShowKeyboardForOverlay{ShowKeyboardForOverlay_}, GetKeyboardText{GetKeyboardText_}, HideKeyboard{HideKeyboard_}, SetKeyboardTransformAbsolute{SetKeyboardTransformAbsolute_}, SetKeyboardPositionForOverlay{SetKeyboardPositionForOverlay_}, SetOverlayIntersectionMask{SetOverlayIntersectionMask_}, GetOverlayFlags{GetOverlayFlags_}, ShowMessageOverlay{ShowMessageOverlay_}, CloseMessageOverlay{CloseMessageOverlay_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
  }; // OVR.OpenVR.IVROverlay
  #pragma pack(pop)
  static check_size<sizeof(IVROverlay), 648 + sizeof(OVR::OpenVR::IVROverlay::_CloseMessageOverlay*)> __OVR_OpenVR_IVROverlaySizeCheck;
  static_assert(sizeof(IVROverlay) == 0x290);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(OVR::OpenVR::IVROverlay, "OVR.OpenVR", "IVROverlay");
