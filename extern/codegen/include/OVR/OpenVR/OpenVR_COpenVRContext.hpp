// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.OpenVR
#include "OVR/OpenVR/OpenVR.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: OVR::OpenVR
namespace OVR::OpenVR {
  // Forward declaring type: CVRSystem
  class CVRSystem;
  // Forward declaring type: CVRChaperone
  class CVRChaperone;
  // Forward declaring type: CVRChaperoneSetup
  class CVRChaperoneSetup;
  // Forward declaring type: CVRCompositor
  class CVRCompositor;
  // Forward declaring type: CVROverlay
  class CVROverlay;
  // Forward declaring type: CVRRenderModels
  class CVRRenderModels;
  // Forward declaring type: CVRExtendedDisplay
  class CVRExtendedDisplay;
  // Forward declaring type: CVRSettings
  class CVRSettings;
  // Forward declaring type: CVRApplications
  class CVRApplications;
  // Forward declaring type: CVRScreenshots
  class CVRScreenshots;
  // Forward declaring type: CVRTrackedCamera
  class CVRTrackedCamera;
  // Forward declaring type: CVRInput
  class CVRInput;
  // Forward declaring type: CVRSpatialAnchors
  class CVRSpatialAnchors;
}
// Completed forward declares
// Type namespace: OVR.OpenVR
namespace OVR::OpenVR {
  // Autogenerated type: OVR.OpenVR.OpenVR/COpenVRContext
  class OpenVR::COpenVRContext : public ::Il2CppObject {
    public:
    // private OVR.OpenVR.CVRSystem m_pVRSystem
    // Offset: 0x10
    OVR::OpenVR::CVRSystem* m_pVRSystem;
    // private OVR.OpenVR.CVRChaperone m_pVRChaperone
    // Offset: 0x18
    OVR::OpenVR::CVRChaperone* m_pVRChaperone;
    // private OVR.OpenVR.CVRChaperoneSetup m_pVRChaperoneSetup
    // Offset: 0x20
    OVR::OpenVR::CVRChaperoneSetup* m_pVRChaperoneSetup;
    // private OVR.OpenVR.CVRCompositor m_pVRCompositor
    // Offset: 0x28
    OVR::OpenVR::CVRCompositor* m_pVRCompositor;
    // private OVR.OpenVR.CVROverlay m_pVROverlay
    // Offset: 0x30
    OVR::OpenVR::CVROverlay* m_pVROverlay;
    // private OVR.OpenVR.CVRRenderModels m_pVRRenderModels
    // Offset: 0x38
    OVR::OpenVR::CVRRenderModels* m_pVRRenderModels;
    // private OVR.OpenVR.CVRExtendedDisplay m_pVRExtendedDisplay
    // Offset: 0x40
    OVR::OpenVR::CVRExtendedDisplay* m_pVRExtendedDisplay;
    // private OVR.OpenVR.CVRSettings m_pVRSettings
    // Offset: 0x48
    OVR::OpenVR::CVRSettings* m_pVRSettings;
    // private OVR.OpenVR.CVRApplications m_pVRApplications
    // Offset: 0x50
    OVR::OpenVR::CVRApplications* m_pVRApplications;
    // private OVR.OpenVR.CVRScreenshots m_pVRScreenshots
    // Offset: 0x58
    OVR::OpenVR::CVRScreenshots* m_pVRScreenshots;
    // private OVR.OpenVR.CVRTrackedCamera m_pVRTrackedCamera
    // Offset: 0x60
    OVR::OpenVR::CVRTrackedCamera* m_pVRTrackedCamera;
    // private OVR.OpenVR.CVRInput m_pVRInput
    // Offset: 0x68
    OVR::OpenVR::CVRInput* m_pVRInput;
    // private OVR.OpenVR.CVRSpatialAnchors m_pVRSpatialAnchors
    // Offset: 0x70
    OVR::OpenVR::CVRSpatialAnchors* m_pVRSpatialAnchors;
    // public System.Void Clear()
    // Offset: 0xCC7E94
    void Clear();
    // private System.Void CheckClear()
    // Offset: 0xCC7FE0
    void CheckClear();
    // public OVR.OpenVR.CVRSystem VRSystem()
    // Offset: 0xCC6D64
    OVR::OpenVR::CVRSystem* VRSystem();
    // public OVR.OpenVR.CVRChaperone VRChaperone()
    // Offset: 0xCC6E90
    OVR::OpenVR::CVRChaperone* VRChaperone();
    // public OVR.OpenVR.CVRChaperoneSetup VRChaperoneSetup()
    // Offset: 0xCC6FBC
    OVR::OpenVR::CVRChaperoneSetup* VRChaperoneSetup();
    // public OVR.OpenVR.CVRCompositor VRCompositor()
    // Offset: 0xCC70E8
    OVR::OpenVR::CVRCompositor* VRCompositor();
    // public OVR.OpenVR.CVROverlay VROverlay()
    // Offset: 0xCC7214
    OVR::OpenVR::CVROverlay* VROverlay();
    // public OVR.OpenVR.CVRRenderModels VRRenderModels()
    // Offset: 0xCC7340
    OVR::OpenVR::CVRRenderModels* VRRenderModels();
    // public OVR.OpenVR.CVRExtendedDisplay VRExtendedDisplay()
    // Offset: 0xCC746C
    OVR::OpenVR::CVRExtendedDisplay* VRExtendedDisplay();
    // public OVR.OpenVR.CVRSettings VRSettings()
    // Offset: 0xCC7598
    OVR::OpenVR::CVRSettings* VRSettings();
    // public OVR.OpenVR.CVRApplications VRApplications()
    // Offset: 0xCC76C4
    OVR::OpenVR::CVRApplications* VRApplications();
    // public OVR.OpenVR.CVRScreenshots VRScreenshots()
    // Offset: 0xCC77F0
    OVR::OpenVR::CVRScreenshots* VRScreenshots();
    // public OVR.OpenVR.CVRTrackedCamera VRTrackedCamera()
    // Offset: 0xCC791C
    OVR::OpenVR::CVRTrackedCamera* VRTrackedCamera();
    // public OVR.OpenVR.CVRInput VRInput()
    // Offset: 0xCC7A48
    OVR::OpenVR::CVRInput* VRInput();
    // public OVR.OpenVR.CVRSpatialAnchors VRSpatialAnchors()
    // Offset: 0xCC7B74
    OVR::OpenVR::CVRSpatialAnchors* VRSpatialAnchors();
    // public System.Void .ctor()
    // Offset: 0xCC6CD4
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static OpenVR::COpenVRContext* New_ctor();
  }; // OVR.OpenVR.OpenVR/COpenVRContext
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(OVR::OpenVR::OpenVR::COpenVRContext*, "OVR.OpenVR", "OpenVR/COpenVRContext");
#pragma pack(pop)
