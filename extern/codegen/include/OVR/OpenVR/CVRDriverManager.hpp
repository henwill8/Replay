// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVR.OpenVR.IVRDriverManager
#include "OVR/OpenVR/IVRDriverManager.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: OVR.OpenVR
namespace OVR::OpenVR {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: OVR.OpenVR.CVRDriverManager
  // [] Offset: FFFFFFFF
  class CVRDriverManager : public ::Il2CppObject {
    public:
    // private OVR.OpenVR.IVRDriverManager FnTable
    // Size: 0x18
    // Offset: 0x10
    OVR::OpenVR::IVRDriverManager FnTable;
    // Field size check
    static_assert(sizeof(OVR::OpenVR::IVRDriverManager) == 0x18);
    // Creating value type constructor for type: CVRDriverManager
    CVRDriverManager(OVR::OpenVR::IVRDriverManager FnTable_ = {}) noexcept : FnTable{FnTable_} {}
    // Creating conversion operator: operator OVR::OpenVR::IVRDriverManager
    constexpr operator OVR::OpenVR::IVRDriverManager() const noexcept {
      return FnTable;
    }
    // System.Void .ctor(System.IntPtr pInterface)
    // Offset: 0x1426B64
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CVRDriverManager* New_ctor(System::IntPtr pInterface) {
      static auto ___internal__logger = ::Logger::get().WithContext("OVR::OpenVR::CVRDriverManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CVRDriverManager*, creationType>(pInterface)));
    }
    // public System.UInt32 GetDriverCount()
    // Offset: 0x1426C74
    uint GetDriverCount();
    // public System.UInt32 GetDriverName(System.UInt32 nDriver, System.Text.StringBuilder pchValue, System.UInt32 unBufferSize)
    // Offset: 0x1426C90
    uint GetDriverName(uint nDriver, System::Text::StringBuilder* pchValue, uint unBufferSize);
    // public System.UInt64 GetDriverHandle(System.String pchDriverName)
    // Offset: 0x1426CAC
    uint64_t GetDriverHandle(::Il2CppString* pchDriverName);
  }; // OVR.OpenVR.CVRDriverManager
  #pragma pack(pop)
  static check_size<sizeof(CVRDriverManager), 16 + sizeof(OVR::OpenVR::IVRDriverManager)> __OVR_OpenVR_CVRDriverManagerSizeCheck;
  static_assert(sizeof(CVRDriverManager) == 0x28);
}
DEFINE_IL2CPP_ARG_TYPE(OVR::OpenVR::CVRDriverManager*, "OVR.OpenVR", "CVRDriverManager");
