// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NUnit.Framework.Constraints.ToleranceMode
#include "NUnit/Framework/Constraints/ToleranceMode.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: NUnit.Framework.Constraints
namespace NUnit::Framework::Constraints {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: NUnit.Framework.Constraints.Tolerance
  // [] Offset: FFFFFFFF
  class Tolerance : public ::Il2CppObject {
    public:
    // private readonly NUnit.Framework.Constraints.ToleranceMode mode
    // Size: 0x4
    // Offset: 0x10
    NUnit::Framework::Constraints::ToleranceMode mode;
    // Field size check
    static_assert(sizeof(NUnit::Framework::Constraints::ToleranceMode) == 0x4);
    // Padding between fields: mode and: amount
    char __padding0[0x4] = {};
    // private readonly System.Object amount
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* amount;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // Creating value type constructor for type: Tolerance
    Tolerance(NUnit::Framework::Constraints::ToleranceMode mode_ = {}, ::Il2CppObject* amount_ = {}) noexcept : mode{mode_}, amount{amount_} {}
    // static public NUnit.Framework.Constraints.Tolerance get_Default()
    // Offset: 0x1697BD0
    static NUnit::Framework::Constraints::Tolerance* get_Default();
    // static public NUnit.Framework.Constraints.Tolerance get_Exact()
    // Offset: 0x169F974
    static NUnit::Framework::Constraints::Tolerance* get_Exact();
    // public System.Void .ctor(System.Object amount)
    // Offset: 0x16A2884
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Tolerance* New_ctor(::Il2CppObject* amount) {
      static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::Tolerance::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Tolerance*, creationType>(amount)));
    }
    // private System.Void .ctor(System.Object amount, NUnit.Framework.Constraints.ToleranceMode mode)
    // Offset: 0x16A3130
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Tolerance* New_ctor(::Il2CppObject* amount, NUnit::Framework::Constraints::ToleranceMode mode) {
      static auto ___internal__logger = ::Logger::get().WithContext("NUnit::Framework::Constraints::Tolerance::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Tolerance*, creationType>(amount, mode)));
    }
    // public NUnit.Framework.Constraints.ToleranceMode get_Mode()
    // Offset: 0x1699D24
    NUnit::Framework::Constraints::ToleranceMode get_Mode();
    // public System.Object get_Value()
    // Offset: 0x1699D1C
    ::Il2CppObject* get_Value();
    // public System.Boolean get_IsUnsetOrDefault()
    // Offset: 0x1699D0C
    bool get_IsUnsetOrDefault();
  }; // NUnit.Framework.Constraints.Tolerance
  #pragma pack(pop)
  static check_size<sizeof(Tolerance), 24 + sizeof(::Il2CppObject*)> __NUnit_Framework_Constraints_ToleranceSizeCheck;
  static_assert(sizeof(Tolerance) == 0x20);
}
DEFINE_IL2CPP_ARG_TYPE(NUnit::Framework::Constraints::Tolerance*, "NUnit.Framework.Constraints", "Tolerance");
