// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Collections.Generic.KeyValuePair`2
#include "System/Collections/Generic/KeyValuePair_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: NUnit::Framework::Constraints
namespace NUnit::Framework::Constraints {
  // Forward declaring type: EqualityAdapter
  class EqualityAdapter;
  // Forward declaring type: Tolerance
  class Tolerance;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IList`1<T>
  template<typename T>
  class IList_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Array
  class Array;
}
// Forward declaring namespace: System::Reflection
namespace System::Reflection {
  // Forward declaring type: MethodInfo
  class MethodInfo;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IDictionary
  class IDictionary;
  // Forward declaring type: DictionaryEntry
  struct DictionaryEntry;
  // Forward declaring type: IEnumerable
  class IEnumerable;
}
// Forward declaring namespace: System::IO
namespace System::IO {
  // Forward declaring type: DirectoryInfo
  class DirectoryInfo;
  // Forward declaring type: Stream
  class Stream;
}
// Completed forward declares
// Type namespace: NUnit.Framework.Constraints
namespace NUnit::Framework::Constraints {
  // Autogenerated type: NUnit.Framework.Constraints.NUnitEqualityComparer
  class NUnitEqualityComparer : public ::Il2CppObject {
    public:
    // Nested type: NUnit::Framework::Constraints::NUnitEqualityComparer::FailurePoint
    class FailurePoint;
    // private System.Boolean caseInsensitive
    // Offset: 0x10
    bool caseInsensitive;
    // private System.Boolean compareAsCollection
    // Offset: 0x11
    bool compareAsCollection;
    // private System.Collections.Generic.List`1<NUnit.Framework.Constraints.EqualityAdapter> externalComparers
    // Offset: 0x18
    System::Collections::Generic::List_1<NUnit::Framework::Constraints::EqualityAdapter*>* externalComparers;
    // private System.Collections.Generic.List`1<NUnit.Framework.Constraints.NUnitEqualityComparer/FailurePoint> failurePoints
    // Offset: 0x20
    System::Collections::Generic::List_1<NUnit::Framework::Constraints::NUnitEqualityComparer::FailurePoint*>* failurePoints;
    // private System.Boolean <WithSameOffset>k__BackingField
    // Offset: 0x28
    bool WithSameOffset;
    // Get static field: static private readonly System.Int32 BUFFER_SIZE
    static int _get_BUFFER_SIZE();
    // Set static field: static private readonly System.Int32 BUFFER_SIZE
    static void _set_BUFFER_SIZE(int value);
    // Get static field: static private readonly System.Type GameObjectType
    static System::Type* _get_GameObjectType();
    // Set static field: static private readonly System.Type GameObjectType
    static void _set_GameObjectType(System::Type* value);
    // public System.Boolean get_IgnoreCase()
    // Offset: 0x1076C18
    bool get_IgnoreCase();
    // public System.Collections.Generic.IList`1<NUnit.Framework.Constraints.NUnitEqualityComparer/FailurePoint> get_FailurePoints()
    // Offset: 0x1076C50
    System::Collections::Generic::IList_1<NUnit::Framework::Constraints::NUnitEqualityComparer::FailurePoint*>* get_FailurePoints();
    // public System.Boolean get_WithSameOffset()
    // Offset: 0x107C488
    bool get_WithSameOffset();
    // public System.Boolean AreEqual(System.Object x, System.Object y, ref NUnit.Framework.Constraints.Tolerance tolerance)
    // Offset: 0x1075040
    bool AreEqual(::Il2CppObject* x, ::Il2CppObject* y, NUnit::Framework::Constraints::Tolerance*& tolerance);
    // static private System.Reflection.MethodInfo FirstImplementsIEquatableOfSecond(System.Type first, System.Type second)
    // Offset: 0x107DB80
    static System::Reflection::MethodInfo* FirstImplementsIEquatableOfSecond(System::Type* first, System::Type* second);
    // static private System.Collections.Generic.IList`1<System.Collections.Generic.KeyValuePair`2<System.Type,System.Reflection.MethodInfo>> GetEquatableGenericArguments(System.Type type)
    // Offset: 0x107E670
    static System::Collections::Generic::IList_1<System::Collections::Generic::KeyValuePair_2<System::Type*, System::Reflection::MethodInfo*>>* GetEquatableGenericArguments(System::Type* type);
    // static private System.Boolean InvokeFirstIEquatableEqualsSecond(System.Object first, System.Object second, System.Reflection.MethodInfo equals)
    // Offset: 0x107DE84
    static bool InvokeFirstIEquatableEqualsSecond(::Il2CppObject* first, ::Il2CppObject* second, System::Reflection::MethodInfo* equals);
    // private NUnit.Framework.Constraints.EqualityAdapter GetExternalComparer(System.Object x, System.Object y)
    // Offset: 0x107C490
    NUnit::Framework::Constraints::EqualityAdapter* GetExternalComparer(::Il2CppObject* x, ::Il2CppObject* y);
    // private System.Boolean ArraysEqual(System.Array x, System.Array y, ref NUnit.Framework.Constraints.Tolerance tolerance)
    // Offset: 0x107C5BC
    bool ArraysEqual(System::Array* x, System::Array* y, NUnit::Framework::Constraints::Tolerance*& tolerance);
    // private System.Boolean DictionariesEqual(System.Collections.IDictionary x, System.Collections.IDictionary y, ref NUnit.Framework.Constraints.Tolerance tolerance)
    // Offset: 0x107C69C
    bool DictionariesEqual(System::Collections::IDictionary* x, System::Collections::IDictionary* y, NUnit::Framework::Constraints::Tolerance*& tolerance);
    // private System.Boolean DictionaryEntriesEqual(System.Collections.DictionaryEntry x, System.Collections.DictionaryEntry y, ref NUnit.Framework.Constraints.Tolerance tolerance)
    // Offset: 0x107CCBC
    bool DictionaryEntriesEqual(System::Collections::DictionaryEntry x, System::Collections::DictionaryEntry y, NUnit::Framework::Constraints::Tolerance*& tolerance);
    // private System.Boolean StringsEqual(System.String x, System.String y)
    // Offset: 0x107CDE0
    bool StringsEqual(::Il2CppString* x, ::Il2CppString* y);
    // private System.Boolean CharsEqual(System.Char x, System.Char y)
    // Offset: 0x107D4A8
    bool CharsEqual(::Il2CppChar x, ::Il2CppChar y);
    // private System.Boolean EnumerablesEqual(System.Collections.IEnumerable x, System.Collections.IEnumerable y, ref NUnit.Framework.Constraints.Tolerance tolerance)
    // Offset: 0x107E034
    bool EnumerablesEqual(System::Collections::IEnumerable* x, System::Collections::IEnumerable* y, NUnit::Framework::Constraints::Tolerance*& tolerance);
    // static private System.Boolean DirectoriesEqual(System.IO.DirectoryInfo x, System.IO.DirectoryInfo y)
    // Offset: 0x107D56C
    static bool DirectoriesEqual(System::IO::DirectoryInfo* x, System::IO::DirectoryInfo* y);
    // private System.Boolean StreamsEqual(System.IO.Stream x, System.IO.Stream y)
    // Offset: 0x107CE58
    bool StreamsEqual(System::IO::Stream* x, System::IO::Stream* y);
    // static System.Void CheckGameObjectReference(ref T value)
    // Offset: 0xFFFFFFFF
    template<class T>
    static void CheckGameObjectReference(T& value) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod("NUnit.Framework.Constraints", "NUnitEqualityComparer", "CheckGameObjectReference", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, value));
    }
    // static private System.Void .cctor()
    // Offset: 0x107E8E4
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x1076B78
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static NUnitEqualityComparer* New_ctor();
  }; // NUnit.Framework.Constraints.NUnitEqualityComparer
}
DEFINE_IL2CPP_ARG_TYPE(NUnit::Framework::Constraints::NUnitEqualityComparer*, "NUnit.Framework.Constraints", "NUnitEqualityComparer");
#pragma pack(pop)
