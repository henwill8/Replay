// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.FactoryArgumentsToChoiceBinder`1
#include "Zenject/FactoryArgumentsToChoiceBinder_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: MemoryPoolBindInfo
  class MemoryPoolBindInfo;
  // Forward declaring type: DiContainer
  class DiContainer;
  // Forward declaring type: BindInfo
  class BindInfo;
  // Forward declaring type: FactoryBindInfo
  class FactoryBindInfo;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // WARNING Size may be invalid!
  // Autogenerated type: Zenject.MemoryPoolExpandBinder`1
  // [] Offset: FFFFFFFF
  // [NoReflectionBakingAttribute] Offset: D040F4
  template<typename TContract>
  class MemoryPoolExpandBinder_1 : public Zenject::FactoryArgumentsToChoiceBinder_1<TContract> {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xD0613C
    // private Zenject.MemoryPoolBindInfo <MemoryPoolBindInfo>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    Zenject::MemoryPoolBindInfo* MemoryPoolBindInfo;
    // Field size check
    static_assert(sizeof(Zenject::MemoryPoolBindInfo*) == 0x8);
    // Creating value type constructor for type: MemoryPoolExpandBinder_1
    MemoryPoolExpandBinder_1(Zenject::MemoryPoolBindInfo* MemoryPoolBindInfo_ = {}) noexcept : MemoryPoolBindInfo{MemoryPoolBindInfo_} {}
    // public System.Void .ctor(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo, Zenject.MemoryPoolBindInfo poolBindInfo)
    // Offset: 0xFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MemoryPoolExpandBinder_1<TContract>* New_ctor(Zenject::DiContainer* bindContainer, Zenject::BindInfo* bindInfo, Zenject::FactoryBindInfo* factoryBindInfo, Zenject::MemoryPoolBindInfo* poolBindInfo) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MemoryPoolExpandBinder_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MemoryPoolExpandBinder_1<TContract>*, creationType>(bindContainer, bindInfo, factoryBindInfo, poolBindInfo)));
    }
    // protected Zenject.MemoryPoolBindInfo get_MemoryPoolBindInfo()
    // Offset: 0xFFFFFFFF
    Zenject::MemoryPoolBindInfo* get_MemoryPoolBindInfo() {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MemoryPoolExpandBinder_1::get_MemoryPoolBindInfo");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_MemoryPoolBindInfo", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<Zenject::MemoryPoolBindInfo*, false>(this, ___internal__method);
    }
    // private System.Void set_MemoryPoolBindInfo(Zenject.MemoryPoolBindInfo value)
    // Offset: 0xFFFFFFFF
    void set_MemoryPoolBindInfo(Zenject::MemoryPoolBindInfo* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MemoryPoolExpandBinder_1::set_MemoryPoolBindInfo");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_MemoryPoolBindInfo", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
    }
    // public Zenject.FactoryArgumentsToChoiceBinder`1<TContract> ExpandByOneAtATime()
    // Offset: 0xFFFFFFFF
    Zenject::FactoryArgumentsToChoiceBinder_1<TContract>* ExpandByOneAtATime() {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MemoryPoolExpandBinder_1::ExpandByOneAtATime");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ExpandByOneAtATime", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<Zenject::FactoryArgumentsToChoiceBinder_1<TContract>*, false>(this, ___internal__method);
    }
    // public Zenject.FactoryArgumentsToChoiceBinder`1<TContract> ExpandByDoubling()
    // Offset: 0xFFFFFFFF
    Zenject::FactoryArgumentsToChoiceBinder_1<TContract>* ExpandByDoubling() {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MemoryPoolExpandBinder_1::ExpandByDoubling");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ExpandByDoubling", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<Zenject::FactoryArgumentsToChoiceBinder_1<TContract>*, false>(this, ___internal__method);
    }
  }; // Zenject.MemoryPoolExpandBinder`1
  // Could not write size check! Type: Zenject.MemoryPoolExpandBinder`1 is generic, or has no fields that are valid for size checks!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(Zenject::MemoryPoolExpandBinder_1, "Zenject", "MemoryPoolExpandBinder`1");
