// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.IInitializable
#include "Zenject/IInitializable.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: Zenject.ITickable
#include "Zenject/ITickable.hpp"
// Including type: Zenject.ILateTickable
#include "Zenject/ILateTickable.hpp"
// Including type: Zenject.IFixedTickable
#include "Zenject/IFixedTickable.hpp"
// Including type: Zenject.ILateDisposable
#include "Zenject/ILateDisposable.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: TickableManager
  class TickableManager;
  // Forward declaring type: InitializableManager
  class InitializableManager;
  // Forward declaring type: DisposableManager
  class DisposableManager;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Autogenerated type: Zenject.Kernel
  class Kernel : public ::Il2CppObject/*, public Zenject::IInitializable, public System::IDisposable, public Zenject::ITickable, public Zenject::ILateTickable, public Zenject::IFixedTickable, public Zenject::ILateDisposable*/ {
    public:
    // private Zenject.TickableManager _tickableManager
    // Offset: 0x10
    Zenject::TickableManager* tickableManager;
    // private Zenject.InitializableManager _initializableManager
    // Offset: 0x18
    Zenject::InitializableManager* initializableManager;
    // private Zenject.DisposableManager _disposablesManager
    // Offset: 0x20
    Zenject::DisposableManager* disposablesManager;
    // Creating interface conversion operator: operator Zenject::IInitializable
    operator Zenject::IInitializable() noexcept {
      return *reinterpret_cast<Zenject::IInitializable*>(this);
    }
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // Creating interface conversion operator: operator Zenject::ITickable
    operator Zenject::ITickable() noexcept {
      return *reinterpret_cast<Zenject::ITickable*>(this);
    }
    // Creating interface conversion operator: operator Zenject::ILateTickable
    operator Zenject::ILateTickable() noexcept {
      return *reinterpret_cast<Zenject::ILateTickable*>(this);
    }
    // Creating interface conversion operator: operator Zenject::IFixedTickable
    operator Zenject::IFixedTickable() noexcept {
      return *reinterpret_cast<Zenject::IFixedTickable*>(this);
    }
    // Creating interface conversion operator: operator Zenject::ILateDisposable
    operator Zenject::ILateDisposable() noexcept {
      return *reinterpret_cast<Zenject::ILateDisposable*>(this);
    }
    // public System.Void Initialize()
    // Offset: 0x13475EC
    // Implemented from: Zenject.IInitializable
    // Base method: System.Void IInitializable::Initialize()
    void Initialize();
    // public System.Void Dispose()
    // Offset: 0x1347608
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
    // public System.Void LateDispose()
    // Offset: 0x1347624
    // Implemented from: Zenject.ILateDisposable
    // Base method: System.Void ILateDisposable::LateDispose()
    void LateDispose();
    // public System.Void Tick()
    // Offset: 0x1347640
    // Implemented from: Zenject.ITickable
    // Base method: System.Void ITickable::Tick()
    void Tick();
    // public System.Void LateTick()
    // Offset: 0x13476DC
    // Implemented from: Zenject.ILateTickable
    // Base method: System.Void ILateTickable::LateTick()
    void LateTick();
    // public System.Void FixedTick()
    // Offset: 0x1347778
    // Implemented from: Zenject.IFixedTickable
    // Base method: System.Void IFixedTickable::FixedTick()
    void FixedTick();
    // public System.Void .ctor()
    // Offset: 0x1347814
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static Kernel* New_ctor();
  }; // Zenject.Kernel
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Zenject::Kernel*, "Zenject", "Kernel");
#pragma pack(pop)
