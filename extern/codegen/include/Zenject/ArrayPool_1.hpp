// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.StaticMemoryPoolBaseBase`1
#include "Zenject/StaticMemoryPoolBaseBase_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // WARNING Size may be invalid!
  // Autogenerated type: Zenject.ArrayPool`1
  // [] Offset: FFFFFFFF
  template<typename T>
  class ArrayPool_1 : public Zenject::StaticMemoryPoolBaseBase_1<::Array<T>*> {
    public:
    // private readonly System.Int32 _length
    // Size: 0x4
    // Offset: 0x0
    int length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: ArrayPool_1
    ArrayPool_1(int length_ = {}) noexcept : length{length_} {}
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return length;
    }
    // Autogenerated static field getter
    // Get static field: static private readonly System.Collections.Generic.Dictionary`2<System.Int32,Zenject.ArrayPool`1<T>> _pools
    static System::Collections::Generic::Dictionary_2<int, Zenject::ArrayPool_1<T>*>* _get__pools() {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ArrayPool_1::_get__pools");
      return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Collections::Generic::Dictionary_2<int, Zenject::ArrayPool_1<T>*>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ArrayPool_1<T>*>::get(), "_pools")));
    }
    // Autogenerated static field setter
    // Set static field: static private readonly System.Collections.Generic.Dictionary`2<System.Int32,Zenject.ArrayPool`1<T>> _pools
    static void _set__pools(System::Collections::Generic::Dictionary_2<int, Zenject::ArrayPool_1<T>*>* value) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ArrayPool_1::_set__pools");
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ArrayPool_1<T>*>::get(), "_pools", value));
    }
    // public System.Void .ctor(System.Int32 length)
    // Offset: 0xFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ArrayPool_1<T>* New_ctor(int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ArrayPool_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ArrayPool_1<T>*, creationType>(length)));
    }
    // static private System.Void OnDespawned(T[] arr)
    // Offset: 0xFFFFFFFF
    static void OnDespawned(::Array<T>* arr) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ArrayPool_1::OnDespawned");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ArrayPool_1<T>*>::get(), "OnDespawned", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(arr))));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, arr);
    }
    // public T[] Spawn()
    // Offset: 0xFFFFFFFF
    ::Array<T>* Spawn() {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ArrayPool_1::Spawn");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Spawn", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<::Array<T>*, false>(this, ___internal__method);
    }
    // protected T[] Alloc()
    // Offset: 0xFFFFFFFF
    ::Array<T>* Alloc() {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ArrayPool_1::Alloc");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Alloc", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<::Array<T>*, false>(this, ___internal__method);
    }
    // static public Zenject.ArrayPool`1<T> GetPool(System.Int32 length)
    // Offset: 0xFFFFFFFF
    static Zenject::ArrayPool_1<T>* GetPool(int length) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ArrayPool_1::GetPool");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ArrayPool_1<T>*>::get(), "GetPool", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(length))));
      return ::il2cpp_utils::RunMethodThrow<Zenject::ArrayPool_1<T>*, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method, length);
    }
    // static private System.Void .cctor()
    // Offset: 0xFFFFFFFF
    static void _cctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ArrayPool_1::.cctor");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<ArrayPool_1<T>*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
    }
  }; // Zenject.ArrayPool`1
  // Could not write size check! Type: Zenject.ArrayPool`1 is generic, or has no fields that are valid for size checks!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(Zenject::ArrayPool_1, "Zenject", "ArrayPool`1");
