// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: IGuiRenderable
  class IGuiRenderable;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: ModestTree::Util
namespace ModestTree::Util {
  // Forward declaring type: ValuePair`2<T1, T2>
  template<typename T1, typename T2>
  class ValuePair_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Zenject.GuiRenderableManager
  // [] Offset: FFFFFFFF
  class GuiRenderableManager : public ::Il2CppObject {
    public:
    // Nested type: Zenject::GuiRenderableManager::RenderableInfo
    class RenderableInfo;
    // Nested type: Zenject::GuiRenderableManager::$$c__DisplayClass1_0
    class $$c__DisplayClass1_0;
    // Nested type: Zenject::GuiRenderableManager::$$c
    class $$c;
    // private System.Collections.Generic.List`1<Zenject.GuiRenderableManager/RenderableInfo> _renderables
    // Size: 0x8
    // Offset: 0x10
    System::Collections::Generic::List_1<Zenject::GuiRenderableManager::RenderableInfo*>* renderables;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<Zenject::GuiRenderableManager::RenderableInfo*>*) == 0x8);
    // Creating value type constructor for type: GuiRenderableManager
    GuiRenderableManager(System::Collections::Generic::List_1<Zenject::GuiRenderableManager::RenderableInfo*>* renderables_ = {}) noexcept : renderables{renderables_} {}
    // Creating conversion operator: operator System::Collections::Generic::List_1<Zenject::GuiRenderableManager::RenderableInfo*>*
    constexpr operator System::Collections::Generic::List_1<Zenject::GuiRenderableManager::RenderableInfo*>*() const noexcept {
      return renderables;
    }
    // public System.Void .ctor(System.Collections.Generic.List`1<Zenject.IGuiRenderable> renderables, System.Collections.Generic.List`1<ModestTree.Util.ValuePair`2<System.Type,System.Int32>> priorities)
    // Offset: 0x14ED960
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GuiRenderableManager* New_ctor(System::Collections::Generic::List_1<Zenject::IGuiRenderable*>* renderables, System::Collections::Generic::List_1<ModestTree::Util::ValuePair_2<System::Type*, int>*>* priorities) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::GuiRenderableManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GuiRenderableManager*, creationType>(renderables, priorities)));
    }
    // public System.Void OnGui()
    // Offset: 0x14EDE30
    void OnGui();
  }; // Zenject.GuiRenderableManager
  #pragma pack(pop)
  static check_size<sizeof(GuiRenderableManager), 16 + sizeof(System::Collections::Generic::List_1<Zenject::GuiRenderableManager::RenderableInfo*>*)> __Zenject_GuiRenderableManagerSizeCheck;
  static_assert(sizeof(GuiRenderableManager) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(Zenject::GuiRenderableManager*, "Zenject", "GuiRenderableManager");
