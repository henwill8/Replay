// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
// Including type: Zenject.FromBinderGeneric`1
#include "Zenject/FromBinderGeneric_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Zenject
namespace Zenject {
  // Skipping declaration: <>c__DisplayClass5_0 because it is already included!
  // Forward declaring type: FromBinderNonGeneric
  class FromBinderNonGeneric;
  // Forward declaring type: ConventionSelectTypesBinder
  class ConventionSelectTypesBinder;
  // Forward declaring type: IProvider
  class IProvider;
  // Forward declaring type: DiContainer
  class DiContainer;
  // Forward declaring type: BindInfo
  class BindInfo;
  // Forward declaring type: BindStatement
  class BindStatement;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // WARNING Size may be invalid!
  // Autogenerated type: Zenject.ConcreteBinderGeneric`1
  // [] Offset: FFFFFFFF
  // [NoReflectionBakingAttribute] Offset: D03CD4
  template<typename TContract>
  class ConcreteBinderGeneric_1 : public Zenject::FromBinderGeneric_1<TContract> {
    public:
    // Nested type: Zenject::ConcreteBinderGeneric_1::$$c__DisplayClass5_0<TContract>
    class $$c__DisplayClass5_0;
    // WARNING Size may be invalid!
    // Autogenerated type: Zenject.ConcreteBinderGeneric`1/<>c__DisplayClass5_0
    // [] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: D04D6C
    class $$c__DisplayClass5_0 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = ConcreteBinderGeneric_1<TContract>*;
      static constexpr std::string_view NESTED_NAME = "$$c__DisplayClass5_0";
      // public System.Type concreteType
      // Size: 0x8
      // Offset: 0x0
      System::Type* concreteType;
      // Field size check
      static_assert(sizeof(System::Type*) == 0x8);
      // Creating value type constructor for type: $$c__DisplayClass5_0
      $$c__DisplayClass5_0(System::Type* concreteType_ = {}) noexcept : concreteType{concreteType_} {}
      // Creating conversion operator: operator System::Type*
      constexpr operator System::Type*() const noexcept {
        return concreteType;
      }
      // System.Boolean <To>b__1(System.Type contractType)
      // Offset: 0xFFFFFFFF
      bool $To$b__1(System::Type* contractType) {
        static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConcreteBinderGeneric_1::$$c__DisplayClass5_0::<To>b__1");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<To>b__1", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(contractType))));
        return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, contractType);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename ConcreteBinderGeneric_1<TContract>::$$c__DisplayClass5_0* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConcreteBinderGeneric_1::$$c__DisplayClass5_0::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename ConcreteBinderGeneric_1<TContract>::$$c__DisplayClass5_0*, creationType>()));
      }
    }; // Zenject.ConcreteBinderGeneric`1/<>c__DisplayClass5_0
    // Could not write size check! Type: Zenject.ConcreteBinderGeneric`1/<>c__DisplayClass5_0 is generic, or has no fields that are valid for size checks!
    // Creating value type constructor for type: ConcreteBinderGeneric_1
    ConcreteBinderGeneric_1() noexcept {}
    // public Zenject.FromBinderGeneric`1<TContract> ToSelf()
    // Offset: 0xFFFFFFFF
    Zenject::FromBinderGeneric_1<TContract>* ToSelf() {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConcreteBinderGeneric_1::ToSelf");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ToSelf", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<Zenject::FromBinderGeneric_1<TContract>*, false>(this, ___internal__method);
    }
    // public Zenject.FromBinderGeneric`1<TConcrete> To()
    // Offset: 0xFFFFFFFF
    template<class TConcrete>
    Zenject::FromBinderGeneric_1<TConcrete>* To() {
      static_assert(std::is_convertible_v<TConcrete, TContract>);
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConcreteBinderGeneric_1::To");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "To", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TConcrete>::get()}, ::il2cpp_utils::ExtractTypes()));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TConcrete>::get()}));
      return ::il2cpp_utils::RunMethodThrow<Zenject::FromBinderGeneric_1<TConcrete>*, false>(this, ___generic__method);
    }
    // public Zenject.FromBinderNonGeneric To(params System.Type[] concreteTypes)
    // Offset: 0xFFFFFFFF
    Zenject::FromBinderNonGeneric* To(::Array<System::Type*>* concreteTypes) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConcreteBinderGeneric_1::To");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "To", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(concreteTypes)));
      return ::il2cpp_utils::RunMethodThrow<Zenject::FromBinderNonGeneric*, false>(this, ___internal__method, concreteTypes);
    }
    // Creating initializer_list -> params proxy for: Zenject.FromBinderNonGeneric To(params System.Type[] concreteTypes)
    Zenject::FromBinderNonGeneric* To(std::initializer_list<System::Type*> concreteTypes) {
      return To(::Array<System::Type*>::New(concreteTypes));
    }
    // Creating TArgs -> initializer_list proxy for: Zenject.FromBinderNonGeneric To(params System.Type[] concreteTypes)
    template<class ...TParams>
    Zenject::FromBinderNonGeneric* To(TParams&&... concreteTypes) {
      return To({concreteTypes...});
    }
    // public Zenject.FromBinderNonGeneric To(System.Collections.Generic.IEnumerable`1<System.Type> concreteTypes)
    // Offset: 0xFFFFFFFF
    Zenject::FromBinderNonGeneric* To(System::Collections::Generic::IEnumerable_1<System::Type*>* concreteTypes) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConcreteBinderGeneric_1::To");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "To", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(concreteTypes)));
      return ::il2cpp_utils::RunMethodThrow<Zenject::FromBinderNonGeneric*, false>(this, ___internal__method, concreteTypes);
    }
    // public Zenject.FromBinderNonGeneric To(System.Action`1<Zenject.ConventionSelectTypesBinder> generator)
    // Offset: 0xFFFFFFFF
    Zenject::FromBinderNonGeneric* To(System::Action_1<Zenject::ConventionSelectTypesBinder*>* generator) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConcreteBinderGeneric_1::To");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "To", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(generator)));
      return ::il2cpp_utils::RunMethodThrow<Zenject::FromBinderNonGeneric*, false>(this, ___internal__method, generator);
    }
    // private Zenject.IProvider <ToSelf>b__1_0(Zenject.DiContainer container, System.Type type)
    // Offset: 0xFFFFFFFF
    Zenject::IProvider* $ToSelf$b__1_0(Zenject::DiContainer* container, System::Type* type) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConcreteBinderGeneric_1::<ToSelf>b__1_0");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<ToSelf>b__1_0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(container, type))));
      return ::il2cpp_utils::RunMethodThrow<Zenject::IProvider*, false>(this, ___internal__method, container, type);
    }
    // private System.Boolean <To>b__5_0(System.Type concreteType)
    // Offset: 0xFFFFFFFF
    bool $To$b__5_0(System::Type* concreteType) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConcreteBinderGeneric_1::<To>b__5_0");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<To>b__5_0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(concreteType))));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, concreteType);
    }
    // public System.Void .ctor(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.BindStatement bindStatement)
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.FromBinderGeneric`1
    // Base method: System.Void FromBinderGeneric_1::.ctor(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.BindStatement bindStatement)
    // Base method: System.Void FromBinder::.ctor(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.BindStatement bindStatement)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ConcreteBinderGeneric_1<TContract>* New_ctor(Zenject::DiContainer* bindContainer, Zenject::BindInfo* bindInfo, Zenject::BindStatement* bindStatement) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ConcreteBinderGeneric_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ConcreteBinderGeneric_1<TContract>*, creationType>(bindContainer, bindInfo, bindStatement)));
    }
  }; // Zenject.ConcreteBinderGeneric`1
  // Could not write size check! Type: Zenject.ConcreteBinderGeneric`1 is generic, or has no fields that are valid for size checks!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(Zenject::ConcreteBinderGeneric_1, "Zenject", "ConcreteBinderGeneric`1");
