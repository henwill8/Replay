// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.IFactory`1
#include "Zenject/IFactory_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: IProvider
  class IProvider;
  // Forward declaring type: InjectContext
  class InjectContext;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // WARNING Size may be invalid!
  // Autogenerated type: Zenject.FactoryProviderWrapper`1
  // [] Offset: FFFFFFFF
  template<typename TContract>
  class FactoryProviderWrapper_1 : public ::Il2CppObject/*, public Zenject::IFactory_1<TContract>*/ {
    public:
    // private readonly Zenject.IProvider _provider
    // Size: 0x8
    // Offset: 0x0
    Zenject::IProvider* provider;
    // Field size check
    static_assert(sizeof(Zenject::IProvider*) == 0x8);
    // private readonly Zenject.InjectContext _injectContext
    // Size: 0x8
    // Offset: 0x0
    Zenject::InjectContext* injectContext;
    // Field size check
    static_assert(sizeof(Zenject::InjectContext*) == 0x8);
    // Creating value type constructor for type: FactoryProviderWrapper_1
    FactoryProviderWrapper_1(Zenject::IProvider* provider_ = {}, Zenject::InjectContext* injectContext_ = {}) noexcept : provider{provider_}, injectContext{injectContext_} {}
    // Creating interface conversion operator: operator Zenject::IFactory_1<TContract>
    operator Zenject::IFactory_1<TContract>() noexcept {
      return *reinterpret_cast<Zenject::IFactory_1<TContract>*>(this);
    }
    // public System.Void .ctor(Zenject.IProvider provider, Zenject.InjectContext injectContext)
    // Offset: 0xFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FactoryProviderWrapper_1<TContract>* New_ctor(Zenject::IProvider* provider, Zenject::InjectContext* injectContext) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryProviderWrapper_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FactoryProviderWrapper_1<TContract>*, creationType>(provider, injectContext)));
    }
    // public TContract Create()
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.IFactory`1
    // Base method: TValue IFactory_1::Create()
    TContract Create() {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FactoryProviderWrapper_1::Create");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Create", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<TContract, false>(this, ___internal__method);
    }
    // Creating proxy method: Zenject_IFactory_1_Create
    // Maps to method: Create
    TContract Zenject_IFactory_1_Create() {
      return Create();
    }
  }; // Zenject.FactoryProviderWrapper`1
  // Could not write size check! Type: Zenject.FactoryProviderWrapper`1 is generic, or has no fields that are valid for size checks!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(Zenject::FactoryProviderWrapper_1, "Zenject", "FactoryProviderWrapper`1");
