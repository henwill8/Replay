// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.Internal.PreserveAttribute
#include "Zenject/Internal/PreserveAttribute.hpp"
// Including type: Zenject.InjectSources
#include "Zenject/InjectSources.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Zenject
namespace Zenject {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: Zenject.InjectAttributeBase
  // [] Offset: FFFFFFFF
  class InjectAttributeBase : public Zenject::Internal::PreserveAttribute {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xCF4B7C
    // private System.Boolean <Optional>k__BackingField
    // Size: 0x1
    // Offset: 0x10
    bool Optional;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: Optional and: Id
    char __padding0[0x7] = {};
    // [CompilerGeneratedAttribute] Offset: 0xCF4B8C
    // private System.Object <Id>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* Id;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xCF4B9C
    // private Zenject.InjectSources <Source>k__BackingField
    // Size: 0x4
    // Offset: 0x20
    Zenject::InjectSources Source;
    // Field size check
    static_assert(sizeof(Zenject::InjectSources) == 0x4);
    // Creating value type constructor for type: InjectAttributeBase
    InjectAttributeBase(bool Optional_ = {}, ::Il2CppObject* Id_ = {}, Zenject::InjectSources Source_ = {}) noexcept : Optional{Optional_}, Id{Id_}, Source{Source_} {}
    // public System.Boolean get_Optional()
    // Offset: 0x22BD7D8
    bool get_Optional();
    // public System.Void set_Optional(System.Boolean value)
    // Offset: 0x22BD7E0
    void set_Optional(bool value);
    // public System.Object get_Id()
    // Offset: 0x22BD7EC
    ::Il2CppObject* get_Id();
    // public System.Void set_Id(System.Object value)
    // Offset: 0x22BD7F4
    void set_Id(::Il2CppObject* value);
    // public Zenject.InjectSources get_Source()
    // Offset: 0x22BD7FC
    Zenject::InjectSources get_Source();
    // public System.Void set_Source(Zenject.InjectSources value)
    // Offset: 0x22BD804
    void set_Source(Zenject::InjectSources value);
    // protected System.Void .ctor()
    // Offset: 0x22BD7D0
    // Implemented from: Zenject.Internal.PreserveAttribute
    // Base method: System.Void PreserveAttribute::.ctor()
    // Base method: System.Void Attribute::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static InjectAttributeBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::InjectAttributeBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<InjectAttributeBase*, creationType>()));
    }
  }; // Zenject.InjectAttributeBase
  #pragma pack(pop)
  static check_size<sizeof(InjectAttributeBase), 32 + sizeof(Zenject::InjectSources)> __Zenject_InjectAttributeBaseSizeCheck;
  static_assert(sizeof(InjectAttributeBase) == 0x24);
}
DEFINE_IL2CPP_ARG_TYPE(Zenject::InjectAttributeBase*, "Zenject", "InjectAttributeBase");
