// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
// Including type: Zenject.IInstantiator
#include "Zenject/IInstantiator.hpp"
// Including type: Zenject.BindingId
#include "Zenject/BindingId.hpp"
// Including type: Zenject.TypeValuePair
#include "Zenject/TypeValuePair.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: LazyInstanceInjector
  class LazyInstanceInjector;
  // Forward declaring type: BindStatement
  class BindStatement;
  // Forward declaring type: IValidatable
  class IValidatable;
  // Forward declaring type: ZenjectSettings
  class ZenjectSettings;
  // Forward declaring type: IProvider
  class IProvider;
  // Forward declaring type: InjectContext
  class InjectContext;
  // Forward declaring type: BindingCondition
  class BindingCondition;
  // Forward declaring type: InjectSources
  struct InjectSources;
  // Forward declaring type: Installer
  class Installer;
  // Forward declaring type: DecoratorToChoiceFromBinder`1<TContract>
  template<typename TContract>
  class DecoratorToChoiceFromBinder_1;
  // Forward declaring type: InjectTypeInfo
  class InjectTypeInfo;
  // Forward declaring type: GameObjectCreationParameters
  class GameObjectCreationParameters;
  // Forward declaring type: ConcreteBinderGeneric`1<TContract>
  template<typename TContract>
  class ConcreteBinderGeneric_1;
  // Forward declaring type: ConcreteBinderNonGeneric
  class ConcreteBinderNonGeneric;
  // Forward declaring type: ConcreteIdBinderGeneric`1<TContract>
  template<typename TContract>
  class ConcreteIdBinderGeneric_1;
  // Forward declaring type: ConcreteIdBinderNonGeneric
  class ConcreteIdBinderNonGeneric;
  // Forward declaring type: BindInfo
  class BindInfo;
  // Forward declaring type: ConventionSelectTypesBinder
  class ConventionSelectTypesBinder;
  // Forward declaring type: FromBinderNonGeneric
  class FromBinderNonGeneric;
  // Forward declaring type: IdScopeConcreteIdArgConditionCopyNonLazyBinder
  class IdScopeConcreteIdArgConditionCopyNonLazyBinder;
  // Forward declaring type: IFactory
  class IFactory;
  // Forward declaring type: FactoryToChoiceIdBinder`1<TContract>
  template<typename TContract>
  class FactoryToChoiceIdBinder_1;
  // Forward declaring type: PlaceholderFactory`1<TValue>
  template<typename TValue>
  class PlaceholderFactory_1;
  // Forward declaring type: MemoryPoolIdInitialSizeMaxSizeBinder`1<TContract>
  template<typename TContract>
  class MemoryPoolIdInitialSizeMaxSizeBinder_1;
  // Forward declaring type: IMemoryPool
  class IMemoryPool;
  // Forward declaring type: FactoryToChoiceIdBinder`2<TParam1, TContract>
  template<typename TParam1, typename TContract>
  class FactoryToChoiceIdBinder_2;
  // Forward declaring type: PlaceholderFactory`2<TValue, TParam1>
  template<typename TValue, typename TParam1>
  class PlaceholderFactory_2;
  // Forward declaring type: FactoryToChoiceIdBinder`3<TParam1, TParam2, TContract>
  template<typename TParam1, typename TParam2, typename TContract>
  class FactoryToChoiceIdBinder_3;
  // Forward declaring type: PlaceholderFactory`3<TValue, TParam1, TParam2>
  template<typename TValue, typename TParam1, typename TParam2>
  class PlaceholderFactory_3;
  // Forward declaring type: FactoryToChoiceIdBinder`4<TParam1, TParam2, TParam3, TContract>
  template<typename TParam1, typename TParam2, typename TParam3, typename TContract>
  class FactoryToChoiceIdBinder_4;
  // Forward declaring type: PlaceholderFactory`4<TValue, TParam1, TParam2, TParam3>
  template<typename TValue, typename TParam1, typename TParam2, typename TParam3>
  class PlaceholderFactory_4;
  // Forward declaring type: FactoryToChoiceIdBinder`5<TParam1, TParam2, TParam3, TParam4, TContract>
  template<typename TParam1, typename TParam2, typename TParam3, typename TParam4, typename TContract>
  class FactoryToChoiceIdBinder_5;
  // Forward declaring type: PlaceholderFactory`5<TValue, TParam1, TParam2, TParam3, TParam4>
  template<typename TValue, typename TParam1, typename TParam2, typename TParam3, typename TParam4>
  class PlaceholderFactory_5;
  // Forward declaring type: FactoryToChoiceIdBinder`6<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>
  template<typename TParam1, typename TParam2, typename TParam3, typename TParam4, typename TParam5, typename TContract>
  class FactoryToChoiceIdBinder_6;
  // Forward declaring type: PlaceholderFactory`6<TValue, TParam1, TParam2, TParam3, TParam4, TParam5>
  template<typename TValue, typename TParam1, typename TParam2, typename TParam3, typename TParam4, typename TParam5>
  class PlaceholderFactory_6;
  // Forward declaring type: FactoryToChoiceIdBinder`7<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>
  template<typename TParam1, typename TParam2, typename TParam3, typename TParam4, typename TParam5, typename TParam6, typename TContract>
  class FactoryToChoiceIdBinder_7;
  // Forward declaring type: PlaceholderFactory`7<TValue, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6>
  template<typename TValue, typename TParam1, typename TParam2, typename TParam3, typename TParam4, typename TParam5, typename TParam6>
  class PlaceholderFactory_7;
  // Forward declaring type: FactoryToChoiceIdBinder`11<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>
  template<typename TParam1, typename TParam2, typename TParam3, typename TParam4, typename TParam5, typename TParam6, typename TParam7, typename TParam8, typename TParam9, typename TParam10, typename TContract>
  class FactoryToChoiceIdBinder_11;
  // Forward declaring type: PlaceholderFactory`11<TValue, TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10>
  template<typename TValue, typename TParam1, typename TParam2, typename TParam3, typename TParam4, typename TParam5, typename TParam6, typename TParam7, typename TParam8, typename TParam9, typename TParam10>
  class PlaceholderFactory_11;
  // Forward declaring type: ITickable
  class ITickable;
  // Forward declaring type: CopyNonLazyBinder
  class CopyNonLazyBinder;
  // Forward declaring type: IInitializable
  class IInitializable;
  // Forward declaring type: ILateDisposable
  class ILateDisposable;
  // Forward declaring type: IFixedTickable
  class IFixedTickable;
  // Forward declaring type: ILateTickable
  class ILateTickable;
  // Forward declaring type: IPoolable
  class IPoolable;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: IDisposable
  class IDisposable;
}
// Forward declaring namespace: Zenject::Internal
namespace Zenject::Internal {
  // Forward declaring type: IDecoratorProvider
  class IDecoratorProvider;
  // Forward declaring type: LookupId
  class LookupId;
  // Forward declaring type: SingletonMarkRegistry
  class SingletonMarkRegistry;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Object
  class Object;
  // Forward declaring type: Component
  class Component;
  // Forward declaring type: ScriptableObject
  class ScriptableObject;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IList
  class IList;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Autogenerated type: Zenject.DiContainer
  class DiContainer : public ::Il2CppObject, public Zenject::IInstantiator {
    public:
    // Nested type: Zenject::DiContainer::ProviderInfo
    class ProviderInfo;
    // Nested type: Zenject::DiContainer::$$c
    class $$c;
    // Nested type: Zenject::DiContainer::$$c__DisplayClass86_0
    class $$c__DisplayClass86_0;
    // Nested type: Zenject::DiContainer::$GetDependencyContracts$d__96
    class $GetDependencyContracts$d__96;
    // Nested type: Zenject::DiContainer::$$c__DisplayClass178_0
    class $$c__DisplayClass178_0;
    // Nested type: Zenject::DiContainer::$$c__DisplayClass203_0_1<TContract>
    template<typename TContract>
    class $$c__DisplayClass203_0_1;
    // private readonly System.Collections.Generic.Dictionary`2<System.Type,Zenject.Internal.IDecoratorProvider> _decorators
    // Offset: 0x10
    System::Collections::Generic::Dictionary_2<System::Type*, Zenject::Internal::IDecoratorProvider*>* decorators;
    // private readonly System.Collections.Generic.Dictionary`2<Zenject.BindingId,System.Collections.Generic.List`1<Zenject.DiContainer/ProviderInfo>> _providers
    // Offset: 0x18
    System::Collections::Generic::Dictionary_2<Zenject::BindingId, System::Collections::Generic::List_1<Zenject::DiContainer::ProviderInfo*>*>* providers;
    // private readonly Zenject.DiContainer[][] _containerLookups
    // Offset: 0x20
    ::Array<::Array<Zenject::DiContainer*>*>* containerLookups;
    // private readonly System.Collections.Generic.HashSet`1<Zenject.Internal.LookupId> _resolvesInProgress
    // Offset: 0x28
    System::Collections::Generic::HashSet_1<Zenject::Internal::LookupId*>* resolvesInProgress;
    // private readonly System.Collections.Generic.HashSet`1<Zenject.Internal.LookupId> _resolvesTwiceInProgress
    // Offset: 0x30
    System::Collections::Generic::HashSet_1<Zenject::Internal::LookupId*>* resolvesTwiceInProgress;
    // private readonly Zenject.LazyInstanceInjector _lazyInjector
    // Offset: 0x38
    Zenject::LazyInstanceInjector* lazyInjector;
    // private readonly Zenject.Internal.SingletonMarkRegistry _singletonMarkRegistry
    // Offset: 0x40
    Zenject::Internal::SingletonMarkRegistry* singletonMarkRegistry;
    // private readonly System.Collections.Generic.Queue`1<Zenject.BindStatement> _currentBindings
    // Offset: 0x48
    System::Collections::Generic::Queue_1<Zenject::BindStatement*>* currentBindings;
    // private readonly System.Collections.Generic.List`1<Zenject.BindStatement> _childBindings
    // Offset: 0x50
    System::Collections::Generic::List_1<Zenject::BindStatement*>* childBindings;
    // private readonly System.Collections.Generic.HashSet`1<System.Type> _validatedTypes
    // Offset: 0x58
    System::Collections::Generic::HashSet_1<System::Type*>* validatedTypes;
    // private readonly System.Collections.Generic.List`1<Zenject.IValidatable> _validationQueue
    // Offset: 0x60
    System::Collections::Generic::List_1<Zenject::IValidatable*>* validationQueue;
    // private UnityEngine.Transform _contextTransform
    // Offset: 0x68
    UnityEngine::Transform* contextTransform;
    // private System.Boolean _hasLookedUpContextTransform
    // Offset: 0x70
    bool hasLookedUpContextTransform;
    // private UnityEngine.Transform _inheritedDefaultParent
    // Offset: 0x78
    UnityEngine::Transform* inheritedDefaultParent;
    // private UnityEngine.Transform _explicitDefaultParent
    // Offset: 0x80
    UnityEngine::Transform* explicitDefaultParent;
    // private System.Boolean _hasExplicitDefaultParent
    // Offset: 0x88
    bool hasExplicitDefaultParent;
    // private Zenject.ZenjectSettings _settings
    // Offset: 0x90
    Zenject::ZenjectSettings* settings;
    // private System.Boolean _hasResolvedRoots
    // Offset: 0x98
    bool hasResolvedRoots;
    // private System.Boolean _isFinalizingBinding
    // Offset: 0x99
    bool isFinalizingBinding;
    // private System.Boolean _isValidating
    // Offset: 0x9A
    bool isValidating;
    // private System.Boolean _isInstalling
    // Offset: 0x9B
    bool isInstalling;
    // private System.Boolean <AssertOnNewGameObjects>k__BackingField
    // Offset: 0x9C
    bool AssertOnNewGameObjects;
    // public System.Void .ctor(System.Collections.Generic.IEnumerable`1<Zenject.DiContainer> parentContainersEnumerable, System.Boolean isValidating)
    // Offset: 0xD71034
    static DiContainer* New_ctor(System::Collections::Generic::IEnumerable_1<Zenject::DiContainer*>* parentContainersEnumerable, bool isValidating);
    // public System.Void .ctor(System.Boolean isValidating)
    // Offset: 0xD71EDC
    static DiContainer* New_ctor(bool isValidating);
    // public System.Void .ctor(Zenject.DiContainer parentContainer, System.Boolean isValidating)
    // Offset: 0xD72098
    static DiContainer* New_ctor(Zenject::DiContainer* parentContainer, bool isValidating);
    // public System.Void .ctor(Zenject.DiContainer parentContainer)
    // Offset: 0xD7215C
    static DiContainer* New_ctor(Zenject::DiContainer* parentContainer);
    // public System.Void .ctor(System.Collections.Generic.IEnumerable`1<Zenject.DiContainer> parentContainers)
    // Offset: 0xD7221C
    static DiContainer* New_ctor(System::Collections::Generic::IEnumerable_1<Zenject::DiContainer*>* parentContainers);
    // public Zenject.ZenjectSettings get_Settings()
    // Offset: 0xD72224
    Zenject::ZenjectSettings* get_Settings();
    // public System.Void set_Settings(Zenject.ZenjectSettings value)
    // Offset: 0xD7222C
    void set_Settings(Zenject::ZenjectSettings* value);
    // Zenject.Internal.SingletonMarkRegistry get_SingletonMarkRegistry()
    // Offset: 0xD722B4
    Zenject::Internal::SingletonMarkRegistry* get_SingletonMarkRegistry();
    // public System.Collections.Generic.IEnumerable`1<Zenject.IProvider> get_AllProviders()
    // Offset: 0xD722BC
    System::Collections::Generic::IEnumerable_1<Zenject::IProvider*>* get_AllProviders();
    // private System.Void InstallDefaultBindings()
    // Offset: 0xD71928
    void InstallDefaultBindings();
    // private System.Object CreateLazyBinding(Zenject.InjectContext context)
    // Offset: 0xD7249C
    ::Il2CppObject* CreateLazyBinding(Zenject::InjectContext* context);
    // public System.Void QueueForValidate(Zenject.IValidatable validatable)
    // Offset: 0xD72728
    void QueueForValidate(Zenject::IValidatable* validatable);
    // private System.Boolean ShouldInheritBinding(Zenject.BindStatement binding, Zenject.DiContainer ancestorContainer)
    // Offset: 0xD71DB0
    bool ShouldInheritBinding(Zenject::BindStatement* binding, Zenject::DiContainer* ancestorContainer);
    // private UnityEngine.Transform get_ContextTransform()
    // Offset: 0xD72834
    UnityEngine::Transform* get_ContextTransform();
    // public System.Boolean get_AssertOnNewGameObjects()
    // Offset: 0xD728FC
    bool get_AssertOnNewGameObjects();
    // public System.Void set_AssertOnNewGameObjects(System.Boolean value)
    // Offset: 0xD72904
    void set_AssertOnNewGameObjects(bool value);
    // public UnityEngine.Transform get_InheritedDefaultParent()
    // Offset: 0xD72910
    UnityEngine::Transform* get_InheritedDefaultParent();
    // public UnityEngine.Transform get_DefaultParent()
    // Offset: 0xD72918
    UnityEngine::Transform* get_DefaultParent();
    // public System.Void set_DefaultParent(UnityEngine.Transform value)
    // Offset: 0xD70EE8
    void set_DefaultParent(UnityEngine::Transform* value);
    // public Zenject.DiContainer[] get_ParentContainers()
    // Offset: 0xD727FC
    ::Array<Zenject::DiContainer*>* get_ParentContainers();
    // public Zenject.DiContainer[] get_AncestorContainers()
    // Offset: 0xD72920
    ::Array<Zenject::DiContainer*>* get_AncestorContainers();
    // public System.Boolean get_ChecksForCircularDependencies()
    // Offset: 0xD72958
    bool get_ChecksForCircularDependencies();
    // public System.Boolean get_IsValidating()
    // Offset: 0xD72960
    bool get_IsValidating();
    // public System.Boolean get_IsInstalling()
    // Offset: 0xD72968
    bool get_IsInstalling();
    // public System.Void set_IsInstalling(System.Boolean value)
    // Offset: 0xD72970
    void set_IsInstalling(bool value);
    // public System.Collections.Generic.IEnumerable`1<Zenject.BindingId> get_AllContracts()
    // Offset: 0xD7297C
    System::Collections::Generic::IEnumerable_1<Zenject::BindingId>* get_AllContracts();
    // public System.Void ResolveRoots()
    // Offset: 0xD729DC
    void ResolveRoots();
    // private System.Void ResolveDependencyRoots()
    // Offset: 0xD72A54
    void ResolveDependencyRoots();
    // private System.Void ValidateFullResolve()
    // Offset: 0xD73528
    void ValidateFullResolve();
    // private System.Void FlushValidationQueue()
    // Offset: 0xD7302C
    void FlushValidationQueue();
    // public Zenject.DiContainer CreateSubContainer()
    // Offset: 0xD73940
    Zenject::DiContainer* CreateSubContainer();
    // public System.Void QueueForInject(System.Object instance)
    // Offset: 0xD73A20
    void QueueForInject(::Il2CppObject* instance);
    // public T LazyInject(T instance)
    // Offset: 0xFFFFFFFF
    template<class T>
    T LazyInject(T instance) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>(this, "LazyInject", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, instance)));
    }
    // private Zenject.DiContainer CreateSubContainer(System.Boolean isValidating)
    // Offset: 0xD73948
    Zenject::DiContainer* CreateSubContainer(bool isValidating);
    // public System.Void RegisterProvider(Zenject.BindingId bindingId, Zenject.BindingCondition condition, Zenject.IProvider provider, System.Boolean nonLazy)
    // Offset: 0xD73A3C
    void RegisterProvider(Zenject::BindingId bindingId, Zenject::BindingCondition* condition, Zenject::IProvider* provider, bool nonLazy);
    // private System.Void GetProviderMatches(Zenject.InjectContext context, System.Collections.Generic.List`1<Zenject.DiContainer/ProviderInfo> buffer)
    // Offset: 0xD73B6C
    void GetProviderMatches(Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::DiContainer::ProviderInfo*>* buffer);
    // private Zenject.DiContainer/ProviderInfo TryGetUniqueProvider(Zenject.InjectContext context)
    // Offset: 0xD73E14
    Zenject::DiContainer::ProviderInfo* TryGetUniqueProvider(Zenject::InjectContext* context);
    // private System.Collections.Generic.List`1<Zenject.DiContainer> FlattenInheritanceChain()
    // Offset: 0xD71C20
    System::Collections::Generic::List_1<Zenject::DiContainer*>* FlattenInheritanceChain();
    // private System.Void GetLocalProviders(Zenject.BindingId bindingId, System.Collections.Generic.List`1<Zenject.DiContainer/ProviderInfo> buffer)
    // Offset: 0xD74400
    void GetLocalProviders(Zenject::BindingId bindingId, System::Collections::Generic::List_1<Zenject::DiContainer::ProviderInfo*>* buffer);
    // private System.Void GetProvidersForContract(Zenject.BindingId bindingId, Zenject.InjectSources sourceType, System.Collections.Generic.List`1<Zenject.DiContainer/ProviderInfo> buffer)
    // Offset: 0xD73D38
    void GetProvidersForContract(Zenject::BindingId bindingId, Zenject::InjectSources sourceType, System::Collections::Generic::List_1<Zenject::DiContainer::ProviderInfo*>* buffer);
    // public System.Void Install()
    // Offset: 0xFFFFFFFF
    template<class TInstaller>
    void Install() {
      static_assert(std::is_convertible_v<TInstaller, Zenject::Installer*>);
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "Install", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TInstaller>::get()}));
    }
    // public System.Void Install(System.Object[] extraArgs)
    // Offset: 0xFFFFFFFF
    template<class TInstaller>
    void Install(::Array<::Il2CppObject*>* extraArgs) {
      static_assert(std::is_convertible_v<TInstaller, Zenject::Installer*>);
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "Install", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TInstaller>::get()}, extraArgs));
    }
    // public System.Collections.IList ResolveAll(Zenject.InjectContext context)
    // Offset: 0xD73808
    System::Collections::IList* ResolveAll(Zenject::InjectContext* context);
    // public System.Void ResolveAll(Zenject.InjectContext context, System.Collections.Generic.List`1<System.Object> buffer)
    // Offset: 0xD74548
    void ResolveAll(Zenject::InjectContext* context, System::Collections::Generic::List_1<::Il2CppObject*>* buffer);
    // private System.Void CheckForInstallWarning(Zenject.InjectContext context)
    // Offset: 0xD74B98
    void CheckForInstallWarning(Zenject::InjectContext* context);
    // public System.Type ResolveType()
    // Offset: 0xFFFFFFFF
    template<class T>
    System::Type* ResolveType() {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<System::Type*>(this, "ResolveType", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()})));
    }
    // public System.Type ResolveType(System.Type type)
    // Offset: 0xD74BC0
    System::Type* ResolveType(System::Type* type);
    // public System.Type ResolveType(Zenject.InjectContext context)
    // Offset: 0xD74D08
    System::Type* ResolveType(Zenject::InjectContext* context);
    // public System.Collections.Generic.List`1<System.Type> ResolveTypeAll(System.Type type)
    // Offset: 0xD74FB4
    System::Collections::Generic::List_1<System::Type*>* ResolveTypeAll(System::Type* type);
    // public System.Collections.Generic.List`1<System.Type> ResolveTypeAll(System.Type type, System.Object identifier)
    // Offset: 0xD74FBC
    System::Collections::Generic::List_1<System::Type*>* ResolveTypeAll(System::Type* type, ::Il2CppObject* identifier);
    // public System.Collections.Generic.List`1<System.Type> ResolveTypeAll(Zenject.InjectContext context)
    // Offset: 0xD75120
    System::Collections::Generic::List_1<System::Type*>* ResolveTypeAll(Zenject::InjectContext* context);
    // public System.Object Resolve(Zenject.BindingId id)
    // Offset: 0xD75414
    ::Il2CppObject* Resolve(Zenject::BindingId id);
    // public System.Object Resolve(Zenject.InjectContext context)
    // Offset: 0xD75578
    ::Il2CppObject* Resolve(Zenject::InjectContext* context);
    // private System.Void SafeGetInstances(Zenject.DiContainer/ProviderInfo providerInfo, Zenject.InjectContext context, System.Collections.Generic.List`1<System.Object> instances)
    // Offset: 0xD731D4
    void SafeGetInstances(Zenject::DiContainer::ProviderInfo* providerInfo, Zenject::InjectContext* context, System::Collections::Generic::List_1<::Il2CppObject*>* instances);
    // public Zenject.DecoratorToChoiceFromBinder`1<TContract> Decorate()
    // Offset: 0xFFFFFFFF
    template<class TContract>
    Zenject::DecoratorToChoiceFromBinder_1<TContract>* Decorate() {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::DecoratorToChoiceFromBinder_1<TContract>*>(this, "Decorate", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get()})));
    }
    // private System.Void GetDecoratedInstances(Zenject.IProvider provider, Zenject.InjectContext context, System.Collections.Generic.List`1<System.Object> buffer)
    // Offset: 0xD76220
    void GetDecoratedInstances(Zenject::IProvider* provider, Zenject::InjectContext* context, System::Collections::Generic::List_1<::Il2CppObject*>* buffer);
    // private Zenject.Internal.IDecoratorProvider TryGetDecoratorProvider(System.Type contractType)
    // Offset: 0xD7634C
    Zenject::Internal::IDecoratorProvider* TryGetDecoratorProvider(System::Type* contractType);
    // private System.Int32 GetContainerHeirarchyDistance(Zenject.DiContainer container)
    // Offset: 0xD7438C
    int GetContainerHeirarchyDistance(Zenject::DiContainer* container);
    // private System.Nullable`1<System.Int32> GetContainerHeirarchyDistance(Zenject.DiContainer container, System.Int32 depth)
    // Offset: 0xD76444
    System::Nullable_1<int> GetContainerHeirarchyDistance(Zenject::DiContainer* container, int depth);
    // public System.Collections.Generic.IEnumerable`1<System.Type> GetDependencyContracts()
    // Offset: 0xFFFFFFFF
    template<class TContract>
    System::Collections::Generic::IEnumerable_1<System::Type*>* GetDependencyContracts() {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<System::Collections::Generic::IEnumerable_1<System::Type*>*>(this, "GetDependencyContracts", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get()})));
    }
    // public System.Collections.Generic.IEnumerable`1<System.Type> GetDependencyContracts(System.Type contract)
    // Offset: 0xD7658C
    System::Collections::Generic::IEnumerable_1<System::Type*>* GetDependencyContracts(System::Type* contract);
    // private System.Object InstantiateInternal(System.Type concreteType, System.Boolean autoInject, System.Collections.Generic.List`1<Zenject.TypeValuePair> extraArgs, Zenject.InjectContext context, System.Object concreteIdentifier)
    // Offset: 0xD76624
    ::Il2CppObject* InstantiateInternal(System::Type* concreteType, bool autoInject, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs, Zenject::InjectContext* context, ::Il2CppObject* concreteIdentifier);
    // public System.Void InjectExplicit(System.Object injectable, System.Collections.Generic.List`1<Zenject.TypeValuePair> extraArgs)
    // Offset: 0xD7705C
    void InjectExplicit(::Il2CppObject* injectable, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs);
    // public System.Void InjectExplicit(System.Object injectable, System.Type injectableType, System.Collections.Generic.List`1<Zenject.TypeValuePair> extraArgs, Zenject.InjectContext context, System.Object concreteIdentifier)
    // Offset: 0xD676B0
    void InjectExplicit(::Il2CppObject* injectable, System::Type* injectableType, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs, Zenject::InjectContext* context, ::Il2CppObject* concreteIdentifier);
    // private System.Void CallInjectMethodsTopDown(System.Object injectable, System.Type injectableType, Zenject.InjectTypeInfo typeInfo, System.Collections.Generic.List`1<Zenject.TypeValuePair> extraArgs, Zenject.InjectContext context, System.Object concreteIdentifier, System.Boolean isDryRun)
    // Offset: 0xD77594
    void CallInjectMethodsTopDown(::Il2CppObject* injectable, System::Type* injectableType, Zenject::InjectTypeInfo* typeInfo, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs, Zenject::InjectContext* context, ::Il2CppObject* concreteIdentifier, bool isDryRun);
    // private System.Void InjectMembersTopDown(System.Object injectable, System.Type injectableType, Zenject.InjectTypeInfo typeInfo, System.Collections.Generic.List`1<Zenject.TypeValuePair> extraArgs, Zenject.InjectContext context, System.Object concreteIdentifier, System.Boolean isDryRun)
    // Offset: 0xD77AD8
    void InjectMembersTopDown(::Il2CppObject* injectable, System::Type* injectableType, Zenject::InjectTypeInfo* typeInfo, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs, Zenject::InjectContext* context, ::Il2CppObject* concreteIdentifier, bool isDryRun);
    // private System.Void InjectExplicitInternal(System.Object injectable, System.Type injectableType, System.Collections.Generic.List`1<Zenject.TypeValuePair> extraArgs, Zenject.InjectContext context, System.Object concreteIdentifier)
    // Offset: 0xD77148
    void InjectExplicitInternal(::Il2CppObject* injectable, System::Type* injectableType, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs, Zenject::InjectContext* context, ::Il2CppObject* concreteIdentifier);
    // UnityEngine.GameObject CreateAndParentPrefabResource(System.String resourcePath, Zenject.GameObjectCreationParameters gameObjectBindInfo, Zenject.InjectContext context, out System.Boolean shouldMakeActive)
    // Offset: 0xD77D98
    UnityEngine::GameObject* CreateAndParentPrefabResource(::Il2CppString* resourcePath, Zenject::GameObjectCreationParameters* gameObjectBindInfo, Zenject::InjectContext* context, bool& shouldMakeActive);
    // private UnityEngine.GameObject GetPrefabAsGameObject(UnityEngine.Object prefab)
    // Offset: 0xD782E4
    UnityEngine::GameObject* GetPrefabAsGameObject(UnityEngine::Object* prefab);
    // UnityEngine.GameObject CreateAndParentPrefab(UnityEngine.Object prefab, Zenject.GameObjectCreationParameters gameObjectBindInfo, Zenject.InjectContext context, out System.Boolean shouldMakeActive)
    // Offset: 0xD77ED0
    UnityEngine::GameObject* CreateAndParentPrefab(UnityEngine::Object* prefab, Zenject::GameObjectCreationParameters* gameObjectBindInfo, Zenject::InjectContext* context, bool& shouldMakeActive);
    // public UnityEngine.GameObject CreateEmptyGameObject(Zenject.GameObjectCreationParameters gameObjectBindInfo, Zenject.InjectContext context)
    // Offset: 0xD67FD8
    UnityEngine::GameObject* CreateEmptyGameObject(Zenject::GameObjectCreationParameters* gameObjectBindInfo, Zenject::InjectContext* context);
    // private UnityEngine.Transform GetTransformGroup(Zenject.GameObjectCreationParameters gameObjectBindInfo, Zenject.InjectContext context)
    // Offset: 0xD783EC
    UnityEngine::Transform* GetTransformGroup(Zenject::GameObjectCreationParameters* gameObjectBindInfo, Zenject::InjectContext* context);
    // private UnityEngine.GameObject CreateTransformGroup(System.String groupName)
    // Offset: 0xD78924
    UnityEngine::GameObject* CreateTransformGroup(::Il2CppString* groupName);
    // public UnityEngine.GameObject InstantiatePrefab(UnityEngine.Object prefab, Zenject.GameObjectCreationParameters gameObjectBindInfo)
    // Offset: 0xD78D2C
    UnityEngine::GameObject* InstantiatePrefab(UnityEngine::Object* prefab, Zenject::GameObjectCreationParameters* gameObjectBindInfo);
    // public UnityEngine.GameObject InstantiatePrefabResource(System.String resourcePath, Zenject.GameObjectCreationParameters creationInfo)
    // Offset: 0xD79168
    UnityEngine::GameObject* InstantiatePrefabResource(::Il2CppString* resourcePath, Zenject::GameObjectCreationParameters* creationInfo);
    // public System.Object InstantiatePrefabForComponent(System.Type concreteType, UnityEngine.Object prefab, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs, Zenject.GameObjectCreationParameters creationInfo)
    // Offset: 0xD7950C
    ::Il2CppObject* InstantiatePrefabForComponent(System::Type* concreteType, UnityEngine::Object* prefab, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs, Zenject::GameObjectCreationParameters* creationInfo);
    // public System.Void InjectGameObject(UnityEngine.GameObject gameObject)
    // Offset: 0xD78F84
    void InjectGameObject(UnityEngine::GameObject* gameObject);
    // public T InjectGameObjectForComponent(UnityEngine.GameObject gameObject)
    // Offset: 0xFFFFFFFF
    template<class T>
    T InjectGameObjectForComponent(UnityEngine::GameObject* gameObject) {
      static_assert(std::is_convertible_v<T, UnityEngine::Component*>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>(this, "InjectGameObjectForComponent", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, gameObject)));
    }
    // public T InjectGameObjectForComponent(UnityEngine.GameObject gameObject, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    // Offset: 0xFFFFFFFF
    template<class T>
    T InjectGameObjectForComponent(UnityEngine::GameObject* gameObject, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs) {
      static_assert(std::is_convertible_v<T, UnityEngine::Component*>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>(this, "InjectGameObjectForComponent", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, gameObject, extraArgs)));
    }
    // public System.Object InjectGameObjectForComponent(UnityEngine.GameObject gameObject, System.Type componentType, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    // Offset: 0xD799B4
    ::Il2CppObject* InjectGameObjectForComponent(UnityEngine::GameObject* gameObject, System::Type* componentType, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs);
    // public UnityEngine.Component InjectGameObjectForComponentExplicit(UnityEngine.GameObject gameObject, System.Type componentType, System.Collections.Generic.List`1<Zenject.TypeValuePair> extraArgs, Zenject.InjectContext context, System.Object concreteIdentifier)
    // Offset: 0xD79A64
    UnityEngine::Component* InjectGameObjectForComponentExplicit(UnityEngine::GameObject* gameObject, System::Type* componentType, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs, Zenject::InjectContext* context, ::Il2CppObject* concreteIdentifier);
    // public System.Void Inject(System.Object injectable)
    // Offset: 0xD6DDB4
    void Inject(::Il2CppObject* injectable);
    // public System.Void Inject(System.Object injectable, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    // Offset: 0xD79D90
    void Inject(::Il2CppObject* injectable, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs);
    // public TContract Resolve()
    // Offset: 0xFFFFFFFF
    template<class TContract>
    TContract Resolve() {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<TContract>(this, "Resolve", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get()})));
    }
    // public System.Object Resolve(System.Type contractType)
    // Offset: 0xD79DC8
    ::Il2CppObject* Resolve(System::Type* contractType);
    // public TContract ResolveId(System.Object identifier)
    // Offset: 0xFFFFFFFF
    template<class TContract>
    TContract ResolveId(::Il2CppObject* identifier) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<TContract>(this, "ResolveId", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get()}, identifier)));
    }
    // public System.Object ResolveId(System.Type contractType, System.Object identifier)
    // Offset: 0xD79DD0
    ::Il2CppObject* ResolveId(System::Type* contractType, ::Il2CppObject* identifier);
    // public TContract TryResolve()
    // Offset: 0xFFFFFFFF
    template<class TContract>
    TContract TryResolve() {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<TContract>(this, "TryResolve", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get()})));
    }
    // public System.Object TryResolve(System.Type contractType)
    // Offset: 0xD79F34
    ::Il2CppObject* TryResolve(System::Type* contractType);
    // public TContract TryResolveId(System.Object identifier)
    // Offset: 0xFFFFFFFF
    template<class TContract>
    TContract TryResolveId(::Il2CppObject* identifier) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<TContract>(this, "TryResolveId", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get()}, identifier)));
    }
    // public System.Object TryResolveId(System.Type contractType, System.Object identifier)
    // Offset: 0xD79F3C
    ::Il2CppObject* TryResolveId(System::Type* contractType, ::Il2CppObject* identifier);
    // public System.Collections.Generic.List`1<TContract> ResolveAll()
    // Offset: 0xFFFFFFFF
    template<class TContract>
    System::Collections::Generic::List_1<TContract>* ResolveAll() {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<System::Collections::Generic::List_1<TContract>*>(this, "ResolveAll", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get()})));
    }
    // public System.Collections.IList ResolveAll(System.Type contractType)
    // Offset: 0xD7A0A8
    System::Collections::IList* ResolveAll(System::Type* contractType);
    // public System.Collections.Generic.List`1<TContract> ResolveIdAll(System.Object identifier)
    // Offset: 0xFFFFFFFF
    template<class TContract>
    System::Collections::Generic::List_1<TContract>* ResolveIdAll(::Il2CppObject* identifier) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<System::Collections::Generic::List_1<TContract>*>(this, "ResolveIdAll", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get()}, identifier)));
    }
    // public System.Collections.IList ResolveIdAll(System.Type contractType, System.Object identifier)
    // Offset: 0xD7A0B0
    System::Collections::IList* ResolveIdAll(System::Type* contractType, ::Il2CppObject* identifier);
    // public System.Void UnbindAll()
    // Offset: 0xD7A21C
    void UnbindAll();
    // public System.Boolean Unbind()
    // Offset: 0xFFFFFFFF
    template<class TContract>
    bool Unbind() {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<bool>(this, "Unbind", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get()})));
    }
    // public System.Boolean Unbind(System.Type contractType)
    // Offset: 0xD7A27C
    bool Unbind(System::Type* contractType);
    // public System.Boolean UnbindId(System.Object identifier)
    // Offset: 0xFFFFFFFF
    template<class TContract>
    bool UnbindId(::Il2CppObject* identifier) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<bool>(this, "UnbindId", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get()}, identifier)));
    }
    // public System.Boolean UnbindId(System.Type contractType, System.Object identifier)
    // Offset: 0xD7A284
    bool UnbindId(System::Type* contractType, ::Il2CppObject* identifier);
    // public System.Void UnbindInterfacesTo()
    // Offset: 0xFFFFFFFF
    template<class TConcrete>
    void UnbindInterfacesTo() {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "UnbindInterfacesTo", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TConcrete>::get()}));
    }
    // public System.Void UnbindInterfacesTo(System.Type concreteType)
    // Offset: 0xD7A334
    void UnbindInterfacesTo(System::Type* concreteType);
    // public System.Boolean Unbind()
    // Offset: 0xFFFFFFFF
    template<class TContract, class TConcrete>
    bool Unbind() {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<bool>(this, "Unbind", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TConcrete>::get()})));
    }
    // public System.Boolean Unbind(System.Type contractType, System.Type concreteType)
    // Offset: 0xD7A40C
    bool Unbind(System::Type* contractType, System::Type* concreteType);
    // public System.Boolean UnbindId(System.Object identifier)
    // Offset: 0xFFFFFFFF
    template<class TContract, class TConcrete>
    bool UnbindId(::Il2CppObject* identifier) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<bool>(this, "UnbindId", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TConcrete>::get()}, identifier)));
    }
    // public System.Boolean UnbindId(System.Type contractType, System.Type concreteType, System.Object identifier)
    // Offset: 0xD7A414
    bool UnbindId(System::Type* contractType, System::Type* concreteType, ::Il2CppObject* identifier);
    // public System.Boolean HasBinding()
    // Offset: 0xFFFFFFFF
    template<class TContract>
    bool HasBinding() {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<bool>(this, "HasBinding", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get()})));
    }
    // public System.Boolean HasBinding(System.Type contractType)
    // Offset: 0xD7A670
    bool HasBinding(System::Type* contractType);
    // public System.Boolean HasBindingId(System.Object identifier)
    // Offset: 0xFFFFFFFF
    template<class TContract>
    bool HasBindingId(::Il2CppObject* identifier) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<bool>(this, "HasBindingId", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get()}, identifier)));
    }
    // public System.Boolean HasBindingId(System.Type contractType, System.Object identifier)
    // Offset: 0xD7A67C
    bool HasBindingId(System::Type* contractType, ::Il2CppObject* identifier);
    // public System.Boolean HasBindingId(System.Type contractType, System.Object identifier, Zenject.InjectSources sourceType)
    // Offset: 0xD7A684
    bool HasBindingId(System::Type* contractType, ::Il2CppObject* identifier, Zenject::InjectSources sourceType);
    // public System.Boolean HasBinding(Zenject.InjectContext context)
    // Offset: 0xD7A7F8
    bool HasBinding(Zenject::InjectContext* context);
    // public System.Void FlushBindings()
    // Offset: 0xD71B44
    void FlushBindings();
    // private System.Void FinalizeBinding(Zenject.BindStatement binding)
    // Offset: 0xD71E74
    void FinalizeBinding(Zenject::BindStatement* binding);
    // public Zenject.BindStatement StartBinding(System.Boolean flush)
    // Offset: 0xD7A92C
    Zenject::BindStatement* StartBinding(bool flush);
    // public Zenject.ConcreteBinderGeneric`1<TContract> Rebind()
    // Offset: 0xFFFFFFFF
    template<class TContract>
    Zenject::ConcreteBinderGeneric_1<TContract>* Rebind() {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::ConcreteBinderGeneric_1<TContract>*>(this, "Rebind", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get()})));
    }
    // public Zenject.ConcreteBinderGeneric`1<TContract> RebindId(System.Object identifier)
    // Offset: 0xFFFFFFFF
    template<class TContract>
    Zenject::ConcreteBinderGeneric_1<TContract>* RebindId(::Il2CppObject* identifier) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::ConcreteBinderGeneric_1<TContract>*>(this, "RebindId", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get()}, identifier)));
    }
    // public Zenject.ConcreteBinderNonGeneric Rebind(System.Type contractType)
    // Offset: 0xD7A9F4
    Zenject::ConcreteBinderNonGeneric* Rebind(System::Type* contractType);
    // public Zenject.ConcreteBinderNonGeneric RebindId(System.Type contractType, System.Object identifier)
    // Offset: 0xD7A9FC
    Zenject::ConcreteBinderNonGeneric* RebindId(System::Type* contractType, ::Il2CppObject* identifier);
    // public Zenject.ConcreteIdBinderGeneric`1<TContract> Bind()
    // Offset: 0xFFFFFFFF
    template<class TContract>
    Zenject::ConcreteIdBinderGeneric_1<TContract>* Bind() {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::ConcreteIdBinderGeneric_1<TContract>*>(this, "Bind", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get()})));
    }
    // public Zenject.ConcreteIdBinderGeneric`1<TContract> BindNoFlush()
    // Offset: 0xFFFFFFFF
    template<class TContract>
    Zenject::ConcreteIdBinderGeneric_1<TContract>* BindNoFlush() {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::ConcreteIdBinderGeneric_1<TContract>*>(this, "BindNoFlush", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get()})));
    }
    // private Zenject.ConcreteIdBinderGeneric`1<TContract> Bind(Zenject.BindStatement bindStatement)
    // Offset: 0xFFFFFFFF
    template<class TContract>
    Zenject::ConcreteIdBinderGeneric_1<TContract>* Bind(Zenject::BindStatement* bindStatement) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::ConcreteIdBinderGeneric_1<TContract>*>(this, "Bind", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get()}, bindStatement)));
    }
    // public Zenject.ConcreteIdBinderNonGeneric Bind(params System.Type[] contractTypes)
    // Offset: 0xD6EA64
    Zenject::ConcreteIdBinderNonGeneric* Bind(::Array<System::Type*>* contractTypes);
    // Creating initializer_list -> params proxy for: Zenject.ConcreteIdBinderNonGeneric Bind(params System.Type[] contractTypes)
    Zenject::ConcreteIdBinderNonGeneric* Bind(std::initializer_list<System::Type*> contractTypes);
    // Creating TArgs -> initializer_list proxy for: Zenject.ConcreteIdBinderNonGeneric Bind(params System.Type[] contractTypes)
    template<class ...TParams>
    Zenject::ConcreteIdBinderNonGeneric* Bind(TParams&&... contractTypes) {
      return Bind({contractTypes...});
    }
    // public Zenject.ConcreteIdBinderNonGeneric Bind(System.Collections.Generic.IEnumerable`1<System.Type> contractTypes)
    // Offset: 0xD7AC54
    Zenject::ConcreteIdBinderNonGeneric* Bind(System::Collections::Generic::IEnumerable_1<System::Type*>* contractTypes);
    // private Zenject.ConcreteIdBinderNonGeneric BindInternal(Zenject.BindInfo bindInfo, Zenject.BindStatement bindingFinalizer)
    // Offset: 0xD7AAF0
    Zenject::ConcreteIdBinderNonGeneric* BindInternal(Zenject::BindInfo* bindInfo, Zenject::BindStatement* bindingFinalizer);
    // public Zenject.ConcreteIdBinderNonGeneric Bind(System.Action`1<Zenject.ConventionSelectTypesBinder> generator)
    // Offset: 0xD7ACEC
    Zenject::ConcreteIdBinderNonGeneric* Bind(System::Action_1<Zenject::ConventionSelectTypesBinder*>* generator);
    // public Zenject.FromBinderNonGeneric BindInterfacesTo()
    // Offset: 0xFFFFFFFF
    template<class T>
    Zenject::FromBinderNonGeneric* BindInterfacesTo() {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FromBinderNonGeneric*>(this, "BindInterfacesTo", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()})));
    }
    // public Zenject.FromBinderNonGeneric BindInterfacesTo(System.Type type)
    // Offset: 0xD7AEF4
    Zenject::FromBinderNonGeneric* BindInterfacesTo(System::Type* type);
    // public Zenject.FromBinderNonGeneric BindInterfacesAndSelfTo()
    // Offset: 0xFFFFFFFF
    template<class T>
    Zenject::FromBinderNonGeneric* BindInterfacesAndSelfTo() {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FromBinderNonGeneric*>(this, "BindInterfacesAndSelfTo", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()})));
    }
    // public Zenject.FromBinderNonGeneric BindInterfacesAndSelfTo(System.Type type)
    // Offset: 0xD7B0B0
    Zenject::FromBinderNonGeneric* BindInterfacesAndSelfTo(System::Type* type);
    // public Zenject.IdScopeConcreteIdArgConditionCopyNonLazyBinder BindInstance(TContract instance)
    // Offset: 0xFFFFFFFF
    template<class TContract>
    Zenject::IdScopeConcreteIdArgConditionCopyNonLazyBinder* BindInstance(TContract instance) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::IdScopeConcreteIdArgConditionCopyNonLazyBinder*>(this, "BindInstance", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get()}, instance)));
    }
    // public System.Void BindInstances(params System.Object[] instances)
    // Offset: 0xD7B218
    void BindInstances(::Array<::Il2CppObject*>* instances);
    // Creating initializer_list -> params proxy for: System.Void BindInstances(params System.Object[] instances)
    void BindInstances(std::initializer_list<::Il2CppObject*> instances);
    // Creating TArgs -> initializer_list proxy for: System.Void BindInstances(params System.Object[] instances)
    template<class ...TParams>
    void BindInstances(TParams&&... instances) {
      BindInstances({instances...});
    }
    // private Zenject.FactoryToChoiceIdBinder`1<TContract> BindFactoryInternal()
    // Offset: 0xFFFFFFFF
    template<class TContract, class TFactoryContract, class TFactoryConcrete>
    Zenject::FactoryToChoiceIdBinder_1<TContract>* BindFactoryInternal() {
      static_assert(std::is_base_of_v<Zenject::IFactory, std::remove_pointer_t<TFactoryContract>>);
      static_assert(std::is_convertible_v<TFactoryConcrete, TFactoryContract> && std::is_base_of_v<Zenject::IFactory, std::remove_pointer_t<TFactoryConcrete>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_1<TContract>*>(this, "BindFactoryInternal", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryConcrete>::get()})));
    }
    // public Zenject.FactoryToChoiceIdBinder`1<TContract> BindIFactory()
    // Offset: 0xFFFFFFFF
    template<class TContract>
    Zenject::FactoryToChoiceIdBinder_1<TContract>* BindIFactory() {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_1<TContract>*>(this, "BindIFactory", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get()})));
    }
    // public Zenject.FactoryToChoiceIdBinder`1<TContract> BindFactory()
    // Offset: 0xFFFFFFFF
    template<class TContract, class TFactory>
    Zenject::FactoryToChoiceIdBinder_1<TContract>* BindFactory() {
      static_assert(std::is_convertible_v<TFactory, Zenject::PlaceholderFactory_1<TContract>*>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_1<TContract>*>(this, "BindFactory", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactory>::get()})));
    }
    // public Zenject.FactoryToChoiceIdBinder`1<TContract> BindFactoryCustomInterface()
    // Offset: 0xFFFFFFFF
    template<class TContract, class TFactoryConcrete, class TFactoryContract>
    Zenject::FactoryToChoiceIdBinder_1<TContract>* BindFactoryCustomInterface() {
      static_assert(std::is_convertible_v<TFactoryConcrete, Zenject::PlaceholderFactory_1<TContract>*> && std::is_convertible_v<TFactoryConcrete, TFactoryContract>);
      static_assert(std::is_base_of_v<Zenject::IFactory, std::remove_pointer_t<TFactoryContract>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_1<TContract>*>(this, "BindFactoryCustomInterface", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryConcrete>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryContract>::get()})));
    }
    // public Zenject.MemoryPoolIdInitialSizeMaxSizeBinder`1<TItemContract> BindMemoryPool()
    // Offset: 0xFFFFFFFF
    template<class TItemContract>
    Zenject::MemoryPoolIdInitialSizeMaxSizeBinder_1<TItemContract>* BindMemoryPool() {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::MemoryPoolIdInitialSizeMaxSizeBinder_1<TItemContract>*>(this, "BindMemoryPool", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TItemContract>::get()})));
    }
    // public Zenject.MemoryPoolIdInitialSizeMaxSizeBinder`1<TItemContract> BindMemoryPool()
    // Offset: 0xFFFFFFFF
    template<class TItemContract, class TPool>
    Zenject::MemoryPoolIdInitialSizeMaxSizeBinder_1<TItemContract>* BindMemoryPool() {
      static_assert(std::is_base_of_v<Zenject::IMemoryPool, std::remove_pointer_t<TPool>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::MemoryPoolIdInitialSizeMaxSizeBinder_1<TItemContract>*>(this, "BindMemoryPool", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TItemContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TPool>::get()})));
    }
    // public Zenject.MemoryPoolIdInitialSizeMaxSizeBinder`1<TItemContract> BindMemoryPoolCustomInterface(System.Boolean includeConcreteType)
    // Offset: 0xFFFFFFFF
    template<class TItemContract, class TPoolConcrete, class TPoolContract>
    Zenject::MemoryPoolIdInitialSizeMaxSizeBinder_1<TItemContract>* BindMemoryPoolCustomInterface(bool includeConcreteType) {
      static_assert(std::is_convertible_v<TPoolConcrete, TPoolContract> && std::is_base_of_v<Zenject::IMemoryPool, std::remove_pointer_t<TPoolConcrete>>);
      static_assert(std::is_base_of_v<Zenject::IMemoryPool, std::remove_pointer_t<TPoolContract>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::MemoryPoolIdInitialSizeMaxSizeBinder_1<TItemContract>*>(this, "BindMemoryPoolCustomInterface", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TItemContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TPoolConcrete>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TPoolContract>::get()}, includeConcreteType)));
    }
    // Zenject.MemoryPoolIdInitialSizeMaxSizeBinder`1<TItemContract> BindMemoryPoolCustomInterfaceNoFlush(System.Boolean includeConcreteType)
    // Offset: 0xFFFFFFFF
    template<class TItemContract, class TPoolConcrete, class TPoolContract>
    Zenject::MemoryPoolIdInitialSizeMaxSizeBinder_1<TItemContract>* BindMemoryPoolCustomInterfaceNoFlush(bool includeConcreteType) {
      static_assert(std::is_convertible_v<TPoolConcrete, TPoolContract> && std::is_base_of_v<Zenject::IMemoryPool, std::remove_pointer_t<TPoolConcrete>>);
      static_assert(std::is_base_of_v<Zenject::IMemoryPool, std::remove_pointer_t<TPoolContract>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::MemoryPoolIdInitialSizeMaxSizeBinder_1<TItemContract>*>(this, "BindMemoryPoolCustomInterfaceNoFlush", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TItemContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TPoolConcrete>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TPoolContract>::get()}, includeConcreteType)));
    }
    // private Zenject.MemoryPoolIdInitialSizeMaxSizeBinder`1<TItemContract> BindMemoryPoolCustomInterfaceInternal(System.Boolean includeConcreteType, Zenject.BindStatement statement)
    // Offset: 0xFFFFFFFF
    template<class TItemContract, class TPoolConcrete, class TPoolContract>
    Zenject::MemoryPoolIdInitialSizeMaxSizeBinder_1<TItemContract>* BindMemoryPoolCustomInterfaceInternal(bool includeConcreteType, Zenject::BindStatement* statement) {
      static_assert(std::is_convertible_v<TPoolConcrete, TPoolContract> && std::is_base_of_v<Zenject::IMemoryPool, std::remove_pointer_t<TPoolConcrete>>);
      static_assert(std::is_base_of_v<Zenject::IMemoryPool, std::remove_pointer_t<TPoolContract>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::MemoryPoolIdInitialSizeMaxSizeBinder_1<TItemContract>*>(this, "BindMemoryPoolCustomInterfaceInternal", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TItemContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TPoolConcrete>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TPoolContract>::get()}, includeConcreteType, statement)));
    }
    // private Zenject.FactoryToChoiceIdBinder`2<TParam1,TContract> BindFactoryInternal()
    // Offset: 0xFFFFFFFF
    template<class TParam1, class TContract, class TFactoryContract, class TFactoryConcrete>
    Zenject::FactoryToChoiceIdBinder_2<TParam1, TContract>* BindFactoryInternal() {
      static_assert(std::is_base_of_v<Zenject::IFactory, std::remove_pointer_t<TFactoryContract>>);
      static_assert(std::is_convertible_v<TFactoryConcrete, TFactoryContract> && std::is_base_of_v<Zenject::IFactory, std::remove_pointer_t<TFactoryConcrete>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_2<TParam1, TContract>*>(this, "BindFactoryInternal", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryConcrete>::get()})));
    }
    // public Zenject.FactoryToChoiceIdBinder`2<TParam1,TContract> BindIFactory()
    // Offset: 0xFFFFFFFF
    template<class TParam1, class TContract>
    Zenject::FactoryToChoiceIdBinder_2<TParam1, TContract>* BindIFactory() {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_2<TParam1, TContract>*>(this, "BindIFactory", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get()})));
    }
    // public Zenject.FactoryToChoiceIdBinder`2<TParam1,TContract> BindFactory()
    // Offset: 0xFFFFFFFF
    template<class TParam1, class TContract, class TFactory>
    Zenject::FactoryToChoiceIdBinder_2<TParam1, TContract>* BindFactory() {
      static_assert(std::is_convertible_v<TFactory, Zenject::PlaceholderFactory_2<TParam1, TContract>*>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_2<TParam1, TContract>*>(this, "BindFactory", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactory>::get()})));
    }
    // public Zenject.FactoryToChoiceIdBinder`2<TParam1,TContract> BindFactoryCustomInterface()
    // Offset: 0xFFFFFFFF
    template<class TParam1, class TContract, class TFactoryConcrete, class TFactoryContract>
    Zenject::FactoryToChoiceIdBinder_2<TParam1, TContract>* BindFactoryCustomInterface() {
      static_assert(std::is_convertible_v<TFactoryConcrete, Zenject::PlaceholderFactory_2<TParam1, TContract>*> && std::is_convertible_v<TFactoryConcrete, TFactoryContract>);
      static_assert(std::is_base_of_v<Zenject::IFactory, std::remove_pointer_t<TFactoryContract>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_2<TParam1, TContract>*>(this, "BindFactoryCustomInterface", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryConcrete>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryContract>::get()})));
    }
    // private Zenject.FactoryToChoiceIdBinder`3<TParam1,TParam2,TContract> BindFactoryInternal()
    // Offset: 0xFFFFFFFF
    template<class TParam1, class TParam2, class TContract, class TFactoryContract, class TFactoryConcrete>
    Zenject::FactoryToChoiceIdBinder_3<TParam1, TParam2, TContract>* BindFactoryInternal() {
      static_assert(std::is_base_of_v<Zenject::IFactory, std::remove_pointer_t<TFactoryContract>>);
      static_assert(std::is_convertible_v<TFactoryConcrete, TFactoryContract> && std::is_base_of_v<Zenject::IFactory, std::remove_pointer_t<TFactoryConcrete>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_3<TParam1, TParam2, TContract>*>(this, "BindFactoryInternal", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam2>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryConcrete>::get()})));
    }
    // public Zenject.FactoryToChoiceIdBinder`3<TParam1,TParam2,TContract> BindIFactory()
    // Offset: 0xFFFFFFFF
    template<class TParam1, class TParam2, class TContract>
    Zenject::FactoryToChoiceIdBinder_3<TParam1, TParam2, TContract>* BindIFactory() {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_3<TParam1, TParam2, TContract>*>(this, "BindIFactory", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam2>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get()})));
    }
    // public Zenject.FactoryToChoiceIdBinder`3<TParam1,TParam2,TContract> BindFactory()
    // Offset: 0xFFFFFFFF
    template<class TParam1, class TParam2, class TContract, class TFactory>
    Zenject::FactoryToChoiceIdBinder_3<TParam1, TParam2, TContract>* BindFactory() {
      static_assert(std::is_convertible_v<TFactory, Zenject::PlaceholderFactory_3<TParam1, TParam2, TContract>*>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_3<TParam1, TParam2, TContract>*>(this, "BindFactory", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam2>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactory>::get()})));
    }
    // public Zenject.FactoryToChoiceIdBinder`3<TParam1,TParam2,TContract> BindFactoryCustomInterface()
    // Offset: 0xFFFFFFFF
    template<class TParam1, class TParam2, class TContract, class TFactoryConcrete, class TFactoryContract>
    Zenject::FactoryToChoiceIdBinder_3<TParam1, TParam2, TContract>* BindFactoryCustomInterface() {
      static_assert(std::is_convertible_v<TFactoryConcrete, Zenject::PlaceholderFactory_3<TParam1, TParam2, TContract>*> && std::is_convertible_v<TFactoryConcrete, TFactoryContract>);
      static_assert(std::is_base_of_v<Zenject::IFactory, std::remove_pointer_t<TFactoryContract>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_3<TParam1, TParam2, TContract>*>(this, "BindFactoryCustomInterface", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam2>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryConcrete>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryContract>::get()})));
    }
    // private Zenject.FactoryToChoiceIdBinder`4<TParam1,TParam2,TParam3,TContract> BindFactoryInternal()
    // Offset: 0xFFFFFFFF
    template<class TParam1, class TParam2, class TParam3, class TContract, class TFactoryContract, class TFactoryConcrete>
    Zenject::FactoryToChoiceIdBinder_4<TParam1, TParam2, TParam3, TContract>* BindFactoryInternal() {
      static_assert(std::is_base_of_v<Zenject::IFactory, std::remove_pointer_t<TFactoryContract>>);
      static_assert(std::is_convertible_v<TFactoryConcrete, TFactoryContract> && std::is_base_of_v<Zenject::IFactory, std::remove_pointer_t<TFactoryConcrete>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_4<TParam1, TParam2, TParam3, TContract>*>(this, "BindFactoryInternal", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam2>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam3>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryConcrete>::get()})));
    }
    // public Zenject.FactoryToChoiceIdBinder`4<TParam1,TParam2,TParam3,TContract> BindIFactory()
    // Offset: 0xFFFFFFFF
    template<class TParam1, class TParam2, class TParam3, class TContract>
    Zenject::FactoryToChoiceIdBinder_4<TParam1, TParam2, TParam3, TContract>* BindIFactory() {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_4<TParam1, TParam2, TParam3, TContract>*>(this, "BindIFactory", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam2>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam3>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get()})));
    }
    // public Zenject.FactoryToChoiceIdBinder`4<TParam1,TParam2,TParam3,TContract> BindFactory()
    // Offset: 0xFFFFFFFF
    template<class TParam1, class TParam2, class TParam3, class TContract, class TFactory>
    Zenject::FactoryToChoiceIdBinder_4<TParam1, TParam2, TParam3, TContract>* BindFactory() {
      static_assert(std::is_convertible_v<TFactory, Zenject::PlaceholderFactory_4<TParam1, TParam2, TParam3, TContract>*>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_4<TParam1, TParam2, TParam3, TContract>*>(this, "BindFactory", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam2>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam3>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactory>::get()})));
    }
    // public Zenject.FactoryToChoiceIdBinder`4<TParam1,TParam2,TParam3,TContract> BindFactoryCustomInterface()
    // Offset: 0xFFFFFFFF
    template<class TParam1, class TParam2, class TParam3, class TContract, class TFactoryConcrete, class TFactoryContract>
    Zenject::FactoryToChoiceIdBinder_4<TParam1, TParam2, TParam3, TContract>* BindFactoryCustomInterface() {
      static_assert(std::is_convertible_v<TFactoryConcrete, Zenject::PlaceholderFactory_4<TParam1, TParam2, TParam3, TContract>*> && std::is_convertible_v<TFactoryConcrete, TFactoryContract>);
      static_assert(std::is_base_of_v<Zenject::IFactory, std::remove_pointer_t<TFactoryContract>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_4<TParam1, TParam2, TParam3, TContract>*>(this, "BindFactoryCustomInterface", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam2>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam3>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryConcrete>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryContract>::get()})));
    }
    // private Zenject.FactoryToChoiceIdBinder`5<TParam1,TParam2,TParam3,TParam4,TContract> BindFactoryInternal()
    // Offset: 0xFFFFFFFF
    template<class TParam1, class TParam2, class TParam3, class TParam4, class TContract, class TFactoryContract, class TFactoryConcrete>
    Zenject::FactoryToChoiceIdBinder_5<TParam1, TParam2, TParam3, TParam4, TContract>* BindFactoryInternal() {
      static_assert(std::is_base_of_v<Zenject::IFactory, std::remove_pointer_t<TFactoryContract>>);
      static_assert(std::is_convertible_v<TFactoryConcrete, TFactoryContract> && std::is_base_of_v<Zenject::IFactory, std::remove_pointer_t<TFactoryConcrete>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_5<TParam1, TParam2, TParam3, TParam4, TContract>*>(this, "BindFactoryInternal", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam2>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam3>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam4>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryConcrete>::get()})));
    }
    // public Zenject.FactoryToChoiceIdBinder`5<TParam1,TParam2,TParam3,TParam4,TContract> BindIFactory()
    // Offset: 0xFFFFFFFF
    template<class TParam1, class TParam2, class TParam3, class TParam4, class TContract>
    Zenject::FactoryToChoiceIdBinder_5<TParam1, TParam2, TParam3, TParam4, TContract>* BindIFactory() {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_5<TParam1, TParam2, TParam3, TParam4, TContract>*>(this, "BindIFactory", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam2>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam3>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam4>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get()})));
    }
    // public Zenject.FactoryToChoiceIdBinder`5<TParam1,TParam2,TParam3,TParam4,TContract> BindFactory()
    // Offset: 0xFFFFFFFF
    template<class TParam1, class TParam2, class TParam3, class TParam4, class TContract, class TFactory>
    Zenject::FactoryToChoiceIdBinder_5<TParam1, TParam2, TParam3, TParam4, TContract>* BindFactory() {
      static_assert(std::is_convertible_v<TFactory, Zenject::PlaceholderFactory_5<TParam1, TParam2, TParam3, TParam4, TContract>*>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_5<TParam1, TParam2, TParam3, TParam4, TContract>*>(this, "BindFactory", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam2>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam3>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam4>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactory>::get()})));
    }
    // public Zenject.FactoryToChoiceIdBinder`5<TParam1,TParam2,TParam3,TParam4,TContract> BindFactoryCustomInterface()
    // Offset: 0xFFFFFFFF
    template<class TParam1, class TParam2, class TParam3, class TParam4, class TContract, class TFactoryConcrete, class TFactoryContract>
    Zenject::FactoryToChoiceIdBinder_5<TParam1, TParam2, TParam3, TParam4, TContract>* BindFactoryCustomInterface() {
      static_assert(std::is_convertible_v<TFactoryConcrete, Zenject::PlaceholderFactory_5<TParam1, TParam2, TParam3, TParam4, TContract>*> && std::is_convertible_v<TFactoryConcrete, TFactoryContract>);
      static_assert(std::is_base_of_v<Zenject::IFactory, std::remove_pointer_t<TFactoryContract>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_5<TParam1, TParam2, TParam3, TParam4, TContract>*>(this, "BindFactoryCustomInterface", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam2>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam3>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam4>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryConcrete>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryContract>::get()})));
    }
    // private Zenject.FactoryToChoiceIdBinder`6<TParam1,TParam2,TParam3,TParam4,TParam5,TContract> BindFactoryInternal()
    // Offset: 0xFFFFFFFF
    template<class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TContract, class TFactoryContract, class TFactoryConcrete>
    Zenject::FactoryToChoiceIdBinder_6<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>* BindFactoryInternal() {
      static_assert(std::is_base_of_v<Zenject::IFactory, std::remove_pointer_t<TFactoryContract>>);
      static_assert(std::is_convertible_v<TFactoryConcrete, TFactoryContract> && std::is_base_of_v<Zenject::IFactory, std::remove_pointer_t<TFactoryConcrete>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_6<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>*>(this, "BindFactoryInternal", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam2>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam3>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam4>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam5>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryConcrete>::get()})));
    }
    // public Zenject.FactoryToChoiceIdBinder`6<TParam1,TParam2,TParam3,TParam4,TParam5,TContract> BindIFactory()
    // Offset: 0xFFFFFFFF
    template<class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TContract>
    Zenject::FactoryToChoiceIdBinder_6<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>* BindIFactory() {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_6<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>*>(this, "BindIFactory", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam2>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam3>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam4>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam5>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get()})));
    }
    // public Zenject.FactoryToChoiceIdBinder`6<TParam1,TParam2,TParam3,TParam4,TParam5,TContract> BindFactory()
    // Offset: 0xFFFFFFFF
    template<class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TContract, class TFactory>
    Zenject::FactoryToChoiceIdBinder_6<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>* BindFactory() {
      static_assert(std::is_convertible_v<TFactory, Zenject::PlaceholderFactory_6<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>*>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_6<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>*>(this, "BindFactory", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam2>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam3>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam4>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam5>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactory>::get()})));
    }
    // public Zenject.FactoryToChoiceIdBinder`6<TParam1,TParam2,TParam3,TParam4,TParam5,TContract> BindFactoryCustomInterface()
    // Offset: 0xFFFFFFFF
    template<class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TContract, class TFactoryConcrete, class TFactoryContract>
    Zenject::FactoryToChoiceIdBinder_6<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>* BindFactoryCustomInterface() {
      static_assert(std::is_convertible_v<TFactoryConcrete, Zenject::PlaceholderFactory_6<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>*> && std::is_convertible_v<TFactoryConcrete, TFactoryContract>);
      static_assert(std::is_base_of_v<Zenject::IFactory, std::remove_pointer_t<TFactoryContract>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_6<TParam1, TParam2, TParam3, TParam4, TParam5, TContract>*>(this, "BindFactoryCustomInterface", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam2>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam3>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam4>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam5>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryConcrete>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryContract>::get()})));
    }
    // private Zenject.FactoryToChoiceIdBinder`7<TParam1,TParam2,TParam3,TParam4,TParam5,TParam6,TContract> BindFactoryInternal()
    // Offset: 0xFFFFFFFF
    template<class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TContract, class TFactoryContract, class TFactoryConcrete>
    Zenject::FactoryToChoiceIdBinder_7<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>* BindFactoryInternal() {
      static_assert(std::is_base_of_v<Zenject::IFactory, std::remove_pointer_t<TFactoryContract>>);
      static_assert(std::is_convertible_v<TFactoryConcrete, TFactoryContract> && std::is_base_of_v<Zenject::IFactory, std::remove_pointer_t<TFactoryConcrete>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_7<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>*>(this, "BindFactoryInternal", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam2>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam3>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam4>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam5>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam6>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryConcrete>::get()})));
    }
    // public Zenject.FactoryToChoiceIdBinder`7<TParam1,TParam2,TParam3,TParam4,TParam5,TParam6,TContract> BindIFactory()
    // Offset: 0xFFFFFFFF
    template<class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TContract>
    Zenject::FactoryToChoiceIdBinder_7<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>* BindIFactory() {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_7<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>*>(this, "BindIFactory", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam2>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam3>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam4>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam5>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam6>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get()})));
    }
    // public Zenject.FactoryToChoiceIdBinder`7<TParam1,TParam2,TParam3,TParam4,TParam5,TParam6,TContract> BindFactory()
    // Offset: 0xFFFFFFFF
    template<class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TContract, class TFactory>
    Zenject::FactoryToChoiceIdBinder_7<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>* BindFactory() {
      static_assert(std::is_convertible_v<TFactory, Zenject::PlaceholderFactory_7<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>*>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_7<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>*>(this, "BindFactory", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam2>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam3>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam4>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam5>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam6>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactory>::get()})));
    }
    // public Zenject.FactoryToChoiceIdBinder`7<TParam1,TParam2,TParam3,TParam4,TParam5,TParam6,TContract> BindFactoryCustomInterface()
    // Offset: 0xFFFFFFFF
    template<class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TContract, class TFactoryConcrete, class TFactoryContract>
    Zenject::FactoryToChoiceIdBinder_7<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>* BindFactoryCustomInterface() {
      static_assert(std::is_convertible_v<TFactoryConcrete, Zenject::PlaceholderFactory_7<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>*> && std::is_convertible_v<TFactoryConcrete, TFactoryContract>);
      static_assert(std::is_base_of_v<Zenject::IFactory, std::remove_pointer_t<TFactoryContract>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_7<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TContract>*>(this, "BindFactoryCustomInterface", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam2>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam3>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam4>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam5>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam6>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryConcrete>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryContract>::get()})));
    }
    // private Zenject.FactoryToChoiceIdBinder`11<TParam1,TParam2,TParam3,TParam4,TParam5,TParam6,TParam7,TParam8,TParam9,TParam10,TContract> BindFactoryInternal()
    // Offset: 0xFFFFFFFF
    template<class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TContract, class TFactoryContract, class TFactoryConcrete>
    Zenject::FactoryToChoiceIdBinder_11<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>* BindFactoryInternal() {
      static_assert(std::is_base_of_v<Zenject::IFactory, std::remove_pointer_t<TFactoryContract>>);
      static_assert(std::is_convertible_v<TFactoryConcrete, TFactoryContract> && std::is_base_of_v<Zenject::IFactory, std::remove_pointer_t<TFactoryConcrete>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_11<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>*>(this, "BindFactoryInternal", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam2>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam3>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam4>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam5>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam6>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam7>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam8>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam9>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam10>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryConcrete>::get()})));
    }
    // public Zenject.FactoryToChoiceIdBinder`11<TParam1,TParam2,TParam3,TParam4,TParam5,TParam6,TParam7,TParam8,TParam9,TParam10,TContract> BindIFactory()
    // Offset: 0xFFFFFFFF
    template<class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TContract>
    Zenject::FactoryToChoiceIdBinder_11<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>* BindIFactory() {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_11<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>*>(this, "BindIFactory", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam2>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam3>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam4>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam5>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam6>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam7>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam8>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam9>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam10>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get()})));
    }
    // public Zenject.FactoryToChoiceIdBinder`11<TParam1,TParam2,TParam3,TParam4,TParam5,TParam6,TParam7,TParam8,TParam9,TParam10,TContract> BindFactory()
    // Offset: 0xFFFFFFFF
    template<class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TContract, class TFactory>
    Zenject::FactoryToChoiceIdBinder_11<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>* BindFactory() {
      static_assert(std::is_convertible_v<TFactory, Zenject::PlaceholderFactory_11<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>*>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_11<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>*>(this, "BindFactory", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam2>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam3>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam4>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam5>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam6>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam7>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam8>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam9>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam10>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactory>::get()})));
    }
    // public Zenject.FactoryToChoiceIdBinder`11<TParam1,TParam2,TParam3,TParam4,TParam5,TParam6,TParam7,TParam8,TParam9,TParam10,TContract> BindFactoryCustomInterface()
    // Offset: 0xFFFFFFFF
    template<class TParam1, class TParam2, class TParam3, class TParam4, class TParam5, class TParam6, class TParam7, class TParam8, class TParam9, class TParam10, class TContract, class TFactoryConcrete, class TFactoryContract>
    Zenject::FactoryToChoiceIdBinder_11<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>* BindFactoryCustomInterface() {
      static_assert(std::is_convertible_v<TFactoryConcrete, Zenject::PlaceholderFactory_11<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>*> && std::is_convertible_v<TFactoryConcrete, TFactoryContract>);
      static_assert(std::is_base_of_v<Zenject::IFactory, std::remove_pointer_t<TFactoryContract>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::FactoryToChoiceIdBinder_11<TParam1, TParam2, TParam3, TParam4, TParam5, TParam6, TParam7, TParam8, TParam9, TParam10, TContract>*>(this, "BindFactoryCustomInterface", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam2>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam3>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam4>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam5>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam6>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam7>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam8>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam9>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TParam10>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryConcrete>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactoryContract>::get()})));
    }
    // public T InstantiateExplicit(System.Collections.Generic.List`1<Zenject.TypeValuePair> extraArgs)
    // Offset: 0xFFFFFFFF
    template<class T>
    T InstantiateExplicit(System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>(this, "InstantiateExplicit", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, extraArgs)));
    }
    // public System.Object InstantiateExplicit(System.Type concreteType, System.Collections.Generic.List`1<Zenject.TypeValuePair> extraArgs)
    // Offset: 0xD78A88
    ::Il2CppObject* InstantiateExplicit(System::Type* concreteType, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs);
    // public System.Object InstantiateExplicit(System.Type concreteType, System.Boolean autoInject, System.Collections.Generic.List`1<Zenject.TypeValuePair> extraArgs, Zenject.InjectContext context, System.Object concreteIdentifier)
    // Offset: 0xD7B364
    ::Il2CppObject* InstantiateExplicit(System::Type* concreteType, bool autoInject, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs, Zenject::InjectContext* context, ::Il2CppObject* concreteIdentifier);
    // public UnityEngine.Component InstantiateComponentExplicit(System.Type componentType, UnityEngine.GameObject gameObject, System.Collections.Generic.List`1<Zenject.TypeValuePair> extraArgs)
    // Offset: 0xD78BDC
    UnityEngine::Component* InstantiateComponentExplicit(System::Type* componentType, UnityEngine::GameObject* gameObject, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs);
    // public System.Object InstantiateScriptableObjectResourceExplicit(System.Type scriptableObjectType, System.String resourcePath, System.Collections.Generic.List`1<Zenject.TypeValuePair> extraArgs)
    // Offset: 0xD79894
    ::Il2CppObject* InstantiateScriptableObjectResourceExplicit(System::Type* scriptableObjectType, ::Il2CppString* resourcePath, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs);
    // public System.Object InstantiatePrefabResourceForComponentExplicit(System.Type componentType, System.String resourcePath, System.Collections.Generic.List`1<Zenject.TypeValuePair> extraArgs, Zenject.GameObjectCreationParameters creationInfo)
    // Offset: 0xD796F0
    ::Il2CppObject* InstantiatePrefabResourceForComponentExplicit(System::Type* componentType, ::Il2CppString* resourcePath, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs, Zenject::GameObjectCreationParameters* creationInfo);
    // public System.Object InstantiatePrefabResourceForComponentExplicit(System.Type componentType, System.String resourcePath, System.Collections.Generic.List`1<Zenject.TypeValuePair> extraArgs, Zenject.InjectContext context, System.Object concreteIdentifier, Zenject.GameObjectCreationParameters creationInfo)
    // Offset: 0xD7B4E0
    ::Il2CppObject* InstantiatePrefabResourceForComponentExplicit(System::Type* componentType, ::Il2CppString* resourcePath, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs, Zenject::InjectContext* context, ::Il2CppObject* concreteIdentifier, Zenject::GameObjectCreationParameters* creationInfo);
    // public System.Object InstantiatePrefabForComponentExplicit(System.Type componentType, UnityEngine.Object prefab, System.Collections.Generic.List`1<Zenject.TypeValuePair> extraArgs)
    // Offset: 0xD7B7B8
    ::Il2CppObject* InstantiatePrefabForComponentExplicit(System::Type* componentType, UnityEngine::Object* prefab, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs);
    // public System.Object InstantiatePrefabForComponentExplicit(System.Type componentType, UnityEngine.Object prefab, System.Collections.Generic.List`1<Zenject.TypeValuePair> extraArgs, Zenject.GameObjectCreationParameters gameObjectBindInfo)
    // Offset: 0xD7955C
    ::Il2CppObject* InstantiatePrefabForComponentExplicit(System::Type* componentType, UnityEngine::Object* prefab, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs, Zenject::GameObjectCreationParameters* gameObjectBindInfo);
    // public System.Object InstantiatePrefabForComponentExplicit(System.Type componentType, UnityEngine.Object prefab, System.Collections.Generic.List`1<Zenject.TypeValuePair> extraArgs, Zenject.InjectContext context, System.Object concreteIdentifier, Zenject.GameObjectCreationParameters gameObjectBindInfo)
    // Offset: 0xD7B630
    ::Il2CppObject* InstantiatePrefabForComponentExplicit(System::Type* componentType, UnityEngine::Object* prefab, System::Collections::Generic::List_1<Zenject::TypeValuePair>* extraArgs, Zenject::InjectContext* context, ::Il2CppObject* concreteIdentifier, Zenject::GameObjectCreationParameters* gameObjectBindInfo);
    // public System.Void BindExecutionOrder(System.Int32 order)
    // Offset: 0xFFFFFFFF
    template<class T>
    void BindExecutionOrder(int order) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "BindExecutionOrder", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, order));
    }
    // public System.Void BindExecutionOrder(System.Type type, System.Int32 order)
    // Offset: 0xD7B850
    void BindExecutionOrder(System::Type* type, int order);
    // public Zenject.CopyNonLazyBinder BindTickableExecutionOrder(System.Int32 order)
    // Offset: 0xFFFFFFFF
    template<class T>
    Zenject::CopyNonLazyBinder* BindTickableExecutionOrder(int order) {
      static_assert(std::is_base_of_v<Zenject::ITickable, std::remove_pointer_t<T>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::CopyNonLazyBinder*>(this, "BindTickableExecutionOrder", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, order)));
    }
    // public Zenject.CopyNonLazyBinder BindTickableExecutionOrder(System.Type type, System.Int32 order)
    // Offset: 0xD7BBE4
    Zenject::CopyNonLazyBinder* BindTickableExecutionOrder(System::Type* type, int order);
    // public Zenject.CopyNonLazyBinder BindInitializableExecutionOrder(System.Int32 order)
    // Offset: 0xFFFFFFFF
    template<class T>
    Zenject::CopyNonLazyBinder* BindInitializableExecutionOrder(int order) {
      static_assert(std::is_base_of_v<Zenject::IInitializable, std::remove_pointer_t<T>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::CopyNonLazyBinder*>(this, "BindInitializableExecutionOrder", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, order)));
    }
    // public Zenject.CopyNonLazyBinder BindInitializableExecutionOrder(System.Type type, System.Int32 order)
    // Offset: 0xD7BCC4
    Zenject::CopyNonLazyBinder* BindInitializableExecutionOrder(System::Type* type, int order);
    // public Zenject.CopyNonLazyBinder BindDisposableExecutionOrder(System.Int32 order)
    // Offset: 0xFFFFFFFF
    template<class T>
    Zenject::CopyNonLazyBinder* BindDisposableExecutionOrder(int order) {
      static_assert(std::is_base_of_v<System::IDisposable, std::remove_pointer_t<T>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::CopyNonLazyBinder*>(this, "BindDisposableExecutionOrder", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, order)));
    }
    // public Zenject.CopyNonLazyBinder BindLateDisposableExecutionOrder(System.Int32 order)
    // Offset: 0xFFFFFFFF
    template<class T>
    Zenject::CopyNonLazyBinder* BindLateDisposableExecutionOrder(int order) {
      static_assert(std::is_base_of_v<Zenject::ILateDisposable, std::remove_pointer_t<T>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::CopyNonLazyBinder*>(this, "BindLateDisposableExecutionOrder", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, order)));
    }
    // public Zenject.CopyNonLazyBinder BindDisposableExecutionOrder(System.Type type, System.Int32 order)
    // Offset: 0xD7BDA4
    Zenject::CopyNonLazyBinder* BindDisposableExecutionOrder(System::Type* type, int order);
    // public Zenject.CopyNonLazyBinder BindLateDisposableExecutionOrder(System.Type type, System.Int32 order)
    // Offset: 0xD7BE84
    Zenject::CopyNonLazyBinder* BindLateDisposableExecutionOrder(System::Type* type, int order);
    // public Zenject.CopyNonLazyBinder BindFixedTickableExecutionOrder(System.Int32 order)
    // Offset: 0xFFFFFFFF
    template<class T>
    Zenject::CopyNonLazyBinder* BindFixedTickableExecutionOrder(int order) {
      static_assert(std::is_base_of_v<Zenject::IFixedTickable, std::remove_pointer_t<T>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::CopyNonLazyBinder*>(this, "BindFixedTickableExecutionOrder", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, order)));
    }
    // public Zenject.CopyNonLazyBinder BindFixedTickableExecutionOrder(System.Type type, System.Int32 order)
    // Offset: 0xD7BF7C
    Zenject::CopyNonLazyBinder* BindFixedTickableExecutionOrder(System::Type* type, int order);
    // public Zenject.CopyNonLazyBinder BindLateTickableExecutionOrder(System.Int32 order)
    // Offset: 0xFFFFFFFF
    template<class T>
    Zenject::CopyNonLazyBinder* BindLateTickableExecutionOrder(int order) {
      static_assert(std::is_base_of_v<Zenject::ILateTickable, std::remove_pointer_t<T>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::CopyNonLazyBinder*>(this, "BindLateTickableExecutionOrder", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, order)));
    }
    // public Zenject.CopyNonLazyBinder BindLateTickableExecutionOrder(System.Type type, System.Int32 order)
    // Offset: 0xD7C098
    Zenject::CopyNonLazyBinder* BindLateTickableExecutionOrder(System::Type* type, int order);
    // public Zenject.CopyNonLazyBinder BindPoolableExecutionOrder(System.Int32 order)
    // Offset: 0xFFFFFFFF
    template<class T>
    Zenject::CopyNonLazyBinder* BindPoolableExecutionOrder(int order) {
      static_assert(std::is_base_of_v<Zenject::IPoolable, std::remove_pointer_t<T>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::CopyNonLazyBinder*>(this, "BindPoolableExecutionOrder", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, order)));
    }
    // public Zenject.CopyNonLazyBinder BindPoolableExecutionOrder(System.Type type, System.Int32 order)
    // Offset: 0xD7C1B4
    Zenject::CopyNonLazyBinder* BindPoolableExecutionOrder(System::Type* type, int order);
    // public System.Void .ctor()
    // Offset: 0xD71FBC
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static DiContainer* New_ctor();
    // public UnityEngine.GameObject CreateEmptyGameObject(System.String name)
    // Offset: 0xD78898
    // Implemented from: Zenject.IInstantiator
    // Base method: UnityEngine.GameObject IInstantiator::CreateEmptyGameObject(System.String name)
    UnityEngine::GameObject* CreateEmptyGameObject(::Il2CppString* name);
    // public T Instantiate()
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.IInstantiator
    // Base method: T IInstantiator::Instantiate()
    template<class T>
    T Instantiate() {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>(this, "Instantiate", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()})));
    }
    // public T Instantiate(System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.IInstantiator
    // Base method: T IInstantiator::Instantiate(System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    template<class T>
    T Instantiate(System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>(this, "Instantiate", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, extraArgs)));
    }
    // public System.Object Instantiate(System.Type concreteType)
    // Offset: 0xD6DD48
    // Implemented from: Zenject.IInstantiator
    // Base method: System.Object IInstantiator::Instantiate(System.Type concreteType)
    ::Il2CppObject* Instantiate(System::Type* concreteType);
    // public System.Object Instantiate(System.Type concreteType, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    // Offset: 0xD789EC
    // Implemented from: Zenject.IInstantiator
    // Base method: System.Object IInstantiator::Instantiate(System.Type concreteType, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    ::Il2CppObject* Instantiate(System::Type* concreteType, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs);
    // public TContract InstantiateComponent(UnityEngine.GameObject gameObject)
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.IInstantiator
    // Base method: TContract IInstantiator::InstantiateComponent(UnityEngine.GameObject gameObject)
    template<class TContract>
    TContract InstantiateComponent(UnityEngine::GameObject* gameObject) {
      static_assert(std::is_convertible_v<TContract, UnityEngine::Component*>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<TContract>(this, "InstantiateComponent", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get()}, gameObject)));
    }
    // public TContract InstantiateComponent(UnityEngine.GameObject gameObject, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.IInstantiator
    // Base method: TContract IInstantiator::InstantiateComponent(UnityEngine.GameObject gameObject, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    template<class TContract>
    TContract InstantiateComponent(UnityEngine::GameObject* gameObject, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs) {
      static_assert(std::is_convertible_v<TContract, UnityEngine::Component*>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<TContract>(this, "InstantiateComponent", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TContract>::get()}, gameObject, extraArgs)));
    }
    // public UnityEngine.Component InstantiateComponent(System.Type componentType, UnityEngine.GameObject gameObject)
    // Offset: 0xD78B18
    // Implemented from: Zenject.IInstantiator
    // Base method: UnityEngine.Component IInstantiator::InstantiateComponent(System.Type componentType, UnityEngine.GameObject gameObject)
    UnityEngine::Component* InstantiateComponent(System::Type* componentType, UnityEngine::GameObject* gameObject);
    // public UnityEngine.Component InstantiateComponent(System.Type componentType, UnityEngine.GameObject gameObject, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    // Offset: 0xD78B94
    // Implemented from: Zenject.IInstantiator
    // Base method: UnityEngine.Component IInstantiator::InstantiateComponent(System.Type componentType, UnityEngine.GameObject gameObject, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    UnityEngine::Component* InstantiateComponent(System::Type* componentType, UnityEngine::GameObject* gameObject, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs);
    // public T InstantiateComponentOnNewGameObject()
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.IInstantiator
    // Base method: T IInstantiator::InstantiateComponentOnNewGameObject()
    template<class T>
    T InstantiateComponentOnNewGameObject() {
      static_assert(std::is_convertible_v<T, UnityEngine::Component*>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>(this, "InstantiateComponentOnNewGameObject", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()})));
    }
    // public T InstantiateComponentOnNewGameObject(System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.IInstantiator
    // Base method: T IInstantiator::InstantiateComponentOnNewGameObject(System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    template<class T>
    T InstantiateComponentOnNewGameObject(System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs) {
      static_assert(std::is_convertible_v<T, UnityEngine::Component*>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>(this, "InstantiateComponentOnNewGameObject", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, extraArgs)));
    }
    // public T InstantiateComponentOnNewGameObject(System.String gameObjectName)
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.IInstantiator
    // Base method: T IInstantiator::InstantiateComponentOnNewGameObject(System.String gameObjectName)
    template<class T>
    T InstantiateComponentOnNewGameObject(::Il2CppString* gameObjectName) {
      static_assert(std::is_convertible_v<T, UnityEngine::Component*>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>(this, "InstantiateComponentOnNewGameObject", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, gameObjectName)));
    }
    // public T InstantiateComponentOnNewGameObject(System.String gameObjectName, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.IInstantiator
    // Base method: T IInstantiator::InstantiateComponentOnNewGameObject(System.String gameObjectName, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    template<class T>
    T InstantiateComponentOnNewGameObject(::Il2CppString* gameObjectName, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs) {
      static_assert(std::is_convertible_v<T, UnityEngine::Component*>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>(this, "InstantiateComponentOnNewGameObject", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, gameObjectName, extraArgs)));
    }
    // public UnityEngine.GameObject InstantiatePrefab(UnityEngine.Object prefab)
    // Offset: 0xD78CAC
    // Implemented from: Zenject.IInstantiator
    // Base method: UnityEngine.GameObject IInstantiator::InstantiatePrefab(UnityEngine.Object prefab)
    UnityEngine::GameObject* InstantiatePrefab(UnityEngine::Object* prefab);
    // public UnityEngine.GameObject InstantiatePrefab(UnityEngine.Object prefab, UnityEngine.Transform parentTransform)
    // Offset: 0xD78DB4
    // Implemented from: Zenject.IInstantiator
    // Base method: UnityEngine.GameObject IInstantiator::InstantiatePrefab(UnityEngine.Object prefab, UnityEngine.Transform parentTransform)
    UnityEngine::GameObject* InstantiatePrefab(UnityEngine::Object* prefab, UnityEngine::Transform* parentTransform);
    // public UnityEngine.GameObject InstantiatePrefab(UnityEngine.Object prefab, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform)
    // Offset: 0xD78E44
    // Implemented from: Zenject.IInstantiator
    // Base method: UnityEngine.GameObject IInstantiator::InstantiatePrefab(UnityEngine.Object prefab, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform)
    UnityEngine::GameObject* InstantiatePrefab(UnityEngine::Object* prefab, UnityEngine::Vector3 position, UnityEngine::Quaternion rotation, UnityEngine::Transform* parentTransform);
    // public UnityEngine.GameObject InstantiatePrefabResource(System.String resourcePath)
    // Offset: 0xD790E8
    // Implemented from: Zenject.IInstantiator
    // Base method: UnityEngine.GameObject IInstantiator::InstantiatePrefabResource(System.String resourcePath)
    UnityEngine::GameObject* InstantiatePrefabResource(::Il2CppString* resourcePath);
    // public UnityEngine.GameObject InstantiatePrefabResource(System.String resourcePath, UnityEngine.Transform parentTransform)
    // Offset: 0xD79288
    // Implemented from: Zenject.IInstantiator
    // Base method: UnityEngine.GameObject IInstantiator::InstantiatePrefabResource(System.String resourcePath, UnityEngine.Transform parentTransform)
    UnityEngine::GameObject* InstantiatePrefabResource(::Il2CppString* resourcePath, UnityEngine::Transform* parentTransform);
    // public UnityEngine.GameObject InstantiatePrefabResource(System.String resourcePath, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform)
    // Offset: 0xD79318
    // Implemented from: Zenject.IInstantiator
    // Base method: UnityEngine.GameObject IInstantiator::InstantiatePrefabResource(System.String resourcePath, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform)
    UnityEngine::GameObject* InstantiatePrefabResource(::Il2CppString* resourcePath, UnityEngine::Vector3 position, UnityEngine::Quaternion rotation, UnityEngine::Transform* parentTransform);
    // public T InstantiatePrefabForComponent(UnityEngine.Object prefab)
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.IInstantiator
    // Base method: T IInstantiator::InstantiatePrefabForComponent(UnityEngine.Object prefab)
    template<class T>
    T InstantiatePrefabForComponent(UnityEngine::Object* prefab) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>(this, "InstantiatePrefabForComponent", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, prefab)));
    }
    // public T InstantiatePrefabForComponent(UnityEngine.Object prefab, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.IInstantiator
    // Base method: T IInstantiator::InstantiatePrefabForComponent(UnityEngine.Object prefab, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    template<class T>
    T InstantiatePrefabForComponent(UnityEngine::Object* prefab, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>(this, "InstantiatePrefabForComponent", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, prefab, extraArgs)));
    }
    // public T InstantiatePrefabForComponent(UnityEngine.Object prefab, UnityEngine.Transform parentTransform)
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.IInstantiator
    // Base method: T IInstantiator::InstantiatePrefabForComponent(UnityEngine.Object prefab, UnityEngine.Transform parentTransform)
    template<class T>
    T InstantiatePrefabForComponent(UnityEngine::Object* prefab, UnityEngine::Transform* parentTransform) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>(this, "InstantiatePrefabForComponent", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, prefab, parentTransform)));
    }
    // public T InstantiatePrefabForComponent(UnityEngine.Object prefab, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.IInstantiator
    // Base method: T IInstantiator::InstantiatePrefabForComponent(UnityEngine.Object prefab, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    template<class T>
    T InstantiatePrefabForComponent(UnityEngine::Object* prefab, UnityEngine::Transform* parentTransform, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>(this, "InstantiatePrefabForComponent", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, prefab, parentTransform, extraArgs)));
    }
    // public T InstantiatePrefabForComponent(UnityEngine.Object prefab, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform)
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.IInstantiator
    // Base method: T IInstantiator::InstantiatePrefabForComponent(UnityEngine.Object prefab, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform)
    template<class T>
    T InstantiatePrefabForComponent(UnityEngine::Object* prefab, UnityEngine::Vector3 position, UnityEngine::Quaternion rotation, UnityEngine::Transform* parentTransform) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>(this, "InstantiatePrefabForComponent", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, prefab, position, rotation, parentTransform)));
    }
    // public T InstantiatePrefabForComponent(UnityEngine.Object prefab, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.IInstantiator
    // Base method: T IInstantiator::InstantiatePrefabForComponent(UnityEngine.Object prefab, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    template<class T>
    T InstantiatePrefabForComponent(UnityEngine::Object* prefab, UnityEngine::Vector3 position, UnityEngine::Quaternion rotation, UnityEngine::Transform* parentTransform, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>(this, "InstantiatePrefabForComponent", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, prefab, position, rotation, parentTransform, extraArgs)));
    }
    // public System.Object InstantiatePrefabForComponent(System.Type concreteType, UnityEngine.Object prefab, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    // Offset: 0xD79458
    // Implemented from: Zenject.IInstantiator
    // Base method: System.Object IInstantiator::InstantiatePrefabForComponent(System.Type concreteType, UnityEngine.Object prefab, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    ::Il2CppObject* InstantiatePrefabForComponent(System::Type* concreteType, UnityEngine::Object* prefab, UnityEngine::Transform* parentTransform, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs);
    // public T InstantiatePrefabResourceForComponent(System.String resourcePath)
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.IInstantiator
    // Base method: T IInstantiator::InstantiatePrefabResourceForComponent(System.String resourcePath)
    template<class T>
    T InstantiatePrefabResourceForComponent(::Il2CppString* resourcePath) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>(this, "InstantiatePrefabResourceForComponent", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, resourcePath)));
    }
    // public T InstantiatePrefabResourceForComponent(System.String resourcePath, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.IInstantiator
    // Base method: T IInstantiator::InstantiatePrefabResourceForComponent(System.String resourcePath, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    template<class T>
    T InstantiatePrefabResourceForComponent(::Il2CppString* resourcePath, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>(this, "InstantiatePrefabResourceForComponent", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, resourcePath, extraArgs)));
    }
    // public T InstantiatePrefabResourceForComponent(System.String resourcePath, UnityEngine.Transform parentTransform)
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.IInstantiator
    // Base method: T IInstantiator::InstantiatePrefabResourceForComponent(System.String resourcePath, UnityEngine.Transform parentTransform)
    template<class T>
    T InstantiatePrefabResourceForComponent(::Il2CppString* resourcePath, UnityEngine::Transform* parentTransform) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>(this, "InstantiatePrefabResourceForComponent", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, resourcePath, parentTransform)));
    }
    // public T InstantiatePrefabResourceForComponent(System.String resourcePath, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.IInstantiator
    // Base method: T IInstantiator::InstantiatePrefabResourceForComponent(System.String resourcePath, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    template<class T>
    T InstantiatePrefabResourceForComponent(::Il2CppString* resourcePath, UnityEngine::Transform* parentTransform, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>(this, "InstantiatePrefabResourceForComponent", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, resourcePath, parentTransform, extraArgs)));
    }
    // public T InstantiatePrefabResourceForComponent(System.String resourcePath, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform)
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.IInstantiator
    // Base method: T IInstantiator::InstantiatePrefabResourceForComponent(System.String resourcePath, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform)
    template<class T>
    T InstantiatePrefabResourceForComponent(::Il2CppString* resourcePath, UnityEngine::Vector3 position, UnityEngine::Quaternion rotation, UnityEngine::Transform* parentTransform) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>(this, "InstantiatePrefabResourceForComponent", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, resourcePath, position, rotation, parentTransform)));
    }
    // public T InstantiatePrefabResourceForComponent(System.String resourcePath, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.IInstantiator
    // Base method: T IInstantiator::InstantiatePrefabResourceForComponent(System.String resourcePath, UnityEngine.Vector3 position, UnityEngine.Quaternion rotation, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    template<class T>
    T InstantiatePrefabResourceForComponent(::Il2CppString* resourcePath, UnityEngine::Vector3 position, UnityEngine::Quaternion rotation, UnityEngine::Transform* parentTransform, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>(this, "InstantiatePrefabResourceForComponent", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, resourcePath, position, rotation, parentTransform, extraArgs)));
    }
    // public System.Object InstantiatePrefabResourceForComponent(System.Type concreteType, System.String resourcePath, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    // Offset: 0xD79600
    // Implemented from: Zenject.IInstantiator
    // Base method: System.Object IInstantiator::InstantiatePrefabResourceForComponent(System.Type concreteType, System.String resourcePath, UnityEngine.Transform parentTransform, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    ::Il2CppObject* InstantiatePrefabResourceForComponent(System::Type* concreteType, ::Il2CppString* resourcePath, UnityEngine::Transform* parentTransform, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs);
    // public T InstantiateScriptableObjectResource(System.String resourcePath)
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.IInstantiator
    // Base method: T IInstantiator::InstantiateScriptableObjectResource(System.String resourcePath)
    template<class T>
    T InstantiateScriptableObjectResource(::Il2CppString* resourcePath) {
      static_assert(std::is_convertible_v<T, UnityEngine::ScriptableObject*>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>(this, "InstantiateScriptableObjectResource", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, resourcePath)));
    }
    // public T InstantiateScriptableObjectResource(System.String resourcePath, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.IInstantiator
    // Base method: T IInstantiator::InstantiateScriptableObjectResource(System.String resourcePath, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    template<class T>
    T InstantiateScriptableObjectResource(::Il2CppString* resourcePath, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs) {
      static_assert(std::is_convertible_v<T, UnityEngine::ScriptableObject*>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>(this, "InstantiateScriptableObjectResource", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, resourcePath, extraArgs)));
    }
    // public System.Object InstantiateScriptableObjectResource(System.Type scriptableObjectType, System.String resourcePath)
    // Offset: 0xD79794
    // Implemented from: Zenject.IInstantiator
    // Base method: System.Object IInstantiator::InstantiateScriptableObjectResource(System.Type scriptableObjectType, System.String resourcePath)
    ::Il2CppObject* InstantiateScriptableObjectResource(System::Type* scriptableObjectType, ::Il2CppString* resourcePath);
    // public System.Object InstantiateScriptableObjectResource(System.Type scriptableObjectType, System.String resourcePath, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    // Offset: 0xD79808
    // Implemented from: Zenject.IInstantiator
    // Base method: System.Object IInstantiator::InstantiateScriptableObjectResource(System.Type scriptableObjectType, System.String resourcePath, System.Collections.Generic.IEnumerable`1<System.Object> extraArgs)
    ::Il2CppObject* InstantiateScriptableObjectResource(System::Type* scriptableObjectType, ::Il2CppString* resourcePath, System::Collections::Generic::IEnumerable_1<::Il2CppObject*>* extraArgs);
  }; // Zenject.DiContainer
}
DEFINE_IL2CPP_ARG_TYPE(Zenject::DiContainer*, "Zenject", "DiContainer");
#pragma pack(pop)
