// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.MemoryPoolBase`1
#include "Zenject/MemoryPoolBase_1.hpp"
// Including type: Zenject.IMemoryPool`2
#include "Zenject/IMemoryPool_2.hpp"
// Including type: Zenject.IFactory`2
#include "Zenject/IFactory_2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Zenject
namespace Zenject {
  // WARNING Size may be invalid!
  // Autogenerated type: Zenject.MemoryPool`2
  // [] Offset: FFFFFFFF
  template<typename TParam1, typename TValue>
  class MemoryPool_2 : public Zenject::MemoryPoolBase_1<TValue>/*, public Zenject::IMemoryPool_2<TParam1, TValue>, public Zenject::IFactory_2<TParam1, TValue>*/ {
    public:
    // Creating value type constructor for type: MemoryPool_2
    MemoryPool_2() noexcept {}
    // Creating interface conversion operator: operator Zenject::IMemoryPool_2<TParam1, TValue>
    operator Zenject::IMemoryPool_2<TParam1, TValue>() noexcept {
      return *reinterpret_cast<Zenject::IMemoryPool_2<TParam1, TValue>*>(this);
    }
    // Creating interface conversion operator: operator Zenject::IFactory_2<TParam1, TValue>
    operator Zenject::IFactory_2<TParam1, TValue>() noexcept {
      return *reinterpret_cast<Zenject::IFactory_2<TParam1, TValue>*>(this);
    }
    // protected System.Void Reinitialize(TParam1 p1, TValue item)
    // Offset: 0xFFFFFFFF
    void Reinitialize(TParam1 p1, TValue item) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MemoryPool_2::Reinitialize");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Reinitialize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(p1, item)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, p1, item);
    }
    // public TValue Spawn(TParam1 param)
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.IMemoryPool`2
    // Base method: TValue IMemoryPool_2::Spawn(TParam1 param)
    TValue Spawn(TParam1 param) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MemoryPool_2::Spawn");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Spawn", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(param)));
      return ::il2cpp_utils::RunMethodThrow<TValue, false>(this, ___internal__method, param);
    }
    // private TValue Zenject.IFactory<TParam1,TValue>.Create(TParam1 p1)
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.IFactory`2
    // Base method: TValue IFactory_2::Create(TParam1 p1)
    TValue Zenject_IFactory_2_Create(TParam1 p1) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MemoryPool_2::Zenject.IFactory<TParam1,TValue>.Create");
      static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "Zenject.IFactory<TParam1,TValue>.Create", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(p1))));
      return ::il2cpp_utils::RunMethodThrow<TValue, false>(this, ___internal__method, p1);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.MemoryPoolBase`1
    // Base method: System.Void MemoryPoolBase_1::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MemoryPool_2<TParam1, TValue>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::MemoryPool_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MemoryPool_2<TParam1, TValue>*, creationType>()));
    }
  }; // Zenject.MemoryPool`2
  // Could not write size check! Type: Zenject.MemoryPool`2 is generic, or has no fields that are valid for size checks!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(Zenject::MemoryPool_2, "Zenject", "MemoryPool`2");
