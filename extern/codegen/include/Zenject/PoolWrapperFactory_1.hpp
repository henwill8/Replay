// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.IFactory`1
#include "Zenject/IFactory_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IDisposable
  class IDisposable;
}
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: IMemoryPool`1<TValue>
  template<typename TValue>
  class IMemoryPool_1;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // WARNING Size may be invalid!
  // Autogenerated type: Zenject.PoolWrapperFactory`1
  // [] Offset: FFFFFFFF
  template<typename T>
  class PoolWrapperFactory_1 : public ::Il2CppObject/*, public Zenject::IFactory_1<T>*/ {
    public:
    // private readonly Zenject.IMemoryPool`1<T> _pool
    // Size: 0x8
    // Offset: 0x0
    Zenject::IMemoryPool_1<T>* pool;
    // Field size check
    static_assert(sizeof(Zenject::IMemoryPool_1<T>*) == 0x8);
    // Creating value type constructor for type: PoolWrapperFactory_1
    PoolWrapperFactory_1(Zenject::IMemoryPool_1<T>* pool_ = {}) noexcept : pool{pool_} {}
    // Creating interface conversion operator: operator Zenject::IFactory_1<T>
    operator Zenject::IFactory_1<T>() noexcept {
      return *reinterpret_cast<Zenject::IFactory_1<T>*>(this);
    }
    // Creating conversion operator: operator Zenject::IMemoryPool_1<T>*
    constexpr operator Zenject::IMemoryPool_1<T>*() const noexcept {
      return pool;
    }
    // public System.Void .ctor(Zenject.IMemoryPool`1<T> pool)
    // Offset: 0xFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PoolWrapperFactory_1<T>* New_ctor(Zenject::IMemoryPool_1<T>* pool) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolWrapperFactory_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PoolWrapperFactory_1<T>*, creationType>(pool)));
    }
    // public T Create()
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.IFactory`1
    // Base method: TValue IFactory_1::Create()
    T Create() {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::PoolWrapperFactory_1::Create");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Create", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<T, false>(this, ___internal__method);
    }
    // Creating proxy method: Zenject_IFactory_1_Create
    // Maps to method: Create
    T Zenject_IFactory_1_Create() {
      return Create();
    }
  }; // Zenject.PoolWrapperFactory`1
  // Could not write size check! Type: Zenject.PoolWrapperFactory`1 is generic, or has no fields that are valid for size checks!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(Zenject::PoolWrapperFactory_1, "Zenject", "PoolWrapperFactory`1");
