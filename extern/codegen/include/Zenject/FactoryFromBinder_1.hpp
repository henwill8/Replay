// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.FactoryFromBinderBase
#include "Zenject/FactoryFromBinderBase.hpp"
// Including type: Zenject.InjectSources
#include "Zenject/InjectSources.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Zenject
namespace Zenject {
  // Skipping declaration: <>c__DisplayClass3_0`1 because it is already included!
  // Skipping declaration: <>c__DisplayClass4_0 because it is already included!
  // Skipping declaration: <>c__5`1 because it is already included!
  // Skipping declaration: <>c__DisplayClass8_0 because it is already included!
  // Skipping declaration: <>c because it is already included!
  // Forward declaring type: DiContainer
  class DiContainer;
  // Forward declaring type: BindInfo
  class BindInfo;
  // Forward declaring type: FactoryBindInfo
  class FactoryBindInfo;
  // Skipping declaration: ConditionCopyNonLazyBinder because it is already included!
  // Forward declaring type: IFactory`1<TValue>
  template<typename TValue>
  class IFactory_1;
  // Skipping declaration: ArgConditionCopyNonLazyBinder because it is already included!
  // Forward declaring type: FactorySubContainerBinder`1<TContract>
  template<typename TContract>
  class FactorySubContainerBinder_1;
  // Forward declaring type: IProvider
  class IProvider;
  // Forward declaring type: ConcreteBinderGeneric`1<TContract>
  template<typename TContract>
  class ConcreteBinderGeneric_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Autogenerated type: Zenject.FactoryFromBinder`1
  template<typename TContract>
  class FactoryFromBinder_1 : public Zenject::FactoryFromBinderBase {
    public:
    // Nested type: Zenject::FactoryFromBinder_1::$$c__DisplayClass3_0_1<TContract, TObj>
    template<typename TObj>
    class $$c__DisplayClass3_0_1;
    // Nested type: Zenject::FactoryFromBinder_1::$$c__DisplayClass4_0<TContract>
    class $$c__DisplayClass4_0;
    // Nested type: Zenject::FactoryFromBinder_1::$$c__5_1<TContract, TSubFactory>
    template<typename TSubFactory>
    class $$c__5_1;
    // Nested type: Zenject::FactoryFromBinder_1::$$c__DisplayClass8_0<TContract>
    class $$c__DisplayClass8_0;
    // Nested type: Zenject::FactoryFromBinder_1::$$c<TContract>
    class $$c;
    // Autogenerated type: Zenject.FactoryFromBinder`1/<>c__DisplayClass3_0`1
    template<typename TObj>
    class $$c__DisplayClass3_0_1 : public ::Il2CppObject, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = FactoryFromBinder_1<TContract>*;
      static constexpr std::string_view NESTED_NAME = "$$c__DisplayClass3_0_1";
      // public System.Object subIdentifier
      // Offset: 0x0
      ::Il2CppObject* subIdentifier;
      // public System.Func`2<TObj,TContract> method
      // Offset: 0x0
      System::Func_2<TObj, TContract>* method;
      // public Zenject.InjectSources source
      // Offset: 0x0
      Zenject::InjectSources source;
      // Zenject.IProvider <FromResolveGetter>b__0(Zenject.DiContainer container)
      // Offset: 0xFFFFFFFF
      Zenject::IProvider* $FromResolveGetter$b__0(Zenject::DiContainer* container) {
        return THROW_UNLESS((il2cpp_utils::RunMethod<Zenject::IProvider*>(this, "<FromResolveGetter>b__0", container)));
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      static typename FactoryFromBinder_1<TContract>::$$c__DisplayClass3_0_1<TObj>* New_ctor() {
        return THROW_UNLESS(il2cpp_utils::New<typename FactoryFromBinder_1<TContract>::$$c__DisplayClass3_0_1<TObj>*>());
      }
    }; // Zenject.FactoryFromBinder`1/<>c__DisplayClass3_0`1
    // Autogenerated type: Zenject.FactoryFromBinder`1/<>c__DisplayClass4_0
    class $$c__DisplayClass4_0 : public ::Il2CppObject, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = FactoryFromBinder_1<TContract>*;
      static constexpr std::string_view NESTED_NAME = "$$c__DisplayClass4_0";
      // public System.Func`2<Zenject.DiContainer,TContract> method
      // Offset: 0x0
      System::Func_2<Zenject::DiContainer*, TContract>* method;
      // Creating conversion operator: operator System::Func_2<Zenject::DiContainer*, TContract>*
      constexpr operator System::Func_2<Zenject::DiContainer*, TContract>*() const noexcept {
        return method;
      }
      // Zenject.IProvider <FromMethod>b__0(Zenject.DiContainer container)
      // Offset: 0xFFFFFFFF
      Zenject::IProvider* $FromMethod$b__0(Zenject::DiContainer* container) {
        return THROW_UNLESS((il2cpp_utils::RunMethod<Zenject::IProvider*>(this, "<FromMethod>b__0", container)));
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      static typename FactoryFromBinder_1<TContract>::$$c__DisplayClass4_0* New_ctor() {
        return THROW_UNLESS(il2cpp_utils::New<typename FactoryFromBinder_1<TContract>::$$c__DisplayClass4_0*>());
      }
    }; // Zenject.FactoryFromBinder`1/<>c__DisplayClass4_0
    // Autogenerated type: Zenject.FactoryFromBinder`1/<>c__5`1
    template<typename TSubFactory>
    class $$c__5_1 : public ::Il2CppObject, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = FactoryFromBinder_1<TContract>*;
      static constexpr std::string_view NESTED_NAME = "$$c__5_1";
      // Autogenerated static field getter
      // Get static field: static public readonly Zenject.FactoryFromBinder`1/<>c__5`1<TContract,TSubFactory> <>9
      static typename Zenject::FactoryFromBinder_1<TContract>::$$c__5_1<TSubFactory>* _get_$$9() {
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<typename Zenject::FactoryFromBinder_1<TContract>::$$c__5_1<TSubFactory>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename FactoryFromBinder_1<TContract>::$$c__5_1<TSubFactory>*>::get(), "<>9")));
      }
      // Autogenerated static field setter
      // Set static field: static public readonly Zenject.FactoryFromBinder`1/<>c__5`1<TContract,TSubFactory> <>9
      static void _set_$$9(typename Zenject::FactoryFromBinder_1<TContract>::$$c__5_1<TSubFactory>* value) {
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename FactoryFromBinder_1<TContract>::$$c__5_1<TSubFactory>*>::get(), "<>9", value)));
      }
      // Autogenerated static field getter
      // Get static field: static public System.Action`1<Zenject.ConcreteBinderGeneric`1<Zenject.IFactory`1<TContract>>> <>9__5_0
      static System::Action_1<Zenject::ConcreteBinderGeneric_1<Zenject::IFactory_1<TContract>*>*>* _get_$$9__5_0() {
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Action_1<Zenject::ConcreteBinderGeneric_1<Zenject::IFactory_1<TContract>*>*>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename FactoryFromBinder_1<TContract>::$$c__5_1<TSubFactory>*>::get(), "<>9__5_0")));
      }
      // Autogenerated static field setter
      // Set static field: static public System.Action`1<Zenject.ConcreteBinderGeneric`1<Zenject.IFactory`1<TContract>>> <>9__5_0
      static void _set_$$9__5_0(System::Action_1<Zenject::ConcreteBinderGeneric_1<Zenject::IFactory_1<TContract>*>*>* value) {
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename FactoryFromBinder_1<TContract>::$$c__5_1<TSubFactory>*>::get(), "<>9__5_0", value)));
      }
      // static private System.Void .cctor()
      // Offset: 0xFFFFFFFF
      static void _cctor() {
        THROW_UNLESS(il2cpp_utils::RunMethod(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename FactoryFromBinder_1<TContract>::$$c__5_1<TSubFactory>*>::get(), ".cctor"));
      }
      // System.Void <FromFactory>b__5_0(Zenject.ConcreteBinderGeneric`1<Zenject.IFactory`1<TContract>> x)
      // Offset: 0xFFFFFFFF
      void $FromFactory$b__5_0(Zenject::ConcreteBinderGeneric_1<Zenject::IFactory_1<TContract>*>* x) {
        THROW_UNLESS(il2cpp_utils::RunMethod(this, "<FromFactory>b__5_0", x));
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      static typename FactoryFromBinder_1<TContract>::$$c__5_1<TSubFactory>* New_ctor() {
        return THROW_UNLESS(il2cpp_utils::New<typename FactoryFromBinder_1<TContract>::$$c__5_1<TSubFactory>*>());
      }
    }; // Zenject.FactoryFromBinder`1/<>c__5`1
    // Autogenerated type: Zenject.FactoryFromBinder`1/<>c__DisplayClass8_0
    class $$c__DisplayClass8_0 : public ::Il2CppObject, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = FactoryFromBinder_1<TContract>*;
      static constexpr std::string_view NESTED_NAME = "$$c__DisplayClass8_0";
      // public Zenject.FactoryFromBinder`1<TContract> <>4__this
      // Offset: 0x0
      Zenject::FactoryFromBinder_1<TContract>* $$4__this;
      // public System.Boolean includeInactive
      // Offset: 0x0
      bool includeInactive;
      // public System.Func`2<UnityEngine.GameObject,TContract> <>9__1
      // Offset: 0x0
      System::Func_2<UnityEngine::GameObject*, TContract>* $$9__1;
      // TContract <FromComponentInHierarchy>b__0(Zenject.DiContainer _)
      // Offset: 0xFFFFFFFF
      TContract $FromComponentInHierarchy$b__0(Zenject::DiContainer* _) {
        return THROW_UNLESS((il2cpp_utils::RunMethod<TContract>(this, "<FromComponentInHierarchy>b__0", _)));
      }
      // TContract <FromComponentInHierarchy>b__1(UnityEngine.GameObject x)
      // Offset: 0xFFFFFFFF
      TContract $FromComponentInHierarchy$b__1(UnityEngine::GameObject* x) {
        return THROW_UNLESS((il2cpp_utils::RunMethod<TContract>(this, "<FromComponentInHierarchy>b__1", x)));
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      static typename FactoryFromBinder_1<TContract>::$$c__DisplayClass8_0* New_ctor() {
        return THROW_UNLESS(il2cpp_utils::New<typename FactoryFromBinder_1<TContract>::$$c__DisplayClass8_0*>());
      }
    }; // Zenject.FactoryFromBinder`1/<>c__DisplayClass8_0
    // Autogenerated type: Zenject.FactoryFromBinder`1/<>c
    class $$c : public ::Il2CppObject, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = FactoryFromBinder_1<TContract>*;
      static constexpr std::string_view NESTED_NAME = "$$c";
      // Autogenerated static field getter
      // Get static field: static public readonly Zenject.FactoryFromBinder`1/<>c<TContract> <>9
      static typename Zenject::FactoryFromBinder_1<TContract>::$$c* _get_$$9() {
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<typename Zenject::FactoryFromBinder_1<TContract>::$$c*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename FactoryFromBinder_1<TContract>::$$c*>::get(), "<>9")));
      }
      // Autogenerated static field setter
      // Set static field: static public readonly Zenject.FactoryFromBinder`1/<>c<TContract> <>9
      static void _set_$$9(typename Zenject::FactoryFromBinder_1<TContract>::$$c* value) {
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename FactoryFromBinder_1<TContract>::$$c*>::get(), "<>9", value)));
      }
      // Autogenerated static field getter
      // Get static field: static public System.Func`2<TContract,System.Boolean> <>9__8_2
      static System::Func_2<TContract, bool>* _get_$$9__8_2() {
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<TContract, bool>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename FactoryFromBinder_1<TContract>::$$c*>::get(), "<>9__8_2")));
      }
      // Autogenerated static field setter
      // Set static field: static public System.Func`2<TContract,System.Boolean> <>9__8_2
      static void _set_$$9__8_2(System::Func_2<TContract, bool>* value) {
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename FactoryFromBinder_1<TContract>::$$c*>::get(), "<>9__8_2", value)));
      }
      // static private System.Void .cctor()
      // Offset: 0xFFFFFFFF
      static void _cctor() {
        THROW_UNLESS(il2cpp_utils::RunMethod(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename FactoryFromBinder_1<TContract>::$$c*>::get(), ".cctor"));
      }
      // System.Boolean <FromComponentInHierarchy>b__8_2(TContract x)
      // Offset: 0xFFFFFFFF
      bool $FromComponentInHierarchy$b__8_2(TContract x) {
        return THROW_UNLESS((il2cpp_utils::RunMethod<bool>(this, "<FromComponentInHierarchy>b__8_2", x)));
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      static typename FactoryFromBinder_1<TContract>::$$c* New_ctor() {
        return THROW_UNLESS(il2cpp_utils::New<typename FactoryFromBinder_1<TContract>::$$c*>());
      }
    }; // Zenject.FactoryFromBinder`1/<>c
    // public System.Void .ctor(Zenject.DiContainer container, Zenject.BindInfo bindInfo, Zenject.FactoryBindInfo factoryBindInfo)
    // Offset: 0xFFFFFFFF
    static FactoryFromBinder_1<TContract>* New_ctor(Zenject::DiContainer* container, Zenject::BindInfo* bindInfo, Zenject::FactoryBindInfo* factoryBindInfo) {
      return THROW_UNLESS(il2cpp_utils::New<FactoryFromBinder_1<TContract>*>(container, bindInfo, factoryBindInfo));
    }
    // public Zenject.ConditionCopyNonLazyBinder FromResolveGetter(System.Func`2<TObj,TContract> method)
    // Offset: 0xFFFFFFFF
    template<class TObj>
    Zenject::ConditionCopyNonLazyBinder* FromResolveGetter(System::Func_2<TObj, TContract>* method) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::ConditionCopyNonLazyBinder*>(this, "FromResolveGetter", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObj>::get()}, method)));
    }
    // public Zenject.ConditionCopyNonLazyBinder FromResolveGetter(System.Object subIdentifier, System.Func`2<TObj,TContract> method)
    // Offset: 0xFFFFFFFF
    template<class TObj>
    Zenject::ConditionCopyNonLazyBinder* FromResolveGetter(::Il2CppObject* subIdentifier, System::Func_2<TObj, TContract>* method) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::ConditionCopyNonLazyBinder*>(this, "FromResolveGetter", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObj>::get()}, subIdentifier, method)));
    }
    // public Zenject.ConditionCopyNonLazyBinder FromResolveGetter(System.Object subIdentifier, System.Func`2<TObj,TContract> method, Zenject.InjectSources source)
    // Offset: 0xFFFFFFFF
    template<class TObj>
    Zenject::ConditionCopyNonLazyBinder* FromResolveGetter(::Il2CppObject* subIdentifier, System::Func_2<TObj, TContract>* method, Zenject::InjectSources source) {
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::ConditionCopyNonLazyBinder*>(this, "FromResolveGetter", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObj>::get()}, subIdentifier, method, source)));
    }
    // public Zenject.ConditionCopyNonLazyBinder FromMethod(System.Func`2<Zenject.DiContainer,TContract> method)
    // Offset: 0xFFFFFFFF
    Zenject::ConditionCopyNonLazyBinder* FromMethod(System::Func_2<Zenject::DiContainer*, TContract>* method) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<Zenject::ConditionCopyNonLazyBinder*>(this, "FromMethod", method));
    }
    // public Zenject.ArgConditionCopyNonLazyBinder FromFactory()
    // Offset: 0xFFFFFFFF
    template<class TSubFactory>
    Zenject::ArgConditionCopyNonLazyBinder* FromFactory() {
      static_assert(std::is_base_of_v<Zenject::IFactory_1<TContract>, std::remove_pointer_t<TSubFactory>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<Zenject::ArgConditionCopyNonLazyBinder*>(this, "FromFactory", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TSubFactory>::get()})));
    }
    // public Zenject.FactorySubContainerBinder`1<TContract> FromSubContainerResolve()
    // Offset: 0xFFFFFFFF
    Zenject::FactorySubContainerBinder_1<TContract>* FromSubContainerResolve() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<Zenject::FactorySubContainerBinder_1<TContract>*>(this, "FromSubContainerResolve"));
    }
    // public Zenject.FactorySubContainerBinder`1<TContract> FromSubContainerResolve(System.Object subIdentifier)
    // Offset: 0xFFFFFFFF
    Zenject::FactorySubContainerBinder_1<TContract>* FromSubContainerResolve(::Il2CppObject* subIdentifier) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<Zenject::FactorySubContainerBinder_1<TContract>*>(this, "FromSubContainerResolve", subIdentifier));
    }
    // public Zenject.ConditionCopyNonLazyBinder FromComponentInHierarchy(System.Boolean includeInactive)
    // Offset: 0xFFFFFFFF
    Zenject::ConditionCopyNonLazyBinder* FromComponentInHierarchy(bool includeInactive) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<Zenject::ConditionCopyNonLazyBinder*>(this, "FromComponentInHierarchy", includeInactive));
    }
  }; // Zenject.FactoryFromBinder`1
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(Zenject::FactoryFromBinder_1, "Zenject", "FactoryFromBinder`1");
#pragma pack(pop)
