// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.NonLazyBinder
#include "Zenject/NonLazyBinder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: BindInfo
  class BindInfo;
  // Forward declaring type: BindingInheritanceMethods
  struct BindingInheritanceMethods;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Zenject.CopyNonLazyBinder
  // [] Offset: FFFFFFFF
  // [NoReflectionBakingAttribute] Offset: D03D74
  class CopyNonLazyBinder : public Zenject::NonLazyBinder {
    public:
    // private System.Collections.Generic.List`1<Zenject.BindInfo> _secondaryBindInfos
    // Size: 0x8
    // Offset: 0x18
    System::Collections::Generic::List_1<Zenject::BindInfo*>* secondaryBindInfos;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<Zenject::BindInfo*>*) == 0x8);
    // Creating value type constructor for type: CopyNonLazyBinder
    CopyNonLazyBinder(System::Collections::Generic::List_1<Zenject::BindInfo*>* secondaryBindInfos_ = {}) noexcept : secondaryBindInfos{secondaryBindInfos_} {}
    // Deleting conversion operator: operator Zenject::BindInfo*
    constexpr operator Zenject::BindInfo*() const noexcept = delete;
    // System.Void AddSecondaryCopyBindInfo(Zenject.BindInfo bindInfo)
    // Offset: 0x1268850
    void AddSecondaryCopyBindInfo(Zenject::BindInfo* bindInfo);
    // public Zenject.NonLazyBinder CopyIntoAllSubContainers()
    // Offset: 0x12688F4
    Zenject::NonLazyBinder* CopyIntoAllSubContainers();
    // public Zenject.NonLazyBinder CopyIntoDirectSubContainers()
    // Offset: 0x1268A24
    Zenject::NonLazyBinder* CopyIntoDirectSubContainers();
    // public Zenject.NonLazyBinder MoveIntoAllSubContainers()
    // Offset: 0x1268A4C
    Zenject::NonLazyBinder* MoveIntoAllSubContainers();
    // public Zenject.NonLazyBinder MoveIntoDirectSubContainers()
    // Offset: 0x1268A74
    Zenject::NonLazyBinder* MoveIntoDirectSubContainers();
    // private System.Void SetInheritanceMethod(Zenject.BindingInheritanceMethods method)
    // Offset: 0x126891C
    void SetInheritanceMethod(Zenject::BindingInheritanceMethods method);
    // public System.Void .ctor(Zenject.BindInfo bindInfo)
    // Offset: 0x1264A0C
    // Implemented from: Zenject.NonLazyBinder
    // Base method: System.Void NonLazyBinder::.ctor(Zenject.BindInfo bindInfo)
    // Base method: System.Void IfNotBoundBinder::.ctor(Zenject.BindInfo bindInfo)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CopyNonLazyBinder* New_ctor(Zenject::BindInfo* bindInfo) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::CopyNonLazyBinder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CopyNonLazyBinder*, creationType>(bindInfo)));
    }
  }; // Zenject.CopyNonLazyBinder
  #pragma pack(pop)
  static check_size<sizeof(CopyNonLazyBinder), 24 + sizeof(System::Collections::Generic::List_1<Zenject::BindInfo*>*)> __Zenject_CopyNonLazyBinderSizeCheck;
  static_assert(sizeof(CopyNonLazyBinder) == 0x20);
}
DEFINE_IL2CPP_ARG_TYPE(Zenject::CopyNonLazyBinder*, "Zenject", "CopyNonLazyBinder");
