// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Object
  class Object;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: InvalidBindResponses
  struct InvalidBindResponses;
  // Forward declaring type: IProvider
  class IProvider;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Zenject.BindingUtil
  // [] Offset: FFFFFFFF
  class BindingUtil : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: BindingUtil
    BindingUtil() noexcept {}
    // static public System.Void AssertIsValidPrefab(UnityEngine.Object prefab)
    // Offset: 0x1261590
    static void AssertIsValidPrefab(UnityEngine::Object* prefab);
    // static public System.Void AssertIsValidGameObject(UnityEngine.GameObject gameObject)
    // Offset: 0x12615F0
    static void AssertIsValidGameObject(UnityEngine::GameObject* gameObject);
    // static public System.Void AssertIsNotComponent(System.Collections.Generic.IEnumerable`1<System.Type> types)
    // Offset: 0x1261650
    static void AssertIsNotComponent(System::Collections::Generic::IEnumerable_1<System::Type*>* types);
    // static public System.Void AssertIsNotComponent()
    // Offset: 0xFFFFFFFF
    template<class T>
    static void AssertIsNotComponent() {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertIsNotComponent");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertIsNotComponent", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes()));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method);
    }
    // static public System.Void AssertIsNotComponent(System.Type type)
    // Offset: 0x12618A8
    static void AssertIsNotComponent(System::Type* type);
    // static public System.Void AssertDerivesFromUnityObject(System.Collections.Generic.IEnumerable`1<System.Type> types)
    // Offset: 0x126196C
    static void AssertDerivesFromUnityObject(System::Collections::Generic::IEnumerable_1<System::Type*>* types);
    // static public System.Void AssertDerivesFromUnityObject()
    // Offset: 0xFFFFFFFF
    template<class T>
    static void AssertDerivesFromUnityObject() {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertDerivesFromUnityObject");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertDerivesFromUnityObject", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes()));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method);
    }
    // static public System.Void AssertDerivesFromUnityObject(System.Type type)
    // Offset: 0x1261BC4
    static void AssertDerivesFromUnityObject(System::Type* type);
    // static public System.Void AssertTypesAreNotComponents(System.Collections.Generic.IEnumerable`1<System.Type> types)
    // Offset: 0x1261C4C
    static void AssertTypesAreNotComponents(System::Collections::Generic::IEnumerable_1<System::Type*>* types);
    // static public System.Void AssertIsValidResourcePath(System.String resourcePath)
    // Offset: 0x1261EA4
    static void AssertIsValidResourcePath(::Il2CppString* resourcePath);
    // static public System.Void AssertIsInterfaceOrScriptableObject(System.Collections.Generic.IEnumerable`1<System.Type> types)
    // Offset: 0x1261F04
    static void AssertIsInterfaceOrScriptableObject(System::Collections::Generic::IEnumerable_1<System::Type*>* types);
    // static public System.Void AssertIsInterfaceOrScriptableObject()
    // Offset: 0xFFFFFFFF
    template<class T>
    static void AssertIsInterfaceOrScriptableObject() {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertIsInterfaceOrScriptableObject");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertIsInterfaceOrScriptableObject", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes()));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method);
    }
    // static public System.Void AssertIsInterfaceOrScriptableObject(System.Type type)
    // Offset: 0x126215C
    static void AssertIsInterfaceOrScriptableObject(System::Type* type);
    // static public System.Void AssertIsInterfaceOrComponent(System.Collections.Generic.IEnumerable`1<System.Type> types)
    // Offset: 0x126225C
    static void AssertIsInterfaceOrComponent(System::Collections::Generic::IEnumerable_1<System::Type*>* types);
    // static public System.Void AssertIsInterfaceOrComponent()
    // Offset: 0xFFFFFFFF
    template<class T>
    static void AssertIsInterfaceOrComponent() {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertIsInterfaceOrComponent");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertIsInterfaceOrComponent", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes()));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method);
    }
    // static public System.Void AssertIsInterfaceOrComponent(System.Type type)
    // Offset: 0x12624B4
    static void AssertIsInterfaceOrComponent(System::Type* type);
    // static public System.Void AssertIsComponent(System.Collections.Generic.IEnumerable`1<System.Type> types)
    // Offset: 0x12625B4
    static void AssertIsComponent(System::Collections::Generic::IEnumerable_1<System::Type*>* types);
    // static public System.Void AssertIsComponent()
    // Offset: 0xFFFFFFFF
    template<class T>
    static void AssertIsComponent() {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertIsComponent");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertIsComponent", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes()));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method);
    }
    // static public System.Void AssertIsComponent(System.Type type)
    // Offset: 0x126280C
    static void AssertIsComponent(System::Type* type);
    // static public System.Void AssertTypesAreNotAbstract(System.Collections.Generic.IEnumerable`1<System.Type> types)
    // Offset: 0x12628CC
    static void AssertTypesAreNotAbstract(System::Collections::Generic::IEnumerable_1<System::Type*>* types);
    // static public System.Void AssertIsNotAbstract(System.Collections.Generic.IEnumerable`1<System.Type> types)
    // Offset: 0x1262BB0
    static void AssertIsNotAbstract(System::Collections::Generic::IEnumerable_1<System::Type*>* types);
    // static public System.Void AssertIsNotAbstract()
    // Offset: 0xFFFFFFFF
    template<class T>
    static void AssertIsNotAbstract() {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::BindingUtil::AssertIsNotAbstract");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("Zenject", "BindingUtil", "AssertIsNotAbstract", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes()));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method);
    }
    // static public System.Void AssertIsNotAbstract(System.Type type)
    // Offset: 0x1262B24
    static void AssertIsNotAbstract(System::Type* type);
    // static public System.Void AssertIsDerivedFromType(System.Type concreteType, System.Type parentType)
    // Offset: 0x1262E08
    static void AssertIsDerivedFromType(System::Type* concreteType, System::Type* parentType);
    // static public System.Void AssertConcreteTypeListIsNotEmpty(System.Collections.Generic.IEnumerable`1<System.Type> concreteTypes)
    // Offset: 0x1262F30
    static void AssertConcreteTypeListIsNotEmpty(System::Collections::Generic::IEnumerable_1<System::Type*>* concreteTypes);
    // static public System.Void AssertIsDerivedFromTypes(System.Collections.Generic.IEnumerable`1<System.Type> concreteTypes, System.Collections.Generic.IEnumerable`1<System.Type> parentTypes, Zenject.InvalidBindResponses invalidBindResponse)
    // Offset: 0x1262F98
    static void AssertIsDerivedFromTypes(System::Collections::Generic::IEnumerable_1<System::Type*>* concreteTypes, System::Collections::Generic::IEnumerable_1<System::Type*>* parentTypes, Zenject::InvalidBindResponses invalidBindResponse);
    // static public System.Void AssertIsDerivedFromTypes(System.Collections.Generic.IEnumerable`1<System.Type> concreteTypes, System.Collections.Generic.IEnumerable`1<System.Type> parentTypes)
    // Offset: 0x126304C
    static void AssertIsDerivedFromTypes(System::Collections::Generic::IEnumerable_1<System::Type*>* concreteTypes, System::Collections::Generic::IEnumerable_1<System::Type*>* parentTypes);
    // static public System.Void AssertIsDerivedFromTypes(System.Type concreteType, System.Collections.Generic.IEnumerable`1<System.Type> parentTypes)
    // Offset: 0x12632B0
    static void AssertIsDerivedFromTypes(System::Type* concreteType, System::Collections::Generic::IEnumerable_1<System::Type*>* parentTypes);
    // static public System.Void AssertInstanceDerivesFromOrEqual(System.Object instance, System.Collections.Generic.IEnumerable`1<System.Type> parentTypes)
    // Offset: 0x1263518
    static void AssertInstanceDerivesFromOrEqual(::Il2CppObject* instance, System::Collections::Generic::IEnumerable_1<System::Type*>* parentTypes);
    // static public System.Void AssertInstanceDerivesFromOrEqual(System.Object instance, System.Type baseType)
    // Offset: 0x1263790
    static void AssertInstanceDerivesFromOrEqual(::Il2CppObject* instance, System::Type* baseType);
    // static public Zenject.IProvider CreateCachedProvider(Zenject.IProvider creator)
    // Offset: 0x1263870
    static Zenject::IProvider* CreateCachedProvider(Zenject::IProvider* creator);
  }; // Zenject.BindingUtil
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(Zenject::BindingUtil*, "Zenject", "BindingUtil");
