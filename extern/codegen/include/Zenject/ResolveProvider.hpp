// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.IProvider
#include "Zenject/IProvider.hpp"
// Including type: Zenject.InjectSources
#include "Zenject/InjectSources.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: DiContainer
  class DiContainer;
  // Forward declaring type: InjectContext
  class InjectContext;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // Size: 0x31
  #pragma pack(push, 1)
  // Autogenerated type: Zenject.ResolveProvider
  // [] Offset: FFFFFFFF
  // [NoReflectionBakingAttribute] Offset: D048F4
  class ResolveProvider : public ::Il2CppObject/*, public Zenject::IProvider*/ {
    public:
    // private readonly System.Object _identifier
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppObject* identifier;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // private readonly Zenject.DiContainer _container
    // Size: 0x8
    // Offset: 0x18
    Zenject::DiContainer* container;
    // Field size check
    static_assert(sizeof(Zenject::DiContainer*) == 0x8);
    // private readonly System.Type _contractType
    // Size: 0x8
    // Offset: 0x20
    System::Type* contractType;
    // Field size check
    static_assert(sizeof(System::Type*) == 0x8);
    // private readonly System.Boolean _isOptional
    // Size: 0x1
    // Offset: 0x28
    bool isOptional;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isOptional and: source
    char __padding3[0x3] = {};
    // private readonly Zenject.InjectSources _source
    // Size: 0x4
    // Offset: 0x2C
    Zenject::InjectSources source;
    // Field size check
    static_assert(sizeof(Zenject::InjectSources) == 0x4);
    // private readonly System.Boolean _matchAll
    // Size: 0x1
    // Offset: 0x30
    bool matchAll;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: ResolveProvider
    ResolveProvider(::Il2CppObject* identifier_ = {}, Zenject::DiContainer* container_ = {}, System::Type* contractType_ = {}, bool isOptional_ = {}, Zenject::InjectSources source_ = {}, bool matchAll_ = {}) noexcept : identifier{identifier_}, container{container_}, contractType{contractType_}, isOptional{isOptional_}, source{source_}, matchAll{matchAll_} {}
    // Creating interface conversion operator: operator Zenject::IProvider
    operator Zenject::IProvider() noexcept {
      return *reinterpret_cast<Zenject::IProvider*>(this);
    }
    // public System.Void .ctor(System.Type contractType, Zenject.DiContainer container, System.Object identifier, System.Boolean isOptional, Zenject.InjectSources source, System.Boolean matchAll)
    // Offset: 0x15BB2F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ResolveProvider* New_ctor(System::Type* contractType, Zenject::DiContainer* container, ::Il2CppObject* identifier, bool isOptional, Zenject::InjectSources source, bool matchAll) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::ResolveProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ResolveProvider*, creationType>(contractType, container, identifier, isOptional, source, matchAll)));
    }
    // private Zenject.InjectContext GetSubContext(Zenject.InjectContext parent)
    // Offset: 0x15BB4EC
    Zenject::InjectContext* GetSubContext(Zenject::InjectContext* parent);
    // public System.Boolean get_IsCached()
    // Offset: 0x15BB388
    // Implemented from: Zenject.IProvider
    // Base method: System.Boolean IProvider::get_IsCached()
    bool get_IsCached();
    // public System.Boolean get_TypeVariesBasedOnMemberType()
    // Offset: 0x15BB390
    // Implemented from: Zenject.IProvider
    // Base method: System.Boolean IProvider::get_TypeVariesBasedOnMemberType()
    bool get_TypeVariesBasedOnMemberType();
    // public System.Type GetInstanceType(Zenject.InjectContext context)
    // Offset: 0x15BB398
    // Implemented from: Zenject.IProvider
    // Base method: System.Type IProvider::GetInstanceType(Zenject.InjectContext context)
    System::Type* GetInstanceType(Zenject::InjectContext* context);
    // public System.Void GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List`1<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List`1<System.Object> buffer)
    // Offset: 0x15BB3A0
    // Implemented from: Zenject.IProvider
    // Base method: System.Void IProvider::GetAllInstancesWithInjectSplit(Zenject.InjectContext context, System.Collections.Generic.List`1<Zenject.TypeValuePair> args, out System.Action injectAction, System.Collections.Generic.List`1<System.Object> buffer)
    void GetAllInstancesWithInjectSplit(Zenject::InjectContext* context, System::Collections::Generic::List_1<Zenject::TypeValuePair>* args, System::Action*& injectAction, System::Collections::Generic::List_1<::Il2CppObject*>* buffer);
  }; // Zenject.ResolveProvider
  #pragma pack(pop)
  static check_size<sizeof(ResolveProvider), 48 + sizeof(bool)> __Zenject_ResolveProviderSizeCheck;
  static_assert(sizeof(ResolveProvider) == 0x31);
}
DEFINE_IL2CPP_ARG_TYPE(Zenject::ResolveProvider*, "Zenject", "ResolveProvider");
