// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.FromBinder
#include "Zenject/FromBinder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Zenject
namespace Zenject {
  // Skipping declaration: <>c__1`1 because it is already included!
  // Skipping declaration: <>c__DisplayClass3_0 because it is already included!
  // Skipping declaration: <>c__DisplayClass14_0 because it is already included!
  // Skipping declaration: <>c__DisplayClass15_0 because it is already included!
  // Forward declaring type: IFactory`1<TValue>
  template<typename TValue>
  class IFactory_1;
  // Skipping declaration: ScopeConcreteIdArgConditionCopyNonLazyBinder because it is already included!
  // Forward declaring type: ConcreteBinderGeneric`1<TContract>
  template<typename TContract>
  class ConcreteBinderGeneric_1;
  // Forward declaring type: InjectContext
  class InjectContext;
  // Forward declaring type: DiContainer
  class DiContainer;
  // Forward declaring type: BindInfo
  class BindInfo;
  // Forward declaring type: BindStatement
  class BindStatement;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Component
  class Component;
}
// Completed forward declares
// Type namespace: Zenject
namespace Zenject {
  // WARNING Size may be invalid!
  // Autogenerated type: Zenject.FromBinderGeneric`1
  // [] Offset: FFFFFFFF
  // [NoReflectionBakingAttribute] Offset: D04134
  template<typename TContract>
  class FromBinderGeneric_1 : public Zenject::FromBinder {
    public:
    // Nested type: Zenject::FromBinderGeneric_1::$$c__1_1<TContract, TFactory>
    template<typename TFactory>
    class $$c__1_1;
    // Nested type: Zenject::FromBinderGeneric_1::$$c__DisplayClass3_0<TContract>
    class $$c__DisplayClass3_0;
    // Nested type: Zenject::FromBinderGeneric_1::$$c__DisplayClass14_0<TContract>
    class $$c__DisplayClass14_0;
    // Nested type: Zenject::FromBinderGeneric_1::$$c__DisplayClass15_0<TContract>
    class $$c__DisplayClass15_0;
    // WARNING Size may be invalid!
    // Autogenerated type: Zenject.FromBinderGeneric`1/<>c__1`1
    // [] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: D057FC
    template<typename TFactory>
    class $$c__1_1 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = FromBinderGeneric_1<TContract>*;
      static constexpr std::string_view NESTED_NAME = "$$c__1_1";
      // Creating value type constructor for type: $$c__1_1
      $$c__1_1() noexcept {}
      // Autogenerated static field getter
      // Get static field: static public readonly Zenject.FromBinderGeneric`1/<>c__1`1<TContract,TFactory> <>9
      static typename Zenject::FromBinderGeneric_1<TContract>::$$c__1_1<TFactory>* _get_$$9() {
        static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::$$c__1_1::_get_$$9");
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<typename Zenject::FromBinderGeneric_1<TContract>::$$c__1_1<TFactory>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename FromBinderGeneric_1<TContract>::$$c__1_1<TFactory>*>::get(), "<>9")));
      }
      // Autogenerated static field setter
      // Set static field: static public readonly Zenject.FromBinderGeneric`1/<>c__1`1<TContract,TFactory> <>9
      static void _set_$$9(typename Zenject::FromBinderGeneric_1<TContract>::$$c__1_1<TFactory>* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::$$c__1_1::_set_$$9");
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename FromBinderGeneric_1<TContract>::$$c__1_1<TFactory>*>::get(), "<>9", value)));
      }
      // Autogenerated static field getter
      // Get static field: static public System.Action`1<Zenject.ConcreteBinderGeneric`1<Zenject.IFactory`1<TContract>>> <>9__1_0
      static System::Action_1<Zenject::ConcreteBinderGeneric_1<Zenject::IFactory_1<TContract>*>*>* _get_$$9__1_0() {
        static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::$$c__1_1::_get_$$9__1_0");
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Action_1<Zenject::ConcreteBinderGeneric_1<Zenject::IFactory_1<TContract>*>*>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename FromBinderGeneric_1<TContract>::$$c__1_1<TFactory>*>::get(), "<>9__1_0")));
      }
      // Autogenerated static field setter
      // Set static field: static public System.Action`1<Zenject.ConcreteBinderGeneric`1<Zenject.IFactory`1<TContract>>> <>9__1_0
      static void _set_$$9__1_0(System::Action_1<Zenject::ConcreteBinderGeneric_1<Zenject::IFactory_1<TContract>*>*>* value) {
        static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::$$c__1_1::_set_$$9__1_0");
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename FromBinderGeneric_1<TContract>::$$c__1_1<TFactory>*>::get(), "<>9__1_0", value)));
      }
      // static private System.Void .cctor()
      // Offset: 0xFFFFFFFF
      static void _cctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::$$c__1_1::.cctor");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename FromBinderGeneric_1<TContract>::$$c__1_1<TFactory>*>::get(), ".cctor", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
        ::il2cpp_utils::RunMethodThrow<void, false>(static_cast<Il2CppClass*>(nullptr), ___internal__method);
      }
      // System.Void <FromFactory>b__1_0(Zenject.ConcreteBinderGeneric`1<Zenject.IFactory`1<TContract>> x)
      // Offset: 0xFFFFFFFF
      void $FromFactory$b__1_0(Zenject::ConcreteBinderGeneric_1<Zenject::IFactory_1<TContract>*>* x) {
        static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::$$c__1_1::<FromFactory>b__1_0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FromFactory>b__1_0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(x))));
        ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, x);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename FromBinderGeneric_1<TContract>::$$c__1_1<TFactory>* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::$$c__1_1::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename FromBinderGeneric_1<TContract>::$$c__1_1<TFactory>*, creationType>()));
      }
    }; // Zenject.FromBinderGeneric`1/<>c__1`1
    // Could not write size check! Type: Zenject.FromBinderGeneric`1/<>c__1`1 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: Zenject.FromBinderGeneric`1/<>c__DisplayClass3_0
    // [] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: D0580C
    class $$c__DisplayClass3_0 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = FromBinderGeneric_1<TContract>*;
      static constexpr std::string_view NESTED_NAME = "$$c__DisplayClass3_0";
      // public System.Func`1<TContract> method
      // Size: 0x8
      // Offset: 0x0
      System::Func_1<TContract>* method;
      // Field size check
      static_assert(sizeof(System::Func_1<TContract>*) == 0x8);
      // Creating value type constructor for type: $$c__DisplayClass3_0
      $$c__DisplayClass3_0(System::Func_1<TContract>* method_ = {}) noexcept : method{method_} {}
      // Creating conversion operator: operator System::Func_1<TContract>*
      constexpr operator System::Func_1<TContract>*() const noexcept {
        return method;
      }
      // TContract <FromMethod>b__0(Zenject.InjectContext ctx)
      // Offset: 0xFFFFFFFF
      TContract $FromMethod$b__0(Zenject::InjectContext* ctx) {
        static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::$$c__DisplayClass3_0::<FromMethod>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FromMethod>b__0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(ctx))));
        return ::il2cpp_utils::RunMethodThrow<TContract, false>(this, ___internal__method, ctx);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename FromBinderGeneric_1<TContract>::$$c__DisplayClass3_0* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::$$c__DisplayClass3_0::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename FromBinderGeneric_1<TContract>::$$c__DisplayClass3_0*, creationType>()));
      }
    }; // Zenject.FromBinderGeneric`1/<>c__DisplayClass3_0
    // Could not write size check! Type: Zenject.FromBinderGeneric`1/<>c__DisplayClass3_0 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: Zenject.FromBinderGeneric`1/<>c__DisplayClass14_0
    // [] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: D0581C
    class $$c__DisplayClass14_0 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = FromBinderGeneric_1<TContract>*;
      static constexpr std::string_view NESTED_NAME = "$$c__DisplayClass14_0";
      // public System.Func`2<TContract,System.Boolean> predicate
      // Size: 0x8
      // Offset: 0x0
      System::Func_2<TContract, bool>* predicate;
      // Field size check
      static_assert(sizeof(System::Func_2<TContract, bool>*) == 0x8);
      // Creating value type constructor for type: $$c__DisplayClass14_0
      $$c__DisplayClass14_0(System::Func_2<TContract, bool>* predicate_ = {}) noexcept : predicate{predicate_} {}
      // Creating conversion operator: operator System::Func_2<TContract, bool>*
      constexpr operator System::Func_2<TContract, bool>*() const noexcept {
        return predicate;
      }
      // System.Boolean <FromComponentsInChildren>b__0(UnityEngine.Component component)
      // Offset: 0xFFFFFFFF
      bool $FromComponentsInChildren$b__0(UnityEngine::Component* component) {
        static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::$$c__DisplayClass14_0::<FromComponentsInChildren>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FromComponentsInChildren>b__0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(component))));
        return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, component);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename FromBinderGeneric_1<TContract>::$$c__DisplayClass14_0* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::$$c__DisplayClass14_0::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename FromBinderGeneric_1<TContract>::$$c__DisplayClass14_0*, creationType>()));
      }
    }; // Zenject.FromBinderGeneric`1/<>c__DisplayClass14_0
    // Could not write size check! Type: Zenject.FromBinderGeneric`1/<>c__DisplayClass14_0 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: Zenject.FromBinderGeneric`1/<>c__DisplayClass15_0
    // [] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: D0582C
    class $$c__DisplayClass15_0 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject {
      public:
      using declaring_type = FromBinderGeneric_1<TContract>*;
      static constexpr std::string_view NESTED_NAME = "$$c__DisplayClass15_0";
      // public System.Func`2<TContract,System.Boolean> predicate
      // Size: 0x8
      // Offset: 0x0
      System::Func_2<TContract, bool>* predicate;
      // Field size check
      static_assert(sizeof(System::Func_2<TContract, bool>*) == 0x8);
      // Creating value type constructor for type: $$c__DisplayClass15_0
      $$c__DisplayClass15_0(System::Func_2<TContract, bool>* predicate_ = {}) noexcept : predicate{predicate_} {}
      // Creating conversion operator: operator System::Func_2<TContract, bool>*
      constexpr operator System::Func_2<TContract, bool>*() const noexcept {
        return predicate;
      }
      // System.Boolean <FromComponentsInHierarchy>b__0(UnityEngine.Component component)
      // Offset: 0xFFFFFFFF
      bool $FromComponentsInHierarchy$b__0(UnityEngine::Component* component) {
        static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::$$c__DisplayClass15_0::<FromComponentsInHierarchy>b__0");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "<FromComponentsInHierarchy>b__0", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(component))));
        return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, component);
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename FromBinderGeneric_1<TContract>::$$c__DisplayClass15_0* New_ctor() {
        static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::$$c__DisplayClass15_0::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename FromBinderGeneric_1<TContract>::$$c__DisplayClass15_0*, creationType>()));
      }
    }; // Zenject.FromBinderGeneric`1/<>c__DisplayClass15_0
    // Could not write size check! Type: Zenject.FromBinderGeneric`1/<>c__DisplayClass15_0 is generic, or has no fields that are valid for size checks!
    // Creating value type constructor for type: FromBinderGeneric_1
    FromBinderGeneric_1() noexcept {}
    // public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromFactory()
    // Offset: 0xFFFFFFFF
    template<class TFactory>
    Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder* FromFactory() {
      static_assert(std::is_base_of_v<Zenject::IFactory_1<TContract>, std::remove_pointer_t<TFactory>>);
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::FromFactory");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FromFactory", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactory>::get()}, ::il2cpp_utils::ExtractTypes()));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TFactory>::get()}));
      return ::il2cpp_utils::RunMethodThrow<Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder*, false>(this, ___generic__method);
    }
    // public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromIFactory(System.Action`1<Zenject.ConcreteBinderGeneric`1<Zenject.IFactory`1<TContract>>> factoryBindGenerator)
    // Offset: 0xFFFFFFFF
    Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder* FromIFactory(System::Action_1<Zenject::ConcreteBinderGeneric_1<Zenject::IFactory_1<TContract>*>*>* factoryBindGenerator) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::FromIFactory");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FromIFactory", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(factoryBindGenerator)));
      return ::il2cpp_utils::RunMethodThrow<Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder*, false>(this, ___internal__method, factoryBindGenerator);
    }
    // public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethod(System.Func`1<TContract> method)
    // Offset: 0xFFFFFFFF
    Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder* FromMethod(System::Func_1<TContract>* method) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::FromMethod");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FromMethod", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(method)));
      return ::il2cpp_utils::RunMethodThrow<Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder*, false>(this, ___internal__method, method);
    }
    // public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethod(System.Func`2<Zenject.InjectContext,TContract> method)
    // Offset: 0xFFFFFFFF
    Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder* FromMethod(System::Func_2<Zenject::InjectContext*, TContract>* method) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::FromMethod");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FromMethod", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(method)));
      return ::il2cpp_utils::RunMethodThrow<Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder*, false>(this, ___internal__method, method);
    }
    // public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromMethodMultiple(System.Func`2<Zenject.InjectContext,System.Collections.Generic.IEnumerable`1<TContract>> method)
    // Offset: 0xFFFFFFFF
    Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder* FromMethodMultiple(System::Func_2<Zenject::InjectContext*, System::Collections::Generic::IEnumerable_1<TContract>*>* method) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::FromMethodMultiple");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FromMethodMultiple", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(method)));
      return ::il2cpp_utils::RunMethodThrow<Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder*, false>(this, ___internal__method, method);
    }
    // public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveGetter(System.Func`2<TObj,TContract> method)
    // Offset: 0xFFFFFFFF
    template<class TObj>
    Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder* FromResolveGetter(System::Func_2<TObj, TContract>* method) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::FromResolveGetter");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FromResolveGetter", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObj>::get()}, ::il2cpp_utils::ExtractTypes(method)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObj>::get()}));
      return ::il2cpp_utils::RunMethodThrow<Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder*, false>(this, ___generic__method, method);
    }
    // public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveGetter(System.Object identifier, System.Func`2<TObj,TContract> method)
    // Offset: 0xFFFFFFFF
    template<class TObj>
    Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder* FromResolveGetter(::Il2CppObject* identifier, System::Func_2<TObj, TContract>* method) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::FromResolveGetter");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FromResolveGetter", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObj>::get()}, ::il2cpp_utils::ExtractTypes(identifier, method)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObj>::get()}));
      return ::il2cpp_utils::RunMethodThrow<Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder*, false>(this, ___generic__method, identifier, method);
    }
    // public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveGetter(System.Object identifier, System.Func`2<TObj,TContract> method, Zenject.InjectSources source)
    // Offset: 0xFFFFFFFF
    template<class TObj>
    Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder* FromResolveGetter(::Il2CppObject* identifier, System::Func_2<TObj, TContract>* method, Zenject::InjectSources source) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::FromResolveGetter");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FromResolveGetter", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObj>::get()}, ::il2cpp_utils::ExtractTypes(identifier, method, source)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObj>::get()}));
      return ::il2cpp_utils::RunMethodThrow<Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder*, false>(this, ___generic__method, identifier, method, source);
    }
    // public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAllGetter(System.Func`2<TObj,TContract> method)
    // Offset: 0xFFFFFFFF
    template<class TObj>
    Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder* FromResolveAllGetter(System::Func_2<TObj, TContract>* method) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::FromResolveAllGetter");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FromResolveAllGetter", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObj>::get()}, ::il2cpp_utils::ExtractTypes(method)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObj>::get()}));
      return ::il2cpp_utils::RunMethodThrow<Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder*, false>(this, ___generic__method, method);
    }
    // public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAllGetter(System.Object identifier, System.Func`2<TObj,TContract> method)
    // Offset: 0xFFFFFFFF
    template<class TObj>
    Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder* FromResolveAllGetter(::Il2CppObject* identifier, System::Func_2<TObj, TContract>* method) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::FromResolveAllGetter");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FromResolveAllGetter", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObj>::get()}, ::il2cpp_utils::ExtractTypes(identifier, method)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObj>::get()}));
      return ::il2cpp_utils::RunMethodThrow<Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder*, false>(this, ___generic__method, identifier, method);
    }
    // public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromResolveAllGetter(System.Object identifier, System.Func`2<TObj,TContract> method, Zenject.InjectSources source)
    // Offset: 0xFFFFFFFF
    template<class TObj>
    Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder* FromResolveAllGetter(::Il2CppObject* identifier, System::Func_2<TObj, TContract>* method, Zenject::InjectSources source) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::FromResolveAllGetter");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FromResolveAllGetter", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObj>::get()}, ::il2cpp_utils::ExtractTypes(identifier, method, source)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<TObj>::get()}));
      return ::il2cpp_utils::RunMethodThrow<Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder*, false>(this, ___generic__method, identifier, method, source);
    }
    // public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromInstance(TContract instance)
    // Offset: 0xFFFFFFFF
    Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder* FromInstance(TContract instance) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::FromInstance");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FromInstance", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(instance)));
      return ::il2cpp_utils::RunMethodThrow<Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder*, false>(this, ___internal__method, instance);
    }
    // public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInChildren(System.Func`2<TContract,System.Boolean> predicate, System.Boolean includeInactive)
    // Offset: 0xFFFFFFFF
    Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder* FromComponentsInChildren(System::Func_2<TContract, bool>* predicate, bool includeInactive) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::FromComponentsInChildren");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FromComponentsInChildren", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(predicate, includeInactive)));
      return ::il2cpp_utils::RunMethodThrow<Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder*, false>(this, ___internal__method, predicate, includeInactive);
    }
    // public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInChildren(System.Boolean excludeSelf, System.Func`2<TContract,System.Boolean> predicate, System.Boolean includeInactive)
    // Offset: 0xFFFFFFFF
    Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder* FromComponentsInChildren(bool excludeSelf, System::Func_2<TContract, bool>* predicate, bool includeInactive) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::FromComponentsInChildren");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FromComponentsInChildren", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(excludeSelf, predicate, includeInactive)));
      return ::il2cpp_utils::RunMethodThrow<Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder*, false>(this, ___internal__method, excludeSelf, predicate, includeInactive);
    }
    // public Zenject.ScopeConcreteIdArgConditionCopyNonLazyBinder FromComponentsInHierarchy(System.Func`2<TContract,System.Boolean> predicate, System.Boolean includeInactive)
    // Offset: 0xFFFFFFFF
    Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder* FromComponentsInHierarchy(System::Func_2<TContract, bool>* predicate, bool includeInactive) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::FromComponentsInHierarchy");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "FromComponentsInHierarchy", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(predicate, includeInactive)));
      return ::il2cpp_utils::RunMethodThrow<Zenject::ScopeConcreteIdArgConditionCopyNonLazyBinder*, false>(this, ___internal__method, predicate, includeInactive);
    }
    // public System.Void .ctor(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.BindStatement bindStatement)
    // Offset: 0xFFFFFFFF
    // Implemented from: Zenject.FromBinder
    // Base method: System.Void FromBinder::.ctor(Zenject.DiContainer bindContainer, Zenject.BindInfo bindInfo, Zenject.BindStatement bindStatement)
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FromBinderGeneric_1<TContract>* New_ctor(Zenject::DiContainer* bindContainer, Zenject::BindInfo* bindInfo, Zenject::BindStatement* bindStatement) {
      static auto ___internal__logger = ::Logger::get().WithContext("Zenject::FromBinderGeneric_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FromBinderGeneric_1<TContract>*, creationType>(bindContainer, bindInfo, bindStatement)));
    }
  }; // Zenject.FromBinderGeneric`1
  // Could not write size check! Type: Zenject.FromBinderGeneric`1 is generic, or has no fields that are valid for size checks!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(Zenject::FromBinderGeneric_1, "Zenject", "FromBinderGeneric`1");
