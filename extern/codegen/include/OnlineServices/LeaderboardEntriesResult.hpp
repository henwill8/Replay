// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: OnlineServices
namespace OnlineServices {
  // Forward declaring type: LeaderboardEntryData
  class LeaderboardEntryData;
  // Forward declaring type: GetLeaderboardEntriesResult
  struct GetLeaderboardEntriesResult;
}
// Completed forward declares
// Type namespace: OnlineServices
namespace OnlineServices {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: OnlineServices.LeaderboardEntriesResult
  // [] Offset: FFFFFFFF
  class LeaderboardEntriesResult : public ::Il2CppObject {
    public:
    // public readonly System.Boolean isError
    // Size: 0x1
    // Offset: 0x10
    bool isError;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isError and: localizedErrorMessage
    char __padding0[0x7] = {};
    // public readonly System.String localizedErrorMessage
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* localizedErrorMessage;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public readonly OnlineServices.LeaderboardEntryData[] leaderboardEntries
    // Size: 0x8
    // Offset: 0x20
    ::Array<OnlineServices::LeaderboardEntryData*>* leaderboardEntries;
    // Field size check
    static_assert(sizeof(::Array<OnlineServices::LeaderboardEntryData*>*) == 0x8);
    // public readonly System.Int32 referencePlayerScoreIndex
    // Size: 0x4
    // Offset: 0x28
    int referencePlayerScoreIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: LeaderboardEntriesResult
    LeaderboardEntriesResult(bool isError_ = {}, ::Il2CppString* localizedErrorMessage_ = {}, ::Array<OnlineServices::LeaderboardEntryData*>* leaderboardEntries_ = {}, int referencePlayerScoreIndex_ = {}) noexcept : isError{isError_}, localizedErrorMessage{localizedErrorMessage_}, leaderboardEntries{leaderboardEntries_}, referencePlayerScoreIndex{referencePlayerScoreIndex_} {}
    // private System.Void .ctor(OnlineServices.LeaderboardEntryData[] leaderboardEntries, System.Int32 referencePlayerScoreIndex, System.Boolean isError, System.String localizedErrorMessage)
    // Offset: 0xF1A194
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LeaderboardEntriesResult* New_ctor(::Array<OnlineServices::LeaderboardEntryData*>* leaderboardEntries, int referencePlayerScoreIndex, bool isError, ::Il2CppString* localizedErrorMessage) {
      static auto ___internal__logger = ::Logger::get().WithContext("OnlineServices::LeaderboardEntriesResult::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LeaderboardEntriesResult*, creationType>(leaderboardEntries, referencePlayerScoreIndex, isError, localizedErrorMessage)));
    }
    // static private OnlineServices.LeaderboardEntriesResult ErrorResult(System.String localizedErrorMessage)
    // Offset: 0xF1A204
    static OnlineServices::LeaderboardEntriesResult* ErrorResult(::Il2CppString* localizedErrorMessage);
    // static public OnlineServices.LeaderboardEntriesResult get_notInicializedError()
    // Offset: 0xF1A270
    static OnlineServices::LeaderboardEntriesResult* get_notInicializedError();
    // static public OnlineServices.LeaderboardEntriesResult get_somethingWentWrongError()
    // Offset: 0xF1A2C0
    static OnlineServices::LeaderboardEntriesResult* get_somethingWentWrongError();
    // static public OnlineServices.LeaderboardEntriesResult get_onlineServicesUnavailableError()
    // Offset: 0xF1A310
    static OnlineServices::LeaderboardEntriesResult* get_onlineServicesUnavailableError();
    // static public OnlineServices.LeaderboardEntriesResult FromGetLeaderboardEntriesResult(OnlineServices.GetLeaderboardEntriesResult getLeaderboardEntriesResult)
    // Offset: 0xF1A360
    static OnlineServices::LeaderboardEntriesResult* FromGetLeaderboardEntriesResult(OnlineServices::GetLeaderboardEntriesResult getLeaderboardEntriesResult);
  }; // OnlineServices.LeaderboardEntriesResult
  #pragma pack(pop)
  static check_size<sizeof(LeaderboardEntriesResult), 40 + sizeof(int)> __OnlineServices_LeaderboardEntriesResultSizeCheck;
  static_assert(sizeof(LeaderboardEntriesResult) == 0x2C);
}
DEFINE_IL2CPP_ARG_TYPE(OnlineServices::LeaderboardEntriesResult*, "OnlineServices", "LeaderboardEntriesResult");
