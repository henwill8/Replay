// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
// Including type: System.ValueType
#include "System/ValueType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: OnlineServices
namespace OnlineServices {
  // Forward declaring type: LeaderboardEntryData
  class LeaderboardEntryData;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
template<class T>
struct Array;
// Completed il2cpp-utils forward declares
// Type namespace: OnlineServices
namespace OnlineServices {
  // Size: 0x14
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OnlineServices.GetLeaderboardEntriesResult
  // [] Offset: FFFFFFFF
  // [IsReadOnlyAttribute] Offset: FFFFFFFF
  struct GetLeaderboardEntriesResult/*, public System::ValueType*/ {
    public:
    // public readonly System.Boolean isError
    // Size: 0x1
    // Offset: 0x0
    bool isError;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isError and: leaderboardEntries
    char __padding0[0x7] = {};
    // public readonly OnlineServices.LeaderboardEntryData[] leaderboardEntries
    // Size: 0x8
    // Offset: 0x8
    ::Array<OnlineServices::LeaderboardEntryData*>* leaderboardEntries;
    // Field size check
    static_assert(sizeof(::Array<OnlineServices::LeaderboardEntryData*>*) == 0x8);
    // public readonly System.Int32 referencePlayerScoreIndex
    // Size: 0x4
    // Offset: 0x10
    int referencePlayerScoreIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: GetLeaderboardEntriesResult
    constexpr GetLeaderboardEntriesResult(bool isError_ = {}, ::Array<OnlineServices::LeaderboardEntryData*>* leaderboardEntries_ = {}, int referencePlayerScoreIndex_ = {}) noexcept : isError{isError_}, leaderboardEntries{leaderboardEntries_}, referencePlayerScoreIndex{referencePlayerScoreIndex_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // public System.Void .ctor(System.Boolean isError, OnlineServices.LeaderboardEntryData[] leaderboardEntries, System.Int32 referencePlayerScoreIndex)
    // Offset: 0xDF21BC
    // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    // ABORTED: conflicts with another method.  GetLeaderboardEntriesResult(bool isError, ::Array<OnlineServices::LeaderboardEntryData*>* leaderboardEntries, int referencePlayerScoreIndex)
    // static public OnlineServices.GetLeaderboardEntriesResult get_resultWithError()
    // Offset: 0xF1A0F8
    static OnlineServices::GetLeaderboardEntriesResult get_resultWithError();
  }; // OnlineServices.GetLeaderboardEntriesResult
  #pragma pack(pop)
  static check_size<sizeof(GetLeaderboardEntriesResult), 16 + sizeof(int)> __OnlineServices_GetLeaderboardEntriesResultSizeCheck;
  static_assert(sizeof(GetLeaderboardEntriesResult) == 0x14);
}
DEFINE_IL2CPP_ARG_TYPE(OnlineServices::GetLeaderboardEntriesResult, "OnlineServices", "GetLeaderboardEntriesResult");
