// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.IVRChaperone
#include "Valve/VR/IVRChaperone.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Valve::VR
namespace Valve::VR {
  // Forward declaring type: ChaperoneCalibrationState
  struct ChaperoneCalibrationState;
  // Forward declaring type: HmdQuad_t
  struct HmdQuad_t;
  // Forward declaring type: HmdColor_t
  struct HmdColor_t;
}
// Completed forward declares
// Type namespace: Valve.VR
namespace Valve::VR {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: Valve.VR.CVRChaperone
  // [] Offset: FFFFFFFF
  class CVRChaperone : public ::Il2CppObject {
    public:
    // private Valve.VR.IVRChaperone FnTable
    // Size: 0x40
    // Offset: 0x10
    Valve::VR::IVRChaperone FnTable;
    // Field size check
    static_assert(sizeof(Valve::VR::IVRChaperone) == 0x40);
    // Creating value type constructor for type: CVRChaperone
    CVRChaperone(Valve::VR::IVRChaperone FnTable_ = {}) noexcept : FnTable{FnTable_} {}
    // Creating conversion operator: operator Valve::VR::IVRChaperone
    constexpr operator Valve::VR::IVRChaperone() const noexcept {
      return FnTable;
    }
    // System.Void .ctor(System.IntPtr pInterface)
    // Offset: 0x15D3444
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CVRChaperone* New_ctor(System::IntPtr pInterface) {
      static auto ___internal__logger = ::Logger::get().WithContext("Valve::VR::CVRChaperone::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CVRChaperone*, creationType>(pInterface)));
    }
    // public Valve.VR.ChaperoneCalibrationState GetCalibrationState()
    // Offset: 0x15D3558
    Valve::VR::ChaperoneCalibrationState GetCalibrationState();
    // public System.Boolean GetPlayAreaSize(ref System.Single pSizeX, ref System.Single pSizeZ)
    // Offset: 0x15D3784
    bool GetPlayAreaSize(float& pSizeX, float& pSizeZ);
    // public System.Boolean GetPlayAreaRect(ref Valve.VR.HmdQuad_t rect)
    // Offset: 0x15D3A1C
    bool GetPlayAreaRect(Valve::VR::HmdQuad_t& rect);
    // public System.Void ReloadInfo()
    // Offset: 0x15D3C90
    void ReloadInfo();
    // public System.Void SetSceneColor(Valve.VR.HmdColor_t color)
    // Offset: 0x15D3EB4
    void SetSceneColor(Valve::VR::HmdColor_t color);
    // public System.Void GetBoundsColor(ref Valve.VR.HmdColor_t pOutputColorArray, System.Int32 nNumOutputColors, System.Single flCollisionBoundsFadeDistance, ref Valve.VR.HmdColor_t pOutputCameraColor)
    // Offset: 0x15D4178
    void GetBoundsColor(Valve::VR::HmdColor_t& pOutputColorArray, int nNumOutputColors, float flCollisionBoundsFadeDistance, Valve::VR::HmdColor_t& pOutputCameraColor);
    // public System.Boolean AreBoundsVisible()
    // Offset: 0x15D4430
    bool AreBoundsVisible();
    // public System.Void ForceBoundsVisible(System.Boolean bForce)
    // Offset: 0x15D4660
    void ForceBoundsVisible(bool bForce);
  }; // Valve.VR.CVRChaperone
  #pragma pack(pop)
  static check_size<sizeof(CVRChaperone), 16 + sizeof(Valve::VR::IVRChaperone)> __Valve_VR_CVRChaperoneSizeCheck;
  static_assert(sizeof(CVRChaperone) == 0x50);
}
DEFINE_IL2CPP_ARG_TYPE(Valve::VR::CVRChaperone*, "Valve.VR", "CVRChaperone");
