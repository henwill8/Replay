// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Valve.VR.OpenVR
#include "Valve/VR/OpenVR.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Valve::VR
namespace Valve::VR {
  // Forward declaring type: CVRSystem
  class CVRSystem;
  // Forward declaring type: CVRChaperone
  class CVRChaperone;
  // Forward declaring type: CVRChaperoneSetup
  class CVRChaperoneSetup;
  // Forward declaring type: CVRCompositor
  class CVRCompositor;
  // Forward declaring type: CVROverlay
  class CVROverlay;
  // Forward declaring type: CVRRenderModels
  class CVRRenderModels;
  // Forward declaring type: CVRExtendedDisplay
  class CVRExtendedDisplay;
  // Forward declaring type: CVRSettings
  class CVRSettings;
  // Forward declaring type: CVRApplications
  class CVRApplications;
  // Forward declaring type: CVRScreenshots
  class CVRScreenshots;
  // Forward declaring type: CVRTrackedCamera
  class CVRTrackedCamera;
}
// Completed forward declares
// Type namespace: Valve.VR
namespace Valve::VR {
  // Autogenerated type: Valve.VR.OpenVR/COpenVRContext
  class OpenVR::COpenVRContext : public ::Il2CppObject {
    public:
    // private Valve.VR.CVRSystem m_pVRSystem
    // Offset: 0x10
    Valve::VR::CVRSystem* m_pVRSystem;
    // private Valve.VR.CVRChaperone m_pVRChaperone
    // Offset: 0x18
    Valve::VR::CVRChaperone* m_pVRChaperone;
    // private Valve.VR.CVRChaperoneSetup m_pVRChaperoneSetup
    // Offset: 0x20
    Valve::VR::CVRChaperoneSetup* m_pVRChaperoneSetup;
    // private Valve.VR.CVRCompositor m_pVRCompositor
    // Offset: 0x28
    Valve::VR::CVRCompositor* m_pVRCompositor;
    // private Valve.VR.CVROverlay m_pVROverlay
    // Offset: 0x30
    Valve::VR::CVROverlay* m_pVROverlay;
    // private Valve.VR.CVRRenderModels m_pVRRenderModels
    // Offset: 0x38
    Valve::VR::CVRRenderModels* m_pVRRenderModels;
    // private Valve.VR.CVRExtendedDisplay m_pVRExtendedDisplay
    // Offset: 0x40
    Valve::VR::CVRExtendedDisplay* m_pVRExtendedDisplay;
    // private Valve.VR.CVRSettings m_pVRSettings
    // Offset: 0x48
    Valve::VR::CVRSettings* m_pVRSettings;
    // private Valve.VR.CVRApplications m_pVRApplications
    // Offset: 0x50
    Valve::VR::CVRApplications* m_pVRApplications;
    // private Valve.VR.CVRScreenshots m_pVRScreenshots
    // Offset: 0x58
    Valve::VR::CVRScreenshots* m_pVRScreenshots;
    // private Valve.VR.CVRTrackedCamera m_pVRTrackedCamera
    // Offset: 0x60
    Valve::VR::CVRTrackedCamera* m_pVRTrackedCamera;
    // public System.Void Clear()
    // Offset: 0x192CD40
    void Clear();
    // private System.Void CheckClear()
    // Offset: 0x192CE6C
    void CheckClear();
    // public Valve.VR.CVRSystem VRSystem()
    // Offset: 0x192BF6C
    Valve::VR::CVRSystem* VRSystem();
    // public Valve.VR.CVRChaperone VRChaperone()
    // Offset: 0x192C098
    Valve::VR::CVRChaperone* VRChaperone();
    // public Valve.VR.CVRChaperoneSetup VRChaperoneSetup()
    // Offset: 0x192C1C4
    Valve::VR::CVRChaperoneSetup* VRChaperoneSetup();
    // public Valve.VR.CVRCompositor VRCompositor()
    // Offset: 0x192C2F0
    Valve::VR::CVRCompositor* VRCompositor();
    // public Valve.VR.CVROverlay VROverlay()
    // Offset: 0x192C41C
    Valve::VR::CVROverlay* VROverlay();
    // public Valve.VR.CVRRenderModels VRRenderModels()
    // Offset: 0x192C548
    Valve::VR::CVRRenderModels* VRRenderModels();
    // public Valve.VR.CVRExtendedDisplay VRExtendedDisplay()
    // Offset: 0x192C674
    Valve::VR::CVRExtendedDisplay* VRExtendedDisplay();
    // public Valve.VR.CVRSettings VRSettings()
    // Offset: 0x192C7A0
    Valve::VR::CVRSettings* VRSettings();
    // public Valve.VR.CVRApplications VRApplications()
    // Offset: 0x192C8CC
    Valve::VR::CVRApplications* VRApplications();
    // public Valve.VR.CVRScreenshots VRScreenshots()
    // Offset: 0x192C9F8
    Valve::VR::CVRScreenshots* VRScreenshots();
    // public Valve.VR.CVRTrackedCamera VRTrackedCamera()
    // Offset: 0x192CB24
    Valve::VR::CVRTrackedCamera* VRTrackedCamera();
    // public System.Void .ctor()
    // Offset: 0x192BEDC
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static OpenVR::COpenVRContext* New_ctor();
  }; // Valve.VR.OpenVR/COpenVRContext
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Valve::VR::OpenVR::COpenVRContext*, "Valve.VR", "OpenVR/COpenVRContext");
#pragma pack(pop)
