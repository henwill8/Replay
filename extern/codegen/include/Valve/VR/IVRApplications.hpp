// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Valve::VR
namespace Valve::VR {
}
// Completed forward declares
// Type namespace: Valve.VR
namespace Valve::VR {
  // Autogenerated type: Valve.VR.IVRApplications
  struct IVRApplications : public System::ValueType {
    public:
    // Nested type: Valve::VR::IVRApplications::_AddApplicationManifest
    class _AddApplicationManifest;
    // Nested type: Valve::VR::IVRApplications::_RemoveApplicationManifest
    class _RemoveApplicationManifest;
    // Nested type: Valve::VR::IVRApplications::_IsApplicationInstalled
    class _IsApplicationInstalled;
    // Nested type: Valve::VR::IVRApplications::_GetApplicationCount
    class _GetApplicationCount;
    // Nested type: Valve::VR::IVRApplications::_GetApplicationKeyByIndex
    class _GetApplicationKeyByIndex;
    // Nested type: Valve::VR::IVRApplications::_GetApplicationKeyByProcessId
    class _GetApplicationKeyByProcessId;
    // Nested type: Valve::VR::IVRApplications::_LaunchApplication
    class _LaunchApplication;
    // Nested type: Valve::VR::IVRApplications::_LaunchTemplateApplication
    class _LaunchTemplateApplication;
    // Nested type: Valve::VR::IVRApplications::_LaunchApplicationFromMimeType
    class _LaunchApplicationFromMimeType;
    // Nested type: Valve::VR::IVRApplications::_LaunchDashboardOverlay
    class _LaunchDashboardOverlay;
    // Nested type: Valve::VR::IVRApplications::_CancelApplicationLaunch
    class _CancelApplicationLaunch;
    // Nested type: Valve::VR::IVRApplications::_IdentifyApplication
    class _IdentifyApplication;
    // Nested type: Valve::VR::IVRApplications::_GetApplicationProcessId
    class _GetApplicationProcessId;
    // Nested type: Valve::VR::IVRApplications::_GetApplicationsErrorNameFromEnum
    class _GetApplicationsErrorNameFromEnum;
    // Nested type: Valve::VR::IVRApplications::_GetApplicationPropertyString
    class _GetApplicationPropertyString;
    // Nested type: Valve::VR::IVRApplications::_GetApplicationPropertyBool
    class _GetApplicationPropertyBool;
    // Nested type: Valve::VR::IVRApplications::_GetApplicationPropertyUint64
    class _GetApplicationPropertyUint64;
    // Nested type: Valve::VR::IVRApplications::_SetApplicationAutoLaunch
    class _SetApplicationAutoLaunch;
    // Nested type: Valve::VR::IVRApplications::_GetApplicationAutoLaunch
    class _GetApplicationAutoLaunch;
    // Nested type: Valve::VR::IVRApplications::_SetDefaultApplicationForMimeType
    class _SetDefaultApplicationForMimeType;
    // Nested type: Valve::VR::IVRApplications::_GetDefaultApplicationForMimeType
    class _GetDefaultApplicationForMimeType;
    // Nested type: Valve::VR::IVRApplications::_GetApplicationSupportedMimeTypes
    class _GetApplicationSupportedMimeTypes;
    // Nested type: Valve::VR::IVRApplications::_GetApplicationsThatSupportMimeType
    class _GetApplicationsThatSupportMimeType;
    // Nested type: Valve::VR::IVRApplications::_GetApplicationLaunchArguments
    class _GetApplicationLaunchArguments;
    // Nested type: Valve::VR::IVRApplications::_GetStartingApplication
    class _GetStartingApplication;
    // Nested type: Valve::VR::IVRApplications::_GetTransitionState
    class _GetTransitionState;
    // Nested type: Valve::VR::IVRApplications::_PerformApplicationPrelaunchCheck
    class _PerformApplicationPrelaunchCheck;
    // Nested type: Valve::VR::IVRApplications::_GetApplicationsTransitionStateNameFromEnum
    class _GetApplicationsTransitionStateNameFromEnum;
    // Nested type: Valve::VR::IVRApplications::_IsQuitUserPromptRequested
    class _IsQuitUserPromptRequested;
    // Nested type: Valve::VR::IVRApplications::_LaunchInternalProcess
    class _LaunchInternalProcess;
    // Nested type: Valve::VR::IVRApplications::_GetCurrentSceneProcessId
    class _GetCurrentSceneProcessId;
    // Valve.VR.IVRApplications/_AddApplicationManifest AddApplicationManifest
    // Offset: 0x0
    Valve::VR::IVRApplications::_AddApplicationManifest* AddApplicationManifest;
    // Valve.VR.IVRApplications/_RemoveApplicationManifest RemoveApplicationManifest
    // Offset: 0x8
    Valve::VR::IVRApplications::_RemoveApplicationManifest* RemoveApplicationManifest;
    // Valve.VR.IVRApplications/_IsApplicationInstalled IsApplicationInstalled
    // Offset: 0x10
    Valve::VR::IVRApplications::_IsApplicationInstalled* IsApplicationInstalled;
    // Valve.VR.IVRApplications/_GetApplicationCount GetApplicationCount
    // Offset: 0x18
    Valve::VR::IVRApplications::_GetApplicationCount* GetApplicationCount;
    // Valve.VR.IVRApplications/_GetApplicationKeyByIndex GetApplicationKeyByIndex
    // Offset: 0x20
    Valve::VR::IVRApplications::_GetApplicationKeyByIndex* GetApplicationKeyByIndex;
    // Valve.VR.IVRApplications/_GetApplicationKeyByProcessId GetApplicationKeyByProcessId
    // Offset: 0x28
    Valve::VR::IVRApplications::_GetApplicationKeyByProcessId* GetApplicationKeyByProcessId;
    // Valve.VR.IVRApplications/_LaunchApplication LaunchApplication
    // Offset: 0x30
    Valve::VR::IVRApplications::_LaunchApplication* LaunchApplication;
    // Valve.VR.IVRApplications/_LaunchTemplateApplication LaunchTemplateApplication
    // Offset: 0x38
    Valve::VR::IVRApplications::_LaunchTemplateApplication* LaunchTemplateApplication;
    // Valve.VR.IVRApplications/_LaunchApplicationFromMimeType LaunchApplicationFromMimeType
    // Offset: 0x40
    Valve::VR::IVRApplications::_LaunchApplicationFromMimeType* LaunchApplicationFromMimeType;
    // Valve.VR.IVRApplications/_LaunchDashboardOverlay LaunchDashboardOverlay
    // Offset: 0x48
    Valve::VR::IVRApplications::_LaunchDashboardOverlay* LaunchDashboardOverlay;
    // Valve.VR.IVRApplications/_CancelApplicationLaunch CancelApplicationLaunch
    // Offset: 0x50
    Valve::VR::IVRApplications::_CancelApplicationLaunch* CancelApplicationLaunch;
    // Valve.VR.IVRApplications/_IdentifyApplication IdentifyApplication
    // Offset: 0x58
    Valve::VR::IVRApplications::_IdentifyApplication* IdentifyApplication;
    // Valve.VR.IVRApplications/_GetApplicationProcessId GetApplicationProcessId
    // Offset: 0x60
    Valve::VR::IVRApplications::_GetApplicationProcessId* GetApplicationProcessId;
    // Valve.VR.IVRApplications/_GetApplicationsErrorNameFromEnum GetApplicationsErrorNameFromEnum
    // Offset: 0x68
    Valve::VR::IVRApplications::_GetApplicationsErrorNameFromEnum* GetApplicationsErrorNameFromEnum;
    // Valve.VR.IVRApplications/_GetApplicationPropertyString GetApplicationPropertyString
    // Offset: 0x70
    Valve::VR::IVRApplications::_GetApplicationPropertyString* GetApplicationPropertyString;
    // Valve.VR.IVRApplications/_GetApplicationPropertyBool GetApplicationPropertyBool
    // Offset: 0x78
    Valve::VR::IVRApplications::_GetApplicationPropertyBool* GetApplicationPropertyBool;
    // Valve.VR.IVRApplications/_GetApplicationPropertyUint64 GetApplicationPropertyUint64
    // Offset: 0x80
    Valve::VR::IVRApplications::_GetApplicationPropertyUint64* GetApplicationPropertyUint64;
    // Valve.VR.IVRApplications/_SetApplicationAutoLaunch SetApplicationAutoLaunch
    // Offset: 0x88
    Valve::VR::IVRApplications::_SetApplicationAutoLaunch* SetApplicationAutoLaunch;
    // Valve.VR.IVRApplications/_GetApplicationAutoLaunch GetApplicationAutoLaunch
    // Offset: 0x90
    Valve::VR::IVRApplications::_GetApplicationAutoLaunch* GetApplicationAutoLaunch;
    // Valve.VR.IVRApplications/_SetDefaultApplicationForMimeType SetDefaultApplicationForMimeType
    // Offset: 0x98
    Valve::VR::IVRApplications::_SetDefaultApplicationForMimeType* SetDefaultApplicationForMimeType;
    // Valve.VR.IVRApplications/_GetDefaultApplicationForMimeType GetDefaultApplicationForMimeType
    // Offset: 0xA0
    Valve::VR::IVRApplications::_GetDefaultApplicationForMimeType* GetDefaultApplicationForMimeType;
    // Valve.VR.IVRApplications/_GetApplicationSupportedMimeTypes GetApplicationSupportedMimeTypes
    // Offset: 0xA8
    Valve::VR::IVRApplications::_GetApplicationSupportedMimeTypes* GetApplicationSupportedMimeTypes;
    // Valve.VR.IVRApplications/_GetApplicationsThatSupportMimeType GetApplicationsThatSupportMimeType
    // Offset: 0xB0
    Valve::VR::IVRApplications::_GetApplicationsThatSupportMimeType* GetApplicationsThatSupportMimeType;
    // Valve.VR.IVRApplications/_GetApplicationLaunchArguments GetApplicationLaunchArguments
    // Offset: 0xB8
    Valve::VR::IVRApplications::_GetApplicationLaunchArguments* GetApplicationLaunchArguments;
    // Valve.VR.IVRApplications/_GetStartingApplication GetStartingApplication
    // Offset: 0xC0
    Valve::VR::IVRApplications::_GetStartingApplication* GetStartingApplication;
    // Valve.VR.IVRApplications/_GetTransitionState GetTransitionState
    // Offset: 0xC8
    Valve::VR::IVRApplications::_GetTransitionState* GetTransitionState;
    // Valve.VR.IVRApplications/_PerformApplicationPrelaunchCheck PerformApplicationPrelaunchCheck
    // Offset: 0xD0
    Valve::VR::IVRApplications::_PerformApplicationPrelaunchCheck* PerformApplicationPrelaunchCheck;
    // Valve.VR.IVRApplications/_GetApplicationsTransitionStateNameFromEnum GetApplicationsTransitionStateNameFromEnum
    // Offset: 0xD8
    Valve::VR::IVRApplications::_GetApplicationsTransitionStateNameFromEnum* GetApplicationsTransitionStateNameFromEnum;
    // Valve.VR.IVRApplications/_IsQuitUserPromptRequested IsQuitUserPromptRequested
    // Offset: 0xE0
    Valve::VR::IVRApplications::_IsQuitUserPromptRequested* IsQuitUserPromptRequested;
    // Valve.VR.IVRApplications/_LaunchInternalProcess LaunchInternalProcess
    // Offset: 0xE8
    Valve::VR::IVRApplications::_LaunchInternalProcess* LaunchInternalProcess;
    // Valve.VR.IVRApplications/_GetCurrentSceneProcessId GetCurrentSceneProcessId
    // Offset: 0xF0
    Valve::VR::IVRApplications::_GetCurrentSceneProcessId* GetCurrentSceneProcessId;
    // Creating value type constructor for type: IVRApplications
    constexpr IVRApplications(Valve::VR::IVRApplications::_AddApplicationManifest* AddApplicationManifest_ = {}, Valve::VR::IVRApplications::_RemoveApplicationManifest* RemoveApplicationManifest_ = {}, Valve::VR::IVRApplications::_IsApplicationInstalled* IsApplicationInstalled_ = {}, Valve::VR::IVRApplications::_GetApplicationCount* GetApplicationCount_ = {}, Valve::VR::IVRApplications::_GetApplicationKeyByIndex* GetApplicationKeyByIndex_ = {}, Valve::VR::IVRApplications::_GetApplicationKeyByProcessId* GetApplicationKeyByProcessId_ = {}, Valve::VR::IVRApplications::_LaunchApplication* LaunchApplication_ = {}, Valve::VR::IVRApplications::_LaunchTemplateApplication* LaunchTemplateApplication_ = {}, Valve::VR::IVRApplications::_LaunchApplicationFromMimeType* LaunchApplicationFromMimeType_ = {}, Valve::VR::IVRApplications::_LaunchDashboardOverlay* LaunchDashboardOverlay_ = {}, Valve::VR::IVRApplications::_CancelApplicationLaunch* CancelApplicationLaunch_ = {}, Valve::VR::IVRApplications::_IdentifyApplication* IdentifyApplication_ = {}, Valve::VR::IVRApplications::_GetApplicationProcessId* GetApplicationProcessId_ = {}, Valve::VR::IVRApplications::_GetApplicationsErrorNameFromEnum* GetApplicationsErrorNameFromEnum_ = {}, Valve::VR::IVRApplications::_GetApplicationPropertyString* GetApplicationPropertyString_ = {}, Valve::VR::IVRApplications::_GetApplicationPropertyBool* GetApplicationPropertyBool_ = {}, Valve::VR::IVRApplications::_GetApplicationPropertyUint64* GetApplicationPropertyUint64_ = {}, Valve::VR::IVRApplications::_SetApplicationAutoLaunch* SetApplicationAutoLaunch_ = {}, Valve::VR::IVRApplications::_GetApplicationAutoLaunch* GetApplicationAutoLaunch_ = {}, Valve::VR::IVRApplications::_SetDefaultApplicationForMimeType* SetDefaultApplicationForMimeType_ = {}, Valve::VR::IVRApplications::_GetDefaultApplicationForMimeType* GetDefaultApplicationForMimeType_ = {}, Valve::VR::IVRApplications::_GetApplicationSupportedMimeTypes* GetApplicationSupportedMimeTypes_ = {}, Valve::VR::IVRApplications::_GetApplicationsThatSupportMimeType* GetApplicationsThatSupportMimeType_ = {}, Valve::VR::IVRApplications::_GetApplicationLaunchArguments* GetApplicationLaunchArguments_ = {}, Valve::VR::IVRApplications::_GetStartingApplication* GetStartingApplication_ = {}, Valve::VR::IVRApplications::_GetTransitionState* GetTransitionState_ = {}, Valve::VR::IVRApplications::_PerformApplicationPrelaunchCheck* PerformApplicationPrelaunchCheck_ = {}, Valve::VR::IVRApplications::_GetApplicationsTransitionStateNameFromEnum* GetApplicationsTransitionStateNameFromEnum_ = {}, Valve::VR::IVRApplications::_IsQuitUserPromptRequested* IsQuitUserPromptRequested_ = {}, Valve::VR::IVRApplications::_LaunchInternalProcess* LaunchInternalProcess_ = {}, Valve::VR::IVRApplications::_GetCurrentSceneProcessId* GetCurrentSceneProcessId_ = {}) noexcept : AddApplicationManifest{AddApplicationManifest_}, RemoveApplicationManifest{RemoveApplicationManifest_}, IsApplicationInstalled{IsApplicationInstalled_}, GetApplicationCount{GetApplicationCount_}, GetApplicationKeyByIndex{GetApplicationKeyByIndex_}, GetApplicationKeyByProcessId{GetApplicationKeyByProcessId_}, LaunchApplication{LaunchApplication_}, LaunchTemplateApplication{LaunchTemplateApplication_}, LaunchApplicationFromMimeType{LaunchApplicationFromMimeType_}, LaunchDashboardOverlay{LaunchDashboardOverlay_}, CancelApplicationLaunch{CancelApplicationLaunch_}, IdentifyApplication{IdentifyApplication_}, GetApplicationProcessId{GetApplicationProcessId_}, GetApplicationsErrorNameFromEnum{GetApplicationsErrorNameFromEnum_}, GetApplicationPropertyString{GetApplicationPropertyString_}, GetApplicationPropertyBool{GetApplicationPropertyBool_}, GetApplicationPropertyUint64{GetApplicationPropertyUint64_}, SetApplicationAutoLaunch{SetApplicationAutoLaunch_}, GetApplicationAutoLaunch{GetApplicationAutoLaunch_}, SetDefaultApplicationForMimeType{SetDefaultApplicationForMimeType_}, GetDefaultApplicationForMimeType{GetDefaultApplicationForMimeType_}, GetApplicationSupportedMimeTypes{GetApplicationSupportedMimeTypes_}, GetApplicationsThatSupportMimeType{GetApplicationsThatSupportMimeType_}, GetApplicationLaunchArguments{GetApplicationLaunchArguments_}, GetStartingApplication{GetStartingApplication_}, GetTransitionState{GetTransitionState_}, PerformApplicationPrelaunchCheck{PerformApplicationPrelaunchCheck_}, GetApplicationsTransitionStateNameFromEnum{GetApplicationsTransitionStateNameFromEnum_}, IsQuitUserPromptRequested{IsQuitUserPromptRequested_}, LaunchInternalProcess{LaunchInternalProcess_}, GetCurrentSceneProcessId{GetCurrentSceneProcessId_} {}
  }; // Valve.VR.IVRApplications
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Valve::VR::IVRApplications, "Valve.VR", "IVRApplications");
#pragma pack(pop)
