// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Valve.VR.VREvent_Reserved_t
#include "Valve/VR/VREvent_Reserved_t.hpp"
// Including type: Valve.VR.VREvent_Controller_t
#include "Valve/VR/VREvent_Controller_t.hpp"
// Including type: Valve.VR.VREvent_Mouse_t
#include "Valve/VR/VREvent_Mouse_t.hpp"
// Including type: Valve.VR.VREvent_Scroll_t
#include "Valve/VR/VREvent_Scroll_t.hpp"
// Including type: Valve.VR.VREvent_Process_t
#include "Valve/VR/VREvent_Process_t.hpp"
// Including type: Valve.VR.VREvent_Notification_t
#include "Valve/VR/VREvent_Notification_t.hpp"
// Including type: Valve.VR.VREvent_Overlay_t
#include "Valve/VR/VREvent_Overlay_t.hpp"
// Including type: Valve.VR.VREvent_Status_t
#include "Valve/VR/VREvent_Status_t.hpp"
// Including type: Valve.VR.VREvent_Ipd_t
#include "Valve/VR/VREvent_Ipd_t.hpp"
// Including type: Valve.VR.VREvent_Chaperone_t
#include "Valve/VR/VREvent_Chaperone_t.hpp"
// Including type: Valve.VR.VREvent_PerformanceTest_t
#include "Valve/VR/VREvent_PerformanceTest_t.hpp"
// Including type: Valve.VR.VREvent_TouchPadMove_t
#include "Valve/VR/VREvent_TouchPadMove_t.hpp"
// Including type: Valve.VR.VREvent_SeatedZeroPoseReset_t
#include "Valve/VR/VREvent_SeatedZeroPoseReset_t.hpp"
// Including type: Valve.VR.VREvent_Screenshot_t
#include "Valve/VR/VREvent_Screenshot_t.hpp"
// Including type: Valve.VR.VREvent_ScreenshotProgress_t
#include "Valve/VR/VREvent_ScreenshotProgress_t.hpp"
// Including type: Valve.VR.VREvent_ApplicationLaunch_t
#include "Valve/VR/VREvent_ApplicationLaunch_t.hpp"
// Including type: Valve.VR.VREvent_EditingCameraSurface_t
#include "Valve/VR/VREvent_EditingCameraSurface_t.hpp"
// Including type: Valve.VR.VREvent_MessageOverlay_t
#include "Valve/VR/VREvent_MessageOverlay_t.hpp"
// Including type: Valve.VR.VREvent_Property_t
#include "Valve/VR/VREvent_Property_t.hpp"
// Including type: Valve.VR.VREvent_DualAnalog_t
#include "Valve/VR/VREvent_DualAnalog_t.hpp"
// Including type: Valve.VR.VREvent_HapticVibration_t
#include "Valve/VR/VREvent_HapticVibration_t.hpp"
// Including type: Valve.VR.VREvent_Keyboard_t
#include "Valve/VR/VREvent_Keyboard_t.hpp"
// Completed includes
// Type namespace: Valve.VR
namespace Valve::VR {
  // Autogenerated type: Valve.VR.VREvent_Data_t
  struct VREvent_Data_t : public System::ValueType {
    public:
    // public Valve.VR.VREvent_Reserved_t reserved
    // Offset: 0x0
    Valve::VR::VREvent_Reserved_t reserved;
    // public Valve.VR.VREvent_Controller_t controller
    // Offset: 0x0
    Valve::VR::VREvent_Controller_t controller;
    // public Valve.VR.VREvent_Mouse_t mouse
    // Offset: 0x0
    Valve::VR::VREvent_Mouse_t mouse;
    // public Valve.VR.VREvent_Scroll_t scroll
    // Offset: 0x0
    Valve::VR::VREvent_Scroll_t scroll;
    // public Valve.VR.VREvent_Process_t process
    // Offset: 0x0
    Valve::VR::VREvent_Process_t process;
    // public Valve.VR.VREvent_Notification_t notification
    // Offset: 0x0
    Valve::VR::VREvent_Notification_t notification;
    // public Valve.VR.VREvent_Overlay_t overlay
    // Offset: 0x0
    Valve::VR::VREvent_Overlay_t overlay;
    // public Valve.VR.VREvent_Status_t status
    // Offset: 0x0
    Valve::VR::VREvent_Status_t status;
    // public Valve.VR.VREvent_Ipd_t ipd
    // Offset: 0x0
    Valve::VR::VREvent_Ipd_t ipd;
    // public Valve.VR.VREvent_Chaperone_t chaperone
    // Offset: 0x0
    Valve::VR::VREvent_Chaperone_t chaperone;
    // public Valve.VR.VREvent_PerformanceTest_t performanceTest
    // Offset: 0x0
    Valve::VR::VREvent_PerformanceTest_t performanceTest;
    // public Valve.VR.VREvent_TouchPadMove_t touchPadMove
    // Offset: 0x0
    Valve::VR::VREvent_TouchPadMove_t touchPadMove;
    // public Valve.VR.VREvent_SeatedZeroPoseReset_t seatedZeroPoseReset
    // Offset: 0x0
    Valve::VR::VREvent_SeatedZeroPoseReset_t seatedZeroPoseReset;
    // public Valve.VR.VREvent_Screenshot_t screenshot
    // Offset: 0x0
    Valve::VR::VREvent_Screenshot_t screenshot;
    // public Valve.VR.VREvent_ScreenshotProgress_t screenshotProgress
    // Offset: 0x0
    Valve::VR::VREvent_ScreenshotProgress_t screenshotProgress;
    // public Valve.VR.VREvent_ApplicationLaunch_t applicationLaunch
    // Offset: 0x0
    Valve::VR::VREvent_ApplicationLaunch_t applicationLaunch;
    // public Valve.VR.VREvent_EditingCameraSurface_t cameraSurface
    // Offset: 0x0
    Valve::VR::VREvent_EditingCameraSurface_t cameraSurface;
    // public Valve.VR.VREvent_MessageOverlay_t messageOverlay
    // Offset: 0x0
    Valve::VR::VREvent_MessageOverlay_t messageOverlay;
    // public Valve.VR.VREvent_Property_t property
    // Offset: 0x0
    Valve::VR::VREvent_Property_t property;
    // public Valve.VR.VREvent_DualAnalog_t dualAnalog
    // Offset: 0x0
    Valve::VR::VREvent_DualAnalog_t dualAnalog;
    // public Valve.VR.VREvent_HapticVibration_t hapticVibration
    // Offset: 0x0
    Valve::VR::VREvent_HapticVibration_t hapticVibration;
    // public Valve.VR.VREvent_Keyboard_t keyboard
    // Offset: 0x0
    Valve::VR::VREvent_Keyboard_t keyboard;
    // Creating value type constructor for type: VREvent_Data_t
    constexpr VREvent_Data_t(Valve::VR::VREvent_Reserved_t reserved_ = {}, Valve::VR::VREvent_Controller_t controller_ = {}, Valve::VR::VREvent_Mouse_t mouse_ = {}, Valve::VR::VREvent_Scroll_t scroll_ = {}, Valve::VR::VREvent_Process_t process_ = {}, Valve::VR::VREvent_Notification_t notification_ = {}, Valve::VR::VREvent_Overlay_t overlay_ = {}, Valve::VR::VREvent_Status_t status_ = {}, Valve::VR::VREvent_Ipd_t ipd_ = {}, Valve::VR::VREvent_Chaperone_t chaperone_ = {}, Valve::VR::VREvent_PerformanceTest_t performanceTest_ = {}, Valve::VR::VREvent_TouchPadMove_t touchPadMove_ = {}, Valve::VR::VREvent_SeatedZeroPoseReset_t seatedZeroPoseReset_ = {}, Valve::VR::VREvent_Screenshot_t screenshot_ = {}, Valve::VR::VREvent_ScreenshotProgress_t screenshotProgress_ = {}, Valve::VR::VREvent_ApplicationLaunch_t applicationLaunch_ = {}, Valve::VR::VREvent_EditingCameraSurface_t cameraSurface_ = {}, Valve::VR::VREvent_MessageOverlay_t messageOverlay_ = {}, Valve::VR::VREvent_Property_t property_ = {}, Valve::VR::VREvent_DualAnalog_t dualAnalog_ = {}, Valve::VR::VREvent_HapticVibration_t hapticVibration_ = {}, Valve::VR::VREvent_Keyboard_t keyboard_ = {}) noexcept : reserved{reserved_}, controller{controller_}, mouse{mouse_}, scroll{scroll_}, process{process_}, notification{notification_}, overlay{overlay_}, status{status_}, ipd{ipd_}, chaperone{chaperone_}, performanceTest{performanceTest_}, touchPadMove{touchPadMove_}, seatedZeroPoseReset{seatedZeroPoseReset_}, screenshot{screenshot_}, screenshotProgress{screenshotProgress_}, applicationLaunch{applicationLaunch_}, cameraSurface{cameraSurface_}, messageOverlay{messageOverlay_}, property{property_}, dualAnalog{dualAnalog_}, hapticVibration{hapticVibration_}, keyboard{keyboard_} {}
  }; // Valve.VR.VREvent_Data_t
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Valve::VR::VREvent_Data_t, "Valve.VR", "VREvent_Data_t");
#pragma pack(pop)
