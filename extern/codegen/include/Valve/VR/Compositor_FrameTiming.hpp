// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Valve.VR.TrackedDevicePose_t
#include "Valve/VR/TrackedDevicePose_t.hpp"
// Completed includes
// Type namespace: Valve.VR
namespace Valve::VR {
  // Autogenerated type: Valve.VR.Compositor_FrameTiming
  struct Compositor_FrameTiming : public System::ValueType {
    public:
    // public System.UInt32 m_nSize
    // Offset: 0x0
    uint m_nSize;
    // public System.UInt32 m_nFrameIndex
    // Offset: 0x4
    uint m_nFrameIndex;
    // public System.UInt32 m_nNumFramePresents
    // Offset: 0x8
    uint m_nNumFramePresents;
    // public System.UInt32 m_nNumMisPresented
    // Offset: 0xC
    uint m_nNumMisPresented;
    // public System.UInt32 m_nNumDroppedFrames
    // Offset: 0x10
    uint m_nNumDroppedFrames;
    // public System.UInt32 m_nReprojectionFlags
    // Offset: 0x14
    uint m_nReprojectionFlags;
    // public System.Double m_flSystemTimeInSeconds
    // Offset: 0x18
    double m_flSystemTimeInSeconds;
    // public System.Single m_flPreSubmitGpuMs
    // Offset: 0x20
    float m_flPreSubmitGpuMs;
    // public System.Single m_flPostSubmitGpuMs
    // Offset: 0x24
    float m_flPostSubmitGpuMs;
    // public System.Single m_flTotalRenderGpuMs
    // Offset: 0x28
    float m_flTotalRenderGpuMs;
    // public System.Single m_flCompositorRenderGpuMs
    // Offset: 0x2C
    float m_flCompositorRenderGpuMs;
    // public System.Single m_flCompositorRenderCpuMs
    // Offset: 0x30
    float m_flCompositorRenderCpuMs;
    // public System.Single m_flCompositorIdleCpuMs
    // Offset: 0x34
    float m_flCompositorIdleCpuMs;
    // public System.Single m_flClientFrameIntervalMs
    // Offset: 0x38
    float m_flClientFrameIntervalMs;
    // public System.Single m_flPresentCallCpuMs
    // Offset: 0x3C
    float m_flPresentCallCpuMs;
    // public System.Single m_flWaitForPresentCpuMs
    // Offset: 0x40
    float m_flWaitForPresentCpuMs;
    // public System.Single m_flSubmitFrameMs
    // Offset: 0x44
    float m_flSubmitFrameMs;
    // public System.Single m_flWaitGetPosesCalledMs
    // Offset: 0x48
    float m_flWaitGetPosesCalledMs;
    // public System.Single m_flNewPosesReadyMs
    // Offset: 0x4C
    float m_flNewPosesReadyMs;
    // public System.Single m_flNewFrameReadyMs
    // Offset: 0x50
    float m_flNewFrameReadyMs;
    // public System.Single m_flCompositorUpdateStartMs
    // Offset: 0x54
    float m_flCompositorUpdateStartMs;
    // public System.Single m_flCompositorUpdateEndMs
    // Offset: 0x58
    float m_flCompositorUpdateEndMs;
    // public System.Single m_flCompositorRenderStartMs
    // Offset: 0x5C
    float m_flCompositorRenderStartMs;
    // public Valve.VR.TrackedDevicePose_t m_HmdPose
    // Offset: 0x60
    Valve::VR::TrackedDevicePose_t m_HmdPose;
    // Creating value type constructor for type: Compositor_FrameTiming
    constexpr Compositor_FrameTiming(uint m_nSize_ = {}, uint m_nFrameIndex_ = {}, uint m_nNumFramePresents_ = {}, uint m_nNumMisPresented_ = {}, uint m_nNumDroppedFrames_ = {}, uint m_nReprojectionFlags_ = {}, double m_flSystemTimeInSeconds_ = {}, float m_flPreSubmitGpuMs_ = {}, float m_flPostSubmitGpuMs_ = {}, float m_flTotalRenderGpuMs_ = {}, float m_flCompositorRenderGpuMs_ = {}, float m_flCompositorRenderCpuMs_ = {}, float m_flCompositorIdleCpuMs_ = {}, float m_flClientFrameIntervalMs_ = {}, float m_flPresentCallCpuMs_ = {}, float m_flWaitForPresentCpuMs_ = {}, float m_flSubmitFrameMs_ = {}, float m_flWaitGetPosesCalledMs_ = {}, float m_flNewPosesReadyMs_ = {}, float m_flNewFrameReadyMs_ = {}, float m_flCompositorUpdateStartMs_ = {}, float m_flCompositorUpdateEndMs_ = {}, float m_flCompositorRenderStartMs_ = {}, Valve::VR::TrackedDevicePose_t m_HmdPose_ = {}) noexcept : m_nSize{m_nSize_}, m_nFrameIndex{m_nFrameIndex_}, m_nNumFramePresents{m_nNumFramePresents_}, m_nNumMisPresented{m_nNumMisPresented_}, m_nNumDroppedFrames{m_nNumDroppedFrames_}, m_nReprojectionFlags{m_nReprojectionFlags_}, m_flSystemTimeInSeconds{m_flSystemTimeInSeconds_}, m_flPreSubmitGpuMs{m_flPreSubmitGpuMs_}, m_flPostSubmitGpuMs{m_flPostSubmitGpuMs_}, m_flTotalRenderGpuMs{m_flTotalRenderGpuMs_}, m_flCompositorRenderGpuMs{m_flCompositorRenderGpuMs_}, m_flCompositorRenderCpuMs{m_flCompositorRenderCpuMs_}, m_flCompositorIdleCpuMs{m_flCompositorIdleCpuMs_}, m_flClientFrameIntervalMs{m_flClientFrameIntervalMs_}, m_flPresentCallCpuMs{m_flPresentCallCpuMs_}, m_flWaitForPresentCpuMs{m_flWaitForPresentCpuMs_}, m_flSubmitFrameMs{m_flSubmitFrameMs_}, m_flWaitGetPosesCalledMs{m_flWaitGetPosesCalledMs_}, m_flNewPosesReadyMs{m_flNewPosesReadyMs_}, m_flNewFrameReadyMs{m_flNewFrameReadyMs_}, m_flCompositorUpdateStartMs{m_flCompositorUpdateStartMs_}, m_flCompositorUpdateEndMs{m_flCompositorUpdateEndMs_}, m_flCompositorRenderStartMs{m_flCompositorRenderStartMs_}, m_HmdPose{m_HmdPose_} {}
  }; // Valve.VR.Compositor_FrameTiming
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Valve::VR::Compositor_FrameTiming, "Valve.VR", "Compositor_FrameTiming");
#pragma pack(pop)
