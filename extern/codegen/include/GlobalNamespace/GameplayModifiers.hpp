// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.Utils.INetImmutableSerializable`1
#include "LiteNetLib/Utils/INetImmutableSerializable_1.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: EnabledObstacleType because it is already included!
  // Skipping declaration: SongSpeed because it is already included!
  // Skipping declaration: EnergyType because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataReader
  class NetDataReader;
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: GameplayModifiers
  // [] Offset: FFFFFFFF
  // [PreserveAttribute] Offset: D155B0
  class GameplayModifiers : public ::Il2CppObject/*, public LiteNetLib::Utils::INetImmutableSerializable_1<GlobalNamespace::GameplayModifiers*>*/ {
    public:
    // Nested type: GlobalNamespace::GameplayModifiers::EnabledObstacleType
    struct EnabledObstacleType;
    // Nested type: GlobalNamespace::GameplayModifiers::EnergyType
    struct EnergyType;
    // Nested type: GlobalNamespace::GameplayModifiers::SongSpeed
    struct SongSpeed;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GameplayModifiers/EnabledObstacleType
    // [] Offset: FFFFFFFF
    struct EnabledObstacleType/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: EnabledObstacleType
      constexpr EnabledObstacleType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GameplayModifiers/EnabledObstacleType All
      static constexpr const int All = 0;
      // Get static field: static public GameplayModifiers/EnabledObstacleType All
      static GlobalNamespace::GameplayModifiers::EnabledObstacleType _get_All();
      // Set static field: static public GameplayModifiers/EnabledObstacleType All
      static void _set_All(GlobalNamespace::GameplayModifiers::EnabledObstacleType value);
      // static field const value: static public GameplayModifiers/EnabledObstacleType FullHeightOnly
      static constexpr const int FullHeightOnly = 1;
      // Get static field: static public GameplayModifiers/EnabledObstacleType FullHeightOnly
      static GlobalNamespace::GameplayModifiers::EnabledObstacleType _get_FullHeightOnly();
      // Set static field: static public GameplayModifiers/EnabledObstacleType FullHeightOnly
      static void _set_FullHeightOnly(GlobalNamespace::GameplayModifiers::EnabledObstacleType value);
      // static field const value: static public GameplayModifiers/EnabledObstacleType NoObstacles
      static constexpr const int NoObstacles = 2;
      // Get static field: static public GameplayModifiers/EnabledObstacleType NoObstacles
      static GlobalNamespace::GameplayModifiers::EnabledObstacleType _get_NoObstacles();
      // Set static field: static public GameplayModifiers/EnabledObstacleType NoObstacles
      static void _set_NoObstacles(GlobalNamespace::GameplayModifiers::EnabledObstacleType value);
    }; // GameplayModifiers/EnabledObstacleType
    #pragma pack(pop)
    static check_size<sizeof(GameplayModifiers::EnabledObstacleType), 0 + sizeof(int)> __GlobalNamespace_GameplayModifiers_EnabledObstacleTypeSizeCheck;
    static_assert(sizeof(GameplayModifiers::EnabledObstacleType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GameplayModifiers/EnergyType
    // [] Offset: FFFFFFFF
    struct EnergyType/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: EnergyType
      constexpr EnergyType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GameplayModifiers/EnergyType Bar
      static constexpr const int Bar = 0;
      // Get static field: static public GameplayModifiers/EnergyType Bar
      static GlobalNamespace::GameplayModifiers::EnergyType _get_Bar();
      // Set static field: static public GameplayModifiers/EnergyType Bar
      static void _set_Bar(GlobalNamespace::GameplayModifiers::EnergyType value);
      // static field const value: static public GameplayModifiers/EnergyType Battery
      static constexpr const int Battery = 1;
      // Get static field: static public GameplayModifiers/EnergyType Battery
      static GlobalNamespace::GameplayModifiers::EnergyType _get_Battery();
      // Set static field: static public GameplayModifiers/EnergyType Battery
      static void _set_Battery(GlobalNamespace::GameplayModifiers::EnergyType value);
    }; // GameplayModifiers/EnergyType
    #pragma pack(pop)
    static check_size<sizeof(GameplayModifiers::EnergyType), 0 + sizeof(int)> __GlobalNamespace_GameplayModifiers_EnergyTypeSizeCheck;
    static_assert(sizeof(GameplayModifiers::EnergyType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: GameplayModifiers/SongSpeed
    // [] Offset: FFFFFFFF
    struct SongSpeed/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: SongSpeed
      constexpr SongSpeed(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public GameplayModifiers/SongSpeed Normal
      static constexpr const int Normal = 0;
      // Get static field: static public GameplayModifiers/SongSpeed Normal
      static GlobalNamespace::GameplayModifiers::SongSpeed _get_Normal();
      // Set static field: static public GameplayModifiers/SongSpeed Normal
      static void _set_Normal(GlobalNamespace::GameplayModifiers::SongSpeed value);
      // static field const value: static public GameplayModifiers/SongSpeed Faster
      static constexpr const int Faster = 1;
      // Get static field: static public GameplayModifiers/SongSpeed Faster
      static GlobalNamespace::GameplayModifiers::SongSpeed _get_Faster();
      // Set static field: static public GameplayModifiers/SongSpeed Faster
      static void _set_Faster(GlobalNamespace::GameplayModifiers::SongSpeed value);
      // static field const value: static public GameplayModifiers/SongSpeed Slower
      static constexpr const int Slower = 2;
      // Get static field: static public GameplayModifiers/SongSpeed Slower
      static GlobalNamespace::GameplayModifiers::SongSpeed _get_Slower();
      // Set static field: static public GameplayModifiers/SongSpeed Slower
      static void _set_Slower(GlobalNamespace::GameplayModifiers::SongSpeed value);
    }; // GameplayModifiers/SongSpeed
    #pragma pack(pop)
    static check_size<sizeof(GameplayModifiers::SongSpeed), 0 + sizeof(int)> __GlobalNamespace_GameplayModifiers_SongSpeedSizeCheck;
    static_assert(sizeof(GameplayModifiers::SongSpeed) == 0x4);
    // private GameplayModifiers/EnergyType _energyType
    // Size: 0x4
    // Offset: 0x10
    GlobalNamespace::GameplayModifiers::EnergyType energyType;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayModifiers::EnergyType) == 0x4);
    // private System.Boolean _noFailOn0Energy
    // Size: 0x1
    // Offset: 0x14
    bool noFailOn0Energy;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _demoNoFail
    // Size: 0x1
    // Offset: 0x15
    bool demoNoFail;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _instaFail
    // Size: 0x1
    // Offset: 0x16
    bool instaFail;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _failOnSaberClash
    // Size: 0x1
    // Offset: 0x17
    bool failOnSaberClash;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private GameplayModifiers/EnabledObstacleType _enabledObstacleType
    // Size: 0x4
    // Offset: 0x18
    GlobalNamespace::GameplayModifiers::EnabledObstacleType enabledObstacleType;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayModifiers::EnabledObstacleType) == 0x4);
    // private System.Boolean _demoNoObstacles
    // Size: 0x1
    // Offset: 0x1C
    bool demoNoObstacles;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _fastNotes
    // Size: 0x1
    // Offset: 0x1D
    bool fastNotes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _strictAngles
    // Size: 0x1
    // Offset: 0x1E
    bool strictAngles;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _disappearingArrows
    // Size: 0x1
    // Offset: 0x1F
    bool disappearingArrows;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _ghostNotes
    // Size: 0x1
    // Offset: 0x20
    bool ghostNotes;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _noBombs
    // Size: 0x1
    // Offset: 0x21
    bool noBombs;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: noBombs and: songSpeed
    char __padding11[0x2] = {};
    // private GameplayModifiers/SongSpeed _songSpeed
    // Size: 0x4
    // Offset: 0x24
    GlobalNamespace::GameplayModifiers::SongSpeed songSpeed;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayModifiers::SongSpeed) == 0x4);
    // private System.Boolean _noArrows
    // Size: 0x1
    // Offset: 0x28
    bool noArrows;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: GameplayModifiers
    GameplayModifiers(GlobalNamespace::GameplayModifiers::EnergyType energyType_ = {}, bool noFailOn0Energy_ = {}, bool demoNoFail_ = {}, bool instaFail_ = {}, bool failOnSaberClash_ = {}, GlobalNamespace::GameplayModifiers::EnabledObstacleType enabledObstacleType_ = {}, bool demoNoObstacles_ = {}, bool fastNotes_ = {}, bool strictAngles_ = {}, bool disappearingArrows_ = {}, bool ghostNotes_ = {}, bool noBombs_ = {}, GlobalNamespace::GameplayModifiers::SongSpeed songSpeed_ = {}, bool noArrows_ = {}) noexcept : energyType{energyType_}, noFailOn0Energy{noFailOn0Energy_}, demoNoFail{demoNoFail_}, instaFail{instaFail_}, failOnSaberClash{failOnSaberClash_}, enabledObstacleType{enabledObstacleType_}, demoNoObstacles{demoNoObstacles_}, fastNotes{fastNotes_}, strictAngles{strictAngles_}, disappearingArrows{disappearingArrows_}, ghostNotes{ghostNotes_}, noBombs{noBombs_}, songSpeed{songSpeed_}, noArrows{noArrows_} {}
    // Creating interface conversion operator: operator LiteNetLib::Utils::INetImmutableSerializable_1<GlobalNamespace::GameplayModifiers*>
    operator LiteNetLib::Utils::INetImmutableSerializable_1<GlobalNamespace::GameplayModifiers*>() noexcept {
      return *reinterpret_cast<LiteNetLib::Utils::INetImmutableSerializable_1<GlobalNamespace::GameplayModifiers*>*>(this);
    }
    // public GameplayModifiers/EnergyType get_energyType()
    // Offset: 0x226B9A8
    GlobalNamespace::GameplayModifiers::EnergyType get_energyType();
    // public System.Boolean get_noFailOn0Energy()
    // Offset: 0x226B9B0
    bool get_noFailOn0Energy();
    // public System.Boolean get_demoNoFail()
    // Offset: 0x226B9B8
    bool get_demoNoFail();
    // public System.Boolean get_instaFail()
    // Offset: 0x226B9C0
    bool get_instaFail();
    // public System.Boolean get_failOnSaberClash()
    // Offset: 0x226B9C8
    bool get_failOnSaberClash();
    // public GameplayModifiers/EnabledObstacleType get_enabledObstacleType()
    // Offset: 0x226B9D0
    GlobalNamespace::GameplayModifiers::EnabledObstacleType get_enabledObstacleType();
    // public System.Boolean get_demoNoObstacles()
    // Offset: 0x226B9D8
    bool get_demoNoObstacles();
    // public System.Boolean get_fastNotes()
    // Offset: 0x226B9E0
    bool get_fastNotes();
    // public System.Boolean get_strictAngles()
    // Offset: 0x226B9E8
    bool get_strictAngles();
    // public System.Boolean get_disappearingArrows()
    // Offset: 0x226B9F0
    bool get_disappearingArrows();
    // public System.Boolean get_ghostNotes()
    // Offset: 0x226B9F8
    bool get_ghostNotes();
    // public System.Boolean get_noBombs()
    // Offset: 0x226BA00
    bool get_noBombs();
    // public GameplayModifiers/SongSpeed get_songSpeed()
    // Offset: 0x226BA08
    GlobalNamespace::GameplayModifiers::SongSpeed get_songSpeed();
    // public System.Boolean get_noArrows()
    // Offset: 0x226BA10
    bool get_noArrows();
    // public System.Single get_songSpeedMul()
    // Offset: 0x226BA18
    float get_songSpeedMul();
    // public System.Void .ctor(System.Boolean demoNoFail, System.Boolean demoNoObstacles, GameplayModifiers/EnergyType energyType, System.Boolean noFailOn0Energy, System.Boolean instaFail, System.Boolean failOnSaberClash, GameplayModifiers/EnabledObstacleType enabledObstacleType, System.Boolean noBombs, System.Boolean fastNotes, System.Boolean strictAngles, System.Boolean disappearingArrows, GameplayModifiers/SongSpeed songSpeed, System.Boolean noArrows, System.Boolean ghostNotes)
    // Offset: 0x226BA70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GameplayModifiers* New_ctor(bool demoNoFail, bool demoNoObstacles, GlobalNamespace::GameplayModifiers::EnergyType energyType, bool noFailOn0Energy, bool instaFail, bool failOnSaberClash, GlobalNamespace::GameplayModifiers::EnabledObstacleType enabledObstacleType, bool noBombs, bool fastNotes, bool strictAngles, bool disappearingArrows, GlobalNamespace::GameplayModifiers::SongSpeed songSpeed, bool noArrows, bool ghostNotes) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiers::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GameplayModifiers*, creationType>(demoNoFail, demoNoObstacles, energyType, noFailOn0Energy, instaFail, failOnSaberClash, enabledObstacleType, noBombs, fastNotes, strictAngles, disappearingArrows, songSpeed, noArrows, ghostNotes)));
    }
    // public GameplayModifiers CopyWith(System.Nullable`1<System.Boolean> demoNoFail, System.Nullable`1<System.Boolean> demoNoObstacles, System.Nullable`1<GameplayModifiers/EnergyType> energyType, System.Nullable`1<System.Boolean> noFailOn0Energy, System.Nullable`1<System.Boolean> instaFail, System.Nullable`1<System.Boolean> failOnSaberClash, System.Nullable`1<GameplayModifiers/EnabledObstacleType> enabledObstacleType, System.Nullable`1<System.Boolean> noBombs, System.Nullable`1<System.Boolean> fastNotes, System.Nullable`1<System.Boolean> strictAngles, System.Nullable`1<System.Boolean> disappearingArrows, System.Nullable`1<GameplayModifiers/SongSpeed> songSpeed, System.Nullable`1<System.Boolean> noArrows, System.Nullable`1<System.Boolean> ghostNotes)
    // Offset: 0x226BB70
    GlobalNamespace::GameplayModifiers* CopyWith(System::Nullable_1<bool> demoNoFail, System::Nullable_1<bool> demoNoObstacles, System::Nullable_1<GlobalNamespace::GameplayModifiers::EnergyType> energyType, System::Nullable_1<bool> noFailOn0Energy, System::Nullable_1<bool> instaFail, System::Nullable_1<bool> failOnSaberClash, System::Nullable_1<GlobalNamespace::GameplayModifiers::EnabledObstacleType> enabledObstacleType, System::Nullable_1<bool> noBombs, System::Nullable_1<bool> fastNotes, System::Nullable_1<bool> strictAngles, System::Nullable_1<bool> disappearingArrows, System::Nullable_1<GlobalNamespace::GameplayModifiers::SongSpeed> songSpeed, System::Nullable_1<bool> noArrows, System::Nullable_1<bool> ghostNotes);
    // public System.Boolean IsWithoutModifiers()
    // Offset: 0x226BD84
    bool IsWithoutModifiers();
    // static public GameplayModifiers CreateFromSerializedData(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0x226BF20
    static GlobalNamespace::GameplayModifiers* CreateFromSerializedData(LiteNetLib::Utils::NetDataReader* reader);
    // public System.Void .ctor()
    // Offset: 0x226BA3C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GameplayModifiers* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameplayModifiers::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GameplayModifiers*, creationType>()));
    }
    // public System.Void Serialize(LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0x226BE04
    // Implemented from: LiteNetLib.Utils.INetImmutableSerializable`1
    // Base method: System.Void INetImmutableSerializable_1::Serialize(LiteNetLib.Utils.NetDataWriter writer)
    void Serialize(LiteNetLib::Utils::NetDataWriter* writer);
    // private GameplayModifiers LiteNetLib.Utils.INetImmutableSerializable<GameplayModifiers>.CreateFromSerializedData(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0x226BF18
    // Implemented from: LiteNetLib.Utils.INetImmutableSerializable`1
    // Base method: T INetImmutableSerializable_1::CreateFromSerializedData(LiteNetLib.Utils.NetDataReader reader)
    GlobalNamespace::GameplayModifiers* LiteNetLib_Utils_INetImmutableSerializable_1_CreateFromSerializedData(LiteNetLib::Utils::NetDataReader* reader);
  }; // GameplayModifiers
  #pragma pack(pop)
  static check_size<sizeof(GameplayModifiers), 40 + sizeof(bool)> __GlobalNamespace_GameplayModifiersSizeCheck;
  static_assert(sizeof(GameplayModifiers) == 0x29);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GameplayModifiers*, "", "GameplayModifiers");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GameplayModifiers::EnabledObstacleType, "", "GameplayModifiers/EnabledObstacleType");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GameplayModifiers::EnergyType, "", "GameplayModifiers/EnergyType");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GameplayModifiers::SongSpeed, "", "GameplayModifiers/SongSpeed");
