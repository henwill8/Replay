// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: StateBuffer`3
#include "GlobalNamespace/StateBuffer_3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IStateTable`2<TType, TState>
  template<typename TType, typename TState>
  class IStateTable_2;
  // Skipping declaration: IEquatableByReference`1 because it is already included!
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: INetSerializable
  class INetSerializable;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: ValueType because it is already included!
  // Skipping declaration: IConvertible because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: LocalStateBuffer`3
  // [] Offset: FFFFFFFF
  template<typename TStateTable, typename TType, typename TState>
  class LocalStateBuffer_3 : public GlobalNamespace::StateBuffer_3<TStateTable, TType, TState> {
    public:
    // private StateBuffer`3/TimestampedStateTable<TStateTable,TType,TState> _current
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    typename GlobalNamespace::StateBuffer_3<TStateTable, TType, TState>::TimestampedStateTable current;
    // private readonly System.Single _reliableUpdateFrequency
    // Size: 0x4
    // Offset: 0x0
    float reliableUpdateFrequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private readonly System.Single _unreliableUpdateFrequency
    // Size: 0x4
    // Offset: 0x0
    float unreliableUpdateFrequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private StateBuffer`3/TimestampedStateTable<TStateTable,TType,TState> _lastReliableSerialized
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    typename GlobalNamespace::StateBuffer_3<TStateTable, TType, TState>::TimestampedStateTable lastReliableSerialized;
    // private StateBuffer`3/TimestampedStateTable<TStateTable,TType,TState> _lastUnreliableSerialized
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    typename GlobalNamespace::StateBuffer_3<TStateTable, TType, TState>::TimestampedStateTable lastUnreliableSerialized;
    // private System.Boolean _dirty
    // Size: 0x1
    // Offset: 0x0
    bool dirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: LocalStateBuffer_3
    LocalStateBuffer_3(typename GlobalNamespace::StateBuffer_3<TStateTable, TType, TState>::TimestampedStateTable current_ = {}, float reliableUpdateFrequency_ = {}, float unreliableUpdateFrequency_ = {}, typename GlobalNamespace::StateBuffer_3<TStateTable, TType, TState>::TimestampedStateTable lastReliableSerialized_ = {}, typename GlobalNamespace::StateBuffer_3<TStateTable, TType, TState>::TimestampedStateTable lastUnreliableSerialized_ = {}, bool dirty_ = {}) noexcept : current{current_}, reliableUpdateFrequency{reliableUpdateFrequency_}, unreliableUpdateFrequency{unreliableUpdateFrequency_}, lastReliableSerialized{lastReliableSerialized_}, lastUnreliableSerialized{lastUnreliableSerialized_}, dirty{dirty_} {}
    // public System.Void .ctor(System.Single reliableUpdateFrequency, System.Single unreliableUpdateFrequency, System.Int32 size, StateBuffer`3/InterpolationDelegate<TStateTable,TType,TState> interpolator, StateBuffer`3/SmoothingDelegate<TStateTable,TType,TState> smoother)
    // Offset: 0xFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocalStateBuffer_3<TStateTable, TType, TState>* New_ctor(float reliableUpdateFrequency, float unreliableUpdateFrequency, int size, typename GlobalNamespace::StateBuffer_3<TStateTable, TType, TState>::InterpolationDelegate* interpolator, typename GlobalNamespace::StateBuffer_3<TStateTable, TType, TState>::SmoothingDelegate* smoother) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalStateBuffer_3::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocalStateBuffer_3<TStateTable, TType, TState>*, creationType>(reliableUpdateFrequency, unreliableUpdateFrequency, size, interpolator, smoother)));
    }
    // public System.Void MarkDirty()
    // Offset: 0xFFFFFFFF
    void MarkDirty() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalStateBuffer_3::MarkDirty");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "MarkDirty", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
    }
    // public System.Boolean TryGetSerialized(System.Boolean reliable, out TStateTable state)
    // Offset: 0xFFFFFFFF
    bool TryGetSerialized(bool reliable, TStateTable& state) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalStateBuffer_3::TryGetSerialized");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "TryGetSerialized", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(reliable, state)));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, reliable, state);
    }
    // public System.Void SetTime(System.Single time)
    // Offset: 0xFFFFFFFF
    void SetTime(float time) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalStateBuffer_3::SetTime");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetTime", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(time)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, time);
    }
    // public System.Void SetState(TType type, TState state)
    // Offset: 0xFFFFFFFF
    void SetState(TType type, TState state) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalStateBuffer_3::SetState");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "SetState", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(type, state)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, type, state);
    }
    // public TState GetState(TType type)
    // Offset: 0xFFFFFFFF
    TState GetState(TType type) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalStateBuffer_3::GetState");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetState", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(type)));
      return ::il2cpp_utils::RunMethodThrow<TState, false>(this, ___internal__method, type);
    }
  }; // LocalStateBuffer`3
  // Could not write size check! Type: LocalStateBuffer`3 is generic, or has no fields that are valid for size checks!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(GlobalNamespace::LocalStateBuffer_3, "", "LocalStateBuffer`3");
