// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: SteamVR_TrackedObject/EIndex
#include "GlobalNamespace/SteamVR_TrackedObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: SteamVR_Frustum
  // [] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: CFA8B8
  // [RequireComponent] Offset: CFA8B8
  class SteamVR_Frustum : public UnityEngine::MonoBehaviour {
    public:
    // public SteamVR_TrackedObject/EIndex index
    // Size: 0x4
    // Offset: 0x18
    GlobalNamespace::SteamVR_TrackedObject::EIndex index;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SteamVR_TrackedObject::EIndex) == 0x4);
    // public System.Single fovLeft
    // Size: 0x4
    // Offset: 0x1C
    float fovLeft;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single fovRight
    // Size: 0x4
    // Offset: 0x20
    float fovRight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single fovTop
    // Size: 0x4
    // Offset: 0x24
    float fovTop;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single fovBottom
    // Size: 0x4
    // Offset: 0x28
    float fovBottom;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single nearZ
    // Size: 0x4
    // Offset: 0x2C
    float nearZ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single farZ
    // Size: 0x4
    // Offset: 0x30
    float farZ;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: SteamVR_Frustum
    SteamVR_Frustum(GlobalNamespace::SteamVR_TrackedObject::EIndex index_ = {}, float fovLeft_ = {}, float fovRight_ = {}, float fovTop_ = {}, float fovBottom_ = {}, float nearZ_ = {}, float farZ_ = {}) noexcept : index{index_}, fovLeft{fovLeft_}, fovRight{fovRight_}, fovTop{fovTop_}, fovBottom{fovBottom_}, nearZ{nearZ_}, farZ{farZ_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void UpdateModel()
    // Offset: 0x1291074
    void UpdateModel();
    // private System.Void OnDeviceConnected(System.Int32 i, System.Boolean connected)
    // Offset: 0x129185C
    void OnDeviceConnected(int i, bool connected);
    // private System.Void OnEnable()
    // Offset: 0x1291A18
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x1291B00
    void OnDisable();
    // public System.Void .ctor()
    // Offset: 0x1291BE8
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SteamVR_Frustum* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Frustum::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SteamVR_Frustum*, creationType>()));
    }
  }; // SteamVR_Frustum
  #pragma pack(pop)
  static check_size<sizeof(SteamVR_Frustum), 48 + sizeof(float)> __GlobalNamespace_SteamVR_FrustumSizeCheck;
  static_assert(sizeof(SteamVR_Frustum) == 0x34);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SteamVR_Frustum*, "", "SteamVR_Frustum");
