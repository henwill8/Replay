// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioLowPassFilter
  class AudioLowPassFilter;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: MainAudioEffects
  // [] Offset: FFFFFFFF
  class MainAudioEffects : public UnityEngine::MonoBehaviour {
    public:
    // private UnityEngine.AudioLowPassFilter _audioLowPassFilter
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::AudioLowPassFilter* audioLowPassFilter;
    // Field size check
    static_assert(sizeof(UnityEngine::AudioLowPassFilter*) == 0x8);
    // private System.Single _smooth
    // Size: 0x4
    // Offset: 0x20
    float smooth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _targetFrequency
    // Size: 0x4
    // Offset: 0x24
    float targetFrequency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: MainAudioEffects
    MainAudioEffects(UnityEngine::AudioLowPassFilter* audioLowPassFilter_ = {}, float smooth_ = {}, float targetFrequency_ = {}) noexcept : audioLowPassFilter{audioLowPassFilter_}, smooth{smooth_}, targetFrequency{targetFrequency_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Int32 kDefaultCutoffFrequency
    static constexpr const int kDefaultCutoffFrequency = 22000;
    // Get static field: static private System.Int32 kDefaultCutoffFrequency
    static int _get_kDefaultCutoffFrequency();
    // Set static field: static private System.Int32 kDefaultCutoffFrequency
    static void _set_kDefaultCutoffFrequency(int value);
    // static field const value: static private System.Int32 kLowPassCutoffFrequency
    static constexpr const int kLowPassCutoffFrequency = 150;
    // Get static field: static private System.Int32 kLowPassCutoffFrequency
    static int _get_kLowPassCutoffFrequency();
    // Set static field: static private System.Int32 kLowPassCutoffFrequency
    static void _set_kLowPassCutoffFrequency(int value);
    // protected System.Void Start()
    // Offset: 0x105C0AC
    void Start();
    // protected System.Void LateUpdate()
    // Offset: 0x105C0EC
    void LateUpdate();
    // public System.Void ResumeNormalSound()
    // Offset: 0x105C1F8
    void ResumeNormalSound();
    // public System.Void TriggerLowPass()
    // Offset: 0x105C22C
    void TriggerLowPass();
    // public System.Void .ctor()
    // Offset: 0x105C274
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MainAudioEffects* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MainAudioEffects::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MainAudioEffects*, creationType>()));
    }
  }; // MainAudioEffects
  #pragma pack(pop)
  static check_size<sizeof(MainAudioEffects), 36 + sizeof(float)> __GlobalNamespace_MainAudioEffectsSizeCheck;
  static_assert(sizeof(MainAudioEffects) == 0x28);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MainAudioEffects*, "", "MainAudioEffects");
