// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.TableCell
#include "HMUI/TableCell.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: TubeBloomPrePassLight
  class TubeBloomPrePassLight;
  // Forward declaring type: MultiplayerResultsAvatarController
  class MultiplayerResultsAvatarController;
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
  // Forward declaring type: LevelCompletionResults
  class LevelCompletionResults;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Image
  class Image;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: CanvasGroup
  class CanvasGroup;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: MultiplayerResultsTableCell
  class MultiplayerResultsTableCell : public HMUI::TableCell {
    public:
    // private TMPro.TextMeshProUGUI _positionText
    // Offset: 0x50
    TMPro::TextMeshProUGUI* positionText;
    // private TMPro.TextMeshProUGUI _nameText
    // Offset: 0x58
    TMPro::TextMeshProUGUI* nameText;
    // private TMPro.TextMeshProUGUI _scoreText
    // Offset: 0x60
    TMPro::TextMeshProUGUI* scoreText;
    // private TMPro.TextMeshProUGUI _rankText
    // Offset: 0x68
    TMPro::TextMeshProUGUI* rankText;
    // private TubeBloomPrePassLight[] _lights
    // Offset: 0x70
    ::Array<GlobalNamespace::TubeBloomPrePassLight*>* lights;
    // private UnityEngine.UI.Image _backgroundImage
    // Offset: 0x78
    UnityEngine::UI::Image* backgroundImage;
    // private UnityEngine.CanvasGroup _canvasGroup
    // Offset: 0x80
    UnityEngine::CanvasGroup* canvasGroup;
    // private MultiplayerResultsAvatarController _multiplayerResultsAvatarController
    // Offset: 0x88
    GlobalNamespace::MultiplayerResultsAvatarController* multiplayerResultsAvatarController;
    // private System.Single _avatarScale
    // Offset: 0x90
    float avatarScale;
    // private UnityEngine.Color _normalSecondPlayerColor
    // Offset: 0x94
    UnityEngine::Color normalSecondPlayerColor;
    // private UnityEngine.Color _normalLastPlayerColor
    // Offset: 0xA4
    UnityEngine::Color normalLastPlayerColor;
    // private UnityEngine.Color _localPlayerColor
    // Offset: 0xB4
    UnityEngine::Color localPlayerColor;
    // private UnityEngine.Color _winnerColor
    // Offset: 0xC4
    UnityEngine::Color winnerColor;
    // private UnityEngine.Color _lightColor
    // Offset: 0xD4
    UnityEngine::Color lightColor;
    // public System.Void set_alpha(System.Single value)
    // Offset: 0xF7DA48
    void set_alpha(float value);
    // public System.Void SetData(IConnectedPlayer connectedPlayer, System.Int32 position, System.String playerName, LevelCompletionResults levelCompletionResults, System.Boolean isLocalPlayer, System.Int32 numberOfPlayers)
    // Offset: 0xF7DB04
    void SetData(GlobalNamespace::IConnectedPlayer* connectedPlayer, int position, ::Il2CppString* playerName, GlobalNamespace::LevelCompletionResults* levelCompletionResults, bool isLocalPlayer, int numberOfPlayers);
    // public System.Void .ctor()
    // Offset: 0xF7DE9C
    // Implemented from: HMUI.TableCell
    // Base method: System.Void TableCell::.ctor()
    // Base method: System.Void SelectableCell::.ctor()
    // Base method: System.Void Interactable::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static MultiplayerResultsTableCell* New_ctor();
  }; // MultiplayerResultsTableCell
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerResultsTableCell*, "", "MultiplayerResultsTableCell");
#pragma pack(pop)
