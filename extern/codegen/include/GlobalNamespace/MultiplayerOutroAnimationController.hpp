// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerScoreRingManager
  class MultiplayerScoreRingManager;
  // Forward declaring type: MultiplayerResultsTableView
  class MultiplayerResultsTableView;
  // Forward declaring type: MultiplayerPlayersManager
  class MultiplayerPlayersManager;
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: LevelCompletionResults
  class LevelCompletionResults;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerOutroAnimationController
  // [] Offset: FFFFFFFF
  class MultiplayerOutroAnimationController : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::MultiplayerOutroAnimationController::$PlayOutroAnimation$d__9
    class $PlayOutroAnimation$d__9;
    // Nested type: GlobalNamespace::MultiplayerOutroAnimationController::$PlayBigAvatarHideSfxClip$d__10
    class $PlayBigAvatarHideSfxClip$d__10;
    // private System.Single _startDelay
    // Size: 0x4
    // Offset: 0x18
    float startDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _endDuration
    // Size: 0x4
    // Offset: 0x1C
    float endDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [SpaceAttribute] Offset: 0xD3C4A0
    // private MultiplayerScoreRingManager _multiplayerScoreRingManager
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::MultiplayerScoreRingManager* multiplayerScoreRingManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerScoreRingManager*) == 0x8);
    // private MultiplayerResultsTableView _resultsTableView
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::MultiplayerResultsTableView* resultsTableView;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerResultsTableView*) == 0x8);
    // private UnityEngine.AudioSource _outroSfxAudioSource
    // Size: 0x8
    // Offset: 0x30
    UnityEngine::AudioSource* outroSfxAudioSource;
    // Field size check
    static_assert(sizeof(UnityEngine::AudioSource*) == 0x8);
    // [HeaderAttribute] Offset: 0xD3C4F8
    // private UnityEngine.AudioClip _levelFinishedAudioClip
    // Size: 0x8
    // Offset: 0x38
    UnityEngine::AudioClip* levelFinishedAudioClip;
    // Field size check
    static_assert(sizeof(UnityEngine::AudioClip*) == 0x8);
    // [InjectAttribute] Offset: 0xD3C544
    // private readonly MultiplayerPlayersManager _multiplayerPlayersManager
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::MultiplayerPlayersManager* multiplayerPlayersManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerPlayersManager*) == 0x8);
    // [InjectAttribute] Offset: 0xD3C554
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Size: 0x8
    // Offset: 0x48
    GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMultiplayerSessionManager*) == 0x8);
    // Creating value type constructor for type: MultiplayerOutroAnimationController
    MultiplayerOutroAnimationController(float startDelay_ = {}, float endDuration_ = {}, GlobalNamespace::MultiplayerScoreRingManager* multiplayerScoreRingManager_ = {}, GlobalNamespace::MultiplayerResultsTableView* resultsTableView_ = {}, UnityEngine::AudioSource* outroSfxAudioSource_ = {}, UnityEngine::AudioClip* levelFinishedAudioClip_ = {}, GlobalNamespace::MultiplayerPlayersManager* multiplayerPlayersManager_ = {}, GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager_ = {}) noexcept : startDelay{startDelay_}, endDuration{endDuration_}, multiplayerScoreRingManager{multiplayerScoreRingManager_}, resultsTableView{resultsTableView_}, outroSfxAudioSource{outroSfxAudioSource_}, levelFinishedAudioClip{levelFinishedAudioClip_}, multiplayerPlayersManager{multiplayerPlayersManager_}, multiplayerSessionManager{multiplayerSessionManager_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void AnimateOutro(LevelCompletionResults localPlayerResults, System.Collections.Generic.Dictionary`2<System.String,LevelCompletionResults> otherPlayersResults, System.Action onCompleted)
    // Offset: 0xFEB908
    void AnimateOutro(GlobalNamespace::LevelCompletionResults* localPlayerResults, System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::LevelCompletionResults*>* otherPlayersResults, System::Action* onCompleted);
    // private System.Collections.IEnumerator PlayOutroAnimation(LevelCompletionResults localPlayerLevelCompletionResults, System.Collections.Generic.Dictionary`2<System.String,LevelCompletionResults> otherPlayersLevelCompletionResults, System.Action onCompleted)
    // Offset: 0xFEB934
    System::Collections::IEnumerator* PlayOutroAnimation(GlobalNamespace::LevelCompletionResults* localPlayerLevelCompletionResults, System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::LevelCompletionResults*>* otherPlayersLevelCompletionResults, System::Action* onCompleted);
    // private System.Collections.IEnumerator PlayBigAvatarHideSfxClip(System.Single delay)
    // Offset: 0xFEBA28
    System::Collections::IEnumerator* PlayBigAvatarHideSfxClip(float delay);
    // private System.Void PlayMusicPreview(System.Single maxDuration)
    // Offset: 0xFEBAE0
    void PlayMusicPreview(float maxDuration);
    // public System.Void .ctor()
    // Offset: 0xFEBBB8
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerOutroAnimationController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerOutroAnimationController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerOutroAnimationController*, creationType>()));
    }
  }; // MultiplayerOutroAnimationController
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerOutroAnimationController), 72 + sizeof(GlobalNamespace::IMultiplayerSessionManager*)> __GlobalNamespace_MultiplayerOutroAnimationControllerSizeCheck;
  static_assert(sizeof(MultiplayerOutroAnimationController) == 0x50);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerOutroAnimationController*, "", "MultiplayerOutroAnimationController");
