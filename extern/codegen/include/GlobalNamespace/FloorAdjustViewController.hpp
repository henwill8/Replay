// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: Vector3SO
  class Vector3SO;
  // Forward declaring type: IVRPlatformHelper
  class IVRPlatformHelper;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Button
  class Button;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x9C
  #pragma pack(push, 1)
  // Autogenerated type: FloorAdjustViewController
  // [] Offset: FFFFFFFF
  class FloorAdjustViewController : public HMUI::ViewController {
    public:
    // private Vector3SO _roomCenter
    // Size: 0x8
    // Offset: 0x70
    GlobalNamespace::Vector3SO* roomCenter;
    // Field size check
    static_assert(sizeof(GlobalNamespace::Vector3SO*) == 0x8);
    // [SpaceAttribute] Offset: 0xD419D4
    // private UnityEngine.UI.Button _yIncButton
    // Size: 0x8
    // Offset: 0x78
    UnityEngine::UI::Button* yIncButton;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Button*) == 0x8);
    // private UnityEngine.UI.Button _yDecButton
    // Size: 0x8
    // Offset: 0x80
    UnityEngine::UI::Button* yDecButton;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Button*) == 0x8);
    // private TMPro.TextMeshProUGUI _playerHeightText
    // Size: 0x8
    // Offset: 0x88
    TMPro::TextMeshProUGUI* playerHeightText;
    // Field size check
    static_assert(sizeof(TMPro::TextMeshProUGUI*) == 0x8);
    // [InjectAttribute] Offset: 0xD41A2C
    // private IVRPlatformHelper _vrPlatformHelper
    // Size: 0x8
    // Offset: 0x90
    GlobalNamespace::IVRPlatformHelper* vrPlatformHelper;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IVRPlatformHelper*) == 0x8);
    // private System.Single _playerHeight
    // Size: 0x4
    // Offset: 0x98
    float playerHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: FloorAdjustViewController
    FloorAdjustViewController(GlobalNamespace::Vector3SO* roomCenter_ = {}, UnityEngine::UI::Button* yIncButton_ = {}, UnityEngine::UI::Button* yDecButton_ = {}, TMPro::TextMeshProUGUI* playerHeightText_ = {}, GlobalNamespace::IVRPlatformHelper* vrPlatformHelper_ = {}, float playerHeight_ = {}) noexcept : roomCenter{roomCenter_}, yIncButton{yIncButton_}, yDecButton{yDecButton_}, playerHeightText{playerHeightText_}, vrPlatformHelper{vrPlatformHelper_}, playerHeight{playerHeight_} {}
    // static field const value: static private System.Single kMoveStep
    static constexpr const float kMoveStep = 0.05;
    // Get static field: static private System.Single kMoveStep
    static float _get_kMoveStep();
    // Set static field: static private System.Single kMoveStep
    static void _set_kMoveStep(float value);
    // static field const value: static private System.Single kMinPlayerHeight
    static constexpr const float kMinPlayerHeight = 0.5;
    // Get static field: static private System.Single kMinPlayerHeight
    static float _get_kMinPlayerHeight();
    // Set static field: static private System.Single kMinPlayerHeight
    static void _set_kMinPlayerHeight(float value);
    // static field const value: static private System.Single kMaxPlayerHeight
    static constexpr const float kMaxPlayerHeight = 3;
    // Get static field: static private System.Single kMaxPlayerHeight
    static float _get_kMaxPlayerHeight();
    // Set static field: static private System.Single kMaxPlayerHeight
    static void _set_kMaxPlayerHeight(float value);
    // protected System.Void Update()
    // Offset: 0xF2E0B8
    void Update();
    // private System.Void <DidActivate>b__9_0()
    // Offset: 0xF2E2D8
    void $DidActivate$b__9_0();
    // private System.Void <DidActivate>b__9_1()
    // Offset: 0xF2E350
    void $DidActivate$b__9_1();
    // protected override System.Void DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0xF2DFBC
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
    // public System.Void .ctor()
    // Offset: 0xF2E2D0
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FloorAdjustViewController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FloorAdjustViewController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FloorAdjustViewController*, creationType>()));
    }
  }; // FloorAdjustViewController
  #pragma pack(pop)
  static check_size<sizeof(FloorAdjustViewController), 152 + sizeof(float)> __GlobalNamespace_FloorAdjustViewControllerSizeCheck;
  static_assert(sizeof(FloorAdjustViewController) == 0x9C);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::FloorAdjustViewController*, "", "FloorAdjustViewController");
