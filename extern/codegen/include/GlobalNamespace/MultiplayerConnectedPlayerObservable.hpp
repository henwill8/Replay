// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IMultiplayerObservable
#include "GlobalNamespace/IMultiplayerObservable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerConnectedPlayerObservable
  // [] Offset: FFFFFFFF
  class MultiplayerConnectedPlayerObservable : public ::Il2CppObject/*, public GlobalNamespace::IMultiplayerObservable*/ {
    public:
    // private readonly IConnectedPlayer _connectedPlayer
    // Size: 0x8
    // Offset: 0x10
    GlobalNamespace::IConnectedPlayer* connectedPlayer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IConnectedPlayer*) == 0x8);
    // Creating value type constructor for type: MultiplayerConnectedPlayerObservable
    MultiplayerConnectedPlayerObservable(GlobalNamespace::IConnectedPlayer* connectedPlayer_ = {}) noexcept : connectedPlayer{connectedPlayer_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IMultiplayerObservable
    operator GlobalNamespace::IMultiplayerObservable() noexcept {
      return *reinterpret_cast<GlobalNamespace::IMultiplayerObservable*>(this);
    }
    // Creating conversion operator: operator GlobalNamespace::IConnectedPlayer*
    constexpr operator GlobalNamespace::IConnectedPlayer*() const noexcept {
      return connectedPlayer;
    }
    // public System.Void .ctor(IConnectedPlayer connectedPlayer)
    // Offset: 0x101CDC0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerConnectedPlayerObservable* New_ctor(GlobalNamespace::IConnectedPlayer* connectedPlayer) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerObservable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerConnectedPlayerObservable*, creationType>(connectedPlayer)));
    }
    // public System.Single get_offsetSyncTime()
    // Offset: 0x101CDF4
    // Implemented from: IMultiplayerObservable
    // Base method: System.Single IMultiplayerObservable::get_offsetSyncTime()
    float get_offsetSyncTime();
    // public System.Boolean get_isFailed()
    // Offset: 0x101CEA8
    // Implemented from: IMultiplayerObservable
    // Base method: System.Boolean IMultiplayerObservable::get_isFailed()
    bool get_isFailed();
  }; // MultiplayerConnectedPlayerObservable
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerConnectedPlayerObservable), 16 + sizeof(GlobalNamespace::IConnectedPlayer*)> __GlobalNamespace_MultiplayerConnectedPlayerObservableSizeCheck;
  static_assert(sizeof(MultiplayerConnectedPlayerObservable) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerConnectedPlayerObservable*, "", "MultiplayerConnectedPlayerObservable");
