// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NoteDebrisSpawner
  class NoteDebrisSpawner;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: NoteDebrisTester
  // [] Offset: FFFFFFFF
  class NoteDebrisTester : public UnityEngine::MonoBehaviour {
    public:
    // private System.Single _saberSpeed
    // Size: 0x4
    // Offset: 0x18
    float saberSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 _cutDir
    // Size: 0xC
    // Offset: 0x1C
    UnityEngine::Vector3 cutDir;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _cutNormal
    // Size: 0xC
    // Offset: 0x28
    UnityEngine::Vector3 cutNormal;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _cutPoint
    // Size: 0xC
    // Offset: 0x34
    UnityEngine::Vector3 cutPoint;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private System.Single _durationBase
    // Size: 0x4
    // Offset: 0x40
    float durationBase;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 _moveVec
    // Size: 0xC
    // Offset: 0x44
    UnityEngine::Vector3 moveVec;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [SpaceAttribute] Offset: 0xD32B04
    // private NoteDebrisSpawner _noteDebrisSpawner
    // Size: 0x8
    // Offset: 0x50
    GlobalNamespace::NoteDebrisSpawner* noteDebrisSpawner;
    // Field size check
    static_assert(sizeof(GlobalNamespace::NoteDebrisSpawner*) == 0x8);
    // Creating value type constructor for type: NoteDebrisTester
    NoteDebrisTester(float saberSpeed_ = {}, UnityEngine::Vector3 cutDir_ = {}, UnityEngine::Vector3 cutNormal_ = {}, UnityEngine::Vector3 cutPoint_ = {}, float durationBase_ = {}, UnityEngine::Vector3 moveVec_ = {}, GlobalNamespace::NoteDebrisSpawner* noteDebrisSpawner_ = {}) noexcept : saberSpeed{saberSpeed_}, cutDir{cutDir_}, cutNormal{cutNormal_}, cutPoint{cutPoint_}, durationBase{durationBase_}, moveVec{moveVec_}, noteDebrisSpawner{noteDebrisSpawner_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void Update()
    // Offset: 0xF94674
    void Update();
    // public System.Void .ctor()
    // Offset: 0xF948E4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoteDebrisTester* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebrisTester::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoteDebrisTester*, creationType>()));
    }
  }; // NoteDebrisTester
  #pragma pack(pop)
  static check_size<sizeof(NoteDebrisTester), 80 + sizeof(GlobalNamespace::NoteDebrisSpawner*)> __GlobalNamespace_NoteDebrisTesterSizeCheck;
  static_assert(sizeof(NoteDebrisTester) == 0x58);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::NoteDebrisTester*, "", "NoteDebrisTester");
