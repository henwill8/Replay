// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.ParticleSystem/EmitParams
#include "UnityEngine/ParticleSystem_EmitParams.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: ParticleSystem because it is already included!
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xAF
  #pragma pack(push, 1)
  // Autogenerated type: NoteTrailParticleSystem
  // [] Offset: FFFFFFFF
  class NoteTrailParticleSystem : public UnityEngine::MonoBehaviour {
    public:
    // private UnityEngine.ParticleSystem _particleSystem
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::ParticleSystem* particleSystem;
    // Field size check
    static_assert(sizeof(UnityEngine::ParticleSystem*) == 0x8);
    // private UnityEngine.ParticleSystem/EmitParams _emitParams
    // Size: 0x8F
    // Offset: 0x20
    UnityEngine::ParticleSystem::EmitParams emitParams;
    // Field size check
    static_assert(sizeof(UnityEngine::ParticleSystem::EmitParams) == 0x8F);
    // Creating value type constructor for type: NoteTrailParticleSystem
    NoteTrailParticleSystem(UnityEngine::ParticleSystem* particleSystem_ = {}, UnityEngine::ParticleSystem::EmitParams emitParams_ = {}) noexcept : particleSystem{particleSystem_}, emitParams{emitParams_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void Awake()
    // Offset: 0x10F3E9C
    void Awake();
    // public System.Void Emit(UnityEngine.Vector3 startPos, UnityEngine.Vector3 endPos, System.Int32 count)
    // Offset: 0x10F3D18
    void Emit(UnityEngine::Vector3 startPos, UnityEngine::Vector3 endPos, int count);
    // public System.Void .ctor()
    // Offset: 0x10F3EAC
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoteTrailParticleSystem* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteTrailParticleSystem::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoteTrailParticleSystem*, creationType>()));
    }
  }; // NoteTrailParticleSystem
  #pragma pack(pop)
  static check_size<sizeof(NoteTrailParticleSystem), 32 + sizeof(UnityEngine::ParticleSystem::EmitParams)> __GlobalNamespace_NoteTrailParticleSystemSizeCheck;
  static_assert(sizeof(NoteTrailParticleSystem) == 0xAF);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::NoteTrailParticleSystem*, "", "NoteTrailParticleSystem");
