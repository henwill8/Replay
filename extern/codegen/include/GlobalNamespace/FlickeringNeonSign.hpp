// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: TubeBloomPrePassLight
  class TubeBloomPrePassLight;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: SpriteRenderer
  class SpriteRenderer;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: FlickeringNeonSign
  // [] Offset: FFFFFFFF
  class FlickeringNeonSign : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::FlickeringNeonSign::$FlickeringCoroutine$d__12
    class $FlickeringCoroutine$d__12;
    // private UnityEngine.SpriteRenderer _flickeringSprite
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::SpriteRenderer* flickeringSprite;
    // Field size check
    static_assert(sizeof(UnityEngine::SpriteRenderer*) == 0x8);
    // private TubeBloomPrePassLight _light
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::TubeBloomPrePassLight* light;
    // Field size check
    static_assert(sizeof(GlobalNamespace::TubeBloomPrePassLight*) == 0x8);
    // private System.Single _minOnDelay
    // Size: 0x4
    // Offset: 0x28
    float minOnDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _maxOnDelay
    // Size: 0x4
    // Offset: 0x2C
    float maxOnDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _minOffDelay
    // Size: 0x4
    // Offset: 0x30
    float minOffDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _maxOffDelay
    // Size: 0x4
    // Offset: 0x34
    float maxOffDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Color _spriteOnColor
    // Size: 0x10
    // Offset: 0x38
    UnityEngine::Color spriteOnColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _lightOnColor
    // Size: 0x10
    // Offset: 0x48
    UnityEngine::Color lightOnColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // private UnityEngine.Material _onMaterial
    // Size: 0x8
    // Offset: 0x58
    UnityEngine::Material* onMaterial;
    // Field size check
    static_assert(sizeof(UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material _offMaterial
    // Size: 0x8
    // Offset: 0x60
    UnityEngine::Material* offMaterial;
    // Field size check
    static_assert(sizeof(UnityEngine::Material*) == 0x8);
    // Creating value type constructor for type: FlickeringNeonSign
    FlickeringNeonSign(UnityEngine::SpriteRenderer* flickeringSprite_ = {}, GlobalNamespace::TubeBloomPrePassLight* light_ = {}, float minOnDelay_ = {}, float maxOnDelay_ = {}, float minOffDelay_ = {}, float maxOffDelay_ = {}, UnityEngine::Color spriteOnColor_ = {}, UnityEngine::Color lightOnColor_ = {}, UnityEngine::Material* onMaterial_ = {}, UnityEngine::Material* offMaterial_ = {}) noexcept : flickeringSprite{flickeringSprite_}, light{light_}, minOnDelay{minOnDelay_}, maxOnDelay{maxOnDelay_}, minOffDelay{minOffDelay_}, maxOffDelay{maxOffDelay_}, spriteOnColor{spriteOnColor_}, lightOnColor{lightOnColor_}, onMaterial{onMaterial_}, offMaterial{offMaterial_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void Start()
    // Offset: 0xF2DC28
    void Start();
    // protected System.Void OnEnable()
    // Offset: 0xF2DC70
    void OnEnable();
    // private System.Collections.IEnumerator FlickeringCoroutine()
    // Offset: 0xF2DC9C
    System::Collections::IEnumerator* FlickeringCoroutine();
    // private System.Void SetOn(System.Boolean on)
    // Offset: 0xF2DD44
    void SetOn(bool on);
    // public System.Void .ctor()
    // Offset: 0xF2DDF0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FlickeringNeonSign* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlickeringNeonSign::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FlickeringNeonSign*, creationType>()));
    }
  }; // FlickeringNeonSign
  #pragma pack(pop)
  static check_size<sizeof(FlickeringNeonSign), 96 + sizeof(UnityEngine::Material*)> __GlobalNamespace_FlickeringNeonSignSizeCheck;
  static_assert(sizeof(FlickeringNeonSign) == 0x68);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::FlickeringNeonSign*, "", "FlickeringNeonSign");
