// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerIntroCountdownTextController
  class MultiplayerIntroCountdownTextController;
  // Forward declaring type: MultiplayerOffsetPositionByLocalPlayerPosition
  class MultiplayerOffsetPositionByLocalPlayerPosition;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
  // Forward declaring type: AudioSource
  class AudioSource;
}
// Forward declaring namespace: Tweening
namespace Tweening {
  // Forward declaring type: TweeningManager
  class TweeningManager;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerIntroCountdown
  // [] Offset: FFFFFFFF
  class MultiplayerIntroCountdown : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::MultiplayerIntroCountdown::$CountdownRoutine$d__23
    class $CountdownRoutine$d__23;
    // Nested type: GlobalNamespace::MultiplayerIntroCountdown::$PlayDelayed$d__24
    class $PlayDelayed$d__24;
    // Nested type: GlobalNamespace::MultiplayerIntroCountdown::$$c__DisplayClass25_0
    class $$c__DisplayClass25_0;
    // Nested type: GlobalNamespace::MultiplayerIntroCountdown::$PhaseRoutine$d__25
    class $PhaseRoutine$d__25;
    // private System.Single _textAppearDuration
    // Size: 0x4
    // Offset: 0x18
    float textAppearDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _textDisappearDuration
    // Size: 0x4
    // Offset: 0x1C
    float textDisappearDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _goDisappearDuration
    // Size: 0x4
    // Offset: 0x20
    float goDisappearDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _partsDistance
    // Size: 0x4
    // Offset: 0x24
    float partsDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3 _startLocalPosition
    // Size: 0xC
    // Offset: 0x28
    UnityEngine::Vector3 startLocalPosition;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _targetLocalPosition
    // Size: 0xC
    // Offset: 0x34
    UnityEngine::Vector3 targetLocalPosition;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [SpaceAttribute] Offset: 0xD3C258
    // private UnityEngine.AudioClip _readyClip
    // Size: 0x8
    // Offset: 0x40
    UnityEngine::AudioClip* readyClip;
    // Field size check
    static_assert(sizeof(UnityEngine::AudioClip*) == 0x8);
    // private UnityEngine.AudioClip _setClip
    // Size: 0x8
    // Offset: 0x48
    UnityEngine::AudioClip* setClip;
    // Field size check
    static_assert(sizeof(UnityEngine::AudioClip*) == 0x8);
    // private UnityEngine.AudioClip _goClip
    // Size: 0x8
    // Offset: 0x50
    UnityEngine::AudioClip* goClip;
    // Field size check
    static_assert(sizeof(UnityEngine::AudioClip*) == 0x8);
    // private UnityEngine.AudioClip _buildUpClip
    // Size: 0x8
    // Offset: 0x58
    UnityEngine::AudioClip* buildUpClip;
    // Field size check
    static_assert(sizeof(UnityEngine::AudioClip*) == 0x8);
    // [SpaceAttribute] Offset: 0xD3C2C0
    // private MultiplayerIntroCountdownTextController _textController0
    // Size: 0x8
    // Offset: 0x60
    GlobalNamespace::MultiplayerIntroCountdownTextController* textController0;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerIntroCountdownTextController*) == 0x8);
    // private MultiplayerIntroCountdownTextController _textController1
    // Size: 0x8
    // Offset: 0x68
    GlobalNamespace::MultiplayerIntroCountdownTextController* textController1;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerIntroCountdownTextController*) == 0x8);
    // private UnityEngine.AudioSource _audioSource
    // Size: 0x8
    // Offset: 0x70
    UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(UnityEngine::AudioSource*) == 0x8);
    // [SpaceAttribute] Offset: 0xD3C318
    // private MultiplayerOffsetPositionByLocalPlayerPosition _multiplayerOffsetByLocalPlayerPosition
    // Size: 0x8
    // Offset: 0x78
    GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition* multiplayerOffsetByLocalPlayerPosition;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition*) == 0x8);
    // [InjectAttribute] Offset: 0xD3C350
    // private readonly Tweening.TweeningManager _tweeningManager
    // Size: 0x8
    // Offset: 0x80
    Tweening::TweeningManager* tweeningManager;
    // Field size check
    static_assert(sizeof(Tweening::TweeningManager*) == 0x8);
    // private MultiplayerIntroCountdownTextController _currentTextController
    // Size: 0x8
    // Offset: 0x88
    GlobalNamespace::MultiplayerIntroCountdownTextController* currentTextController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerIntroCountdownTextController*) == 0x8);
    // private System.Single _fontSize
    // Size: 0x4
    // Offset: 0x90
    float fontSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _alpha
    // Size: 0x4
    // Offset: 0x94
    float alpha;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: MultiplayerIntroCountdown
    MultiplayerIntroCountdown(float textAppearDuration_ = {}, float textDisappearDuration_ = {}, float goDisappearDuration_ = {}, float partsDistance_ = {}, UnityEngine::Vector3 startLocalPosition_ = {}, UnityEngine::Vector3 targetLocalPosition_ = {}, UnityEngine::AudioClip* readyClip_ = {}, UnityEngine::AudioClip* setClip_ = {}, UnityEngine::AudioClip* goClip_ = {}, UnityEngine::AudioClip* buildUpClip_ = {}, GlobalNamespace::MultiplayerIntroCountdownTextController* textController0_ = {}, GlobalNamespace::MultiplayerIntroCountdownTextController* textController1_ = {}, UnityEngine::AudioSource* audioSource_ = {}, GlobalNamespace::MultiplayerOffsetPositionByLocalPlayerPosition* multiplayerOffsetByLocalPlayerPosition_ = {}, Tweening::TweeningManager* tweeningManager_ = {}, GlobalNamespace::MultiplayerIntroCountdownTextController* currentTextController_ = {}, float fontSize_ = {}, float alpha_ = {}) noexcept : textAppearDuration{textAppearDuration_}, textDisappearDuration{textDisappearDuration_}, goDisappearDuration{goDisappearDuration_}, partsDistance{partsDistance_}, startLocalPosition{startLocalPosition_}, targetLocalPosition{targetLocalPosition_}, readyClip{readyClip_}, setClip{setClip_}, goClip{goClip_}, buildUpClip{buildUpClip_}, textController0{textController0_}, textController1{textController1_}, audioSource{audioSource_}, multiplayerOffsetByLocalPlayerPosition{multiplayerOffsetByLocalPlayerPosition_}, tweeningManager{tweeningManager_}, currentTextController{currentTextController_}, fontSize{fontSize_}, alpha{alpha_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Single get_textAppearDuration()
    // Offset: 0x10243B8
    float get_textAppearDuration();
    // protected System.Void Awake()
    // Offset: 0x10243C0
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0x10244E8
    void OnDestroy();
    // public System.Void StartCountdown(System.Single seconds, System.Single delay, System.Single durationMultiplier)
    // Offset: 0x10242CC
    void StartCountdown(float seconds, float delay, float durationMultiplier);
    // private System.Collections.IEnumerator CountdownRoutine(System.Single seconds, System.Single delay, System.Single durationMultiplier)
    // Offset: 0x1024580
    System::Collections::IEnumerator* CountdownRoutine(float seconds, float delay, float durationMultiplier);
    // private System.Collections.IEnumerator PlayDelayed(UnityEngine.AudioClip audioClip, System.Single delay)
    // Offset: 0x102464C
    System::Collections::IEnumerator* PlayDelayed(UnityEngine::AudioClip* audioClip, float delay);
    // private System.Collections.IEnumerator PhaseRoutine(System.String text, System.Single appearDuration, System.Single disappearDuration)
    // Offset: 0x1024720
    System::Collections::IEnumerator* PhaseRoutine(::Il2CppString* text, float appearDuration, float disappearDuration);
    // public System.Void .ctor()
    // Offset: 0x10247F8
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerIntroCountdown* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerIntroCountdown::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerIntroCountdown*, creationType>()));
    }
  }; // MultiplayerIntroCountdown
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerIntroCountdown), 148 + sizeof(float)> __GlobalNamespace_MultiplayerIntroCountdownSizeCheck;
  static_assert(sizeof(MultiplayerIntroCountdown) == 0x98);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerIntroCountdown*, "", "MultiplayerIntroCountdown");
