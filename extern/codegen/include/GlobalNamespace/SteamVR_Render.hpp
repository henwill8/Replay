// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Valve.VR.ETrackingUniverseOrigin
#include "Valve/VR/ETrackingUniverseOrigin.hpp"
// Including type: Valve.VR.TrackedDevicePose_t
#include "Valve/VR/TrackedDevicePose_t.hpp"
// Including type: Valve.VR.EVREye
#include "Valve/VR/EVREye.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SteamVR_ExternalCamera
  class SteamVR_ExternalCamera;
  // Forward declaring type: SteamVR_Camera
  class SteamVR_Camera;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: WaitForEndOfFrame
  class WaitForEndOfFrame;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: Valve::VR
namespace Valve::VR {
  // Forward declaring type: VREvent_t
  struct VREvent_t;
  // Forward declaring type: EVRScreenshotPropertyFilenames
  struct EVRScreenshotPropertyFilenames;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: SteamVR_Render
  // [] Offset: FFFFFFFF
  class SteamVR_Render : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::SteamVR_Render::$RenderLoop$d__29
    class $RenderLoop$d__29;
    // public System.Boolean pauseGameWhenDashboardIsVisible
    // Size: 0x1
    // Offset: 0x18
    bool pauseGameWhenDashboardIsVisible;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean lockPhysicsUpdateRateToRenderFrequency
    // Size: 0x1
    // Offset: 0x19
    bool lockPhysicsUpdateRateToRenderFrequency;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: lockPhysicsUpdateRateToRenderFrequency and: externalCamera
    char __padding1[0x6] = {};
    // public SteamVR_ExternalCamera externalCamera
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::SteamVR_ExternalCamera* externalCamera;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SteamVR_ExternalCamera*) == 0x8);
    // public System.String externalCameraConfigPath
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppString* externalCameraConfigPath;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public Valve.VR.ETrackingUniverseOrigin trackingSpace
    // Size: 0x4
    // Offset: 0x30
    Valve::VR::ETrackingUniverseOrigin trackingSpace;
    // Field size check
    static_assert(sizeof(Valve::VR::ETrackingUniverseOrigin) == 0x4);
    // Padding between fields: trackingSpace and: cameras
    char __padding4[0x4] = {};
    // private SteamVR_Camera[] cameras
    // Size: 0x8
    // Offset: 0x38
    ::Array<GlobalNamespace::SteamVR_Camera*>* cameras;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::SteamVR_Camera*>*) == 0x8);
    // public Valve.VR.TrackedDevicePose_t[] poses
    // Size: 0x8
    // Offset: 0x40
    ::Array<Valve::VR::TrackedDevicePose_t>* poses;
    // Field size check
    static_assert(sizeof(::Array<Valve::VR::TrackedDevicePose_t>*) == 0x8);
    // public Valve.VR.TrackedDevicePose_t[] gamePoses
    // Size: 0x8
    // Offset: 0x48
    ::Array<Valve::VR::TrackedDevicePose_t>* gamePoses;
    // Field size check
    static_assert(sizeof(::Array<Valve::VR::TrackedDevicePose_t>*) == 0x8);
    // private UnityEngine.WaitForEndOfFrame waitForEndOfFrame
    // Size: 0x8
    // Offset: 0x50
    UnityEngine::WaitForEndOfFrame* waitForEndOfFrame;
    // Field size check
    static_assert(sizeof(UnityEngine::WaitForEndOfFrame*) == 0x8);
    // private System.Single sceneResolutionScale
    // Size: 0x4
    // Offset: 0x58
    float sceneResolutionScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single timeScale
    // Size: 0x4
    // Offset: 0x5C
    float timeScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: SteamVR_Render
    SteamVR_Render(bool pauseGameWhenDashboardIsVisible_ = {}, bool lockPhysicsUpdateRateToRenderFrequency_ = {}, GlobalNamespace::SteamVR_ExternalCamera* externalCamera_ = {}, ::Il2CppString* externalCameraConfigPath_ = {}, Valve::VR::ETrackingUniverseOrigin trackingSpace_ = {}, ::Array<GlobalNamespace::SteamVR_Camera*>* cameras_ = {}, ::Array<Valve::VR::TrackedDevicePose_t>* poses_ = {}, ::Array<Valve::VR::TrackedDevicePose_t>* gamePoses_ = {}, UnityEngine::WaitForEndOfFrame* waitForEndOfFrame_ = {}, float sceneResolutionScale_ = {}, float timeScale_ = {}) noexcept : pauseGameWhenDashboardIsVisible{pauseGameWhenDashboardIsVisible_}, lockPhysicsUpdateRateToRenderFrequency{lockPhysicsUpdateRateToRenderFrequency_}, externalCamera{externalCamera_}, externalCameraConfigPath{externalCameraConfigPath_}, trackingSpace{trackingSpace_}, cameras{cameras_}, poses{poses_}, gamePoses{gamePoses_}, waitForEndOfFrame{waitForEndOfFrame_}, sceneResolutionScale{sceneResolutionScale_}, timeScale{timeScale_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // [CompilerGeneratedAttribute] Offset: 0xCFC424
    // Get static field: static private Valve.VR.EVREye <eye>k__BackingField
    static Valve::VR::EVREye _get_$eye$k__BackingField();
    // Set static field: static private Valve.VR.EVREye <eye>k__BackingField
    static void _set_$eye$k__BackingField(Valve::VR::EVREye value);
    // Get static field: static private SteamVR_Render _instance
    static GlobalNamespace::SteamVR_Render* _get__instance();
    // Set static field: static private SteamVR_Render _instance
    static void _set__instance(GlobalNamespace::SteamVR_Render* value);
    // Get static field: static private System.Boolean isQuitting
    static bool _get_isQuitting();
    // Set static field: static private System.Boolean isQuitting
    static void _set_isQuitting(bool value);
    // Get static field: static private System.Boolean _pauseRendering
    static bool _get__pauseRendering();
    // Set static field: static private System.Boolean _pauseRendering
    static void _set__pauseRendering(bool value);
    // static public Valve.VR.EVREye get_eye()
    // Offset: 0x1298FB0
    static Valve::VR::EVREye get_eye();
    // static private System.Void set_eye(Valve.VR.EVREye value)
    // Offset: 0x1299000
    static void set_eye(Valve::VR::EVREye value);
    // static public SteamVR_Render get_instance()
    // Offset: 0x128BD00
    static GlobalNamespace::SteamVR_Render* get_instance();
    // private System.Void OnDestroy()
    // Offset: 0x1299054
    void OnDestroy();
    // private System.Void OnApplicationQuit()
    // Offset: 0x12990A8
    void OnApplicationQuit();
    // static public System.Void Add(SteamVR_Camera vrcam)
    // Offset: 0x128A618
    static void Add(GlobalNamespace::SteamVR_Camera* vrcam);
    // static public System.Void Remove(SteamVR_Camera vrcam)
    // Offset: 0x1289A74
    static void Remove(GlobalNamespace::SteamVR_Camera* vrcam);
    // static public SteamVR_Camera Top()
    // Offset: 0x1293A7C
    static GlobalNamespace::SteamVR_Camera* Top();
    // private System.Void AddInternal(SteamVR_Camera vrcam)
    // Offset: 0x129911C
    void AddInternal(GlobalNamespace::SteamVR_Camera* vrcam);
    // private System.Void RemoveInternal(SteamVR_Camera vrcam)
    // Offset: 0x1299344
    void RemoveInternal(GlobalNamespace::SteamVR_Camera* vrcam);
    // private SteamVR_Camera TopInternal()
    // Offset: 0x1299530
    GlobalNamespace::SteamVR_Camera* TopInternal();
    // static public System.Boolean get_pauseRendering()
    // Offset: 0x129957C
    static bool get_pauseRendering();
    // static public System.Void set_pauseRendering(System.Boolean value)
    // Offset: 0x1294DA4
    static void set_pauseRendering(bool value);
    // private System.Collections.IEnumerator RenderLoop()
    // Offset: 0x12995CC
    System::Collections::IEnumerator* RenderLoop();
    // private System.Void RenderExternalCamera()
    // Offset: 0x1299674
    void RenderExternalCamera();
    // private System.Void OnInputFocus(System.Boolean hasFocus)
    // Offset: 0x12997B0
    void OnInputFocus(bool hasFocus);
    // private System.Void OnQuit(Valve.VR.VREvent_t vrEvent)
    // Offset: 0x1299820
    void OnQuit(Valve::VR::VREvent_t vrEvent);
    // private System.String GetScreenshotFilename(System.UInt32 screenshotHandle, Valve.VR.EVRScreenshotPropertyFilenames screenshotPropertyFilename)
    // Offset: 0x1299828
    ::Il2CppString* GetScreenshotFilename(uint screenshotHandle, Valve::VR::EVRScreenshotPropertyFilenames screenshotPropertyFilename);
    // private System.Void OnRequestScreenshot(Valve.VR.VREvent_t vrEvent)
    // Offset: 0x1299974
    void OnRequestScreenshot(Valve::VR::VREvent_t vrEvent);
    // private System.Void OnEnable()
    // Offset: 0x1299B54
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x1299DD0
    void OnDisable();
    // private System.Void Awake()
    // Offset: 0x1299F88
    void Awake();
    // public System.Void UpdatePoses()
    // Offset: 0x129A104
    void UpdatePoses();
    // private System.Void OnBeforeRender()
    // Offset: 0x129A1E4
    void OnBeforeRender();
    // private System.Void Update()
    // Offset: 0x129A1E8
    void Update();
    // public System.Void .ctor()
    // Offset: 0x129A5EC
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SteamVR_Render* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Render::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SteamVR_Render*, creationType>()));
    }
  }; // SteamVR_Render
  #pragma pack(pop)
  static check_size<sizeof(SteamVR_Render), 92 + sizeof(float)> __GlobalNamespace_SteamVR_RenderSizeCheck;
  static_assert(sizeof(SteamVR_Render) == 0x60);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SteamVR_Render*, "", "SteamVR_Render");
