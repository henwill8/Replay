// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SecureRandomProvider
#include "GlobalNamespace/SecureRandomProvider.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: RNGCryptoServiceProvider
  class RNGCryptoServiceProvider;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: SecureRandomProvider/SecureRandomState
  // [] Offset: FFFFFFFF
  class SecureRandomProvider::SecureRandomState : public ::Il2CppObject {
    public:
    // private readonly System.Security.Cryptography.RNGCryptoServiceProvider _random
    // Size: 0x8
    // Offset: 0x10
    System::Security::Cryptography::RNGCryptoServiceProvider* random;
    // Field size check
    static_assert(sizeof(System::Security::Cryptography::RNGCryptoServiceProvider*) == 0x8);
    // private readonly System.Byte[] _randomBuffer0
    // Size: 0x8
    // Offset: 0x18
    ::Array<uint8_t>* randomBuffer0;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private readonly System.Byte[] _randomBuffer1
    // Size: 0x8
    // Offset: 0x20
    ::Array<uint8_t>* randomBuffer1;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Int32 _index
    // Size: 0x4
    // Offset: 0x28
    int index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: SecureRandomState
    SecureRandomState(System::Security::Cryptography::RNGCryptoServiceProvider* random_ = {}, ::Array<uint8_t>* randomBuffer0_ = {}, ::Array<uint8_t>* randomBuffer1_ = {}, int index_ = {}) noexcept : random{random_}, randomBuffer0{randomBuffer0_}, randomBuffer1{randomBuffer1_}, index{index_} {}
    // static field const value: static private System.Int32 kBufferSize
    static constexpr const int kBufferSize = 16384;
    // Get static field: static private System.Int32 kBufferSize
    static int _get_kBufferSize();
    // Set static field: static private System.Int32 kBufferSize
    static void _set_kBufferSize(int value);
    // public System.Void GetBytes(System.Byte[] buffer, System.Int32 offset, System.Int32 length)
    // Offset: 0x1C1FBE0
    void GetBytes(::Array<uint8_t>* buffer, int offset, int length);
    // public System.Byte GetByte()
    // Offset: 0x1C1FD14
    uint8_t GetByte();
    // private System.Void FillBuffer()
    // Offset: 0x1C1FEB8
    void FillBuffer();
    // public System.Void .ctor()
    // Offset: 0x1C1FA70
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SecureRandomProvider::SecureRandomState* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SecureRandomProvider::SecureRandomState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SecureRandomProvider::SecureRandomState*, creationType>()));
    }
  }; // SecureRandomProvider/SecureRandomState
  #pragma pack(pop)
  static check_size<sizeof(SecureRandomProvider::SecureRandomState), 40 + sizeof(int)> __GlobalNamespace_SecureRandomProvider_SecureRandomStateSizeCheck;
  static_assert(sizeof(SecureRandomProvider::SecureRandomState) == 0x2C);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SecureRandomProvider::SecureRandomState*, "", "SecureRandomProvider/SecureRandomState");
