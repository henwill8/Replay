// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: MultiplayerController
#include "GlobalNamespace/MultiplayerController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ColorSO
  class ColorSO;
  // Forward declaring type: LightsAnimator
  class LightsAnimator;
  // Forward declaring type: MultiplayerLeadPlayerProvider
  class MultiplayerLeadPlayerProvider;
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
}
// Forward declaring namespace: Tweening
namespace Tweening {
  // Forward declaring type: TweeningManager
  class TweeningManager;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerGameplayAnimator
  // [] Offset: FFFFFFFF
  class MultiplayerGameplayAnimator : public UnityEngine::MonoBehaviour {
    public:
    // protected ColorSO _activeLightsColor
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::ColorSO* activeLightsColor;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorSO*) == 0x8);
    // protected ColorSO _leadingLightsColor
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::ColorSO* leadingLightsColor;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorSO*) == 0x8);
    // protected ColorSO _failedLightsColor
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::ColorSO* failedLightsColor;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorSO*) == 0x8);
    // [SpaceAttribute] Offset: 0xD3C090
    // protected System.Single _leadingSwitchCrossFadeDuration
    // Size: 0x4
    // Offset: 0x30
    float leadingSwitchCrossFadeDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: leadingSwitchCrossFadeDuration and: gameplayLightsAnimators
    char __padding3[0x4] = {};
    // [SpaceAttribute] Offset: 0xD3C0C8
    // protected LightsAnimator[] _gameplayLightsAnimators
    // Size: 0x8
    // Offset: 0x38
    ::Array<GlobalNamespace::LightsAnimator*>* gameplayLightsAnimators;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::LightsAnimator*>*) == 0x8);
    // protected LightsAnimator[] _allLightsAnimators
    // Size: 0x8
    // Offset: 0x40
    ::Array<GlobalNamespace::LightsAnimator*>* allLightsAnimators;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::LightsAnimator*>*) == 0x8);
    // [InjectAttribute] Offset: 0xD3C110
    // private readonly MultiplayerLeadPlayerProvider _leadPlayerProvider
    // Size: 0x8
    // Offset: 0x48
    GlobalNamespace::MultiplayerLeadPlayerProvider* leadPlayerProvider;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerLeadPlayerProvider*) == 0x8);
    // [InjectAttribute] Offset: 0xD3C120
    // private readonly MultiplayerController _multiplayerController
    // Size: 0x8
    // Offset: 0x50
    GlobalNamespace::MultiplayerController* multiplayerController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerController*) == 0x8);
    // [InjectAttribute] Offset: 0xD3C130
    // protected readonly Tweening.TweeningManager tweeningManager
    // Size: 0x8
    // Offset: 0x58
    Tweening::TweeningManager* tweeningManager;
    // Field size check
    static_assert(sizeof(Tweening::TweeningManager*) == 0x8);
    // [InjectAttribute] Offset: 0xD3C140
    // protected readonly IConnectedPlayer connectedPlayer
    // Size: 0x8
    // Offset: 0x60
    GlobalNamespace::IConnectedPlayer* connectedPlayer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IConnectedPlayer*) == 0x8);
    // Creating value type constructor for type: MultiplayerGameplayAnimator
    MultiplayerGameplayAnimator(GlobalNamespace::ColorSO* activeLightsColor_ = {}, GlobalNamespace::ColorSO* leadingLightsColor_ = {}, GlobalNamespace::ColorSO* failedLightsColor_ = {}, float leadingSwitchCrossFadeDuration_ = {}, ::Array<GlobalNamespace::LightsAnimator*>* gameplayLightsAnimators_ = {}, ::Array<GlobalNamespace::LightsAnimator*>* allLightsAnimators_ = {}, GlobalNamespace::MultiplayerLeadPlayerProvider* leadPlayerProvider_ = {}, GlobalNamespace::MultiplayerController* multiplayerController_ = {}, Tweening::TweeningManager* tweeningManager_ = {}, GlobalNamespace::IConnectedPlayer* connectedPlayer_ = {}) noexcept : activeLightsColor{activeLightsColor_}, leadingLightsColor{leadingLightsColor_}, failedLightsColor{failedLightsColor_}, leadingSwitchCrossFadeDuration{leadingSwitchCrossFadeDuration_}, gameplayLightsAnimators{gameplayLightsAnimators_}, allLightsAnimators{allLightsAnimators_}, leadPlayerProvider{leadPlayerProvider_}, multiplayerController{multiplayerController_}, tweeningManager{tweeningManager_}, connectedPlayer{connectedPlayer_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void Start()
    // Offset: 0x1019F68
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x101A208
    void OnDestroy();
    // protected System.Void AnimateNewLeaderSelected(System.Boolean isLeading)
    // Offset: 0xFFFFFFFF
    void AnimateNewLeaderSelected(bool isLeading);
    // protected System.Void HandleStateChanged(MultiplayerController/State state)
    // Offset: 0x101A8B4
    void HandleStateChanged(GlobalNamespace::MultiplayerController::State state);
    // private System.Void HandleNewLeaderWasSelected(System.String userId)
    // Offset: 0x10232F8
    void HandleNewLeaderWasSelected(::Il2CppString* userId);
    // protected System.Void .ctor()
    // Offset: 0x101AB6C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerGameplayAnimator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerGameplayAnimator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerGameplayAnimator*, creationType>()));
    }
  }; // MultiplayerGameplayAnimator
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerGameplayAnimator), 96 + sizeof(GlobalNamespace::IConnectedPlayer*)> __GlobalNamespace_MultiplayerGameplayAnimatorSizeCheck;
  static_assert(sizeof(MultiplayerGameplayAnimator) == 0x68);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerGameplayAnimator*, "", "MultiplayerGameplayAnimator");
