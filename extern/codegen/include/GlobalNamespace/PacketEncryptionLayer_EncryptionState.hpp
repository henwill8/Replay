// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PacketEncryptionLayer
#include "GlobalNamespace/PacketEncryptionLayer.hpp"
// Including type: PacketEncryptionLayer/IEncryptionState
#include "GlobalNamespace/PacketEncryptionLayer_IEncryptionState.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Concurrent
namespace System::Collections::Concurrent {
  // Forward declaring type: ConcurrentQueue`1<T>
  template<typename T>
  class ConcurrentQueue_1;
}
// Forward declaring namespace: Org::BouncyCastle::Crypto::Macs
namespace Org::BouncyCastle::Crypto::Macs {
  // Forward declaring type: HMac
  class HMac;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: PacketEncryptionLayer/EncryptionState
  // [] Offset: FFFFFFFF
  class PacketEncryptionLayer::EncryptionState : public ::Il2CppObject/*, public GlobalNamespace::PacketEncryptionLayer::IEncryptionState, public System::IDisposable*/ {
    public:
    // private readonly System.UInt32 _protocolVersion
    // Size: 0x4
    // Offset: 0x10
    uint protocolVersion;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Boolean _isValid
    // Size: 0x1
    // Offset: 0x14
    bool isValid;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isValid and: lastSentSequenceNum
    char __padding1[0x3] = {};
    // private System.Int32 _lastSentSequenceNum
    // Size: 0x4
    // Offset: 0x18
    int lastSentSequenceNum;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _hasReceivedSequenceNum
    // Size: 0x1
    // Offset: 0x1C
    bool hasReceivedSequenceNum;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasReceivedSequenceNum and: lastReceivedSequenceNum
    char __padding3[0x3] = {};
    // private System.UInt32 _lastReceivedSequenceNum
    // Size: 0x4
    // Offset: 0x20
    uint lastReceivedSequenceNum;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Padding between fields: lastReceivedSequenceNum and: receivedSequenceNumBuffer
    char __padding4[0x4] = {};
    // private readonly System.Boolean[] _receivedSequenceNumBuffer
    // Size: 0x8
    // Offset: 0x28
    ::Array<bool>* receivedSequenceNumBuffer;
    // Field size check
    static_assert(sizeof(::Array<bool>*) == 0x8);
    // public readonly System.Byte[] sendKey
    // Size: 0x8
    // Offset: 0x30
    ::Array<uint8_t>* sendKey;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // public readonly System.Byte[] receiveKey
    // Size: 0x8
    // Offset: 0x38
    ::Array<uint8_t>* receiveKey;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private readonly System.Byte[] _sendMacKey
    // Size: 0x8
    // Offset: 0x40
    ::Array<uint8_t>* sendMacKey;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private readonly System.Byte[] _receiveMacKey
    // Size: 0x8
    // Offset: 0x48
    ::Array<uint8_t>* receiveMacKey;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private readonly System.Collections.Concurrent.ConcurrentQueue`1<Org.BouncyCastle.Crypto.Macs.HMac> _sendMacQueue
    // Size: 0x8
    // Offset: 0x50
    System::Collections::Concurrent::ConcurrentQueue_1<Org::BouncyCastle::Crypto::Macs::HMac*>* sendMacQueue;
    // Field size check
    static_assert(sizeof(System::Collections::Concurrent::ConcurrentQueue_1<Org::BouncyCastle::Crypto::Macs::HMac*>*) == 0x8);
    // private readonly System.Collections.Concurrent.ConcurrentQueue`1<Org.BouncyCastle.Crypto.Macs.HMac> _receiveMacQueue
    // Size: 0x8
    // Offset: 0x58
    System::Collections::Concurrent::ConcurrentQueue_1<Org::BouncyCastle::Crypto::Macs::HMac*>* receiveMacQueue;
    // Field size check
    static_assert(sizeof(System::Collections::Concurrent::ConcurrentQueue_1<Org::BouncyCastle::Crypto::Macs::HMac*>*) == 0x8);
    // Creating value type constructor for type: EncryptionState
    EncryptionState(uint protocolVersion_ = {}, bool isValid_ = {}, int lastSentSequenceNum_ = {}, bool hasReceivedSequenceNum_ = {}, uint lastReceivedSequenceNum_ = {}, ::Array<bool>* receivedSequenceNumBuffer_ = {}, ::Array<uint8_t>* sendKey_ = {}, ::Array<uint8_t>* receiveKey_ = {}, ::Array<uint8_t>* sendMacKey_ = {}, ::Array<uint8_t>* receiveMacKey_ = {}, System::Collections::Concurrent::ConcurrentQueue_1<Org::BouncyCastle::Crypto::Macs::HMac*>* sendMacQueue_ = {}, System::Collections::Concurrent::ConcurrentQueue_1<Org::BouncyCastle::Crypto::Macs::HMac*>* receiveMacQueue_ = {}) noexcept : protocolVersion{protocolVersion_}, isValid{isValid_}, lastSentSequenceNum{lastSentSequenceNum_}, hasReceivedSequenceNum{hasReceivedSequenceNum_}, lastReceivedSequenceNum{lastReceivedSequenceNum_}, receivedSequenceNumBuffer{receivedSequenceNumBuffer_}, sendKey{sendKey_}, receiveKey{receiveKey_}, sendMacKey{sendMacKey_}, receiveMacKey{receiveMacKey_}, sendMacQueue{sendMacQueue_}, receiveMacQueue{receiveMacQueue_} {}
    // Creating interface conversion operator: operator GlobalNamespace::PacketEncryptionLayer::IEncryptionState
    operator GlobalNamespace::PacketEncryptionLayer::IEncryptionState() noexcept {
      return *reinterpret_cast<GlobalNamespace::PacketEncryptionLayer::IEncryptionState*>(this);
    }
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // static field const value: static private System.Int32 kReceivedSequencNumBufferLength
    static constexpr const int kReceivedSequencNumBufferLength = 64;
    // Get static field: static private System.Int32 kReceivedSequencNumBufferLength
    static int _get_kReceivedSequencNumBufferLength();
    // Set static field: static private System.Int32 kReceivedSequencNumBufferLength
    static void _set_kReceivedSequencNumBufferLength(int value);
    // public System.Byte[] ComputeSendMac(System.Byte[] data, System.Int32 offset, System.Int32 count)
    // Offset: 0x1C19330
    ::Array<uint8_t>* ComputeSendMac(::Array<uint8_t>* data, int offset, int count);
    // public System.Byte[] ComputeReceiveMac(System.Byte[] data, System.Int32 offset, System.Int32 count)
    // Offset: 0x1C18E44
    ::Array<uint8_t>* ComputeReceiveMac(::Array<uint8_t>* data, int offset, int count);
    // public System.Boolean IsValidSequenceNum(System.UInt32 sequenceNum)
    // Offset: 0x1C18CF4
    bool IsValidSequenceNum(uint sequenceNum);
    // public System.Boolean PutSequenceNum(System.UInt32 sequenceNum)
    // Offset: 0x1C19058
    bool PutSequenceNum(uint sequenceNum);
    // public System.UInt32 GetNextSentSequenceNum()
    // Offset: 0x1C19294
    uint GetNextSentSequenceNum();
    // public System.Void .ctor(System.UInt32 protocolVersion, System.Byte[] preMasterSecret, System.Byte[] serverSeed, System.Byte[] clientSeed, System.Boolean isClient)
    // Offset: 0x1C16EB4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PacketEncryptionLayer::EncryptionState* New_ctor(uint protocolVersion, ::Array<uint8_t>* preMasterSecret, ::Array<uint8_t>* serverSeed, ::Array<uint8_t>* clientSeed, bool isClient) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::EncryptionState::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PacketEncryptionLayer::EncryptionState*, creationType>(protocolVersion, preMasterSecret, serverSeed, clientSeed, isClient)));
    }
    // private System.Byte[] MakeSeed(System.Byte[] baseSeed, System.Byte[] serverSeed, System.Byte[] clientSeed)
    // Offset: 0x1C19C5C
    ::Array<uint8_t>* MakeSeed(::Array<uint8_t>* baseSeed, ::Array<uint8_t>* serverSeed, ::Array<uint8_t>* clientSeed);
    // static private System.Byte[] PRF(System.Byte[] key, System.Byte[] seed, System.Int32 length)
    // Offset: 0x1C19D44
    static ::Array<uint8_t>* PRF(::Array<uint8_t>* key, ::Array<uint8_t>* seed, int length);
    // static private System.Void PRF_Hash(System.Byte[] key, System.Byte[] seed, ref System.Int32 length)
    // Offset: 0x1C19E34
    static void PRF_Hash(::Array<uint8_t>* key, ::Array<uint8_t>* seed, int& length);
    // public System.Boolean get_isValid()
    // Offset: 0x1C19C38
    // Implemented from: PacketEncryptionLayer/IEncryptionState
    // Base method: System.Boolean IEncryptionState::get_isValid()
    bool get_isValid();
    // public System.Void Dispose()
    // Offset: 0x1C19FFC
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
  }; // PacketEncryptionLayer/EncryptionState
  #pragma pack(pop)
  static check_size<sizeof(PacketEncryptionLayer::EncryptionState), 88 + sizeof(System::Collections::Concurrent::ConcurrentQueue_1<Org::BouncyCastle::Crypto::Macs::HMac*>*)> __GlobalNamespace_PacketEncryptionLayer_EncryptionStateSizeCheck;
  static_assert(sizeof(PacketEncryptionLayer::EncryptionState) == 0x60);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PacketEncryptionLayer::EncryptionState*, "", "PacketEncryptionLayer/EncryptionState");
