// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PacketEncryptionLayer
#include "GlobalNamespace/PacketEncryptionLayer.hpp"
// Including type: PacketEncryptionLayer/IEncryptionState
#include "GlobalNamespace/PacketEncryptionLayer_IEncryptionState.hpp"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Concurrent
namespace System::Collections::Concurrent {
  // Forward declaring type: ConcurrentQueue`1<T>
  template<typename T>
  class ConcurrentQueue_1;
}
// Forward declaring namespace: Org::BouncyCastle::Crypto::Macs
namespace Org::BouncyCastle::Crypto::Macs {
  // Forward declaring type: HMac
  class HMac;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: PacketEncryptionLayer/EncryptionState
  class PacketEncryptionLayer::EncryptionState : public ::Il2CppObject/*, public GlobalNamespace::PacketEncryptionLayer::IEncryptionState, public System::IDisposable*/ {
    public:
    // private readonly System.UInt32 _protocolVersion
    // Offset: 0x10
    uint protocolVersion;
    // private System.Boolean _isValid
    // Offset: 0x14
    bool isValid;
    // private System.Int32 _lastSentSequenceNum
    // Offset: 0x18
    int lastSentSequenceNum;
    // private System.Boolean _hasReceivedSequenceNum
    // Offset: 0x1C
    bool hasReceivedSequenceNum;
    // private System.UInt32 _lastReceivedSequenceNum
    // Offset: 0x20
    uint lastReceivedSequenceNum;
    // private readonly System.Boolean[] _receivedSequenceNumBuffer
    // Offset: 0x28
    ::Array<bool>* receivedSequenceNumBuffer;
    // public readonly System.Byte[] sendKey
    // Offset: 0x30
    ::Array<uint8_t>* sendKey;
    // public readonly System.Byte[] receiveKey
    // Offset: 0x38
    ::Array<uint8_t>* receiveKey;
    // private readonly System.Byte[] _sendMacKey
    // Offset: 0x40
    ::Array<uint8_t>* sendMacKey;
    // private readonly System.Byte[] _receiveMacKey
    // Offset: 0x48
    ::Array<uint8_t>* receiveMacKey;
    // private readonly System.Collections.Concurrent.ConcurrentQueue`1<Org.BouncyCastle.Crypto.Macs.HMac> _sendMacQueue
    // Offset: 0x50
    System::Collections::Concurrent::ConcurrentQueue_1<Org::BouncyCastle::Crypto::Macs::HMac*>* sendMacQueue;
    // private readonly System.Collections.Concurrent.ConcurrentQueue`1<Org.BouncyCastle.Crypto.Macs.HMac> _receiveMacQueue
    // Offset: 0x58
    System::Collections::Concurrent::ConcurrentQueue_1<Org::BouncyCastle::Crypto::Macs::HMac*>* receiveMacQueue;
    // Creating interface conversion operator: operator GlobalNamespace::PacketEncryptionLayer::IEncryptionState
    operator GlobalNamespace::PacketEncryptionLayer::IEncryptionState() noexcept {
      return *reinterpret_cast<GlobalNamespace::PacketEncryptionLayer::IEncryptionState*>(this);
    }
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // static field const value: static private System.Int32 kReceivedSequencNumBufferLength
    static constexpr const int kReceivedSequencNumBufferLength = 64;
    // Get static field: static private System.Int32 kReceivedSequencNumBufferLength
    static int _get_kReceivedSequencNumBufferLength();
    // Set static field: static private System.Int32 kReceivedSequencNumBufferLength
    static void _set_kReceivedSequencNumBufferLength(int value);
    // public System.Byte[] ComputeSendMac(System.Byte[] data, System.Int32 offset, System.Int32 count)
    // Offset: 0x1E4FF74
    ::Array<uint8_t>* ComputeSendMac(::Array<uint8_t>* data, int offset, int count);
    // public System.Byte[] ComputeReceiveMac(System.Byte[] data, System.Int32 offset, System.Int32 count)
    // Offset: 0x1E4FA88
    ::Array<uint8_t>* ComputeReceiveMac(::Array<uint8_t>* data, int offset, int count);
    // public System.Boolean IsValidSequenceNum(System.UInt32 sequenceNum)
    // Offset: 0x1E4F938
    bool IsValidSequenceNum(uint sequenceNum);
    // public System.Boolean PutSequenceNum(System.UInt32 sequenceNum)
    // Offset: 0x1E4FC9C
    bool PutSequenceNum(uint sequenceNum);
    // public System.UInt32 GetNextSentSequenceNum()
    // Offset: 0x1E4FED8
    uint GetNextSentSequenceNum();
    // public System.Void .ctor(System.UInt32 protocolVersion, System.Byte[] preMasterSecret, System.Byte[] serverSeed, System.Byte[] clientSeed, System.Boolean isClient)
    // Offset: 0x1E4DAF8
    static PacketEncryptionLayer::EncryptionState* New_ctor(uint protocolVersion, ::Array<uint8_t>* preMasterSecret, ::Array<uint8_t>* serverSeed, ::Array<uint8_t>* clientSeed, bool isClient);
    // private System.Byte[] MakeSeed(System.Byte[] baseSeed, System.Byte[] serverSeed, System.Byte[] clientSeed)
    // Offset: 0x1E508A0
    ::Array<uint8_t>* MakeSeed(::Array<uint8_t>* baseSeed, ::Array<uint8_t>* serverSeed, ::Array<uint8_t>* clientSeed);
    // static private System.Byte[] PRF(System.Byte[] key, System.Byte[] seed, System.Int32 length)
    // Offset: 0x1E50988
    static ::Array<uint8_t>* PRF(::Array<uint8_t>* key, ::Array<uint8_t>* seed, int length);
    // static private System.Void PRF_Hash(System.Byte[] key, System.Byte[] seed, ref System.Int32 length)
    // Offset: 0x1E50A78
    static void PRF_Hash(::Array<uint8_t>* key, ::Array<uint8_t>* seed, int& length);
    // public System.Boolean get_isValid()
    // Offset: 0x1E5087C
    // Implemented from: PacketEncryptionLayer/IEncryptionState
    // Base method: System.Boolean IEncryptionState::get_isValid()
    bool get_isValid();
    // public System.Void Dispose()
    // Offset: 0x1E50C40
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
  }; // PacketEncryptionLayer/EncryptionState
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PacketEncryptionLayer::EncryptionState*, "", "PacketEncryptionLayer/EncryptionState");
#pragma pack(pop)
