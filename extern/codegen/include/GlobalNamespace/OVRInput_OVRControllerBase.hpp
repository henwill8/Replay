// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRInput
#include "GlobalNamespace/OVRInput.hpp"
// Including type: OVRPlugin/ControllerState4
#include "GlobalNamespace/OVRPlugin_ControllerState4.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x101
  #pragma pack(push, 1)
  // Autogenerated type: OVRInput/OVRControllerBase
  // [] Offset: FFFFFFFF
  class OVRInput::OVRControllerBase : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::OVRInput::OVRControllerBase::VirtualButtonMap
    class VirtualButtonMap;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerBase::VirtualTouchMap
    class VirtualTouchMap;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerBase::VirtualNearTouchMap
    class VirtualNearTouchMap;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerBase::VirtualAxis1DMap
    class VirtualAxis1DMap;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerBase::VirtualAxis2DMap
    class VirtualAxis2DMap;
    // public OVRInput/Controller controllerType
    // Size: 0x4
    // Offset: 0x10
    GlobalNamespace::OVRInput::Controller controllerType;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::Controller) == 0x4);
    // Padding between fields: controllerType and: buttonMap
    char __padding0[0x4] = {};
    // public OVRInput/OVRControllerBase/VirtualButtonMap buttonMap
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::OVRInput::OVRControllerBase::VirtualButtonMap* buttonMap;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::OVRControllerBase::VirtualButtonMap*) == 0x8);
    // public OVRInput/OVRControllerBase/VirtualTouchMap touchMap
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::OVRInput::OVRControllerBase::VirtualTouchMap* touchMap;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::OVRControllerBase::VirtualTouchMap*) == 0x8);
    // public OVRInput/OVRControllerBase/VirtualNearTouchMap nearTouchMap
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::OVRInput::OVRControllerBase::VirtualNearTouchMap* nearTouchMap;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::OVRControllerBase::VirtualNearTouchMap*) == 0x8);
    // public OVRInput/OVRControllerBase/VirtualAxis1DMap axis1DMap
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::OVRInput::OVRControllerBase::VirtualAxis1DMap* axis1DMap;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::OVRControllerBase::VirtualAxis1DMap*) == 0x8);
    // public OVRInput/OVRControllerBase/VirtualAxis2DMap axis2DMap
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::OVRInput::OVRControllerBase::VirtualAxis2DMap* axis2DMap;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRInput::OVRControllerBase::VirtualAxis2DMap*) == 0x8);
    // public OVRPlugin/ControllerState4 previousState
    // Size: 0x60
    // Offset: 0x40
    GlobalNamespace::OVRPlugin::ControllerState4 previousState;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRPlugin::ControllerState4) == 0x60);
    // public OVRPlugin/ControllerState4 currentState
    // Size: 0x60
    // Offset: 0xA0
    GlobalNamespace::OVRPlugin::ControllerState4 currentState;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRPlugin::ControllerState4) == 0x60);
    // public System.Boolean shouldApplyDeadzone
    // Size: 0x1
    // Offset: 0x100
    bool shouldApplyDeadzone;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: OVRControllerBase
    OVRControllerBase(GlobalNamespace::OVRInput::Controller controllerType_ = {}, GlobalNamespace::OVRInput::OVRControllerBase::VirtualButtonMap* buttonMap_ = {}, GlobalNamespace::OVRInput::OVRControllerBase::VirtualTouchMap* touchMap_ = {}, GlobalNamespace::OVRInput::OVRControllerBase::VirtualNearTouchMap* nearTouchMap_ = {}, GlobalNamespace::OVRInput::OVRControllerBase::VirtualAxis1DMap* axis1DMap_ = {}, GlobalNamespace::OVRInput::OVRControllerBase::VirtualAxis2DMap* axis2DMap_ = {}, GlobalNamespace::OVRPlugin::ControllerState4 previousState_ = {}, GlobalNamespace::OVRPlugin::ControllerState4 currentState_ = {}, bool shouldApplyDeadzone_ = {}) noexcept : controllerType{controllerType_}, buttonMap{buttonMap_}, touchMap{touchMap_}, nearTouchMap{nearTouchMap_}, axis1DMap{axis1DMap_}, axis2DMap{axis2DMap_}, previousState{previousState_}, currentState{currentState_}, shouldApplyDeadzone{shouldApplyDeadzone_} {}
    // public OVRInput/Controller Update()
    // Offset: 0x13ABC48
    GlobalNamespace::OVRInput::Controller Update();
    // private OVRPlugin/ControllerState4 GetOpenVRControllerState(OVRInput/Controller controllerType)
    // Offset: 0x13AC11C
    GlobalNamespace::OVRPlugin::ControllerState4 GetOpenVRControllerState(GlobalNamespace::OVRInput::Controller controllerType);
    // public System.Void SetControllerVibration(System.Single frequency, System.Single amplitude)
    // Offset: 0x13AC658
    void SetControllerVibration(float frequency, float amplitude);
    // public System.Void RecenterController()
    // Offset: 0x13AC6DC
    void RecenterController();
    // public System.Boolean WasRecentered()
    // Offset: 0x13AC740
    bool WasRecentered();
    // public System.Byte GetRecenterCount()
    // Offset: 0x13AC748
    uint8_t GetRecenterCount();
    // public System.Byte GetBatteryPercentRemaining()
    // Offset: 0x13AC750
    uint8_t GetBatteryPercentRemaining();
    // public System.Void ConfigureButtonMap()
    // Offset: 0xFFFFFFFF
    void ConfigureButtonMap();
    // public System.Void ConfigureTouchMap()
    // Offset: 0xFFFFFFFF
    void ConfigureTouchMap();
    // public System.Void ConfigureNearTouchMap()
    // Offset: 0xFFFFFFFF
    void ConfigureNearTouchMap();
    // public System.Void ConfigureAxis1DMap()
    // Offset: 0xFFFFFFFF
    void ConfigureAxis1DMap();
    // public System.Void ConfigureAxis2DMap()
    // Offset: 0xFFFFFFFF
    void ConfigureAxis2DMap();
    // public OVRInput/RawButton ResolveToRawMask(OVRInput/Button virtualMask)
    // Offset: 0x13A8EF0
    GlobalNamespace::OVRInput::RawButton ResolveToRawMask(GlobalNamespace::OVRInput::Button virtualMask);
    // public OVRInput/RawTouch ResolveToRawMask(OVRInput/Touch virtualMask)
    // Offset: 0x13A95AC
    GlobalNamespace::OVRInput::RawTouch ResolveToRawMask(GlobalNamespace::OVRInput::Touch virtualMask);
    // public OVRInput/RawNearTouch ResolveToRawMask(OVRInput/NearTouch virtualMask)
    // Offset: 0x13A9CE0
    GlobalNamespace::OVRInput::RawNearTouch ResolveToRawMask(GlobalNamespace::OVRInput::NearTouch virtualMask);
    // public OVRInput/RawAxis1D ResolveToRawMask(OVRInput/Axis1D virtualMask)
    // Offset: 0x13AA6B8
    GlobalNamespace::OVRInput::RawAxis1D ResolveToRawMask(GlobalNamespace::OVRInput::Axis1D virtualMask);
    // public OVRInput/RawAxis2D ResolveToRawMask(OVRInput/Axis2D virtualMask)
    // Offset: 0x13AAC00
    GlobalNamespace::OVRInput::RawAxis2D ResolveToRawMask(GlobalNamespace::OVRInput::Axis2D virtualMask);
    // public System.Void .ctor()
    // Offset: 0x13ABA9C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRInput::OVRControllerBase* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRInput::OVRControllerBase::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRInput::OVRControllerBase*, creationType>()));
    }
  }; // OVRInput/OVRControllerBase
  #pragma pack(pop)
  static check_size<sizeof(OVRInput::OVRControllerBase), 256 + sizeof(bool)> __GlobalNamespace_OVRInput_OVRControllerBaseSizeCheck;
  static_assert(sizeof(OVRInput::OVRControllerBase) == 0x101);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRInput::OVRControllerBase*, "", "OVRInput/OVRControllerBase");
