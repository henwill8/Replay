// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.TableCell
#include "HMUI/TableCell.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Button
  class Button;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: ButtonBinder
  class ButtonBinder;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: INetworkPlayer
  class INetworkPlayer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: NetworkPlayerOptionsTableCell
  // [] Offset: FFFFFFFF
  class NetworkPlayerOptionsTableCell : public HMUI::TableCell {
    public:
    // private UnityEngine.UI.Button[] _buttons
    // Size: 0x8
    // Offset: 0x50
    ::Array<UnityEngine::UI::Button*>* buttons;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::UI::Button*>*) == 0x8);
    // private TMPro.TextMeshProUGUI[] _buttonTexts
    // Size: 0x8
    // Offset: 0x58
    ::Array<TMPro::TextMeshProUGUI*>* buttonTexts;
    // Field size check
    static_assert(sizeof(::Array<TMPro::TextMeshProUGUI*>*) == 0x8);
    // private HMUI.ButtonBinder _buttonBinder
    // Size: 0x8
    // Offset: 0x60
    HMUI::ButtonBinder* buttonBinder;
    // Field size check
    static_assert(sizeof(HMUI::ButtonBinder*) == 0x8);
    // private INetworkPlayer _player
    // Size: 0x8
    // Offset: 0x68
    GlobalNamespace::INetworkPlayer* player;
    // Field size check
    static_assert(sizeof(GlobalNamespace::INetworkPlayer*) == 0x8);
    // Creating value type constructor for type: NetworkPlayerOptionsTableCell
    NetworkPlayerOptionsTableCell(::Array<UnityEngine::UI::Button*>* buttons_ = {}, ::Array<TMPro::TextMeshProUGUI*>* buttonTexts_ = {}, HMUI::ButtonBinder* buttonBinder_ = {}, GlobalNamespace::INetworkPlayer* player_ = {}) noexcept : buttons{buttons_}, buttonTexts{buttonTexts_}, buttonBinder{buttonBinder_}, player{player_} {}
    // public INetworkPlayer get_player()
    // Offset: 0xF8B620
    GlobalNamespace::INetworkPlayer* get_player();
    // public System.Void set_player(INetworkPlayer value)
    // Offset: 0xF8B628
    void set_player(GlobalNamespace::INetworkPlayer* value);
    // private System.Void Refresh()
    // Offset: 0xF8B650
    void Refresh();
    // private System.Void Block()
    // Offset: 0xF8C170
    void Block();
    // private System.Void Unblock()
    // Offset: 0xF8C22C
    void Unblock();
    // private System.Void Join()
    // Offset: 0xF8C2E8
    void Join();
    // private System.Void Invite()
    // Offset: 0xF8C3A4
    void Invite();
    // private System.Void Kick()
    // Offset: 0xF8C460
    void Kick();
    // private System.Void Leave()
    // Offset: 0xF8C51C
    void Leave();
    // public System.Void .ctor()
    // Offset: 0xF8C5D8
    // Implemented from: HMUI.TableCell
    // Base method: System.Void TableCell::.ctor()
    // Base method: System.Void SelectableCell::.ctor()
    // Base method: System.Void Interactable::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetworkPlayerOptionsTableCell* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetworkPlayerOptionsTableCell::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetworkPlayerOptionsTableCell*, creationType>()));
    }
  }; // NetworkPlayerOptionsTableCell
  #pragma pack(pop)
  static check_size<sizeof(NetworkPlayerOptionsTableCell), 104 + sizeof(GlobalNamespace::INetworkPlayer*)> __GlobalNamespace_NetworkPlayerOptionsTableCellSizeCheck;
  static_assert(sizeof(NetworkPlayerOptionsTableCell) == 0x70);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::NetworkPlayerOptionsTableCell*, "", "NetworkPlayerOptionsTableCell");
