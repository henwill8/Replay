// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PacketEncryptionLayer/PendingEncryptionStateList
#include "GlobalNamespace/PacketEncryptionLayer_PendingEncryptionStateList.hpp"
// Including type: System.Collections.Generic.KeyValuePair`2
#include "System/Collections/Generic/KeyValuePair_2.hpp"
// Including type: PacketEncryptionLayer
#include "GlobalNamespace/PacketEncryptionLayer.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: PacketEncryptionLayer/PendingEncryptionStateList/<>c
  // [] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: D1B9BC
  class PacketEncryptionLayer::PendingEncryptionStateList::$$c : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: $$c
    $$c() noexcept {}
    // Get static field: static public readonly PacketEncryptionLayer/PendingEncryptionStateList/<>c <>9
    static GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::$$c* _get_$$9();
    // Set static field: static public readonly PacketEncryptionLayer/PendingEncryptionStateList/<>c <>9
    static void _set_$$9(GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::$$c* value);
    // Get static field: static public System.Func`2<System.Collections.Generic.KeyValuePair`2<System.Int32,PacketEncryptionLayer/EncryptionState>,PacketEncryptionLayer/EncryptionState> <>9__4_1
    static System::Func_2<System::Collections::Generic::KeyValuePair_2<int, GlobalNamespace::PacketEncryptionLayer::EncryptionState*>, GlobalNamespace::PacketEncryptionLayer::EncryptionState*>* _get_$$9__4_1();
    // Set static field: static public System.Func`2<System.Collections.Generic.KeyValuePair`2<System.Int32,PacketEncryptionLayer/EncryptionState>,PacketEncryptionLayer/EncryptionState> <>9__4_1
    static void _set_$$9__4_1(System::Func_2<System::Collections::Generic::KeyValuePair_2<int, GlobalNamespace::PacketEncryptionLayer::EncryptionState*>, GlobalNamespace::PacketEncryptionLayer::EncryptionState*>* value);
    // static private System.Void .cctor()
    // Offset: 0x1C1A2BC
    static void _cctor();
    // PacketEncryptionLayer/EncryptionState <GetSortedEncryptionStates>b__4_1(System.Collections.Generic.KeyValuePair`2<System.Int32,PacketEncryptionLayer/EncryptionState> kvp)
    // Offset: 0x1C1A32C
    GlobalNamespace::PacketEncryptionLayer::EncryptionState* $GetSortedEncryptionStates$b__4_1(System::Collections::Generic::KeyValuePair_2<int, GlobalNamespace::PacketEncryptionLayer::EncryptionState*> kvp);
    // public System.Void .ctor()
    // Offset: 0x1C1A324
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PacketEncryptionLayer::PendingEncryptionStateList::$$c* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::$$c::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PacketEncryptionLayer::PendingEncryptionStateList::$$c*, creationType>()));
    }
  }; // PacketEncryptionLayer/PendingEncryptionStateList/<>c
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList::$$c*, "", "PacketEncryptionLayer/PendingEncryptionStateList/<>c");
