// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: X509CertificateUtility
#include "GlobalNamespace/X509CertificateUtility.hpp"
// Including type: ICertificateEncryptionProvider
#include "GlobalNamespace/ICertificateEncryptionProvider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Crypto
namespace Org::BouncyCastle::Crypto {
  // Forward declaring type: ISigner
  class ISigner;
}
// Forward declaring namespace: Org::BouncyCastle::Crypto::Parameters
namespace Org::BouncyCastle::Crypto::Parameters {
  // Forward declaring type: RsaPrivateCrtKeyParameters
  class RsaPrivateCrtKeyParameters;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: X509CertificateUtility/RSACertificateEncryptionProvider
  // [] Offset: FFFFFFFF
  class X509CertificateUtility::RSACertificateEncryptionProvider : public ::Il2CppObject/*, public GlobalNamespace::ICertificateEncryptionProvider*/ {
    public:
    // private readonly Org.BouncyCastle.Crypto.ISigner _signer
    // Size: 0x8
    // Offset: 0x10
    Org::BouncyCastle::Crypto::ISigner* signer;
    // Field size check
    static_assert(sizeof(Org::BouncyCastle::Crypto::ISigner*) == 0x8);
    // Creating value type constructor for type: RSACertificateEncryptionProvider
    RSACertificateEncryptionProvider(Org::BouncyCastle::Crypto::ISigner* signer_ = {}) noexcept : signer{signer_} {}
    // Creating interface conversion operator: operator GlobalNamespace::ICertificateEncryptionProvider
    operator GlobalNamespace::ICertificateEncryptionProvider() noexcept {
      return *reinterpret_cast<GlobalNamespace::ICertificateEncryptionProvider*>(this);
    }
    // Creating conversion operator: operator Org::BouncyCastle::Crypto::ISigner*
    constexpr operator Org::BouncyCastle::Crypto::ISigner*() const noexcept {
      return signer;
    }
    // public System.Void .ctor(Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters privateKey)
    // Offset: 0x1C222F0
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static X509CertificateUtility::RSACertificateEncryptionProvider* New_ctor(Org::BouncyCastle::Crypto::Parameters::RsaPrivateCrtKeyParameters* privateKey) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::X509CertificateUtility::RSACertificateEncryptionProvider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<X509CertificateUtility::RSACertificateEncryptionProvider*, creationType>(privateKey)));
    }
    // public System.Void Dispose()
    // Offset: 0x1C23738
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
    // public System.Byte[] SignData(System.Byte[] data, System.Int32 offset, System.Int32 length)
    // Offset: 0x1C2373C
    // Implemented from: ICertificateEncryptionProvider
    // Base method: System.Byte[] ICertificateEncryptionProvider::SignData(System.Byte[] data, System.Int32 offset, System.Int32 length)
    ::Array<uint8_t>* SignData(::Array<uint8_t>* data, int offset, int length);
  }; // X509CertificateUtility/RSACertificateEncryptionProvider
  #pragma pack(pop)
  static check_size<sizeof(X509CertificateUtility::RSACertificateEncryptionProvider), 16 + sizeof(Org::BouncyCastle::Crypto::ISigner*)> __GlobalNamespace_X509CertificateUtility_RSACertificateEncryptionProviderSizeCheck;
  static_assert(sizeof(X509CertificateUtility::RSACertificateEncryptionProvider) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::X509CertificateUtility::RSACertificateEncryptionProvider*, "", "X509CertificateUtility/RSACertificateEncryptionProvider");
