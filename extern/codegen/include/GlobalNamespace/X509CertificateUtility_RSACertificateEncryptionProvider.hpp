// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: X509CertificateUtility
#include "GlobalNamespace/X509CertificateUtility.hpp"
// Including type: ICertificateEncryptionProvider
#include "GlobalNamespace/ICertificateEncryptionProvider.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Crypto
namespace Org::BouncyCastle::Crypto {
  // Forward declaring type: ISigner
  class ISigner;
}
// Forward declaring namespace: Org::BouncyCastle::Crypto::Parameters
namespace Org::BouncyCastle::Crypto::Parameters {
  // Forward declaring type: RsaPrivateCrtKeyParameters
  class RsaPrivateCrtKeyParameters;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: X509CertificateUtility/RSACertificateEncryptionProvider
  class X509CertificateUtility::RSACertificateEncryptionProvider : public ::Il2CppObject/*, public GlobalNamespace::ICertificateEncryptionProvider*/ {
    public:
    // private readonly Org.BouncyCastle.Crypto.ISigner _signer
    // Offset: 0x10
    Org::BouncyCastle::Crypto::ISigner* signer;
    // Creating interface conversion operator: operator GlobalNamespace::ICertificateEncryptionProvider
    operator GlobalNamespace::ICertificateEncryptionProvider() noexcept {
      return *reinterpret_cast<GlobalNamespace::ICertificateEncryptionProvider*>(this);
    }
    // Creating conversion operator: operator Org::BouncyCastle::Crypto::ISigner*
    constexpr operator Org::BouncyCastle::Crypto::ISigner*() const noexcept {
      return signer;
    }
    // public System.Void .ctor(Org.BouncyCastle.Crypto.Parameters.RsaPrivateCrtKeyParameters privateKey)
    // Offset: 0x1E58F34
    static X509CertificateUtility::RSACertificateEncryptionProvider* New_ctor(Org::BouncyCastle::Crypto::Parameters::RsaPrivateCrtKeyParameters* privateKey);
    // public System.Void Dispose()
    // Offset: 0x1E5A37C
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
    // public System.Byte[] SignData(System.Byte[] data, System.Int32 offset, System.Int32 length)
    // Offset: 0x1E5A380
    // Implemented from: ICertificateEncryptionProvider
    // Base method: System.Byte[] ICertificateEncryptionProvider::SignData(System.Byte[] data, System.Int32 offset, System.Int32 length)
    ::Array<uint8_t>* SignData(::Array<uint8_t>* data, int offset, int length);
  }; // X509CertificateUtility/RSACertificateEncryptionProvider
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::X509CertificateUtility::RSACertificateEncryptionProvider*, "", "X509CertificateUtility/RSACertificateEncryptionProvider");
#pragma pack(pop)
