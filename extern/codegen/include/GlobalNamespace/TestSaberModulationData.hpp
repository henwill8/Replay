// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: TestSaberModulationData
  class TestSaberModulationData : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::TestSaberModulationData::ModulationType
    struct ModulationType;
    // Autogenerated type: TestSaberModulationData/ModulationType
    struct ModulationType : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: ModulationType
      constexpr ModulationType(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public TestSaberModulationData/ModulationType Off
      static constexpr const int Off = 0;
      // Get static field: static public TestSaberModulationData/ModulationType Off
      static GlobalNamespace::TestSaberModulationData::ModulationType _get_Off();
      // Set static field: static public TestSaberModulationData/ModulationType Off
      static void _set_Off(GlobalNamespace::TestSaberModulationData::ModulationType value);
      // static field const value: static public TestSaberModulationData/ModulationType Linear
      static constexpr const int Linear = 1;
      // Get static field: static public TestSaberModulationData/ModulationType Linear
      static GlobalNamespace::TestSaberModulationData::ModulationType _get_Linear();
      // Set static field: static public TestSaberModulationData/ModulationType Linear
      static void _set_Linear(GlobalNamespace::TestSaberModulationData::ModulationType value);
      // static field const value: static public TestSaberModulationData/ModulationType Sinus
      static constexpr const int Sinus = 2;
      // Get static field: static public TestSaberModulationData/ModulationType Sinus
      static GlobalNamespace::TestSaberModulationData::ModulationType _get_Sinus();
      // Set static field: static public TestSaberModulationData/ModulationType Sinus
      static void _set_Sinus(GlobalNamespace::TestSaberModulationData::ModulationType value);
      // static field const value: static public TestSaberModulationData/ModulationType Square
      static constexpr const int Square = 4;
      // Get static field: static public TestSaberModulationData/ModulationType Square
      static GlobalNamespace::TestSaberModulationData::ModulationType _get_Square();
      // Set static field: static public TestSaberModulationData/ModulationType Square
      static void _set_Square(GlobalNamespace::TestSaberModulationData::ModulationType value);
      // static field const value: static public TestSaberModulationData/ModulationType Perlin
      static constexpr const int Perlin = 8;
      // Get static field: static public TestSaberModulationData/ModulationType Perlin
      static GlobalNamespace::TestSaberModulationData::ModulationType _get_Perlin();
      // Set static field: static public TestSaberModulationData/ModulationType Perlin
      static void _set_Perlin(GlobalNamespace::TestSaberModulationData::ModulationType value);
      // static field const value: static public TestSaberModulationData/ModulationType Random
      static constexpr const int Random = 128;
      // Get static field: static public TestSaberModulationData/ModulationType Random
      static GlobalNamespace::TestSaberModulationData::ModulationType _get_Random();
      // Set static field: static public TestSaberModulationData/ModulationType Random
      static void _set_Random(GlobalNamespace::TestSaberModulationData::ModulationType value);
    }; // TestSaberModulationData/ModulationType
    // private System.Single _baseValue
    // Offset: 0x10
    float baseValue;
    // public TestSaberModulationData/ModulationType _modulationType
    // Offset: 0x14
    GlobalNamespace::TestSaberModulationData::ModulationType modulationType;
    // private System.Single _speed
    // Offset: 0x18
    float speed;
    // private System.Single _amount
    // Offset: 0x1C
    float amount;
    // public System.Single _multiplier
    // Offset: 0x20
    float multiplier;
    // public System.Single Evaluate(System.Single time)
    // Offset: 0xFECB04
    float Evaluate(float time);
    // public System.Void .ctor()
    // Offset: 0xFECC88
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static TestSaberModulationData* New_ctor();
  }; // TestSaberModulationData
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::TestSaberModulationData*, "", "TestSaberModulationData");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::TestSaberModulationData::ModulationType, "", "TestSaberModulationData/ModulationType");
#pragma pack(pop)
