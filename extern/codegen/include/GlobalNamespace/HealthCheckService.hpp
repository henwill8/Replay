// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: Thread
  class Thread;
  // Forward declaring type: ManualResetEvent
  class ManualResetEvent;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: HttpListener
  class HttpListener;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: HealthCheckService
  // [] Offset: FFFFFFFF
  class HealthCheckService : public ::Il2CppObject/*, public System::IDisposable*/ {
    public:
    // private readonly System.Int32 _port
    // Size: 0x4
    // Offset: 0x10
    int port;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: port and: runThread
    char __padding0[0x4] = {};
    // private readonly System.Threading.Thread _runThread
    // Size: 0x8
    // Offset: 0x18
    System::Threading::Thread* runThread;
    // Field size check
    static_assert(sizeof(System::Threading::Thread*) == 0x8);
    // private System.Boolean _disposed
    // Size: 0x1
    // Offset: 0x20
    bool disposed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: disposed and: manualResetEvent
    char __padding2[0x7] = {};
    // private System.Threading.ManualResetEvent _manualResetEvent
    // Size: 0x8
    // Offset: 0x28
    System::Threading::ManualResetEvent* manualResetEvent;
    // Field size check
    static_assert(sizeof(System::Threading::ManualResetEvent*) == 0x8);
    // private System.Net.HttpListener _listener
    // Size: 0x8
    // Offset: 0x30
    System::Net::HttpListener* listener;
    // Field size check
    static_assert(sizeof(System::Net::HttpListener*) == 0x8);
    // Creating value type constructor for type: HealthCheckService
    HealthCheckService(int port_ = {}, System::Threading::Thread* runThread_ = {}, bool disposed_ = {}, System::Threading::ManualResetEvent* manualResetEvent_ = {}, System::Net::HttpListener* listener_ = {}) noexcept : port{port_}, runThread{runThread_}, disposed{disposed_}, manualResetEvent{manualResetEvent_}, listener{listener_} {}
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // static field const value: static private System.Int32 kTimeoutLengthMs
    static constexpr const int kTimeoutLengthMs = 1000;
    // Get static field: static private System.Int32 kTimeoutLengthMs
    static int _get_kTimeoutLengthMs();
    // Set static field: static private System.Int32 kTimeoutLengthMs
    static void _set_kTimeoutLengthMs(int value);
    // public System.Void .ctor(System.Int32 port)
    // Offset: 0x11D54F4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HealthCheckService* New_ctor(int port) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HealthCheckService::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HealthCheckService*, creationType>(port)));
    }
    // public System.Void PollUpdate()
    // Offset: 0x11D56C4
    void PollUpdate();
    // private System.Void Run()
    // Offset: 0x11D578C
    void Run();
    // public System.Void Dispose()
    // Offset: 0x11D55EC
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
  }; // HealthCheckService
  #pragma pack(pop)
  static check_size<sizeof(HealthCheckService), 48 + sizeof(System::Net::HttpListener*)> __GlobalNamespace_HealthCheckServiceSizeCheck;
  static_assert(sizeof(HealthCheckService) == 0x38);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::HealthCheckService*, "", "HealthCheckService");
