// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataReader
  class NetDataReader;
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: INetSerializable
  class INetSerializable;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: INetworkPacketSubSerializer`1
  template<typename TData>
  class INetworkPacketSubSerializer_1 {
    public:
    // public System.Void Deserialize(LiteNetLib.Utils.NetDataReader reader, System.Int32 length, TData data)
    // Offset: 0xFFFFFFFF
    void GlobalNamespace_INetworkPacketSubSerializer_1_Deserialize(LiteNetLib::Utils::NetDataReader* reader, int length, TData data) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Deserialize", reader, length, data));
    }
    // public System.Void Serialize(LiteNetLib.Utils.NetDataWriter writer, LiteNetLib.Utils.INetSerializable packet)
    // Offset: 0xFFFFFFFF
    void GlobalNamespace_INetworkPacketSubSerializer_1_Serialize(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::Utils::INetSerializable* packet) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Serialize", writer, packet));
    }
    // public System.Boolean HandlesType(System.Type type)
    // Offset: 0xFFFFFFFF
    bool HandlesType(System::Type* type) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "HandlesType", type));
    }
  }; // INetworkPacketSubSerializer`1
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(GlobalNamespace::INetworkPacketSubSerializer_1, "", "INetworkPacketSubSerializer`1");
#pragma pack(pop)
