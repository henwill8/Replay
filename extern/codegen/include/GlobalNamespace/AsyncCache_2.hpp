// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: <>c__DisplayClass4_0 because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
  // Forward declaring type: Lazy`1<T>
  template<typename T>
  class Lazy_1;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System::Collections::Concurrent
namespace System::Collections::Concurrent {
  // Forward declaring type: ConcurrentDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class ConcurrentDictionary_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: AsyncCache`2
  template<typename TKey, typename TValue>
  class AsyncCache_2 : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::AsyncCache_2::$$c__DisplayClass4_0<TKey, TValue>
    class $$c__DisplayClass4_0;
    // Autogenerated type: AsyncCache`2/<>c__DisplayClass4_0
    class $$c__DisplayClass4_0 : public ::Il2CppObject, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = AsyncCache_2<TKey, TValue>*;
      static constexpr std::string_view NESTED_NAME = "$$c__DisplayClass4_0";
      // public TKey toAdd
      // Offset: 0x0
      TKey toAdd;
      // public AsyncCache`2<TKey,TValue> <>4__this
      // Offset: 0x0
      GlobalNamespace::AsyncCache_2<TKey, TValue>* $$4__this;
      // System.Threading.Tasks.Task`1<TValue> <get_Item>b__1()
      // Offset: 0xFFFFFFFF
      System::Threading::Tasks::Task_1<TValue>* $get_Item$b__1() {
        return THROW_UNLESS((il2cpp_utils::RunMethod<System::Threading::Tasks::Task_1<TValue>*>(this, "<get_Item>b__1")));
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      static typename AsyncCache_2<TKey, TValue>::$$c__DisplayClass4_0* New_ctor() {
        return THROW_UNLESS((il2cpp_utils::New<typename AsyncCache_2<TKey, TValue>::$$c__DisplayClass4_0*>()));
      }
    }; // AsyncCache`2/<>c__DisplayClass4_0
    // private readonly System.Func`2<TKey,System.Threading.Tasks.Task`1<TValue>> _valueFactory
    // Offset: 0x0
    System::Func_2<TKey, System::Threading::Tasks::Task_1<TValue>*>* valueFactory;
    // private readonly System.Collections.Concurrent.ConcurrentDictionary`2<TKey,System.Lazy`1<System.Threading.Tasks.Task`1<TValue>>> _map
    // Offset: 0x0
    System::Collections::Concurrent::ConcurrentDictionary_2<TKey, System::Lazy_1<System::Threading::Tasks::Task_1<TValue>*>*>* map;
    // public System.Void .ctor(System.Func`2<TKey,System.Threading.Tasks.Task`1<TValue>> valueFactory)
    // Offset: 0xFFFFFFFF
    static AsyncCache_2<TKey, TValue>* New_ctor(System::Func_2<TKey, System::Threading::Tasks::Task_1<TValue>*>* valueFactory) {
      return THROW_UNLESS((il2cpp_utils::New<AsyncCache_2<TKey, TValue>*>(valueFactory)));
    }
    // public System.Threading.Tasks.Task`1<TValue> get_Item(TKey key)
    // Offset: 0xFFFFFFFF
    System::Threading::Tasks::Task_1<TValue>* get_Item(TKey key) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<System::Threading::Tasks::Task_1<TValue>*>(this, "get_Item", key));
    }
    // public System.Void RemoveKey(TKey key)
    // Offset: 0xFFFFFFFF
    void RemoveKey(TKey key) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "RemoveKey", key));
    }
    // private System.Lazy`1<System.Threading.Tasks.Task`1<TValue>> <get_Item>b__4_0(TKey toAdd)
    // Offset: 0xFFFFFFFF
    System::Lazy_1<System::Threading::Tasks::Task_1<TValue>*>* $get_Item$b__4_0(TKey toAdd) {
      return THROW_UNLESS((il2cpp_utils::RunMethod<System::Lazy_1<System::Threading::Tasks::Task_1<TValue>*>*>(this, "<get_Item>b__4_0", toAdd)));
    }
  }; // AsyncCache`2
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(GlobalNamespace::AsyncCache_2, "", "AsyncCache`2");
#pragma pack(pop)
