// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LightWithIds
#include "GlobalNamespace/LightWithIds.hpp"
// Including type: ILightWithId
#include "GlobalNamespace/ILightWithId.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: LightWithIds/LightIntensityData
  // [] Offset: FFFFFFFF
  class LightWithIds::LightIntensityData : public ::Il2CppObject/*, public GlobalNamespace::ILightWithId*/ {
    public:
    // private System.Int32 _lightId
    // Size: 0x4
    // Offset: 0x10
    int lightId;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _intensity
    // Size: 0x4
    // Offset: 0x14
    float intensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Color _color
    // Size: 0x10
    // Offset: 0x18
    UnityEngine::Color color;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // private System.Boolean _isRegistered
    // Size: 0x1
    // Offset: 0x28
    bool isRegistered;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: LightIntensityData
    LightIntensityData(int lightId_ = {}, float intensity_ = {}, UnityEngine::Color color_ = {}, bool isRegistered_ = {}) noexcept : lightId{lightId_}, intensity{intensity_}, color{color_}, isRegistered{isRegistered_} {}
    // Creating interface conversion operator: operator GlobalNamespace::ILightWithId
    operator GlobalNamespace::ILightWithId() noexcept {
      return *reinterpret_cast<GlobalNamespace::ILightWithId*>(this);
    }
    // public System.Single get_intensity()
    // Offset: 0x1DA0804
    float get_intensity();
    // public UnityEngine.Color get_color()
    // Offset: 0x1DA080C
    UnityEngine::Color get_color();
    // public System.Int32 get_lightId()
    // Offset: 0x1DA07FC
    // Implemented from: ILightWithId
    // Base method: System.Int32 ILightWithId::get_lightId()
    int get_lightId();
    // public System.Boolean get_isRegistered()
    // Offset: 0x1DA0818
    // Implemented from: ILightWithId
    // Base method: System.Boolean ILightWithId::get_isRegistered()
    bool get_isRegistered();
    // public System.Void __SetIsRegistered()
    // Offset: 0x1DA0820
    // Implemented from: ILightWithId
    // Base method: System.Void ILightWithId::__SetIsRegistered()
    void __SetIsRegistered();
    // public System.Void __SetIsUnRegistered()
    // Offset: 0x1DA082C
    // Implemented from: ILightWithId
    // Base method: System.Void ILightWithId::__SetIsUnRegistered()
    void __SetIsUnRegistered();
    // public System.Void ColorWasSet(UnityEngine.Color newColor)
    // Offset: 0x1DA0834
    // Implemented from: ILightWithId
    // Base method: System.Void ILightWithId::ColorWasSet(UnityEngine.Color newColor)
    void ColorWasSet(UnityEngine::Color newColor);
    // public System.Void .ctor()
    // Offset: 0x1DA0854
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightWithIds::LightIntensityData* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightWithIds::LightIntensityData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightWithIds::LightIntensityData*, creationType>()));
    }
  }; // LightWithIds/LightIntensityData
  #pragma pack(pop)
  static check_size<sizeof(LightWithIds::LightIntensityData), 40 + sizeof(bool)> __GlobalNamespace_LightWithIds_LightIntensityDataSizeCheck;
  static_assert(sizeof(LightWithIds::LightIntensityData) == 0x29);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LightWithIds::LightIntensityData*, "", "LightWithIds/LightIntensityData");
