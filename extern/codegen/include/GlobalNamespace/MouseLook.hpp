// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Quaternion
#include "UnityEngine/Quaternion.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x51
  #pragma pack(push, 1)
  // Autogenerated type: MouseLook
  // [] Offset: FFFFFFFF
  class MouseLook : public ::Il2CppObject {
    public:
    // private System.Single _xSensitivity
    // Size: 0x4
    // Offset: 0x10
    float xSensitivity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _ySensitivity
    // Size: 0x4
    // Offset: 0x14
    float ySensitivity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _clampVerticalRotation
    // Size: 0x1
    // Offset: 0x18
    bool clampVerticalRotation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: clampVerticalRotation and: minimumX
    char __padding2[0x3] = {};
    // private System.Single _minimumX
    // Size: 0x4
    // Offset: 0x1C
    float minimumX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _maximumX
    // Size: 0x4
    // Offset: 0x20
    float maximumX;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _smooth
    // Size: 0x1
    // Offset: 0x24
    bool smooth;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: smooth and: smoothTime
    char __padding5[0x3] = {};
    // private System.Single _smoothTime
    // Size: 0x4
    // Offset: 0x28
    float smoothTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _lockCursor
    // Size: 0x1
    // Offset: 0x2C
    bool lockCursor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: lockCursor and: characterTargetRot
    char __padding7[0x3] = {};
    // private UnityEngine.Quaternion _characterTargetRot
    // Size: 0x10
    // Offset: 0x30
    UnityEngine::Quaternion characterTargetRot;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // private UnityEngine.Quaternion _cameraTargetRot
    // Size: 0x10
    // Offset: 0x40
    UnityEngine::Quaternion cameraTargetRot;
    // Field size check
    static_assert(sizeof(UnityEngine::Quaternion) == 0x10);
    // private System.Boolean _cursorIsLocked
    // Size: 0x1
    // Offset: 0x50
    bool cursorIsLocked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: MouseLook
    MouseLook(float xSensitivity_ = {}, float ySensitivity_ = {}, bool clampVerticalRotation_ = {}, float minimumX_ = {}, float maximumX_ = {}, bool smooth_ = {}, float smoothTime_ = {}, bool lockCursor_ = {}, UnityEngine::Quaternion characterTargetRot_ = {}, UnityEngine::Quaternion cameraTargetRot_ = {}, bool cursorIsLocked_ = {}) noexcept : xSensitivity{xSensitivity_}, ySensitivity{ySensitivity_}, clampVerticalRotation{clampVerticalRotation_}, minimumX{minimumX_}, maximumX{maximumX_}, smooth{smooth_}, smoothTime{smoothTime_}, lockCursor{lockCursor_}, characterTargetRot{characterTargetRot_}, cameraTargetRot{cameraTargetRot_}, cursorIsLocked{cursorIsLocked_} {}
    // public System.Void Init(UnityEngine.Transform character, UnityEngine.Transform camera)
    // Offset: 0x1014A3C
    void Init(UnityEngine::Transform* character, UnityEngine::Transform* camera);
    // public System.Void LookRotation(UnityEngine.Transform character, UnityEngine.Transform camera)
    // Offset: 0x1014AD4
    void LookRotation(UnityEngine::Transform* character, UnityEngine::Transform* camera);
    // public System.Void SetCursorLock(System.Boolean value)
    // Offset: 0x1014E84
    void SetCursorLock(bool value);
    // public System.Void UpdateCursorLock()
    // Offset: 0x1014E74
    void UpdateCursorLock();
    // private System.Void InternalLockUpdate()
    // Offset: 0x1014EB8
    void InternalLockUpdate();
    // private UnityEngine.Quaternion ClampRotationAroundXAxis(UnityEngine.Quaternion q)
    // Offset: 0x1014DAC
    UnityEngine::Quaternion ClampRotationAroundXAxis(UnityEngine::Quaternion q);
    // public System.Void .ctor()
    // Offset: 0x1014F34
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MouseLook* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MouseLook::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MouseLook*, creationType>()));
    }
  }; // MouseLook
  #pragma pack(pop)
  static check_size<sizeof(MouseLook), 80 + sizeof(bool)> __GlobalNamespace_MouseLookSizeCheck;
  static_assert(sizeof(MouseLook) == 0x51);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MouseLook*, "", "MouseLook");
