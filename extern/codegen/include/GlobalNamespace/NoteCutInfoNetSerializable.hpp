// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.Utils.INetSerializable
#include "LiteNetLib/Utils/INetSerializable.hpp"
// Including type: UnitVector3Serializable
#include "GlobalNamespace/UnitVector3Serializable.hpp"
// Including type: Vector3Serializable
#include "GlobalNamespace/Vector3Serializable.hpp"
// Including type: QuaternionSerializable
#include "GlobalNamespace/QuaternionSerializable.hpp"
// Including type: ColorType
#include "GlobalNamespace/ColorType.hpp"
// Including type: NoteLineLayer
#include "GlobalNamespace/NoteLineLayer.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NoteCutInfo
  class NoteCutInfo;
  // Forward declaring type: NoteData
  class NoteData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataReader
  class NetDataReader;
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: NoteCutInfoNetSerializable
  class NoteCutInfoNetSerializable : public ::Il2CppObject/*, public LiteNetLib::Utils::INetSerializable*/ {
    public:
    // public System.Single saberSpeed
    // Offset: 0x10
    float saberSpeed;
    // public System.Boolean cutWasOk
    // Offset: 0x14
    bool cutWasOk;
    // public UnitVector3Serializable saberDir
    // Offset: 0x18
    GlobalNamespace::UnitVector3Serializable saberDir;
    // public Vector3Serializable cutPoint
    // Offset: 0x24
    GlobalNamespace::Vector3Serializable cutPoint;
    // public UnitVector3Serializable cutNormal
    // Offset: 0x30
    GlobalNamespace::UnitVector3Serializable cutNormal;
    // public Vector3Serializable notePosition
    // Offset: 0x3C
    GlobalNamespace::Vector3Serializable notePosition;
    // public QuaternionSerializable noteRotation
    // Offset: 0x48
    GlobalNamespace::QuaternionSerializable noteRotation;
    // public ColorType colorType
    // Offset: 0x58
    GlobalNamespace::ColorType colorType;
    // public System.Single noteTime
    // Offset: 0x5C
    float noteTime;
    // public System.Int32 noteLineIndex
    // Offset: 0x60
    int noteLineIndex;
    // public NoteLineLayer noteLineLayer
    // Offset: 0x64
    GlobalNamespace::NoteLineLayer noteLineLayer;
    // public System.Single timeToNextColorNote
    // Offset: 0x68
    float timeToNextColorNote;
    // public Vector3Serializable moveVec
    // Offset: 0x6C
    GlobalNamespace::Vector3Serializable moveVec;
    // Creating interface conversion operator: operator LiteNetLib::Utils::INetSerializable
    operator LiteNetLib::Utils::INetSerializable() noexcept {
      return *reinterpret_cast<LiteNetLib::Utils::INetSerializable*>(this);
    }
    // public System.Void .ctor(NoteCutInfo noteCutInfo, NoteData noteData, UnityEngine.Vector3 notePosition, UnityEngine.Quaternion noteRotation, UnityEngine.Vector3 moveVec)
    // Offset: 0x19A6BE4
    static NoteCutInfoNetSerializable* New_ctor(GlobalNamespace::NoteCutInfo* noteCutInfo, GlobalNamespace::NoteData* noteData, UnityEngine::Vector3 notePosition, UnityEngine::Quaternion noteRotation, UnityEngine::Vector3 moveVec);
    // private System.Void LiteNetLib.Utils.INetSerializable.Deserialize(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0x19A6204
    // Implemented from: LiteNetLib.Utils.INetSerializable
    // Base method: System.Void INetSerializable::Deserialize(LiteNetLib.Utils.NetDataReader reader)
    void LiteNetLib_Utils_INetSerializable_Deserialize(LiteNetLib::Utils::NetDataReader* reader);
    // private System.Void LiteNetLib.Utils.INetSerializable.Serialize(LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0x19A661C
    // Implemented from: LiteNetLib.Utils.INetSerializable
    // Base method: System.Void INetSerializable::Serialize(LiteNetLib.Utils.NetDataWriter writer)
    void LiteNetLib_Utils_INetSerializable_Serialize(LiteNetLib::Utils::NetDataWriter* writer);
    // public System.Void .ctor()
    // Offset: 0x19A6BDC
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static NoteCutInfoNetSerializable* New_ctor();
  }; // NoteCutInfoNetSerializable
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::NoteCutInfoNetSerializable*, "", "NoteCutInfoNetSerializable");
#pragma pack(pop)
