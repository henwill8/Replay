// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GameScenesManager
  class GameScenesManager;
  // Forward declaring type: FPSCounter
  class FPSCounter;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x4C
  #pragma pack(push, 1)
  // Autogenerated type: FPSCounterUIController
  // [] Offset: FFFFFFFF
  // [RequireComponent] Offset: D30634
  class FPSCounterUIController : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::FPSCounterUIController::$Start$d__8
    class $Start$d__8;
    // private System.Single _uiUpdateTimeInterval
    // Size: 0x4
    // Offset: 0x18
    float uiUpdateTimeInterval;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: uiUpdateTimeInterval and: currentFPSText
    char __padding0[0x4] = {};
    // private TMPro.TextMeshProUGUI _currentFPSText
    // Size: 0x8
    // Offset: 0x20
    TMPro::TextMeshProUGUI* currentFPSText;
    // Field size check
    static_assert(sizeof(TMPro::TextMeshProUGUI*) == 0x8);
    // private TMPro.TextMeshProUGUI _lowestFPSText
    // Size: 0x8
    // Offset: 0x28
    TMPro::TextMeshProUGUI* lowestFPSText;
    // Field size check
    static_assert(sizeof(TMPro::TextMeshProUGUI*) == 0x8);
    // private TMPro.TextMeshProUGUI _highestFPSText
    // Size: 0x8
    // Offset: 0x30
    TMPro::TextMeshProUGUI* highestFPSText;
    // Field size check
    static_assert(sizeof(TMPro::TextMeshProUGUI*) == 0x8);
    // [InjectAttribute] Offset: 0xD3E0B4
    // private GameScenesManager _gameScenesManager
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::GameScenesManager* gameScenesManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameScenesManager*) == 0x8);
    // private FPSCounter _fpsCounter
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::FPSCounter* fpsCounter;
    // Field size check
    static_assert(sizeof(GlobalNamespace::FPSCounter*) == 0x8);
    // private System.Single _timeToUpdateUI
    // Size: 0x4
    // Offset: 0x48
    float timeToUpdateUI;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: FPSCounterUIController
    FPSCounterUIController(float uiUpdateTimeInterval_ = {}, TMPro::TextMeshProUGUI* currentFPSText_ = {}, TMPro::TextMeshProUGUI* lowestFPSText_ = {}, TMPro::TextMeshProUGUI* highestFPSText_ = {}, GlobalNamespace::GameScenesManager* gameScenesManager_ = {}, GlobalNamespace::FPSCounter* fpsCounter_ = {}, float timeToUpdateUI_ = {}) noexcept : uiUpdateTimeInterval{uiUpdateTimeInterval_}, currentFPSText{currentFPSText_}, lowestFPSText{lowestFPSText_}, highestFPSText{highestFPSText_}, gameScenesManager{gameScenesManager_}, fpsCounter{fpsCounter_}, timeToUpdateUI{timeToUpdateUI_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void Awake()
    // Offset: 0xF29D54
    void Awake();
    // protected System.Collections.IEnumerator Start()
    // Offset: 0xF29DCC
    System::Collections::IEnumerator* Start();
    // protected System.Void LateUpdate()
    // Offset: 0xF29E74
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0xF29F60
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FPSCounterUIController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FPSCounterUIController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FPSCounterUIController*, creationType>()));
    }
  }; // FPSCounterUIController
  #pragma pack(pop)
  static check_size<sizeof(FPSCounterUIController), 72 + sizeof(float)> __GlobalNamespace_FPSCounterUIControllerSizeCheck;
  static_assert(sizeof(FPSCounterUIController) == 0x4C);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::FPSCounterUIController*, "", "FPSCounterUIController");
