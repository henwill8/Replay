// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: ColorChangeUIEventType
#include "GlobalNamespace/ColorChangeUIEventType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ColorSaturationValueSlider
  class ColorSaturationValueSlider;
  // Forward declaring type: ColorHueSlider
  class ColorHueSlider;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x3C
  #pragma pack(push, 1)
  // Autogenerated type: HSVPanelController
  // [] Offset: FFFFFFFF
  class HSVPanelController : public UnityEngine::MonoBehaviour {
    public:
    // private ColorSaturationValueSlider _colorSaturationValueSlider
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::ColorSaturationValueSlider* colorSaturationValueSlider;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorSaturationValueSlider*) == 0x8);
    // private ColorHueSlider _colorHueSlider
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::ColorHueSlider* colorHueSlider;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorHueSlider*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD3EA7C
    // private System.Action`2<UnityEngine.Color,ColorChangeUIEventType> colorDidChangeEvent
    // Size: 0x8
    // Offset: 0x28
    System::Action_2<UnityEngine::Color, GlobalNamespace::ColorChangeUIEventType>* colorDidChangeEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<UnityEngine::Color, GlobalNamespace::ColorChangeUIEventType>*) == 0x8);
    // private UnityEngine.Vector3 _hsvColor
    // Size: 0xC
    // Offset: 0x30
    UnityEngine::Vector3 hsvColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // Creating value type constructor for type: HSVPanelController
    HSVPanelController(GlobalNamespace::ColorSaturationValueSlider* colorSaturationValueSlider_ = {}, GlobalNamespace::ColorHueSlider* colorHueSlider_ = {}, System::Action_2<UnityEngine::Color, GlobalNamespace::ColorChangeUIEventType>* colorDidChangeEvent_ = {}, UnityEngine::Vector3 hsvColor_ = {}) noexcept : colorSaturationValueSlider{colorSaturationValueSlider_}, colorHueSlider{colorHueSlider_}, colorDidChangeEvent{colorDidChangeEvent_}, hsvColor{hsvColor_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void add_colorDidChangeEvent(System.Action`2<UnityEngine.Color,ColorChangeUIEventType> value)
    // Offset: 0xFC8144
    void add_colorDidChangeEvent(System::Action_2<UnityEngine::Color, GlobalNamespace::ColorChangeUIEventType>* value);
    // public System.Void remove_colorDidChangeEvent(System.Action`2<UnityEngine.Color,ColorChangeUIEventType> value)
    // Offset: 0xFC81E8
    void remove_colorDidChangeEvent(System::Action_2<UnityEngine::Color, GlobalNamespace::ColorChangeUIEventType>* value);
    // public UnityEngine.Color get_color()
    // Offset: 0xFC828C
    UnityEngine::Color get_color();
    // public System.Void set_color(UnityEngine.Color value)
    // Offset: 0xFC829C
    void set_color(UnityEngine::Color value);
    // protected System.Void Awake()
    // Offset: 0xFC8364
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0xFC8444
    void OnDestroy();
    // private System.Void HandleColorSaturationOrValueDidChange(ColorSaturationValueSlider slider, UnityEngine.Vector2 colorSaturationAndValue, ColorChangeUIEventType colorChangeUIEventType)
    // Offset: 0xFC859C
    void HandleColorSaturationOrValueDidChange(GlobalNamespace::ColorSaturationValueSlider* slider, UnityEngine::Vector2 colorSaturationAndValue, GlobalNamespace::ColorChangeUIEventType colorChangeUIEventType);
    // private System.Void HandleColorHueDidChange(ColorHueSlider slider, System.Single hue, ColorChangeUIEventType colorChangeUIEventType)
    // Offset: 0xFC8634
    void HandleColorHueDidChange(GlobalNamespace::ColorHueSlider* slider, float hue, GlobalNamespace::ColorChangeUIEventType colorChangeUIEventType);
    // private System.Void RefreshSlidersValues()
    // Offset: 0xFC82FC
    void RefreshSlidersValues();
    // private System.Void RefreshSlidersColors()
    // Offset: 0xFC82D8
    void RefreshSlidersColors();
    // public System.Void .ctor()
    // Offset: 0xFC86C4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HSVPanelController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HSVPanelController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HSVPanelController*, creationType>()));
    }
  }; // HSVPanelController
  #pragma pack(pop)
  static check_size<sizeof(HSVPanelController), 48 + sizeof(UnityEngine::Vector3)> __GlobalNamespace_HSVPanelControllerSizeCheck;
  static_assert(sizeof(HSVPanelController) == 0x3C);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::HSVPanelController*, "", "HSVPanelController");
