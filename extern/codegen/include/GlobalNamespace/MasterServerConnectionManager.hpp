// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IConnectionManager
#include "GlobalNamespace/IConnectionManager.hpp"
// Including type: MasterServer.MessageHandler/IMessageSender
#include "MasterServer/MessageHandler_IMessageSender.hpp"
// Including type: DiscoveryPolicy
#include "GlobalNamespace/DiscoveryPolicy.hpp"
// Including type: InvitePolicy
#include "GlobalNamespace/InvitePolicy.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
// Including type: PublicServerInfo
#include "GlobalNamespace/PublicServerInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: MasterServer
namespace MasterServer {
  // Forward declaring type: UserMessageHandler
  class UserMessageHandler;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationTokenSource
  class CancellationTokenSource;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LiteNetLibConnectionManager
  class LiteNetLibConnectionManager;
  // Forward declaring type: IConnection
  class IConnection;
  // Forward declaring type: MasterServerEndPoint
  class MasterServerEndPoint;
  // Forward declaring type: IAuthenticationTokenProvider
  class IAuthenticationTokenProvider;
  // Skipping declaration: ConnectionAttempt because it is already included!
  // Forward declaring type: GameplayServerFilter
  struct GameplayServerFilter;
  // Forward declaring type: IConnectionInitParams`1<T>
  template<typename T>
  class IConnectionInitParams_1;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  class Action_3;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataReader
  class NetDataReader;
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xC8
  #pragma pack(push, 1)
  // Autogenerated type: MasterServerConnectionManager
  // [] Offset: FFFFFFFF
  class MasterServerConnectionManager : public ::Il2CppObject/*, public GlobalNamespace::IConnectionManager, public MasterServer::MessageHandler::IMessageSender*/ {
    public:
    // Nested type: GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt
    struct ConnectionAttempt;
    // Nested type: GlobalNamespace::MasterServerConnectionManager::ConnectionState
    struct ConnectionState;
    // Nested type: GlobalNamespace::MasterServerConnectionManager::MasterServerConnectionManagerParamsBase
    class MasterServerConnectionManagerParamsBase;
    // Nested type: GlobalNamespace::MasterServerConnectionManager::StartServerParams
    class StartServerParams;
    // Nested type: GlobalNamespace::MasterServerConnectionManager::ConnectToServerParams
    class ConnectToServerParams;
    // Nested type: GlobalNamespace::MasterServerConnectionManager::ConnectToMatchmakingParams
    class ConnectToMatchmakingParams;
    // Nested type: GlobalNamespace::MasterServerConnectionManager::StartClientParams
    class StartClientParams;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: MasterServerConnectionManager/ConnectionAttempt
    // [] Offset: FFFFFFFF
    struct ConnectionAttempt/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: ConnectionAttempt
      constexpr ConnectionAttempt(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MasterServerConnectionManager/ConnectionAttempt None
      static constexpr const int None = 0;
      // Get static field: static public MasterServerConnectionManager/ConnectionAttempt None
      static GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt _get_None();
      // Set static field: static public MasterServerConnectionManager/ConnectionAttempt None
      static void _set_None(GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt value);
      // static field const value: static public MasterServerConnectionManager/ConnectionAttempt NatPunchthrough
      static constexpr const int NatPunchthrough = 1;
      // Get static field: static public MasterServerConnectionManager/ConnectionAttempt NatPunchthrough
      static GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt _get_NatPunchthrough();
      // Set static field: static public MasterServerConnectionManager/ConnectionAttempt NatPunchthrough
      static void _set_NatPunchthrough(GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt value);
      // static field const value: static public MasterServerConnectionManager/ConnectionAttempt DedicatedServer
      static constexpr const int DedicatedServer = 2;
      // Get static field: static public MasterServerConnectionManager/ConnectionAttempt DedicatedServer
      static GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt _get_DedicatedServer();
      // Set static field: static public MasterServerConnectionManager/ConnectionAttempt DedicatedServer
      static void _set_DedicatedServer(GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt value);
    }; // MasterServerConnectionManager/ConnectionAttempt
    #pragma pack(pop)
    static check_size<sizeof(MasterServerConnectionManager::ConnectionAttempt), 0 + sizeof(int)> __GlobalNamespace_MasterServerConnectionManager_ConnectionAttemptSizeCheck;
    static_assert(sizeof(MasterServerConnectionManager::ConnectionAttempt) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: MasterServerConnectionManager/ConnectionState
    // [] Offset: FFFFFFFF
    struct ConnectionState/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: ConnectionState
      constexpr ConnectionState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MasterServerConnectionManager/ConnectionState Unconnected
      static constexpr const int Unconnected = 0;
      // Get static field: static public MasterServerConnectionManager/ConnectionState Unconnected
      static GlobalNamespace::MasterServerConnectionManager::ConnectionState _get_Unconnected();
      // Set static field: static public MasterServerConnectionManager/ConnectionState Unconnected
      static void _set_Unconnected(GlobalNamespace::MasterServerConnectionManager::ConnectionState value);
      // static field const value: static public MasterServerConnectionManager/ConnectionState Connecting
      static constexpr const int Connecting = 1;
      // Get static field: static public MasterServerConnectionManager/ConnectionState Connecting
      static GlobalNamespace::MasterServerConnectionManager::ConnectionState _get_Connecting();
      // Set static field: static public MasterServerConnectionManager/ConnectionState Connecting
      static void _set_Connecting(GlobalNamespace::MasterServerConnectionManager::ConnectionState value);
      // static field const value: static public MasterServerConnectionManager/ConnectionState Connected
      static constexpr const int Connected = 2;
      // Get static field: static public MasterServerConnectionManager/ConnectionState Connected
      static GlobalNamespace::MasterServerConnectionManager::ConnectionState _get_Connected();
      // Set static field: static public MasterServerConnectionManager/ConnectionState Connected
      static void _set_Connected(GlobalNamespace::MasterServerConnectionManager::ConnectionState value);
      // static field const value: static public MasterServerConnectionManager/ConnectionState Disconnecting
      static constexpr const int Disconnecting = 3;
      // Get static field: static public MasterServerConnectionManager/ConnectionState Disconnecting
      static GlobalNamespace::MasterServerConnectionManager::ConnectionState _get_Disconnecting();
      // Set static field: static public MasterServerConnectionManager/ConnectionState Disconnecting
      static void _set_Disconnecting(GlobalNamespace::MasterServerConnectionManager::ConnectionState value);
    }; // MasterServerConnectionManager/ConnectionState
    #pragma pack(pop)
    static check_size<sizeof(MasterServerConnectionManager::ConnectionState), 0 + sizeof(int)> __GlobalNamespace_MasterServerConnectionManager_ConnectionStateSizeCheck;
    static_assert(sizeof(MasterServerConnectionManager::ConnectionState) == 0x4);
    // private readonly LiteNetLibConnectionManager _liteNetLibConnectionManager
    // Size: 0x8
    // Offset: 0x10
    GlobalNamespace::LiteNetLibConnectionManager* liteNetLibConnectionManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LiteNetLibConnectionManager*) == 0x8);
    // private System.String _code
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* code;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Net.IPEndPoint _serverEndPoint
    // Size: 0x8
    // Offset: 0x20
    System::Net::IPEndPoint* serverEndPoint;
    // Field size check
    static_assert(sizeof(System::Net::IPEndPoint*) == 0x8);
    // private System.String _serverName
    // Size: 0x8
    // Offset: 0x28
    ::Il2CppString* serverName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String _serverPassword
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppString* serverPassword;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String _serverUserId
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppString* serverUserId;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String _serverUserName
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppString* serverUserName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private MasterServerConnectionManager/ConnectionAttempt _connectionAttempt
    // Size: 0x4
    // Offset: 0x48
    GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt connectionAttempt;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt) == 0x4);
    // Padding between fields: connectionAttempt and: messageHandler
    char __padding7[0x4] = {};
    // private MasterServer.UserMessageHandler _messageHandler
    // Size: 0x8
    // Offset: 0x50
    MasterServer::UserMessageHandler* messageHandler;
    // Field size check
    static_assert(sizeof(MasterServer::UserMessageHandler*) == 0x8);
    // private DiscoveryPolicy _discoveryPolicy
    // Size: 0x1
    // Offset: 0x58
    GlobalNamespace::DiscoveryPolicy discoveryPolicy;
    // Field size check
    static_assert(sizeof(GlobalNamespace::DiscoveryPolicy) == 0x1);
    // Padding between fields: discoveryPolicy and: invitePolicy
    char __padding9[0x3] = {};
    // private InvitePolicy _invitePolicy
    // Size: 0x4
    // Offset: 0x5C
    GlobalNamespace::InvitePolicy invitePolicy;
    // Field size check
    static_assert(sizeof(GlobalNamespace::InvitePolicy) == 0x4);
    // private GameplayServerConfiguration _configuration
    // Size: 0x18
    // Offset: 0x60
    GlobalNamespace::GameplayServerConfiguration configuration;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayServerConfiguration) == 0x18);
    // private System.Int32 _currentPlayerCount
    // Size: 0x4
    // Offset: 0x78
    int currentPlayerCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _maxPlayerCount
    // Size: 0x4
    // Offset: 0x7C
    int maxPlayerCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private MasterServerConnectionManager/ConnectionState _connectionState
    // Size: 0x4
    // Offset: 0x80
    GlobalNamespace::MasterServerConnectionManager::ConnectionState connectionState;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MasterServerConnectionManager::ConnectionState) == 0x4);
    // Padding between fields: connectionState and: connectionCancellationTokenSource
    char __padding14[0x4] = {};
    // private System.Threading.CancellationTokenSource _connectionCancellationTokenSource
    // Size: 0x8
    // Offset: 0x88
    System::Threading::CancellationTokenSource* connectionCancellationTokenSource;
    // Field size check
    static_assert(sizeof(System::Threading::CancellationTokenSource*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1BCEC
    // private System.Action onConnectedEvent
    // Size: 0x8
    // Offset: 0x90
    System::Action* onConnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1BCFC
    // private System.Action`1<DisconnectedReason> onDisconnectedEvent
    // Size: 0x8
    // Offset: 0x98
    System::Action_1<GlobalNamespace::DisconnectedReason>* onDisconnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::DisconnectedReason>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1BD0C
    // private System.Action`1<ConnectionFailedReason> onConnectionFailedEvent
    // Size: 0x8
    // Offset: 0xA0
    System::Action_1<GlobalNamespace::ConnectionFailedReason>* onConnectionFailedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::ConnectionFailedReason>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1BD1C
    // private System.Action`1<IConnection> onConnectionConnectedEvent
    // Size: 0x8
    // Offset: 0xA8
    System::Action_1<GlobalNamespace::IConnection*>* onConnectionConnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::IConnection*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1BD2C
    // private System.Action`2<IConnection,DisconnectedReason> onConnectionDisconnectedEvent
    // Size: 0x8
    // Offset: 0xB0
    System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>* onConnectionDisconnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1BD3C
    // private System.Action`2<IConnection,System.Single> onLatencyUpdatedEvent
    // Size: 0x8
    // Offset: 0xB8
    System::Action_2<GlobalNamespace::IConnection*, float>* onLatencyUpdatedEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<GlobalNamespace::IConnection*, float>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD1BD4C
    // private System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,LiteNetLib.DeliveryMethod> onReceivedDataEvent
    // Size: 0x8
    // Offset: 0xC0
    System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* onReceivedDataEvent;
    // Field size check
    static_assert(sizeof(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>*) == 0x8);
    // Creating value type constructor for type: MasterServerConnectionManager
    MasterServerConnectionManager(GlobalNamespace::LiteNetLibConnectionManager* liteNetLibConnectionManager_ = {}, ::Il2CppString* code_ = {}, System::Net::IPEndPoint* serverEndPoint_ = {}, ::Il2CppString* serverName_ = {}, ::Il2CppString* serverPassword_ = {}, ::Il2CppString* serverUserId_ = {}, ::Il2CppString* serverUserName_ = {}, GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt connectionAttempt_ = {}, MasterServer::UserMessageHandler* messageHandler_ = {}, GlobalNamespace::DiscoveryPolicy discoveryPolicy_ = {}, GlobalNamespace::InvitePolicy invitePolicy_ = {}, GlobalNamespace::GameplayServerConfiguration configuration_ = {}, int currentPlayerCount_ = {}, int maxPlayerCount_ = {}, GlobalNamespace::MasterServerConnectionManager::ConnectionState connectionState_ = {}, System::Threading::CancellationTokenSource* connectionCancellationTokenSource_ = {}, System::Action* onConnectedEvent_ = {}, System::Action_1<GlobalNamespace::DisconnectedReason>* onDisconnectedEvent_ = {}, System::Action_1<GlobalNamespace::ConnectionFailedReason>* onConnectionFailedEvent_ = {}, System::Action_1<GlobalNamespace::IConnection*>* onConnectionConnectedEvent_ = {}, System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>* onConnectionDisconnectedEvent_ = {}, System::Action_2<GlobalNamespace::IConnection*, float>* onLatencyUpdatedEvent_ = {}, System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* onReceivedDataEvent_ = {}) noexcept : liteNetLibConnectionManager{liteNetLibConnectionManager_}, code{code_}, serverEndPoint{serverEndPoint_}, serverName{serverName_}, serverPassword{serverPassword_}, serverUserId{serverUserId_}, serverUserName{serverUserName_}, connectionAttempt{connectionAttempt_}, messageHandler{messageHandler_}, discoveryPolicy{discoveryPolicy_}, invitePolicy{invitePolicy_}, configuration{configuration_}, currentPlayerCount{currentPlayerCount_}, maxPlayerCount{maxPlayerCount_}, connectionState{connectionState_}, connectionCancellationTokenSource{connectionCancellationTokenSource_}, onConnectedEvent{onConnectedEvent_}, onDisconnectedEvent{onDisconnectedEvent_}, onConnectionFailedEvent{onConnectionFailedEvent_}, onConnectionConnectedEvent{onConnectionConnectedEvent_}, onConnectionDisconnectedEvent{onConnectionDisconnectedEvent_}, onLatencyUpdatedEvent{onLatencyUpdatedEvent_}, onReceivedDataEvent{onReceivedDataEvent_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IConnectionManager
    operator GlobalNamespace::IConnectionManager() noexcept {
      return *reinterpret_cast<GlobalNamespace::IConnectionManager*>(this);
    }
    // Creating interface conversion operator: operator MasterServer::MessageHandler::IMessageSender
    operator MasterServer::MessageHandler::IMessageSender() noexcept {
      return *reinterpret_cast<MasterServer::MessageHandler::IMessageSender*>(this);
    }
    // public System.Int32 get_port()
    // Offset: 0x112B6CC
    int get_port();
    // public System.String get_secret()
    // Offset: 0x112B6E8
    ::Il2CppString* get_secret();
    // public System.String get_serverName()
    // Offset: 0x112B704
    ::Il2CppString* get_serverName();
    // public System.String get_serverPassword()
    // Offset: 0x112B70C
    ::Il2CppString* get_serverPassword();
    // public System.Int32 get_maxPlayerCount()
    // Offset: 0x112B714
    int get_maxPlayerCount();
    // public DiscoveryPolicy get_discoveryPolicy()
    // Offset: 0x112B71C
    GlobalNamespace::DiscoveryPolicy get_discoveryPolicy();
    // public InvitePolicy get_invitePolicy()
    // Offset: 0x112B724
    GlobalNamespace::InvitePolicy get_invitePolicy();
    // public GameplayServerConfiguration get_configuration()
    // Offset: 0x112B72C
    GlobalNamespace::GameplayServerConfiguration get_configuration();
    // public System.String get_code()
    // Offset: 0x112B740
    ::Il2CppString* get_code();
    // public System.Net.IPEndPoint get_serverEndPoint()
    // Offset: 0x112B748
    System::Net::IPEndPoint* get_serverEndPoint();
    // public System.String get_serverUserId()
    // Offset: 0x112B750
    ::Il2CppString* get_serverUserId();
    // public System.String get_serverUserName()
    // Offset: 0x112B758
    ::Il2CppString* get_serverUserName();
    // private System.Void InitMasterServerHandler(MasterServerEndPoint masterServerEndPoint, IAuthenticationTokenProvider authenticationTokenProvider)
    // Offset: 0x112BA70
    void InitMasterServerHandler(GlobalNamespace::MasterServerEndPoint* masterServerEndPoint, GlobalNamespace::IAuthenticationTokenProvider* authenticationTokenProvider);
    // private System.Void DisposeMasterServerHandler()
    // Offset: 0x112BCA4
    void DisposeMasterServerHandler();
    // public System.Void SetServerStatus(System.String serverName, System.String serverPassword, DiscoveryPolicy discoveryPolicy, InvitePolicy invitePolicy, System.Int32 maxPlayerCount, GameplayServerConfiguration configuration)
    // Offset: 0x112BE20
    void SetServerStatus(::Il2CppString* serverName, ::Il2CppString* serverPassword, GlobalNamespace::DiscoveryPolicy discoveryPolicy, GlobalNamespace::InvitePolicy invitePolicy, int maxPlayerCount, GlobalNamespace::GameplayServerConfiguration configuration);
    // public System.Void SetCurrentPlayerCount(System.Int32 currentPlayerCount)
    // Offset: 0x112C0F8
    void SetCurrentPlayerCount(int currentPlayerCount);
    // private System.Void DisconnectInternal(ConnectionFailedReason connectionFailedReason)
    // Offset: 0x112C2CC
    void DisconnectInternal(GlobalNamespace::ConnectionFailedReason connectionFailedReason);
    // private System.Void DisconnectInternal(DisconnectedReason disconnectedReason, ConnectionFailedReason connectionFailedReason)
    // Offset: 0x112C150
    void DisconnectInternal(GlobalNamespace::DisconnectedReason disconnectedReason, GlobalNamespace::ConnectionFailedReason connectionFailedReason);
    // private System.Void HandleConnected()
    // Offset: 0x112C2F4
    void HandleConnected();
    // private System.Void HandleConnectionConnected(IConnection connection)
    // Offset: 0x112C354
    void HandleConnectionConnected(GlobalNamespace::IConnection* connection);
    // private System.Void HandleConnectionDisconnected(IConnection connection, DisconnectedReason reason)
    // Offset: 0x112C3C8
    void HandleConnectionDisconnected(GlobalNamespace::IConnection* connection, GlobalNamespace::DisconnectedReason reason);
    // private System.Void HandleConnectionFailed(ConnectionFailedReason failedReason)
    // Offset: 0x112C444
    void HandleConnectionFailed(GlobalNamespace::ConnectionFailedReason failedReason);
    // private System.Void HandleLatencyUpdate(IConnection connection, System.Single latency)
    // Offset: 0x112C5F4
    void HandleLatencyUpdate(GlobalNamespace::IConnection* connection, float latency);
    // private System.Void HandleReceivedData(IConnection connection, LiteNetLib.Utils.NetDataReader reader, LiteNetLib.DeliveryMethod deliveryMethod)
    // Offset: 0x112C67C
    void HandleReceivedData(GlobalNamespace::IConnection* connection, LiteNetLib::Utils::NetDataReader* reader, LiteNetLib::DeliveryMethod deliveryMethod);
    // private System.Void HandleConnectToClient(System.String userId, System.String userName, System.Net.IPEndPoint remoteEndPoint, System.Byte[] preMasterSecret, System.Byte[] myRandom, System.Byte[] remoteRandom, System.Boolean isConnectionOwner, System.Boolean isDedicatedServer)
    // Offset: 0x112C70C
    void HandleConnectToClient(::Il2CppString* userId, ::Il2CppString* userName, System::Net::IPEndPoint* remoteEndPoint, ::Array<uint8_t>* preMasterSecret, ::Array<uint8_t>* myRandom, ::Array<uint8_t>* remoteRandom, bool isConnectionOwner, bool isDedicatedServer);
    // private System.Void HandleBroadcastingStopped()
    // Offset: 0x112CBAC
    void HandleBroadcastingStopped();
    // private System.Boolean AttemptConnection(System.String userId, System.String userName, System.Net.IPEndPoint endPoint, System.String secret, System.String code, System.String password, System.String serverUserId, System.String serverUserName)
    // Offset: 0x112C4B8
    bool AttemptConnection(::Il2CppString* userId, ::Il2CppString* userName, System::Net::IPEndPoint* endPoint, ::Il2CppString* secret, ::Il2CppString* code, ::Il2CppString* password, ::Il2CppString* serverUserId, ::Il2CppString* serverUserName);
    // private System.Void SetConnectionAttempt(MasterServerConnectionManager/ConnectionAttempt connectionAttempt)
    // Offset: 0x112CBFC
    void SetConnectionAttempt(GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt connectionAttempt);
    // private System.Void MasterServerConnectToMatchmaking(System.String userId, System.String userName, GameplayServerConfiguration configuration, System.String secret)
    // Offset: 0x112CDE4
    void MasterServerConnectToMatchmaking(::Il2CppString* userId, ::Il2CppString* userName, GlobalNamespace::GameplayServerConfiguration configuration, ::Il2CppString* secret);
    // private System.Void MasterServerConnectToServer(System.String userId, System.String userName, System.String secret, System.String code, System.String password, System.Boolean useRelay)
    // Offset: 0x112CCB4
    void MasterServerConnectToServer(::Il2CppString* userId, ::Il2CppString* userName, ::Il2CppString* secret, ::Il2CppString* code, ::Il2CppString* password, bool useRelay);
    // private System.Void StartBroadcastingServer()
    // Offset: 0x112BF8C
    void StartBroadcastingServer();
    // private System.Void HandleConnectToServerSuccess(System.String userId, System.String userName, System.Net.IPEndPoint remoteEndPoint, System.String secret, DiscoveryPolicy discoveryPolicy, InvitePolicy invitePolicy, System.Int32 maxPlayerCount, GameplayServerConfiguration configuration, System.Byte[] preMasterSecret, System.Byte[] myRandom, System.Byte[] remoteRandom, System.Boolean isConnectionOwner, System.Boolean isDedicatedServer)
    // Offset: 0x112CF20
    void HandleConnectToServerSuccess(::Il2CppString* userId, ::Il2CppString* userName, System::Net::IPEndPoint* remoteEndPoint, ::Il2CppString* secret, GlobalNamespace::DiscoveryPolicy discoveryPolicy, GlobalNamespace::InvitePolicy invitePolicy, int maxPlayerCount, GlobalNamespace::GameplayServerConfiguration configuration, ::Array<uint8_t>* preMasterSecret, ::Array<uint8_t>* myRandom, ::Array<uint8_t>* remoteRandom, bool isConnectionOwner, bool isDedicatedServer);
    // private System.Void ConnectToEndPoint(System.Net.IPEndPoint remoteEndPoint, System.String userId, System.String userName, System.Byte[] preMasterSecret, System.Byte[] myRandom, System.Byte[] remoteRandom, System.Boolean remoteUserIsConnectionOwner, System.Boolean isDedicatedServer)
    // Offset: 0x112C9E8
    void ConnectToEndPoint(System::Net::IPEndPoint* remoteEndPoint, ::Il2CppString* userId, ::Il2CppString* userName, ::Array<uint8_t>* preMasterSecret, ::Array<uint8_t>* myRandom, ::Array<uint8_t>* remoteRandom, bool remoteUserIsConnectionOwner, bool isDedicatedServer);
    // public System.Void GetPublicServers(System.Action`1<System.Collections.Generic.IReadOnlyList`1<PublicServerInfo>> onSuccess, System.Action`1<ConnectionFailedReason> onFailure, System.Int32 offset, System.Int32 count, GameplayServerFilter filter)
    // Offset: 0x112D284
    void GetPublicServers(System::Action_1<System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::PublicServerInfo>*>* onSuccess, System::Action_1<GlobalNamespace::ConnectionFailedReason>* onFailure, int offset, int count, GlobalNamespace::GameplayServerFilter filter);
    // private System.Void <StartBroadcastingServer>b__110_0(System.Net.IPEndPoint remoteEndPoint, System.String code)
    // Offset: 0x112D38C
    void $StartBroadcastingServer$b__110_0(System::Net::IPEndPoint* remoteEndPoint, ::Il2CppString* code);
    // private System.Void <StartBroadcastingServer>b__110_1(ConnectionFailedReason reason)
    // Offset: 0x112D400
    void $StartBroadcastingServer$b__110_1(GlobalNamespace::ConnectionFailedReason reason);
    // public System.Void add_onConnectedEvent(System.Action value)
    // Offset: 0x112AD18
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::add_onConnectedEvent(System.Action value)
    void add_onConnectedEvent(System::Action* value);
    // public System.Void remove_onConnectedEvent(System.Action value)
    // Offset: 0x112ADBC
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::remove_onConnectedEvent(System.Action value)
    void remove_onConnectedEvent(System::Action* value);
    // public System.Void add_onDisconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0x112AE60
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::add_onDisconnectedEvent(System.Action`1<DisconnectedReason> value)
    void add_onDisconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value);
    // public System.Void remove_onDisconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0x112AF04
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::remove_onDisconnectedEvent(System.Action`1<DisconnectedReason> value)
    void remove_onDisconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value);
    // public System.Void add_onConnectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    // Offset: 0x112AFA8
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::add_onConnectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    void add_onConnectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value);
    // public System.Void remove_onConnectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    // Offset: 0x112B04C
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::remove_onConnectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    void remove_onConnectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value);
    // public System.Void add_onConnectionConnectedEvent(System.Action`1<IConnection> value)
    // Offset: 0x112B0F0
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::add_onConnectionConnectedEvent(System.Action`1<IConnection> value)
    void add_onConnectionConnectedEvent(System::Action_1<GlobalNamespace::IConnection*>* value);
    // public System.Void remove_onConnectionConnectedEvent(System.Action`1<IConnection> value)
    // Offset: 0x112B194
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::remove_onConnectionConnectedEvent(System.Action`1<IConnection> value)
    void remove_onConnectionConnectedEvent(System::Action_1<GlobalNamespace::IConnection*>* value);
    // public System.Void add_onConnectionDisconnectedEvent(System.Action`2<IConnection,DisconnectedReason> value)
    // Offset: 0x112B238
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::add_onConnectionDisconnectedEvent(System.Action`2<IConnection,DisconnectedReason> value)
    void add_onConnectionDisconnectedEvent(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>* value);
    // public System.Void remove_onConnectionDisconnectedEvent(System.Action`2<IConnection,DisconnectedReason> value)
    // Offset: 0x112B2DC
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::remove_onConnectionDisconnectedEvent(System.Action`2<IConnection,DisconnectedReason> value)
    void remove_onConnectionDisconnectedEvent(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>* value);
    // public System.Void add_onLatencyUpdatedEvent(System.Action`2<IConnection,System.Single> value)
    // Offset: 0x112B380
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::add_onLatencyUpdatedEvent(System.Action`2<IConnection,System.Single> value)
    void add_onLatencyUpdatedEvent(System::Action_2<GlobalNamespace::IConnection*, float>* value);
    // public System.Void remove_onLatencyUpdatedEvent(System.Action`2<IConnection,System.Single> value)
    // Offset: 0x112B424
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::remove_onLatencyUpdatedEvent(System.Action`2<IConnection,System.Single> value)
    void remove_onLatencyUpdatedEvent(System::Action_2<GlobalNamespace::IConnection*, float>* value);
    // public System.Void add_onReceivedDataEvent(System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,LiteNetLib.DeliveryMethod> value)
    // Offset: 0x112B4C8
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::add_onReceivedDataEvent(System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,LiteNetLib.DeliveryMethod> value)
    void add_onReceivedDataEvent(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* value);
    // public System.Void remove_onReceivedDataEvent(System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,LiteNetLib.DeliveryMethod> value)
    // Offset: 0x112B56C
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::remove_onReceivedDataEvent(System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,LiteNetLib.DeliveryMethod> value)
    void remove_onReceivedDataEvent(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* value);
    // public System.String get_userId()
    // Offset: 0x112B610
    // Implemented from: IConnectionManager
    // Base method: System.String IConnectionManager::get_userId()
    ::Il2CppString* get_userId();
    // public System.String get_userName()
    // Offset: 0x112B62C
    // Implemented from: IConnectionManager
    // Base method: System.String IConnectionManager::get_userName()
    ::Il2CppString* get_userName();
    // public System.Boolean get_isConnected()
    // Offset: 0x112B648
    // Implemented from: IConnectionManager
    // Base method: System.Boolean IConnectionManager::get_isConnected()
    bool get_isConnected();
    // public System.Boolean get_isConnecting()
    // Offset: 0x112B658
    // Implemented from: IConnectionManager
    // Base method: System.Boolean IConnectionManager::get_isConnecting()
    bool get_isConnecting();
    // public System.Boolean get_isDisconnecting()
    // Offset: 0x112B668
    // Implemented from: IConnectionManager
    // Base method: System.Boolean IConnectionManager::get_isDisconnecting()
    bool get_isDisconnecting();
    // public System.Int32 get_connectionCount()
    // Offset: 0x112B678
    // Implemented from: IConnectionManager
    // Base method: System.Int32 IConnectionManager::get_connectionCount()
    int get_connectionCount();
    // public System.Boolean get_isConnectionOwner()
    // Offset: 0x112B694
    // Implemented from: IConnectionManager
    // Base method: System.Boolean IConnectionManager::get_isConnectionOwner()
    bool get_isConnectionOwner();
    // public System.Boolean get_isDisposed()
    // Offset: 0x112B6B0
    // Implemented from: IConnectionManager
    // Base method: System.Boolean IConnectionManager::get_isDisposed()
    bool get_isDisposed();
    // public System.Void SendToAll(LiteNetLib.Utils.NetDataWriter writer, LiteNetLib.DeliveryMethod deliveryMethod)
    // Offset: 0x112B760
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::SendToAll(LiteNetLib.Utils.NetDataWriter writer, LiteNetLib.DeliveryMethod deliveryMethod)
    void SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod deliveryMethod);
    // public System.Void SendToAll(LiteNetLib.Utils.NetDataWriter writer, LiteNetLib.DeliveryMethod deliveryMethod, IConnection excludingConnection)
    // Offset: 0x112B77C
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::SendToAll(LiteNetLib.Utils.NetDataWriter writer, LiteNetLib.DeliveryMethod deliveryMethod, IConnection excludingConnection)
    void SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod deliveryMethod, GlobalNamespace::IConnection* excludingConnection);
    // public System.Void PollUpdate()
    // Offset: 0x112B798
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::PollUpdate()
    void PollUpdate();
    // public System.Void .ctor()
    // Offset: 0x112B7E8
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MasterServerConnectionManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MasterServerConnectionManager*, creationType>()));
    }
    // public System.Boolean Init(IConnectionInitParams`1<T> initParams)
    // Offset: 0xFFFFFFFF
    // Implemented from: IConnectionManager
    // Base method: System.Boolean IConnectionManager::Init(IConnectionInitParams`1<T> initParams)
    template<class T>
    bool Init(GlobalNamespace::IConnectionInitParams_1<T>* initParams) {
      static_assert(std::is_base_of_v<GlobalNamespace::IConnectionManager, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerConnectionManager::Init");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(initParams)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___generic__method, initParams);
    }
    // public System.Void Dispose()
    // Offset: 0x112C118
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
    // public System.Void Disconnect(DisconnectedReason disconnectedReason)
    // Offset: 0x112C148
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::Disconnect(DisconnectedReason disconnectedReason)
    void Disconnect(GlobalNamespace::DisconnectedReason disconnectedReason);
    // public IConnection GetConnection(System.Int32 index)
    // Offset: 0x112C2D8
    // Implemented from: IConnectionManager
    // Base method: IConnection IConnectionManager::GetConnection(System.Int32 index)
    GlobalNamespace::IConnection* GetConnection(int index);
    // private System.Void MasterServer.MessageHandler.IMessageSender.SendMessage(LiteNetLib.Utils.NetDataWriter writer, System.Net.IPEndPoint endPoint)
    // Offset: 0x112D370
    // Implemented from: MasterServer.MessageHandler/IMessageSender
    // Base method: System.Void IMessageSender::SendMessage(LiteNetLib.Utils.NetDataWriter writer, System.Net.IPEndPoint endPoint)
    void MasterServer_MessageHandler_IMessageSender_SendMessage(LiteNetLib::Utils::NetDataWriter* writer, System::Net::IPEndPoint* endPoint);
  }; // MasterServerConnectionManager
  #pragma pack(pop)
  static check_size<sizeof(MasterServerConnectionManager), 192 + sizeof(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>*)> __GlobalNamespace_MasterServerConnectionManagerSizeCheck;
  static_assert(sizeof(MasterServerConnectionManager) == 0xC8);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MasterServerConnectionManager*, "", "MasterServerConnectionManager");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MasterServerConnectionManager::ConnectionAttempt, "", "MasterServerConnectionManager/ConnectionAttempt");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MasterServerConnectionManager::ConnectionState, "", "MasterServerConnectionManager/ConnectionState");
