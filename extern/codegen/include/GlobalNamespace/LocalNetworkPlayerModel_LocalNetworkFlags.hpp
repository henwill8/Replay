// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LocalNetworkPlayerModel
#include "GlobalNamespace/LocalNetworkPlayerModel.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x1
  #pragma pack(push, 1)
  // Autogenerated type: LocalNetworkPlayerModel/LocalNetworkFlags
  // [] Offset: FFFFFFFF
  // [FlagsAttribute] Offset: FFFFFFFF
  struct LocalNetworkPlayerModel::LocalNetworkFlags/*, public System::Enum*/ {
    public:
    // public System.Byte value__
    // Size: 0x1
    // Offset: 0x0
    uint8_t value;
    // Field size check
    static_assert(sizeof(uint8_t) == 0x1);
    // Creating value type constructor for type: LocalNetworkFlags
    constexpr LocalNetworkFlags(uint8_t value_ = {}) noexcept : value{value_} {}
    // Creating interface conversion operator: operator System::Enum
    operator System::Enum() noexcept {
      return *reinterpret_cast<System::Enum*>(this);
    }
    // Creating conversion operator: operator uint8_t
    constexpr operator uint8_t() const noexcept {
      return value;
    }
    // static field const value: static public LocalNetworkPlayerModel/LocalNetworkFlags AllowAnyoneToJoin
    static constexpr const uint8_t AllowAnyoneToJoin = 1u;
    // Get static field: static public LocalNetworkPlayerModel/LocalNetworkFlags AllowAnyoneToJoin
    static GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags _get_AllowAnyoneToJoin();
    // Set static field: static public LocalNetworkPlayerModel/LocalNetworkFlags AllowAnyoneToJoin
    static void _set_AllowAnyoneToJoin(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags value);
    // static field const value: static public LocalNetworkPlayerModel/LocalNetworkFlags IsPartyOwner
    static constexpr const uint8_t IsPartyOwner = 2u;
    // Get static field: static public LocalNetworkPlayerModel/LocalNetworkFlags IsPartyOwner
    static GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags _get_IsPartyOwner();
    // Set static field: static public LocalNetworkPlayerModel/LocalNetworkFlags IsPartyOwner
    static void _set_IsPartyOwner(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags value);
    // static field const value: static public LocalNetworkPlayerModel/LocalNetworkFlags IsPlayer
    static constexpr const uint8_t IsPlayer = 4u;
    // Get static field: static public LocalNetworkPlayerModel/LocalNetworkFlags IsPlayer
    static GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags _get_IsPlayer();
    // Set static field: static public LocalNetworkPlayerModel/LocalNetworkFlags IsPlayer
    static void _set_IsPlayer(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags value);
    // static field const value: static public LocalNetworkPlayerModel/LocalNetworkFlags IsSpectating
    static constexpr const uint8_t IsSpectating = 8u;
    // Get static field: static public LocalNetworkPlayerModel/LocalNetworkFlags IsSpectating
    static GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags _get_IsSpectating();
    // Set static field: static public LocalNetworkPlayerModel/LocalNetworkFlags IsSpectating
    static void _set_IsSpectating(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags value);
    // static field const value: static public LocalNetworkPlayerModel/LocalNetworkFlags IsDedicatedServer
    static constexpr const uint8_t IsDedicatedServer = 16u;
    // Get static field: static public LocalNetworkPlayerModel/LocalNetworkFlags IsDedicatedServer
    static GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags _get_IsDedicatedServer();
    // Set static field: static public LocalNetworkPlayerModel/LocalNetworkFlags IsDedicatedServer
    static void _set_IsDedicatedServer(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags value);
    // static field const value: static public LocalNetworkPlayerModel/LocalNetworkFlags OtherPlayersCanInvite
    static constexpr const uint8_t OtherPlayersCanInvite = 32u;
    // Get static field: static public LocalNetworkPlayerModel/LocalNetworkFlags OtherPlayersCanInvite
    static GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags _get_OtherPlayersCanInvite();
    // Set static field: static public LocalNetworkPlayerModel/LocalNetworkFlags OtherPlayersCanInvite
    static void _set_OtherPlayersCanInvite(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags value);
  }; // LocalNetworkPlayerModel/LocalNetworkFlags
  #pragma pack(pop)
  static check_size<sizeof(LocalNetworkPlayerModel::LocalNetworkFlags), 0 + sizeof(uint8_t)> __GlobalNamespace_LocalNetworkPlayerModel_LocalNetworkFlagsSizeCheck;
  static_assert(sizeof(LocalNetworkPlayerModel::LocalNetworkFlags) == 0x1);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags, "", "LocalNetworkPlayerModel/LocalNetworkFlags");
