// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LocalNetworkPlayerModel
#include "GlobalNamespace/LocalNetworkPlayerModel.hpp"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
// Including type: LocalNetworkPlayerModel/LocalNetworkFlags
#include "GlobalNamespace/LocalNetworkPlayerModel_LocalNetworkFlags.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
// Including type: System.Single
#include "System/Single.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPAddress
  class IPAddress;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
  // Skipping declaration: BeatmapDifficultyMask because it is already included!
  // Skipping declaration: GameplayModifierMask because it is already included!
  // Skipping declaration: SongPackMask because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: LocalNetworkPlayerModel/LocalNetworkPlayer
  class LocalNetworkPlayerModel::LocalNetworkPlayer : public ::Il2CppObject/*, public GlobalNamespace::INetworkPlayer*/ {
    public:
    // private readonly LocalNetworkPlayerModel _playerModel
    // Offset: 0x10
    GlobalNamespace::LocalNetworkPlayerModel* playerModel;
    // private readonly System.String _userId
    // Offset: 0x18
    ::Il2CppString* userId;
    // private readonly System.String _userName
    // Offset: 0x20
    ::Il2CppString* userName;
    // private readonly System.Net.IPAddress _ipAddress
    // Offset: 0x28
    System::Net::IPAddress* ipAddress;
    // private readonly System.Boolean _isMe
    // Offset: 0x30
    bool isMe;
    // private System.Single _joinRequestTime
    // Offset: 0x34
    float joinRequestTime;
    // private System.Single _inviteSentTime
    // Offset: 0x38
    float inviteSentTime;
    // private System.Boolean _isBlocked
    // Offset: 0x3C
    bool isBlocked;
    // private System.Boolean _hasBlockedMe
    // Offset: 0x3D
    bool hasBlockedMe;
    // private System.String _secret
    // Offset: 0x40
    ::Il2CppString* secret;
    // private System.Int32 _multiplayerPort
    // Offset: 0x48
    int multiplayerPort;
    // private System.Boolean _isConnected
    // Offset: 0x4C
    bool isConnected;
    // private System.Single _connectingStartTime
    // Offset: 0x50
    float connectingStartTime;
    // private LocalNetworkPlayerModel/LocalNetworkFlags _flags
    // Offset: 0x54
    GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags flags;
    // private System.Int32 _currentPartySize
    // Offset: 0x58
    int currentPartySize;
    // private System.Int32 _maxPartySize
    // Offset: 0x5C
    int maxPartySize;
    // private GameplayServerConfiguration _configuration
    // Offset: 0x60
    GlobalNamespace::GameplayServerConfiguration configuration;
    // private System.Single _lastUpdateTime
    // Offset: 0x78
    float lastUpdateTime;
    // private System.Boolean _allowedJoinToMyParty
    // Offset: 0x7C
    bool allowedJoinToMyParty;
    // private System.Boolean _requestedToJoinMyParty
    // Offset: 0x7D
    bool requestedToJoinMyParty;
    // private System.Boolean _invitedMeToJoinTheirParty
    // Offset: 0x7E
    bool invitedMeToJoinTheirParty;
    // Creating interface conversion operator: operator GlobalNamespace::INetworkPlayer
    operator GlobalNamespace::INetworkPlayer() noexcept {
      return *reinterpret_cast<GlobalNamespace::INetworkPlayer*>(this);
    }
    // static field const value: static private System.Single kPeerBroadcastTimeout
    static constexpr const float kPeerBroadcastTimeout = 30;
    // Get static field: static private System.Single kPeerBroadcastTimeout
    static float _get_kPeerBroadcastTimeout();
    // Set static field: static private System.Single kPeerBroadcastTimeout
    static void _set_kPeerBroadcastTimeout(float value);
    // static field const value: static private System.Single kConnectionTimeout
    static constexpr const float kConnectionTimeout = 5;
    // Get static field: static private System.Single kConnectionTimeout
    static float _get_kConnectionTimeout();
    // Set static field: static private System.Single kConnectionTimeout
    static void _set_kConnectionTimeout(float value);
    // static field const value: static private System.Single kRequestTimeout
    static constexpr const float kRequestTimeout = 120;
    // Get static field: static private System.Single kRequestTimeout
    static float _get_kRequestTimeout();
    // Set static field: static private System.Single kRequestTimeout
    static void _set_kRequestTimeout(float value);
    // public System.Net.IPAddress get_ipAddress()
    // Offset: 0x1A6B324
    System::Net::IPAddress* get_ipAddress();
    // public System.Boolean get_isPartyOwner()
    // Offset: 0x1A681E8
    bool get_isPartyOwner();
    // public System.Boolean get_otherPlayersCanInvite()
    // Offset: 0x1A67BB8
    bool get_otherPlayersCanInvite();
    // public System.Boolean get_isBlocked()
    // Offset: 0x1A6B384
    bool get_isBlocked();
    // public System.Boolean get_hasBlockedMe()
    // Offset: 0x1A6B38C
    bool get_hasBlockedMe();
    // public System.String get_secret()
    // Offset: 0x1A6B394
    ::Il2CppString* get_secret();
    // public System.Int32 get_multiplayerPort()
    // Offset: 0x1A6B39C
    int get_multiplayerPort();
    // public System.Boolean get_allowedJoinToMyParty()
    // Offset: 0x1A6B3AC
    bool get_allowedJoinToMyParty();
    // public System.Boolean get_isConnecting()
    // Offset: 0x1A6A110
    bool get_isConnecting();
    // private System.Boolean get_wasConnecting()
    // Offset: 0x1A6B3B4
    bool get_wasConnecting();
    // public System.Boolean get_isTimedOut()
    // Offset: 0x1A68504
    bool get_isTimedOut();
    // public System.Void .ctor(LocalNetworkPlayerModel playerModel, System.String userId, System.String userName, System.Net.IPAddress ipAddress, System.Boolean isMe)
    // Offset: 0x1A68D68
    static LocalNetworkPlayerModel::LocalNetworkPlayer* New_ctor(GlobalNamespace::LocalNetworkPlayerModel* playerModel, ::Il2CppString* userId, ::Il2CppString* userName, System::Net::IPAddress* ipAddress, bool isMe);
    // public System.Boolean Update(LocalNetworkPlayerModel/LocalNetworkFlags flags, System.Int32 currentPartySize, System.Int32 maxPartySize, GameplayServerConfiguration configuration)
    // Offset: 0x1A68A4C
    bool Update(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags flags, int currentPartySize, int maxPartySize, GlobalNamespace::GameplayServerConfiguration configuration);
    // public System.Boolean HasFailedToConnect()
    // Offset: 0x1A68468
    bool HasFailedToConnect();
    // public System.Void SetInvited(LocalNetworkPlayerModel/LocalNetworkFlags flags, System.String secret, System.Int32 multiplayerPort)
    // Offset: 0x1A6973C
    void SetInvited(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags flags, ::Il2CppString* secret, int multiplayerPort);
    // public System.Void SetJoinResponse(System.String secret, System.Int32 multiplayerPort, System.Boolean blocked)
    // Offset: 0x1A6947C
    void SetJoinResponse(::Il2CppString* secret, int multiplayerPort, bool blocked);
    // public System.Void SetInviteResponse(System.Boolean accepted, System.Boolean blocked)
    // Offset: 0x1A69950
    void SetInviteResponse(bool accepted, bool blocked);
    // public System.Void SetJoinRequested(LocalNetworkPlayerModel/LocalNetworkFlags flags)
    // Offset: 0x1A6903C
    void SetJoinRequested(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags flags);
    // public System.Boolean SetConnected()
    // Offset: 0x1A6A00C
    bool SetConnected();
    // public System.Boolean SetDisconnected()
    // Offset: 0x1A6A154
    bool SetDisconnected();
    // public System.Void UpdateState(IConnectedPlayer connectedPlayer)
    // Offset: 0x1A6A890
    void UpdateState(GlobalNamespace::IConnectedPlayer* connectedPlayer);
    // private System.Boolean get_isConnectable()
    // Offset: 0x1A6B880
    bool get_isConnectable();
    // public System.Void Connect()
    // Offset: 0x1A6B81C
    void Connect();
    // public System.String get_userId()
    // Offset: 0x1A6B314
    // Implemented from: INetworkPlayer
    // Base method: System.String INetworkPlayer::get_userId()
    ::Il2CppString* get_userId();
    // Creating proxy method: GlobalNamespace_INetworkPlayer_get_userId
    // Maps to method: get_userId
    ::Il2CppString* GlobalNamespace_INetworkPlayer_get_userId();
    // public System.String get_userName()
    // Offset: 0x1A6B31C
    // Implemented from: INetworkPlayer
    // Base method: System.String INetworkPlayer::get_userName()
    ::Il2CppString* get_userName();
    // Creating proxy method: GlobalNamespace_INetworkPlayer_get_userName
    // Maps to method: get_userName
    ::Il2CppString* GlobalNamespace_INetworkPlayer_get_userName();
    // public System.Boolean get_isMe()
    // Offset: 0x1A6B32C
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_isMe()
    bool get_isMe();
    // public System.Int32 get_currentPartySize()
    // Offset: 0x1A6B334
    // Implemented from: INetworkPlayer
    // Base method: System.Int32 INetworkPlayer::get_currentPartySize()
    int get_currentPartySize();
    // public System.Int32 get_maxPartySize()
    // Offset: 0x1A6B33C
    // Implemented from: INetworkPlayer
    // Base method: System.Int32 INetworkPlayer::get_maxPartySize()
    int get_maxPartySize();
    // public BeatmapDifficultyMask get_difficulties()
    // Offset: 0x1A6B344
    // Implemented from: INetworkPlayer
    // Base method: BeatmapDifficultyMask INetworkPlayer::get_difficulties()
    GlobalNamespace::BeatmapDifficultyMask get_difficulties();
    // public GameplayModifierMask get_modifiers()
    // Offset: 0x1A6B34C
    // Implemented from: INetworkPlayer
    // Base method: GameplayModifierMask INetworkPlayer::get_modifiers()
    GlobalNamespace::GameplayModifierMask get_modifiers();
    // public SongPackMask get_songPacks()
    // Offset: 0x1A6B354
    // Implemented from: INetworkPlayer
    // Base method: SongPackMask INetworkPlayer::get_songPacks()
    GlobalNamespace::SongPackMask get_songPacks();
    // public System.Boolean get_isOpenParty()
    // Offset: 0x1A69084
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_isOpenParty()
    bool get_isOpenParty();
    // public System.Boolean get_isPlayer()
    // Offset: 0x1A6B360
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_isPlayer()
    bool get_isPlayer();
    // public System.Boolean get_isSpectating()
    // Offset: 0x1A6B36C
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_isSpectating()
    bool get_isSpectating();
    // public System.Boolean get_isDedicatedServer()
    // Offset: 0x1A6B378
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_isDedicatedServer()
    bool get_isDedicatedServer();
    // public System.Boolean get_isMyPartyOwner()
    // Offset: 0x1A6AB1C
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_isMyPartyOwner()
    bool get_isMyPartyOwner();
    // public System.Boolean get_isConnected()
    // Offset: 0x1A6B3A4
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_isConnected()
    bool get_isConnected();
    // public System.Boolean get_isWaitingOnJoin()
    // Offset: 0x1A6B3F8
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_isWaitingOnJoin()
    bool get_isWaitingOnJoin();
    // public System.Boolean get_canJoin()
    // Offset: 0x1A6B440
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_canJoin()
    bool get_canJoin();
    // public System.Void Join()
    // Offset: 0x1A6B4F4
    // Implemented from: INetworkPlayer
    // Base method: System.Void INetworkPlayer::Join()
    void Join();
    // public System.Boolean get_requiresPassword()
    // Offset: 0x1A6B54C
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_requiresPassword()
    bool get_requiresPassword();
    // public System.Void Join(System.String password)
    // Offset: 0x1A6B554
    // Implemented from: INetworkPlayer
    // Base method: System.Void INetworkPlayer::Join(System.String password)
    void Join(::Il2CppString* password);
    // public System.Boolean get_isWaitingOnInvite()
    // Offset: 0x1A6B558
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_isWaitingOnInvite()
    bool get_isWaitingOnInvite();
    // public System.Boolean get_canInvite()
    // Offset: 0x1A6B5A0
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_canInvite()
    bool get_canInvite();
    // public System.Void Invite()
    // Offset: 0x1A6B658
    // Implemented from: INetworkPlayer
    // Base method: System.Void INetworkPlayer::Invite()
    void Invite();
    // public System.Boolean get_canKick()
    // Offset: 0x1A6B6C8
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_canKick()
    bool get_canKick();
    // public System.Void Kick()
    // Offset: 0x1A6B6FC
    // Implemented from: INetworkPlayer
    // Base method: System.Void INetworkPlayer::Kick()
    void Kick();
    // public System.Boolean get_canLeave()
    // Offset: 0x1A6B71C
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_canLeave()
    bool get_canLeave();
    // public System.Void Leave()
    // Offset: 0x1A6B778
    // Implemented from: INetworkPlayer
    // Base method: System.Void INetworkPlayer::Leave()
    void Leave();
    // public System.Boolean get_canBlock()
    // Offset: 0x1A6B79C
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_canBlock()
    bool get_canBlock();
    // public System.Void Block()
    // Offset: 0x1A6B800
    // Implemented from: INetworkPlayer
    // Base method: System.Void INetworkPlayer::Block()
    void Block();
    // public System.Boolean get_canUnblock()
    // Offset: 0x1A6B80C
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_canUnblock()
    bool get_canUnblock();
    // public System.Void Unblock()
    // Offset: 0x1A6B814
    // Implemented from: INetworkPlayer
    // Base method: System.Void INetworkPlayer::Unblock()
    void Unblock();
    // public System.Void SendJoinResponse(System.Boolean accept)
    // Offset: 0x1A6904C
    // Implemented from: INetworkPlayer
    // Base method: System.Void INetworkPlayer::SendJoinResponse(System.Boolean accept)
    void SendJoinResponse(bool accept);
    // public System.Void SendInviteResponse(System.Boolean accept)
    // Offset: 0x1A6977C
    // Implemented from: INetworkPlayer
    // Base method: System.Void INetworkPlayer::SendInviteResponse(System.Boolean accept)
    void SendInviteResponse(bool accept);
  }; // LocalNetworkPlayerModel/LocalNetworkPlayer
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*, "", "LocalNetworkPlayerModel/LocalNetworkPlayer");
#pragma pack(pop)
