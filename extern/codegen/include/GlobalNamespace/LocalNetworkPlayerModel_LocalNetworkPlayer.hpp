// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LocalNetworkPlayerModel
#include "GlobalNamespace/LocalNetworkPlayerModel.hpp"
// Including type: INetworkPlayer
#include "GlobalNamespace/INetworkPlayer.hpp"
// Including type: LocalNetworkPlayerModel/LocalNetworkFlags
#include "GlobalNamespace/LocalNetworkPlayerModel_LocalNetworkFlags.hpp"
// Including type: GameplayServerConfiguration
#include "GlobalNamespace/GameplayServerConfiguration.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPAddress
  class IPAddress;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
  // Skipping declaration: BeatmapDifficultyMask because it is already included!
  // Skipping declaration: GameplayModifierMask because it is already included!
  // Skipping declaration: SongPackMask because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x7F
  #pragma pack(push, 1)
  // Autogenerated type: LocalNetworkPlayerModel/LocalNetworkPlayer
  // [] Offset: FFFFFFFF
  class LocalNetworkPlayerModel::LocalNetworkPlayer : public ::Il2CppObject/*, public GlobalNamespace::INetworkPlayer*/ {
    public:
    // private readonly LocalNetworkPlayerModel _playerModel
    // Size: 0x8
    // Offset: 0x10
    GlobalNamespace::LocalNetworkPlayerModel* playerModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LocalNetworkPlayerModel*) == 0x8);
    // private readonly System.String _userId
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* userId;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private readonly System.String _userName
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppString* userName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private readonly System.Net.IPAddress _ipAddress
    // Size: 0x8
    // Offset: 0x28
    System::Net::IPAddress* ipAddress;
    // Field size check
    static_assert(sizeof(System::Net::IPAddress*) == 0x8);
    // private readonly System.Boolean _isMe
    // Size: 0x1
    // Offset: 0x30
    bool isMe;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isMe and: joinRequestTime
    char __padding4[0x3] = {};
    // private System.Single _joinRequestTime
    // Size: 0x4
    // Offset: 0x34
    float joinRequestTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _inviteSentTime
    // Size: 0x4
    // Offset: 0x38
    float inviteSentTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _isBlocked
    // Size: 0x1
    // Offset: 0x3C
    bool isBlocked;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _hasBlockedMe
    // Size: 0x1
    // Offset: 0x3D
    bool hasBlockedMe;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasBlockedMe and: secret
    char __padding8[0x2] = {};
    // private System.String _secret
    // Size: 0x8
    // Offset: 0x40
    ::Il2CppString* secret;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Int32 _multiplayerPort
    // Size: 0x4
    // Offset: 0x48
    int multiplayerPort;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _isConnected
    // Size: 0x1
    // Offset: 0x4C
    bool isConnected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isConnected and: connectingStartTime
    char __padding11[0x3] = {};
    // private System.Single _connectingStartTime
    // Size: 0x4
    // Offset: 0x50
    float connectingStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private LocalNetworkPlayerModel/LocalNetworkFlags _flags
    // Size: 0x1
    // Offset: 0x54
    GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags flags;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags) == 0x1);
    // Padding between fields: flags and: currentPartySize
    char __padding13[0x3] = {};
    // private System.Int32 _currentPartySize
    // Size: 0x4
    // Offset: 0x58
    int currentPartySize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _maxPartySize
    // Size: 0x4
    // Offset: 0x5C
    int maxPartySize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private GameplayServerConfiguration _configuration
    // Size: 0x18
    // Offset: 0x60
    GlobalNamespace::GameplayServerConfiguration configuration;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayServerConfiguration) == 0x18);
    // private System.Single _lastUpdateTime
    // Size: 0x4
    // Offset: 0x78
    float lastUpdateTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _allowedJoinToMyParty
    // Size: 0x1
    // Offset: 0x7C
    bool allowedJoinToMyParty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _requestedToJoinMyParty
    // Size: 0x1
    // Offset: 0x7D
    bool requestedToJoinMyParty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _invitedMeToJoinTheirParty
    // Size: 0x1
    // Offset: 0x7E
    bool invitedMeToJoinTheirParty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: LocalNetworkPlayer
    LocalNetworkPlayer(GlobalNamespace::LocalNetworkPlayerModel* playerModel_ = {}, ::Il2CppString* userId_ = {}, ::Il2CppString* userName_ = {}, System::Net::IPAddress* ipAddress_ = {}, bool isMe_ = {}, float joinRequestTime_ = {}, float inviteSentTime_ = {}, bool isBlocked_ = {}, bool hasBlockedMe_ = {}, ::Il2CppString* secret_ = {}, int multiplayerPort_ = {}, bool isConnected_ = {}, float connectingStartTime_ = {}, GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags flags_ = {}, int currentPartySize_ = {}, int maxPartySize_ = {}, GlobalNamespace::GameplayServerConfiguration configuration_ = {}, float lastUpdateTime_ = {}, bool allowedJoinToMyParty_ = {}, bool requestedToJoinMyParty_ = {}, bool invitedMeToJoinTheirParty_ = {}) noexcept : playerModel{playerModel_}, userId{userId_}, userName{userName_}, ipAddress{ipAddress_}, isMe{isMe_}, joinRequestTime{joinRequestTime_}, inviteSentTime{inviteSentTime_}, isBlocked{isBlocked_}, hasBlockedMe{hasBlockedMe_}, secret{secret_}, multiplayerPort{multiplayerPort_}, isConnected{isConnected_}, connectingStartTime{connectingStartTime_}, flags{flags_}, currentPartySize{currentPartySize_}, maxPartySize{maxPartySize_}, configuration{configuration_}, lastUpdateTime{lastUpdateTime_}, allowedJoinToMyParty{allowedJoinToMyParty_}, requestedToJoinMyParty{requestedToJoinMyParty_}, invitedMeToJoinTheirParty{invitedMeToJoinTheirParty_} {}
    // Creating interface conversion operator: operator GlobalNamespace::INetworkPlayer
    operator GlobalNamespace::INetworkPlayer() noexcept {
      return *reinterpret_cast<GlobalNamespace::INetworkPlayer*>(this);
    }
    // static field const value: static private System.Single kPeerBroadcastTimeout
    static constexpr const float kPeerBroadcastTimeout = 30;
    // Get static field: static private System.Single kPeerBroadcastTimeout
    static float _get_kPeerBroadcastTimeout();
    // Set static field: static private System.Single kPeerBroadcastTimeout
    static void _set_kPeerBroadcastTimeout(float value);
    // static field const value: static private System.Single kConnectionTimeout
    static constexpr const float kConnectionTimeout = 5;
    // Get static field: static private System.Single kConnectionTimeout
    static float _get_kConnectionTimeout();
    // Set static field: static private System.Single kConnectionTimeout
    static void _set_kConnectionTimeout(float value);
    // static field const value: static private System.Single kRequestTimeout
    static constexpr const float kRequestTimeout = 120;
    // Get static field: static private System.Single kRequestTimeout
    static float _get_kRequestTimeout();
    // Set static field: static private System.Single kRequestTimeout
    static void _set_kRequestTimeout(float value);
    // public System.Net.IPAddress get_ipAddress()
    // Offset: 0x105B52C
    System::Net::IPAddress* get_ipAddress();
    // public System.Boolean get_isPartyOwner()
    // Offset: 0x10583F0
    bool get_isPartyOwner();
    // public System.Boolean get_otherPlayersCanInvite()
    // Offset: 0x1057DC0
    bool get_otherPlayersCanInvite();
    // public System.Boolean get_isBlocked()
    // Offset: 0x105B58C
    bool get_isBlocked();
    // public System.Boolean get_hasBlockedMe()
    // Offset: 0x105B594
    bool get_hasBlockedMe();
    // public System.String get_secret()
    // Offset: 0x105B59C
    ::Il2CppString* get_secret();
    // public System.Int32 get_multiplayerPort()
    // Offset: 0x105B5A4
    int get_multiplayerPort();
    // public System.Boolean get_allowedJoinToMyParty()
    // Offset: 0x105B5B4
    bool get_allowedJoinToMyParty();
    // public System.Boolean get_isConnecting()
    // Offset: 0x105A318
    bool get_isConnecting();
    // private System.Boolean get_wasConnecting()
    // Offset: 0x105B5BC
    bool get_wasConnecting();
    // public System.Boolean get_isTimedOut()
    // Offset: 0x105870C
    bool get_isTimedOut();
    // public System.Void .ctor(LocalNetworkPlayerModel playerModel, System.String userId, System.String userName, System.Net.IPAddress ipAddress, System.Boolean isMe)
    // Offset: 0x1058F70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocalNetworkPlayerModel::LocalNetworkPlayer* New_ctor(GlobalNamespace::LocalNetworkPlayerModel* playerModel, ::Il2CppString* userId, ::Il2CppString* userName, System::Net::IPAddress* ipAddress, bool isMe) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocalNetworkPlayerModel::LocalNetworkPlayer*, creationType>(playerModel, userId, userName, ipAddress, isMe)));
    }
    // public System.Boolean Update(LocalNetworkPlayerModel/LocalNetworkFlags flags, System.Int32 currentPartySize, System.Int32 maxPartySize, GameplayServerConfiguration configuration)
    // Offset: 0x1058C54
    bool Update(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags flags, int currentPartySize, int maxPartySize, GlobalNamespace::GameplayServerConfiguration configuration);
    // public System.Boolean HasFailedToConnect()
    // Offset: 0x1058670
    bool HasFailedToConnect();
    // public System.Void SetInvited(LocalNetworkPlayerModel/LocalNetworkFlags flags, System.String secret, System.Int32 multiplayerPort)
    // Offset: 0x1059944
    void SetInvited(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags flags, ::Il2CppString* secret, int multiplayerPort);
    // public System.Void SetJoinResponse(System.String secret, System.Int32 multiplayerPort, System.Boolean blocked)
    // Offset: 0x1059684
    void SetJoinResponse(::Il2CppString* secret, int multiplayerPort, bool blocked);
    // public System.Void SetInviteResponse(System.Boolean accepted, System.Boolean blocked)
    // Offset: 0x1059B58
    void SetInviteResponse(bool accepted, bool blocked);
    // public System.Void SetJoinRequested(LocalNetworkPlayerModel/LocalNetworkFlags flags)
    // Offset: 0x1059244
    void SetJoinRequested(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags flags);
    // public System.Boolean SetConnected()
    // Offset: 0x105A214
    bool SetConnected();
    // public System.Boolean SetDisconnected()
    // Offset: 0x105A35C
    bool SetDisconnected();
    // public System.Void UpdateState(IConnectedPlayer connectedPlayer)
    // Offset: 0x105AA98
    void UpdateState(GlobalNamespace::IConnectedPlayer* connectedPlayer);
    // private System.Boolean get_isConnectable()
    // Offset: 0x105BA88
    bool get_isConnectable();
    // public System.Void Connect()
    // Offset: 0x105BA24
    void Connect();
    // public System.String get_userId()
    // Offset: 0x105B51C
    // Implemented from: INetworkPlayer
    // Base method: System.String INetworkPlayer::get_userId()
    ::Il2CppString* get_userId();
    // Creating proxy method: GlobalNamespace_INetworkPlayer_get_userId
    // Maps to method: get_userId
    ::Il2CppString* GlobalNamespace_INetworkPlayer_get_userId();
    // public System.String get_userName()
    // Offset: 0x105B524
    // Implemented from: INetworkPlayer
    // Base method: System.String INetworkPlayer::get_userName()
    ::Il2CppString* get_userName();
    // Creating proxy method: GlobalNamespace_INetworkPlayer_get_userName
    // Maps to method: get_userName
    ::Il2CppString* GlobalNamespace_INetworkPlayer_get_userName();
    // public System.Boolean get_isMe()
    // Offset: 0x105B534
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_isMe()
    bool get_isMe();
    // public System.Int32 get_currentPartySize()
    // Offset: 0x105B53C
    // Implemented from: INetworkPlayer
    // Base method: System.Int32 INetworkPlayer::get_currentPartySize()
    int get_currentPartySize();
    // public System.Int32 get_maxPartySize()
    // Offset: 0x105B544
    // Implemented from: INetworkPlayer
    // Base method: System.Int32 INetworkPlayer::get_maxPartySize()
    int get_maxPartySize();
    // public BeatmapDifficultyMask get_difficulties()
    // Offset: 0x105B54C
    // Implemented from: INetworkPlayer
    // Base method: BeatmapDifficultyMask INetworkPlayer::get_difficulties()
    GlobalNamespace::BeatmapDifficultyMask get_difficulties();
    // public GameplayModifierMask get_modifiers()
    // Offset: 0x105B554
    // Implemented from: INetworkPlayer
    // Base method: GameplayModifierMask INetworkPlayer::get_modifiers()
    GlobalNamespace::GameplayModifierMask get_modifiers();
    // public SongPackMask get_songPacks()
    // Offset: 0x105B55C
    // Implemented from: INetworkPlayer
    // Base method: SongPackMask INetworkPlayer::get_songPacks()
    GlobalNamespace::SongPackMask get_songPacks();
    // public System.Boolean get_isOpenParty()
    // Offset: 0x105928C
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_isOpenParty()
    bool get_isOpenParty();
    // public System.Boolean get_isPlayer()
    // Offset: 0x105B568
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_isPlayer()
    bool get_isPlayer();
    // public System.Boolean get_isSpectating()
    // Offset: 0x105B574
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_isSpectating()
    bool get_isSpectating();
    // public System.Boolean get_isDedicatedServer()
    // Offset: 0x105B580
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_isDedicatedServer()
    bool get_isDedicatedServer();
    // public System.Boolean get_isMyPartyOwner()
    // Offset: 0x105AD24
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_isMyPartyOwner()
    bool get_isMyPartyOwner();
    // public System.Boolean get_isConnected()
    // Offset: 0x105B5AC
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_isConnected()
    bool get_isConnected();
    // public System.Boolean get_isWaitingOnJoin()
    // Offset: 0x105B600
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_isWaitingOnJoin()
    bool get_isWaitingOnJoin();
    // public System.Boolean get_canJoin()
    // Offset: 0x105B648
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_canJoin()
    bool get_canJoin();
    // public System.Void Join()
    // Offset: 0x105B6FC
    // Implemented from: INetworkPlayer
    // Base method: System.Void INetworkPlayer::Join()
    void Join();
    // public System.Boolean get_requiresPassword()
    // Offset: 0x105B754
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_requiresPassword()
    bool get_requiresPassword();
    // public System.Void Join(System.String password)
    // Offset: 0x105B75C
    // Implemented from: INetworkPlayer
    // Base method: System.Void INetworkPlayer::Join(System.String password)
    void Join(::Il2CppString* password);
    // public System.Boolean get_isWaitingOnInvite()
    // Offset: 0x105B760
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_isWaitingOnInvite()
    bool get_isWaitingOnInvite();
    // public System.Boolean get_canInvite()
    // Offset: 0x105B7A8
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_canInvite()
    bool get_canInvite();
    // public System.Void Invite()
    // Offset: 0x105B860
    // Implemented from: INetworkPlayer
    // Base method: System.Void INetworkPlayer::Invite()
    void Invite();
    // public System.Boolean get_canKick()
    // Offset: 0x105B8D0
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_canKick()
    bool get_canKick();
    // public System.Void Kick()
    // Offset: 0x105B904
    // Implemented from: INetworkPlayer
    // Base method: System.Void INetworkPlayer::Kick()
    void Kick();
    // public System.Boolean get_canLeave()
    // Offset: 0x105B924
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_canLeave()
    bool get_canLeave();
    // public System.Void Leave()
    // Offset: 0x105B980
    // Implemented from: INetworkPlayer
    // Base method: System.Void INetworkPlayer::Leave()
    void Leave();
    // public System.Boolean get_canBlock()
    // Offset: 0x105B9A4
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_canBlock()
    bool get_canBlock();
    // public System.Void Block()
    // Offset: 0x105BA08
    // Implemented from: INetworkPlayer
    // Base method: System.Void INetworkPlayer::Block()
    void Block();
    // public System.Boolean get_canUnblock()
    // Offset: 0x105BA14
    // Implemented from: INetworkPlayer
    // Base method: System.Boolean INetworkPlayer::get_canUnblock()
    bool get_canUnblock();
    // public System.Void Unblock()
    // Offset: 0x105BA1C
    // Implemented from: INetworkPlayer
    // Base method: System.Void INetworkPlayer::Unblock()
    void Unblock();
    // public System.Void SendJoinResponse(System.Boolean accept)
    // Offset: 0x1059254
    // Implemented from: INetworkPlayer
    // Base method: System.Void INetworkPlayer::SendJoinResponse(System.Boolean accept)
    void SendJoinResponse(bool accept);
    // public System.Void SendInviteResponse(System.Boolean accept)
    // Offset: 0x1059984
    // Implemented from: INetworkPlayer
    // Base method: System.Void INetworkPlayer::SendInviteResponse(System.Boolean accept)
    void SendInviteResponse(bool accept);
  }; // LocalNetworkPlayerModel/LocalNetworkPlayer
  #pragma pack(pop)
  static check_size<sizeof(LocalNetworkPlayerModel::LocalNetworkPlayer), 126 + sizeof(bool)> __GlobalNamespace_LocalNetworkPlayerModel_LocalNetworkPlayerSizeCheck;
  static_assert(sizeof(LocalNetworkPlayerModel::LocalNetworkPlayer) == 0x7F);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*, "", "LocalNetworkPlayerModel/LocalNetworkPlayer");
