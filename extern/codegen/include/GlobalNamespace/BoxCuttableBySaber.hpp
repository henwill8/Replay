// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: CuttableBySaber
#include "GlobalNamespace/CuttableBySaber.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: BoxCollider
  class BoxCollider;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: Saber
  class Saber;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: BoxCuttableBySaber
  // [] Offset: FFFFFFFF
  class BoxCuttableBySaber : public GlobalNamespace::CuttableBySaber {
    public:
    // private UnityEngine.BoxCollider _collider
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::BoxCollider* collider;
    // Field size check
    static_assert(sizeof(UnityEngine::BoxCollider*) == 0x8);
    // private System.Boolean _canBeCut
    // Size: 0x1
    // Offset: 0x28
    bool canBeCut;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: canBeCut and: radius
    char __padding1[0x3] = {};
    // private System.Single _radius
    // Size: 0x4
    // Offset: 0x2C
    float radius;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: BoxCuttableBySaber
    BoxCuttableBySaber(UnityEngine::BoxCollider* collider_ = {}, bool canBeCut_ = {}, float radius_ = {}) noexcept : collider{collider_}, canBeCut{canBeCut_}, radius{radius_} {}
    // public System.Void set_colliderSize(UnityEngine.Vector3 value)
    // Offset: 0xF6284C
    void set_colliderSize(UnityEngine::Vector3 value);
    // public UnityEngine.Vector3 get_colliderSize()
    // Offset: 0xF62960
    UnityEngine::Vector3 get_colliderSize();
    // protected System.Void Awake()
    // Offset: 0xF6297C
    void Awake();
    // public System.Void SetColliderCenterAndSize(UnityEngine.Vector3 center, UnityEngine.Vector3 size)
    // Offset: 0xF629DC
    void SetColliderCenterAndSize(UnityEngine::Vector3 center, UnityEngine::Vector3 size);
    // private System.Void RefreshRadius()
    // Offset: 0xF62880
    void RefreshRadius();
    // public override System.Single get_radius()
    // Offset: 0xF62800
    // Implemented from: CuttableBySaber
    // Base method: System.Single CuttableBySaber::get_radius()
    float get_radius();
    // public override System.Void set_canBeCut(System.Boolean value)
    // Offset: 0xF62808
    // Implemented from: CuttableBySaber
    // Base method: System.Void CuttableBySaber::set_canBeCut(System.Boolean value)
    void set_canBeCut(bool value);
    // public override System.Boolean get_canBeCut()
    // Offset: 0xF62844
    // Implemented from: CuttableBySaber
    // Base method: System.Boolean CuttableBySaber::get_canBeCut()
    bool get_canBeCut();
    // public override System.Void Cut(Saber saber, UnityEngine.Vector3 cutPoint, UnityEngine.Quaternion orientation, UnityEngine.Vector3 cutDirVec)
    // Offset: 0xF629B8
    // Implemented from: CuttableBySaber
    // Base method: System.Void CuttableBySaber::Cut(Saber saber, UnityEngine.Vector3 cutPoint, UnityEngine.Quaternion orientation, UnityEngine.Vector3 cutDirVec)
    void Cut(GlobalNamespace::Saber* saber, UnityEngine::Vector3 cutPoint, UnityEngine::Quaternion orientation, UnityEngine::Vector3 cutDirVec);
    // public System.Void .ctor()
    // Offset: 0xF62A40
    // Implemented from: CuttableBySaber
    // Base method: System.Void CuttableBySaber::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BoxCuttableBySaber* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BoxCuttableBySaber::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BoxCuttableBySaber*, creationType>()));
    }
  }; // BoxCuttableBySaber
  #pragma pack(pop)
  static check_size<sizeof(BoxCuttableBySaber), 44 + sizeof(float)> __GlobalNamespace_BoxCuttableBySaberSizeCheck;
  static_assert(sizeof(BoxCuttableBySaber) == 0x30);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BoxCuttableBySaber*, "", "BoxCuttableBySaber");
