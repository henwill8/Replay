// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: OVRPlugin/HandState
#include "GlobalNamespace/OVRPlugin_HandState.hpp"
// Including type: OVRPlugin/Skeleton
#include "GlobalNamespace/OVRPlugin_Skeleton.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x174
  #pragma pack(push, 1)
  // Autogenerated type: OVRHandTest
  // [] Offset: FFFFFFFF
  class OVRHandTest : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::OVRHandTest::BoolMonitor
    class BoolMonitor;
    // Nested type: GlobalNamespace::OVRHandTest::$$c
    class $$c;
    // public UnityEngine.UI.Text uiText
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::UI::Text* uiText;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Text*) == 0x8);
    // private System.Collections.Generic.List`1<OVRHandTest/BoolMonitor> monitors
    // Size: 0x8
    // Offset: 0x20
    System::Collections::Generic::List_1<GlobalNamespace::OVRHandTest::BoolMonitor*>* monitors;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::OVRHandTest::BoolMonitor*>*) == 0x8);
    // private System.Text.StringBuilder data
    // Size: 0x8
    // Offset: 0x28
    System::Text::StringBuilder* data;
    // Field size check
    static_assert(sizeof(System::Text::StringBuilder*) == 0x8);
    // private OVRPlugin/HandState hs_LH
    // Size: 0x78
    // Offset: 0x30
    GlobalNamespace::OVRPlugin::HandState hs_LH;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRPlugin::HandState) == 0x78);
    // private OVRPlugin/HandState hs_RH
    // Size: 0x78
    // Offset: 0xA8
    GlobalNamespace::OVRPlugin::HandState hs_RH;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRPlugin::HandState) == 0x78);
    // private OVRPlugin/Skeleton skel_LH
    // Size: 0x20
    // Offset: 0x120
    GlobalNamespace::OVRPlugin::Skeleton skel_LH;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRPlugin::Skeleton) == 0x20);
    // private OVRPlugin/Skeleton skel_RH
    // Size: 0x20
    // Offset: 0x140
    GlobalNamespace::OVRPlugin::Skeleton skel_RH;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRPlugin::Skeleton) == 0x20);
    // private OVRPlugin/Mesh mesh_LH
    // Size: 0x8
    // Offset: 0x160
    GlobalNamespace::OVRPlugin::Mesh* mesh_LH;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRPlugin::Mesh*) == 0x8);
    // private OVRPlugin/Mesh mesh_RH
    // Size: 0x8
    // Offset: 0x168
    GlobalNamespace::OVRPlugin::Mesh* mesh_RH;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRPlugin::Mesh*) == 0x8);
    // private System.Boolean result_skel_LH
    // Size: 0x1
    // Offset: 0x170
    bool result_skel_LH;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean result_skel_RH
    // Size: 0x1
    // Offset: 0x171
    bool result_skel_RH;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean result_mesh_LH
    // Size: 0x1
    // Offset: 0x172
    bool result_mesh_LH;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean result_mesh_RH
    // Size: 0x1
    // Offset: 0x173
    bool result_mesh_RH;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: OVRHandTest
    OVRHandTest(UnityEngine::UI::Text* uiText_ = {}, System::Collections::Generic::List_1<GlobalNamespace::OVRHandTest::BoolMonitor*>* monitors_ = {}, System::Text::StringBuilder* data_ = {}, GlobalNamespace::OVRPlugin::HandState hs_LH_ = {}, GlobalNamespace::OVRPlugin::HandState hs_RH_ = {}, GlobalNamespace::OVRPlugin::Skeleton skel_LH_ = {}, GlobalNamespace::OVRPlugin::Skeleton skel_RH_ = {}, GlobalNamespace::OVRPlugin::Mesh* mesh_LH_ = {}, GlobalNamespace::OVRPlugin::Mesh* mesh_RH_ = {}, bool result_skel_LH_ = {}, bool result_skel_RH_ = {}, bool result_mesh_LH_ = {}, bool result_mesh_RH_ = {}) noexcept : uiText{uiText_}, monitors{monitors_}, data{data_}, hs_LH{hs_LH_}, hs_RH{hs_RH_}, skel_LH{skel_LH_}, skel_RH{skel_RH_}, mesh_LH{mesh_LH_}, mesh_RH{mesh_RH_}, result_skel_LH{result_skel_LH_}, result_skel_RH{result_skel_RH_}, result_mesh_LH{result_mesh_LH_}, result_mesh_RH{result_mesh_RH_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get static field: static private System.String prevConnected
    static ::Il2CppString* _get_prevConnected();
    // Set static field: static private System.String prevConnected
    static void _set_prevConnected(::Il2CppString* value);
    // Get static field: static private OVRHandTest/BoolMonitor controllers
    static GlobalNamespace::OVRHandTest::BoolMonitor* _get_controllers();
    // Set static field: static private OVRHandTest/BoolMonitor controllers
    static void _set_controllers(GlobalNamespace::OVRHandTest::BoolMonitor* value);
    // private System.Void Start()
    // Offset: 0x13A255C
    void Start();
    // private System.Void Update()
    // Offset: 0x13A2960
    void Update();
    // public System.Void .ctor()
    // Offset: 0x13A35A0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRHandTest* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRHandTest::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRHandTest*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x13A3640
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // OVRHandTest
  #pragma pack(pop)
  static check_size<sizeof(OVRHandTest), 371 + sizeof(bool)> __GlobalNamespace_OVRHandTestSizeCheck;
  static_assert(sizeof(OVRHandTest) == 0x174);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRHandTest*, "", "OVRHandTest");
