// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRController
  class VRController;
  // Forward declaring type: AudioTimeSyncController
  class AudioTimeSyncController;
  // Forward declaring type: VRControllersRecorderData
  class VRControllersRecorderData;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: FullVRControllersRecorder
  // [] Offset: FFFFFFFF
  class FullVRControllersRecorder : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::FullVRControllersRecorder::Mode
    struct Mode;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: FullVRControllersRecorder/Mode
    // [] Offset: FFFFFFFF
    struct Mode/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: Mode
      constexpr Mode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public FullVRControllersRecorder/Mode Record
      static constexpr const int Record = 0;
      // Get static field: static public FullVRControllersRecorder/Mode Record
      static GlobalNamespace::FullVRControllersRecorder::Mode _get_Record();
      // Set static field: static public FullVRControllersRecorder/Mode Record
      static void _set_Record(GlobalNamespace::FullVRControllersRecorder::Mode value);
      // static field const value: static public FullVRControllersRecorder/Mode Playback
      static constexpr const int Playback = 1;
      // Get static field: static public FullVRControllersRecorder/Mode Playback
      static GlobalNamespace::FullVRControllersRecorder::Mode _get_Playback();
      // Set static field: static public FullVRControllersRecorder/Mode Playback
      static void _set_Playback(GlobalNamespace::FullVRControllersRecorder::Mode value);
      // static field const value: static public FullVRControllersRecorder/Mode Off
      static constexpr const int Off = 2;
      // Get static field: static public FullVRControllersRecorder/Mode Off
      static GlobalNamespace::FullVRControllersRecorder::Mode _get_Off();
      // Set static field: static public FullVRControllersRecorder/Mode Off
      static void _set_Off(GlobalNamespace::FullVRControllersRecorder::Mode value);
    }; // FullVRControllersRecorder/Mode
    #pragma pack(pop)
    static check_size<sizeof(FullVRControllersRecorder::Mode), 0 + sizeof(int)> __GlobalNamespace_FullVRControllersRecorder_ModeSizeCheck;
    static_assert(sizeof(FullVRControllersRecorder::Mode) == 0x4);
    // private System.String _recordingFilePath
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* recordingFilePath;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private FullVRControllersRecorder/Mode _mode
    // Size: 0x4
    // Offset: 0x20
    GlobalNamespace::FullVRControllersRecorder::Mode mode;
    // Field size check
    static_assert(sizeof(GlobalNamespace::FullVRControllersRecorder::Mode) == 0x4);
    // private System.Single _timeOffset
    // Size: 0x4
    // Offset: 0x24
    float timeOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _othersSmooth
    // Size: 0x4
    // Offset: 0x28
    float othersSmooth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _handsSmooth
    // Size: 0x4
    // Offset: 0x2C
    float handsSmooth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _playbackFloorOffset
    // Size: 0x4
    // Offset: 0x30
    float playbackFloorOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: playbackFloorOffset and: controllers
    char __padding5[0x4] = {};
    // [SpaceAttribute] Offset: 0xD44B9C
    // private VRController[] _controllers
    // Size: 0x8
    // Offset: 0x38
    ::Array<GlobalNamespace::VRController*>* controllers;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::VRController*>*) == 0x8);
    // [InjectAttribute] Offset: 0xD44BD4
    // private AudioTimeSyncController _audioTimeSyncController
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::AudioTimeSyncController* audioTimeSyncController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AudioTimeSyncController*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD44BE4
    // private System.Action`1<VRController> didSetControllerTransformEvent
    // Size: 0x8
    // Offset: 0x48
    System::Action_1<GlobalNamespace::VRController*>* didSetControllerTransformEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::VRController*>*) == 0x8);
    // private System.Int32 _keyframeIndex
    // Size: 0x4
    // Offset: 0x50
    int keyframeIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: keyframeIndex and: data
    char __padding9[0x4] = {};
    // private VRControllersRecorderData _data
    // Size: 0x8
    // Offset: 0x58
    GlobalNamespace::VRControllersRecorderData* data;
    // Field size check
    static_assert(sizeof(GlobalNamespace::VRControllersRecorderData*) == 0x8);
    // Creating value type constructor for type: FullVRControllersRecorder
    FullVRControllersRecorder(::Il2CppString* recordingFilePath_ = {}, GlobalNamespace::FullVRControllersRecorder::Mode mode_ = {}, float timeOffset_ = {}, float othersSmooth_ = {}, float handsSmooth_ = {}, float playbackFloorOffset_ = {}, ::Array<GlobalNamespace::VRController*>* controllers_ = {}, GlobalNamespace::AudioTimeSyncController* audioTimeSyncController_ = {}, System::Action_1<GlobalNamespace::VRController*>* didSetControllerTransformEvent_ = {}, int keyframeIndex_ = {}, GlobalNamespace::VRControllersRecorderData* data_ = {}) noexcept : recordingFilePath{recordingFilePath_}, mode{mode_}, timeOffset{timeOffset_}, othersSmooth{othersSmooth_}, handsSmooth{handsSmooth_}, playbackFloorOffset{playbackFloorOffset_}, controllers{controllers_}, audioTimeSyncController{audioTimeSyncController_}, didSetControllerTransformEvent{didSetControllerTransformEvent_}, keyframeIndex{keyframeIndex_}, data{data_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void add_didSetControllerTransformEvent(System.Action`1<VRController> value)
    // Offset: 0xF314B0
    void add_didSetControllerTransformEvent(System::Action_1<GlobalNamespace::VRController*>* value);
    // public System.Void remove_didSetControllerTransformEvent(System.Action`1<VRController> value)
    // Offset: 0xF31554
    void remove_didSetControllerTransformEvent(System::Action_1<GlobalNamespace::VRController*>* value);
    // protected System.Void Start()
    // Offset: 0xF315F8
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0xF31A10
    void OnDestroy();
    // private System.Void PlaybackTick()
    // Offset: 0xF31ABC
    void PlaybackTick();
    // private System.Void RecordTick()
    // Offset: 0xF31E9C
    void RecordTick();
    // protected System.Void Update()
    // Offset: 0xF32044
    void Update();
    // protected System.Void LateUpdate()
    // Offset: 0xF32094
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0xF320A4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FullVRControllersRecorder* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FullVRControllersRecorder::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FullVRControllersRecorder*, creationType>()));
    }
  }; // FullVRControllersRecorder
  #pragma pack(pop)
  static check_size<sizeof(FullVRControllersRecorder), 88 + sizeof(GlobalNamespace::VRControllersRecorderData*)> __GlobalNamespace_FullVRControllersRecorderSizeCheck;
  static_assert(sizeof(FullVRControllersRecorder) == 0x60);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::FullVRControllersRecorder*, "", "FullVRControllersRecorder");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::FullVRControllersRecorder::Mode, "", "FullVRControllersRecorder/Mode");
