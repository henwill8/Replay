// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x5C
  #pragma pack(push, 1)
  // Autogenerated type: SongPreviewPlayer
  // [] Offset: FFFFFFFF
  class SongPreviewPlayer : public UnityEngine::MonoBehaviour {
    public:
    // [TooltipAttribute] Offset: 0xD33B08
    // private System.Int32 _channelsCount
    // Size: 0x4
    // Offset: 0x18
    int channelsCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: channelsCount and: audioSourcePrefab
    char __padding0[0x4] = {};
    // private UnityEngine.AudioSource _audioSourcePrefab
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::AudioSource* audioSourcePrefab;
    // Field size check
    static_assert(sizeof(UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AudioClip _defaultAudioClip
    // Size: 0x8
    // Offset: 0x28
    UnityEngine::AudioClip* defaultAudioClip;
    // Field size check
    static_assert(sizeof(UnityEngine::AudioClip*) == 0x8);
    // private System.Single _volume
    // Size: 0x4
    // Offset: 0x30
    float volume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _ambientVolumeScale
    // Size: 0x4
    // Offset: 0x34
    float ambientVolumeScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _defaultCrossfadeSpeed
    // Size: 0x4
    // Offset: 0x38
    float defaultCrossfadeSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _defaultFadeOutSpeed
    // Size: 0x4
    // Offset: 0x3C
    float defaultFadeOutSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.AudioSource[] _audioSources
    // Size: 0x8
    // Offset: 0x40
    ::Array<UnityEngine::AudioSource*>* audioSources;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::AudioSource*>*) == 0x8);
    // private System.Int32 _activeChannel
    // Size: 0x4
    // Offset: 0x48
    int activeChannel;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _timeToDefaultAudioTransition
    // Size: 0x4
    // Offset: 0x4C
    float timeToDefaultAudioTransition;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _transitionAfterDelay
    // Size: 0x1
    // Offset: 0x50
    bool transitionAfterDelay;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: transitionAfterDelay and: volumeScale
    char __padding10[0x3] = {};
    // private System.Single _volumeScale
    // Size: 0x4
    // Offset: 0x54
    float volumeScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _fadeSpeed
    // Size: 0x4
    // Offset: 0x58
    float fadeSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: SongPreviewPlayer
    SongPreviewPlayer(int channelsCount_ = {}, UnityEngine::AudioSource* audioSourcePrefab_ = {}, UnityEngine::AudioClip* defaultAudioClip_ = {}, float volume_ = {}, float ambientVolumeScale_ = {}, float defaultCrossfadeSpeed_ = {}, float defaultFadeOutSpeed_ = {}, ::Array<UnityEngine::AudioSource*>* audioSources_ = {}, int activeChannel_ = {}, float timeToDefaultAudioTransition_ = {}, bool transitionAfterDelay_ = {}, float volumeScale_ = {}, float fadeSpeed_ = {}) noexcept : channelsCount{channelsCount_}, audioSourcePrefab{audioSourcePrefab_}, defaultAudioClip{defaultAudioClip_}, volume{volume_}, ambientVolumeScale{ambientVolumeScale_}, defaultCrossfadeSpeed{defaultCrossfadeSpeed_}, defaultFadeOutSpeed{defaultFadeOutSpeed_}, audioSources{audioSources_}, activeChannel{activeChannel_}, timeToDefaultAudioTransition{timeToDefaultAudioTransition_}, transitionAfterDelay{transitionAfterDelay_}, volumeScale{volumeScale_}, fadeSpeed{fadeSpeed_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Single get_volume()
    // Offset: 0xF71A10
    float get_volume();
    // public System.Void set_volume(System.Single value)
    // Offset: 0xF71A18
    void set_volume(float value);
    // protected System.Void OnEnable()
    // Offset: 0xF71A20
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0xF71E24
    void OnDisable();
    // protected System.Void Update()
    // Offset: 0xF71F50
    void Update();
    // public System.Void CrossfadeTo(UnityEngine.AudioClip audioClip, System.Single startTime, System.Single duration, System.Single volumeScale)
    // Offset: 0xF71C9C
    void CrossfadeTo(UnityEngine::AudioClip* audioClip, float startTime, float duration, float volumeScale);
    // public System.Void FadeOut()
    // Offset: 0xF7211C
    void FadeOut();
    // public System.Void CrossfadeToDefault()
    // Offset: 0xF72134
    void CrossfadeToDefault();
    // public System.Void .ctor()
    // Offset: 0xF72294
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SongPreviewPlayer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongPreviewPlayer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SongPreviewPlayer*, creationType>()));
    }
  }; // SongPreviewPlayer
  #pragma pack(pop)
  static check_size<sizeof(SongPreviewPlayer), 88 + sizeof(float)> __GlobalNamespace_SongPreviewPlayerSizeCheck;
  static_assert(sizeof(SongPreviewPlayer) == 0x5C);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SongPreviewPlayer*, "", "SongPreviewPlayer");
