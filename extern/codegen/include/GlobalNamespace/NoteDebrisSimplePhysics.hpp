// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NoteDebrisPhysics
#include "GlobalNamespace/NoteDebrisPhysics.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x45
  #pragma pack(push, 1)
  // Autogenerated type: NoteDebrisSimplePhysics
  // [] Offset: FFFFFFFF
  class NoteDebrisSimplePhysics : public GlobalNamespace::NoteDebrisPhysics {
    public:
    // private UnityEngine.Vector3 _currentForce
    // Size: 0xC
    // Offset: 0x18
    UnityEngine::Vector3 currentForce;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _currentTorque
    // Size: 0xC
    // Offset: 0x24
    UnityEngine::Vector3 currentTorque;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Transform _transform
    // Size: 0x8
    // Offset: 0x30
    UnityEngine::Transform* transform;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Vector3 _gravity
    // Size: 0xC
    // Offset: 0x38
    UnityEngine::Vector3 gravity;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private System.Boolean _firstUpdate
    // Size: 0x1
    // Offset: 0x44
    bool firstUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: NoteDebrisSimplePhysics
    NoteDebrisSimplePhysics(UnityEngine::Vector3 currentForce_ = {}, UnityEngine::Vector3 currentTorque_ = {}, UnityEngine::Transform* transform_ = {}, UnityEngine::Vector3 gravity_ = {}, bool firstUpdate_ = {}) noexcept : currentForce{currentForce_}, currentTorque{currentTorque_}, transform{transform_}, gravity{gravity_}, firstUpdate{firstUpdate_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void Start()
    // Offset: 0xF942B8
    void Start();
    // protected System.Void LateUpdate()
    // Offset: 0xF942FC
    void LateUpdate();
    // public override System.Void SetVelocity(UnityEngine.Vector3 force)
    // Offset: 0xF944F8
    // Implemented from: NoteDebrisPhysics
    // Base method: System.Void NoteDebrisPhysics::SetVelocity(UnityEngine.Vector3 force)
    void SetVelocity(UnityEngine::Vector3 force);
    // public override System.Void SetAngularVelocity(UnityEngine.Vector3 torque)
    // Offset: 0xF9450C
    // Implemented from: NoteDebrisPhysics
    // Base method: System.Void NoteDebrisPhysics::SetAngularVelocity(UnityEngine.Vector3 torque)
    void SetAngularVelocity(UnityEngine::Vector3 torque);
    // public System.Void .ctor()
    // Offset: 0xF945AC
    // Implemented from: NoteDebrisPhysics
    // Base method: System.Void NoteDebrisPhysics::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoteDebrisSimplePhysics* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteDebrisSimplePhysics::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoteDebrisSimplePhysics*, creationType>()));
    }
  }; // NoteDebrisSimplePhysics
  #pragma pack(pop)
  static check_size<sizeof(NoteDebrisSimplePhysics), 68 + sizeof(bool)> __GlobalNamespace_NoteDebrisSimplePhysicsSizeCheck;
  static_assert(sizeof(NoteDebrisSimplePhysics) == 0x45);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::NoteDebrisSimplePhysics*, "", "NoteDebrisSimplePhysics");
