// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IGameNoteControllerInitializable`1<T>
  template<typename T>
  class IGameNoteControllerInitializable_1;
  // Forward declaring type: IGameNoteTypeProvider
  class IGameNoteTypeProvider;
  // Forward declaring type: CutoutEffect
  class CutoutEffect;
  // Forward declaring type: NoteMovement
  class NoteMovement;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: SpriteRenderer
  class SpriteRenderer;
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: DisappearingArrowControllerBase`1
  template<typename T>
  class DisappearingArrowControllerBase_1 : public UnityEngine::MonoBehaviour {
    public:
    // private UnityEngine.SpriteRenderer[] _spriteRenderers
    // Offset: 0x0
    ::Array<UnityEngine::SpriteRenderer*>* spriteRenderers;
    // private UnityEngine.MeshRenderer _cubeMeshRenderer
    // Offset: 0x0
    UnityEngine::MeshRenderer* cubeMeshRenderer;
    // private CutoutEffect _arrowCutoutEffect
    // Offset: 0x0
    GlobalNamespace::CutoutEffect* arrowCutoutEffect;
    // private NoteMovement _noteMovement
    // Offset: 0x0
    GlobalNamespace::NoteMovement* noteMovement;
    // private System.Single _disappearingNormalStart
    // Offset: 0x0
    float disappearingNormalStart;
    // private System.Single _disappearingNormalEnd
    // Offset: 0x0
    float disappearingNormalEnd;
    // private System.Single _disappearingGhostStart
    // Offset: 0x0
    float disappearingGhostStart;
    // private System.Single _disappearingGhostEnd
    // Offset: 0x0
    float disappearingGhostEnd;
    // private System.Single[] _initialSpriteAlphas
    // Offset: 0x0
    ::Array<float>* initialSpriteAlphas;
    // private System.Single _prevArrowTransparency
    // Offset: 0x0
    float prevArrowTransparency;
    // private System.Single _minDistance
    // Offset: 0x0
    float minDistance;
    // private System.Single _maxDistance
    // Offset: 0x0
    float maxDistance;
    // private System.Boolean _hideMesh
    // Offset: 0x0
    bool hideMesh;
    // private System.Boolean _fadeArrow
    // Offset: 0x0
    bool fadeArrow;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected T get_gameNoteController()
    // Offset: 0xFFFFFFFF
    T get_gameNoteController() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<T>(this, "get_gameNoteController"));
    }
    // protected System.Void Awake()
    // Offset: 0xFFFFFFFF
    void Awake() {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Awake"));
    }
    // protected System.Void OnDestroy()
    // Offset: 0xFFFFFFFF
    void OnDestroy() {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnDestroy"));
    }
    // private System.Void CalculateMinMaxDistance()
    // Offset: 0xFFFFFFFF
    void CalculateMinMaxDistance() {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "CalculateMinMaxDistance"));
    }
    // private System.Void HandleNoteMovementNoteDidMoveInJumpPhase()
    // Offset: 0xFFFFFFFF
    void HandleNoteMovementNoteDidMoveInJumpPhase() {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleNoteMovementNoteDidMoveInJumpPhase"));
    }
    // private System.Void HandleGameNoteControllerDidInit(T gameNoteController)
    // Offset: 0xFFFFFFFF
    void HandleGameNoteControllerDidInit(T gameNoteController) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleGameNoteControllerDidInit", gameNoteController));
    }
    // private System.Void SetArrowTransparency(System.Single arrowTransparency)
    // Offset: 0xFFFFFFFF
    void SetArrowTransparency(float arrowTransparency) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "SetArrowTransparency", arrowTransparency));
    }
    // protected System.Void .ctor()
    // Offset: 0xFFFFFFFF
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static DisappearingArrowControllerBase_1<T>* New_ctor() {
      return THROW_UNLESS(il2cpp_utils::New<DisappearingArrowControllerBase_1<T>*>());
    }
  }; // DisappearingArrowControllerBase`1
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(GlobalNamespace::DisappearingArrowControllerBase_1, "", "DisappearingArrowControllerBase`1");
#pragma pack(pop)
