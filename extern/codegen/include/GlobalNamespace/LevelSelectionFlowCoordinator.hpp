// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.FlowCoordinator
#include "HMUI/FlowCoordinator.hpp"
// Including type: StandardLevelDetailViewController
#include "GlobalNamespace/StandardLevelDetailViewController.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapCharacteristicSO
  class BeatmapCharacteristicSO;
  // Forward declaring type: PlayerDataModel
  class PlayerDataModel;
  // Forward declaring type: MenuTransitionsHelper
  class MenuTransitionsHelper;
  // Forward declaring type: LevelSelectionNavigationController
  class LevelSelectionNavigationController;
  // Forward declaring type: PracticeViewController
  class PracticeViewController;
  // Forward declaring type: GameplaySetupViewController
  class GameplaySetupViewController;
  // Forward declaring type: LevelFilteringNavigationController
  class LevelFilteringNavigationController;
  // Forward declaring type: SimpleDialogPromptViewController
  class SimpleDialogPromptViewController;
  // Forward declaring type: VRPlatformHelper
  class VRPlatformHelper;
  // Forward declaring type: AppStaticSettingsSO
  class AppStaticSettingsSO;
  // Forward declaring type: IAnnotatedBeatmapLevelCollection
  class IAnnotatedBeatmapLevelCollection;
  // Forward declaring type: IPreviewBeatmapLevel
  class IPreviewBeatmapLevel;
  // Forward declaring type: LeaderboardViewController
  class LeaderboardViewController;
  // Forward declaring type: IBeatmapLevelPack
  class IBeatmapLevelPack;
  // Forward declaring type: IBeatmapLevel
  class IBeatmapLevel;
  // Forward declaring type: IDifficultyBeatmap
  class IDifficultyBeatmap;
  // Forward declaring type: StandardLevelScenesTransitionSetupDataSO
  class StandardLevelScenesTransitionSetupDataSO;
  // Forward declaring type: LevelCompletionResults
  class LevelCompletionResults;
  // Forward declaring type: GameplayModifiers
  class GameplayModifiers;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Skipping declaration: ViewController because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: LevelSelectionFlowCoordinator
  class LevelSelectionFlowCoordinator : public HMUI::FlowCoordinator {
    public:
    // Nested type: GlobalNamespace::LevelSelectionFlowCoordinator::$$c__DisplayClass52_0
    class $$c__DisplayClass52_0;
    // private BeatmapCharacteristicSO _degree360BeatmapCharacteristic
    // Offset: 0xA8
    GlobalNamespace::BeatmapCharacteristicSO* degree360BeatmapCharacteristic;
    // protected PlayerDataModel _playerDataModel
    // Offset: 0xB0
    GlobalNamespace::PlayerDataModel* playerDataModel;
    // private MenuTransitionsHelper _menuTransitionsHelper
    // Offset: 0xB8
    GlobalNamespace::MenuTransitionsHelper* menuTransitionsHelper;
    // protected LevelSelectionNavigationController _levelSelectionNavigationController
    // Offset: 0xC0
    GlobalNamespace::LevelSelectionNavigationController* levelSelectionNavigationController;
    // private PracticeViewController _practiceViewController
    // Offset: 0xC8
    GlobalNamespace::PracticeViewController* practiceViewController;
    // private GameplaySetupViewController _gameplaySetupViewController
    // Offset: 0xD0
    GlobalNamespace::GameplaySetupViewController* gameplaySetupViewController;
    // private LevelFilteringNavigationController _levelFilteringNavigationController
    // Offset: 0xD8
    GlobalNamespace::LevelFilteringNavigationController* levelFilteringNavigationController;
    // private SimpleDialogPromptViewController _simpleDialogPromptViewController
    // Offset: 0xE0
    GlobalNamespace::SimpleDialogPromptViewController* simpleDialogPromptViewController;
    // private VRPlatformHelper _vrPlatformHelper
    // Offset: 0xE8
    GlobalNamespace::VRPlatformHelper* vrPlatformHelper;
    // private AppStaticSettingsSO _appStaticSettings
    // Offset: 0xF0
    GlobalNamespace::AppStaticSettingsSO* appStaticSettings;
    // private IAnnotatedBeatmapLevelCollection _annotatedBeatmapLevelCollectionToBeSelectedAfterPresent
    // Offset: 0xF8
    GlobalNamespace::IAnnotatedBeatmapLevelCollection* annotatedBeatmapLevelCollectionToBeSelectedAfterPresent;
    // private IPreviewBeatmapLevel _beatmapLevelToBeSelectedAfterPresent
    // Offset: 0x100
    GlobalNamespace::IPreviewBeatmapLevel* beatmapLevelToBeSelectedAfterPresent;
    // protected System.Void LevelSelectionFlowCoordinatorDidActivate(System.Boolean firstActivation, HMUI.FlowCoordinator/ActivationType activationType)
    // Offset: 0xFFFFFFFF
    void LevelSelectionFlowCoordinatorDidActivate(bool firstActivation, HMUI::FlowCoordinator::ActivationType activationType);
    // protected System.Void LevelSelectionFlowCoordinatorDidDeactivate(HMUI.FlowCoordinator/DeactivationType deactivationType)
    // Offset: 0xFFFFFFFF
    void LevelSelectionFlowCoordinatorDidDeactivate(HMUI::FlowCoordinator::DeactivationType deactivationType);
    // protected System.Boolean get_isInPracticeView()
    // Offset: 0xBF6518
    bool get_isInPracticeView();
    // protected MenuTransitionsHelper get_menuTransitionsHelper()
    // Offset: 0xBF659C
    GlobalNamespace::MenuTransitionsHelper* get_menuTransitionsHelper();
    // protected GameplaySetupViewController get_gameplaySetupViewController()
    // Offset: 0xBF65A4
    GlobalNamespace::GameplaySetupViewController* get_gameplaySetupViewController();
    // protected LevelSelectionNavigationController get_levelSelectionNavigationController()
    // Offset: 0xBF65AC
    GlobalNamespace::LevelSelectionNavigationController* get_levelSelectionNavigationController();
    // protected HMUI.ViewController get_topScreenViewController()
    // Offset: 0xBF65B4
    HMUI::ViewController* get_topScreenViewController();
    // protected System.Boolean get_hidePacksIfOneOrNone()
    // Offset: 0xBF65BC
    bool get_hidePacksIfOneOrNone();
    // protected System.Boolean get_hideGameplaySetup()
    // Offset: 0xBF65C4
    bool get_hideGameplaySetup();
    // protected System.Boolean get_hidePracticeButton()
    // Offset: 0xBF65CC
    bool get_hidePracticeButton();
    // protected System.Boolean get_showBackButtonForMainViewController()
    // Offset: 0xBF65D4
    bool get_showBackButtonForMainViewController();
    // protected LeaderboardViewController get_leaderboardViewController()
    // Offset: 0xFFFFFFFF
    GlobalNamespace::LeaderboardViewController* get_leaderboardViewController();
    // protected System.Boolean get_showPlayerStatsInDetailView()
    // Offset: 0xFFFFFFFF
    bool get_showPlayerStatsInDetailView();
    // public System.Void Setup(IAnnotatedBeatmapLevelCollection annotatedBeatmapLevelCollectionToBeSelectedAfterPresent, IPreviewBeatmapLevel beatmapLevelToBeSelectedAfterPresent)
    // Offset: 0xBF65DC
    void Setup(GlobalNamespace::IAnnotatedBeatmapLevelCollection* annotatedBeatmapLevelCollectionToBeSelectedAfterPresent, GlobalNamespace::IPreviewBeatmapLevel* beatmapLevelToBeSelectedAfterPresent);
    // private System.Void ResetSetupParameters()
    // Offset: 0xBF6614
    void ResetSetupParameters();
    // protected System.Void DismissPracticeViewController(System.Action finishedCallback, System.Boolean immediately)
    // Offset: 0xBF7580
    void DismissPracticeViewController(System::Action* finishedCallback, bool immediately);
    // private System.Void HandleLevelFilteringNavigationControllerDidStartLoading(LevelFilteringNavigationController controller)
    // Offset: 0xBF7898
    void HandleLevelFilteringNavigationControllerDidStartLoading(GlobalNamespace::LevelFilteringNavigationController* controller);
    // private System.Void HandleLevelFilteringNavigationControllerDidSelectAnnotatedBeatmapLevelCollection(LevelFilteringNavigationController controller, IAnnotatedBeatmapLevelCollection annotatedBeatmapLevelCollection, UnityEngine.GameObject noDataInfoPrefab, BeatmapCharacteristicSO preferedBeatmapCharacteristic)
    // Offset: 0xBF7A2C
    void HandleLevelFilteringNavigationControllerDidSelectAnnotatedBeatmapLevelCollection(GlobalNamespace::LevelFilteringNavigationController* controller, GlobalNamespace::IAnnotatedBeatmapLevelCollection* annotatedBeatmapLevelCollection, UnityEngine::GameObject* noDataInfoPrefab, GlobalNamespace::BeatmapCharacteristicSO* preferedBeatmapCharacteristic);
    // private System.Void HandleLevelSelectionNavigationControllerDidSelectPack(LevelSelectionNavigationController viewController, IBeatmapLevelPack pack)
    // Offset: 0xBF7CBC
    void HandleLevelSelectionNavigationControllerDidSelectPack(GlobalNamespace::LevelSelectionNavigationController* viewController, GlobalNamespace::IBeatmapLevelPack* pack);
    // private System.Void HandleLevelSelectionNavigationControllerDidPressPlayButton(LevelSelectionNavigationController viewController)
    // Offset: 0xBF7CCC
    void HandleLevelSelectionNavigationControllerDidPressPlayButton(GlobalNamespace::LevelSelectionNavigationController* viewController);
    // private System.Void HandleLevelSelectionNavigationControllerDidPressPracticeButton(LevelSelectionNavigationController viewController, IBeatmapLevel level)
    // Offset: 0xBF8024
    void HandleLevelSelectionNavigationControllerDidPressPracticeButton(GlobalNamespace::LevelSelectionNavigationController* viewController, GlobalNamespace::IBeatmapLevel* level);
    // private System.Void HandleLevelSelectionNavigationControllerDidChangeDifficultyBeatmap(LevelSelectionNavigationController viewController, IDifficultyBeatmap beatmap)
    // Offset: 0xBF806C
    void HandleLevelSelectionNavigationControllerDidChangeDifficultyBeatmap(GlobalNamespace::LevelSelectionNavigationController* viewController, GlobalNamespace::IDifficultyBeatmap* beatmap);
    // private System.Void HandleLevelSelectionNavigationControllerDidPresentDetailContent(LevelSelectionNavigationController viewController, StandardLevelDetailViewController/ContentType contentType)
    // Offset: 0xBF80AC
    void HandleLevelSelectionNavigationControllerDidPresentDetailContent(GlobalNamespace::LevelSelectionNavigationController* viewController, GlobalNamespace::StandardLevelDetailViewController::ContentType contentType);
    // private System.Void HandleLevelSelectionNavigationControllerDidPressOpenPackButton(LevelSelectionNavigationController viewController, IBeatmapLevelPack levelPack)
    // Offset: 0xBF8154
    void HandleLevelSelectionNavigationControllerDidPressOpenPackButton(GlobalNamespace::LevelSelectionNavigationController* viewController, GlobalNamespace::IBeatmapLevelPack* levelPack);
    // private System.Void HandlePracticeViewControllerDidPressPlayButton()
    // Offset: 0xBF8174
    void HandlePracticeViewControllerDidPressPlayButton();
    // private System.Void StartLevel(IDifficultyBeatmap difficultyBeatmap, System.Action beforeSceneSwitchCallback, System.Boolean practice)
    // Offset: 0xBF8180
    void StartLevel(GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, System::Action* beforeSceneSwitchCallback, bool practice);
    // protected System.Void StartLevelOrShow360Warning(System.Action beforeSceneSwitchCallback, System.Boolean practice)
    // Offset: 0xBF7CD8
    void StartLevelOrShow360Warning(System::Action* beforeSceneSwitchCallback, bool practice);
    // private System.Void HandleStandardLevelDidFinish(StandardLevelScenesTransitionSetupDataSO standardLevelScenesTransitionSetupData, LevelCompletionResults levelCompletionResults)
    // Offset: 0xBF8374
    void HandleStandardLevelDidFinish(GlobalNamespace::StandardLevelScenesTransitionSetupDataSO* standardLevelScenesTransitionSetupData, GlobalNamespace::LevelCompletionResults* levelCompletionResults);
    // protected System.Boolean HandleBasicLevelCompletionResults(LevelCompletionResults levelCompletionResults, System.Boolean practice)
    // Offset: 0xBF843C
    bool HandleBasicLevelCompletionResults(GlobalNamespace::LevelCompletionResults* levelCompletionResults, bool practice);
    // protected System.Void ProcessLevelCompletionResultsAfterLevelDidFinish(LevelCompletionResults levelCompletionResults, IDifficultyBeatmap difficultyBeatmap, GameplayModifiers gameplayModifiers, System.Boolean practice)
    // Offset: 0xFFFFFFFF
    void ProcessLevelCompletionResultsAfterLevelDidFinish(GlobalNamespace::LevelCompletionResults* levelCompletionResults, GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, GlobalNamespace::GameplayModifiers* gameplayModifiers, bool practice);
    // protected override System.Void DidActivate(System.Boolean firstActivation, HMUI.FlowCoordinator/ActivationType activationType)
    // Offset: 0xBF664C
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::DidActivate(System.Boolean firstActivation, HMUI.FlowCoordinator/ActivationType activationType)
    void DidActivate(bool firstActivation, HMUI::FlowCoordinator::ActivationType activationType);
    // protected override System.Void DidDeactivate(HMUI.FlowCoordinator/DeactivationType deactivationType)
    // Offset: 0xBF6E80
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::DidDeactivate(HMUI.FlowCoordinator/DeactivationType deactivationType)
    void DidDeactivate(HMUI::FlowCoordinator::DeactivationType deactivationType);
    // protected override System.Void TopViewControllerWillChange(HMUI.ViewController oldViewController, HMUI.ViewController newViewController, System.Boolean immediately)
    // Offset: 0xBF764C
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::TopViewControllerWillChange(HMUI.ViewController oldViewController, HMUI.ViewController newViewController, System.Boolean immediately)
    void TopViewControllerWillChange(HMUI::ViewController* oldViewController, HMUI::ViewController* newViewController, bool immediately);
    // protected override System.Void BackButtonWasPressed(HMUI.ViewController topViewController)
    // Offset: 0xBF8488
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::BackButtonWasPressed(HMUI.ViewController topViewController)
    void BackButtonWasPressed(HMUI::ViewController* topViewController);
    // protected System.Void .ctor()
    // Offset: 0xBF8528
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static LevelSelectionFlowCoordinator* New_ctor();
  }; // LevelSelectionFlowCoordinator
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LevelSelectionFlowCoordinator*, "", "LevelSelectionFlowCoordinator");
#pragma pack(pop)
