// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: OVRPlugin/Vector2f
#include "GlobalNamespace/OVRPlugin_Vector2f.hpp"
// Including type: OVRPlugin/Sizef
#include "GlobalNamespace/OVRPlugin_Sizef.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRPlugin/Rectf
  // [] Offset: FFFFFFFF
  struct OVRPlugin::Rectf/*, public System::ValueType*/ {
    public:
    // private OVRPlugin/Vector2f Pos
    // Size: 0x8
    // Offset: 0x0
    GlobalNamespace::OVRPlugin::Vector2f Pos;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRPlugin::Vector2f) == 0x8);
    // private OVRPlugin/Sizef Size
    // Size: 0x8
    // Offset: 0x8
    GlobalNamespace::OVRPlugin::Sizef Size;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRPlugin::Sizef) == 0x8);
    // Creating value type constructor for type: Rectf
    constexpr Rectf(GlobalNamespace::OVRPlugin::Vector2f Pos_ = {}, GlobalNamespace::OVRPlugin::Sizef Size_ = {}) noexcept : Pos{Pos_}, Size{Size_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
  }; // OVRPlugin/Rectf
  #pragma pack(pop)
  static check_size<sizeof(OVRPlugin::Rectf), 8 + sizeof(GlobalNamespace::OVRPlugin::Sizef)> __GlobalNamespace_OVRPlugin_RectfSizeCheck;
  static_assert(sizeof(OVRPlugin::Rectf) == 0x10);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRPlugin::Rectf, "", "OVRPlugin/Rectf");
