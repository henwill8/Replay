// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: SaberType
#include "GlobalNamespace/SaberType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ObstacleSaberSparkleEffect
  class ObstacleSaberSparkleEffect;
  // Forward declaring type: BeatmapObjectManager
  class BeatmapObjectManager;
  // Forward declaring type: SaberManager
  class SaberManager;
  // Forward declaring type: HapticFeedbackController
  class HapticFeedbackController;
  // Forward declaring type: ColorManager
  class ColorManager;
  // Forward declaring type: Saber
  class Saber;
}
// Forward declaring namespace: Libraries::HM::HMLib::VR
namespace Libraries::HM::HMLib::VR {
  // Forward declaring type: HapticPresetSO
  class HapticPresetSO;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Quaternion because it is already included!
  // Forward declaring type: Bounds
  struct Bounds;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x88
  #pragma pack(push, 1)
  // Autogenerated type: ObstacleSaberSparkleEffectManager
  // [] Offset: FFFFFFFF
  class ObstacleSaberSparkleEffectManager : public UnityEngine::MonoBehaviour {
    public:
    // private ObstacleSaberSparkleEffect _obstacleSaberSparkleEffectPrefab
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::ObstacleSaberSparkleEffect* obstacleSaberSparkleEffectPrefab;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ObstacleSaberSparkleEffect*) == 0x8);
    // private Libraries.HM.HMLib.VR.HapticPresetSO _rumblePreset
    // Size: 0x8
    // Offset: 0x20
    Libraries::HM::HMLib::VR::HapticPresetSO* rumblePreset;
    // Field size check
    static_assert(sizeof(Libraries::HM::HMLib::VR::HapticPresetSO*) == 0x8);
    // [InjectAttribute] Offset: 0xD38554
    // private readonly BeatmapObjectManager _beatmapObjectManager
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::BeatmapObjectManager* beatmapObjectManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectManager*) == 0x8);
    // [InjectAttribute] Offset: 0xD38564
    // private readonly SaberManager _saberManager
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::SaberManager* saberManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SaberManager*) == 0x8);
    // [InjectAttribute] Offset: 0xD38574
    // private readonly HapticFeedbackController _hapticFeedbackController
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::HapticFeedbackController* hapticFeedbackController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::HapticFeedbackController*) == 0x8);
    // [InjectAttribute] Offset: 0xD38584
    // private readonly ColorManager _colorManager
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::ColorManager* colorManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorManager*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD38594
    // private System.Action`1<SaberType> sparkleEffectDidStartEvent
    // Size: 0x8
    // Offset: 0x48
    System::Action_1<GlobalNamespace::SaberType>* sparkleEffectDidStartEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::SaberType>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD385A4
    // private System.Action`1<SaberType> sparkleEffectDidEndEvent
    // Size: 0x8
    // Offset: 0x50
    System::Action_1<GlobalNamespace::SaberType>* sparkleEffectDidEndEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::SaberType>*) == 0x8);
    // private Saber[] _sabers
    // Size: 0x8
    // Offset: 0x58
    ::Array<GlobalNamespace::Saber*>* sabers;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::Saber*>*) == 0x8);
    // private ObstacleSaberSparkleEffect[] _effects
    // Size: 0x8
    // Offset: 0x60
    ::Array<GlobalNamespace::ObstacleSaberSparkleEffect*>* effects;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::ObstacleSaberSparkleEffect*>*) == 0x8);
    // private UnityEngine.Transform[] _effectsTransforms
    // Size: 0x8
    // Offset: 0x68
    ::Array<UnityEngine::Transform*>* effectsTransforms;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Transform*>*) == 0x8);
    // private System.Boolean[] _isSystemActive
    // Size: 0x8
    // Offset: 0x70
    ::Array<bool>* isSystemActive;
    // Field size check
    static_assert(sizeof(::Array<bool>*) == 0x8);
    // private System.Boolean[] _wasSystemActive
    // Size: 0x8
    // Offset: 0x78
    ::Array<bool>* wasSystemActive;
    // Field size check
    static_assert(sizeof(::Array<bool>*) == 0x8);
    // private UnityEngine.Vector3[] _burnMarkPositions
    // Size: 0x8
    // Offset: 0x80
    ::Array<UnityEngine::Vector3>* burnMarkPositions;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Vector3>*) == 0x8);
    // Creating value type constructor for type: ObstacleSaberSparkleEffectManager
    ObstacleSaberSparkleEffectManager(GlobalNamespace::ObstacleSaberSparkleEffect* obstacleSaberSparkleEffectPrefab_ = {}, Libraries::HM::HMLib::VR::HapticPresetSO* rumblePreset_ = {}, GlobalNamespace::BeatmapObjectManager* beatmapObjectManager_ = {}, GlobalNamespace::SaberManager* saberManager_ = {}, GlobalNamespace::HapticFeedbackController* hapticFeedbackController_ = {}, GlobalNamespace::ColorManager* colorManager_ = {}, System::Action_1<GlobalNamespace::SaberType>* sparkleEffectDidStartEvent_ = {}, System::Action_1<GlobalNamespace::SaberType>* sparkleEffectDidEndEvent_ = {}, ::Array<GlobalNamespace::Saber*>* sabers_ = {}, ::Array<GlobalNamespace::ObstacleSaberSparkleEffect*>* effects_ = {}, ::Array<UnityEngine::Transform*>* effectsTransforms_ = {}, ::Array<bool>* isSystemActive_ = {}, ::Array<bool>* wasSystemActive_ = {}, ::Array<UnityEngine::Vector3>* burnMarkPositions_ = {}) noexcept : obstacleSaberSparkleEffectPrefab{obstacleSaberSparkleEffectPrefab_}, rumblePreset{rumblePreset_}, beatmapObjectManager{beatmapObjectManager_}, saberManager{saberManager_}, hapticFeedbackController{hapticFeedbackController_}, colorManager{colorManager_}, sparkleEffectDidStartEvent{sparkleEffectDidStartEvent_}, sparkleEffectDidEndEvent{sparkleEffectDidEndEvent_}, sabers{sabers_}, effects{effects_}, effectsTransforms{effectsTransforms_}, isSystemActive{isSystemActive_}, wasSystemActive{wasSystemActive_}, burnMarkPositions{burnMarkPositions_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void add_sparkleEffectDidStartEvent(System.Action`1<SaberType> value)
    // Offset: 0x10F56A4
    void add_sparkleEffectDidStartEvent(System::Action_1<GlobalNamespace::SaberType>* value);
    // public System.Void remove_sparkleEffectDidStartEvent(System.Action`1<SaberType> value)
    // Offset: 0x10F5908
    void remove_sparkleEffectDidStartEvent(System::Action_1<GlobalNamespace::SaberType>* value);
    // public System.Void add_sparkleEffectDidEndEvent(System.Action`1<SaberType> value)
    // Offset: 0x10F5748
    void add_sparkleEffectDidEndEvent(System::Action_1<GlobalNamespace::SaberType>* value);
    // public System.Void remove_sparkleEffectDidEndEvent(System.Action`1<SaberType> value)
    // Offset: 0x10F59AC
    void remove_sparkleEffectDidEndEvent(System::Action_1<GlobalNamespace::SaberType>* value);
    // protected System.Void Start()
    // Offset: 0x10F6054
    void Start();
    // protected System.Void OnDisable()
    // Offset: 0x10F6360
    void OnDisable();
    // protected System.Void Update()
    // Offset: 0x10F641C
    void Update();
    // private UnityEngine.Quaternion GetEffectRotation(UnityEngine.Vector3 pos, UnityEngine.Transform transform, UnityEngine.Bounds bounds)
    // Offset: 0x10F6CD4
    UnityEngine::Quaternion GetEffectRotation(UnityEngine::Vector3 pos, UnityEngine::Transform* transform, UnityEngine::Bounds bounds);
    // public UnityEngine.Vector3 BurnMarkPosForSaberType(SaberType saberType)
    // Offset: 0x10F5B94
    UnityEngine::Vector3 BurnMarkPosForSaberType(GlobalNamespace::SaberType saberType);
    // private System.Boolean GetBurnMarkPos(UnityEngine.Bounds bounds, UnityEngine.Transform transform, UnityEngine.Vector3 bladeBottomPos, UnityEngine.Vector3 bladeTopPos, out UnityEngine.Vector3 burnMarkPos)
    // Offset: 0x10F6A7C
    bool GetBurnMarkPos(UnityEngine::Bounds bounds, UnityEngine::Transform* transform, UnityEngine::Vector3 bladeBottomPos, UnityEngine::Vector3 bladeTopPos, UnityEngine::Vector3& burnMarkPos);
    // public System.Void .ctor()
    // Offset: 0x10F6E8C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ObstacleSaberSparkleEffectManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleSaberSparkleEffectManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ObstacleSaberSparkleEffectManager*, creationType>()));
    }
  }; // ObstacleSaberSparkleEffectManager
  #pragma pack(pop)
  static check_size<sizeof(ObstacleSaberSparkleEffectManager), 128 + sizeof(::Array<UnityEngine::Vector3>*)> __GlobalNamespace_ObstacleSaberSparkleEffectManagerSizeCheck;
  static_assert(sizeof(ObstacleSaberSparkleEffectManager) == 0x88);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::ObstacleSaberSparkleEffectManager*, "", "ObstacleSaberSparkleEffectManager");
