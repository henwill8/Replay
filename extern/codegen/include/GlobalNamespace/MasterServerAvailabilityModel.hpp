// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IMasterServerAvailabilityModel
#include "GlobalNamespace/IMasterServerAvailabilityModel.hpp"
// Including type: System.DateTime
#include "System/DateTime.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: INetworkConfig
  class INetworkConfig;
  // Forward declaring type: MasterServerAvailabilityData
  class MasterServerAvailabilityData;
}
// Forward declaring namespace: System::Net::Http
namespace System::Net::Http {
  // Forward declaring type: HttpClient
  class HttpClient;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: MasterServerAvailabilityModel
  // [] Offset: FFFFFFFF
  class MasterServerAvailabilityModel : public ::Il2CppObject/*, public GlobalNamespace::IMasterServerAvailabilityModel*/ {
    public:
    // Nested type: GlobalNamespace::MasterServerAvailabilityModel::$GetAvailabilityAsyncInternal$d__10
    struct $GetAvailabilityAsyncInternal$d__10;
    // [InjectAttribute] Offset: 0xD35EA0
    // private readonly INetworkConfig _networkConfig
    // Size: 0x8
    // Offset: 0x10
    GlobalNamespace::INetworkConfig* networkConfig;
    // Field size check
    static_assert(sizeof(GlobalNamespace::INetworkConfig*) == 0x8);
    // private System.Net.Http.HttpClient _client
    // Size: 0x8
    // Offset: 0x18
    System::Net::Http::HttpClient* client;
    // Field size check
    static_assert(sizeof(System::Net::Http::HttpClient*) == 0x8);
    // private System.Threading.Tasks.Task`1<MasterServerAvailabilityData> _request
    // Size: 0x8
    // Offset: 0x20
    System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerAvailabilityData*>* request;
    // Field size check
    static_assert(sizeof(System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerAvailabilityData*>*) == 0x8);
    // private System.DateTime _lastRequestTime
    // Size: 0x8
    // Offset: 0x28
    System::DateTime lastRequestTime;
    // Field size check
    static_assert(sizeof(System::DateTime) == 0x8);
    // Creating value type constructor for type: MasterServerAvailabilityModel
    MasterServerAvailabilityModel(GlobalNamespace::INetworkConfig* networkConfig_ = {}, System::Net::Http::HttpClient* client_ = {}, System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerAvailabilityData*>* request_ = {}, System::DateTime lastRequestTime_ = {}) noexcept : networkConfig{networkConfig_}, client{client_}, request{request_}, lastRequestTime{lastRequestTime_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IMasterServerAvailabilityModel
    operator GlobalNamespace::IMasterServerAvailabilityModel() noexcept {
      return *reinterpret_cast<GlobalNamespace::IMasterServerAvailabilityModel*>(this);
    }
    // static field const value: static private System.Single kRequestCacheTimeHours
    static constexpr const float kRequestCacheTimeHours = 1;
    // Get static field: static private System.Single kRequestCacheTimeHours
    static float _get_kRequestCacheTimeHours();
    // Set static field: static private System.Single kRequestCacheTimeHours
    static void _set_kRequestCacheTimeHours(float value);
    // static field const value: static private System.Int32 kRequestTimeoutSeconds
    static constexpr const int kRequestTimeoutSeconds = 30;
    // Get static field: static private System.Int32 kRequestTimeoutSeconds
    static int _get_kRequestTimeoutSeconds();
    // Set static field: static private System.Int32 kRequestTimeoutSeconds
    static void _set_kRequestTimeoutSeconds(int value);
    // private System.Void Init()
    // Offset: 0x1061ED0
    void Init();
    // private System.Boolean IsAvailabilityTaskValid()
    // Offset: 0x1061FCC
    bool IsAvailabilityTaskValid();
    // private System.Void StartRequest()
    // Offset: 0x1061ED4
    void StartRequest();
    // private System.Threading.Tasks.Task`1<MasterServerAvailabilityData> GetAvailabilityAsyncInternal()
    // Offset: 0x10620D8
    System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerAvailabilityData*>* GetAvailabilityAsyncInternal();
    // public System.Threading.Tasks.Task`1<MasterServerAvailabilityData> GetAvailabilityAsync(System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1061F58
    // Implemented from: IMasterServerAvailabilityModel
    // Base method: System.Threading.Tasks.Task`1<MasterServerAvailabilityData> IMasterServerAvailabilityModel::GetAvailabilityAsync(System.Threading.CancellationToken cancellationToken)
    System::Threading::Tasks::Task_1<GlobalNamespace::MasterServerAvailabilityData*>* GetAvailabilityAsync(System::Threading::CancellationToken cancellationToken);
    // public System.Void .ctor()
    // Offset: 0x10621F0
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MasterServerAvailabilityModel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MasterServerAvailabilityModel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MasterServerAvailabilityModel*, creationType>()));
    }
  }; // MasterServerAvailabilityModel
  #pragma pack(pop)
  static check_size<sizeof(MasterServerAvailabilityModel), 40 + sizeof(System::DateTime)> __GlobalNamespace_MasterServerAvailabilityModelSizeCheck;
  static_assert(sizeof(MasterServerAvailabilityModel) == 0x30);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MasterServerAvailabilityModel*, "", "MasterServerAvailabilityModel");
