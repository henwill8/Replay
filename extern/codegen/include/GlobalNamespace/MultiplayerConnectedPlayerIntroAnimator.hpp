// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AvatarVisualController
  class AvatarVisualController;
  // Forward declaring type: ScaleAnimator
  class ScaleAnimator;
  // Forward declaring type: ColorSO
  class ColorSO;
  // Forward declaring type: VFXController
  class VFXController;
  // Forward declaring type: LightsAnimator
  class LightsAnimator;
}
// Forward declaring namespace: Tweening
namespace Tweening {
  // Forward declaring type: TweeningManager
  class TweeningManager;
  // Forward declaring type: Tween
  class Tween;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerConnectedPlayerIntroAnimator
  // [] Offset: FFFFFFFF
  class MultiplayerConnectedPlayerIntroAnimator : public UnityEngine::MonoBehaviour {
    public:
    // [HeaderAttribute] Offset: 0xD3AD50
    // private AvatarVisualController _avatarVisualsController
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::AvatarVisualController* avatarVisualsController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AvatarVisualController*) == 0x8);
    // private ScaleAnimator _avatarScaleAnimator
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::ScaleAnimator* avatarScaleAnimator;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ScaleAnimator*) == 0x8);
    // [HeaderAttribute] Offset: 0xD3ADAC
    // protected ColorSO _activeLightsColor
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::ColorSO* activeLightsColor;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorSO*) == 0x8);
    // protected ColorSO _offLightsColor
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::ColorSO* offLightsColor;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorSO*) == 0x8);
    // [HeaderAttribute] Offset: 0xD3AE08
    // private VFXController _spawnVFXController
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::VFXController* spawnVFXController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::VFXController*) == 0x8);
    // [SpaceAttribute] Offset: 0xD3AE54
    // protected LightsAnimator[] _lightsAnimators
    // Size: 0x8
    // Offset: 0x40
    ::Array<GlobalNamespace::LightsAnimator*>* lightsAnimators;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::LightsAnimator*>*) == 0x8);
    // [InjectAttribute] Offset: 0xD3AE8C
    // private readonly Tweening.TweeningManager _tweeningManager
    // Size: 0x8
    // Offset: 0x48
    Tweening::TweeningManager* tweeningManager;
    // Field size check
    static_assert(sizeof(Tweening::TweeningManager*) == 0x8);
    // private Tweening.Tween _animateAvatarColorTween
    // Size: 0x8
    // Offset: 0x50
    Tweening::Tween* animateAvatarColorTween;
    // Field size check
    static_assert(sizeof(Tweening::Tween*) == 0x8);
    // Creating value type constructor for type: MultiplayerConnectedPlayerIntroAnimator
    MultiplayerConnectedPlayerIntroAnimator(GlobalNamespace::AvatarVisualController* avatarVisualsController_ = {}, GlobalNamespace::ScaleAnimator* avatarScaleAnimator_ = {}, GlobalNamespace::ColorSO* activeLightsColor_ = {}, GlobalNamespace::ColorSO* offLightsColor_ = {}, GlobalNamespace::VFXController* spawnVFXController_ = {}, ::Array<GlobalNamespace::LightsAnimator*>* lightsAnimators_ = {}, Tweening::TweeningManager* tweeningManager_ = {}, Tweening::Tween* animateAvatarColorTween_ = {}) noexcept : avatarVisualsController{avatarVisualsController_}, avatarScaleAnimator{avatarScaleAnimator_}, activeLightsColor{activeLightsColor_}, offLightsColor{offLightsColor_}, spawnVFXController{spawnVFXController_}, lightsAnimators{lightsAnimators_}, tweeningManager{tweeningManager_}, animateAvatarColorTween{animateAvatarColorTween_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void OnDestroy()
    // Offset: 0x101B994
    void OnDestroy();
    // public System.Void SetBeforeIntroValues()
    // Offset: 0x101BA2C
    void SetBeforeIntroValues();
    // public System.Void Animate(System.Single duration, System.Int32 order)
    // Offset: 0x101BADC
    void Animate(float duration, int order);
    // public System.Void TransitionToAfterIntroAnimationState()
    // Offset: 0x101BCD4
    void TransitionToAfterIntroAnimationState();
    // private System.Void <Animate>b__10_0(UnityEngine.Color color)
    // Offset: 0x101BDA4
    void $Animate$b__10_0(UnityEngine::Color color);
    // public System.Void .ctor()
    // Offset: 0x101BD9C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerConnectedPlayerIntroAnimator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerConnectedPlayerIntroAnimator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerConnectedPlayerIntroAnimator*, creationType>()));
    }
  }; // MultiplayerConnectedPlayerIntroAnimator
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerConnectedPlayerIntroAnimator), 80 + sizeof(Tweening::Tween*)> __GlobalNamespace_MultiplayerConnectedPlayerIntroAnimatorSizeCheck;
  static_assert(sizeof(MultiplayerConnectedPlayerIntroAnimator) == 0x58);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerConnectedPlayerIntroAnimator*, "", "MultiplayerConnectedPlayerIntroAnimator");
