// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: OVRPlugin/BoneId
#include "GlobalNamespace/OVRPlugin_BoneId.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x24
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRPlugin/Bone
  // [] Offset: FFFFFFFF
  struct OVRPlugin::Bone/*, public System::ValueType*/ {
    public:
    // public OVRPlugin/BoneId Id
    // Size: 0x4
    // Offset: 0x0
    GlobalNamespace::OVRPlugin::BoneId Id;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRPlugin::BoneId) == 0x4);
    // public System.Int16 ParentBoneIndex
    // Size: 0x2
    // Offset: 0x4
    int16_t ParentBoneIndex;
    // Field size check
    static_assert(sizeof(int16_t) == 0x2);
    // Padding between fields: ParentBoneIndex and: Pose
    char __padding1[0x2] = {};
    // public OVRPlugin/Posef Pose
    // Size: 0x1C
    // Offset: 0x8
    GlobalNamespace::OVRPlugin::Posef Pose;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRPlugin::Posef) == 0x1C);
    // Creating value type constructor for type: Bone
    constexpr Bone(GlobalNamespace::OVRPlugin::BoneId Id_ = {}, int16_t ParentBoneIndex_ = {}, GlobalNamespace::OVRPlugin::Posef Pose_ = {}) noexcept : Id{Id_}, ParentBoneIndex{ParentBoneIndex_}, Pose{Pose_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
  }; // OVRPlugin/Bone
  #pragma pack(pop)
  static check_size<sizeof(OVRPlugin::Bone), 8 + sizeof(GlobalNamespace::OVRPlugin::Posef)> __GlobalNamespace_OVRPlugin_BoneSizeCheck;
  static_assert(sizeof(OVRPlugin::Bone) == 0x24);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRPlugin::Bone, "", "OVRPlugin/Bone");
