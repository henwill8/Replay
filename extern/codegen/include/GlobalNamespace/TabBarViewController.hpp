// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: TextSegmentedControl
  class TextSegmentedControl;
  // Forward declaring type: SegmentedControl
  class SegmentedControl;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: ContentSizeFitter
  class ContentSizeFitter;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x91
  #pragma pack(push, 1)
  // Autogenerated type: TabBarViewController
  // [] Offset: FFFFFFFF
  class TabBarViewController : public HMUI::ViewController {
    public:
    // Nested type: GlobalNamespace::TabBarViewController::TabBarItem
    class TabBarItem;
    // private HMUI.TextSegmentedControl _segmentedControll
    // Size: 0x8
    // Offset: 0x70
    HMUI::TextSegmentedControl* segmentedControll;
    // Field size check
    static_assert(sizeof(HMUI::TextSegmentedControl*) == 0x8);
    // private UnityEngine.UI.ContentSizeFitter _contentSizeFilter
    // Size: 0x8
    // Offset: 0x78
    UnityEngine::UI::ContentSizeFitter* contentSizeFilter;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::ContentSizeFitter*) == 0x8);
    // private System.String[] _labels
    // Size: 0x8
    // Offset: 0x80
    ::Array<::Il2CppString*>* labels;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppString*>*) == 0x8);
    // private TabBarViewController/TabBarItem[] _items
    // Size: 0x8
    // Offset: 0x88
    ::Array<GlobalNamespace::TabBarViewController::TabBarItem*>* items;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::TabBarViewController::TabBarItem*>*) == 0x8);
    // private System.Boolean _shouldReloadData
    // Size: 0x1
    // Offset: 0x90
    bool shouldReloadData;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: TabBarViewController
    TabBarViewController(HMUI::TextSegmentedControl* segmentedControll_ = {}, UnityEngine::UI::ContentSizeFitter* contentSizeFilter_ = {}, ::Array<::Il2CppString*>* labels_ = {}, ::Array<GlobalNamespace::TabBarViewController::TabBarItem*>* items_ = {}, bool shouldReloadData_ = {}) noexcept : segmentedControll{segmentedControll_}, contentSizeFilter{contentSizeFilter_}, labels{labels_}, items{items_}, shouldReloadData{shouldReloadData_} {}
    // public System.Void set_sizeToFit(System.Boolean value)
    // Offset: 0xF40F10
    void set_sizeToFit(bool value);
    // public System.Boolean get_sizeToFit()
    // Offset: 0xF40F30
    bool get_sizeToFit();
    // public System.Int32 get_selectedCellNumber()
    // Offset: 0xF40F4C
    int get_selectedCellNumber();
    // public System.Void Setup(TabBarViewController/TabBarItem[] items)
    // Offset: 0xF40F68
    void Setup(::Array<GlobalNamespace::TabBarViewController::TabBarItem*>* items);
    // public System.Void SelectItem(System.Int32 index)
    // Offset: 0xF410C8
    void SelectItem(int index);
    // public System.Void Clear()
    // Offset: 0xF410E4
    void Clear();
    // private System.Void HandleDidSelectCell(HMUI.SegmentedControl segmentedControl, System.Int32 cellNumber)
    // Offset: 0xF412F4
    void HandleDidSelectCell(HMUI::SegmentedControl* segmentedControl, int cellNumber);
    // protected override System.Void DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0xF41140
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
    // protected override System.Void OnDestroy()
    // Offset: 0xF41210
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::OnDestroy()
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0xF41348
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TabBarViewController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TabBarViewController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TabBarViewController*, creationType>()));
    }
  }; // TabBarViewController
  #pragma pack(pop)
  static check_size<sizeof(TabBarViewController), 144 + sizeof(bool)> __GlobalNamespace_TabBarViewControllerSizeCheck;
  static_assert(sizeof(TabBarViewController) == 0x91);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::TabBarViewController*, "", "TabBarViewController");
