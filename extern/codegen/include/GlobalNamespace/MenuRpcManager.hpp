// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: IMenuRpcManager
#include "GlobalNamespace/IMenuRpcManager.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  class Action_3;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`4<T1, T2, T3, T4>
  template<typename T1, typename T2, typename T3, typename T4>
  class Action_4;
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: RpcHandler`1<TType>
  template<typename TType>
  class RpcHandler_1;
  // Forward declaring type: BeatmapIdentifierNetSerializable
  class BeatmapIdentifierNetSerializable;
  // Forward declaring type: GameplayModifiers
  class GameplayModifiers;
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: MenuRpcManager
  class MenuRpcManager : public ::Il2CppObject/*, public System::IDisposable, public GlobalNamespace::IMenuRpcManager*/ {
    public:
    // Nested type: GlobalNamespace::MenuRpcManager::RpcType
    struct RpcType;
    // Nested type: GlobalNamespace::MenuRpcManager::GetIsEntitledToLevelRpc
    class GetIsEntitledToLevelRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::SetIsEntitledToLevelRpc
    class SetIsEntitledToLevelRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::InvalidateLevelEntitlementStatusesRpc
    class InvalidateLevelEntitlementStatusesRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::SelectLevelPackRpc
    class SelectLevelPackRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::SelectBeatmapRpc
    class SelectBeatmapRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::ClearSelectedBeatmapRpc
    class ClearSelectedBeatmapRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::GetSelectedBeatmapRpc
    class GetSelectedBeatmapRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::SelectGameplayModifiersRpc
    class SelectGameplayModifiersRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::ClearSelectedGameplayModifiersRpc
    class ClearSelectedGameplayModifiersRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::GetSelectedGameplayModifiersRpc
    class GetSelectedGameplayModifiersRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::LevelLoadErrorRpc
    class LevelLoadErrorRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::LevelLoadSuccessRpc
    class LevelLoadSuccessRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::StartLevelRpc
    class StartLevelRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::GetStartedLevelRpc
    class GetStartedLevelRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::GetMultiplayerGameStateRpc
    class GetMultiplayerGameStateRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::SetMultiplayerGameStateRpc
    class SetMultiplayerGameStateRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::CancelCountdownRpc
    class CancelCountdownRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::SetCountdownEndTimeRpc
    class SetCountdownEndTimeRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::GetCountdownEndTimeRpc
    class GetCountdownEndTimeRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::CancelLevelStartRpc
    class CancelLevelStartRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::GetIsReadyRpc
    class GetIsReadyRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::SetIsReadyRpc
    class SetIsReadyRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::SetStartGameTimeRpc
    class SetStartGameTimeRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::CancelStartGameTimeRpc
    class CancelStartGameTimeRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::GetIsInLobbyRpc
    class GetIsInLobbyRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::SetIsInLobbyRpc
    class SetIsInLobbyRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::GetOwnedSongPacksRpc
    class GetOwnedSongPacksRpc;
    // Nested type: GlobalNamespace::MenuRpcManager::SetOwnedSongPacksRpc
    class SetOwnedSongPacksRpc;
    // Autogenerated type: MenuRpcManager/RpcType
    struct RpcType : public System::Enum {
      public:
      // public System.Byte value__
      // Offset: 0x0
      uint8_t value;
      // Creating value type constructor for type: RpcType
      constexpr RpcType(uint8_t value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator uint8_t
      constexpr operator uint8_t() const noexcept {
        return value;
      }
      // static field const value: static public MenuRpcManager/RpcType GetIsEntitledToLevel
      static constexpr const uint8_t GetIsEntitledToLevel = 0u;
      // Get static field: static public MenuRpcManager/RpcType GetIsEntitledToLevel
      static GlobalNamespace::MenuRpcManager::RpcType _get_GetIsEntitledToLevel();
      // Set static field: static public MenuRpcManager/RpcType GetIsEntitledToLevel
      static void _set_GetIsEntitledToLevel(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType SetIsEntitledToLevel
      static constexpr const uint8_t SetIsEntitledToLevel = 1u;
      // Get static field: static public MenuRpcManager/RpcType SetIsEntitledToLevel
      static GlobalNamespace::MenuRpcManager::RpcType _get_SetIsEntitledToLevel();
      // Set static field: static public MenuRpcManager/RpcType SetIsEntitledToLevel
      static void _set_SetIsEntitledToLevel(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType InvalidateLevelEntitlementStatuses
      static constexpr const uint8_t InvalidateLevelEntitlementStatuses = 2u;
      // Get static field: static public MenuRpcManager/RpcType InvalidateLevelEntitlementStatuses
      static GlobalNamespace::MenuRpcManager::RpcType _get_InvalidateLevelEntitlementStatuses();
      // Set static field: static public MenuRpcManager/RpcType InvalidateLevelEntitlementStatuses
      static void _set_InvalidateLevelEntitlementStatuses(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType SelectLevelPack
      static constexpr const uint8_t SelectLevelPack = 3u;
      // Get static field: static public MenuRpcManager/RpcType SelectLevelPack
      static GlobalNamespace::MenuRpcManager::RpcType _get_SelectLevelPack();
      // Set static field: static public MenuRpcManager/RpcType SelectLevelPack
      static void _set_SelectLevelPack(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType SelectBeatmap
      static constexpr const uint8_t SelectBeatmap = 4u;
      // Get static field: static public MenuRpcManager/RpcType SelectBeatmap
      static GlobalNamespace::MenuRpcManager::RpcType _get_SelectBeatmap();
      // Set static field: static public MenuRpcManager/RpcType SelectBeatmap
      static void _set_SelectBeatmap(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType ClearSelectedBeatmap
      static constexpr const uint8_t ClearSelectedBeatmap = 5u;
      // Get static field: static public MenuRpcManager/RpcType ClearSelectedBeatmap
      static GlobalNamespace::MenuRpcManager::RpcType _get_ClearSelectedBeatmap();
      // Set static field: static public MenuRpcManager/RpcType ClearSelectedBeatmap
      static void _set_ClearSelectedBeatmap(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType GetSelectedBeatmap
      static constexpr const uint8_t GetSelectedBeatmap = 6u;
      // Get static field: static public MenuRpcManager/RpcType GetSelectedBeatmap
      static GlobalNamespace::MenuRpcManager::RpcType _get_GetSelectedBeatmap();
      // Set static field: static public MenuRpcManager/RpcType GetSelectedBeatmap
      static void _set_GetSelectedBeatmap(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType SelectGameplayModifiers
      static constexpr const uint8_t SelectGameplayModifiers = 7u;
      // Get static field: static public MenuRpcManager/RpcType SelectGameplayModifiers
      static GlobalNamespace::MenuRpcManager::RpcType _get_SelectGameplayModifiers();
      // Set static field: static public MenuRpcManager/RpcType SelectGameplayModifiers
      static void _set_SelectGameplayModifiers(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType ClearSelectedGameplayModifiers
      static constexpr const uint8_t ClearSelectedGameplayModifiers = 8u;
      // Get static field: static public MenuRpcManager/RpcType ClearSelectedGameplayModifiers
      static GlobalNamespace::MenuRpcManager::RpcType _get_ClearSelectedGameplayModifiers();
      // Set static field: static public MenuRpcManager/RpcType ClearSelectedGameplayModifiers
      static void _set_ClearSelectedGameplayModifiers(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType GetSelectedGameplayModifiers
      static constexpr const uint8_t GetSelectedGameplayModifiers = 9u;
      // Get static field: static public MenuRpcManager/RpcType GetSelectedGameplayModifiers
      static GlobalNamespace::MenuRpcManager::RpcType _get_GetSelectedGameplayModifiers();
      // Set static field: static public MenuRpcManager/RpcType GetSelectedGameplayModifiers
      static void _set_GetSelectedGameplayModifiers(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType LevelLoadError
      static constexpr const uint8_t LevelLoadError = 10u;
      // Get static field: static public MenuRpcManager/RpcType LevelLoadError
      static GlobalNamespace::MenuRpcManager::RpcType _get_LevelLoadError();
      // Set static field: static public MenuRpcManager/RpcType LevelLoadError
      static void _set_LevelLoadError(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType LevelLoadSuccess
      static constexpr const uint8_t LevelLoadSuccess = 11u;
      // Get static field: static public MenuRpcManager/RpcType LevelLoadSuccess
      static GlobalNamespace::MenuRpcManager::RpcType _get_LevelLoadSuccess();
      // Set static field: static public MenuRpcManager/RpcType LevelLoadSuccess
      static void _set_LevelLoadSuccess(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType StartLevel
      static constexpr const uint8_t StartLevel = 12u;
      // Get static field: static public MenuRpcManager/RpcType StartLevel
      static GlobalNamespace::MenuRpcManager::RpcType _get_StartLevel();
      // Set static field: static public MenuRpcManager/RpcType StartLevel
      static void _set_StartLevel(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType GetStartedLevel
      static constexpr const uint8_t GetStartedLevel = 13u;
      // Get static field: static public MenuRpcManager/RpcType GetStartedLevel
      static GlobalNamespace::MenuRpcManager::RpcType _get_GetStartedLevel();
      // Set static field: static public MenuRpcManager/RpcType GetStartedLevel
      static void _set_GetStartedLevel(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType CancelLevelStart
      static constexpr const uint8_t CancelLevelStart = 14u;
      // Get static field: static public MenuRpcManager/RpcType CancelLevelStart
      static GlobalNamespace::MenuRpcManager::RpcType _get_CancelLevelStart();
      // Set static field: static public MenuRpcManager/RpcType CancelLevelStart
      static void _set_CancelLevelStart(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType GetMultiplayerGameState
      static constexpr const uint8_t GetMultiplayerGameState = 15u;
      // Get static field: static public MenuRpcManager/RpcType GetMultiplayerGameState
      static GlobalNamespace::MenuRpcManager::RpcType _get_GetMultiplayerGameState();
      // Set static field: static public MenuRpcManager/RpcType GetMultiplayerGameState
      static void _set_GetMultiplayerGameState(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType SetMultiplayerGameState
      static constexpr const uint8_t SetMultiplayerGameState = 16u;
      // Get static field: static public MenuRpcManager/RpcType SetMultiplayerGameState
      static GlobalNamespace::MenuRpcManager::RpcType _get_SetMultiplayerGameState();
      // Set static field: static public MenuRpcManager/RpcType SetMultiplayerGameState
      static void _set_SetMultiplayerGameState(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType GetIsReady
      static constexpr const uint8_t GetIsReady = 17u;
      // Get static field: static public MenuRpcManager/RpcType GetIsReady
      static GlobalNamespace::MenuRpcManager::RpcType _get_GetIsReady();
      // Set static field: static public MenuRpcManager/RpcType GetIsReady
      static void _set_GetIsReady(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType SetIsReady
      static constexpr const uint8_t SetIsReady = 18u;
      // Get static field: static public MenuRpcManager/RpcType SetIsReady
      static GlobalNamespace::MenuRpcManager::RpcType _get_SetIsReady();
      // Set static field: static public MenuRpcManager/RpcType SetIsReady
      static void _set_SetIsReady(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType SetStartGameTime
      static constexpr const uint8_t SetStartGameTime = 19u;
      // Get static field: static public MenuRpcManager/RpcType SetStartGameTime
      static GlobalNamespace::MenuRpcManager::RpcType _get_SetStartGameTime();
      // Set static field: static public MenuRpcManager/RpcType SetStartGameTime
      static void _set_SetStartGameTime(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType CancelStartGameTime
      static constexpr const uint8_t CancelStartGameTime = 20u;
      // Get static field: static public MenuRpcManager/RpcType CancelStartGameTime
      static GlobalNamespace::MenuRpcManager::RpcType _get_CancelStartGameTime();
      // Set static field: static public MenuRpcManager/RpcType CancelStartGameTime
      static void _set_CancelStartGameTime(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType GetIsInLobby
      static constexpr const uint8_t GetIsInLobby = 21u;
      // Get static field: static public MenuRpcManager/RpcType GetIsInLobby
      static GlobalNamespace::MenuRpcManager::RpcType _get_GetIsInLobby();
      // Set static field: static public MenuRpcManager/RpcType GetIsInLobby
      static void _set_GetIsInLobby(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType SetIsInLobby
      static constexpr const uint8_t SetIsInLobby = 22u;
      // Get static field: static public MenuRpcManager/RpcType SetIsInLobby
      static GlobalNamespace::MenuRpcManager::RpcType _get_SetIsInLobby();
      // Set static field: static public MenuRpcManager/RpcType SetIsInLobby
      static void _set_SetIsInLobby(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType GetCountdownEndTime
      static constexpr const uint8_t GetCountdownEndTime = 23u;
      // Get static field: static public MenuRpcManager/RpcType GetCountdownEndTime
      static GlobalNamespace::MenuRpcManager::RpcType _get_GetCountdownEndTime();
      // Set static field: static public MenuRpcManager/RpcType GetCountdownEndTime
      static void _set_GetCountdownEndTime(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType SetCountdownEndTime
      static constexpr const uint8_t SetCountdownEndTime = 24u;
      // Get static field: static public MenuRpcManager/RpcType SetCountdownEndTime
      static GlobalNamespace::MenuRpcManager::RpcType _get_SetCountdownEndTime();
      // Set static field: static public MenuRpcManager/RpcType SetCountdownEndTime
      static void _set_SetCountdownEndTime(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType CancelCountdown
      static constexpr const uint8_t CancelCountdown = 25u;
      // Get static field: static public MenuRpcManager/RpcType CancelCountdown
      static GlobalNamespace::MenuRpcManager::RpcType _get_CancelCountdown();
      // Set static field: static public MenuRpcManager/RpcType CancelCountdown
      static void _set_CancelCountdown(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType GetOwnedSongPacks
      static constexpr const uint8_t GetOwnedSongPacks = 26u;
      // Get static field: static public MenuRpcManager/RpcType GetOwnedSongPacks
      static GlobalNamespace::MenuRpcManager::RpcType _get_GetOwnedSongPacks();
      // Set static field: static public MenuRpcManager/RpcType GetOwnedSongPacks
      static void _set_GetOwnedSongPacks(GlobalNamespace::MenuRpcManager::RpcType value);
      // static field const value: static public MenuRpcManager/RpcType SetOwnedSongPacks
      static constexpr const uint8_t SetOwnedSongPacks = 27u;
      // Get static field: static public MenuRpcManager/RpcType SetOwnedSongPacks
      static GlobalNamespace::MenuRpcManager::RpcType _get_SetOwnedSongPacks();
      // Set static field: static public MenuRpcManager/RpcType SetOwnedSongPacks
      static void _set_SetOwnedSongPacks(GlobalNamespace::MenuRpcManager::RpcType value);
    }; // MenuRpcManager/RpcType
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Offset: 0x10
    GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // private readonly RpcHandler`1<MenuRpcManager/RpcType> _rpcHandler
    // Offset: 0x18
    GlobalNamespace::RpcHandler_1<GlobalNamespace::MenuRpcManager::RpcType>* rpcHandler;
    // private System.Action`2<System.String,System.String> getIsEntitledToLevelEvent
    // Offset: 0x20
    System::Action_2<::Il2CppString*, ::Il2CppString*>* getIsEntitledToLevelEvent;
    // private System.Action`3<System.String,System.String,EntitlementsStatus> setIsEntitledToLevelEvent
    // Offset: 0x28
    System::Action_3<::Il2CppString*, ::Il2CppString*, GlobalNamespace::EntitlementsStatus>* setIsEntitledToLevelEvent;
    // private System.Action`1<System.String> levelEntitlementStatusesInvalidatedEvent
    // Offset: 0x30
    System::Action_1<::Il2CppString*>* levelEntitlementStatusesInvalidatedEvent;
    // private System.Action`2<System.String,System.String> selectedLevelPackEvent
    // Offset: 0x38
    System::Action_2<::Il2CppString*, ::Il2CppString*>* selectedLevelPackEvent;
    // private System.Action`2<System.String,BeatmapIdentifierNetSerializable> selectedBeatmapEvent
    // Offset: 0x40
    System::Action_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>* selectedBeatmapEvent;
    // private System.Action`1<System.String> clearSelectedBeatmapEvent
    // Offset: 0x48
    System::Action_1<::Il2CppString*>* clearSelectedBeatmapEvent;
    // private System.Action`1<System.String> getSelectedBeatmapEvent
    // Offset: 0x50
    System::Action_1<::Il2CppString*>* getSelectedBeatmapEvent;
    // private System.Action`2<System.String,GameplayModifiers> selectedGameplayModifiersEvent
    // Offset: 0x58
    System::Action_2<::Il2CppString*, GlobalNamespace::GameplayModifiers*>* selectedGameplayModifiersEvent;
    // private System.Action`1<System.String> clearSelectedGameplayModifiersEvent
    // Offset: 0x60
    System::Action_1<::Il2CppString*>* clearSelectedGameplayModifiersEvent;
    // private System.Action`1<System.String> getSelectedGameplayModifiersEvent
    // Offset: 0x68
    System::Action_1<::Il2CppString*>* getSelectedGameplayModifiersEvent;
    // private System.Action`2<System.String,System.String> levelLoadErrorEvent
    // Offset: 0x70
    System::Action_2<::Il2CppString*, ::Il2CppString*>* levelLoadErrorEvent;
    // private System.Action`2<System.String,System.String> levelLoadSuccessEvent
    // Offset: 0x78
    System::Action_2<::Il2CppString*, ::Il2CppString*>* levelLoadSuccessEvent;
    // private System.Action`4<System.String,BeatmapIdentifierNetSerializable,GameplayModifiers,System.Single> startedLevelEvent
    // Offset: 0x80
    System::Action_4<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float>* startedLevelEvent;
    // private System.Action`1<System.String> getStartedLevelEvent
    // Offset: 0x88
    System::Action_1<::Il2CppString*>* getStartedLevelEvent;
    // private System.Action`1<System.String> getMultiplayerGameStateEvent
    // Offset: 0x90
    System::Action_1<::Il2CppString*>* getMultiplayerGameStateEvent;
    // private System.Action`2<System.String,MultiplayerGameState> setMultiplayerGameStateEvent
    // Offset: 0x98
    System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerGameState>* setMultiplayerGameStateEvent;
    // private System.Action`1<System.String> cancelCountdownEvent
    // Offset: 0xA0
    System::Action_1<::Il2CppString*>* cancelCountdownEvent;
    // private System.Action`2<System.String,System.Single> setCountdownEndTimeEvent
    // Offset: 0xA8
    System::Action_2<::Il2CppString*, float>* setCountdownEndTimeEvent;
    // private System.Action`1<System.String> getCountdownEndTimeEvent
    // Offset: 0xB0
    System::Action_1<::Il2CppString*>* getCountdownEndTimeEvent;
    // private System.Action`1<System.String> cancelledLevelStartEvent
    // Offset: 0xB8
    System::Action_1<::Il2CppString*>* cancelledLevelStartEvent;
    // private System.Action`1<System.String> getIsReadyEvent
    // Offset: 0xC0
    System::Action_1<::Il2CppString*>* getIsReadyEvent;
    // private System.Action`2<System.String,System.Boolean> setIsReadyEvent
    // Offset: 0xC8
    System::Action_2<::Il2CppString*, bool>* setIsReadyEvent;
    // private System.Action`2<System.String,System.Single> setStartGameTimeEvent
    // Offset: 0xD0
    System::Action_2<::Il2CppString*, float>* setStartGameTimeEvent;
    // private System.Action`1<System.String> cancelStartGameTimeEvent
    // Offset: 0xD8
    System::Action_1<::Il2CppString*>* cancelStartGameTimeEvent;
    // private System.Action`1<System.String> getIsInLobbyEvent
    // Offset: 0xE0
    System::Action_1<::Il2CppString*>* getIsInLobbyEvent;
    // private System.Action`2<System.String,System.Boolean> setIsInLobbyEvent
    // Offset: 0xE8
    System::Action_2<::Il2CppString*, bool>* setIsInLobbyEvent;
    // private System.Action`1<System.String> getOwnedSongPacksEvent
    // Offset: 0xF0
    System::Action_1<::Il2CppString*>* getOwnedSongPacksEvent;
    // private System.Action`2<System.String,SongPackMask> setOwnedSongPacksEvent
    // Offset: 0xF8
    System::Action_2<::Il2CppString*, GlobalNamespace::SongPackMask>* setOwnedSongPacksEvent;
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // Creating interface conversion operator: operator GlobalNamespace::IMenuRpcManager
    operator GlobalNamespace::IMenuRpcManager() noexcept {
      return *reinterpret_cast<GlobalNamespace::IMenuRpcManager*>(this);
    }
    // static field const value: static private System.String kMenuState
    static constexpr const char* kMenuState = "in_menu";
    // Get static field: static private System.String kMenuState
    static ::Il2CppString* _get_kMenuState();
    // Set static field: static private System.String kMenuState
    static void _set_kMenuState(::Il2CppString* value);
    // public IMultiplayerSessionManager get_multiplayerSessionManager()
    // Offset: 0x1AE75D8
    GlobalNamespace::IMultiplayerSessionManager* get_multiplayerSessionManager();
    // public System.Boolean get_enabled()
    // Offset: 0x1AE75E0
    bool get_enabled();
    // public System.Void set_enabled(System.Boolean value)
    // Offset: 0x1AE76A4
    void set_enabled(bool value);
    // public System.Boolean get_enabledForAllPlayers()
    // Offset: 0x1AE7778
    bool get_enabledForAllPlayers();
    // public System.Void .ctor(IMultiplayerSessionManager multiplayerSessionManager)
    // Offset: 0x1AE7A18
    static MenuRpcManager* New_ctor(GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager);
    // public System.Boolean EnabledForPlayer(IConnectedPlayer player)
    // Offset: 0x1AE83D0
    bool EnabledForPlayer(GlobalNamespace::IConnectedPlayer* player);
    // private System.Void InvokeGetIsEntitledToLevel(System.String userId, System.String levelId)
    // Offset: 0x1AE8640
    void InvokeGetIsEntitledToLevel(::Il2CppString* userId, ::Il2CppString* levelId);
    // private System.Void InvokeSetIsEntitledToLevel(System.String userId, System.String levelId, System.Int32 entitlementStatus)
    // Offset: 0x1AE8874
    void InvokeSetIsEntitledToLevel(::Il2CppString* userId, ::Il2CppString* levelId, int entitlementStatus);
    // public System.Void InvokeLevelEntitlementStatusesInvalidated(System.String userId)
    // Offset: 0x1AE8AA4
    void InvokeLevelEntitlementStatusesInvalidated(::Il2CppString* userId);
    // public System.Void add_selectedLevelPackEvent(System.Action`2<System.String,System.String> value)
    // Offset: 0x1AE8B18
    void add_selectedLevelPackEvent(System::Action_2<::Il2CppString*, ::Il2CppString*>* value);
    // public System.Void remove_selectedLevelPackEvent(System.Action`2<System.String,System.String> value)
    // Offset: 0x1AE8BBC
    void remove_selectedLevelPackEvent(System::Action_2<::Il2CppString*, ::Il2CppString*>* value);
    // public System.Void SelectLevelPack(System.String levelPackId)
    // Offset: 0x1AE8C60
    void SelectLevelPack(::Il2CppString* levelPackId);
    // private System.Void InvokeOnSelectedLevelPackEvent(System.String userId, System.String levelPackId)
    // Offset: 0x1AE8CC8
    void InvokeOnSelectedLevelPackEvent(::Il2CppString* userId, ::Il2CppString* levelPackId);
    // private System.Void InvokeSelectedBeatmap(System.String userId, BeatmapIdentifierNetSerializable identifier)
    // Offset: 0x1AE8EF4
    void InvokeSelectedBeatmap(::Il2CppString* userId, GlobalNamespace::BeatmapIdentifierNetSerializable* identifier);
    // private System.Void InvokeClearSelectedBeatmap(System.String userId)
    // Offset: 0x1AE9110
    void InvokeClearSelectedBeatmap(::Il2CppString* userId);
    // private System.Void InvokeGetSelectedBeatmap(System.String userId)
    // Offset: 0x1AE9324
    void InvokeGetSelectedBeatmap(::Il2CppString* userId);
    // private System.Void InvokeOnSelectedGameplayModifiersEvent(System.String userId, GameplayModifiers gameplayModifiers)
    // Offset: 0x1AE9548
    void InvokeOnSelectedGameplayModifiersEvent(::Il2CppString* userId, GlobalNamespace::GameplayModifiers* gameplayModifiers);
    // private System.Void InvokeClearSelectedGameplayModifiers(System.String userId)
    // Offset: 0x1AE9764
    void InvokeClearSelectedGameplayModifiers(::Il2CppString* userId);
    // private System.Void InvokeGetSelectedGameplayModifiers(System.String userId)
    // Offset: 0x1AE9978
    void InvokeGetSelectedGameplayModifiers(::Il2CppString* userId);
    // public System.Void add_levelLoadErrorEvent(System.Action`2<System.String,System.String> value)
    // Offset: 0x1AE99EC
    void add_levelLoadErrorEvent(System::Action_2<::Il2CppString*, ::Il2CppString*>* value);
    // public System.Void remove_levelLoadErrorEvent(System.Action`2<System.String,System.String> value)
    // Offset: 0x1AE9A90
    void remove_levelLoadErrorEvent(System::Action_2<::Il2CppString*, ::Il2CppString*>* value);
    // public System.Void LevelLoadError(System.String levelId)
    // Offset: 0x1AE9B34
    void LevelLoadError(::Il2CppString* levelId);
    // private System.Void InvokeLevelLoadError(System.String userId, System.String levelId)
    // Offset: 0x1AE9B9C
    void InvokeLevelLoadError(::Il2CppString* userId, ::Il2CppString* levelId);
    // public System.Void add_levelLoadSuccessEvent(System.Action`2<System.String,System.String> value)
    // Offset: 0x1AE9C18
    void add_levelLoadSuccessEvent(System::Action_2<::Il2CppString*, ::Il2CppString*>* value);
    // public System.Void remove_levelLoadSuccessEvent(System.Action`2<System.String,System.String> value)
    // Offset: 0x1AE9CBC
    void remove_levelLoadSuccessEvent(System::Action_2<::Il2CppString*, ::Il2CppString*>* value);
    // public System.Void LevelLoadSuccess(System.String levelId)
    // Offset: 0x1AE9D60
    void LevelLoadSuccess(::Il2CppString* levelId);
    // private System.Void InvokeLevelLoadSuccess(System.String userId, System.String levelId)
    // Offset: 0x1AE9DC8
    void InvokeLevelLoadSuccess(::Il2CppString* userId, ::Il2CppString* levelId);
    // private System.Void InvokeStartLevel(System.String userId, BeatmapIdentifierNetSerializable beatmapId, GameplayModifiers gameplayModifiers, System.Single startTime)
    // Offset: 0x1AEA00C
    void InvokeStartLevel(::Il2CppString* userId, GlobalNamespace::BeatmapIdentifierNetSerializable* beatmapId, GlobalNamespace::GameplayModifiers* gameplayModifiers, float startTime);
    // private System.Void InvokeGetStartedLevel(System.String userId)
    // Offset: 0x1AEA250
    void InvokeGetStartedLevel(::Il2CppString* userId);
    // private System.Void InvokeGetMultiplayerGameState(System.String userId)
    // Offset: 0x1AEA464
    void InvokeGetMultiplayerGameState(::Il2CppString* userId);
    // private System.Void InvokeSetMultiplayerGameState(System.String userId, MultiplayerGameState lobbyState)
    // Offset: 0x1AEA688
    void InvokeSetMultiplayerGameState(::Il2CppString* userId, GlobalNamespace::MultiplayerGameState lobbyState);
    // public System.Void CancelCountdown()
    // Offset: 0x1AEA84C
    void CancelCountdown();
    // private System.Void InvokeCancelCountdown(System.String userId)
    // Offset: 0x1AEA8A4
    void InvokeCancelCountdown(::Il2CppString* userId);
    // public System.Void SetCountdownEndTime(System.Single newTime)
    // Offset: 0x1AEAA60
    void SetCountdownEndTime(float newTime);
    // private System.Void InvokeSetCountdownEndTime(System.String userId, System.Single newTime)
    // Offset: 0x1AEAAC8
    void InvokeSetCountdownEndTime(::Il2CppString* userId, float newTime);
    // public System.Void add_getCountdownEndTimeEvent(System.Action`1<System.String> value)
    // Offset: 0x1AEAB50
    void add_getCountdownEndTimeEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_getCountdownEndTimeEvent(System.Action`1<System.String> value)
    // Offset: 0x1AEABF4
    void remove_getCountdownEndTimeEvent(System::Action_1<::Il2CppString*>* value);
    // private System.Void InvokeGetCountdownEndTime(System.String userId)
    // Offset: 0x1AEACF0
    void InvokeGetCountdownEndTime(::Il2CppString* userId);
    // private System.Void InvokeCancelLevelStart(System.String userId)
    // Offset: 0x1AEAF04
    void InvokeCancelLevelStart(::Il2CppString* userId);
    // private System.Void InvokeGetIsReady(System.String userId)
    // Offset: 0x1AEB118
    void InvokeGetIsReady(::Il2CppString* userId);
    // private System.Void InvokeSetIsReady(System.String userId, System.Boolean isReady)
    // Offset: 0x1AEB33C
    void InvokeSetIsReady(::Il2CppString* userId, bool isReady);
    // private System.Void InvokeSetStartGameCountdown(System.String userId, System.Single newTime)
    // Offset: 0x1AEB568
    void InvokeSetStartGameCountdown(::Il2CppString* userId, float newTime);
    // public System.Void add_cancelStartGameTimeEvent(System.Action`1<System.String> value)
    // Offset: 0x1AEB5F0
    void add_cancelStartGameTimeEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_cancelStartGameTimeEvent(System.Action`1<System.String> value)
    // Offset: 0x1AEB694
    void remove_cancelStartGameTimeEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void CancelStartGameTime()
    // Offset: 0x1AEB738
    void CancelStartGameTime();
    // private System.Void InvokeCancelStartGameCountdown(System.String userId)
    // Offset: 0x1AEB790
    void InvokeCancelStartGameCountdown(::Il2CppString* userId);
    // private System.Void InvokeGetIsInLobby(System.String userId)
    // Offset: 0x1AEB9A4
    void InvokeGetIsInLobby(::Il2CppString* userId);
    // private System.Void InvokeSetIsInLobby(System.String userId, System.Boolean isBack)
    // Offset: 0x1AEBBC8
    void InvokeSetIsInLobby(::Il2CppString* userId, bool isBack);
    // private System.Void InvokeGetOwnedSongPacks(System.String userId)
    // Offset: 0x1AEBDE4
    void InvokeGetOwnedSongPacks(::Il2CppString* userId);
    // private System.Void InvokeSetOwnedSongPacks(System.String userId, SongPackMask songPackMask)
    // Offset: 0x1AEC010
    void InvokeSetOwnedSongPacks(::Il2CppString* userId, GlobalNamespace::SongPackMask songPackMask);
    // public System.Single get_syncTime()
    // Offset: 0x1AE7964
    // Implemented from: IMenuRpcManager
    // Base method: System.Single IMenuRpcManager::get_syncTime()
    float get_syncTime();
    // public System.Void Dispose()
    // Offset: 0x1AE836C
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
    // public System.Void add_getIsEntitledToLevelEvent(System.Action`2<System.String,System.String> value)
    // Offset: 0x1AE8490
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::add_getIsEntitledToLevelEvent(System.Action`2<System.String,System.String> value)
    void add_getIsEntitledToLevelEvent(System::Action_2<::Il2CppString*, ::Il2CppString*>* value);
    // public System.Void remove_getIsEntitledToLevelEvent(System.Action`2<System.String,System.String> value)
    // Offset: 0x1AE8534
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::remove_getIsEntitledToLevelEvent(System.Action`2<System.String,System.String> value)
    void remove_getIsEntitledToLevelEvent(System::Action_2<::Il2CppString*, ::Il2CppString*>* value);
    // public System.Void GetIsEntitledToLevel(System.String levelId)
    // Offset: 0x1AE85D8
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::GetIsEntitledToLevel(System.String levelId)
    void GetIsEntitledToLevel(::Il2CppString* levelId);
    // public System.Void add_setIsEntitledToLevelEvent(System.Action`3<System.String,System.String,EntitlementsStatus> value)
    // Offset: 0x1AE86BC
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::add_setIsEntitledToLevelEvent(System.Action`3<System.String,System.String,EntitlementsStatus> value)
    void add_setIsEntitledToLevelEvent(System::Action_3<::Il2CppString*, ::Il2CppString*, GlobalNamespace::EntitlementsStatus>* value);
    // public System.Void remove_setIsEntitledToLevelEvent(System.Action`3<System.String,System.String,EntitlementsStatus> value)
    // Offset: 0x1AE8760
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::remove_setIsEntitledToLevelEvent(System.Action`3<System.String,System.String,EntitlementsStatus> value)
    void remove_setIsEntitledToLevelEvent(System::Action_3<::Il2CppString*, ::Il2CppString*, GlobalNamespace::EntitlementsStatus>* value);
    // public System.Void SetIsEntitledToLevel(System.String levelId, EntitlementsStatus entitlementStatus)
    // Offset: 0x1AE8804
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::SetIsEntitledToLevel(System.String levelId, EntitlementsStatus entitlementStatus)
    void SetIsEntitledToLevel(::Il2CppString* levelId, GlobalNamespace::EntitlementsStatus entitlementStatus);
    // public System.Void add_levelEntitlementStatusesInvalidatedEvent(System.Action`1<System.String> value)
    // Offset: 0x1AE8904
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::add_levelEntitlementStatusesInvalidatedEvent(System.Action`1<System.String> value)
    void add_levelEntitlementStatusesInvalidatedEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_levelEntitlementStatusesInvalidatedEvent(System.Action`1<System.String> value)
    // Offset: 0x1AE89A8
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::remove_levelEntitlementStatusesInvalidatedEvent(System.Action`1<System.String> value)
    void remove_levelEntitlementStatusesInvalidatedEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void InvalidateLevelEntitlementStatuses()
    // Offset: 0x1AE8A4C
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::InvalidateLevelEntitlementStatuses()
    void InvalidateLevelEntitlementStatuses();
    // public System.Void add_selectedBeatmapEvent(System.Action`2<System.String,BeatmapIdentifierNetSerializable> value)
    // Offset: 0x1AE8D44
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::add_selectedBeatmapEvent(System.Action`2<System.String,BeatmapIdentifierNetSerializable> value)
    void add_selectedBeatmapEvent(System::Action_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>* value);
    // public System.Void remove_selectedBeatmapEvent(System.Action`2<System.String,BeatmapIdentifierNetSerializable> value)
    // Offset: 0x1AE8DE8
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::remove_selectedBeatmapEvent(System.Action`2<System.String,BeatmapIdentifierNetSerializable> value)
    void remove_selectedBeatmapEvent(System::Action_2<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*>* value);
    // public System.Void SelectBeatmap(BeatmapIdentifierNetSerializable identifier)
    // Offset: 0x1AE8E8C
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::SelectBeatmap(BeatmapIdentifierNetSerializable identifier)
    void SelectBeatmap(GlobalNamespace::BeatmapIdentifierNetSerializable* identifier);
    // public System.Void add_clearSelectedBeatmapEvent(System.Action`1<System.String> value)
    // Offset: 0x1AE8F70
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::add_clearSelectedBeatmapEvent(System.Action`1<System.String> value)
    void add_clearSelectedBeatmapEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_clearSelectedBeatmapEvent(System.Action`1<System.String> value)
    // Offset: 0x1AE9014
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::remove_clearSelectedBeatmapEvent(System.Action`1<System.String> value)
    void remove_clearSelectedBeatmapEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void ClearSelectedBeatmap()
    // Offset: 0x1AE90B8
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::ClearSelectedBeatmap()
    void ClearSelectedBeatmap();
    // public System.Void add_getSelectedBeatmapEvent(System.Action`1<System.String> value)
    // Offset: 0x1AE9184
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::add_getSelectedBeatmapEvent(System.Action`1<System.String> value)
    void add_getSelectedBeatmapEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_getSelectedBeatmapEvent(System.Action`1<System.String> value)
    // Offset: 0x1AE9228
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::remove_getSelectedBeatmapEvent(System.Action`1<System.String> value)
    void remove_getSelectedBeatmapEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void GetSelectedBeatmap()
    // Offset: 0x1AE92CC
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::GetSelectedBeatmap()
    void GetSelectedBeatmap();
    // public System.Void add_selectedGameplayModifiersEvent(System.Action`2<System.String,GameplayModifiers> value)
    // Offset: 0x1AE9398
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::add_selectedGameplayModifiersEvent(System.Action`2<System.String,GameplayModifiers> value)
    void add_selectedGameplayModifiersEvent(System::Action_2<::Il2CppString*, GlobalNamespace::GameplayModifiers*>* value);
    // public System.Void remove_selectedGameplayModifiersEvent(System.Action`2<System.String,GameplayModifiers> value)
    // Offset: 0x1AE943C
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::remove_selectedGameplayModifiersEvent(System.Action`2<System.String,GameplayModifiers> value)
    void remove_selectedGameplayModifiersEvent(System::Action_2<::Il2CppString*, GlobalNamespace::GameplayModifiers*>* value);
    // public System.Void SelectGameplayModifiers(GameplayModifiers gameplayModifiers)
    // Offset: 0x1AE94E0
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::SelectGameplayModifiers(GameplayModifiers gameplayModifiers)
    void SelectGameplayModifiers(GlobalNamespace::GameplayModifiers* gameplayModifiers);
    // public System.Void add_clearSelectedGameplayModifiersEvent(System.Action`1<System.String> value)
    // Offset: 0x1AE95C4
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::add_clearSelectedGameplayModifiersEvent(System.Action`1<System.String> value)
    void add_clearSelectedGameplayModifiersEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_clearSelectedGameplayModifiersEvent(System.Action`1<System.String> value)
    // Offset: 0x1AE9668
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::remove_clearSelectedGameplayModifiersEvent(System.Action`1<System.String> value)
    void remove_clearSelectedGameplayModifiersEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void ClearSelectedGameplayModifiers()
    // Offset: 0x1AE970C
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::ClearSelectedGameplayModifiers()
    void ClearSelectedGameplayModifiers();
    // public System.Void add_getSelectedGameplayModifiersEvent(System.Action`1<System.String> value)
    // Offset: 0x1AE97D8
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::add_getSelectedGameplayModifiersEvent(System.Action`1<System.String> value)
    void add_getSelectedGameplayModifiersEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_getSelectedGameplayModifiersEvent(System.Action`1<System.String> value)
    // Offset: 0x1AE987C
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::remove_getSelectedGameplayModifiersEvent(System.Action`1<System.String> value)
    void remove_getSelectedGameplayModifiersEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void GetSelectedGameplayModifiers()
    // Offset: 0x1AE9920
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::GetSelectedGameplayModifiers()
    void GetSelectedGameplayModifiers();
    // public System.Void add_startedLevelEvent(System.Action`4<System.String,BeatmapIdentifierNetSerializable,GameplayModifiers,System.Single> value)
    // Offset: 0x1AE9E44
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::add_startedLevelEvent(System.Action`4<System.String,BeatmapIdentifierNetSerializable,GameplayModifiers,System.Single> value)
    void add_startedLevelEvent(System::Action_4<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float>* value);
    // public System.Void remove_startedLevelEvent(System.Action`4<System.String,BeatmapIdentifierNetSerializable,GameplayModifiers,System.Single> value)
    // Offset: 0x1AE9EE8
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::remove_startedLevelEvent(System.Action`4<System.String,BeatmapIdentifierNetSerializable,GameplayModifiers,System.Single> value)
    void remove_startedLevelEvent(System::Action_4<::Il2CppString*, GlobalNamespace::BeatmapIdentifierNetSerializable*, GlobalNamespace::GameplayModifiers*, float>* value);
    // public System.Void StartLevel(BeatmapIdentifierNetSerializable beatmapId, GameplayModifiers gameplayModifiers, System.Single startTime)
    // Offset: 0x1AE9F8C
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::StartLevel(BeatmapIdentifierNetSerializable beatmapId, GameplayModifiers gameplayModifiers, System.Single startTime)
    void StartLevel(GlobalNamespace::BeatmapIdentifierNetSerializable* beatmapId, GlobalNamespace::GameplayModifiers* gameplayModifiers, float startTime);
    // public System.Void add_getStartedLevelEvent(System.Action`1<System.String> value)
    // Offset: 0x1AEA0B0
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::add_getStartedLevelEvent(System.Action`1<System.String> value)
    void add_getStartedLevelEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_getStartedLevelEvent(System.Action`1<System.String> value)
    // Offset: 0x1AEA154
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::remove_getStartedLevelEvent(System.Action`1<System.String> value)
    void remove_getStartedLevelEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void GetStartedLevel()
    // Offset: 0x1AEA1F8
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::GetStartedLevel()
    void GetStartedLevel();
    // public System.Void add_getMultiplayerGameStateEvent(System.Action`1<System.String> value)
    // Offset: 0x1AEA2C4
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::add_getMultiplayerGameStateEvent(System.Action`1<System.String> value)
    void add_getMultiplayerGameStateEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_getMultiplayerGameStateEvent(System.Action`1<System.String> value)
    // Offset: 0x1AEA368
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::remove_getMultiplayerGameStateEvent(System.Action`1<System.String> value)
    void remove_getMultiplayerGameStateEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void GetMultiplayerGameState()
    // Offset: 0x1AEA40C
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::GetMultiplayerGameState()
    void GetMultiplayerGameState();
    // public System.Void add_setMultiplayerGameStateEvent(System.Action`2<System.String,MultiplayerGameState> value)
    // Offset: 0x1AEA4D8
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::add_setMultiplayerGameStateEvent(System.Action`2<System.String,MultiplayerGameState> value)
    void add_setMultiplayerGameStateEvent(System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerGameState>* value);
    // public System.Void remove_setMultiplayerGameStateEvent(System.Action`2<System.String,MultiplayerGameState> value)
    // Offset: 0x1AEA57C
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::remove_setMultiplayerGameStateEvent(System.Action`2<System.String,MultiplayerGameState> value)
    void remove_setMultiplayerGameStateEvent(System::Action_2<::Il2CppString*, GlobalNamespace::MultiplayerGameState>* value);
    // public System.Void SetMultiplayerGameState(MultiplayerGameState lobbyState)
    // Offset: 0x1AEA620
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::SetMultiplayerGameState(MultiplayerGameState lobbyState)
    void SetMultiplayerGameState(GlobalNamespace::MultiplayerGameState lobbyState);
    // public System.Void add_cancelCountdownEvent(System.Action`1<System.String> value)
    // Offset: 0x1AEA704
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::add_cancelCountdownEvent(System.Action`1<System.String> value)
    void add_cancelCountdownEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_cancelCountdownEvent(System.Action`1<System.String> value)
    // Offset: 0x1AEA7A8
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::remove_cancelCountdownEvent(System.Action`1<System.String> value)
    void remove_cancelCountdownEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void add_setCountdownEndTimeEvent(System.Action`2<System.String,System.Single> value)
    // Offset: 0x1AEA918
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::add_setCountdownEndTimeEvent(System.Action`2<System.String,System.Single> value)
    void add_setCountdownEndTimeEvent(System::Action_2<::Il2CppString*, float>* value);
    // public System.Void remove_setCountdownEndTimeEvent(System.Action`2<System.String,System.Single> value)
    // Offset: 0x1AEA9BC
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::remove_setCountdownEndTimeEvent(System.Action`2<System.String,System.Single> value)
    void remove_setCountdownEndTimeEvent(System::Action_2<::Il2CppString*, float>* value);
    // public System.Void GetCountdownEndTime()
    // Offset: 0x1AEAC98
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::GetCountdownEndTime()
    void GetCountdownEndTime();
    // public System.Void add_cancelledLevelStartEvent(System.Action`1<System.String> value)
    // Offset: 0x1AEAD64
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::add_cancelledLevelStartEvent(System.Action`1<System.String> value)
    void add_cancelledLevelStartEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_cancelledLevelStartEvent(System.Action`1<System.String> value)
    // Offset: 0x1AEAE08
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::remove_cancelledLevelStartEvent(System.Action`1<System.String> value)
    void remove_cancelledLevelStartEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void CancelLevelStart()
    // Offset: 0x1AEAEAC
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::CancelLevelStart()
    void CancelLevelStart();
    // public System.Void add_getIsReadyEvent(System.Action`1<System.String> value)
    // Offset: 0x1AEAF78
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::add_getIsReadyEvent(System.Action`1<System.String> value)
    void add_getIsReadyEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_getIsReadyEvent(System.Action`1<System.String> value)
    // Offset: 0x1AEB01C
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::remove_getIsReadyEvent(System.Action`1<System.String> value)
    void remove_getIsReadyEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void GetIsReady()
    // Offset: 0x1AEB0C0
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::GetIsReady()
    void GetIsReady();
    // public System.Void add_setIsReadyEvent(System.Action`2<System.String,System.Boolean> value)
    // Offset: 0x1AEB18C
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::add_setIsReadyEvent(System.Action`2<System.String,System.Boolean> value)
    void add_setIsReadyEvent(System::Action_2<::Il2CppString*, bool>* value);
    // public System.Void remove_setIsReadyEvent(System.Action`2<System.String,System.Boolean> value)
    // Offset: 0x1AEB230
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::remove_setIsReadyEvent(System.Action`2<System.String,System.Boolean> value)
    void remove_setIsReadyEvent(System::Action_2<::Il2CppString*, bool>* value);
    // public System.Void SetIsReady(System.Boolean isReady)
    // Offset: 0x1AEB2D4
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::SetIsReady(System.Boolean isReady)
    void SetIsReady(bool isReady);
    // public System.Void add_setStartGameTimeEvent(System.Action`2<System.String,System.Single> value)
    // Offset: 0x1AEB3B8
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::add_setStartGameTimeEvent(System.Action`2<System.String,System.Single> value)
    void add_setStartGameTimeEvent(System::Action_2<::Il2CppString*, float>* value);
    // public System.Void remove_setStartGameTimeEvent(System.Action`2<System.String,System.Single> value)
    // Offset: 0x1AEB45C
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::remove_setStartGameTimeEvent(System.Action`2<System.String,System.Single> value)
    void remove_setStartGameTimeEvent(System::Action_2<::Il2CppString*, float>* value);
    // public System.Void SetStartGameTime(System.Single newTime)
    // Offset: 0x1AEB500
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::SetStartGameTime(System.Single newTime)
    void SetStartGameTime(float newTime);
    // public System.Void add_getIsInLobbyEvent(System.Action`1<System.String> value)
    // Offset: 0x1AEB804
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::add_getIsInLobbyEvent(System.Action`1<System.String> value)
    void add_getIsInLobbyEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_getIsInLobbyEvent(System.Action`1<System.String> value)
    // Offset: 0x1AEB8A8
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::remove_getIsInLobbyEvent(System.Action`1<System.String> value)
    void remove_getIsInLobbyEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void GetIsInLobby()
    // Offset: 0x1AEB94C
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::GetIsInLobby()
    void GetIsInLobby();
    // public System.Void add_setIsInLobbyEvent(System.Action`2<System.String,System.Boolean> value)
    // Offset: 0x1AEBA18
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::add_setIsInLobbyEvent(System.Action`2<System.String,System.Boolean> value)
    void add_setIsInLobbyEvent(System::Action_2<::Il2CppString*, bool>* value);
    // public System.Void remove_setIsInLobbyEvent(System.Action`2<System.String,System.Boolean> value)
    // Offset: 0x1AEBABC
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::remove_setIsInLobbyEvent(System.Action`2<System.String,System.Boolean> value)
    void remove_setIsInLobbyEvent(System::Action_2<::Il2CppString*, bool>* value);
    // public System.Void SetIsInLobby(System.Boolean isBack)
    // Offset: 0x1AEBB60
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::SetIsInLobby(System.Boolean isBack)
    void SetIsInLobby(bool isBack);
    // public System.Void add_getOwnedSongPacksEvent(System.Action`1<System.String> value)
    // Offset: 0x1AEBC44
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::add_getOwnedSongPacksEvent(System.Action`1<System.String> value)
    void add_getOwnedSongPacksEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_getOwnedSongPacksEvent(System.Action`1<System.String> value)
    // Offset: 0x1AEBCE8
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::remove_getOwnedSongPacksEvent(System.Action`1<System.String> value)
    void remove_getOwnedSongPacksEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void GetOwnedSongPacks()
    // Offset: 0x1AEBD8C
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::GetOwnedSongPacks()
    void GetOwnedSongPacks();
    // public System.Void add_setOwnedSongPacksEvent(System.Action`2<System.String,SongPackMask> value)
    // Offset: 0x1AEBE58
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::add_setOwnedSongPacksEvent(System.Action`2<System.String,SongPackMask> value)
    void add_setOwnedSongPacksEvent(System::Action_2<::Il2CppString*, GlobalNamespace::SongPackMask>* value);
    // public System.Void remove_setOwnedSongPacksEvent(System.Action`2<System.String,SongPackMask> value)
    // Offset: 0x1AEBEFC
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::remove_setOwnedSongPacksEvent(System.Action`2<System.String,SongPackMask> value)
    void remove_setOwnedSongPacksEvent(System::Action_2<::Il2CppString*, GlobalNamespace::SongPackMask>* value);
    // public System.Void SetOwnedSongPacks(SongPackMask songPackMask)
    // Offset: 0x1AEBFA0
    // Implemented from: IMenuRpcManager
    // Base method: System.Void IMenuRpcManager::SetOwnedSongPacks(SongPackMask songPackMask)
    void SetOwnedSongPacks(GlobalNamespace::SongPackMask songPackMask);
  }; // MenuRpcManager
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MenuRpcManager*, "", "MenuRpcManager");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MenuRpcManager::RpcType, "", "MenuRpcManager/RpcType");
#pragma pack(pop)
