// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerLevelFinishedController
#include "GlobalNamespace/MultiplayerLevelFinishedController.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LevelCompletionResults
  class LevelCompletionResults;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerLevelFinishedController/<StartLevelFinished>d__20
  // [] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: DBF504
  class MultiplayerLevelFinishedController::$StartLevelFinished$d__20 : public ::Il2CppObject/*, public System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*/ {
    public:
    // private System.Int32 <>1__state
    // Size: 0x4
    // Offset: 0x10
    int $$1__state;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: $$1__state and: $$2__current
    char __padding0[0x4] = {};
    // private System.Object <>2__current
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppObject* $$2__current;
    // Field size check
    static_assert(sizeof(::Il2CppObject*) == 0x8);
    // public LevelCompletionResults localPlayerResults
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::LevelCompletionResults* localPlayerResults;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LevelCompletionResults*) == 0x8);
    // public MultiplayerLevelFinishedController <>4__this
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::MultiplayerLevelFinishedController* $$4__this;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerLevelFinishedController*) == 0x8);
    // private System.Single <waitStartTime>5__2
    // Size: 0x4
    // Offset: 0x30
    float $waitStartTime$5__2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single <resultsTimeoutLength>5__3
    // Size: 0x4
    // Offset: 0x34
    float $resultsTimeoutLength$5__3;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: $StartLevelFinished$d__20
    $StartLevelFinished$d__20(int $$1__state_ = {}, ::Il2CppObject* $$2__current_ = {}, GlobalNamespace::LevelCompletionResults* localPlayerResults_ = {}, GlobalNamespace::MultiplayerLevelFinishedController* $$4__this_ = {}, float $waitStartTime$5__2_ = {}, float $resultsTimeoutLength$5__3_ = {}) noexcept : $$1__state{$$1__state_}, $$2__current{$$2__current_}, localPlayerResults{localPlayerResults_}, $$4__this{$$4__this_}, $waitStartTime$5__2{$waitStartTime$5__2_}, $resultsTimeoutLength$5__3{$resultsTimeoutLength$5__3_} {}
    // Creating interface conversion operator: operator System::Collections::Generic::IEnumerator_1<::Il2CppObject*>
    operator System::Collections::Generic::IEnumerator_1<::Il2CppObject*>() noexcept {
      return *reinterpret_cast<System::Collections::Generic::IEnumerator_1<::Il2CppObject*>*>(this);
    }
    // public System.Void .ctor(System.Int32 <>1__state)
    // Offset: 0xFB6AB8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerLevelFinishedController::$StartLevelFinished$d__20* New_ctor(int $$1__state) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLevelFinishedController::$StartLevelFinished$d__20::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerLevelFinishedController::$StartLevelFinished$d__20*, creationType>($$1__state)));
    }
    // private System.Void System.IDisposable.Dispose()
    // Offset: 0xFB6BFC
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void System_IDisposable_Dispose();
    // private System.Boolean MoveNext()
    // Offset: 0xFB6C00
    // Implemented from: System.Collections.IEnumerator
    // Base method: System.Boolean IEnumerator::MoveNext()
    bool MoveNext();
    // Creating proxy method: System_Collections_IEnumerator_MoveNext
    // Maps to method: MoveNext
    bool System_Collections_IEnumerator_MoveNext();
    // private System.Object System.Collections.Generic.IEnumerator<System.Object>.get_Current()
    // Offset: 0xFB7054
    // Implemented from: System.Collections.Generic.IEnumerator`1
    // Base method: T IEnumerator_1::get_Current()
    ::Il2CppObject* System_Collections_Generic_IEnumerator_1_get_Current();
    // private System.Void System.Collections.IEnumerator.Reset()
    // Offset: 0xFB705C
    // Implemented from: System.Collections.IEnumerator
    // Base method: System.Void IEnumerator::Reset()
    void System_Collections_IEnumerator_Reset();
    // private System.Object System.Collections.IEnumerator.get_Current()
    // Offset: 0xFB70BC
    // Implemented from: System.Collections.IEnumerator
    // Base method: System.Object IEnumerator::get_Current()
    ::Il2CppObject* System_Collections_IEnumerator_get_Current();
  }; // MultiplayerLevelFinishedController/<StartLevelFinished>d__20
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerLevelFinishedController::$StartLevelFinished$d__20), 52 + sizeof(float)> __GlobalNamespace_MultiplayerLevelFinishedController_$StartLevelFinished$d__20SizeCheck;
  static_assert(sizeof(MultiplayerLevelFinishedController::$StartLevelFinished$d__20) == 0x38);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerLevelFinishedController::$StartLevelFinished$d__20*, "", "MultiplayerLevelFinishedController/<StartLevelFinished>d__20");
