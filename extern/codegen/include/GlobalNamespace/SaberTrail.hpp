// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SaberTrailRenderer
  class SaberTrailRenderer;
  // Forward declaring type: IBladeMovementData
  class IBladeMovementData;
  // Forward declaring type: TrailElementCollection
  class TrailElementCollection;
  // Forward declaring type: BladeMovementDataElement
  struct BladeMovementDataElement;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: SaberTrail
  class SaberTrail : public UnityEngine::MonoBehaviour {
    public:
    // private SaberTrailRenderer _trailRendererPrefab
    // Offset: 0x18
    GlobalNamespace::SaberTrailRenderer* trailRendererPrefab;
    // private System.Single _trailDuration
    // Offset: 0x20
    float trailDuration;
    // private System.Int32 _samplingFrequency
    // Offset: 0x24
    int samplingFrequency;
    // private System.Int32 _granularity
    // Offset: 0x28
    int granularity;
    // private System.Single _whiteSectionMaxDuration
    // Offset: 0x2C
    float whiteSectionMaxDuration;
    // private UnityEngine.Color _color
    // Offset: 0x30
    UnityEngine::Color color;
    // private IBladeMovementData _movementData
    // Offset: 0x40
    GlobalNamespace::IBladeMovementData* movementData;
    // private System.Single _lastTrailElementTime
    // Offset: 0x48
    float lastTrailElementTime;
    // private SaberTrailRenderer _trailRenderer
    // Offset: 0x50
    GlobalNamespace::SaberTrailRenderer* trailRenderer;
    // private TrailElementCollection _trailElementCollection
    // Offset: 0x58
    GlobalNamespace::TrailElementCollection* trailElementCollection;
    // private System.Single _sampleStep
    // Offset: 0x60
    float sampleStep;
    // private System.Int32 _framesPassed
    // Offset: 0x64
    int framesPassed;
    // private System.Single _lastZScale
    // Offset: 0x68
    float lastZScale;
    // private System.Int32 _framesToScaleCheck
    // Offset: 0x6C
    int framesToScaleCheck;
    // private System.Boolean _inited
    // Offset: 0x70
    bool inited;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Int32 kIgnoredFramesCount
    static constexpr const int kIgnoredFramesCount = 4;
    // Get static field: static private System.Int32 kIgnoredFramesCount
    static int _get_kIgnoredFramesCount();
    // Set static field: static private System.Int32 kIgnoredFramesCount
    static void _set_kIgnoredFramesCount(int value);
    // static field const value: static private System.Int32 kSnapshotCapacityMargin
    static constexpr const int kSnapshotCapacityMargin = 3;
    // Get static field: static private System.Int32 kSnapshotCapacityMargin
    static int _get_kSnapshotCapacityMargin();
    // Set static field: static private System.Int32 kSnapshotCapacityMargin
    static void _set_kSnapshotCapacityMargin(int value);
    // static field const value: static private System.Int32 kScaleCheckFramesInterval
    static constexpr const int kScaleCheckFramesInterval = 10;
    // Get static field: static private System.Int32 kScaleCheckFramesInterval
    static int _get_kScaleCheckFramesInterval();
    // Set static field: static private System.Int32 kScaleCheckFramesInterval
    static void _set_kScaleCheckFramesInterval(int value);
    // private System.Void Awake()
    // Offset: 0xFC3254
    void Awake();
    // public System.Void Setup(UnityEngine.Color color, IBladeMovementData movementData)
    // Offset: 0xFC1270
    void Setup(UnityEngine::Color color, GlobalNamespace::IBladeMovementData* movementData);
    // private System.Void Init()
    // Offset: 0xFC3380
    void Init();
    // private System.Void ResetTrailData()
    // Offset: 0xFC36BC
    void ResetTrailData();
    // protected System.Void LateUpdate()
    // Offset: 0xFC37A4
    void LateUpdate();
    // protected System.Void OnEnable()
    // Offset: 0xFC3D74
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0xFC3E3C
    void OnDisable();
    // protected System.Void OnDestroy()
    // Offset: 0xFC3ED0
    void OnDestroy();
    // private System.Single GetTrailWidth(BladeMovementDataElement lastAddedData)
    // Offset: 0xFC35F4
    float GetTrailWidth(GlobalNamespace::BladeMovementDataElement lastAddedData);
    // private System.Void OnDrawGizmosSelected()
    // Offset: 0xFC3F9C
    void OnDrawGizmosSelected();
    // public System.Void .ctor()
    // Offset: 0xFC4178
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static SaberTrail* New_ctor();
  }; // SaberTrail
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SaberTrail*, "", "SaberTrail");
#pragma pack(pop)
