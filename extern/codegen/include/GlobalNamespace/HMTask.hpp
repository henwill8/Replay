// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: Thread
  class Thread;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2B
  #pragma pack(push, 1)
  // Autogenerated type: HMTask
  // [] Offset: FFFFFFFF
  class HMTask : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::HMTask::$RunCoroutine$d__8
    class $RunCoroutine$d__8;
    // private System.Threading.Thread _thread
    // Size: 0x8
    // Offset: 0x10
    System::Threading::Thread* thread;
    // Field size check
    static_assert(sizeof(System::Threading::Thread*) == 0x8);
    // private System.Action _job
    // Size: 0x8
    // Offset: 0x18
    System::Action* job;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private System.Action _finishCallback
    // Size: 0x8
    // Offset: 0x20
    System::Action* finishCallback;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private System.Boolean _canceled
    // Size: 0x1
    // Offset: 0x28
    bool canceled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _started
    // Size: 0x1
    // Offset: 0x29
    bool started;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _finished
    // Size: 0x1
    // Offset: 0x2A
    bool finished;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: HMTask
    HMTask(System::Threading::Thread* thread_ = {}, System::Action* job_ = {}, System::Action* finishCallback_ = {}, bool canceled_ = {}, bool started_ = {}, bool finished_ = {}) noexcept : thread{thread_}, job{job_}, finishCallback{finishCallback_}, canceled{canceled_}, started{started_}, finished{finished_} {}
    // public System.Void .ctor(System.Action job, System.Action finishCallback)
    // Offset: 0x1109368
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HMTask* New_ctor(System::Action* job, System::Action* finishCallback) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HMTask::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HMTask*, creationType>(job, finishCallback)));
    }
    // public System.Void Run()
    // Offset: 0x110948C
    void Run();
    // public System.Collections.IEnumerator RunCoroutine()
    // Offset: 0x110F618
    System::Collections::IEnumerator* RunCoroutine();
    // private System.Void RunJob()
    // Offset: 0x110F6C0
    void RunJob();
    // public System.Void Cancel()
    // Offset: 0x110F794
    void Cancel();
    // private System.Boolean <RunCoroutine>b__8_0()
    // Offset: 0x110F7A0
    bool $RunCoroutine$b__8_0();
    // private System.Void <RunJob>b__9_0()
    // Offset: 0x110F7A8
    void $RunJob$b__9_0();
  }; // HMTask
  #pragma pack(pop)
  static check_size<sizeof(HMTask), 42 + sizeof(bool)> __GlobalNamespace_HMTaskSizeCheck;
  static_assert(sizeof(HMTask) == 0x2B);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::HMTask*, "", "HMTask");
