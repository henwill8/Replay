// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BaseNetworkPlayerModel
#include "GlobalNamespace/BaseNetworkPlayerModel.hpp"
// Including type: IUnifiedNetworkPlayerModel
#include "GlobalNamespace/IUnifiedNetworkPlayerModel.hpp"
// Including type: GameplayServerFilter
#include "GlobalNamespace/GameplayServerFilter.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PlatformNetworkPlayerModel
  class PlatformNetworkPlayerModel;
  // Forward declaring type: LocalNetworkPlayerModel
  class LocalNetworkPlayerModel;
  // Forward declaring type: IPlatformUserModel
  class IPlatformUserModel;
  // Forward declaring type: INetworkConfig
  class INetworkConfig;
  // Forward declaring type: IAuthenticationTokenProvider
  class IAuthenticationTokenProvider;
  // Skipping declaration: INetworkPlayerModel because it is already included!
  // Forward declaring type: INetworkPlayer
  class INetworkPlayer;
  // Forward declaring type: PartyMessageHandler
  class PartyMessageHandler;
  // Forward declaring type: MasterServerConnectionManager
  class MasterServerConnectionManager;
  // Forward declaring type: DiscoveryPolicy
  struct DiscoveryPolicy;
  // Forward declaring type: InvitePolicy
  struct InvitePolicy;
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
  // Skipping declaration: GameplayServerConfiguration because it is already included!
  // Forward declaring type: DisconnectedReason
  struct DisconnectedReason;
  // Forward declaring type: ConnectionFailedReason
  struct ConnectionFailedReason;
  // Forward declaring type: INetworkPlayerModelPartyConfig`1<T>
  template<typename T>
  class INetworkPlayerModelPartyConfig_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: UnifiedNetworkPlayerModel
  class UnifiedNetworkPlayerModel : public GlobalNamespace::BaseNetworkPlayerModel/*, public GlobalNamespace::IUnifiedNetworkPlayerModel*/ {
    public:
    // Nested type: GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer
    class UnifiedNetworkPlayer;
    // Nested type: GlobalNamespace::UnifiedNetworkPlayerModel::CreatePartyConfig
    class CreatePartyConfig;
    // Nested type: GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer
    class UnifiedNetworkServer;
    // Nested type: GlobalNamespace::UnifiedNetworkPlayerModel::$get_friends$d__80
    class $get_friends$d__80;
    // Nested type: GlobalNamespace::UnifiedNetworkPlayerModel::$get_localNetworkPlayers$d__82
    class $get_localNetworkPlayers$d__82;
    // Nested type: GlobalNamespace::UnifiedNetworkPlayerModel::$Start$d__89
    struct $Start$d__89;
    // Nested type: GlobalNamespace::UnifiedNetworkPlayerModel::$GetPartyPlayers$d__91
    class $GetPartyPlayers$d__91;
    // Nested type: GlobalNamespace::UnifiedNetworkPlayerModel::$GetOtherPlayers$d__92
    class $GetOtherPlayers$d__92;
    // Nested type: GlobalNamespace::UnifiedNetworkPlayerModel::$$c__DisplayClass94_0
    class $$c__DisplayClass94_0;
    // Nested type: GlobalNamespace::UnifiedNetworkPlayerModel::$$c
    class $$c;
    // private readonly PlatformNetworkPlayerModel _platformNetworkPlayerModel
    // Offset: 0x78
    GlobalNamespace::PlatformNetworkPlayerModel* platformNetworkPlayerModel;
    // private readonly LocalNetworkPlayerModel _localNetworkPlayerModel
    // Offset: 0x80
    GlobalNamespace::LocalNetworkPlayerModel* localNetworkPlayerModel;
    // private readonly IPlatformUserModel _platformUserModel
    // Offset: 0x88
    GlobalNamespace::IPlatformUserModel* platformUserModel;
    // private readonly INetworkConfig _networkConfig
    // Offset: 0x90
    GlobalNamespace::INetworkConfig* networkConfig;
    // private IAuthenticationTokenProvider _authenticationTokenProvider
    // Offset: 0x98
    GlobalNamespace::IAuthenticationTokenProvider* authenticationTokenProvider;
    // private UnifiedNetworkPlayerModel/UnifiedNetworkPlayer _localPlayer
    // Offset: 0xA0
    GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer* localPlayer;
    // private System.Boolean _networkingFailed
    // Offset: 0xA8
    bool networkingFailed;
    // private System.Boolean _masterServerUnreachable
    // Offset: 0xA9
    bool masterServerUnreachable;
    // private System.Int32 _currentPlayerCount
    // Offset: 0xAC
    int currentPlayerCount;
    // private System.Action`1<System.Int32> partySizeChangedEvent
    // Offset: 0xB0
    System::Action_1<int>* partySizeChangedEvent;
    // private System.Action partyRefreshingEvent
    // Offset: 0xB8
    System::Action* partyRefreshingEvent;
    // private System.Action`1<INetworkPlayerModel> partyChangedEvent
    // Offset: 0xC0
    System::Action_1<GlobalNamespace::INetworkPlayerModel*>* partyChangedEvent;
    // private System.Action`1<INetworkPlayer> joinRequestedEvent
    // Offset: 0xC8
    System::Action_1<GlobalNamespace::INetworkPlayer*>* joinRequestedEvent;
    // private System.Action`1<INetworkPlayer> inviteRequestedEvent
    // Offset: 0xD0
    System::Action_1<GlobalNamespace::INetworkPlayer*>* inviteRequestedEvent;
    // private readonly System.Collections.Generic.List`1<UnifiedNetworkPlayerModel/UnifiedNetworkPlayer> _partyPlayers
    // Offset: 0xD8
    System::Collections::Generic::List_1<GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer*>* partyPlayers;
    // private readonly System.Collections.Generic.List`1<UnifiedNetworkPlayerModel/UnifiedNetworkServer> _publicServers
    // Offset: 0xE0
    System::Collections::Generic::List_1<GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer*>* publicServers;
    // private PartyMessageHandler _partyMessageHandler
    // Offset: 0xE8
    GlobalNamespace::PartyMessageHandler* partyMessageHandler;
    // private PartyMessageHandler _friendPartyMessageHandler
    // Offset: 0xF0
    GlobalNamespace::PartyMessageHandler* friendPartyMessageHandler;
    // private PartyMessageHandler _localNetworkPartyMessageHandler
    // Offset: 0xF8
    GlobalNamespace::PartyMessageHandler* localNetworkPartyMessageHandler;
    // private System.Single _lastServerRefresh
    // Offset: 0x100
    float lastServerRefresh;
    // private System.Boolean _isRefreshing
    // Offset: 0x104
    bool isRefreshing;
    // private System.Boolean _filterChanged
    // Offset: 0x105
    bool filterChanged;
    // private GameplayServerFilter _serverFilter
    // Offset: 0x108
    GlobalNamespace::GameplayServerFilter serverFilter;
    // Creating interface conversion operator: operator GlobalNamespace::IUnifiedNetworkPlayerModel
    operator GlobalNamespace::IUnifiedNetworkPlayerModel() noexcept {
      return *reinterpret_cast<GlobalNamespace::IUnifiedNetworkPlayerModel*>(this);
    }
    // static field const value: static private System.Single kServerRefreshFrequency
    static constexpr const float kServerRefreshFrequency = 10;
    // Get static field: static private System.Single kServerRefreshFrequency
    static float _get_kServerRefreshFrequency();
    // Set static field: static private System.Single kServerRefreshFrequency
    static void _set_kServerRefreshFrequency(float value);
    // static field const value: static private System.Single kServerTimeoutPeriod
    static constexpr const float kServerTimeoutPeriod = 21;
    // Get static field: static private System.Single kServerTimeoutPeriod
    static float _get_kServerTimeoutPeriod();
    // Set static field: static private System.Single kServerTimeoutPeriod
    static void _set_kServerTimeoutPeriod(float value);
    // public System.Boolean get_hasNetworkingFailed()
    // Offset: 0xFF7D0C
    bool get_hasNetworkingFailed();
    // public System.Boolean get_isMasterServerReachable()
    // Offset: 0xFF7D14
    bool get_isMasterServerReachable();
    // private MasterServerConnectionManager get_masterServerConnectionManager()
    // Offset: 0xFF7D24
    GlobalNamespace::MasterServerConnectionManager* get_masterServerConnectionManager();
    // public System.Net.IPEndPoint get_endPoint()
    // Offset: 0xFF7D7C
    System::Net::IPEndPoint* get_endPoint();
    // public System.String get_serverName()
    // Offset: 0xFF7E08
    ::Il2CppString* get_serverName();
    // public System.String get_password()
    // Offset: 0xFF7E24
    ::Il2CppString* get_password();
    // public System.String get_serverUserId()
    // Offset: 0xFF7E40
    ::Il2CppString* get_serverUserId();
    // public System.String get_serverUserName()
    // Offset: 0xFF7E5C
    ::Il2CppString* get_serverUserName();
    // public DiscoveryPolicy get_discoveryPolicy()
    // Offset: 0xFF7E78
    GlobalNamespace::DiscoveryPolicy get_discoveryPolicy();
    // public InvitePolicy get_invitePolicy()
    // Offset: 0xFF7E94
    GlobalNamespace::InvitePolicy get_invitePolicy();
    // public System.Collections.Generic.IEnumerable`1<INetworkPlayer> get_friends()
    // Offset: 0xFF7F58
    System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* get_friends();
    // public System.Boolean get_enableFriends()
    // Offset: 0xFF80E0
    bool get_enableFriends();
    // public System.Void set_enableFriends(System.Boolean value)
    // Offset: 0xFF8104
    void set_enableFriends(bool value);
    // private System.Void Refresh()
    // Offset: 0xFF8690
    void Refresh();
    // private System.Void RefreshParties()
    // Offset: 0xFF8144
    void RefreshParties();
    // private System.Void HandlePlayersChanged()
    // Offset: 0xFF8B78
    void HandlePlayersChanged();
    // private System.Void HandleInviteRequested(INetworkPlayer player)
    // Offset: 0xFF8CFC
    void HandleInviteRequested(GlobalNamespace::INetworkPlayer* player);
    // private System.Void HandleJoinRequested(INetworkPlayer player)
    // Offset: 0xFF8D70
    void HandleJoinRequested(GlobalNamespace::INetworkPlayer* player);
    // private System.Void HandlePartyChanged(INetworkPlayerModel playerModel)
    // Offset: 0xFF8DE4
    void HandlePartyChanged(GlobalNamespace::INetworkPlayerModel* playerModel);
    // private System.Void HandleLocalPlayerConnnected(IConnectedPlayer player)
    // Offset: 0xFF8E48
    void HandleLocalPlayerConnnected(GlobalNamespace::IConnectedPlayer* player);
    // private System.Void HandleFriendConnected(IConnectedPlayer player)
    // Offset: 0xFF8FE0
    void HandleFriendConnected(GlobalNamespace::IConnectedPlayer* player);
    // private System.Void HandleLocalPlayerConnectToMasterServer(System.Net.IPEndPoint endPoint, System.String serverName, System.String password, System.String secret, System.String serverUserId, System.String serverUserName, DiscoveryPolicy discoveryPolicy, InvitePolicy invitePolicy, System.Int32 maxPlayerCount, GameplayServerConfiguration configuration)
    // Offset: 0xFF9178
    void HandleLocalPlayerConnectToMasterServer(System::Net::IPEndPoint* endPoint, ::Il2CppString* serverName, ::Il2CppString* password, ::Il2CppString* secret, ::Il2CppString* serverUserId, ::Il2CppString* serverUserName, GlobalNamespace::DiscoveryPolicy discoveryPolicy, GlobalNamespace::InvitePolicy invitePolicy, int maxPlayerCount, GlobalNamespace::GameplayServerConfiguration configuration);
    // private System.Void HandleFriendConnectToMasterServer(System.Net.IPEndPoint endPoint, System.String serverName, System.String password, System.String secret, System.String serverUserId, System.String serverUserName, DiscoveryPolicy discoveryPolicy, InvitePolicy invitePolicy, System.Int32 maxPlayerCount, GameplayServerConfiguration configuration)
    // Offset: 0xFF938C
    void HandleFriendConnectToMasterServer(System::Net::IPEndPoint* endPoint, ::Il2CppString* serverName, ::Il2CppString* password, ::Il2CppString* secret, ::Il2CppString* serverUserId, ::Il2CppString* serverUserName, GlobalNamespace::DiscoveryPolicy discoveryPolicy, GlobalNamespace::InvitePolicy invitePolicy, int maxPlayerCount, GlobalNamespace::GameplayServerConfiguration configuration);
    // private System.Void HandleServerStatusChanged(System.String serverName, System.String password, DiscoveryPolicy discoveryPolicy, InvitePolicy invitePolicy, System.Int32 maxPlayerCount, GameplayServerConfiguration configuration)
    // Offset: 0xFF95A0
    void HandleServerStatusChanged(::Il2CppString* serverName, ::Il2CppString* password, GlobalNamespace::DiscoveryPolicy discoveryPolicy, GlobalNamespace::InvitePolicy invitePolicy, int maxPlayerCount, GlobalNamespace::GameplayServerConfiguration configuration);
    // private System.Void HandleConnectedPlayerManagerCreated(INetworkPlayerModel networkPlayerModel)
    // Offset: 0xFF9634
    void HandleConnectedPlayerManagerCreated(GlobalNamespace::INetworkPlayerModel* networkPlayerModel);
    // private System.Void HandleConnectedPlayerManagerDestroyed(INetworkPlayerModel networkPlayerModel)
    // Offset: 0xFF9930
    void HandleConnectedPlayerManagerDestroyed(GlobalNamespace::INetworkPlayerModel* networkPlayerModel);
    // public System.Void ConnectToServerWithSecret(System.String serverSecret)
    // Offset: 0xFF9D0C
    void ConnectToServerWithSecret(::Il2CppString* serverSecret);
    // private UnifiedNetworkPlayerModel/UnifiedNetworkPlayer GetPlayer(System.String userId)
    // Offset: 0xFFA7E0
    GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkPlayer* GetPlayer(::Il2CppString* userId);
    // private UnifiedNetworkPlayerModel/UnifiedNetworkServer GetServer(System.String code)
    // Offset: 0xFFAB64
    GlobalNamespace::UnifiedNetworkPlayerModel::UnifiedNetworkServer* GetServer(::Il2CppString* code);
    // public override System.Void add_partySizeChangedEvent(System.Action`1<System.Int32> value)
    // Offset: 0xFF7680
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::add_partySizeChangedEvent(System.Action`1<System.Int32> value)
    void add_partySizeChangedEvent(System::Action_1<int>* value);
    // public override System.Void remove_partySizeChangedEvent(System.Action`1<System.Int32> value)
    // Offset: 0xFF7724
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::remove_partySizeChangedEvent(System.Action`1<System.Int32> value)
    void remove_partySizeChangedEvent(System::Action_1<int>* value);
    // public System.Void add_partyRefreshingEvent(System.Action value)
    // Offset: 0xFF77C8
    // Implemented from: IUnifiedNetworkPlayerModel
    // Base method: System.Void IUnifiedNetworkPlayerModel::add_partyRefreshingEvent(System.Action value)
    void add_partyRefreshingEvent(System::Action* value);
    // public System.Void remove_partyRefreshingEvent(System.Action value)
    // Offset: 0xFF786C
    // Implemented from: IUnifiedNetworkPlayerModel
    // Base method: System.Void IUnifiedNetworkPlayerModel::remove_partyRefreshingEvent(System.Action value)
    void remove_partyRefreshingEvent(System::Action* value);
    // public override System.Void add_partyChangedEvent(System.Action`1<INetworkPlayerModel> value)
    // Offset: 0xFF7910
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::add_partyChangedEvent(System.Action`1<INetworkPlayerModel> value)
    void add_partyChangedEvent(System::Action_1<GlobalNamespace::INetworkPlayerModel*>* value);
    // public override System.Void remove_partyChangedEvent(System.Action`1<INetworkPlayerModel> value)
    // Offset: 0xFF79B4
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::remove_partyChangedEvent(System.Action`1<INetworkPlayerModel> value)
    void remove_partyChangedEvent(System::Action_1<GlobalNamespace::INetworkPlayerModel*>* value);
    // public override System.Void add_joinRequestedEvent(System.Action`1<INetworkPlayer> value)
    // Offset: 0xFF7A58
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::add_joinRequestedEvent(System.Action`1<INetworkPlayer> value)
    void add_joinRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value);
    // public override System.Void remove_joinRequestedEvent(System.Action`1<INetworkPlayer> value)
    // Offset: 0xFF7AFC
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::remove_joinRequestedEvent(System.Action`1<INetworkPlayer> value)
    void remove_joinRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value);
    // public override System.Void add_inviteRequestedEvent(System.Action`1<INetworkPlayer> value)
    // Offset: 0xFF7BA0
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::add_inviteRequestedEvent(System.Action`1<INetworkPlayer> value)
    void add_inviteRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value);
    // public override System.Void remove_inviteRequestedEvent(System.Action`1<INetworkPlayer> value)
    // Offset: 0xFF7C44
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::remove_inviteRequestedEvent(System.Action`1<INetworkPlayer> value)
    void remove_inviteRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value);
    // public override System.Boolean get_localPlayerIsPartyOwner()
    // Offset: 0xFF7CE8
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Boolean BaseNetworkPlayerModel::get_localPlayerIsPartyOwner()
    bool get_localPlayerIsPartyOwner();
    // public override INetworkPlayer get_localPlayer()
    // Offset: 0xFF7D04
    // Implemented from: BaseNetworkPlayerModel
    // Base method: INetworkPlayer BaseNetworkPlayerModel::get_localPlayer()
    GlobalNamespace::INetworkPlayer* get_localPlayer();
    // public System.String get_userId()
    // Offset: 0xFF7D98
    // Implemented from: IUnifiedNetworkPlayerModel
    // Base method: System.String IUnifiedNetworkPlayerModel::get_userId()
    ::Il2CppString* get_userId();
    // public System.String get_userName()
    // Offset: 0xFF7DB0
    // Implemented from: IUnifiedNetworkPlayerModel
    // Base method: System.String IUnifiedNetworkPlayerModel::get_userName()
    ::Il2CppString* get_userName();
    // public System.String get_secret()
    // Offset: 0xFF7DC8
    // Implemented from: IUnifiedNetworkPlayerModel
    // Base method: System.String IUnifiedNetworkPlayerModel::get_secret()
    ::Il2CppString* get_secret();
    // public System.String get_code()
    // Offset: 0xFF7DEC
    // Implemented from: IUnifiedNetworkPlayerModel
    // Base method: System.String IUnifiedNetworkPlayerModel::get_code()
    ::Il2CppString* get_code();
    // public override System.Int32 get_maxPartySize()
    // Offset: 0xFF7EB0
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Int32 BaseNetworkPlayerModel::get_maxPartySize()
    int get_maxPartySize();
    // public override GameplayServerConfiguration get_configuration()
    // Offset: 0xFF7EE4
    // Implemented from: BaseNetworkPlayerModel
    // Base method: GameplayServerConfiguration BaseNetworkPlayerModel::get_configuration()
    GlobalNamespace::GameplayServerConfiguration get_configuration();
    // public GameplayServerFilter get_serverFilter()
    // Offset: 0xFF7F28
    // Implemented from: IUnifiedNetworkPlayerModel
    // Base method: GameplayServerFilter IUnifiedNetworkPlayerModel::get_serverFilter()
    GlobalNamespace::GameplayServerFilter get_serverFilter();
    // public override System.Int32 get_currentPartySize()
    // Offset: 0xFF7F48
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Int32 BaseNetworkPlayerModel::get_currentPartySize()
    int get_currentPartySize();
    // public System.Collections.Generic.IEnumerable`1<INetworkPlayer> get_publicServers()
    // Offset: 0xFF7F50
    // Implemented from: IUnifiedNetworkPlayerModel
    // Base method: System.Collections.Generic.IEnumerable`1<INetworkPlayer> IUnifiedNetworkPlayerModel::get_publicServers()
    System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* get_publicServers();
    // public System.Collections.Generic.IEnumerable`1<INetworkPlayer> get_localNetworkPlayers()
    // Offset: 0xFF801C
    // Implemented from: IUnifiedNetworkPlayerModel
    // Base method: System.Collections.Generic.IEnumerable`1<INetworkPlayer> IUnifiedNetworkPlayerModel::get_localNetworkPlayers()
    System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* get_localNetworkPlayers();
    // public System.Boolean get_enableLocalNetwork()
    // Offset: 0xFF83D8
    // Implemented from: IUnifiedNetworkPlayerModel
    // Base method: System.Boolean IUnifiedNetworkPlayerModel::get_enableLocalNetwork()
    bool get_enableLocalNetwork();
    // public System.Void set_enableLocalNetwork(System.Boolean value)
    // Offset: 0xFF83FC
    // Implemented from: IUnifiedNetworkPlayerModel
    // Base method: System.Void IUnifiedNetworkPlayerModel::set_enableLocalNetwork(System.Boolean value)
    void set_enableLocalNetwork(bool value);
    // protected override System.Void Start()
    // Offset: 0xFF843C
    // Implemented from: StandaloneMonobehavior
    // Base method: System.Void StandaloneMonobehavior::Start()
    void Start();
    // protected override System.Void Update()
    // Offset: 0xFF8518
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::Update()
    void Update();
    // protected override System.Collections.Generic.IEnumerable`1<INetworkPlayer> GetPartyPlayers()
    // Offset: 0xFF8978
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Collections.Generic.IEnumerable`1<INetworkPlayer> BaseNetworkPlayerModel::GetPartyPlayers()
    System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* GetPartyPlayers();
    // protected override System.Collections.Generic.IEnumerable`1<INetworkPlayer> GetOtherPlayers()
    // Offset: 0xFF8A3C
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Collections.Generic.IEnumerable`1<INetworkPlayer> BaseNetworkPlayerModel::GetOtherPlayers()
    System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* GetOtherPlayers();
    // public System.Void SetServerFilter(GameplayServerFilter filter)
    // Offset: 0xFF8B00
    // Implemented from: IUnifiedNetworkPlayerModel
    // Base method: System.Void IUnifiedNetworkPlayerModel::SetServerFilter(GameplayServerFilter filter)
    void SetServerFilter(GlobalNamespace::GameplayServerFilter filter);
    // public System.Void ResetMasterServerReachability()
    // Offset: 0xFF99C0
    // Implemented from: IUnifiedNetworkPlayerModel
    // Base method: System.Void IUnifiedNetworkPlayerModel::ResetMasterServerReachability()
    void ResetMasterServerReachability();
    // public override System.Void Disconnect()
    // Offset: 0xFF99D8
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::Disconnect()
    void Disconnect();
    // protected override System.Void Disconnected(DisconnectedReason disconnectedReason)
    // Offset: 0xFF9A0C
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::Disconnected(DisconnectedReason disconnectedReason)
    void Disconnected(GlobalNamespace::DisconnectedReason disconnectedReason);
    // protected override System.Void ConnectionFailed(ConnectionFailedReason reason)
    // Offset: 0xFF9A48
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::ConnectionFailed(ConnectionFailedReason reason)
    void ConnectionFailed(GlobalNamespace::ConnectionFailedReason reason);
    // protected override System.Void ConnectedPlayerManagerChanged()
    // Offset: 0xFF9A68
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::ConnectedPlayerManagerChanged()
    void ConnectedPlayerManagerChanged();
    // public override System.Boolean CreateParty(INetworkPlayerModelPartyConfig`1<T> createConfig)
    // Offset: 0xFFFFFFFF
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Boolean BaseNetworkPlayerModel::CreateParty(INetworkPlayerModelPartyConfig`1<T> createConfig)
    template<class T>
    bool CreateParty(GlobalNamespace::INetworkPlayerModelPartyConfig_1<T>* createConfig) {
      static_assert(std::is_base_of_v<GlobalNamespace::INetworkPlayerModel, std::remove_pointer_t<T>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<bool>(this, "CreateParty", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, createConfig)));
    }
    // public override System.Void DestroyParty()
    // Offset: 0xFF9B60
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::DestroyParty()
    void DestroyParty();
    // public System.Void ConnectToServerWithCode(System.String serverCode, System.String serverPassword)
    // Offset: 0xFF9B94
    // Implemented from: IUnifiedNetworkPlayerModel
    // Base method: System.Void IUnifiedNetworkPlayerModel::ConnectToServerWithCode(System.String serverCode, System.String serverPassword)
    void ConnectToServerWithCode(::Il2CppString* serverCode, ::Il2CppString* serverPassword);
    // public System.Void JoinMatchmaking(GameplayServerConfiguration configuration, System.String secret)
    // Offset: 0xFF9E68
    // Implemented from: IUnifiedNetworkPlayerModel
    // Base method: System.Void IUnifiedNetworkPlayerModel::JoinMatchmaking(GameplayServerConfiguration configuration, System.String secret)
    void JoinMatchmaking(GlobalNamespace::GameplayServerConfiguration configuration, ::Il2CppString* secret);
    // protected override System.Void PlayerConnected(IConnectedPlayer player)
    // Offset: 0xFF9FE0
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::PlayerConnected(IConnectedPlayer player)
    void PlayerConnected(GlobalNamespace::IConnectedPlayer* player);
    // protected override System.Void PlayerDisconnected(IConnectedPlayer player)
    // Offset: 0xFFA3D8
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::PlayerDisconnected(IConnectedPlayer player)
    void PlayerDisconnected(GlobalNamespace::IConnectedPlayer* player);
    // protected override System.Void PlayerStateChanged(IConnectedPlayer connectedPlayer)
    // Offset: 0xFFA51C
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::PlayerStateChanged(IConnectedPlayer connectedPlayer)
    void PlayerStateChanged(GlobalNamespace::IConnectedPlayer* connectedPlayer);
    // protected override System.Void PlayerOrderChanged(IConnectedPlayer connectedPlayer)
    // Offset: 0xFFA8C0
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::PlayerOrderChanged(IConnectedPlayer connectedPlayer)
    void PlayerOrderChanged(GlobalNamespace::IConnectedPlayer* connectedPlayer);
    // public System.Void .ctor()
    // Offset: 0xFFAC44
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::.ctor()
    // Base method: System.Void StandaloneMonobehavior::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static UnifiedNetworkPlayerModel* New_ctor();
  }; // UnifiedNetworkPlayerModel
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::UnifiedNetworkPlayerModel*, "", "UnifiedNetworkPlayerModel");
#pragma pack(pop)
