// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Plane
#include "UnityEngine/Plane.hpp"
// Including type: UnityEngine.ParticleSystem/EmitParams
#include "UnityEngine/ParticleSystem_EmitParams.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: LineRenderer
  class LineRenderer;
  // Forward declaring type: Shader
  class Shader;
  // Forward declaring type: Renderer
  class Renderer;
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: Camera
  class Camera;
  // Forward declaring type: RenderTexture
  class RenderTexture;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PlayerController
  class PlayerController;
  // Forward declaring type: ColorManager
  class ColorManager;
  // Forward declaring type: Saber
  class Saber;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: SaberBurnMarkArea
  class SaberBurnMarkArea : public UnityEngine::MonoBehaviour {
    public:
    // private UnityEngine.LineRenderer _saberBurnMarkLinePrefab
    // Offset: 0x18
    UnityEngine::LineRenderer* saberBurnMarkLinePrefab;
    // private System.Single _blackMarkLineRandomOffset
    // Offset: 0x20
    float blackMarkLineRandomOffset;
    // private System.Int32 _textureWidth
    // Offset: 0x24
    int textureWidth;
    // private System.Int32 _textureHeight
    // Offset: 0x28
    int textureHeight;
    // private System.Single _burnMarksFadeOutStrength
    // Offset: 0x2C
    float burnMarksFadeOutStrength;
    // private UnityEngine.Shader _fadeOutShader
    // Offset: 0x30
    UnityEngine::Shader* fadeOutShader;
    // private PlayerController _playerController
    // Offset: 0x38
    GlobalNamespace::PlayerController* playerController;
    // private ColorManager _colorManager
    // Offset: 0x40
    GlobalNamespace::ColorManager* colorManager;
    // private UnityEngine.Renderer _renderer
    // Offset: 0x48
    UnityEngine::Renderer* renderer;
    // private System.Int32 _fadeOutStrengthShaderPropertyID
    // Offset: 0x50
    int fadeOutStrengthShaderPropertyID;
    // private Saber[] _sabers
    // Offset: 0x58
    ::Array<GlobalNamespace::Saber*>* sabers;
    // private UnityEngine.Plane _plane
    // Offset: 0x60
    UnityEngine::Plane plane;
    // private UnityEngine.Vector3[] _prevBurnMarkPos
    // Offset: 0x70
    ::Array<UnityEngine::Vector3>* prevBurnMarkPos;
    // private System.Boolean[] _prevBurnMarkPosValid
    // Offset: 0x78
    ::Array<bool>* prevBurnMarkPosValid;
    // private UnityEngine.LineRenderer[] _lineRenderers
    // Offset: 0x80
    ::Array<UnityEngine::LineRenderer*>* lineRenderers;
    // private UnityEngine.Camera _camera
    // Offset: 0x88
    UnityEngine::Camera* camera;
    // private UnityEngine.Vector3[] _linePoints
    // Offset: 0x90
    ::Array<UnityEngine::Vector3>* linePoints;
    // private UnityEngine.RenderTexture[] _renderTextures
    // Offset: 0x98
    ::Array<UnityEngine::RenderTexture*>* renderTextures;
    // private UnityEngine.ParticleSystem/EmitParams _emitParams
    // Offset: 0xA0
    UnityEngine::ParticleSystem::EmitParams emitParams;
    // private UnityEngine.Material _fadeOutMaterial
    // Offset: 0x130
    UnityEngine::Material* fadeOutMaterial;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void Start()
    // Offset: 0xC25C04
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0xC264DC
    void OnDestroy();
    // private System.Boolean GetBurnMarkPos(UnityEngine.Vector3 bladeBottomPos, UnityEngine.Vector3 bladeTopPos, out UnityEngine.Vector3 burnMarkPos)
    // Offset: 0xC26750
    bool GetBurnMarkPos(UnityEngine::Vector3 bladeBottomPos, UnityEngine::Vector3 bladeTopPos, UnityEngine::Vector3& burnMarkPos);
    // private UnityEngine.Vector3 WorldToCameraBurnMarkPos(UnityEngine.Vector3 pos)
    // Offset: 0xC269E0
    UnityEngine::Vector3 WorldToCameraBurnMarkPos(UnityEngine::Vector3 pos);
    // protected System.Void LateUpdate()
    // Offset: 0xC26B08
    void LateUpdate();
    // public System.Void .ctor()
    // Offset: 0xC27270
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static SaberBurnMarkArea* New_ctor();
  }; // SaberBurnMarkArea
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SaberBurnMarkArea*, "", "SaberBurnMarkArea");
#pragma pack(pop)
