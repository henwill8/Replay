// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMAutoincrementedRequestId
#include "GlobalNamespace/HMAutoincrementedRequestId.hpp"
// Including type: ISaberMovementDataProcessor
#include "GlobalNamespace/ISaberMovementDataProcessor.hpp"
// Including type: ISaberSwingRatingCounter
#include "GlobalNamespace/ISaberSwingRatingCounter.hpp"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
// Including type: UnityEngine.Plane
#include "UnityEngine/Plane.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SwingSaberRatingDidChangeDelegate
  class SwingSaberRatingDidChangeDelegate;
  // Forward declaring type: SwingSaberRatingDidFinishDelegate
  class SwingSaberRatingDidFinishDelegate;
  // Forward declaring type: SaberMovementData
  class SaberMovementData;
  // Forward declaring type: BladeMovementDataElement
  struct BladeMovementDataElement;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xCC
  #pragma pack(push, 1)
  // Autogenerated type: SaberSwingRatingCounter
  // [] Offset: FFFFFFFF
  class SaberSwingRatingCounter : public GlobalNamespace::HMAutoincrementedRequestId/*, public GlobalNamespace::ISaberMovementDataProcessor, public GlobalNamespace::ISaberSwingRatingCounter*/ {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xD37170
    // private SwingSaberRatingDidChangeDelegate didChangeEvent
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::SwingSaberRatingDidChangeDelegate* didChangeEvent;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SwingSaberRatingDidChangeDelegate*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD37180
    // private SwingSaberRatingDidFinishDelegate didFinishEvent
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::SwingSaberRatingDidFinishDelegate* didFinishEvent;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SwingSaberRatingDidFinishDelegate*) == 0x8);
    // private SaberMovementData _saberMovementData
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::SaberMovementData* saberMovementData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SaberMovementData*) == 0x8);
    // private UnityEngine.Vector3 _cutPlaneNormal
    // Size: 0xC
    // Offset: 0x30
    UnityEngine::Vector3 cutPlaneNormal;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private System.Single _cutTime
    // Size: 0x4
    // Offset: 0x3C
    float cutTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _afterCutRating
    // Size: 0x4
    // Offset: 0x40
    float afterCutRating;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _beforeCutRating
    // Size: 0x4
    // Offset: 0x44
    float beforeCutRating;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _didFinish
    // Size: 0x1
    // Offset: 0x48
    bool didFinish;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _initialized
    // Size: 0x1
    // Offset: 0x49
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: initialized and: notePlane
    char __padding8[0x2] = {};
    // private UnityEngine.Plane _notePlane
    // Size: 0x10
    // Offset: 0x4C
    UnityEngine::Plane notePlane;
    // Field size check
    static_assert(sizeof(UnityEngine::Plane) == 0x10);
    // private System.Boolean _notePlaneWasCut
    // Size: 0x1
    // Offset: 0x5C
    bool notePlaneWasCut;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: notePlaneWasCut and: noteForward
    char __padding10[0x3] = {};
    // private UnityEngine.Vector3 _noteForward
    // Size: 0xC
    // Offset: 0x60
    UnityEngine::Vector3 noteForward;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _notePlaneCenter
    // Size: 0xC
    // Offset: 0x6C
    UnityEngine::Vector3 notePlaneCenter;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _beforeCutTopPos
    // Size: 0xC
    // Offset: 0x78
    UnityEngine::Vector3 beforeCutTopPos;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _beforeCutBottomPos
    // Size: 0xC
    // Offset: 0x84
    UnityEngine::Vector3 beforeCutBottomPos;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _afterCutTopPos
    // Size: 0xC
    // Offset: 0x90
    UnityEngine::Vector3 afterCutTopPos;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _afterCutBottomPos
    // Size: 0xC
    // Offset: 0x9C
    UnityEngine::Vector3 afterCutBottomPos;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _newPlaneNormal
    // Size: 0xC
    // Offset: 0xA8
    UnityEngine::Vector3 newPlaneNormal;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _cutTopPos
    // Size: 0xC
    // Offset: 0xB4
    UnityEngine::Vector3 cutTopPos;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // private UnityEngine.Vector3 _cutBottomPos
    // Size: 0xC
    // Offset: 0xC0
    UnityEngine::Vector3 cutBottomPos;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // Creating value type constructor for type: SaberSwingRatingCounter
    SaberSwingRatingCounter(GlobalNamespace::SwingSaberRatingDidChangeDelegate* didChangeEvent_ = {}, GlobalNamespace::SwingSaberRatingDidFinishDelegate* didFinishEvent_ = {}, GlobalNamespace::SaberMovementData* saberMovementData_ = {}, UnityEngine::Vector3 cutPlaneNormal_ = {}, float cutTime_ = {}, float afterCutRating_ = {}, float beforeCutRating_ = {}, bool didFinish_ = {}, bool initialized_ = {}, UnityEngine::Plane notePlane_ = {}, bool notePlaneWasCut_ = {}, UnityEngine::Vector3 noteForward_ = {}, UnityEngine::Vector3 notePlaneCenter_ = {}, UnityEngine::Vector3 beforeCutTopPos_ = {}, UnityEngine::Vector3 beforeCutBottomPos_ = {}, UnityEngine::Vector3 afterCutTopPos_ = {}, UnityEngine::Vector3 afterCutBottomPos_ = {}, UnityEngine::Vector3 newPlaneNormal_ = {}, UnityEngine::Vector3 cutTopPos_ = {}, UnityEngine::Vector3 cutBottomPos_ = {}) noexcept : didChangeEvent{didChangeEvent_}, didFinishEvent{didFinishEvent_}, saberMovementData{saberMovementData_}, cutPlaneNormal{cutPlaneNormal_}, cutTime{cutTime_}, afterCutRating{afterCutRating_}, beforeCutRating{beforeCutRating_}, didFinish{didFinish_}, initialized{initialized_}, notePlane{notePlane_}, notePlaneWasCut{notePlaneWasCut_}, noteForward{noteForward_}, notePlaneCenter{notePlaneCenter_}, beforeCutTopPos{beforeCutTopPos_}, beforeCutBottomPos{beforeCutBottomPos_}, afterCutTopPos{afterCutTopPos_}, afterCutBottomPos{afterCutBottomPos_}, newPlaneNormal{newPlaneNormal_}, cutTopPos{cutTopPos_}, cutBottomPos{cutBottomPos_} {}
    // Creating interface conversion operator: operator GlobalNamespace::ISaberMovementDataProcessor
    operator GlobalNamespace::ISaberMovementDataProcessor() noexcept {
      return *reinterpret_cast<GlobalNamespace::ISaberMovementDataProcessor*>(this);
    }
    // Creating interface conversion operator: operator GlobalNamespace::ISaberSwingRatingCounter
    operator GlobalNamespace::ISaberSwingRatingCounter() noexcept {
      return *reinterpret_cast<GlobalNamespace::ISaberSwingRatingCounter*>(this);
    }
    // Deleting conversion operator: operator uint64_t
    constexpr operator uint64_t() const noexcept = delete;
    // public System.Void Init(SaberMovementData saberMovementData, UnityEngine.Transform noteTransform)
    // Offset: 0x1082AF8
    void Init(GlobalNamespace::SaberMovementData* saberMovementData, UnityEngine::Transform* noteTransform);
    // public System.Void Deinit()
    // Offset: 0x1082520
    void Deinit();
    // public System.Void DrawGizmos()
    // Offset: 0x1082CF8
    void DrawGizmos();
    // public System.Void add_didChangeEvent(SwingSaberRatingDidChangeDelegate value)
    // Offset: 0x1088830
    // Implemented from: ISaberSwingRatingCounter
    // Base method: System.Void ISaberSwingRatingCounter::add_didChangeEvent(SwingSaberRatingDidChangeDelegate value)
    void add_didChangeEvent(GlobalNamespace::SwingSaberRatingDidChangeDelegate* value);
    // public System.Void remove_didChangeEvent(SwingSaberRatingDidChangeDelegate value)
    // Offset: 0x10888D4
    // Implemented from: ISaberSwingRatingCounter
    // Base method: System.Void ISaberSwingRatingCounter::remove_didChangeEvent(SwingSaberRatingDidChangeDelegate value)
    void remove_didChangeEvent(GlobalNamespace::SwingSaberRatingDidChangeDelegate* value);
    // public System.Void add_didFinishEvent(SwingSaberRatingDidFinishDelegate value)
    // Offset: 0x1088978
    // Implemented from: ISaberSwingRatingCounter
    // Base method: System.Void ISaberSwingRatingCounter::add_didFinishEvent(SwingSaberRatingDidFinishDelegate value)
    void add_didFinishEvent(GlobalNamespace::SwingSaberRatingDidFinishDelegate* value);
    // public System.Void remove_didFinishEvent(SwingSaberRatingDidFinishDelegate value)
    // Offset: 0x1088A1C
    // Implemented from: ISaberSwingRatingCounter
    // Base method: System.Void ISaberSwingRatingCounter::remove_didFinishEvent(SwingSaberRatingDidFinishDelegate value)
    void remove_didFinishEvent(GlobalNamespace::SwingSaberRatingDidFinishDelegate* value);
    // public System.Boolean get_didFinish()
    // Offset: 0x1088AC0
    // Implemented from: ISaberSwingRatingCounter
    // Base method: System.Boolean ISaberSwingRatingCounter::get_didFinish()
    bool get_didFinish();
    // public System.Single get_beforeCutRating()
    // Offset: 0x1088AC8
    // Implemented from: ISaberSwingRatingCounter
    // Base method: System.Single ISaberSwingRatingCounter::get_beforeCutRating()
    float get_beforeCutRating();
    // public System.Single get_afterCutRating()
    // Offset: 0x1088AD0
    // Implemented from: ISaberSwingRatingCounter
    // Base method: System.Single ISaberSwingRatingCounter::get_afterCutRating()
    float get_afterCutRating();
    // public System.Void ProcessNewData(BladeMovementDataElement newData, BladeMovementDataElement prevData, System.Boolean prevDataAreValid)
    // Offset: 0x1088AD8
    // Implemented from: ISaberMovementDataProcessor
    // Base method: System.Void ISaberMovementDataProcessor::ProcessNewData(BladeMovementDataElement newData, BladeMovementDataElement prevData, System.Boolean prevDataAreValid)
    void ProcessNewData(GlobalNamespace::BladeMovementDataElement newData, GlobalNamespace::BladeMovementDataElement prevData, bool prevDataAreValid);
    // public System.Void .ctor()
    // Offset: 0x10822D8
    // Implemented from: HMAutoincrementedRequestId
    // Base method: System.Void HMAutoincrementedRequestId::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SaberSwingRatingCounter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SaberSwingRatingCounter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SaberSwingRatingCounter*, creationType>()));
    }
  }; // SaberSwingRatingCounter
  #pragma pack(pop)
  static check_size<sizeof(SaberSwingRatingCounter), 192 + sizeof(UnityEngine::Vector3)> __GlobalNamespace_SaberSwingRatingCounterSizeCheck;
  static_assert(sizeof(SaberSwingRatingCounter) == 0xCC);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SaberSwingRatingCounter*, "", "SaberSwingRatingCounter");
