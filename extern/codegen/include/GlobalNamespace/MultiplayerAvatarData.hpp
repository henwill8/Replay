// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: LiteNetLib.Utils.INetImmutableSerializable`1
#include "LiteNetLib/Utils/INetImmutableSerializable_1.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: UnityEngine.Color32
#include "UnityEngine/Color32.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataReader
  class NetDataReader;
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
}
// Completed forward declares
// Begin il2cpp-utils forward declares
struct Il2CppString;
struct Il2CppObject;
// Completed il2cpp-utils forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: MultiplayerAvatarData
  struct MultiplayerAvatarData : public System::ValueType/*, public LiteNetLib::Utils::INetImmutableSerializable_1<GlobalNamespace::MultiplayerAvatarData>, public System::IEquatable_1<GlobalNamespace::MultiplayerAvatarData>*/ {
    public:
    // public readonly System.String headTopId
    // Offset: 0x0
    ::Il2CppString* headTopId;
    // public readonly UnityEngine.Color32 headTopPrimaryColor
    // Offset: 0x8
    UnityEngine::Color32 headTopPrimaryColor;
    // public readonly UnityEngine.Color32 headTopSecondaryColor
    // Offset: 0xC
    UnityEngine::Color32 headTopSecondaryColor;
    // public readonly System.String glassesId
    // Offset: 0x10
    ::Il2CppString* glassesId;
    // public readonly UnityEngine.Color32 glassesColor
    // Offset: 0x18
    UnityEngine::Color32 glassesColor;
    // public readonly System.String facialHairId
    // Offset: 0x20
    ::Il2CppString* facialHairId;
    // public readonly UnityEngine.Color32 facialHairColor
    // Offset: 0x28
    UnityEngine::Color32 facialHairColor;
    // public readonly System.String handsId
    // Offset: 0x30
    ::Il2CppString* handsId;
    // public readonly UnityEngine.Color32 handsColor
    // Offset: 0x38
    UnityEngine::Color32 handsColor;
    // public readonly System.String clothesId
    // Offset: 0x40
    ::Il2CppString* clothesId;
    // public readonly UnityEngine.Color32 clothesPrimaryColor
    // Offset: 0x48
    UnityEngine::Color32 clothesPrimaryColor;
    // public readonly UnityEngine.Color32 clothesSecondaryColor
    // Offset: 0x4C
    UnityEngine::Color32 clothesSecondaryColor;
    // public readonly UnityEngine.Color32 clothesDetailColor
    // Offset: 0x50
    UnityEngine::Color32 clothesDetailColor;
    // public readonly System.String skinColorId
    // Offset: 0x58
    ::Il2CppString* skinColorId;
    // public readonly System.String eyesId
    // Offset: 0x60
    ::Il2CppString* eyesId;
    // public readonly System.String mouthId
    // Offset: 0x68
    ::Il2CppString* mouthId;
    // Creating value type constructor for type: MultiplayerAvatarData
    constexpr MultiplayerAvatarData(::Il2CppString* headTopId_ = {}, UnityEngine::Color32 headTopPrimaryColor_ = {}, UnityEngine::Color32 headTopSecondaryColor_ = {}, ::Il2CppString* glassesId_ = {}, UnityEngine::Color32 glassesColor_ = {}, ::Il2CppString* facialHairId_ = {}, UnityEngine::Color32 facialHairColor_ = {}, ::Il2CppString* handsId_ = {}, UnityEngine::Color32 handsColor_ = {}, ::Il2CppString* clothesId_ = {}, UnityEngine::Color32 clothesPrimaryColor_ = {}, UnityEngine::Color32 clothesSecondaryColor_ = {}, UnityEngine::Color32 clothesDetailColor_ = {}, ::Il2CppString* skinColorId_ = {}, ::Il2CppString* eyesId_ = {}, ::Il2CppString* mouthId_ = {}) noexcept : headTopId{headTopId_}, headTopPrimaryColor{headTopPrimaryColor_}, headTopSecondaryColor{headTopSecondaryColor_}, glassesId{glassesId_}, glassesColor{glassesColor_}, facialHairId{facialHairId_}, facialHairColor{facialHairColor_}, handsId{handsId_}, handsColor{handsColor_}, clothesId{clothesId_}, clothesPrimaryColor{clothesPrimaryColor_}, clothesSecondaryColor{clothesSecondaryColor_}, clothesDetailColor{clothesDetailColor_}, skinColorId{skinColorId_}, eyesId{eyesId_}, mouthId{mouthId_} {}
    // Creating interface conversion operator: operator LiteNetLib::Utils::INetImmutableSerializable_1<GlobalNamespace::MultiplayerAvatarData>
    operator LiteNetLib::Utils::INetImmutableSerializable_1<GlobalNamespace::MultiplayerAvatarData>() noexcept {
      return *reinterpret_cast<LiteNetLib::Utils::INetImmutableSerializable_1<GlobalNamespace::MultiplayerAvatarData>*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<GlobalNamespace::MultiplayerAvatarData>
    operator System::IEquatable_1<GlobalNamespace::MultiplayerAvatarData>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<GlobalNamespace::MultiplayerAvatarData>*>(this);
    }
    // public System.Void .ctor(System.String headTopId, UnityEngine.Color32 headTopPrimaryColor, UnityEngine.Color32 headTopSecondaryColor, System.String glassesId, UnityEngine.Color32 glassesColor, System.String facialHairId, UnityEngine.Color32 facialHairColor, System.String handsId, UnityEngine.Color32 handsColor, System.String clothesId, UnityEngine.Color32 clothesPrimaryColor, UnityEngine.Color32 clothesSecondaryColor, UnityEngine.Color32 clothesDetailColor, System.String skinColorId, System.String eyesId, System.String mouthId)
    // Offset: 0xCB6284
    // ABORTED: conflicts with another method.  MultiplayerAvatarData(::Il2CppString* headTopId, UnityEngine::Color32 headTopPrimaryColor, UnityEngine::Color32 headTopSecondaryColor, ::Il2CppString* glassesId, UnityEngine::Color32 glassesColor, ::Il2CppString* facialHairId, UnityEngine::Color32 facialHairColor, ::Il2CppString* handsId, UnityEngine::Color32 handsColor, ::Il2CppString* clothesId, UnityEngine::Color32 clothesPrimaryColor, UnityEngine::Color32 clothesSecondaryColor, UnityEngine::Color32 clothesDetailColor, ::Il2CppString* skinColorId, ::Il2CppString* eyesId, ::Il2CppString* mouthId);
    // static public MultiplayerAvatarData Deserialize(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0x19A5390
    static GlobalNamespace::MultiplayerAvatarData Deserialize(LiteNetLib::Utils::NetDataReader* reader);
    // public System.Void Serialize(LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0xCB62D4
    // Implemented from: LiteNetLib.Utils.INetImmutableSerializable`1
    // Base method: System.Void INetImmutableSerializable_1::Serialize(LiteNetLib.Utils.NetDataWriter writer)
    void Serialize(LiteNetLib::Utils::NetDataWriter* writer);
    // public MultiplayerAvatarData CreateFromSerializedData(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0xCB62DC
    // Implemented from: LiteNetLib.Utils.INetImmutableSerializable`1
    // Base method: T INetImmutableSerializable_1::CreateFromSerializedData(LiteNetLib.Utils.NetDataReader reader)
    GlobalNamespace::MultiplayerAvatarData CreateFromSerializedData(LiteNetLib::Utils::NetDataReader* reader);
    // Creating proxy method: LiteNetLib_Utils_INetImmutableSerializable_1_CreateFromSerializedData
    // Maps to method: CreateFromSerializedData
    GlobalNamespace::MultiplayerAvatarData LiteNetLib_Utils_INetImmutableSerializable_1_CreateFromSerializedData(LiteNetLib::Utils::NetDataReader* reader);
    // public System.Boolean Equals(MultiplayerAvatarData other)
    // Offset: 0xCB62E4
    // Implemented from: System.IEquatable`1
    // Base method: System.Boolean IEquatable_1::Equals(MultiplayerAvatarData other)
    bool Equals(GlobalNamespace::MultiplayerAvatarData other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xCB6324
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xCB632C
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
  }; // MultiplayerAvatarData
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerAvatarData, "", "MultiplayerAvatarData");
#pragma pack(pop)
