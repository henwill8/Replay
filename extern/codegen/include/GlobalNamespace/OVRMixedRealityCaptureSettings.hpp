// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.ScriptableObject
#include "UnityEngine/ScriptableObject.hpp"
// Including type: UnityEngine.LayerMask
#include "UnityEngine/LayerMask.hpp"
// Including type: OVRManager/CompositionMethod
#include "GlobalNamespace/OVRManager.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: OVRManager/CameraDevice
// Already included the same include: GlobalNamespace/OVRManager.hpp
// Including type: OVRManager/DepthQuality
// Already included the same include: GlobalNamespace/OVRManager.hpp
// Including type: OVRManager/VirtualGreenScreenType
// Already included the same include: GlobalNamespace/OVRManager.hpp
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: OVRManager because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: OVRMixedRealityCaptureSettings
  // [] Offset: FFFFFFFF
  class OVRMixedRealityCaptureSettings : public UnityEngine::ScriptableObject {
    public:
    // public System.Boolean enableMixedReality
    // Size: 0x1
    // Offset: 0x18
    bool enableMixedReality;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableMixedReality and: extraHiddenLayers
    char __padding0[0x3] = {};
    // public UnityEngine.LayerMask extraHiddenLayers
    // Size: 0x4
    // Offset: 0x1C
    UnityEngine::LayerMask extraHiddenLayers;
    // Field size check
    static_assert(sizeof(UnityEngine::LayerMask) == 0x4);
    // public OVRManager/CompositionMethod compositionMethod
    // Size: 0x4
    // Offset: 0x20
    GlobalNamespace::OVRManager::CompositionMethod compositionMethod;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRManager::CompositionMethod) == 0x4);
    // public UnityEngine.Color externalCompositionBackdropColorRift
    // Size: 0x10
    // Offset: 0x24
    UnityEngine::Color externalCompositionBackdropColorRift;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // public UnityEngine.Color externalCompositionBackdropColorQuest
    // Size: 0x10
    // Offset: 0x34
    UnityEngine::Color externalCompositionBackdropColorQuest;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // public OVRManager/CameraDevice capturingCameraDevice
    // Size: 0x4
    // Offset: 0x44
    GlobalNamespace::OVRManager::CameraDevice capturingCameraDevice;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRManager::CameraDevice) == 0x4);
    // public System.Boolean flipCameraFrameHorizontally
    // Size: 0x1
    // Offset: 0x48
    bool flipCameraFrameHorizontally;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean flipCameraFrameVertically
    // Size: 0x1
    // Offset: 0x49
    bool flipCameraFrameVertically;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: flipCameraFrameVertically and: handPoseStateLatency
    char __padding7[0x2] = {};
    // public System.Single handPoseStateLatency
    // Size: 0x4
    // Offset: 0x4C
    float handPoseStateLatency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single sandwichCompositionRenderLatency
    // Size: 0x4
    // Offset: 0x50
    float sandwichCompositionRenderLatency;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Int32 sandwichCompositionBufferedFrames
    // Size: 0x4
    // Offset: 0x54
    int sandwichCompositionBufferedFrames;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public UnityEngine.Color chromaKeyColor
    // Size: 0x10
    // Offset: 0x58
    UnityEngine::Color chromaKeyColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // public System.Single chromaKeySimilarity
    // Size: 0x4
    // Offset: 0x68
    float chromaKeySimilarity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single chromaKeySmoothRange
    // Size: 0x4
    // Offset: 0x6C
    float chromaKeySmoothRange;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single chromaKeySpillRange
    // Size: 0x4
    // Offset: 0x70
    float chromaKeySpillRange;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean useDynamicLighting
    // Size: 0x1
    // Offset: 0x74
    bool useDynamicLighting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useDynamicLighting and: depthQuality
    char __padding15[0x3] = {};
    // public OVRManager/DepthQuality depthQuality
    // Size: 0x4
    // Offset: 0x78
    GlobalNamespace::OVRManager::DepthQuality depthQuality;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRManager::DepthQuality) == 0x4);
    // public System.Single dynamicLightingSmoothFactor
    // Size: 0x4
    // Offset: 0x7C
    float dynamicLightingSmoothFactor;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single dynamicLightingDepthVariationClampingValue
    // Size: 0x4
    // Offset: 0x80
    float dynamicLightingDepthVariationClampingValue;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public OVRManager/VirtualGreenScreenType virtualGreenScreenType
    // Size: 0x4
    // Offset: 0x84
    GlobalNamespace::OVRManager::VirtualGreenScreenType virtualGreenScreenType;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRManager::VirtualGreenScreenType) == 0x4);
    // public System.Single virtualGreenScreenTopY
    // Size: 0x4
    // Offset: 0x88
    float virtualGreenScreenTopY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single virtualGreenScreenBottomY
    // Size: 0x4
    // Offset: 0x8C
    float virtualGreenScreenBottomY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Boolean virtualGreenScreenApplyDepthCulling
    // Size: 0x1
    // Offset: 0x90
    bool virtualGreenScreenApplyDepthCulling;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: virtualGreenScreenApplyDepthCulling and: virtualGreenScreenDepthTolerance
    char __padding22[0x3] = {};
    // public System.Single virtualGreenScreenDepthTolerance
    // Size: 0x4
    // Offset: 0x94
    float virtualGreenScreenDepthTolerance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: OVRMixedRealityCaptureSettings
    OVRMixedRealityCaptureSettings(bool enableMixedReality_ = {}, UnityEngine::LayerMask extraHiddenLayers_ = {}, GlobalNamespace::OVRManager::CompositionMethod compositionMethod_ = {}, UnityEngine::Color externalCompositionBackdropColorRift_ = {}, UnityEngine::Color externalCompositionBackdropColorQuest_ = {}, GlobalNamespace::OVRManager::CameraDevice capturingCameraDevice_ = {}, bool flipCameraFrameHorizontally_ = {}, bool flipCameraFrameVertically_ = {}, float handPoseStateLatency_ = {}, float sandwichCompositionRenderLatency_ = {}, int sandwichCompositionBufferedFrames_ = {}, UnityEngine::Color chromaKeyColor_ = {}, float chromaKeySimilarity_ = {}, float chromaKeySmoothRange_ = {}, float chromaKeySpillRange_ = {}, bool useDynamicLighting_ = {}, GlobalNamespace::OVRManager::DepthQuality depthQuality_ = {}, float dynamicLightingSmoothFactor_ = {}, float dynamicLightingDepthVariationClampingValue_ = {}, GlobalNamespace::OVRManager::VirtualGreenScreenType virtualGreenScreenType_ = {}, float virtualGreenScreenTopY_ = {}, float virtualGreenScreenBottomY_ = {}, bool virtualGreenScreenApplyDepthCulling_ = {}, float virtualGreenScreenDepthTolerance_ = {}) noexcept : enableMixedReality{enableMixedReality_}, extraHiddenLayers{extraHiddenLayers_}, compositionMethod{compositionMethod_}, externalCompositionBackdropColorRift{externalCompositionBackdropColorRift_}, externalCompositionBackdropColorQuest{externalCompositionBackdropColorQuest_}, capturingCameraDevice{capturingCameraDevice_}, flipCameraFrameHorizontally{flipCameraFrameHorizontally_}, flipCameraFrameVertically{flipCameraFrameVertically_}, handPoseStateLatency{handPoseStateLatency_}, sandwichCompositionRenderLatency{sandwichCompositionRenderLatency_}, sandwichCompositionBufferedFrames{sandwichCompositionBufferedFrames_}, chromaKeyColor{chromaKeyColor_}, chromaKeySimilarity{chromaKeySimilarity_}, chromaKeySmoothRange{chromaKeySmoothRange_}, chromaKeySpillRange{chromaKeySpillRange_}, useDynamicLighting{useDynamicLighting_}, depthQuality{depthQuality_}, dynamicLightingSmoothFactor{dynamicLightingSmoothFactor_}, dynamicLightingDepthVariationClampingValue{dynamicLightingDepthVariationClampingValue_}, virtualGreenScreenType{virtualGreenScreenType_}, virtualGreenScreenTopY{virtualGreenScreenTopY_}, virtualGreenScreenBottomY{virtualGreenScreenBottomY_}, virtualGreenScreenApplyDepthCulling{virtualGreenScreenApplyDepthCulling_}, virtualGreenScreenDepthTolerance{virtualGreenScreenDepthTolerance_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void ReadFrom(OVRManager manager)
    // Offset: 0x144CEC4
    void ReadFrom(GlobalNamespace::OVRManager* manager);
    // public System.Void ApplyTo(OVRManager manager)
    // Offset: 0x144CF98
    void ApplyTo(GlobalNamespace::OVRManager* manager);
    // public System.Void .ctor()
    // Offset: 0x144D06C
    // Implemented from: UnityEngine.ScriptableObject
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRMixedRealityCaptureSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRMixedRealityCaptureSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRMixedRealityCaptureSettings*, creationType>()));
    }
  }; // OVRMixedRealityCaptureSettings
  #pragma pack(pop)
  static check_size<sizeof(OVRMixedRealityCaptureSettings), 148 + sizeof(float)> __GlobalNamespace_OVRMixedRealityCaptureSettingsSizeCheck;
  static_assert(sizeof(OVRMixedRealityCaptureSettings) == 0x98);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRMixedRealityCaptureSettings*, "", "OVRMixedRealityCaptureSettings");
