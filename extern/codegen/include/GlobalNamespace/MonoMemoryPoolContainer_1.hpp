// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MonoBehaviour
  class MonoBehaviour;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: MonoMemoryPool`1<TValue>
  template<typename TValue>
  class MonoMemoryPool_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: MonoMemoryPoolContainer`1
  // [] Offset: FFFFFFFF
  template<typename T>
  class MonoMemoryPoolContainer_1 : public ::Il2CppObject {
    public:
    // private readonly System.Collections.Generic.HashSet`1<T> _activeItems
    // Size: 0x8
    // Offset: 0x0
    System::Collections::Generic::HashSet_1<T>* activeItems;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::HashSet_1<T>*) == 0x8);
    // private readonly Zenject.MonoMemoryPool`1<T> _memoryPool
    // Size: 0x8
    // Offset: 0x0
    Zenject::MonoMemoryPool_1<T>* memoryPool;
    // Field size check
    static_assert(sizeof(Zenject::MonoMemoryPool_1<T>*) == 0x8);
    // Creating value type constructor for type: MonoMemoryPoolContainer_1
    MonoMemoryPoolContainer_1(System::Collections::Generic::HashSet_1<T>* activeItems_ = {}, Zenject::MonoMemoryPool_1<T>* memoryPool_ = {}) noexcept : activeItems{activeItems_}, memoryPool{memoryPool_} {}
    // public System.Collections.Generic.HashSet`1<T> get_activeItems()
    // Offset: 0xFFFFFFFF
    System::Collections::Generic::HashSet_1<T>* get_activeItems() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MonoMemoryPoolContainer_1::get_activeItems");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_activeItems", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::HashSet_1<T>*, false>(this, ___internal__method);
    }
    // public System.Void .ctor(Zenject.MonoMemoryPool`1<T> memoryPool)
    // Offset: 0xFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MonoMemoryPoolContainer_1<T>* New_ctor(Zenject::MonoMemoryPool_1<T>* memoryPool) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MonoMemoryPoolContainer_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MonoMemoryPoolContainer_1<T>*, creationType>(memoryPool)));
    }
    // public T Spawn()
    // Offset: 0xFFFFFFFF
    T Spawn() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MonoMemoryPoolContainer_1::Spawn");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Spawn", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<T, false>(this, ___internal__method);
    }
    // public System.Void Despawn(T item)
    // Offset: 0xFFFFFFFF
    void Despawn(T item) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MonoMemoryPoolContainer_1::Despawn");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Despawn", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(item)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, item);
    }
  }; // MonoMemoryPoolContainer`1
  // Could not write size check! Type: MonoMemoryPoolContainer`1 is generic, or has no fields that are valid for size checks!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(GlobalNamespace::MonoMemoryPoolContainer_1, "", "MonoMemoryPoolContainer`1");
