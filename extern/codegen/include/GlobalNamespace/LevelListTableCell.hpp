// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.TableCell
#include "HMUI/TableCell.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IPreviewBeatmapLevel
  class IPreviewBeatmapLevel;
  // Forward declaring type: AdditionalContentModel
  class AdditionalContentModel;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Image
  class Image;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: CanvasGroup
  class CanvasGroup;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationTokenSource
  class CancellationTokenSource;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: LevelListTableCell
  class LevelListTableCell : public HMUI::TableCell {
    public:
    // Nested type: GlobalNamespace::LevelListTableCell::$SetDataFromLevelAsync$d__17
    struct $SetDataFromLevelAsync$d__17;
    // Nested type: GlobalNamespace::LevelListTableCell::$RefreshAvailabilityAsync$d__22
    struct $RefreshAvailabilityAsync$d__22;
    // private UnityEngine.UI.Image _backgroundImage
    // Offset: 0x50
    UnityEngine::UI::Image* backgroundImage;
    // private UnityEngine.CanvasGroup _canvasGroup
    // Offset: 0x58
    UnityEngine::CanvasGroup* canvasGroup;
    // private UnityEngine.UI.Image _coverImage
    // Offset: 0x60
    UnityEngine::UI::Image* coverImage;
    // private TMPro.TextMeshProUGUI _songNameText
    // Offset: 0x68
    TMPro::TextMeshProUGUI* songNameText;
    // private TMPro.TextMeshProUGUI _songAuthorText
    // Offset: 0x70
    TMPro::TextMeshProUGUI* songAuthorText;
    // private UnityEngine.UI.Image _favoritesBadgeImage
    // Offset: 0x78
    UnityEngine::UI::Image* favoritesBadgeImage;
    // private TMPro.TextMeshProUGUI _songDurationText
    // Offset: 0x80
    TMPro::TextMeshProUGUI* songDurationText;
    // private TMPro.TextMeshProUGUI _songBpmText
    // Offset: 0x88
    TMPro::TextMeshProUGUI* songBpmText;
    // private UnityEngine.Color _highlightBackgroundColor
    // Offset: 0x90
    UnityEngine::Color highlightBackgroundColor;
    // private UnityEngine.Color _selectedBackgroundColor
    // Offset: 0xA0
    UnityEngine::Color selectedBackgroundColor;
    // private UnityEngine.Color _selectedAndHighlightedBackgroundColor
    // Offset: 0xB0
    UnityEngine::Color selectedAndHighlightedBackgroundColor;
    // private System.Single _notOwnedAlpha
    // Offset: 0xC0
    float notOwnedAlpha;
    // private System.Threading.CancellationTokenSource _refreshingAvailabilityCancellationTokenSource
    // Offset: 0xC8
    System::Threading::CancellationTokenSource* refreshingAvailabilityCancellationTokenSource;
    // private System.Threading.CancellationTokenSource _settingDataCancellationTokenSource
    // Offset: 0xD0
    System::Threading::CancellationTokenSource* settingDataCancellationTokenSource;
    // private System.Boolean _notOwned
    // Offset: 0xD8
    bool notOwned;
    // private System.String _refreshingAvailabilityLevelID
    // Offset: 0xE0
    ::Il2CppString* refreshingAvailabilityLevelID;
    // private System.String _settingDataFromLevelId
    // Offset: 0xE8
    ::Il2CppString* settingDataFromLevelId;
    // public System.Void SetDataFromLevelAsync(IPreviewBeatmapLevel level, System.Boolean isFavorite)
    // Offset: 0x1AC0354
    void SetDataFromLevelAsync(GlobalNamespace::IPreviewBeatmapLevel* level, bool isFavorite);
    // private System.Void RefreshVisuals()
    // Offset: 0x1AC0454
    void RefreshVisuals();
    // public System.Void RefreshAvailabilityAsync(AdditionalContentModel contentModel, System.String levelID)
    // Offset: 0x1AC0588
    void RefreshAvailabilityAsync(GlobalNamespace::AdditionalContentModel* contentModel, ::Il2CppString* levelID);
    // public System.Void CancelAsyncOperations()
    // Offset: 0x1AC052C
    void CancelAsyncOperations();
    // protected override System.Void SelectionDidChange(HMUI.SelectableCell/TransitionType transitionType)
    // Offset: 0x1AC0450
    // Implemented from: HMUI.SelectableCell
    // Base method: System.Void SelectableCell::SelectionDidChange(HMUI.SelectableCell/TransitionType transitionType)
    void SelectionDidChange(HMUI::SelectableCell::TransitionType transitionType);
    // protected override System.Void HighlightDidChange(HMUI.SelectableCell/TransitionType transitionType)
    // Offset: 0x1AC0524
    // Implemented from: HMUI.SelectableCell
    // Base method: System.Void SelectableCell::HighlightDidChange(HMUI.SelectableCell/TransitionType transitionType)
    void HighlightDidChange(HMUI::SelectableCell::TransitionType transitionType);
    // protected override System.Void WasPreparedForReuse()
    // Offset: 0x1AC0528
    // Implemented from: HMUI.TableCell
    // Base method: System.Void TableCell::WasPreparedForReuse()
    void WasPreparedForReuse();
    // public System.Void .ctor()
    // Offset: 0x1AC068C
    // Implemented from: HMUI.TableCell
    // Base method: System.Void TableCell::.ctor()
    // Base method: System.Void SelectableCell::.ctor()
    // Base method: System.Void Interactable::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static LevelListTableCell* New_ctor();
  }; // LevelListTableCell
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LevelListTableCell*, "", "LevelListTableCell");
#pragma pack(pop)
