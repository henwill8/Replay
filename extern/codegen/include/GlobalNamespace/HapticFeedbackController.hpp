// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BoolSO
  class BoolSO;
  // Forward declaring type: IVRPlatformHelper
  class IVRPlatformHelper;
}
// Forward declaring namespace: Libraries::HM::HMLib::VR
namespace Libraries::HM::HMLib::VR {
  // Forward declaring type: HapticPresetSO
  class HapticPresetSO;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: HapticFeedbackController
  class HapticFeedbackController : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::HapticFeedbackController::RumbleData
    class RumbleData;
    // private BoolSO _controllersRumbleEnabled
    // Offset: 0x18
    GlobalNamespace::BoolSO* controllersRumbleEnabled;
    // private Libraries.HM.HMLib.VR.HapticPresetSO _continuousRumblePreset
    // Offset: 0x20
    Libraries::HM::HMLib::VR::HapticPresetSO* continuousRumblePreset;
    // private readonly IVRPlatformHelper _vrPlatformHelper
    // Offset: 0x28
    GlobalNamespace::IVRPlatformHelper* vrPlatformHelper;
    // private readonly System.Collections.Generic.Dictionary`2<UnityEngine.XR.XRNode,System.Collections.Generic.Dictionary`2<System.Object,HapticFeedbackController/RumbleData>> _rumblesByNode
    // Offset: 0x30
    System::Collections::Generic::Dictionary_2<UnityEngine::XR::XRNode, System::Collections::Generic::Dictionary_2<::Il2CppObject*, GlobalNamespace::HapticFeedbackController::RumbleData*>*>* rumblesByNode;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Single kContinuousRumbleFrameDuration
    static constexpr const float kContinuousRumbleFrameDuration = 0.016666668;
    // Get static field: static private System.Single kContinuousRumbleFrameDuration
    static float _get_kContinuousRumbleFrameDuration();
    // Set static field: static private System.Single kContinuousRumbleFrameDuration
    static void _set_kContinuousRumbleFrameDuration(float value);
    // public Libraries.HM.HMLib.VR.HapticPresetSO get_continuousRumblePreset()
    // Offset: 0x1035FB8
    Libraries::HM::HMLib::VR::HapticPresetSO* get_continuousRumblePreset();
    // protected System.Void Awake()
    // Offset: 0x1035FC0
    void Awake();
    // public System.Void PlayHapticFeedback(UnityEngine.XR.XRNode node, Libraries.HM.HMLib.VR.HapticPresetSO hapticPreset)
    // Offset: 0x1036088
    void PlayHapticFeedback(UnityEngine::XR::XRNode node, Libraries::HM::HMLib::VR::HapticPresetSO* hapticPreset);
    // private System.Void Update()
    // Offset: 0x103626C
    void Update();
    // private System.Void UpdateRumbles()
    // Offset: 0x1036270
    void UpdateRumbles();
    // private HapticFeedbackController/RumbleData GetRumble(UnityEngine.XR.XRNode node, System.Object preset)
    // Offset: 0x1036170
    GlobalNamespace::HapticFeedbackController::RumbleData* GetRumble(UnityEngine::XR::XRNode node, ::Il2CppObject* preset);
    // public System.Void .ctor()
    // Offset: 0x1036684
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static HapticFeedbackController* New_ctor();
  }; // HapticFeedbackController
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::HapticFeedbackController*, "", "HapticFeedbackController");
#pragma pack(pop)
