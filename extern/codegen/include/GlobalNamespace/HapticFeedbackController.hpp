// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.XR.XRNode
#include "UnityEngine/XR/XRNode.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BoolSO
  class BoolSO;
  // Forward declaring type: VRPlatformHelper
  class VRPlatformHelper;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: HapticFeedbackController
  class HapticFeedbackController : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::HapticFeedbackController::ContinousRumbleParams
    class ContinousRumbleParams;
    // Nested type: GlobalNamespace::HapticFeedbackController::$OneShotRumbleCoroutine$d__12
    class $OneShotRumbleCoroutine$d__12;
    // private BoolSO _controllersRumbleEnabled
    // Offset: 0x18
    GlobalNamespace::BoolSO* controllersRumbleEnabled;
    // private VRPlatformHelper _vrPlatformHelper
    // Offset: 0x20
    GlobalNamespace::VRPlatformHelper* vrPlatformHelper;
    // private System.Collections.Generic.Dictionary`2<UnityEngine.XR.XRNode,HapticFeedbackController/ContinousRumbleParams> _continuousRumbles
    // Offset: 0x28
    System::Collections::Generic::Dictionary_2<UnityEngine::XR::XRNode, GlobalNamespace::HapticFeedbackController::ContinousRumbleParams*>* continuousRumbles;
    // private System.Int32 continousRumbleIntervalCounter
    // Offset: 0x30
    int continousRumbleIntervalCounter;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Single kContinuesRumbleImpulseStrength
    static constexpr const float kContinuesRumbleImpulseStrength = 1;
    // Get static field: static private System.Single kContinuesRumbleImpulseStrength
    static float _get_kContinuesRumbleImpulseStrength();
    // Set static field: static private System.Single kContinuesRumbleImpulseStrength
    static void _set_kContinuesRumbleImpulseStrength(float value);
    // static field const value: static private System.Single kContinuesRumbleIntervalTime
    static constexpr const float kContinuesRumbleIntervalTime = 0.01;
    // Get static field: static private System.Single kContinuesRumbleIntervalTime
    static float _get_kContinuesRumbleIntervalTime();
    // Set static field: static private System.Single kContinuesRumbleIntervalTime
    static void _set_kContinuesRumbleIntervalTime(float value);
    // protected System.Void Awake()
    // Offset: 0xCB71F0
    void Awake();
    // protected System.Void LateUpdate()
    // Offset: 0xCB72D0
    void LateUpdate();
    // public System.Void ContinuousRumble(UnityEngine.XR.XRNode node)
    // Offset: 0xCB745C
    void ContinuousRumble(UnityEngine::XR::XRNode node);
    // public System.Void HitNote(UnityEngine.XR.XRNode node)
    // Offset: 0xCB74F8
    void HitNote(UnityEngine::XR::XRNode node);
    // private System.Void Rumble(UnityEngine.XR.XRNode node, System.Single duration, System.Single impulseStrength, System.Single intervalDuration)
    // Offset: 0xCB750C
    void Rumble(UnityEngine::XR::XRNode node, float duration, float impulseStrength, float intervalDuration);
    // private System.Collections.IEnumerator OneShotRumbleCoroutine(UnityEngine.XR.XRNode node, System.Single duration, System.Single impulseStrength, System.Single intervalDuration)
    // Offset: 0xCB75C4
    System::Collections::IEnumerator* OneShotRumbleCoroutine(UnityEngine::XR::XRNode node, float duration, float impulseStrength, float intervalDuration);
    // public System.Void .ctor()
    // Offset: 0xCB76A0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static HapticFeedbackController* New_ctor();
  }; // HapticFeedbackController
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::HapticFeedbackController*, "", "HapticFeedbackController");
#pragma pack(pop)
