// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRPlugin/Step
#include "./OVRPlugin_Step.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: Controller because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Version
  class Version;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector3
  struct Vector3;
  // Forward declaring type: Quaternion
  struct Quaternion;
  // Forward declaring type: Vector2
  struct Vector2;
}
// Forward declaring namespace: UnityEngine::XR
namespace UnityEngine::XR {
  // Forward declaring type: XRNode
  struct XRNode;
}
// Forward declaring namespace: OVR::OpenVR
namespace OVR::OpenVR {
  // Forward declaring type: ETrackedDeviceProperty
  struct ETrackedDeviceProperty;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: OVRInput
  class OVRInput : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::OVRInput::Button
    struct Button;
    // Nested type: GlobalNamespace::OVRInput::RawButton
    struct RawButton;
    // Nested type: GlobalNamespace::OVRInput::Touch
    struct Touch;
    // Nested type: GlobalNamespace::OVRInput::RawTouch
    struct RawTouch;
    // Nested type: GlobalNamespace::OVRInput::NearTouch
    struct NearTouch;
    // Nested type: GlobalNamespace::OVRInput::RawNearTouch
    struct RawNearTouch;
    // Nested type: GlobalNamespace::OVRInput::Axis1D
    struct Axis1D;
    // Nested type: GlobalNamespace::OVRInput::RawAxis1D
    struct RawAxis1D;
    // Nested type: GlobalNamespace::OVRInput::Axis2D
    struct Axis2D;
    // Nested type: GlobalNamespace::OVRInput::RawAxis2D
    struct RawAxis2D;
    // Nested type: GlobalNamespace::OVRInput::OpenVRButton
    struct OpenVRButton;
    // Nested type: GlobalNamespace::OVRInput::Controller
    struct Controller;
    // Nested type: GlobalNamespace::OVRInput::Handedness
    struct Handedness;
    // Nested type: GlobalNamespace::OVRInput::OpenVRController
    struct OpenVRController;
    // Nested type: GlobalNamespace::OVRInput::OpenVRControllerDetails
    struct OpenVRControllerDetails;
    // Nested type: GlobalNamespace::OVRInput::HapticInfo
    class HapticInfo;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerBase
    class OVRControllerBase;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerTouch
    class OVRControllerTouch;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerLTouch
    class OVRControllerLTouch;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerRTouch
    class OVRControllerRTouch;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerHands
    class OVRControllerHands;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerLHand
    class OVRControllerLHand;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerRHand
    class OVRControllerRHand;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerRemote
    class OVRControllerRemote;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerGamepadPC
    class OVRControllerGamepadPC;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerGamepadMac
    class OVRControllerGamepadMac;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerGamepadAndroid
    class OVRControllerGamepadAndroid;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerTouchpad
    class OVRControllerTouchpad;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerLTrackedRemote
    class OVRControllerLTrackedRemote;
    // Nested type: GlobalNamespace::OVRInput::OVRControllerRTrackedRemote
    class OVRControllerRTrackedRemote;
    // Autogenerated type: OVRInput/Controller
    struct Controller : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: Controller
      constexpr Controller(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OVRInput/Controller None
      static constexpr const int None = 0;
      // Get static field: static public OVRInput/Controller None
      static GlobalNamespace::OVRInput::Controller _get_None();
      // Set static field: static public OVRInput/Controller None
      static void _set_None(GlobalNamespace::OVRInput::Controller value);
      // static field const value: static public OVRInput/Controller LTouch
      static constexpr const int LTouch = 1;
      // Get static field: static public OVRInput/Controller LTouch
      static GlobalNamespace::OVRInput::Controller _get_LTouch();
      // Set static field: static public OVRInput/Controller LTouch
      static void _set_LTouch(GlobalNamespace::OVRInput::Controller value);
      // static field const value: static public OVRInput/Controller RTouch
      static constexpr const int RTouch = 2;
      // Get static field: static public OVRInput/Controller RTouch
      static GlobalNamespace::OVRInput::Controller _get_RTouch();
      // Set static field: static public OVRInput/Controller RTouch
      static void _set_RTouch(GlobalNamespace::OVRInput::Controller value);
      // static field const value: static public OVRInput/Controller Touch
      static constexpr const int Touch = 3;
      // Get static field: static public OVRInput/Controller Touch
      static GlobalNamespace::OVRInput::Controller _get_Touch();
      // Set static field: static public OVRInput/Controller Touch
      static void _set_Touch(GlobalNamespace::OVRInput::Controller value);
      // static field const value: static public OVRInput/Controller Remote
      static constexpr const int Remote = 4;
      // Get static field: static public OVRInput/Controller Remote
      static GlobalNamespace::OVRInput::Controller _get_Remote();
      // Set static field: static public OVRInput/Controller Remote
      static void _set_Remote(GlobalNamespace::OVRInput::Controller value);
      // static field const value: static public OVRInput/Controller Gamepad
      static constexpr const int Gamepad = 16;
      // Get static field: static public OVRInput/Controller Gamepad
      static GlobalNamespace::OVRInput::Controller _get_Gamepad();
      // Set static field: static public OVRInput/Controller Gamepad
      static void _set_Gamepad(GlobalNamespace::OVRInput::Controller value);
      // static field const value: static public OVRInput/Controller Hands
      static constexpr const int Hands = 96;
      // Get static field: static public OVRInput/Controller Hands
      static GlobalNamespace::OVRInput::Controller _get_Hands();
      // Set static field: static public OVRInput/Controller Hands
      static void _set_Hands(GlobalNamespace::OVRInput::Controller value);
      // static field const value: static public OVRInput/Controller LHand
      static constexpr const int LHand = 32;
      // Get static field: static public OVRInput/Controller LHand
      static GlobalNamespace::OVRInput::Controller _get_LHand();
      // Set static field: static public OVRInput/Controller LHand
      static void _set_LHand(GlobalNamespace::OVRInput::Controller value);
      // static field const value: static public OVRInput/Controller RHand
      static constexpr const int RHand = 64;
      // Get static field: static public OVRInput/Controller RHand
      static GlobalNamespace::OVRInput::Controller _get_RHand();
      // Set static field: static public OVRInput/Controller RHand
      static void _set_RHand(GlobalNamespace::OVRInput::Controller value);
      // static field const value: static public OVRInput/Controller Touchpad
      static constexpr const int Touchpad = 134217728;
      // Get static field: static public OVRInput/Controller Touchpad
      static GlobalNamespace::OVRInput::Controller _get_Touchpad();
      // Set static field: static public OVRInput/Controller Touchpad
      static void _set_Touchpad(GlobalNamespace::OVRInput::Controller value);
      // static field const value: static public OVRInput/Controller LTrackedRemote
      static constexpr const int LTrackedRemote = 16777216;
      // Get static field: static public OVRInput/Controller LTrackedRemote
      static GlobalNamespace::OVRInput::Controller _get_LTrackedRemote();
      // Set static field: static public OVRInput/Controller LTrackedRemote
      static void _set_LTrackedRemote(GlobalNamespace::OVRInput::Controller value);
      // static field const value: static public OVRInput/Controller RTrackedRemote
      static constexpr const int RTrackedRemote = 33554432;
      // Get static field: static public OVRInput/Controller RTrackedRemote
      static GlobalNamespace::OVRInput::Controller _get_RTrackedRemote();
      // Set static field: static public OVRInput/Controller RTrackedRemote
      static void _set_RTrackedRemote(GlobalNamespace::OVRInput::Controller value);
      // static field const value: static public OVRInput/Controller Active
      static constexpr const int Active = -2147483648;
      // Get static field: static public OVRInput/Controller Active
      static GlobalNamespace::OVRInput::Controller _get_Active();
      // Set static field: static public OVRInput/Controller Active
      static void _set_Active(GlobalNamespace::OVRInput::Controller value);
      // static field const value: static public OVRInput/Controller All
      static constexpr const int All = -1;
      // Get static field: static public OVRInput/Controller All
      static GlobalNamespace::OVRInput::Controller _get_All();
      // Set static field: static public OVRInput/Controller All
      static void _set_All(GlobalNamespace::OVRInput::Controller value);
    }; // OVRInput/Controller
    // Get static field: static private readonly System.Single AXIS_AS_BUTTON_THRESHOLD
    static float _get_AXIS_AS_BUTTON_THRESHOLD();
    // Set static field: static private readonly System.Single AXIS_AS_BUTTON_THRESHOLD
    static void _set_AXIS_AS_BUTTON_THRESHOLD(float value);
    // Get static field: static private readonly System.Single AXIS_DEADZONE_THRESHOLD
    static float _get_AXIS_DEADZONE_THRESHOLD();
    // Set static field: static private readonly System.Single AXIS_DEADZONE_THRESHOLD
    static void _set_AXIS_DEADZONE_THRESHOLD(float value);
    // Get static field: static private System.Collections.Generic.List`1<OVRInput/OVRControllerBase> controllers
    static System::Collections::Generic::List_1<GlobalNamespace::OVRInput::OVRControllerBase*>* _get_controllers();
    // Set static field: static private System.Collections.Generic.List`1<OVRInput/OVRControllerBase> controllers
    static void _set_controllers(System::Collections::Generic::List_1<GlobalNamespace::OVRInput::OVRControllerBase*>* value);
    // Get static field: static private OVRInput/Controller activeControllerType
    static GlobalNamespace::OVRInput::Controller _get_activeControllerType();
    // Set static field: static private OVRInput/Controller activeControllerType
    static void _set_activeControllerType(GlobalNamespace::OVRInput::Controller value);
    // Get static field: static private OVRInput/Controller connectedControllerTypes
    static GlobalNamespace::OVRInput::Controller _get_connectedControllerTypes();
    // Set static field: static private OVRInput/Controller connectedControllerTypes
    static void _set_connectedControllerTypes(GlobalNamespace::OVRInput::Controller value);
    // Get static field: static private OVRPlugin/Step stepType
    static GlobalNamespace::OVRPlugin::Step _get_stepType();
    // Set static field: static private OVRPlugin/Step stepType
    static void _set_stepType(GlobalNamespace::OVRPlugin::Step value);
    // Get static field: static private System.Int32 fixedUpdateCount
    static int _get_fixedUpdateCount();
    // Set static field: static private System.Int32 fixedUpdateCount
    static void _set_fixedUpdateCount(int value);
    // Get static field: static private System.Boolean _pluginSupportsActiveController
    static bool _get__pluginSupportsActiveController();
    // Set static field: static private System.Boolean _pluginSupportsActiveController
    static void _set__pluginSupportsActiveController(bool value);
    // Get static field: static private System.Boolean _pluginSupportsActiveControllerCached
    static bool _get__pluginSupportsActiveControllerCached();
    // Set static field: static private System.Boolean _pluginSupportsActiveControllerCached
    static void _set__pluginSupportsActiveControllerCached(bool value);
    // Get static field: static private System.Version _pluginSupportsActiveControllerMinVersion
    static System::Version* _get__pluginSupportsActiveControllerMinVersion();
    // Set static field: static private System.Version _pluginSupportsActiveControllerMinVersion
    static void _set__pluginSupportsActiveControllerMinVersion(System::Version* value);
    // Get static field: static private System.Int32 NUM_HAPTIC_CHANNELS
    static int _get_NUM_HAPTIC_CHANNELS();
    // Set static field: static private System.Int32 NUM_HAPTIC_CHANNELS
    static void _set_NUM_HAPTIC_CHANNELS(int value);
    // Get static field: static private OVRInput/HapticInfo[] hapticInfos
    static ::Array<GlobalNamespace::OVRInput::HapticInfo*>* _get_hapticInfos();
    // Set static field: static private OVRInput/HapticInfo[] hapticInfos
    static void _set_hapticInfos(::Array<GlobalNamespace::OVRInput::HapticInfo*>* value);
    // Get static field: static private System.Single OPENVR_MAX_HAPTIC_AMPLITUDE
    static float _get_OPENVR_MAX_HAPTIC_AMPLITUDE();
    // Set static field: static private System.Single OPENVR_MAX_HAPTIC_AMPLITUDE
    static void _set_OPENVR_MAX_HAPTIC_AMPLITUDE(float value);
    // Get static field: static private System.Single HAPTIC_VIBRATION_DURATION_SECONDS
    static float _get_HAPTIC_VIBRATION_DURATION_SECONDS();
    // Set static field: static private System.Single HAPTIC_VIBRATION_DURATION_SECONDS
    static void _set_HAPTIC_VIBRATION_DURATION_SECONDS(float value);
    // Get static field: static private System.String OPENVR_TOUCH_NAME
    static ::Il2CppString* _get_OPENVR_TOUCH_NAME();
    // Set static field: static private System.String OPENVR_TOUCH_NAME
    static void _set_OPENVR_TOUCH_NAME(::Il2CppString* value);
    // Get static field: static private System.String OPENVR_VIVE_CONTROLLER_NAME
    static ::Il2CppString* _get_OPENVR_VIVE_CONTROLLER_NAME();
    // Set static field: static private System.String OPENVR_VIVE_CONTROLLER_NAME
    static void _set_OPENVR_VIVE_CONTROLLER_NAME(::Il2CppString* value);
    // Get static field: static private System.String OPENVR_WINDOWSMR_CONTROLLER_NAME
    static ::Il2CppString* _get_OPENVR_WINDOWSMR_CONTROLLER_NAME();
    // Set static field: static private System.String OPENVR_WINDOWSMR_CONTROLLER_NAME
    static void _set_OPENVR_WINDOWSMR_CONTROLLER_NAME(::Il2CppString* value);
    // Get static field: static public OVRInput/OpenVRControllerDetails[] openVRControllerDetails
    static ::Array<GlobalNamespace::OVRInput::OpenVRControllerDetails>* _get_openVRControllerDetails();
    // Set static field: static public OVRInput/OpenVRControllerDetails[] openVRControllerDetails
    static void _set_openVRControllerDetails(::Array<GlobalNamespace::OVRInput::OpenVRControllerDetails>* value);
    // static private System.Boolean get_pluginSupportsActiveController()
    // Offset: 0xE70CC4
    static bool get_pluginSupportsActiveController();
    // static private System.Void .cctor()
    // Offset: 0xE70D7C
    static void _cctor();
    // static public System.Void Update()
    // Offset: 0xE71484
    static void Update();
    // static public System.Void FixedUpdate()
    // Offset: 0xE7217C
    static void FixedUpdate();
    // static public System.Boolean GetControllerOrientationTracked(OVRInput/Controller controllerType)
    // Offset: 0xE72294
    static bool GetControllerOrientationTracked(GlobalNamespace::OVRInput::Controller controllerType);
    // static public System.Boolean GetControllerOrientationValid(OVRInput/Controller controllerType)
    // Offset: 0xE72374
    static bool GetControllerOrientationValid(GlobalNamespace::OVRInput::Controller controllerType);
    // static public System.Boolean GetControllerPositionTracked(OVRInput/Controller controllerType)
    // Offset: 0xE72454
    static bool GetControllerPositionTracked(GlobalNamespace::OVRInput::Controller controllerType);
    // static public System.Boolean GetControllerPositionValid(OVRInput/Controller controllerType)
    // Offset: 0xE72534
    static bool GetControllerPositionValid(GlobalNamespace::OVRInput::Controller controllerType);
    // static public UnityEngine.Vector3 GetLocalControllerPosition(OVRInput/Controller controllerType)
    // Offset: 0xE6A4B4
    static UnityEngine::Vector3 GetLocalControllerPosition(GlobalNamespace::OVRInput::Controller controllerType);
    // static public UnityEngine.Vector3 GetLocalControllerVelocity(OVRInput/Controller controllerType)
    // Offset: 0xE6ACAC
    static UnityEngine::Vector3 GetLocalControllerVelocity(GlobalNamespace::OVRInput::Controller controllerType);
    // static public UnityEngine.Vector3 GetLocalControllerAcceleration(OVRInput/Controller controllerType)
    // Offset: 0xE72614
    static UnityEngine::Vector3 GetLocalControllerAcceleration(GlobalNamespace::OVRInput::Controller controllerType);
    // static public UnityEngine.Quaternion GetLocalControllerRotation(OVRInput/Controller controllerType)
    // Offset: 0xE6A8B4
    static UnityEngine::Quaternion GetLocalControllerRotation(GlobalNamespace::OVRInput::Controller controllerType);
    // static public UnityEngine.Vector3 GetLocalControllerAngularVelocity(OVRInput/Controller controllerType)
    // Offset: 0xE6AE6C
    static UnityEngine::Vector3 GetLocalControllerAngularVelocity(GlobalNamespace::OVRInput::Controller controllerType);
    // static public UnityEngine.Vector3 GetLocalControllerAngularAcceleration(OVRInput/Controller controllerType)
    // Offset: 0xE727D0
    static UnityEngine::Vector3 GetLocalControllerAngularAcceleration(GlobalNamespace::OVRInput::Controller controllerType);
    // static public OVRInput/Handedness GetDominantHand()
    // Offset: 0xE72990
    static GlobalNamespace::OVRInput::Handedness GetDominantHand();
    // static public System.Boolean Get(OVRInput/Button virtualMask, OVRInput/Controller controllerMask)
    // Offset: 0xE6D744
    static bool Get(GlobalNamespace::OVRInput::Button virtualMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean Get(OVRInput/RawButton rawMask, OVRInput/Controller controllerMask)
    // Offset: 0xE7208C
    static bool Get(GlobalNamespace::OVRInput::RawButton rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static private System.Boolean GetResolvedButton(OVRInput/Button virtualMask, OVRInput/RawButton rawMask, OVRInput/Controller controllerMask)
    // Offset: 0xE729F0
    static bool GetResolvedButton(GlobalNamespace::OVRInput::Button virtualMask, GlobalNamespace::OVRInput::RawButton rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean GetDown(OVRInput/Button virtualMask, OVRInput/Controller controllerMask)
    // Offset: 0xE72BB0
    static bool GetDown(GlobalNamespace::OVRInput::Button virtualMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean GetDown(OVRInput/RawButton rawMask, OVRInput/Controller controllerMask)
    // Offset: 0xE72DA0
    static bool GetDown(GlobalNamespace::OVRInput::RawButton rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static private System.Boolean GetResolvedButtonDown(OVRInput/Button virtualMask, OVRInput/RawButton rawMask, OVRInput/Controller controllerMask)
    // Offset: 0xE72C28
    static bool GetResolvedButtonDown(GlobalNamespace::OVRInput::Button virtualMask, GlobalNamespace::OVRInput::RawButton rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean GetUp(OVRInput/Button virtualMask, OVRInput/Controller controllerMask)
    // Offset: 0xE72E18
    static bool GetUp(GlobalNamespace::OVRInput::Button virtualMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean GetUp(OVRInput/RawButton rawMask, OVRInput/Controller controllerMask)
    // Offset: 0xE73008
    static bool GetUp(GlobalNamespace::OVRInput::RawButton rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static private System.Boolean GetResolvedButtonUp(OVRInput/Button virtualMask, OVRInput/RawButton rawMask, OVRInput/Controller controllerMask)
    // Offset: 0xE72E90
    static bool GetResolvedButtonUp(GlobalNamespace::OVRInput::Button virtualMask, GlobalNamespace::OVRInput::RawButton rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean Get(OVRInput/Touch virtualMask, OVRInput/Controller controllerMask)
    // Offset: 0xE73080
    static bool Get(GlobalNamespace::OVRInput::Touch virtualMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean Get(OVRInput/RawTouch rawMask, OVRInput/Controller controllerMask)
    // Offset: 0xE72104
    static bool Get(GlobalNamespace::OVRInput::RawTouch rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static private System.Boolean GetResolvedTouch(OVRInput/Touch virtualMask, OVRInput/RawTouch rawMask, OVRInput/Controller controllerMask)
    // Offset: 0xE730F8
    static bool GetResolvedTouch(GlobalNamespace::OVRInput::Touch virtualMask, GlobalNamespace::OVRInput::RawTouch rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean GetDown(OVRInput/Touch virtualMask, OVRInput/Controller controllerMask)
    // Offset: 0xE7326C
    static bool GetDown(GlobalNamespace::OVRInput::Touch virtualMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean GetDown(OVRInput/RawTouch rawMask, OVRInput/Controller controllerMask)
    // Offset: 0xE7345C
    static bool GetDown(GlobalNamespace::OVRInput::RawTouch rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static private System.Boolean GetResolvedTouchDown(OVRInput/Touch virtualMask, OVRInput/RawTouch rawMask, OVRInput/Controller controllerMask)
    // Offset: 0xE732E4
    static bool GetResolvedTouchDown(GlobalNamespace::OVRInput::Touch virtualMask, GlobalNamespace::OVRInput::RawTouch rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean GetUp(OVRInput/Touch virtualMask, OVRInput/Controller controllerMask)
    // Offset: 0xE734D4
    static bool GetUp(GlobalNamespace::OVRInput::Touch virtualMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean GetUp(OVRInput/RawTouch rawMask, OVRInput/Controller controllerMask)
    // Offset: 0xE736C4
    static bool GetUp(GlobalNamespace::OVRInput::RawTouch rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static private System.Boolean GetResolvedTouchUp(OVRInput/Touch virtualMask, OVRInput/RawTouch rawMask, OVRInput/Controller controllerMask)
    // Offset: 0xE7354C
    static bool GetResolvedTouchUp(GlobalNamespace::OVRInput::Touch virtualMask, GlobalNamespace::OVRInput::RawTouch rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean Get(OVRInput/NearTouch virtualMask, OVRInput/Controller controllerMask)
    // Offset: 0xE7373C
    static bool Get(GlobalNamespace::OVRInput::NearTouch virtualMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean Get(OVRInput/RawNearTouch rawMask, OVRInput/Controller controllerMask)
    // Offset: 0xE73910
    static bool Get(GlobalNamespace::OVRInput::RawNearTouch rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static private System.Boolean GetResolvedNearTouch(OVRInput/NearTouch virtualMask, OVRInput/RawNearTouch rawMask, OVRInput/Controller controllerMask)
    // Offset: 0xE737B4
    static bool GetResolvedNearTouch(GlobalNamespace::OVRInput::NearTouch virtualMask, GlobalNamespace::OVRInput::RawNearTouch rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean GetDown(OVRInput/NearTouch virtualMask, OVRInput/Controller controllerMask)
    // Offset: 0xE739A0
    static bool GetDown(GlobalNamespace::OVRInput::NearTouch virtualMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean GetDown(OVRInput/RawNearTouch rawMask, OVRInput/Controller controllerMask)
    // Offset: 0xE73B90
    static bool GetDown(GlobalNamespace::OVRInput::RawNearTouch rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static private System.Boolean GetResolvedNearTouchDown(OVRInput/NearTouch virtualMask, OVRInput/RawNearTouch rawMask, OVRInput/Controller controllerMask)
    // Offset: 0xE73A18
    static bool GetResolvedNearTouchDown(GlobalNamespace::OVRInput::NearTouch virtualMask, GlobalNamespace::OVRInput::RawNearTouch rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean GetUp(OVRInput/NearTouch virtualMask, OVRInput/Controller controllerMask)
    // Offset: 0xE73C08
    static bool GetUp(GlobalNamespace::OVRInput::NearTouch virtualMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean GetUp(OVRInput/RawNearTouch rawMask, OVRInput/Controller controllerMask)
    // Offset: 0xE73DF8
    static bool GetUp(GlobalNamespace::OVRInput::RawNearTouch rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static private System.Boolean GetResolvedNearTouchUp(OVRInput/NearTouch virtualMask, OVRInput/RawNearTouch rawMask, OVRInput/Controller controllerMask)
    // Offset: 0xE73C80
    static bool GetResolvedNearTouchUp(GlobalNamespace::OVRInput::NearTouch virtualMask, GlobalNamespace::OVRInput::RawNearTouch rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Single Get(OVRInput/Axis1D virtualMask, OVRInput/Controller controllerMask)
    // Offset: 0xE6976C
    static float Get(GlobalNamespace::OVRInput::Axis1D virtualMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Single Get(OVRInput/RawAxis1D rawMask, OVRInput/Controller controllerMask)
    // Offset: 0xE742E8
    static float Get(GlobalNamespace::OVRInput::RawAxis1D rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static private System.Single GetResolvedAxis1D(OVRInput/Axis1D virtualMask, OVRInput/RawAxis1D rawMask, OVRInput/Controller controllerMask)
    // Offset: 0xE73E70
    static float GetResolvedAxis1D(GlobalNamespace::OVRInput::Axis1D virtualMask, GlobalNamespace::OVRInput::RawAxis1D rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public UnityEngine.Vector2 Get(OVRInput/Axis2D virtualMask, OVRInput/Controller controllerMask)
    // Offset: 0xE743EC
    static UnityEngine::Vector2 Get(GlobalNamespace::OVRInput::Axis2D virtualMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public UnityEngine.Vector2 Get(OVRInput/RawAxis2D rawMask, OVRInput/Controller controllerMask)
    // Offset: 0xE74830
    static UnityEngine::Vector2 Get(GlobalNamespace::OVRInput::RawAxis2D rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static private UnityEngine.Vector2 GetResolvedAxis2D(OVRInput/Axis2D virtualMask, OVRInput/RawAxis2D rawMask, OVRInput/Controller controllerMask)
    // Offset: 0xE74464
    static UnityEngine::Vector2 GetResolvedAxis2D(GlobalNamespace::OVRInput::Axis2D virtualMask, GlobalNamespace::OVRInput::RawAxis2D rawMask, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public OVRInput/Controller GetConnectedControllers()
    // Offset: 0xE74A50
    static GlobalNamespace::OVRInput::Controller GetConnectedControllers();
    // static public System.Boolean IsControllerConnected(OVRInput/Controller controller)
    // Offset: 0xE74AB8
    static bool IsControllerConnected(GlobalNamespace::OVRInput::Controller controller);
    // static public OVRInput/Controller GetActiveController()
    // Offset: 0xE74B2C
    static GlobalNamespace::OVRInput::Controller GetActiveController();
    // static private System.Void StartVibration(System.Single amplitude, System.Single duration, UnityEngine.XR.XRNode controllerNode)
    // Offset: 0xE74B94
    static void StartVibration(float amplitude, float duration, UnityEngine::XR::XRNode controllerNode);
    // static public System.Void SetOpenVRLocalPose(UnityEngine.Vector3 leftPos, UnityEngine.Vector3 rightPos, UnityEngine.Quaternion leftRot, UnityEngine.Quaternion rightRot)
    // Offset: 0xE74D58
    static void SetOpenVRLocalPose(UnityEngine::Vector3 leftPos, UnityEngine::Vector3 rightPos, UnityEngine::Quaternion leftRot, UnityEngine::Quaternion rightRot);
    // static public System.String GetOpenVRStringProperty(OVR.OpenVR.ETrackedDeviceProperty prop, System.UInt32 deviceId)
    // Offset: 0xE74E80
    static ::Il2CppString* GetOpenVRStringProperty(OVR::OpenVR::ETrackedDeviceProperty prop, uint deviceId);
    // static private System.Void UpdateXRControllerNodeIds()
    // Offset: 0xE71A44
    static void UpdateXRControllerNodeIds();
    // static private System.Void UpdateXRControllerHaptics()
    // Offset: 0xE71E7C
    static void UpdateXRControllerHaptics();
    // static private System.Void InitHapticInfo()
    // Offset: 0xE71310
    static void InitHapticInfo();
    // static private System.Void PlayHapticImpulse(System.Single amplitude, UnityEngine.XR.XRNode deviceNode)
    // Offset: 0xE74FF4
    static void PlayHapticImpulse(float amplitude, UnityEngine::XR::XRNode deviceNode);
    // static private System.Boolean IsValidOpenVRDevice(System.UInt32 deviceId)
    // Offset: 0xE75188
    static bool IsValidOpenVRDevice(uint deviceId);
    // static public System.Void SetControllerVibration(System.Single frequency, System.Single amplitude, OVRInput/Controller controllerMask)
    // Offset: 0xE75194
    static void SetControllerVibration(float frequency, float amplitude, GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Void RecenterController(OVRInput/Controller controllerMask)
    // Offset: 0xE7539C
    static void RecenterController(GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Boolean GetControllerWasRecentered(OVRInput/Controller controllerMask)
    // Offset: 0xE6D59C
    static bool GetControllerWasRecentered(GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Byte GetControllerRecenterCount(OVRInput/Controller controllerMask)
    // Offset: 0xE754CC
    static uint8_t GetControllerRecenterCount(GlobalNamespace::OVRInput::Controller controllerMask);
    // static public System.Byte GetControllerBatteryPercentRemaining(OVRInput/Controller controllerMask)
    // Offset: 0xE75608
    static uint8_t GetControllerBatteryPercentRemaining(GlobalNamespace::OVRInput::Controller controllerMask);
    // static private UnityEngine.Vector2 CalculateAbsMax(UnityEngine.Vector2 a, UnityEngine.Vector2 b)
    // Offset: 0xE749D8
    static UnityEngine::Vector2 CalculateAbsMax(UnityEngine::Vector2 a, UnityEngine::Vector2 b);
    // static private System.Single CalculateAbsMax(System.Single a, System.Single b)
    // Offset: 0xE743C8
    static float CalculateAbsMax(float a, float b);
    // static private UnityEngine.Vector2 CalculateDeadzone(UnityEngine.Vector2 a, System.Single deadzone)
    // Offset: 0xE748C0
    static UnityEngine::Vector2 CalculateDeadzone(UnityEngine::Vector2 a, float deadzone);
    // static private System.Single CalculateDeadzone(System.Single a, System.Single deadzone)
    // Offset: 0xE74378
    static float CalculateDeadzone(float a, float deadzone);
    // static private System.Boolean ShouldResolveController(OVRInput/Controller controllerType, OVRInput/Controller controllerMask)
    // Offset: 0xE72B4C
    static bool ShouldResolveController(GlobalNamespace::OVRInput::Controller controllerType, GlobalNamespace::OVRInput::Controller controllerMask);
  }; // OVRInput
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRInput*, "", "OVRInput");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRInput::Controller, "", "OVRInput/Controller");
#pragma pack(pop)
