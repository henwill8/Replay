// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ILightWithId
  class ILightWithId;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: LightWithIdManager
  class LightWithIdManager : public UnityEngine::MonoBehaviour {
    public:
    // private System.Action didChangeSomeColorsThisFrameEvent
    // Offset: 0x18
    System::Action* didChangeSomeColorsThisFrameEvent;
    // private System.Action`2<System.Int32,UnityEngine.Color> didSetColorForIdEvent
    // Offset: 0x20
    System::Action_2<int, UnityEngine::Color>* didSetColorForIdEvent;
    // private readonly System.Collections.Generic.List`1<ILightWithId>[] _lights
    // Offset: 0x28
    ::Array<System::Collections::Generic::List_1<GlobalNamespace::ILightWithId*>*>* lights;
    // private readonly System.Nullable`1<UnityEngine.Color>[] _colors
    // Offset: 0x30
    ::Array<System::Nullable_1<UnityEngine::Color>>* colors;
    // private readonly System.Collections.Generic.List`1<ILightWithId> _lightsToUnregister
    // Offset: 0x38
    System::Collections::Generic::List_1<GlobalNamespace::ILightWithId*>* lightsToUnregister;
    // private System.Boolean _didChangeSomeColorsThisFrame
    // Offset: 0x40
    bool didChangeSomeColorsThisFrame;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Int32 kMaxLightId
    static constexpr const int kMaxLightId = 20;
    // Get static field: static private System.Int32 kMaxLightId
    static int _get_kMaxLightId();
    // Set static field: static private System.Int32 kMaxLightId
    static void _set_kMaxLightId(int value);
    // public System.Void add_didChangeSomeColorsThisFrameEvent(System.Action value)
    // Offset: 0x187BC9C
    void add_didChangeSomeColorsThisFrameEvent(System::Action* value);
    // public System.Void remove_didChangeSomeColorsThisFrameEvent(System.Action value)
    // Offset: 0x187BD40
    void remove_didChangeSomeColorsThisFrameEvent(System::Action* value);
    // public System.Void add_didSetColorForIdEvent(System.Action`2<System.Int32,UnityEngine.Color> value)
    // Offset: 0x187BDE4
    void add_didSetColorForIdEvent(System::Action_2<int, UnityEngine::Color>* value);
    // public System.Void remove_didSetColorForIdEvent(System.Action`2<System.Int32,UnityEngine.Color> value)
    // Offset: 0x187BE88
    void remove_didSetColorForIdEvent(System::Action_2<int, UnityEngine::Color>* value);
    // public System.Nullable`1<UnityEngine.Color>[] get_colors()
    // Offset: 0x187BF2C
    ::Array<System::Nullable_1<UnityEngine::Color>>* get_colors();
    // protected System.Void LateUpdate()
    // Offset: 0x187BF34
    void LateUpdate();
    // public System.Void RegisterLight(ILightWithId lightWithId)
    // Offset: 0x187C124
    void RegisterLight(GlobalNamespace::ILightWithId* lightWithId);
    // public System.Void UnregisterLight(ILightWithId lightWithId)
    // Offset: 0x187C4A0
    void UnregisterLight(GlobalNamespace::ILightWithId* lightWithId);
    // public System.Void SetColorForId(System.Int32 lightId, UnityEngine.Color color)
    // Offset: 0x187C684
    void SetColorForId(int lightId, UnityEngine::Color color);
    // public UnityEngine.Color GetColorForId(System.Int32 lightId)
    // Offset: 0x187C8E8
    UnityEngine::Color GetColorForId(int lightId);
    // public System.Void .ctor()
    // Offset: 0x187C998
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static LightWithIdManager* New_ctor();
  }; // LightWithIdManager
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LightWithIdManager*, "", "LightWithIdManager");
#pragma pack(pop)
