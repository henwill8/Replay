// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BezierCurve
#include "GlobalNamespace/BezierCurve.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BezierSpline
  class BezierSpline;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: BezierSplineEvaluator
  // [] Offset: FFFFFFFF
  class BezierSplineEvaluator : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::BezierSplineEvaluator::CubicSolveResult
    struct CubicSolveResult;
    // private readonly System.Collections.Generic.List`1<BezierCurve> _segments
    // Size: 0x8
    // Offset: 0x10
    System::Collections::Generic::List_1<GlobalNamespace::BezierCurve>* segments;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::BezierCurve>*) == 0x8);
    // private System.Int32 _currentSegmentIndex
    // Size: 0x4
    // Offset: 0x18
    int currentSegmentIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: BezierSplineEvaluator
    BezierSplineEvaluator(System::Collections::Generic::List_1<GlobalNamespace::BezierCurve>* segments_ = {}, int currentSegmentIndex_ = {}) noexcept : segments{segments_}, currentSegmentIndex{currentSegmentIndex_} {}
    // static field const value: static private System.Single kSlightAboveOne
    static constexpr const float kSlightAboveOne = 1.0005;
    // Get static field: static private System.Single kSlightAboveOne
    static float _get_kSlightAboveOne();
    // Set static field: static private System.Single kSlightAboveOne
    static void _set_kSlightAboveOne(float value);
    // static field const value: static private System.Single kSlightBelowZero
    static constexpr const float kSlightBelowZero = -0.0005;
    // Get static field: static private System.Single kSlightBelowZero
    static float _get_kSlightBelowZero();
    // Set static field: static private System.Single kSlightBelowZero
    static void _set_kSlightBelowZero(float value);
    // public System.Void .ctor(BezierSpline spline)
    // Offset: 0xF5DA90
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BezierSplineEvaluator* New_ctor(GlobalNamespace::BezierSpline* spline) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BezierSplineEvaluator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BezierSplineEvaluator*, creationType>(spline)));
    }
    // public UnityEngine.Vector3 EvaluatePosition(System.Single time)
    // Offset: 0xF551AC
    UnityEngine::Vector3 EvaluatePosition(float time);
    // private UnityEngine.Vector3 Evaluate(System.Single t)
    // Offset: 0xF5EEDC
    UnityEngine::Vector3 Evaluate(float t);
    // private UnityEngine.Vector3 EvaluateFirstDerivation(System.Single t)
    // Offset: 0xF5F118
    UnityEngine::Vector3 EvaluateFirstDerivation(float t);
    // private UnityEngine.Vector3 EvaluateSecondDerivation(System.Single t)
    // Offset: 0xF5F36C
    UnityEngine::Vector3 EvaluateSecondDerivation(float t);
    // public System.Single OffsetSegmentAndGetT(System.Single time)
    // Offset: 0xF5EDC8
    float OffsetSegmentAndGetT(float time);
    // private System.Single GetTForSegment(System.Int32 segmentIndex, System.Single time)
    // Offset: 0xF5F6F4
    float GetTForSegment(int segmentIndex, float time);
    // public System.Void GetTimeValuesForSegment(System.Int32 segmentIndex, out System.Single t0Value, out System.Single t1Value)
    // Offset: 0xF5FD04
    void GetTimeValuesForSegment(int segmentIndex, float& t0Value, float& t1Value);
    // private System.Void OffsetStartIndexToDistance(System.Single time)
    // Offset: 0xF5F5B0
    void OffsetStartIndexToDistance(float time);
    // static private System.Single CubeRoot(System.Single x)
    // Offset: 0xF5FDE0
    static float CubeRoot(float x);
    // static private BezierSplineEvaluator/CubicSolveResult SolveCubic(System.Single a, System.Single b, System.Single c, System.Single d)
    // Offset: 0xF5F864
    static GlobalNamespace::BezierSplineEvaluator::CubicSolveResult SolveCubic(float a, float b, float c, float d);
  }; // BezierSplineEvaluator
  #pragma pack(pop)
  static check_size<sizeof(BezierSplineEvaluator), 24 + sizeof(int)> __GlobalNamespace_BezierSplineEvaluatorSizeCheck;
  static_assert(sizeof(BezierSplineEvaluator) == 0x1C);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BezierSplineEvaluator*, "", "BezierSplineEvaluator");
