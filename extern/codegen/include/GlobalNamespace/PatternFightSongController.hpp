// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SongController
#include "GlobalNamespace/SongController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AudioTimeSyncController
  class AudioTimeSyncController;
  // Forward declaring type: BeatmapObjectCallbackController
  class BeatmapObjectCallbackController;
  // Forward declaring type: BeatmapObjectManager
  class BeatmapObjectManager;
  // Forward declaring type: BeatmapData
  class BeatmapData;
  // Forward declaring type: NoteData
  class NoteData;
  // Forward declaring type: NoteController
  class NoteController;
  // Forward declaring type: NoteCutInfo
  class NoteCutInfo;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: PatternFightSongController
  // [] Offset: FFFFFFFF
  class PatternFightSongController : public GlobalNamespace::SongController {
    public:
    // Nested type: GlobalNamespace::PatternFightSongController::GameplayPhase
    struct GameplayPhase;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: PatternFightSongController/GameplayPhase
    // [] Offset: FFFFFFFF
    struct GameplayPhase/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: GameplayPhase
      constexpr GameplayPhase(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public PatternFightSongController/GameplayPhase Undefined
      static constexpr const int Undefined = -1;
      // Get static field: static public PatternFightSongController/GameplayPhase Undefined
      static GlobalNamespace::PatternFightSongController::GameplayPhase _get_Undefined();
      // Set static field: static public PatternFightSongController/GameplayPhase Undefined
      static void _set_Undefined(GlobalNamespace::PatternFightSongController::GameplayPhase value);
      // static field const value: static public PatternFightSongController/GameplayPhase Start
      static constexpr const int Start = 0;
      // Get static field: static public PatternFightSongController/GameplayPhase Start
      static GlobalNamespace::PatternFightSongController::GameplayPhase _get_Start();
      // Set static field: static public PatternFightSongController/GameplayPhase Start
      static void _set_Start(GlobalNamespace::PatternFightSongController::GameplayPhase value);
      // static field const value: static public PatternFightSongController/GameplayPhase DefineThisPlayerPattern
      static constexpr const int DefineThisPlayerPattern = 1;
      // Get static field: static public PatternFightSongController/GameplayPhase DefineThisPlayerPattern
      static GlobalNamespace::PatternFightSongController::GameplayPhase _get_DefineThisPlayerPattern();
      // Set static field: static public PatternFightSongController/GameplayPhase DefineThisPlayerPattern
      static void _set_DefineThisPlayerPattern(GlobalNamespace::PatternFightSongController::GameplayPhase value);
      // static field const value: static public PatternFightSongController/GameplayPhase ReplayThisPlayerPattern
      static constexpr const int ReplayThisPlayerPattern = 2;
      // Get static field: static public PatternFightSongController/GameplayPhase ReplayThisPlayerPattern
      static GlobalNamespace::PatternFightSongController::GameplayPhase _get_ReplayThisPlayerPattern();
      // Set static field: static public PatternFightSongController/GameplayPhase ReplayThisPlayerPattern
      static void _set_ReplayThisPlayerPattern(GlobalNamespace::PatternFightSongController::GameplayPhase value);
    }; // PatternFightSongController/GameplayPhase
    #pragma pack(pop)
    static check_size<sizeof(PatternFightSongController::GameplayPhase), 0 + sizeof(int)> __GlobalNamespace_PatternFightSongController_GameplayPhaseSizeCheck;
    static_assert(sizeof(PatternFightSongController::GameplayPhase) == 0x4);
    // [InjectAttribute] Offset: 0xD3D538
    // private readonly AudioTimeSyncController _audioTimeSyncController
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::AudioTimeSyncController* audioTimeSyncController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AudioTimeSyncController*) == 0x8);
    // [InjectAttribute] Offset: 0xD3D548
    // private readonly BeatmapObjectCallbackController _beatmapObjectCallbackController
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::BeatmapObjectCallbackController* beatmapObjectCallbackController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectCallbackController*) == 0x8);
    // [InjectAttribute] Offset: 0xD3D558
    // private readonly BeatmapObjectManager _beatmapObjectManager
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::BeatmapObjectManager* beatmapObjectManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectManager*) == 0x8);
    // private BeatmapData _beatmapData
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::BeatmapData* beatmapData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapData*) == 0x8);
    // private PatternFightSongController/GameplayPhase _gameplayPhase
    // Size: 0x4
    // Offset: 0x40
    GlobalNamespace::PatternFightSongController::GameplayPhase gameplayPhase;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PatternFightSongController::GameplayPhase) == 0x4);
    // private System.Int32 _gameplayPhaseNumber
    // Size: 0x4
    // Offset: 0x44
    int gameplayPhaseNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Collections.Generic.HashSet`1<NoteData> _thisPlayerSourcePatternNoteData
    // Size: 0x8
    // Offset: 0x48
    System::Collections::Generic::HashSet_1<GlobalNamespace::NoteData*>* thisPlayerSourcePatternNoteData;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::HashSet_1<GlobalNamespace::NoteData*>*) == 0x8);
    // private readonly System.Collections.Generic.HashSet`1<NoteData> _thisPlayerDefinedPatternNoteData
    // Size: 0x8
    // Offset: 0x50
    System::Collections::Generic::HashSet_1<GlobalNamespace::NoteData*>* thisPlayerDefinedPatternNoteData;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::HashSet_1<GlobalNamespace::NoteData*>*) == 0x8);
    // Creating value type constructor for type: PatternFightSongController
    PatternFightSongController(GlobalNamespace::AudioTimeSyncController* audioTimeSyncController_ = {}, GlobalNamespace::BeatmapObjectCallbackController* beatmapObjectCallbackController_ = {}, GlobalNamespace::BeatmapObjectManager* beatmapObjectManager_ = {}, GlobalNamespace::BeatmapData* beatmapData_ = {}, GlobalNamespace::PatternFightSongController::GameplayPhase gameplayPhase_ = {}, int gameplayPhaseNumber_ = {}, System::Collections::Generic::HashSet_1<GlobalNamespace::NoteData*>* thisPlayerSourcePatternNoteData_ = {}, System::Collections::Generic::HashSet_1<GlobalNamespace::NoteData*>* thisPlayerDefinedPatternNoteData_ = {}) noexcept : audioTimeSyncController{audioTimeSyncController_}, beatmapObjectCallbackController{beatmapObjectCallbackController_}, beatmapObjectManager{beatmapObjectManager_}, beatmapData{beatmapData_}, gameplayPhase{gameplayPhase_}, gameplayPhaseNumber{gameplayPhaseNumber_}, thisPlayerSourcePatternNoteData{thisPlayerSourcePatternNoteData_}, thisPlayerDefinedPatternNoteData{thisPlayerDefinedPatternNoteData_} {}
    // static field const value: static private System.Single kBPM
    static constexpr const float kBPM = 120;
    // Get static field: static private System.Single kBPM
    static float _get_kBPM();
    // Set static field: static private System.Single kBPM
    static void _set_kBPM(float value);
    // static field const value: static private System.Single kPhaseLengthInBeats
    static constexpr const float kPhaseLengthInBeats = 8;
    // Get static field: static private System.Single kPhaseLengthInBeats
    static float _get_kPhaseLengthInBeats();
    // Set static field: static private System.Single kPhaseLengthInBeats
    static void _set_kPhaseLengthInBeats(float value);
    // protected System.Void Start()
    // Offset: 0xF21694
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0xF21824
    void OnDestroy();
    // protected System.Void Update()
    // Offset: 0xF218C4
    void Update();
    // private System.Void HandleNoteWasCut(NoteController noteController, NoteCutInfo noteCutInfo)
    // Offset: 0xF21C40
    void HandleNoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo* noteCutInfo);
    // private System.Void NoteWasMissed(NoteController noteController)
    // Offset: 0xF21E48
    void NoteWasMissed(GlobalNamespace::NoteController* noteController);
    // private System.Void CreatePattern(System.Single time)
    // Offset: 0xF21974
    void CreatePattern(float time);
    // public System.Void StartSong(System.Single startTimeOffset)
    // Offset: 0xF21808
    void StartSong(float startTimeOffset);
    // public override System.Void StopSong()
    // Offset: 0xF21F4C
    // Implemented from: SongController
    // Base method: System.Void SongController::StopSong()
    void StopSong();
    // public override System.Void PauseSong()
    // Offset: 0xF21F68
    // Implemented from: SongController
    // Base method: System.Void SongController::PauseSong()
    void PauseSong();
    // public override System.Void ResumeSong()
    // Offset: 0xF21F84
    // Implemented from: SongController
    // Base method: System.Void SongController::ResumeSong()
    void ResumeSong();
    // public System.Void .ctor()
    // Offset: 0xF21FA0
    // Implemented from: SongController
    // Base method: System.Void SongController::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PatternFightSongController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PatternFightSongController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PatternFightSongController*, creationType>()));
    }
  }; // PatternFightSongController
  #pragma pack(pop)
  static check_size<sizeof(PatternFightSongController), 80 + sizeof(System::Collections::Generic::HashSet_1<GlobalNamespace::NoteData*>*)> __GlobalNamespace_PatternFightSongControllerSizeCheck;
  static_assert(sizeof(PatternFightSongController) == 0x58);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PatternFightSongController*, "", "PatternFightSongController");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PatternFightSongController::GameplayPhase, "", "PatternFightSongController/GameplayPhase");
