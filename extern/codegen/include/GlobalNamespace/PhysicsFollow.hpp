// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Rigidbody2D
  class Rigidbody2D;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: PhysicsFollow
  class PhysicsFollow : public UnityEngine::MonoBehaviour {
    public:
    // public UnityEngine.Transform _targetTransform
    // Offset: 0x18
    UnityEngine::Transform* targetTransform;
    // public UnityEngine.Vector3 _offset
    // Offset: 0x20
    UnityEngine::Vector3 offset;
    // public System.Single _friction
    // Offset: 0x2C
    float friction;
    // public System.Single _elasticity
    // Offset: 0x30
    float elasticity;
    // private UnityEngine.Rigidbody2D _rigidBody2D
    // Offset: 0x38
    UnityEngine::Rigidbody2D* rigidBody2D;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void Start()
    // Offset: 0xCBB32C
    void Start();
    // private System.Void FixedUpdate()
    // Offset: 0xCBB430
    void FixedUpdate();
    // public System.Void .ctor()
    // Offset: 0xCBB614
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static PhysicsFollow* New_ctor();
  }; // PhysicsFollow
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PhysicsFollow*, "", "PhysicsFollow");
#pragma pack(pop)
