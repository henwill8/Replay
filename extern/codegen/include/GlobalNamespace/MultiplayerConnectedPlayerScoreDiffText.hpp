// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
  // Forward declaring type: MultiplayerLeadPlayerProvider
  class MultiplayerLeadPlayerProvider;
}
// Forward declaring namespace: Tweening
namespace Tweening {
  // Forward declaring type: FloatTween
  class FloatTween;
  // Forward declaring type: TweeningManager
  class TweeningManager;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: SpriteRenderer
  class SpriteRenderer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: MultiplayerConnectedPlayerScoreDiffText
  class MultiplayerConnectedPlayerScoreDiffText : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::HorizontalPosition
    struct HorizontalPosition;
    // Nested type: GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State
    struct State;
    // Autogenerated type: MultiplayerConnectedPlayerScoreDiffText/State
    struct State : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: State
      constexpr State(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MultiplayerConnectedPlayerScoreDiffText/State Hidden
      static constexpr const int Hidden = 0;
      // Get static field: static public MultiplayerConnectedPlayerScoreDiffText/State Hidden
      static GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State _get_Hidden();
      // Set static field: static public MultiplayerConnectedPlayerScoreDiffText/State Hidden
      static void _set_Hidden(GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State value);
      // static field const value: static public MultiplayerConnectedPlayerScoreDiffText/State Displayed
      static constexpr const int Displayed = 1;
      // Get static field: static public MultiplayerConnectedPlayerScoreDiffText/State Displayed
      static GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State _get_Displayed();
      // Set static field: static public MultiplayerConnectedPlayerScoreDiffText/State Displayed
      static void _set_Displayed(GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State value);
      // static field const value: static public MultiplayerConnectedPlayerScoreDiffText/State AnimatingDisplay
      static constexpr const int AnimatingDisplay = 2;
      // Get static field: static public MultiplayerConnectedPlayerScoreDiffText/State AnimatingDisplay
      static GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State _get_AnimatingDisplay();
      // Set static field: static public MultiplayerConnectedPlayerScoreDiffText/State AnimatingDisplay
      static void _set_AnimatingDisplay(GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State value);
      // static field const value: static public MultiplayerConnectedPlayerScoreDiffText/State AnimatingHide
      static constexpr const int AnimatingHide = 3;
      // Get static field: static public MultiplayerConnectedPlayerScoreDiffText/State AnimatingHide
      static GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State _get_AnimatingHide();
      // Set static field: static public MultiplayerConnectedPlayerScoreDiffText/State AnimatingHide
      static void _set_AnimatingHide(GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State value);
    }; // MultiplayerConnectedPlayerScoreDiffText/State
    // private UnityEngine.Color _activeTextColor
    // Offset: 0x18
    UnityEngine::Color activeTextColor;
    // private UnityEngine.Color _normalBackgroundColor
    // Offset: 0x28
    UnityEngine::Color normalBackgroundColor;
    // private UnityEngine.Color _leadingBackgroundColor
    // Offset: 0x38
    UnityEngine::Color leadingBackgroundColor;
    // private TMPro.TextMeshPro _onPlatformText
    // Offset: 0x48
    TMPro::TextMeshPro* onPlatformText;
    // private UnityEngine.SpriteRenderer _backgroundSpriteRenderer
    // Offset: 0x50
    UnityEngine::SpriteRenderer* backgroundSpriteRenderer;
    // private readonly Tweening.TweeningManager _tweeningManager
    // Offset: 0x58
    Tweening::TweeningManager* tweeningManager;
    // private readonly IConnectedPlayer _connectedPlayer
    // Offset: 0x60
    GlobalNamespace::IConnectedPlayer* connectedPlayer;
    // private readonly MultiplayerLeadPlayerProvider _leadPlayerProvider
    // Offset: 0x68
    GlobalNamespace::MultiplayerLeadPlayerProvider* leadPlayerProvider;
    // private UnityEngine.Color _currentBackgroundColor
    // Offset: 0x70
    UnityEngine::Color currentBackgroundColor;
    // private MultiplayerConnectedPlayerScoreDiffText/State _state
    // Offset: 0x80
    GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State state;
    // private Tweening.FloatTween _onPlatformTextAlphaTween
    // Offset: 0x88
    Tweening::FloatTween* onPlatformTextAlphaTween;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // private System.Void Start()
    // Offset: 0xFAD05C
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0xFAD230
    void OnDestroy();
    // public System.Void SetHorizontalPositionRelativeToLocalPlayer(MultiplayerConnectedPlayerScoreDiffText/HorizontalPosition relativePosition)
    // Offset: 0xFAD3F0
    void SetHorizontalPositionRelativeToLocalPlayer(GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::HorizontalPosition relativePosition);
    // public System.Void AnimateScoreDiff(System.Int32 scoreDiff)
    // Offset: 0xFAD508
    void AnimateScoreDiff(int scoreDiff);
    // public System.Void AnimateHide()
    // Offset: 0xFAD6C8
    void AnimateHide();
    // private System.Void HandleNewLeaderWasSelected(System.String userId)
    // Offset: 0xFAD7C4
    void HandleNewLeaderWasSelected(::Il2CppString* userId);
    // private System.Void <Start>b__13_0(System.Single val)
    // Offset: 0xFAD954
    void $Start$b__13_0(float val);
    // private System.Void <AnimateScoreDiff>b__16_0()
    // Offset: 0xFAD9D8
    void $AnimateScoreDiff$b__16_0();
    // private System.Void <AnimateHide>b__17_0()
    // Offset: 0xFAD9E4
    void $AnimateHide$b__17_0();
    // public System.Void .ctor()
    // Offset: 0xFAD900
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static MultiplayerConnectedPlayerScoreDiffText* New_ctor();
  }; // MultiplayerConnectedPlayerScoreDiffText
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText*, "", "MultiplayerConnectedPlayerScoreDiffText");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerConnectedPlayerScoreDiffText::State, "", "MultiplayerConnectedPlayerScoreDiffText/State");
#pragma pack(pop)
