// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.Vector3
#include "UnityEngine/Vector3.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: TrailElement
  class TrailElement;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: TrailElementCollection
  // [] Offset: FFFFFFFF
  // [DefaultMemberAttribute] Offset: D305DC
  class TrailElementCollection : public ::Il2CppObject {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xD38CD8
    // private readonly System.Int32 <capacity>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    int capacity;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: capacity and: snapshots
    char __padding0[0x4] = {};
    // private readonly TrailElement[] _snapshots
    // Size: 0x8
    // Offset: 0x18
    ::Array<GlobalNamespace::TrailElement*>* snapshots;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::TrailElement*>*) == 0x8);
    // private System.Int32 _headIndex
    // Size: 0x4
    // Offset: 0x20
    int headIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: TrailElementCollection
    TrailElementCollection(int capacity_ = {}, ::Array<GlobalNamespace::TrailElement*>* snapshots_ = {}, int headIndex_ = {}) noexcept : capacity{capacity_}, snapshots{snapshots_}, headIndex{headIndex_} {}
    // public System.Int32 get_capacity()
    // Offset: 0xF47310
    int get_capacity();
    // public TrailElement get_head()
    // Offset: 0xF47318
    GlobalNamespace::TrailElement* get_head();
    // public TrailElement get_Item(System.Int32 index)
    // Offset: 0xF47358
    GlobalNamespace::TrailElement* get_Item(int index);
    // public System.Void .ctor(System.Int32 capacity, UnityEngine.Vector3 defaultStartPosition, UnityEngine.Vector3 defaultEndPosition, System.Single time)
    // Offset: 0xF473BC
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TrailElementCollection* New_ctor(int capacity, UnityEngine::Vector3 defaultStartPosition, UnityEngine::Vector3 defaultEndPosition, float time) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TrailElementCollection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TrailElementCollection*, creationType>(capacity, defaultStartPosition, defaultEndPosition, time)));
    }
    // public System.Void InitSnapshots(UnityEngine.Vector3 defaultStartPosition, UnityEngine.Vector3 defaultEndPosition, System.Single time)
    // Offset: 0xF4755C
    void InitSnapshots(UnityEngine::Vector3 defaultStartPosition, UnityEngine::Vector3 defaultEndPosition, float time);
    // public System.Void MoveTailToHead()
    // Offset: 0xF47624
    void MoveTailToHead();
    // public System.Void UpdateDistances()
    // Offset: 0xF47644
    void UpdateDistances();
    // public UnityEngine.Vector3 InterpolateByLen(System.Single tl)
    // Offset: 0xF477A4
    UnityEngine::Vector3 InterpolateByLen(float tl);
    // public UnityEngine.Vector3 InterpolateNormalByLen(System.Single tl)
    // Offset: 0xF47ABC
    UnityEngine::Vector3 InterpolateNormalByLen(float tl);
    // public System.Single InterpolateTimeByLen(System.Single tl)
    // Offset: 0xF47C04
    float InterpolateTimeByLen(float tl);
    // private System.Int32 LenToSegment(System.Single t, out System.Single localF)
    // Offset: 0xF478EC
    int LenToSegment(float t, float& localF);
    // private TrailElement GetElementWithinBoundary(System.Int32 index)
    // Offset: 0xF47A30
    GlobalNamespace::TrailElement* GetElementWithinBoundary(int index);
  }; // TrailElementCollection
  #pragma pack(pop)
  static check_size<sizeof(TrailElementCollection), 32 + sizeof(int)> __GlobalNamespace_TrailElementCollectionSizeCheck;
  static_assert(sizeof(TrailElementCollection) == 0x24);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::TrailElementCollection*, "", "TrailElementCollection");
