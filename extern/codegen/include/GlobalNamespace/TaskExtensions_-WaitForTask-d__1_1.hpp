// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TaskExtensions
#include "GlobalNamespace/TaskExtensions.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.Runtime.CompilerServices.IAsyncStateMachine
#include "System/Runtime/CompilerServices/IAsyncStateMachine.hpp"
// Including type: System.Runtime.CompilerServices.AsyncVoidMethodBuilder
#include "System/Runtime/CompilerServices/AsyncVoidMethodBuilder.hpp"
// Including type: System.Runtime.CompilerServices.TaskAwaiter`1
#include "System/Runtime/CompilerServices/TaskAwaiter_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: TaskCompletionSource`1<TResult>
  template<typename TResult>
  class TaskCompletionSource_1;
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: TaskExtensions/<WaitForTask>d__1`1
  // [] Offset: FFFFFFFF
  // [CompilerGeneratedAttribute] Offset: D1B77C
  template<typename T>
  struct TaskExtensions::$WaitForTask$d__1_1/*, public System::ValueType, public System::Runtime::CompilerServices::IAsyncStateMachine*/ {
    public:
    // public System.Int32 <>1__state
    // Size: 0x4
    // Offset: 0x0
    int $$1__state;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // public System.Runtime.CompilerServices.AsyncVoidMethodBuilder <>t__builder
    // Size: 0x20
    // Offset: 0x0
    System::Runtime::CompilerServices::AsyncVoidMethodBuilder $$t__builder;
    // Field size check
    static_assert(sizeof(System::Runtime::CompilerServices::AsyncVoidMethodBuilder) == 0x20);
    // public System.Threading.Tasks.TaskCompletionSource`1<T> tcs
    // Size: 0x8
    // Offset: 0x0
    System::Threading::Tasks::TaskCompletionSource_1<T>* tcs;
    // Field size check
    static_assert(sizeof(System::Threading::Tasks::TaskCompletionSource_1<T>*) == 0x8);
    // public System.Threading.Tasks.Task`1<T> task
    // Size: 0x8
    // Offset: 0x0
    System::Threading::Tasks::Task_1<T>* task;
    // Field size check
    static_assert(sizeof(System::Threading::Tasks::Task_1<T>*) == 0x8);
    // private System.Threading.Tasks.TaskCompletionSource`1<T> <>7__wrap1
    // Size: 0x8
    // Offset: 0x0
    System::Threading::Tasks::TaskCompletionSource_1<T>* $$7__wrap1;
    // Field size check
    static_assert(sizeof(System::Threading::Tasks::TaskCompletionSource_1<T>*) == 0x8);
    // private System.Runtime.CompilerServices.TaskAwaiter`1<T> <>u__1
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    System::Runtime::CompilerServices::TaskAwaiter_1<T> $$u__1;
    // Creating value type constructor for type: $WaitForTask$d__1_1
    constexpr $WaitForTask$d__1_1(int $$1__state_ = {}, System::Runtime::CompilerServices::AsyncVoidMethodBuilder $$t__builder_ = {}, System::Threading::Tasks::TaskCompletionSource_1<T>* tcs_ = {}, System::Threading::Tasks::Task_1<T>* task_ = {}, System::Threading::Tasks::TaskCompletionSource_1<T>* $$7__wrap1_ = {}, System::Runtime::CompilerServices::TaskAwaiter_1<T> $$u__1_ = {}) noexcept : $$1__state{$$1__state_}, $$t__builder{$$t__builder_}, tcs{tcs_}, task{task_}, $$7__wrap1{$$7__wrap1_}, $$u__1{$$u__1_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator System::Runtime::CompilerServices::IAsyncStateMachine
    operator System::Runtime::CompilerServices::IAsyncStateMachine() noexcept {
      return *reinterpret_cast<System::Runtime::CompilerServices::IAsyncStateMachine*>(this);
    }
    // private System.Void MoveNext()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Runtime.CompilerServices.IAsyncStateMachine
    // Base method: System.Void IAsyncStateMachine::MoveNext()
    void MoveNext() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TaskExtensions::$WaitForTask$d__1_1::MoveNext");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
    }
    // private System.Void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine)
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Runtime.CompilerServices.IAsyncStateMachine
    // Base method: System.Void IAsyncStateMachine::SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine)
    void SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TaskExtensions::$WaitForTask$d__1_1::SetStateMachine");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(stateMachine)));
      ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
    }
  }; // TaskExtensions/<WaitForTask>d__1`1
  // Could not write size check! Type: TaskExtensions/<WaitForTask>d__1`1 is generic, or has no fields that are valid for size checks!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(GlobalNamespace::TaskExtensions::$WaitForTask$d__1_1, "", "TaskExtensions/<WaitForTask>d__1`1");
