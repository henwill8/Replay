// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Single
#include "System/Single.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Vector3
  struct Vector3;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ColorType
  struct ColorType;
  // Forward declaring type: NoteCutDirection
  struct NoteCutDirection;
  // Forward declaring type: SaberType
  struct SaberType;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: NoteBasicCutInfo
  // [] Offset: FFFFFFFF
  class NoteBasicCutInfo : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: NoteBasicCutInfo
    NoteBasicCutInfo() noexcept {}
    // static field const value: static private System.Single kCutAngleTolerance
    static constexpr const float kCutAngleTolerance = 60;
    // Get static field: static private System.Single kCutAngleTolerance
    static float _get_kCutAngleTolerance();
    // Set static field: static private System.Single kCutAngleTolerance
    static void _set_kCutAngleTolerance(float value);
    // static field const value: static private System.Single kMinBladeSpeedForCut
    static constexpr const float kMinBladeSpeedForCut = 2;
    // Get static field: static private System.Single kMinBladeSpeedForCut
    static float _get_kMinBladeSpeedForCut();
    // Set static field: static private System.Single kMinBladeSpeedForCut
    static void _set_kMinBladeSpeedForCut(float value);
    // static public System.Void GetBasicCutInfo(UnityEngine.Transform noteTransform, ColorType colorType, NoteCutDirection cutDirection, SaberType saberType, System.Single saberBladeSpeed, UnityEngine.Vector3 cutDirVec, out System.Boolean directionOK, out System.Boolean speedOK, out System.Boolean saberTypeOK, out System.Single cutDirDeviation, out System.Single cutDirAngle)
    // Offset: 0x226D5F8
    static void GetBasicCutInfo(UnityEngine::Transform* noteTransform, GlobalNamespace::ColorType colorType, GlobalNamespace::NoteCutDirection cutDirection, GlobalNamespace::SaberType saberType, float saberBladeSpeed, UnityEngine::Vector3 cutDirVec, bool& directionOK, bool& speedOK, bool& saberTypeOK, float& cutDirDeviation, float& cutDirAngle);
    // public System.Void .ctor()
    // Offset: 0x226D83C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoteBasicCutInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NoteBasicCutInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoteBasicCutInfo*, creationType>()));
    }
  }; // NoteBasicCutInfo
  #pragma pack(pop)
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::NoteBasicCutInfo*, "", "NoteBasicCutInfo");
