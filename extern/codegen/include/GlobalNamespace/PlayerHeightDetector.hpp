// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: BeatmapObjectCallbackController
#include "GlobalNamespace/BeatmapObjectCallbackController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PlayerTransforms
  class PlayerTransforms;
  // Forward declaring type: BeatmapObjectData
  class BeatmapObjectData;
  // Forward declaring type: AudioTimeSyncController
  class AudioTimeSyncController;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: PlayerHeightDetector
  // [] Offset: FFFFFFFF
  class PlayerHeightDetector : public UnityEngine::MonoBehaviour {
    public:
    // [InjectAttribute] Offset: 0xD3CD68
    // private readonly PlayerTransforms _playerTransforms
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::PlayerTransforms* playerTransforms;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerTransforms*) == 0x8);
    // [InjectAttribute] Offset: 0xD3CD78
    // private readonly BeatmapObjectCallbackController _beatmapObjectCallbackController
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::BeatmapObjectCallbackController* beatmapObjectCallbackController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectCallbackController*) == 0x8);
    // [InjectAttribute] Offset: 0xD3CD88
    // private readonly AudioTimeSyncController _audioTimeSyncController
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::AudioTimeSyncController* audioTimeSyncController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AudioTimeSyncController*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD3CD98
    // private System.Action`1<System.Single> playerHeightDidChangeEvent
    // Size: 0x8
    // Offset: 0x30
    System::Action_1<float>* playerHeightDidChangeEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<float>*) == 0x8);
    // private BeatmapObjectCallbackController/BeatmapObjectCallbackData _beatmapObjectCallbackData
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::BeatmapObjectCallbackController::BeatmapObjectCallbackData* beatmapObjectCallbackData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectCallbackController::BeatmapObjectCallbackData*) == 0x8);
    // private System.Single _noTopObstaclesStartTime
    // Size: 0x4
    // Offset: 0x40
    float noTopObstaclesStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _computedPlayerHeight
    // Size: 0x4
    // Offset: 0x44
    float computedPlayerHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _changeWeight
    // Size: 0x4
    // Offset: 0x48
    float changeWeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _lastReportedHeight
    // Size: 0x4
    // Offset: 0x4C
    float lastReportedHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: PlayerHeightDetector
    PlayerHeightDetector(GlobalNamespace::PlayerTransforms* playerTransforms_ = {}, GlobalNamespace::BeatmapObjectCallbackController* beatmapObjectCallbackController_ = {}, GlobalNamespace::AudioTimeSyncController* audioTimeSyncController_ = {}, System::Action_1<float>* playerHeightDidChangeEvent_ = {}, GlobalNamespace::BeatmapObjectCallbackController::BeatmapObjectCallbackData* beatmapObjectCallbackData_ = {}, float noTopObstaclesStartTime_ = {}, float computedPlayerHeight_ = {}, float changeWeight_ = {}, float lastReportedHeight_ = {}) noexcept : playerTransforms{playerTransforms_}, beatmapObjectCallbackController{beatmapObjectCallbackController_}, audioTimeSyncController{audioTimeSyncController_}, playerHeightDidChangeEvent{playerHeightDidChangeEvent_}, beatmapObjectCallbackData{beatmapObjectCallbackData_}, noTopObstaclesStartTime{noTopObstaclesStartTime_}, computedPlayerHeight{computedPlayerHeight_}, changeWeight{changeWeight_}, lastReportedHeight{lastReportedHeight_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void add_playerHeightDidChangeEvent(System.Action`1<System.Single> value)
    // Offset: 0xFB9CD4
    void add_playerHeightDidChangeEvent(System::Action_1<float>* value);
    // public System.Void remove_playerHeightDidChangeEvent(System.Action`1<System.Single> value)
    // Offset: 0xFB9D78
    void remove_playerHeightDidChangeEvent(System::Action_1<float>* value);
    // public System.Single get_playerHeight()
    // Offset: 0xFB9E1C
    float get_playerHeight();
    // protected System.Void Start()
    // Offset: 0xFB9E24
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0xFB9F44
    void OnDestroy();
    // protected System.Void LateUpdate()
    // Offset: 0xFB9FD8
    void LateUpdate();
    // private System.Void BeatmapObjectSpawnCallback(BeatmapObjectData beatmapObjectData)
    // Offset: 0xFBA154
    void BeatmapObjectSpawnCallback(GlobalNamespace::BeatmapObjectData* beatmapObjectData);
    // public System.Void .ctor()
    // Offset: 0xFBA260
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayerHeightDetector* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerHeightDetector::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayerHeightDetector*, creationType>()));
    }
  }; // PlayerHeightDetector
  #pragma pack(pop)
  static check_size<sizeof(PlayerHeightDetector), 76 + sizeof(float)> __GlobalNamespace_PlayerHeightDetectorSizeCheck;
  static_assert(sizeof(PlayerHeightDetector) == 0x50);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PlayerHeightDetector*, "", "PlayerHeightDetector");
