// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.ParticleSystem/EmissionModule
#include "UnityEngine/ParticleSystem_EmissionModule.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: ParticleSystem because it is already included!
  // Forward declaring type: Color
  struct Color;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: ObstacleSaberSparkleEffect
  // [] Offset: FFFFFFFF
  class ObstacleSaberSparkleEffect : public UnityEngine::MonoBehaviour {
    public:
    // private UnityEngine.ParticleSystem _sparkleParticleSystem
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::ParticleSystem* sparkleParticleSystem;
    // Field size check
    static_assert(sizeof(UnityEngine::ParticleSystem*) == 0x8);
    // private UnityEngine.ParticleSystem _burnParticleSystem
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::ParticleSystem* burnParticleSystem;
    // Field size check
    static_assert(sizeof(UnityEngine::ParticleSystem*) == 0x8);
    // private UnityEngine.ParticleSystem/EmissionModule _sparkleParticleSystemEmissionModule
    // Size: 0x8
    // Offset: 0x28
    UnityEngine::ParticleSystem::EmissionModule sparkleParticleSystemEmissionModule;
    // Field size check
    static_assert(sizeof(UnityEngine::ParticleSystem::EmissionModule) == 0x8);
    // private UnityEngine.ParticleSystem/EmissionModule _burnParticleSystemEmissionModule
    // Size: 0x8
    // Offset: 0x30
    UnityEngine::ParticleSystem::EmissionModule burnParticleSystemEmissionModule;
    // Field size check
    static_assert(sizeof(UnityEngine::ParticleSystem::EmissionModule) == 0x8);
    // Creating value type constructor for type: ObstacleSaberSparkleEffect
    ObstacleSaberSparkleEffect(UnityEngine::ParticleSystem* sparkleParticleSystem_ = {}, UnityEngine::ParticleSystem* burnParticleSystem_ = {}, UnityEngine::ParticleSystem::EmissionModule sparkleParticleSystemEmissionModule_ = {}, UnityEngine::ParticleSystem::EmissionModule burnParticleSystemEmissionModule_ = {}) noexcept : sparkleParticleSystem{sparkleParticleSystem_}, burnParticleSystem{burnParticleSystem_}, sparkleParticleSystemEmissionModule{sparkleParticleSystemEmissionModule_}, burnParticleSystemEmissionModule{burnParticleSystemEmissionModule_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void set_color(UnityEngine.Color value)
    // Offset: 0x10F5D80
    void set_color(UnityEngine::Color value);
    // protected System.Void Awake()
    // Offset: 0x10F5E8C
    void Awake();
    // public System.Void SetPositionAndRotation(UnityEngine.Vector3 pos, UnityEngine.Quaternion rot)
    // Offset: 0x10F5F0C
    void SetPositionAndRotation(UnityEngine::Vector3 pos, UnityEngine::Quaternion rot);
    // public System.Void StartEmission()
    // Offset: 0x10F5F88
    void StartEmission();
    // public System.Void StopEmission()
    // Offset: 0x10F5FE0
    void StopEmission();
    // public System.Void .ctor()
    // Offset: 0x10F604C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ObstacleSaberSparkleEffect* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ObstacleSaberSparkleEffect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ObstacleSaberSparkleEffect*, creationType>()));
    }
  }; // ObstacleSaberSparkleEffect
  #pragma pack(pop)
  static check_size<sizeof(ObstacleSaberSparkleEffect), 48 + sizeof(UnityEngine::ParticleSystem::EmissionModule)> __GlobalNamespace_ObstacleSaberSparkleEffectSizeCheck;
  static_assert(sizeof(ObstacleSaberSparkleEffect) == 0x38);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::ObstacleSaberSparkleEffect*, "", "ObstacleSaberSparkleEffect");
