// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PersistentScriptableObject
#include "GlobalNamespace/PersistentScriptableObject.hpp"
// Including type: IValue`1
#include "GlobalNamespace/IValue_1.hpp"
// Including type: IObservableChange
#include "GlobalNamespace/IObservableChange.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: ObservableVariableSO`1
  template<typename T>
  class ObservableVariableSO_1 : public GlobalNamespace::PersistentScriptableObject/*, public GlobalNamespace::IValue_1<T>, public GlobalNamespace::IObservableChange*/ {
    public:
    // private System.Action didChangeEvent
    // Offset: 0x0
    System::Action* didChangeEvent;
    // private T _value
    // Offset: 0x0
    T value;
    // Creating interface conversion operator: operator GlobalNamespace::IValue_1<T>
    operator GlobalNamespace::IValue_1<T>() noexcept {
      return *reinterpret_cast<GlobalNamespace::IValue_1<T>*>(this);
    }
    // Creating interface conversion operator: operator GlobalNamespace::IObservableChange
    operator GlobalNamespace::IObservableChange() noexcept {
      return *reinterpret_cast<GlobalNamespace::IObservableChange*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void add_didChangeEvent(System.Action value)
    // Offset: 0xFFFFFFFF
    // Implemented from: IObservableChange
    // Base method: System.Void IObservableChange::add_didChangeEvent(System.Action value)
    void add_didChangeEvent(System::Action* value) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "add_didChangeEvent", value));
    }
    // public System.Void remove_didChangeEvent(System.Action value)
    // Offset: 0xFFFFFFFF
    // Implemented from: IObservableChange
    // Base method: System.Void IObservableChange::remove_didChangeEvent(System.Action value)
    void remove_didChangeEvent(System::Action* value) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "remove_didChangeEvent", value));
    }
    // public System.Void set_value(T value)
    // Offset: 0xFFFFFFFF
    // Implemented from: IValue`1
    // Base method: System.Void IValue_1::set_value(T value)
    void set_value(T value) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "set_value", value));
    }
    // public T get_value()
    // Offset: 0xFFFFFFFF
    // Implemented from: IValue`1
    // Base method: T IValue_1::get_value()
    T get_value() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<T>(this, "get_value"));
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFF
    // Implemented from: PersistentScriptableObject
    // Base method: System.Void PersistentScriptableObject::.ctor()
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static ObservableVariableSO_1<T>* New_ctor() {
      return THROW_UNLESS(il2cpp_utils::New<ObservableVariableSO_1<T>*>());
    }
  }; // ObservableVariableSO`1
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(GlobalNamespace::ObservableVariableSO_1, "", "ObservableVariableSO`1");
#pragma pack(pop)
