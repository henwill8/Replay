// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: HMUI.TableView/IDataSource
#include "HMUI/TableView_IDataSource.hpp"
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HMUI
namespace HMUI {
  // Skipping declaration: TableView because it is already included!
  // Forward declaring type: TableCell
  class TableCell;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GameServerPlayerTableCell
  class GameServerPlayerTableCell;
  // Forward declaring type: AdditionalContentModel
  class AdditionalContentModel;
  // Forward declaring type: BeatmapCharacteristicSO
  class BeatmapCharacteristicSO;
  // Forward declaring type: GameplayModifiers
  class GameplayModifiers;
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
  // Forward declaring type: ILobbyPlayersDataModel
  class ILobbyPlayersDataModel;
  // Forward declaring type: ILobbyPlayerDataModel
  class ILobbyPlayerDataModel;
}
// Forward declaring namespace: Zenject
namespace Zenject {
  // Forward declaring type: DiContainer
  class DiContainer;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  class Action_3;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: GameServerPlayersTableView
  // [] Offset: FFFFFFFF
  class GameServerPlayersTableView : public UnityEngine::MonoBehaviour/*, public HMUI::TableView::IDataSource*/ {
    public:
    // private HMUI.TableView _tableView
    // Size: 0x8
    // Offset: 0x18
    HMUI::TableView* tableView;
    // Field size check
    static_assert(sizeof(HMUI::TableView*) == 0x8);
    // private GameServerPlayerTableCell _gameServerPlayerCellPrefab
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::GameServerPlayerTableCell* gameServerPlayerCellPrefab;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameServerPlayerTableCell*) == 0x8);
    // [InjectAttribute] Offset: 0xD43E68
    // private readonly Zenject.DiContainer _container
    // Size: 0x8
    // Offset: 0x28
    Zenject::DiContainer* container;
    // Field size check
    static_assert(sizeof(Zenject::DiContainer*) == 0x8);
    // [InjectAttribute] Offset: 0xD43E78
    // private readonly AdditionalContentModel _additionalContentModel
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::AdditionalContentModel* additionalContentModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AdditionalContentModel*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD43E88
    // private System.Action`3<System.String,BeatmapCharacteristicSO,BeatmapDifficulty> selectSuggestedLevelEvent
    // Size: 0x8
    // Offset: 0x38
    System::Action_3<::Il2CppString*, GlobalNamespace::BeatmapCharacteristicSO*, GlobalNamespace::BeatmapDifficulty>* selectSuggestedLevelEvent;
    // Field size check
    static_assert(sizeof(System::Action_3<::Il2CppString*, GlobalNamespace::BeatmapCharacteristicSO*, GlobalNamespace::BeatmapDifficulty>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD43E98
    // private System.Action`1<GameplayModifiers> selectSuggestedGameplayModifiersEvent
    // Size: 0x8
    // Offset: 0x40
    System::Action_1<GlobalNamespace::GameplayModifiers*>* selectSuggestedGameplayModifiersEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::GameplayModifiers*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD43EA8
    // private System.Action`1<System.String> kickPlayerEvent
    // Size: 0x8
    // Offset: 0x48
    System::Action_1<::Il2CppString*>* kickPlayerEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<::Il2CppString*>*) == 0x8);
    // private System.Boolean _initialized
    // Size: 0x1
    // Offset: 0x50
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isHost
    // Size: 0x1
    // Offset: 0x51
    bool isHost;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isHost and: selectedPlayer
    char __padding8[0x6] = {};
    // private IConnectedPlayer _selectedPlayer
    // Size: 0x8
    // Offset: 0x58
    GlobalNamespace::IConnectedPlayer* selectedPlayer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IConnectedPlayer*) == 0x8);
    // private System.Collections.Generic.List`1<IConnectedPlayer> _sortedConnectedPlayers
    // Size: 0x8
    // Offset: 0x60
    System::Collections::Generic::List_1<GlobalNamespace::IConnectedPlayer*>* sortedConnectedPlayers;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::IConnectedPlayer*>*) == 0x8);
    // private ILobbyPlayersDataModel _lobbyPlayersDataModel
    // Size: 0x8
    // Offset: 0x68
    GlobalNamespace::ILobbyPlayersDataModel* lobbyPlayersDataModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ILobbyPlayersDataModel*) == 0x8);
    // Creating value type constructor for type: GameServerPlayersTableView
    GameServerPlayersTableView(HMUI::TableView* tableView_ = {}, GlobalNamespace::GameServerPlayerTableCell* gameServerPlayerCellPrefab_ = {}, Zenject::DiContainer* container_ = {}, GlobalNamespace::AdditionalContentModel* additionalContentModel_ = {}, System::Action_3<::Il2CppString*, GlobalNamespace::BeatmapCharacteristicSO*, GlobalNamespace::BeatmapDifficulty>* selectSuggestedLevelEvent_ = {}, System::Action_1<GlobalNamespace::GameplayModifiers*>* selectSuggestedGameplayModifiersEvent_ = {}, System::Action_1<::Il2CppString*>* kickPlayerEvent_ = {}, bool initialized_ = {}, bool isHost_ = {}, GlobalNamespace::IConnectedPlayer* selectedPlayer_ = {}, System::Collections::Generic::List_1<GlobalNamespace::IConnectedPlayer*>* sortedConnectedPlayers_ = {}, GlobalNamespace::ILobbyPlayersDataModel* lobbyPlayersDataModel_ = {}) noexcept : tableView{tableView_}, gameServerPlayerCellPrefab{gameServerPlayerCellPrefab_}, container{container_}, additionalContentModel{additionalContentModel_}, selectSuggestedLevelEvent{selectSuggestedLevelEvent_}, selectSuggestedGameplayModifiersEvent{selectSuggestedGameplayModifiersEvent_}, kickPlayerEvent{kickPlayerEvent_}, initialized{initialized_}, isHost{isHost_}, selectedPlayer{selectedPlayer_}, sortedConnectedPlayers{sortedConnectedPlayers_}, lobbyPlayersDataModel{lobbyPlayersDataModel_} {}
    // Creating interface conversion operator: operator HMUI::TableView::IDataSource
    operator HMUI::TableView::IDataSource() noexcept {
      return *reinterpret_cast<HMUI::TableView::IDataSource*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.String kCellId
    static constexpr const char* kCellId = "Cell";
    // Get static field: static private System.String kCellId
    static ::Il2CppString* _get_kCellId();
    // Set static field: static private System.String kCellId
    static void _set_kCellId(::Il2CppString* value);
    // public System.Void add_selectSuggestedLevelEvent(System.Action`3<System.String,BeatmapCharacteristicSO,BeatmapDifficulty> value)
    // Offset: 0xF38394
    void add_selectSuggestedLevelEvent(System::Action_3<::Il2CppString*, GlobalNamespace::BeatmapCharacteristicSO*, GlobalNamespace::BeatmapDifficulty>* value);
    // public System.Void remove_selectSuggestedLevelEvent(System.Action`3<System.String,BeatmapCharacteristicSO,BeatmapDifficulty> value)
    // Offset: 0xF38438
    void remove_selectSuggestedLevelEvent(System::Action_3<::Il2CppString*, GlobalNamespace::BeatmapCharacteristicSO*, GlobalNamespace::BeatmapDifficulty>* value);
    // public System.Void add_selectSuggestedGameplayModifiersEvent(System.Action`1<GameplayModifiers> value)
    // Offset: 0xF384DC
    void add_selectSuggestedGameplayModifiersEvent(System::Action_1<GlobalNamespace::GameplayModifiers*>* value);
    // public System.Void remove_selectSuggestedGameplayModifiersEvent(System.Action`1<GameplayModifiers> value)
    // Offset: 0xF38580
    void remove_selectSuggestedGameplayModifiersEvent(System::Action_1<GlobalNamespace::GameplayModifiers*>* value);
    // public System.Void add_kickPlayerEvent(System.Action`1<System.String> value)
    // Offset: 0xF38624
    void add_kickPlayerEvent(System::Action_1<::Il2CppString*>* value);
    // public System.Void remove_kickPlayerEvent(System.Action`1<System.String> value)
    // Offset: 0xF386C8
    void remove_kickPlayerEvent(System::Action_1<::Il2CppString*>* value);
    // private System.Boolean TryGetLobbyPlayerData(System.Int32 idx, out IConnectedPlayer player, out ILobbyPlayerDataModel playerDataModel)
    // Offset: 0xF38C38
    bool TryGetLobbyPlayerData(int idx, GlobalNamespace::IConnectedPlayer*& player, GlobalNamespace::ILobbyPlayerDataModel*& playerDataModel);
    // private System.Void HandleCellUseBeatmap(System.Int32 idx)
    // Offset: 0xF38DD8
    void HandleCellUseBeatmap(int idx);
    // private System.Void HandleCellUseModifiers(System.Int32 idx)
    // Offset: 0xF39184
    void HandleCellUseModifiers(int idx);
    // private System.Void HandleCellKickPlayer(System.Int32 idx)
    // Offset: 0xF39314
    void HandleCellKickPlayer(int idx);
    // public System.Void SetData(System.Collections.Generic.List`1<IConnectedPlayer> sortedPlayers, ILobbyPlayersDataModel lobbyPlayersDataModel, System.Boolean isHost, System.Boolean clearSelection)
    // Offset: 0xF39428
    void SetData(System::Collections::Generic::List_1<GlobalNamespace::IConnectedPlayer*>* sortedPlayers, GlobalNamespace::ILobbyPlayersDataModel* lobbyPlayersDataModel, bool isHost, bool clearSelection);
    // private System.Void Init()
    // Offset: 0xF394B0
    void Init();
    // public System.Single CellSize()
    // Offset: 0xF3876C
    // Implemented from: HMUI.TableView/IDataSource
    // Base method: System.Single IDataSource::CellSize()
    float CellSize();
    // public System.Int32 NumberOfCells()
    // Offset: 0xF38778
    // Implemented from: HMUI.TableView/IDataSource
    // Base method: System.Int32 IDataSource::NumberOfCells()
    int NumberOfCells();
    // public HMUI.TableCell CellForIdx(HMUI.TableView tableView, System.Int32 idx)
    // Offset: 0xF387C8
    // Implemented from: HMUI.TableView/IDataSource
    // Base method: HMUI.TableCell IDataSource::CellForIdx(HMUI.TableView tableView, System.Int32 idx)
    HMUI::TableCell* CellForIdx(HMUI::TableView* tableView, int idx);
    // public System.Void .ctor()
    // Offset: 0xF394E8
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GameServerPlayersTableView* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerPlayersTableView::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GameServerPlayersTableView*, creationType>()));
    }
  }; // GameServerPlayersTableView
  #pragma pack(pop)
  static check_size<sizeof(GameServerPlayersTableView), 104 + sizeof(GlobalNamespace::ILobbyPlayersDataModel*)> __GlobalNamespace_GameServerPlayersTableViewSizeCheck;
  static_assert(sizeof(GameServerPlayersTableView) == 0x70);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GameServerPlayersTableView*, "", "GameServerPlayersTableView");
