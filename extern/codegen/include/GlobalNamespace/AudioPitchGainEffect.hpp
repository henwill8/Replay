// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: Coroutine
  class Coroutine;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: AudioPitchGainEffect
  // [] Offset: FFFFFFFF
  class AudioPitchGainEffect : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::AudioPitchGainEffect::$StartEffectCoroutine$d__8
    class $StartEffectCoroutine$d__8;
    // private UnityEngine.AudioSource _audioSource
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::AudioSource* audioSource;
    // Field size check
    static_assert(sizeof(UnityEngine::AudioSource*) == 0x8);
    // private System.Single _duration
    // Size: 0x4
    // Offset: 0x20
    float duration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: duration and: pitchCurve
    char __padding1[0x4] = {};
    // private UnityEngine.AnimationCurve _pitchCurve
    // Size: 0x8
    // Offset: 0x28
    UnityEngine::AnimationCurve* pitchCurve;
    // Field size check
    static_assert(sizeof(UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.AnimationCurve _gainCurve
    // Size: 0x8
    // Offset: 0x30
    UnityEngine::AnimationCurve* gainCurve;
    // Field size check
    static_assert(sizeof(UnityEngine::AnimationCurve*) == 0x8);
    // private UnityEngine.Coroutine _currentCoroutine
    // Size: 0x8
    // Offset: 0x38
    UnityEngine::Coroutine* currentCoroutine;
    // Field size check
    static_assert(sizeof(UnityEngine::Coroutine*) == 0x8);
    // private System.Single _startPitch
    // Size: 0x4
    // Offset: 0x40
    float startPitch;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _startVolume
    // Size: 0x4
    // Offset: 0x44
    float startVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: AudioPitchGainEffect
    AudioPitchGainEffect(UnityEngine::AudioSource* audioSource_ = {}, float duration_ = {}, UnityEngine::AnimationCurve* pitchCurve_ = {}, UnityEngine::AnimationCurve* gainCurve_ = {}, UnityEngine::Coroutine* currentCoroutine_ = {}, float startPitch_ = {}, float startVolume_ = {}) noexcept : audioSource{audioSource_}, duration{duration_}, pitchCurve{pitchCurve_}, gainCurve{gainCurve_}, currentCoroutine{currentCoroutine_}, startPitch{startPitch_}, startVolume{startVolume_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void Start()
    // Offset: 0x1030798
    void Start();
    // private System.Collections.IEnumerator StartEffectCoroutine(System.Single volumeScale, System.Action finishCallback)
    // Offset: 0x10307CC
    System::Collections::IEnumerator* StartEffectCoroutine(float volumeScale, System::Action* finishCallback);
    // public System.Void StartEffect(System.Single volumeScale, System.Action finishCallback)
    // Offset: 0x10308A0
    void StartEffect(float volumeScale, System::Action* finishCallback);
    // public System.Void InterruptEffect()
    // Offset: 0x10308DC
    void InterruptEffect();
    // public System.Void SetAudioSource(UnityEngine.AudioSource audioSource)
    // Offset: 0x1030940
    void SetAudioSource(UnityEngine::AudioSource* audioSource);
    // public System.Void .ctor()
    // Offset: 0x1030948
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AudioPitchGainEffect* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AudioPitchGainEffect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AudioPitchGainEffect*, creationType>()));
    }
  }; // AudioPitchGainEffect
  #pragma pack(pop)
  static check_size<sizeof(AudioPitchGainEffect), 68 + sizeof(float)> __GlobalNamespace_AudioPitchGainEffectSizeCheck;
  static_assert(sizeof(AudioPitchGainEffect) == 0x48);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::AudioPitchGainEffect*, "", "AudioPitchGainEffect");
