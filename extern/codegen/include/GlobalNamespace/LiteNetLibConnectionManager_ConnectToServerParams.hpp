// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLibConnectionManager
#include "GlobalNamespace/LiteNetLibConnectionManager.hpp"
// Including type: LiteNetLibConnectionManager/LiteNetLibConnectionParamsBase
#include "GlobalNamespace/LiteNetLibConnectionManager_LiteNetLibConnectionParamsBase.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: LiteNetLibConnectionManager/ConnectToServerParams
  class LiteNetLibConnectionManager::ConnectToServerParams : public GlobalNamespace::LiteNetLibConnectionManager::LiteNetLibConnectionParamsBase {
    public:
    // public System.Net.IPEndPoint endPoint
    // Offset: 0x38
    System::Net::IPEndPoint* endPoint;
    // public System.String serverUserId
    // Offset: 0x40
    ::Il2CppString* serverUserId;
    // public System.String serverUserName
    // Offset: 0x48
    ::Il2CppString* serverUserName;
    // public System.Boolean serverIsConnectionOwner
    // Offset: 0x50
    bool serverIsConnectionOwner;
    // public System.Void .ctor()
    // Offset: 0x1B52228
    // Implemented from: LiteNetLibConnectionManager/LiteNetLibConnectionParamsBase
    // Base method: System.Void LiteNetLibConnectionParamsBase::.ctor()
    // Base method: System.Void Object::.ctor()
    static LiteNetLibConnectionManager::ConnectToServerParams* New_ctor();
  }; // LiteNetLibConnectionManager/ConnectToServerParams
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LiteNetLibConnectionManager::ConnectToServerParams*, "", "LiteNetLibConnectionManager/ConnectToServerParams");
#pragma pack(pop)
