// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IOpenVRHaptics
#include "GlobalNamespace/IOpenVRHaptics.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::XR
namespace UnityEngine::XR {
  // Forward declaring type: XRNode
  struct XRNode;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: Thread
  class Thread;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: ThreadedOpenVrOpenVrHaptics
  class ThreadedOpenVrOpenVrHaptics : public ::Il2CppObject/*, public GlobalNamespace::IOpenVRHaptics*/ {
    public:
    // Nested type: GlobalNamespace::ThreadedOpenVrOpenVrHaptics::OpenVrHapticData
    struct OpenVrHapticData;
    // Autogenerated type: ThreadedOpenVrOpenVrHaptics/OpenVrHapticData
    struct OpenVrHapticData : public System::ValueType {
      public:
      // public readonly System.Single endTime
      // Offset: 0x0
      float endTime;
      // public readonly System.Single strength
      // Offset: 0x4
      float strength;
      // Creating value type constructor for type: OpenVrHapticData
      constexpr OpenVrHapticData(float endTime_ = {}, float strength_ = {}) noexcept : endTime{endTime_}, strength{strength_} {}
      // public System.Void .ctor(System.Single endTime, System.Single strength)
      // Offset: 0xCB75A4
      // ABORTED: conflicts with another method.  OpenVrHapticData(float endTime, float strength);
    }; // ThreadedOpenVrOpenVrHaptics/OpenVrHapticData
    // private System.Single _currentTime
    // Offset: 0x10
    float currentTime;
    // private System.Threading.Thread _hapticThread
    // Offset: 0x18
    System::Threading::Thread* hapticThread;
    // private ThreadedOpenVrOpenVrHaptics/OpenVrHapticData _leftHandHaptics
    // Offset: 0x20
    GlobalNamespace::ThreadedOpenVrOpenVrHaptics::OpenVrHapticData leftHandHaptics;
    // private ThreadedOpenVrOpenVrHaptics/OpenVrHapticData _rightHandHaptics
    // Offset: 0x28
    GlobalNamespace::ThreadedOpenVrOpenVrHaptics::OpenVrHapticData rightHandHaptics;
    // Creating interface conversion operator: operator GlobalNamespace::IOpenVRHaptics
    operator GlobalNamespace::IOpenVRHaptics() noexcept {
      return *reinterpret_cast<GlobalNamespace::IOpenVRHaptics*>(this);
    }
    // private System.Void UpdateHaptics()
    // Offset: 0x19CE024
    void UpdateHaptics();
    // private System.Void UpdateHandHaptics(UnityEngine.XR.XRNode node)
    // Offset: 0x19CE0EC
    void UpdateHandHaptics(UnityEngine::XR::XRNode node);
    // public System.Void .ctor()
    // Offset: 0x19CDF24
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static ThreadedOpenVrOpenVrHaptics* New_ctor();
    // public System.Void TriggerHapticPulse(UnityEngine.XR.XRNode node, System.Single duration, System.Single strength, System.Single frequency)
    // Offset: 0x19CDFF0
    // Implemented from: IOpenVRHaptics
    // Base method: System.Void IOpenVRHaptics::TriggerHapticPulse(UnityEngine.XR.XRNode node, System.Single duration, System.Single strength, System.Single frequency)
    void TriggerHapticPulse(UnityEngine::XR::XRNode node, float duration, float strength, float frequency);
    // public System.Void Destroy()
    // Offset: 0x19CE230
    // Implemented from: IOpenVRHaptics
    // Base method: System.Void IOpenVRHaptics::Destroy()
    void Destroy();
  }; // ThreadedOpenVrOpenVrHaptics
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::ThreadedOpenVrOpenVrHaptics*, "", "ThreadedOpenVrOpenVrHaptics");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::ThreadedOpenVrOpenVrHaptics::OpenVrHapticData, "", "ThreadedOpenVrOpenVrHaptics/OpenVrHapticData");
#pragma pack(pop)
