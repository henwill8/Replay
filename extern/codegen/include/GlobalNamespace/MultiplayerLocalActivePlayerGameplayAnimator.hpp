// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerGameplayAnimator
#include "GlobalNamespace/MultiplayerGameplayAnimator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: CoreGameHUDController
  class CoreGameHUDController;
  // Forward declaring type: MultiplayerPositionHUDController
  class MultiplayerPositionHUDController;
  // Forward declaring type: IMultiplayerLevelEndActionsPublisher
  class IMultiplayerLevelEndActionsPublisher;
  // Forward declaring type: LevelCompletionResults
  class LevelCompletionResults;
}
// Forward declaring namespace: Tweening
namespace Tweening {
  // Forward declaring type: FloatTween
  class FloatTween;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x89
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerLocalActivePlayerGameplayAnimator
  // [] Offset: FFFFFFFF
  class MultiplayerLocalActivePlayerGameplayAnimator : public GlobalNamespace::MultiplayerGameplayAnimator {
    public:
    // [SpaceAttribute] Offset: 0xD3B3D4
    // private CoreGameHUDController _coreGameHUDController
    // Size: 0x8
    // Offset: 0x68
    GlobalNamespace::CoreGameHUDController* coreGameHUDController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::CoreGameHUDController*) == 0x8);
    // private MultiplayerPositionHUDController _multiplayerPositionHUDController
    // Size: 0x8
    // Offset: 0x70
    GlobalNamespace::MultiplayerPositionHUDController* multiplayerPositionHUDController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerPositionHUDController*) == 0x8);
    // [InjectAttribute] Offset: 0xD3B41C
    // private readonly IMultiplayerLevelEndActionsPublisher _levelEndActionsPublisher
    // Size: 0x8
    // Offset: 0x78
    GlobalNamespace::IMultiplayerLevelEndActionsPublisher* levelEndActionsPublisher;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMultiplayerLevelEndActionsPublisher*) == 0x8);
    // private Tweening.FloatTween _fadeOutHUDTween
    // Size: 0x8
    // Offset: 0x80
    Tweening::FloatTween* fadeOutHUDTween;
    // Field size check
    static_assert(sizeof(Tweening::FloatTween*) == 0x8);
    // private System.Boolean _initialized
    // Size: 0x1
    // Offset: 0x88
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: MultiplayerLocalActivePlayerGameplayAnimator
    MultiplayerLocalActivePlayerGameplayAnimator(GlobalNamespace::CoreGameHUDController* coreGameHUDController_ = {}, GlobalNamespace::MultiplayerPositionHUDController* multiplayerPositionHUDController_ = {}, GlobalNamespace::IMultiplayerLevelEndActionsPublisher* levelEndActionsPublisher_ = {}, Tweening::FloatTween* fadeOutHUDTween_ = {}, bool initialized_ = {}) noexcept : coreGameHUDController{coreGameHUDController_}, multiplayerPositionHUDController{multiplayerPositionHUDController_}, levelEndActionsPublisher{levelEndActionsPublisher_}, fadeOutHUDTween{fadeOutHUDTween_}, initialized{initialized_} {}
    // private System.Void InitializeIfNeeded()
    // Offset: 0xFDF950
    void InitializeIfNeeded();
    // private System.Void TransitionIntoFailedState()
    // Offset: 0xFDFBF4
    void TransitionIntoFailedState();
    // private System.Void HandlePlayerDidFinish(LevelCompletionResults levelCompletionResults)
    // Offset: 0xFDFE14
    void HandlePlayerDidFinish(GlobalNamespace::LevelCompletionResults* levelCompletionResults);
    // private System.Void <InitializeIfNeeded>b__6_0(System.Single f)
    // Offset: 0xFDFE40
    void $InitializeIfNeeded$b__6_0(float f);
    // protected override System.Void OnDestroy()
    // Offset: 0xFDF844
    // Implemented from: MultiplayerGameplayAnimator
    // Base method: System.Void MultiplayerGameplayAnimator::OnDestroy()
    void OnDestroy();
    // protected override System.Void HandleStateChanged(MultiplayerController/State state)
    // Offset: 0xFDFA2C
    // Implemented from: MultiplayerGameplayAnimator
    // Base method: System.Void MultiplayerGameplayAnimator::HandleStateChanged(MultiplayerController/State state)
    void HandleStateChanged(GlobalNamespace::MultiplayerController::State state);
    // protected override System.Void AnimateNewLeaderSelected(System.Boolean isLeading)
    // Offset: 0xFDFD1C
    // Implemented from: MultiplayerGameplayAnimator
    // Base method: System.Void MultiplayerGameplayAnimator::AnimateNewLeaderSelected(System.Boolean isLeading)
    void AnimateNewLeaderSelected(bool isLeading);
    // public System.Void .ctor()
    // Offset: 0xFDFE38
    // Implemented from: MultiplayerGameplayAnimator
    // Base method: System.Void MultiplayerGameplayAnimator::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerLocalActivePlayerGameplayAnimator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerLocalActivePlayerGameplayAnimator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerLocalActivePlayerGameplayAnimator*, creationType>()));
    }
  }; // MultiplayerLocalActivePlayerGameplayAnimator
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerLocalActivePlayerGameplayAnimator), 136 + sizeof(bool)> __GlobalNamespace_MultiplayerLocalActivePlayerGameplayAnimatorSizeCheck;
  static_assert(sizeof(MultiplayerLocalActivePlayerGameplayAnimator) == 0x89);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerLocalActivePlayerGameplayAnimator*, "", "MultiplayerLocalActivePlayerGameplayAnimator");
