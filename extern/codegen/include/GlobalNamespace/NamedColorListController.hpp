// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ListColorController
#include "GlobalNamespace/ListColorController.hpp"
// Including type: HMUI.IValueChanger`1
#include "HMUI/IValueChanger_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Color
  struct Color;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: NamedColorListController
  // [] Offset: FFFFFFFF
  class NamedColorListController : public GlobalNamespace::ListColorController/*, public HMUI::IValueChanger_1<int>*/ {
    public:
    // Nested type: GlobalNamespace::NamedColorListController::ColorValuePair
    class ColorValuePair;
    // private NamedColorListController/ColorValuePair[] _textValuePairs
    // Size: 0x8
    // Offset: 0x28
    ::Array<GlobalNamespace::NamedColorListController::ColorValuePair*>* textValuePairs;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::NamedColorListController::ColorValuePair*>*) == 0x8);
    // private System.Int32 _value
    // Size: 0x4
    // Offset: 0x30
    int value;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: value and: valueChangedEvent
    char __padding1[0x4] = {};
    // [CompilerGeneratedAttribute] Offset: 0xD3F300
    // private System.Action`1<System.Int32> valueChangedEvent
    // Size: 0x8
    // Offset: 0x38
    System::Action_1<int>* valueChangedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<int>*) == 0x8);
    // Creating value type constructor for type: NamedColorListController
    NamedColorListController(::Array<GlobalNamespace::NamedColorListController::ColorValuePair*>* textValuePairs_ = {}, int value_ = {}, System::Action_1<int>* valueChangedEvent_ = {}) noexcept : textValuePairs{textValuePairs_}, value{value_}, valueChangedEvent{valueChangedEvent_} {}
    // Creating interface conversion operator: operator HMUI::IValueChanger_1<int>
    operator HMUI::IValueChanger_1<int>() noexcept {
      return *reinterpret_cast<HMUI::IValueChanger_1<int>*>(this);
    }
    // public System.Void add_valueChangedEvent(System.Action`1<System.Int32> value)
    // Offset: 0xF849B0
    void add_valueChangedEvent(System::Action_1<int>* value);
    // public System.Void remove_valueChangedEvent(System.Action`1<System.Int32> value)
    // Offset: 0xF84A54
    void remove_valueChangedEvent(System::Action_1<int>* value);
    // public System.Void Init(NamedColorListController/ColorValuePair[] values, System.Int32 value)
    // Offset: 0xF84AF8
    void Init(::Array<GlobalNamespace::NamedColorListController::ColorValuePair*>* values, int value);
    // public System.Void SetValue(System.Int32 value)
    // Offset: 0xF84B2C
    void SetValue(int value);
    // protected override System.Boolean GetInitValues(out System.Int32 idx, out System.Int32 numberOfElements)
    // Offset: 0xF84B3C
    // Implemented from: ListColorController
    // Base method: System.Boolean ListColorController::GetInitValues(out System.Int32 idx, out System.Int32 numberOfElements)
    bool GetInitValues(int& idx, int& numberOfElements);
    // protected override System.Void ApplyValue(System.Int32 idx)
    // Offset: 0xF84BD8
    // Implemented from: ListColorController
    // Base method: System.Void ListColorController::ApplyValue(System.Int32 idx)
    void ApplyValue(int idx);
    // protected override UnityEngine.Color ColorForValue(System.Int32 idx)
    // Offset: 0xF84C50
    // Implemented from: ListColorController
    // Base method: UnityEngine.Color ListColorController::ColorForValue(System.Int32 idx)
    UnityEngine::Color ColorForValue(int idx);
    // public System.Void .ctor()
    // Offset: 0xF84C98
    // Implemented from: ListColorController
    // Base method: System.Void ListColorController::.ctor()
    // Base method: System.Void IncDecColorController::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NamedColorListController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NamedColorListController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NamedColorListController*, creationType>()));
    }
  }; // NamedColorListController
  #pragma pack(pop)
  static check_size<sizeof(NamedColorListController), 56 + sizeof(System::Action_1<int>*)> __GlobalNamespace_NamedColorListControllerSizeCheck;
  static_assert(sizeof(NamedColorListController) == 0x40);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::NamedColorListController*, "", "NamedColorListController");
