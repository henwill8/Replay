// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: Saber
  class Saber;
  // Forward declaring type: NoteController
  class NoteController;
  // Forward declaring type: RandomObjectPicker`1<T>
  template<typename T>
  class RandomObjectPicker_1;
  // Forward declaring type: NoteCutInfo
  class NoteCutInfo;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: NoteCutSoundEffect
  class NoteCutSoundEffect : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::NoteCutSoundEffect::Pool
    class Pool;
    // private UnityEngine.AudioSource _audioSource
    // Offset: 0x18
    UnityEngine::AudioSource* audioSource;
    // private UnityEngine.AnimationCurve _speedToVolumeCurve
    // Offset: 0x20
    UnityEngine::AnimationCurve* speedToVolumeCurve;
    // private UnityEngine.AudioClip[] _badCutSoundEffectAudioClips
    // Offset: 0x28
    ::Array<UnityEngine::AudioClip*>* badCutSoundEffectAudioClips;
    // private System.Single _badCutVolume
    // Offset: 0x30
    float badCutVolume;
    // private System.Single _goodCutVolume
    // Offset: 0x34
    float goodCutVolume;
    // private System.Action`1<NoteCutSoundEffect> didFinishEvent
    // Offset: 0x38
    System::Action_1<GlobalNamespace::NoteCutSoundEffect*>* didFinishEvent;
    // private Saber _saber
    // Offset: 0x40
    GlobalNamespace::Saber* saber;
    // private NoteController _noteController
    // Offset: 0x48
    GlobalNamespace::NoteController* noteController;
    // private System.Boolean _isPlaying
    // Offset: 0x50
    bool isPlaying;
    // private System.Single _volumeMultiplier
    // Offset: 0x54
    float volumeMultiplier;
    // private System.Boolean _noteWasCut
    // Offset: 0x58
    bool noteWasCut;
    // private System.Single _aheadTime
    // Offset: 0x5C
    float aheadTime;
    // private System.Single _timeToNextNote
    // Offset: 0x60
    float timeToNextNote;
    // private System.Single _timeToPrevNote
    // Offset: 0x64
    float timeToPrevNote;
    // private System.Double _startDSPTime
    // Offset: 0x68
    double startDSPTime;
    // private System.Double _endDSPtime
    // Offset: 0x70
    double endDSPtime;
    // private System.Double _fadeOutStartDSPtime
    // Offset: 0x78
    double fadeOutStartDSPtime;
    // private System.Single _noteMissedTimeOffset
    // Offset: 0x80
    float noteMissedTimeOffset;
    // private System.Single _beforeCutVolume
    // Offset: 0x84
    float beforeCutVolume;
    // private System.Boolean _goodCut
    // Offset: 0x88
    bool goodCut;
    // private RandomObjectPicker`1<UnityEngine.AudioClip> _badCutRandomSoundPicker
    // Offset: 0x90
    GlobalNamespace::RandomObjectPicker_1<UnityEngine::AudioClip*>* badCutRandomSoundPicker;
    // private System.Boolean _handleWrongSaberTypeAsGood
    // Offset: 0x98
    bool handleWrongSaberTypeAsGood;
    // private System.Boolean _paused
    // Offset: 0x99
    bool paused;
    // private System.Boolean _ignoreSaberSpeed
    // Offset: 0x9A
    bool ignoreSaberSpeed;
    // private System.Boolean _ignoreBadCuts
    // Offset: 0x9B
    bool ignoreBadCuts;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Single kEndOverlap
    static constexpr const float kEndOverlap = 100.01;
    // Get static field: static private System.Single kEndOverlap
    static float _get_kEndOverlap();
    // Set static field: static private System.Single kEndOverlap
    static void _set_kEndOverlap(float value);
    // static field const value: static private System.Single kEndFadeLength
    static constexpr const float kEndFadeLength = 0.01;
    // Get static field: static private System.Single kEndFadeLength
    static float _get_kEndFadeLength();
    // Set static field: static private System.Single kEndFadeLength
    static void _set_kEndFadeLength(float value);
    // public System.Void add_didFinishEvent(System.Action`1<NoteCutSoundEffect> value)
    // Offset: 0xFE2EDC
    void add_didFinishEvent(System::Action_1<GlobalNamespace::NoteCutSoundEffect*>* value);
    // public System.Void remove_didFinishEvent(System.Action`1<NoteCutSoundEffect> value)
    // Offset: 0xFE2F80
    void remove_didFinishEvent(System::Action_1<GlobalNamespace::NoteCutSoundEffect*>* value);
    // public System.Void set_volumeMultiplier(System.Single value)
    // Offset: 0xFE3024
    void set_volumeMultiplier(float value);
    // public System.Single get_volumeMultiplier()
    // Offset: 0xFE302C
    float get_volumeMultiplier();
    // public System.Single get_time()
    // Offset: 0xFE3034
    float get_time();
    // protected System.Void Awake()
    // Offset: 0xFE305C
    void Awake();
    // protected System.Void Start()
    // Offset: 0xFE30E4
    void Start();
    // public System.Void Init(UnityEngine.AudioClip audioClip, NoteController noteController, System.Double noteDSPTime, System.Single aheadTime, System.Single missedTimeOffset, System.Single timeToPrevNote, System.Single timeToNextNote, Saber saber, System.Boolean handleWrongSaberTypeAsGood, System.Single volumeMultiplier, System.Boolean ignoreSaberSpeed, System.Boolean ignoreBadCuts)
    // Offset: 0xFE3104
    void Init(UnityEngine::AudioClip* audioClip, GlobalNamespace::NoteController* noteController, double noteDSPTime, float aheadTime, float missedTimeOffset, float timeToPrevNote, float timeToNextNote, GlobalNamespace::Saber* saber, bool handleWrongSaberTypeAsGood, float volumeMultiplier, bool ignoreSaberSpeed, bool ignoreBadCuts);
    // private System.Void ComputeDSPTimes(System.Double noteDSPTime, System.Single aheadTime, System.Single timeToPrevNote, System.Single timeToNextNote)
    // Offset: 0xFE32A8
    void ComputeDSPTimes(double noteDSPTime, float aheadTime, float timeToPrevNote, float timeToNextNote);
    // protected System.Void LateUpdate()
    // Offset: 0xFE3398
    void LateUpdate();
    // public System.Void StopPlayingAndFinish()
    // Offset: 0xFE35CC
    void StopPlayingAndFinish();
    // public System.Void PausePlaying()
    // Offset: 0xFE3658
    void PausePlaying();
    // public System.Void ResumePlaying(System.Double noteDSPTime)
    // Offset: 0xFE36AC
    void ResumePlaying(double noteDSPTime);
    // public System.Void NoteWasCut(NoteController noteController, NoteCutInfo noteCutInfo)
    // Offset: 0xFE371C
    void NoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo* noteCutInfo);
    // public System.Void .ctor()
    // Offset: 0xFE396C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static NoteCutSoundEffect* New_ctor();
  }; // NoteCutSoundEffect
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::NoteCutSoundEffect*, "", "NoteCutSoundEffect");
#pragma pack(pop)
