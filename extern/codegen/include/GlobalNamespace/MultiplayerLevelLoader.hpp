// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.ITickable
#include "Zenject/ITickable.hpp"
// Including type: BeatmapDifficulty
#include "GlobalNamespace/BeatmapDifficulty.hpp"
// Including type: BeatmapLevelsModel/GetBeatmapLevelResult
#include "GlobalNamespace/BeatmapLevelsModel.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationTokenSource
  class CancellationTokenSource;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Skipping declaration: BeatmapLevelsModel because it is already included!
  // Forward declaring type: IPreviewBeatmapLevel
  class IPreviewBeatmapLevel;
  // Forward declaring type: BeatmapCharacteristicSO
  class BeatmapCharacteristicSO;
  // Forward declaring type: IDifficultyBeatmap
  class IDifficultyBeatmap;
  // Forward declaring type: GameplayModifiers
  class GameplayModifiers;
  // Forward declaring type: BeatmapIdentifierNetSerializable
  class BeatmapIdentifierNetSerializable;
  // Forward declaring type: PreviewDifficultyBeatmapSet
  class PreviewDifficultyBeatmapSet;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`5<T1, T2, T3, T4, T5>
  template<typename T1, typename T2, typename T3, typename T4, typename T5>
  class Action_5;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: MultiplayerLevelLoader
  class MultiplayerLevelLoader : public ::Il2CppObject/*, public Zenject::ITickable*/ {
    public:
    // Nested type: GlobalNamespace::MultiplayerLevelLoader::MultiplayerBeatmapLoaderState
    struct MultiplayerBeatmapLoaderState;
    // Autogenerated type: MultiplayerLevelLoader/MultiplayerBeatmapLoaderState
    struct MultiplayerBeatmapLoaderState : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: MultiplayerBeatmapLoaderState
      constexpr MultiplayerBeatmapLoaderState(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MultiplayerLevelLoader/MultiplayerBeatmapLoaderState NotLoading
      static constexpr const int NotLoading = 0;
      // Get static field: static public MultiplayerLevelLoader/MultiplayerBeatmapLoaderState NotLoading
      static GlobalNamespace::MultiplayerLevelLoader::MultiplayerBeatmapLoaderState _get_NotLoading();
      // Set static field: static public MultiplayerLevelLoader/MultiplayerBeatmapLoaderState NotLoading
      static void _set_NotLoading(GlobalNamespace::MultiplayerLevelLoader::MultiplayerBeatmapLoaderState value);
      // static field const value: static public MultiplayerLevelLoader/MultiplayerBeatmapLoaderState LoadingBeatmap
      static constexpr const int LoadingBeatmap = 1;
      // Get static field: static public MultiplayerLevelLoader/MultiplayerBeatmapLoaderState LoadingBeatmap
      static GlobalNamespace::MultiplayerLevelLoader::MultiplayerBeatmapLoaderState _get_LoadingBeatmap();
      // Set static field: static public MultiplayerLevelLoader/MultiplayerBeatmapLoaderState LoadingBeatmap
      static void _set_LoadingBeatmap(GlobalNamespace::MultiplayerLevelLoader::MultiplayerBeatmapLoaderState value);
      // static field const value: static public MultiplayerLevelLoader/MultiplayerBeatmapLoaderState WaitingForCountdown
      static constexpr const int WaitingForCountdown = 2;
      // Get static field: static public MultiplayerLevelLoader/MultiplayerBeatmapLoaderState WaitingForCountdown
      static GlobalNamespace::MultiplayerLevelLoader::MultiplayerBeatmapLoaderState _get_WaitingForCountdown();
      // Set static field: static public MultiplayerLevelLoader/MultiplayerBeatmapLoaderState WaitingForCountdown
      static void _set_WaitingForCountdown(GlobalNamespace::MultiplayerLevelLoader::MultiplayerBeatmapLoaderState value);
    }; // MultiplayerLevelLoader/MultiplayerBeatmapLoaderState
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Offset: 0x10
    GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // private readonly BeatmapLevelsModel _beatmapLevelsModel
    // Offset: 0x18
    GlobalNamespace::BeatmapLevelsModel* beatmapLevelsModel;
    // private System.Action stillDownloadingSongEvent
    // Offset: 0x20
    System::Action* stillDownloadingSongEvent;
    // private System.Action`5<IPreviewBeatmapLevel,BeatmapDifficulty,BeatmapCharacteristicSO,IDifficultyBeatmap,GameplayModifiers> countdownFinishedEvent
    // Offset: 0x28
    System::Action_5<GlobalNamespace::IPreviewBeatmapLevel*, GlobalNamespace::BeatmapDifficulty, GlobalNamespace::BeatmapCharacteristicSO*, GlobalNamespace::IDifficultyBeatmap*, GlobalNamespace::GameplayModifiers*>* countdownFinishedEvent;
    // private MultiplayerLevelLoader/MultiplayerBeatmapLoaderState _loaderState
    // Offset: 0x30
    GlobalNamespace::MultiplayerLevelLoader::MultiplayerBeatmapLoaderState loaderState;
    // private System.Threading.CancellationTokenSource _getBeatmapCancellationTokenSource
    // Offset: 0x38
    System::Threading::CancellationTokenSource* getBeatmapCancellationTokenSource;
    // private System.Threading.Tasks.Task`1<BeatmapLevelsModel/GetBeatmapLevelResult> _getBeatmapLevelResultTask
    // Offset: 0x40
    System::Threading::Tasks::Task_1<GlobalNamespace::BeatmapLevelsModel::GetBeatmapLevelResult>* getBeatmapLevelResultTask;
    // private BeatmapIdentifierNetSerializable _beatmapId
    // Offset: 0x48
    GlobalNamespace::BeatmapIdentifierNetSerializable* beatmapId;
    // private GameplayModifiers _gameplayModifiers
    // Offset: 0x50
    GlobalNamespace::GameplayModifiers* gameplayModifiers;
    // private IDifficultyBeatmap _difficultyBeatmap
    // Offset: 0x58
    GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap;
    // private BeatmapCharacteristicSO _beatmapCharacteristic
    // Offset: 0x60
    GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic;
    // private IPreviewBeatmapLevel _previewBeatmapLevel
    // Offset: 0x68
    GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel;
    // private System.Single _startTime
    // Offset: 0x70
    float startTime;
    // private System.Boolean _stillDownloadingCalled
    // Offset: 0x74
    bool stillDownloadingCalled;
    // Creating interface conversion operator: operator Zenject::ITickable
    operator Zenject::ITickable() noexcept {
      return *reinterpret_cast<Zenject::ITickable*>(this);
    }
    // public System.Void add_stillDownloadingSongEvent(System.Action value)
    // Offset: 0xFB70C4
    void add_stillDownloadingSongEvent(System::Action* value);
    // public System.Void remove_stillDownloadingSongEvent(System.Action value)
    // Offset: 0xFB7168
    void remove_stillDownloadingSongEvent(System::Action* value);
    // public System.Void add_countdownFinishedEvent(System.Action`5<IPreviewBeatmapLevel,BeatmapDifficulty,BeatmapCharacteristicSO,IDifficultyBeatmap,GameplayModifiers> value)
    // Offset: 0xFB720C
    void add_countdownFinishedEvent(System::Action_5<GlobalNamespace::IPreviewBeatmapLevel*, GlobalNamespace::BeatmapDifficulty, GlobalNamespace::BeatmapCharacteristicSO*, GlobalNamespace::IDifficultyBeatmap*, GlobalNamespace::GameplayModifiers*>* value);
    // public System.Void remove_countdownFinishedEvent(System.Action`5<IPreviewBeatmapLevel,BeatmapDifficulty,BeatmapCharacteristicSO,IDifficultyBeatmap,GameplayModifiers> value)
    // Offset: 0xFB72B0
    void remove_countdownFinishedEvent(System::Action_5<GlobalNamespace::IPreviewBeatmapLevel*, GlobalNamespace::BeatmapDifficulty, GlobalNamespace::BeatmapCharacteristicSO*, GlobalNamespace::IDifficultyBeatmap*, GlobalNamespace::GameplayModifiers*>* value);
    // public System.Void LoadLevel(BeatmapIdentifierNetSerializable beatmapId, GameplayModifiers gameplayModifiers, System.Single initialStartTime)
    // Offset: 0xFB7354
    void LoadLevel(GlobalNamespace::BeatmapIdentifierNetSerializable* beatmapId, GlobalNamespace::GameplayModifiers* gameplayModifiers, float initialStartTime);
    // public System.Void SetNewStartTime(System.Single newStartTime)
    // Offset: 0xFB7584
    void SetNewStartTime(float newStartTime);
    // public System.Void ClearLoading()
    // Offset: 0xFB758C
    void ClearLoading();
    // private System.Boolean <LoadLevel>b__19_0(PreviewDifficultyBeatmapSet set)
    // Offset: 0xFB78C8
    bool $LoadLevel$b__19_0(GlobalNamespace::PreviewDifficultyBeatmapSet* set);
    // public System.Void Tick()
    // Offset: 0xFB7634
    // Implemented from: Zenject.ITickable
    // Base method: System.Void ITickable::Tick()
    void Tick();
    // public System.Void .ctor()
    // Offset: 0xFB78C0
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static MultiplayerLevelLoader* New_ctor();
  }; // MultiplayerLevelLoader
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerLevelLoader*, "", "MultiplayerLevelLoader");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerLevelLoader::MultiplayerBeatmapLoaderState, "", "MultiplayerLevelLoader/MultiplayerBeatmapLoaderState");
#pragma pack(pop)
