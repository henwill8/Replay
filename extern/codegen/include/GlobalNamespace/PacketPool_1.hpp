// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IPacketPool`1
#include "GlobalNamespace/IPacketPool_1.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IPoolablePacket
  class IPoolablePacket;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: PacketPool`1
  template<typename T>
  class PacketPool_1 : public ::Il2CppObject/*, public GlobalNamespace::IPacketPool_1<T>*/ {
    public:
    // private System.Int32 _clearCount
    // Offset: 0x0
    int clearCount;
    // private System.Int32 _size
    // Offset: 0x0
    int size;
    // private readonly T[] _pool
    // Offset: 0x0
    ::Array<T>* pool;
    // Creating interface conversion operator: operator GlobalNamespace::IPacketPool_1<T>
    operator GlobalNamespace::IPacketPool_1<T>() noexcept {
      return *reinterpret_cast<GlobalNamespace::IPacketPool_1<T>*>(this);
    }
    // Autogenerated static field getter
    // Get static field: static private System.Int32 kMaxPoolSize
    static int _get_kMaxPoolSize() {
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<int>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<PacketPool_1<T>*>::get(), "kMaxPoolSize"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Int32 kMaxPoolSize
    static void _set_kMaxPoolSize(int value) {
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<PacketPool_1<T>*>::get(), "kMaxPoolSize", value));
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFF
    void Clear() {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Clear"));
    }
    // public T Obtain()
    // Offset: 0xFFFFFFFF
    // Implemented from: IPacketPool`1
    // Base method: T IPacketPool_1::Obtain()
    T Obtain() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<T>(this, "Obtain"));
    }
    // public System.Void Release(T t)
    // Offset: 0xFFFFFFFF
    // Implemented from: IPacketPool`1
    // Base method: System.Void IPacketPool_1::Release(T t)
    void Release(T t) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Release", t));
    }
    // private System.Void IPacketPool.Release(System.Object o)
    // Offset: 0xFFFFFFFF
    // Implemented from: IPacketPool
    // Base method: System.Void IPacketPool::Release(System.Object o)
    void GlobalNamespace_IPacketPool_Release(::Il2CppObject* o) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "IPacketPool.Release", o));
    }
    // public override System.Int32 GetHashCode()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "GetHashCode"));
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static PacketPool_1<T>* New_ctor() {
      return THROW_UNLESS(il2cpp_utils::New<PacketPool_1<T>*>());
    }
  }; // PacketPool`1
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(GlobalNamespace::PacketPool_1, "", "PacketPool`1");
#pragma pack(pop)
