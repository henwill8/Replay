// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: BeatmapObjectCallbackController
#include "GlobalNamespace/BeatmapObjectCallbackController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BTSCharacterDataModel
  class BTSCharacterDataModel;
  // Forward declaring type: BeatmapEventData
  class BeatmapEventData;
  // Forward declaring type: IReadonlyBeatmapData
  class IReadonlyBeatmapData;
  // Forward declaring type: IAudioTimeSource
  class IAudioTimeSource;
  // Forward declaring type: BTSCharacter
  class BTSCharacter;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: AnimationClip
  class AnimationClip;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Tuple`2<T1, T2>
  template<typename T1, typename T2>
  class Tuple_2;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: BTSCharacterSpawnEventEffect
  // [] Offset: FFFFFFFF
  class BTSCharacterSpawnEventEffect : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::BTSCharacterSpawnEventEffect::PrefabWithId
    class PrefabWithId;
    // Nested type: GlobalNamespace::BTSCharacterSpawnEventEffect::AnimationClipWithId
    class AnimationClipWithId;
    // private System.Single _animationStartAheadTime
    // Size: 0x4
    // Offset: 0x18
    float animationStartAheadTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: animationStartAheadTime and: btsCharacterDataModel
    char __padding0[0x4] = {};
    // private BTSCharacterDataModel _btsCharacterDataModel
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::BTSCharacterDataModel* btsCharacterDataModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BTSCharacterDataModel*) == 0x8);
    // [NullAllowed] Offset: 0xD31F98
    // private UnityEngine.Transform _characterWrapper
    // Size: 0x8
    // Offset: 0x28
    UnityEngine::Transform* characterWrapper;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // [InjectAttribute] Offset: 0xD31FD4
    // private readonly BeatmapObjectCallbackController _beatmapObjectCallbackController
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::BeatmapObjectCallbackController* beatmapObjectCallbackController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectCallbackController*) == 0x8);
    // [InjectAttribute] Offset: 0xD31FE4
    // private readonly IReadonlyBeatmapData _beatmapData
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::IReadonlyBeatmapData* beatmapData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IReadonlyBeatmapData*) == 0x8);
    // [InjectAttribute] Offset: 0xD31FF4
    // private readonly IAudioTimeSource _audioTimeSource
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::IAudioTimeSource* audioTimeSource;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IAudioTimeSource*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD32004
    // private System.Action`1<BTSCharacter> startCharacterAnimationEvent
    // Size: 0x8
    // Offset: 0x48
    System::Action_1<GlobalNamespace::BTSCharacter*>* startCharacterAnimationEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::BTSCharacter*>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.Int32,BTSCharacter> _idsToCharacterPrefabsDictionary
    // Size: 0x8
    // Offset: 0x50
    System::Collections::Generic::Dictionary_2<int, GlobalNamespace::BTSCharacter*>* idsToCharacterPrefabsDictionary;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<int, GlobalNamespace::BTSCharacter*>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.Int32,BTSCharacter> _idsToCharactersDictionary
    // Size: 0x8
    // Offset: 0x58
    System::Collections::Generic::Dictionary_2<int, GlobalNamespace::BTSCharacter*>* idsToCharactersDictionary;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<int, GlobalNamespace::BTSCharacter*>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.AnimationClip> _idsToAnimationClipsDictionary
    // Size: 0x8
    // Offset: 0x60
    System::Collections::Generic::Dictionary_2<int, UnityEngine::AnimationClip*>* idsToAnimationClipsDictionary;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<int, UnityEngine::AnimationClip*>*) == 0x8);
    // private System.Boolean _isInitialized
    // Size: 0x1
    // Offset: 0x68
    bool isInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isInitialized and: eventsCallbackData
    char __padding10[0x7] = {};
    // private BeatmapObjectCallbackController/BeatmapEventCallbackData _eventsCallbackData
    // Size: 0x8
    // Offset: 0x70
    GlobalNamespace::BeatmapObjectCallbackController::BeatmapEventCallbackData* eventsCallbackData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectCallbackController::BeatmapEventCallbackData*) == 0x8);
    // Creating value type constructor for type: BTSCharacterSpawnEventEffect
    BTSCharacterSpawnEventEffect(float animationStartAheadTime_ = {}, GlobalNamespace::BTSCharacterDataModel* btsCharacterDataModel_ = {}, UnityEngine::Transform* characterWrapper_ = {}, GlobalNamespace::BeatmapObjectCallbackController* beatmapObjectCallbackController_ = {}, GlobalNamespace::IReadonlyBeatmapData* beatmapData_ = {}, GlobalNamespace::IAudioTimeSource* audioTimeSource_ = {}, System::Action_1<GlobalNamespace::BTSCharacter*>* startCharacterAnimationEvent_ = {}, System::Collections::Generic::Dictionary_2<int, GlobalNamespace::BTSCharacter*>* idsToCharacterPrefabsDictionary_ = {}, System::Collections::Generic::Dictionary_2<int, GlobalNamespace::BTSCharacter*>* idsToCharactersDictionary_ = {}, System::Collections::Generic::Dictionary_2<int, UnityEngine::AnimationClip*>* idsToAnimationClipsDictionary_ = {}, bool isInitialized_ = {}, GlobalNamespace::BeatmapObjectCallbackController::BeatmapEventCallbackData* eventsCallbackData_ = {}) noexcept : animationStartAheadTime{animationStartAheadTime_}, btsCharacterDataModel{btsCharacterDataModel_}, characterWrapper{characterWrapper_}, beatmapObjectCallbackController{beatmapObjectCallbackController_}, beatmapData{beatmapData_}, audioTimeSource{audioTimeSource_}, startCharacterAnimationEvent{startCharacterAnimationEvent_}, idsToCharacterPrefabsDictionary{idsToCharacterPrefabsDictionary_}, idsToCharactersDictionary{idsToCharactersDictionary_}, idsToAnimationClipsDictionary{idsToAnimationClipsDictionary_}, isInitialized{isInitialized_}, eventsCallbackData{eventsCallbackData_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private BeatmapEventType kCharacterDisplayEventType
    static constexpr const int kCharacterDisplayEventType = 40;
    // Get static field: static private BeatmapEventType kCharacterDisplayEventType
    static GlobalNamespace::BeatmapEventType _get_kCharacterDisplayEventType();
    // Set static field: static private BeatmapEventType kCharacterDisplayEventType
    static void _set_kCharacterDisplayEventType(GlobalNamespace::BeatmapEventType value);
    // public System.Void add_startCharacterAnimationEvent(System.Action`1<BTSCharacter> value)
    // Offset: 0x103972C
    void add_startCharacterAnimationEvent(System::Action_1<GlobalNamespace::BTSCharacter*>* value);
    // public System.Void remove_startCharacterAnimationEvent(System.Action`1<BTSCharacter> value)
    // Offset: 0x1039B4C
    void remove_startCharacterAnimationEvent(System::Action_1<GlobalNamespace::BTSCharacter*>* value);
    // public System.Boolean get_isInitialized()
    // Offset: 0x1039FB4
    bool get_isInitialized();
    // protected System.Void Start()
    // Offset: 0x1039FBC
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x103A678
    void OnDestroy();
    // private System.Void HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger(BeatmapEventData beatmapEventData)
    // Offset: 0x103A714
    void HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger(GlobalNamespace::BeatmapEventData* beatmapEventData);
    // static private System.Tuple`2<BTSCharacter,UnityEngine.AnimationClip> GetCharacterWithAnimationClip(System.Collections.Generic.Dictionary`2<System.Int32,BTSCharacter> charDictionary, System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.AnimationClip> animDictionary, System.Int32 prefabId, System.Int32 animationId)
    // Offset: 0x103A520
    static System::Tuple_2<GlobalNamespace::BTSCharacter*, UnityEngine::AnimationClip*>* GetCharacterWithAnimationClip(System::Collections::Generic::Dictionary_2<int, GlobalNamespace::BTSCharacter*>* charDictionary, System::Collections::Generic::Dictionary_2<int, UnityEngine::AnimationClip*>* animDictionary, int prefabId, int animationId);
    // public System.Void .ctor()
    // Offset: 0x103A894
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BTSCharacterSpawnEventEffect* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BTSCharacterSpawnEventEffect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BTSCharacterSpawnEventEffect*, creationType>()));
    }
  }; // BTSCharacterSpawnEventEffect
  #pragma pack(pop)
  static check_size<sizeof(BTSCharacterSpawnEventEffect), 112 + sizeof(GlobalNamespace::BeatmapObjectCallbackController::BeatmapEventCallbackData*)> __GlobalNamespace_BTSCharacterSpawnEventEffectSizeCheck;
  static_assert(sizeof(BTSCharacterSpawnEventEffect) == 0x78);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BTSCharacterSpawnEventEffect*, "", "BTSCharacterSpawnEventEffect");
