// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: SongController
#include "GlobalNamespace/SongController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AudioTimeSyncController
  class AudioTimeSyncController;
  // Forward declaring type: Signal
  class Signal;
  // Forward declaring type: BeatmapObjectManager
  class BeatmapObjectManager;
  // Forward declaring type: BeatmapObjectCallbackController
  class BeatmapObjectCallbackController;
  // Forward declaring type: BeatmapData
  class BeatmapData;
  // Forward declaring type: NoteController
  class NoteController;
  // Forward declaring type: NoteCutInfo
  class NoteCutInfo;
  // Forward declaring type: ObstacleController
  class ObstacleController;
  // Forward declaring type: ObstacleData
  class ObstacleData;
  // Forward declaring type: NoteData
  class NoteData;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xD0
  #pragma pack(push, 1)
  // Autogenerated type: TutorialSongController
  // [] Offset: FFFFFFFF
  class TutorialSongController : public GlobalNamespace::SongController {
    public:
    // Nested type: GlobalNamespace::TutorialSongController::InitData
    class InitData;
    // Nested type: GlobalNamespace::TutorialSongController::TutorialObjectSpawnData
    class TutorialObjectSpawnData;
    // Nested type: GlobalNamespace::TutorialSongController::TutorialJumpingNoteSpawnData
    class TutorialJumpingNoteSpawnData;
    // Nested type: GlobalNamespace::TutorialSongController::TutorialBasicNoteSpawnData
    class TutorialBasicNoteSpawnData;
    // Nested type: GlobalNamespace::TutorialSongController::TutorialBombNoteSpawnData
    class TutorialBombNoteSpawnData;
    // Nested type: GlobalNamespace::TutorialSongController::TutorialObstacleSpawnData
    class TutorialObstacleSpawnData;
    // private AudioTimeSyncController _audioTimeSyncController
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::AudioTimeSyncController* audioTimeSyncController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AudioTimeSyncController*) == 0x8);
    // private System.Int32 _startWaitTimeInBeats
    // Size: 0x4
    // Offset: 0x28
    int startWaitTimeInBeats;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _numberOfBeatsToSnap
    // Size: 0x4
    // Offset: 0x2C
    int numberOfBeatsToSnap;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _obstacleDurationInBeats
    // Size: 0x4
    // Offset: 0x30
    int obstacleDurationInBeats;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: obstacleDurationInBeats and: noteCuttingTutorialPartDidStartSignal
    char __padding3[0x4] = {};
    // [SpaceAttribute] Offset: 0xD3D874
    // [FormerlySerializedAsAttribute] Offset: 0xD3D874
    // [SignalSenderAttribute] Offset: 0xD3D874
    // private Signal _noteCuttingTutorialPartDidStartSignal
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::Signal* noteCuttingTutorialPartDidStartSignal;
    // Field size check
    static_assert(sizeof(GlobalNamespace::Signal*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xD3D8E0
    // [SignalSenderAttribute] Offset: 0xD3D8E0
    // private Signal _noteCuttingInAnyDirectionDidStartSignal
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::Signal* noteCuttingInAnyDirectionDidStartSignal;
    // Field size check
    static_assert(sizeof(GlobalNamespace::Signal*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xD3D93C
    // [SignalSenderAttribute] Offset: 0xD3D93C
    // private Signal _bombCuttingTutorialPartDidStartSignal
    // Size: 0x8
    // Offset: 0x48
    GlobalNamespace::Signal* bombCuttingTutorialPartDidStartSignal;
    // Field size check
    static_assert(sizeof(GlobalNamespace::Signal*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xD3D998
    // [SignalSenderAttribute] Offset: 0xD3D998
    // private Signal _leftObstacleTutorialPartDidStartSignal
    // Size: 0x8
    // Offset: 0x50
    GlobalNamespace::Signal* leftObstacleTutorialPartDidStartSignal;
    // Field size check
    static_assert(sizeof(GlobalNamespace::Signal*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xD3D9F4
    // [SignalSenderAttribute] Offset: 0xD3D9F4
    // private Signal _rightObstacleTutorialPartDidStartSignal
    // Size: 0x8
    // Offset: 0x58
    GlobalNamespace::Signal* rightObstacleTutorialPartDidStartSignal;
    // Field size check
    static_assert(sizeof(GlobalNamespace::Signal*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xD3DA50
    // [SignalSenderAttribute] Offset: 0xD3DA50
    // private Signal _topObstacleTutorialPartDidStartSignal
    // Size: 0x8
    // Offset: 0x60
    GlobalNamespace::Signal* topObstacleTutorialPartDidStartSignal;
    // Field size check
    static_assert(sizeof(GlobalNamespace::Signal*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xD3DAAC
    // [SignalSenderAttribute] Offset: 0xD3DAAC
    // private Signal _noteWasCutOKSignal
    // Size: 0x8
    // Offset: 0x68
    GlobalNamespace::Signal* noteWasCutOKSignal;
    // Field size check
    static_assert(sizeof(GlobalNamespace::Signal*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xD3DB08
    // [SignalSenderAttribute] Offset: 0xD3DB08
    // private Signal _noteWasCutTooSoonSignal
    // Size: 0x8
    // Offset: 0x70
    GlobalNamespace::Signal* noteWasCutTooSoonSignal;
    // Field size check
    static_assert(sizeof(GlobalNamespace::Signal*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xD3DB64
    // [SignalSenderAttribute] Offset: 0xD3DB64
    // private Signal _noteWasCutWithWrongColorSignal
    // Size: 0x8
    // Offset: 0x78
    GlobalNamespace::Signal* noteWasCutWithWrongColorSignal;
    // Field size check
    static_assert(sizeof(GlobalNamespace::Signal*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xD3DBC0
    // [SignalSenderAttribute] Offset: 0xD3DBC0
    // private Signal _noteWasCutFromDifferentDirectionSignal
    // Size: 0x8
    // Offset: 0x80
    GlobalNamespace::Signal* noteWasCutFromDifferentDirectionSignal;
    // Field size check
    static_assert(sizeof(GlobalNamespace::Signal*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xD3DC1C
    // [SignalSenderAttribute] Offset: 0xD3DC1C
    // private Signal _noteWasCutWithSlowSpeedSignal
    // Size: 0x8
    // Offset: 0x88
    GlobalNamespace::Signal* noteWasCutWithSlowSpeedSignal;
    // Field size check
    static_assert(sizeof(GlobalNamespace::Signal*) == 0x8);
    // [FormerlySerializedAsAttribute] Offset: 0xD3DC78
    // [SignalSenderAttribute] Offset: 0xD3DC78
    // private Signal _bombWasCutSignal
    // Size: 0x8
    // Offset: 0x90
    GlobalNamespace::Signal* bombWasCutSignal;
    // Field size check
    static_assert(sizeof(GlobalNamespace::Signal*) == 0x8);
    // [InjectAttribute] Offset: 0xD3DCD4
    // private readonly TutorialSongController/InitData _initData
    // Size: 0x8
    // Offset: 0x98
    GlobalNamespace::TutorialSongController::InitData* initData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::TutorialSongController::InitData*) == 0x8);
    // [InjectAttribute] Offset: 0xD3DCE4
    // private readonly BeatmapObjectManager _beatmapObjectManager
    // Size: 0x8
    // Offset: 0xA0
    GlobalNamespace::BeatmapObjectManager* beatmapObjectManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectManager*) == 0x8);
    // [InjectAttribute] Offset: 0xD3DCF4
    // private readonly BeatmapObjectCallbackController _beatmapObjectCallbackController
    // Size: 0x8
    // Offset: 0xA8
    GlobalNamespace::BeatmapObjectCallbackController* beatmapObjectCallbackController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectCallbackController*) == 0x8);
    // private System.Int32 _tutorialBeatmapObjectIndex
    // Size: 0x4
    // Offset: 0xB0
    int tutorialBeatmapObjectIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 _prevSpawnedBeatmapObjectIndex
    // Size: 0x4
    // Offset: 0xB4
    int prevSpawnedBeatmapObjectIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _songBpm
    // Size: 0x4
    // Offset: 0xB8
    float songBpm;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: songBpm and: beatmapData
    char __padding21[0x4] = {};
    // private BeatmapData _beatmapData
    // Size: 0x8
    // Offset: 0xC0
    GlobalNamespace::BeatmapData* beatmapData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapData*) == 0x8);
    // private TutorialSongController/TutorialObjectSpawnData[] _normalModeTutorialObjectsSpawnData
    // Size: 0x8
    // Offset: 0xC8
    ::Array<GlobalNamespace::TutorialSongController::TutorialObjectSpawnData*>* normalModeTutorialObjectsSpawnData;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::TutorialSongController::TutorialObjectSpawnData*>*) == 0x8);
    // Creating value type constructor for type: TutorialSongController
    TutorialSongController(GlobalNamespace::AudioTimeSyncController* audioTimeSyncController_ = {}, int startWaitTimeInBeats_ = {}, int numberOfBeatsToSnap_ = {}, int obstacleDurationInBeats_ = {}, GlobalNamespace::Signal* noteCuttingTutorialPartDidStartSignal_ = {}, GlobalNamespace::Signal* noteCuttingInAnyDirectionDidStartSignal_ = {}, GlobalNamespace::Signal* bombCuttingTutorialPartDidStartSignal_ = {}, GlobalNamespace::Signal* leftObstacleTutorialPartDidStartSignal_ = {}, GlobalNamespace::Signal* rightObstacleTutorialPartDidStartSignal_ = {}, GlobalNamespace::Signal* topObstacleTutorialPartDidStartSignal_ = {}, GlobalNamespace::Signal* noteWasCutOKSignal_ = {}, GlobalNamespace::Signal* noteWasCutTooSoonSignal_ = {}, GlobalNamespace::Signal* noteWasCutWithWrongColorSignal_ = {}, GlobalNamespace::Signal* noteWasCutFromDifferentDirectionSignal_ = {}, GlobalNamespace::Signal* noteWasCutWithSlowSpeedSignal_ = {}, GlobalNamespace::Signal* bombWasCutSignal_ = {}, GlobalNamespace::TutorialSongController::InitData* initData_ = {}, GlobalNamespace::BeatmapObjectManager* beatmapObjectManager_ = {}, GlobalNamespace::BeatmapObjectCallbackController* beatmapObjectCallbackController_ = {}, int tutorialBeatmapObjectIndex_ = {}, int prevSpawnedBeatmapObjectIndex_ = {}, float songBpm_ = {}, GlobalNamespace::BeatmapData* beatmapData_ = {}, ::Array<GlobalNamespace::TutorialSongController::TutorialObjectSpawnData*>* normalModeTutorialObjectsSpawnData_ = {}) noexcept : audioTimeSyncController{audioTimeSyncController_}, startWaitTimeInBeats{startWaitTimeInBeats_}, numberOfBeatsToSnap{numberOfBeatsToSnap_}, obstacleDurationInBeats{obstacleDurationInBeats_}, noteCuttingTutorialPartDidStartSignal{noteCuttingTutorialPartDidStartSignal_}, noteCuttingInAnyDirectionDidStartSignal{noteCuttingInAnyDirectionDidStartSignal_}, bombCuttingTutorialPartDidStartSignal{bombCuttingTutorialPartDidStartSignal_}, leftObstacleTutorialPartDidStartSignal{leftObstacleTutorialPartDidStartSignal_}, rightObstacleTutorialPartDidStartSignal{rightObstacleTutorialPartDidStartSignal_}, topObstacleTutorialPartDidStartSignal{topObstacleTutorialPartDidStartSignal_}, noteWasCutOKSignal{noteWasCutOKSignal_}, noteWasCutTooSoonSignal{noteWasCutTooSoonSignal_}, noteWasCutWithWrongColorSignal{noteWasCutWithWrongColorSignal_}, noteWasCutFromDifferentDirectionSignal{noteWasCutFromDifferentDirectionSignal_}, noteWasCutWithSlowSpeedSignal{noteWasCutWithSlowSpeedSignal_}, bombWasCutSignal{bombWasCutSignal_}, initData{initData_}, beatmapObjectManager{beatmapObjectManager_}, beatmapObjectCallbackController{beatmapObjectCallbackController_}, tutorialBeatmapObjectIndex{tutorialBeatmapObjectIndex_}, prevSpawnedBeatmapObjectIndex{prevSpawnedBeatmapObjectIndex_}, songBpm{songBpm_}, beatmapData{beatmapData_}, normalModeTutorialObjectsSpawnData{normalModeTutorialObjectsSpawnData_} {}
    // protected System.Void Awake()
    // Offset: 0xF4B950
    void Awake();
    // protected System.Void Start()
    // Offset: 0xF4C0C8
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0xF4C248
    void OnDestroy();
    // public System.Void StartSong(System.Single startTimeOffset)
    // Offset: 0xF49A6C
    void StartSong(float startTimeOffset);
    // private System.Void HandleNoteWasCut(NoteController noteController, NoteCutInfo noteCutInfo)
    // Offset: 0xF4C624
    void HandleNoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo* noteCutInfo);
    // private System.Void HandleNoteWasMissed(NoteController noteController)
    // Offset: 0xF4C704
    void HandleNoteWasMissed(GlobalNamespace::NoteController* noteController);
    // private System.Void HandleObstacleDidPassThreeQuartersOfMove2(ObstacleController obstacleController)
    // Offset: 0xF4C76C
    void HandleObstacleDidPassThreeQuartersOfMove2(GlobalNamespace::ObstacleController* obstacleController);
    // private System.Void UpdateBeatmapData(System.Single noteTime)
    // Offset: 0xF4C374
    void UpdateBeatmapData(float noteTime);
    // private System.Single GetNextBeatmapObjectTime(System.Int32 beatOffset)
    // Offset: 0xF4C780
    float GetNextBeatmapObjectTime(int beatOffset);
    // private ObstacleData CreateObstacleData(System.Single time, TutorialSongController/TutorialObstacleSpawnData tutorialObstacleSpawnData)
    // Offset: 0xF4C818
    GlobalNamespace::ObstacleData* CreateObstacleData(float time, GlobalNamespace::TutorialSongController::TutorialObstacleSpawnData* tutorialObstacleSpawnData);
    // private NoteData CreateBasicNoteData(System.Single time, TutorialSongController/TutorialBasicNoteSpawnData tutorialBasicNoteSpawnData)
    // Offset: 0xF4C7D8
    GlobalNamespace::NoteData* CreateBasicNoteData(float time, GlobalNamespace::TutorialSongController::TutorialBasicNoteSpawnData* tutorialBasicNoteSpawnData);
    // private NoteData CreateBombNoteData(System.Single time, TutorialSongController/TutorialBombNoteSpawnData tutorialBombNoteSpawnData)
    // Offset: 0xF4C7FC
    GlobalNamespace::NoteData* CreateBombNoteData(float time, GlobalNamespace::TutorialSongController::TutorialBombNoteSpawnData* tutorialBombNoteSpawnData);
    // public override System.Void StopSong()
    // Offset: 0xF4C5A0
    // Implemented from: SongController
    // Base method: System.Void SongController::StopSong()
    void StopSong();
    // public override System.Void PauseSong()
    // Offset: 0xF4C5D4
    // Implemented from: SongController
    // Base method: System.Void SongController::PauseSong()
    void PauseSong();
    // public override System.Void ResumeSong()
    // Offset: 0xF4C608
    // Implemented from: SongController
    // Base method: System.Void SongController::ResumeSong()
    void ResumeSong();
    // public System.Void .ctor()
    // Offset: 0xF4C8D4
    // Implemented from: SongController
    // Base method: System.Void SongController::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TutorialSongController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::TutorialSongController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TutorialSongController*, creationType>()));
    }
  }; // TutorialSongController
  #pragma pack(pop)
  static check_size<sizeof(TutorialSongController), 200 + sizeof(::Array<GlobalNamespace::TutorialSongController::TutorialObjectSpawnData*>*)> __GlobalNamespace_TutorialSongControllerSizeCheck;
  static_assert(sizeof(TutorialSongController) == 0xD0);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::TutorialSongController*, "", "TutorialSongController");
