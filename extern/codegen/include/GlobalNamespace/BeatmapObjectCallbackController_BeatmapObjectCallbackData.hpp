// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapObjectCallbackController
#include "GlobalNamespace/BeatmapObjectCallbackController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapObjectCallbackController/BeatmapObjectCallbackData
  // [] Offset: FFFFFFFF
  class BeatmapObjectCallbackController::BeatmapObjectCallbackData : public ::Il2CppObject {
    public:
    // public System.Single aheadTime
    // Size: 0x4
    // Offset: 0x10
    float aheadTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: aheadTime and: nextObjectIndexInLine
    char __padding0[0x4] = {};
    // public System.Int32[] nextObjectIndexInLine
    // Size: 0x8
    // Offset: 0x18
    ::Array<int>* nextObjectIndexInLine;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // public readonly BeatmapObjectCallbackController/BeatmapObjectCallback callback
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::BeatmapObjectCallbackController::BeatmapObjectCallback* callback;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectCallbackController::BeatmapObjectCallback*) == 0x8);
    // Creating value type constructor for type: BeatmapObjectCallbackData
    BeatmapObjectCallbackData(float aheadTime_ = {}, ::Array<int>* nextObjectIndexInLine_ = {}, GlobalNamespace::BeatmapObjectCallbackController::BeatmapObjectCallback* callback_ = {}) noexcept : aheadTime{aheadTime_}, nextObjectIndexInLine{nextObjectIndexInLine_}, callback{callback_} {}
    // public System.Void .ctor(BeatmapObjectCallbackController/BeatmapObjectCallback callback, System.Single aheadTime, System.Int32 numberOfLines)
    // Offset: 0xF57B44
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapObjectCallbackController::BeatmapObjectCallbackData* New_ctor(GlobalNamespace::BeatmapObjectCallbackController::BeatmapObjectCallback* callback, float aheadTime, int numberOfLines) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectCallbackController::BeatmapObjectCallbackData::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapObjectCallbackController::BeatmapObjectCallbackData*, creationType>(callback, aheadTime, numberOfLines)));
    }
  }; // BeatmapObjectCallbackController/BeatmapObjectCallbackData
  #pragma pack(pop)
  static check_size<sizeof(BeatmapObjectCallbackController::BeatmapObjectCallbackData), 32 + sizeof(GlobalNamespace::BeatmapObjectCallbackController::BeatmapObjectCallback*)> __GlobalNamespace_BeatmapObjectCallbackController_BeatmapObjectCallbackDataSizeCheck;
  static_assert(sizeof(BeatmapObjectCallbackController::BeatmapObjectCallbackData) == 0x28);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BeatmapObjectCallbackController::BeatmapObjectCallbackData*, "", "BeatmapObjectCallbackController/BeatmapObjectCallbackData");
