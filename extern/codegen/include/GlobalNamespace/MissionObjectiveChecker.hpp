// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MissionObjective
  class MissionObjective;
  // Forward declaring type: MissionObjectiveTypeSO
  class MissionObjectiveTypeSO;
  // Skipping declaration: Status because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: MissionObjectiveChecker
  class MissionObjectiveChecker : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::MissionObjectiveChecker::Status
    struct Status;
    // Autogenerated type: MissionObjectiveChecker/Status
    struct Status : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: Status
      constexpr Status(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MissionObjectiveChecker/Status None
      static constexpr const int None = 0;
      // Get static field: static public MissionObjectiveChecker/Status None
      static GlobalNamespace::MissionObjectiveChecker::Status _get_None();
      // Set static field: static public MissionObjectiveChecker/Status None
      static void _set_None(GlobalNamespace::MissionObjectiveChecker::Status value);
      // static field const value: static public MissionObjectiveChecker/Status NotClearedYet
      static constexpr const int NotClearedYet = 1;
      // Get static field: static public MissionObjectiveChecker/Status NotClearedYet
      static GlobalNamespace::MissionObjectiveChecker::Status _get_NotClearedYet();
      // Set static field: static public MissionObjectiveChecker/Status NotClearedYet
      static void _set_NotClearedYet(GlobalNamespace::MissionObjectiveChecker::Status value);
      // static field const value: static public MissionObjectiveChecker/Status NotFailedYet
      static constexpr const int NotFailedYet = 2;
      // Get static field: static public MissionObjectiveChecker/Status NotFailedYet
      static GlobalNamespace::MissionObjectiveChecker::Status _get_NotFailedYet();
      // Set static field: static public MissionObjectiveChecker/Status NotFailedYet
      static void _set_NotFailedYet(GlobalNamespace::MissionObjectiveChecker::Status value);
      // static field const value: static public MissionObjectiveChecker/Status Cleared
      static constexpr const int Cleared = 3;
      // Get static field: static public MissionObjectiveChecker/Status Cleared
      static GlobalNamespace::MissionObjectiveChecker::Status _get_Cleared();
      // Set static field: static public MissionObjectiveChecker/Status Cleared
      static void _set_Cleared(GlobalNamespace::MissionObjectiveChecker::Status value);
      // static field const value: static public MissionObjectiveChecker/Status Failed
      static constexpr const int Failed = 4;
      // Get static field: static public MissionObjectiveChecker/Status Failed
      static GlobalNamespace::MissionObjectiveChecker::Status _get_Failed();
      // Set static field: static public MissionObjectiveChecker/Status Failed
      static void _set_Failed(GlobalNamespace::MissionObjectiveChecker::Status value);
    }; // MissionObjectiveChecker/Status
    // private MissionObjectiveTypeSO _missionObjectiveType
    // Offset: 0x18
    GlobalNamespace::MissionObjectiveTypeSO* missionObjectiveType;
    // private System.Action`1<MissionObjectiveChecker> statusDidChangeEvent
    // Offset: 0x20
    System::Action_1<GlobalNamespace::MissionObjectiveChecker*>* statusDidChangeEvent;
    // private System.Action`1<MissionObjectiveChecker> checkedValueDidChangeEvent
    // Offset: 0x28
    System::Action_1<GlobalNamespace::MissionObjectiveChecker*>* checkedValueDidChangeEvent;
    // private MissionObjectiveChecker/Status _status
    // Offset: 0x30
    GlobalNamespace::MissionObjectiveChecker::Status status;
    // private System.Int32 _checkedValue
    // Offset: 0x34
    int checkedValue;
    // protected MissionObjective _missionObjective
    // Offset: 0x38
    GlobalNamespace::MissionObjective* missionObjective;
    // private System.Boolean _disableChecking
    // Offset: 0x40
    bool disableChecking;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void add_statusDidChangeEvent(System.Action`1<MissionObjectiveChecker> value)
    // Offset: 0xC0BA78
    void add_statusDidChangeEvent(System::Action_1<GlobalNamespace::MissionObjectiveChecker*>* value);
    // public System.Void remove_statusDidChangeEvent(System.Action`1<MissionObjectiveChecker> value)
    // Offset: 0xC0BB1C
    void remove_statusDidChangeEvent(System::Action_1<GlobalNamespace::MissionObjectiveChecker*>* value);
    // public System.Void add_checkedValueDidChangeEvent(System.Action`1<MissionObjectiveChecker> value)
    // Offset: 0xC0BBC0
    void add_checkedValueDidChangeEvent(System::Action_1<GlobalNamespace::MissionObjectiveChecker*>* value);
    // public System.Void remove_checkedValueDidChangeEvent(System.Action`1<MissionObjectiveChecker> value)
    // Offset: 0xC0BC64
    void remove_checkedValueDidChangeEvent(System::Action_1<GlobalNamespace::MissionObjectiveChecker*>* value);
    // public MissionObjectiveTypeSO get_missionObjectiveType()
    // Offset: 0xC0BD08
    GlobalNamespace::MissionObjectiveTypeSO* get_missionObjectiveType();
    // public MissionObjective get_missionObjective()
    // Offset: 0xC0BD10
    GlobalNamespace::MissionObjective* get_missionObjective();
    // public System.Boolean get_disableChecking()
    // Offset: 0xC0BD18
    bool get_disableChecking();
    // public System.Void set_disableChecking(System.Boolean value)
    // Offset: 0xC0BD20
    void set_disableChecking(bool value);
    // public MissionObjectiveChecker/Status get_status()
    // Offset: 0xC0BD2C
    GlobalNamespace::MissionObjectiveChecker::Status get_status();
    // protected System.Void set_status(MissionObjectiveChecker/Status value)
    // Offset: 0xC0BD34
    void set_status(GlobalNamespace::MissionObjectiveChecker::Status value);
    // public System.Int32 get_checkedValue()
    // Offset: 0xC0BDC0
    int get_checkedValue();
    // protected System.Void set_checkedValue(System.Int32 value)
    // Offset: 0xC0BDC8
    void set_checkedValue(int value);
    // public System.Void SetCheckedMissionObjective(MissionObjective missionObjective)
    // Offset: 0xC0BE54
    void SetCheckedMissionObjective(GlobalNamespace::MissionObjective* missionObjective);
    // protected System.Void Init()
    // Offset: 0xFFFFFFFF
    void Init();
    // protected System.Void .ctor()
    // Offset: 0xC0BE84
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static MissionObjectiveChecker* New_ctor();
  }; // MissionObjectiveChecker
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MissionObjectiveChecker*, "", "MissionObjectiveChecker");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MissionObjectiveChecker::Status, "", "MissionObjectiveChecker/Status");
#pragma pack(pop)
