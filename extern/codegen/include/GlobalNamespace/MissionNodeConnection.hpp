// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: Animator
  class Animator;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Image
  class Image;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MissionNodeVisualController
  class MissionNodeVisualController;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x59
  #pragma pack(push, 1)
  // Autogenerated type: MissionNodeConnection
  // [] Offset: FFFFFFFF
  class MissionNodeConnection : public UnityEngine::MonoBehaviour {
    public:
    // private System.Single _separator
    // Size: 0x4
    // Offset: 0x18
    float separator;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _width
    // Size: 0x4
    // Offset: 0x1C
    float width;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.RectTransform _rectTransform
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::RectTransform* rectTransform;
    // Field size check
    static_assert(sizeof(UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.UI.Image _image
    // Size: 0x8
    // Offset: 0x28
    UnityEngine::UI::Image* image;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Image*) == 0x8);
    // [NullAllowed] Offset: 0xD40920
    // private MissionNodeVisualController _parentMissionNode
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::MissionNodeVisualController* parentMissionNode;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MissionNodeVisualController*) == 0x8);
    // [NullAllowed] Offset: 0xD4095C
    // private MissionNodeVisualController _childMissionNode
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::MissionNodeVisualController* childMissionNode;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MissionNodeVisualController*) == 0x8);
    // private UnityEngine.Animator _animator
    // Size: 0x8
    // Offset: 0x40
    UnityEngine::Animator* animator;
    // Field size check
    static_assert(sizeof(UnityEngine::Animator*) == 0x8);
    // private UnityEngine.Vector2 _parentMissionNodePosition
    // Size: 0x8
    // Offset: 0x48
    UnityEngine::Vector2 parentMissionNodePosition;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector2) == 0x8);
    // private UnityEngine.Vector2 _childMissionNodePosition
    // Size: 0x8
    // Offset: 0x50
    UnityEngine::Vector2 childMissionNodePosition;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector2) == 0x8);
    // private System.Boolean _isActive
    // Size: 0x1
    // Offset: 0x58
    bool isActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: MissionNodeConnection
    MissionNodeConnection(float separator_ = {}, float width_ = {}, UnityEngine::RectTransform* rectTransform_ = {}, UnityEngine::UI::Image* image_ = {}, GlobalNamespace::MissionNodeVisualController* parentMissionNode_ = {}, GlobalNamespace::MissionNodeVisualController* childMissionNode_ = {}, UnityEngine::Animator* animator_ = {}, UnityEngine::Vector2 parentMissionNodePosition_ = {}, UnityEngine::Vector2 childMissionNodePosition_ = {}, bool isActive_ = {}) noexcept : separator{separator_}, width{width_}, rectTransform{rectTransform_}, image{image_}, parentMissionNode{parentMissionNode_}, childMissionNode{childMissionNode_}, animator{animator_}, parentMissionNodePosition{parentMissionNodePosition_}, childMissionNodePosition{childMissionNodePosition_}, isActive{isActive_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public MissionNodeVisualController get_parentMissionNode()
    // Offset: 0x1099C68
    GlobalNamespace::MissionNodeVisualController* get_parentMissionNode();
    // public MissionNodeVisualController get_childMissionNode()
    // Offset: 0x1099C70
    GlobalNamespace::MissionNodeVisualController* get_childMissionNode();
    // public System.Boolean get_isActive()
    // Offset: 0x1099C78
    bool get_isActive();
    // public System.Void Setup(MissionNodeVisualController parentMissionNode, MissionNodeVisualController childMissionNode)
    // Offset: 0x1095068
    void Setup(GlobalNamespace::MissionNodeVisualController* parentMissionNode, GlobalNamespace::MissionNodeVisualController* childMissionNode);
    // public System.Void UpdateConnectionRectTransform()
    // Offset: 0x1099C80
    void UpdateConnectionRectTransform();
    // public System.Void SetActive(System.Boolean animated)
    // Offset: 0x1099704
    void SetActive(bool animated);
    // public System.Void MissionConnectionEnabledDidFinish()
    // Offset: 0x1099F70
    void MissionConnectionEnabledDidFinish();
    // public System.Void .ctor()
    // Offset: 0x1099F90
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MissionNodeConnection* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodeConnection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MissionNodeConnection*, creationType>()));
    }
  }; // MissionNodeConnection
  #pragma pack(pop)
  static check_size<sizeof(MissionNodeConnection), 88 + sizeof(bool)> __GlobalNamespace_MissionNodeConnectionSizeCheck;
  static_assert(sizeof(MissionNodeConnection) == 0x59);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MissionNodeConnection*, "", "MissionNodeConnection");
