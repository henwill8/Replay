// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: INetworkConfig
#include "GlobalNamespace/INetworkConfig.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MasterServerEndPoint
  class MasterServerEndPoint;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: CustomNetworkConfig
  class CustomNetworkConfig : public ::Il2CppObject/*, public GlobalNamespace::INetworkConfig*/ {
    public:
    // private System.Int32 <maxPartySize>k__BackingField
    // Offset: 0x10
    int maxPartySize;
    // private System.Int32 <discoveryPort>k__BackingField
    // Offset: 0x14
    int discoveryPort;
    // private System.Int32 <partyPort>k__BackingField
    // Offset: 0x18
    int partyPort;
    // private System.Int32 <multiplayerPort>k__BackingField
    // Offset: 0x1C
    int multiplayerPort;
    // private MasterServerEndPoint <masterServerEndPoint>k__BackingField
    // Offset: 0x20
    GlobalNamespace::MasterServerEndPoint* masterServerEndPoint;
    // private System.String <masterServerStatusUrl>k__BackingField
    // Offset: 0x28
    ::Il2CppString* masterServerStatusUrl;
    // Creating interface conversion operator: operator GlobalNamespace::INetworkConfig
    operator GlobalNamespace::INetworkConfig() noexcept {
      return *reinterpret_cast<GlobalNamespace::INetworkConfig*>(this);
    }
    // private System.Void set_maxPartySize(System.Int32 value)
    // Offset: 0x1B4A19C
    void set_maxPartySize(int value);
    // private System.Void set_discoveryPort(System.Int32 value)
    // Offset: 0x1B4A1AC
    void set_discoveryPort(int value);
    // private System.Void set_partyPort(System.Int32 value)
    // Offset: 0x1B4A1BC
    void set_partyPort(int value);
    // private System.Void set_multiplayerPort(System.Int32 value)
    // Offset: 0x1B4A1CC
    void set_multiplayerPort(int value);
    // private System.Void set_masterServerEndPoint(MasterServerEndPoint value)
    // Offset: 0x1B4A1DC
    void set_masterServerEndPoint(GlobalNamespace::MasterServerEndPoint* value);
    // private System.Void set_masterServerStatusUrl(System.String value)
    // Offset: 0x1B4A1EC
    void set_masterServerStatusUrl(::Il2CppString* value);
    // public System.Void .ctor(INetworkConfig fromNetworkConfig, System.String customServerHostName, System.Int32 port)
    // Offset: 0x1B4A1F4
    static CustomNetworkConfig* New_ctor(GlobalNamespace::INetworkConfig* fromNetworkConfig, ::Il2CppString* customServerHostName, int port);
    // public System.Int32 get_maxPartySize()
    // Offset: 0x1B4A194
    // Implemented from: INetworkConfig
    // Base method: System.Int32 INetworkConfig::get_maxPartySize()
    int get_maxPartySize();
    // public System.Int32 get_discoveryPort()
    // Offset: 0x1B4A1A4
    // Implemented from: INetworkConfig
    // Base method: System.Int32 INetworkConfig::get_discoveryPort()
    int get_discoveryPort();
    // public System.Int32 get_partyPort()
    // Offset: 0x1B4A1B4
    // Implemented from: INetworkConfig
    // Base method: System.Int32 INetworkConfig::get_partyPort()
    int get_partyPort();
    // public System.Int32 get_multiplayerPort()
    // Offset: 0x1B4A1C4
    // Implemented from: INetworkConfig
    // Base method: System.Int32 INetworkConfig::get_multiplayerPort()
    int get_multiplayerPort();
    // public MasterServerEndPoint get_masterServerEndPoint()
    // Offset: 0x1B4A1D4
    // Implemented from: INetworkConfig
    // Base method: MasterServerEndPoint INetworkConfig::get_masterServerEndPoint()
    GlobalNamespace::MasterServerEndPoint* get_masterServerEndPoint();
    // public System.String get_masterServerStatusUrl()
    // Offset: 0x1B4A1E4
    // Implemented from: INetworkConfig
    // Base method: System.String INetworkConfig::get_masterServerStatusUrl()
    ::Il2CppString* get_masterServerStatusUrl();
  }; // CustomNetworkConfig
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::CustomNetworkConfig*, "", "CustomNetworkConfig");
#pragma pack(pop)
