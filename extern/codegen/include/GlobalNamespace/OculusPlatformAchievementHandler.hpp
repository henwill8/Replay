// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PlatformAchievementsHandler
#include "GlobalNamespace/PlatformAchievementsHandler.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AchievementIdsModelSO
  class AchievementIdsModelSO;
  // Forward declaring type: HMAsyncRequest
  class HMAsyncRequest;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: OculusPlatformAchievementHandler
  // [] Offset: FFFFFFFF
  class OculusPlatformAchievementHandler : public GlobalNamespace::PlatformAchievementsHandler {
    public:
    // Nested type: GlobalNamespace::OculusPlatformAchievementHandler::$$c__DisplayClass2_0
    class $$c__DisplayClass2_0;
    // Nested type: GlobalNamespace::OculusPlatformAchievementHandler::$$c__DisplayClass3_0
    class $$c__DisplayClass3_0;
    // Nested type: GlobalNamespace::OculusPlatformAchievementHandler::$$c__DisplayClass3_1
    class $$c__DisplayClass3_1;
    // private readonly AchievementIdsModelSO _achievementIdsModel
    // Size: 0x8
    // Offset: 0x10
    GlobalNamespace::AchievementIdsModelSO* achievementIdsModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AchievementIdsModelSO*) == 0x8);
    // Creating value type constructor for type: OculusPlatformAchievementHandler
    OculusPlatformAchievementHandler(GlobalNamespace::AchievementIdsModelSO* achievementIdsModel_ = {}) noexcept : achievementIdsModel{achievementIdsModel_} {}
    // Creating conversion operator: operator GlobalNamespace::AchievementIdsModelSO*
    constexpr operator GlobalNamespace::AchievementIdsModelSO*() const noexcept {
      return achievementIdsModel;
    }
    // public System.Void .ctor(AchievementIdsModelSO achievementIdsModel)
    // Offset: 0x1100C3C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OculusPlatformAchievementHandler* New_ctor(GlobalNamespace::AchievementIdsModelSO* achievementIdsModel) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusPlatformAchievementHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OculusPlatformAchievementHandler*, creationType>(achievementIdsModel)));
    }
    // public override HMAsyncRequest UnlockAchievement(System.String achievementId, PlatformAchievementsModelSO/UnlockAchievementCompletionHandler completionHandler)
    // Offset: 0x1100C70
    // Implemented from: PlatformAchievementsHandler
    // Base method: HMAsyncRequest PlatformAchievementsHandler::UnlockAchievement(System.String achievementId, PlatformAchievementsModelSO/UnlockAchievementCompletionHandler completionHandler)
    GlobalNamespace::HMAsyncRequest* UnlockAchievement(::Il2CppString* achievementId, GlobalNamespace::PlatformAchievementsModelSO::UnlockAchievementCompletionHandler* completionHandler);
    // public override HMAsyncRequest GetUnlockedAchievements(PlatformAchievementsModelSO/GetUnlockedAchievementsCompletionHandler completionHandler)
    // Offset: 0x1100D60
    // Implemented from: PlatformAchievementsHandler
    // Base method: HMAsyncRequest PlatformAchievementsHandler::GetUnlockedAchievements(PlatformAchievementsModelSO/GetUnlockedAchievementsCompletionHandler completionHandler)
    GlobalNamespace::HMAsyncRequest* GetUnlockedAchievements(GlobalNamespace::PlatformAchievementsModelSO::GetUnlockedAchievementsCompletionHandler* completionHandler);
  }; // OculusPlatformAchievementHandler
  #pragma pack(pop)
  static check_size<sizeof(OculusPlatformAchievementHandler), 16 + sizeof(GlobalNamespace::AchievementIdsModelSO*)> __GlobalNamespace_OculusPlatformAchievementHandlerSizeCheck;
  static_assert(sizeof(OculusPlatformAchievementHandler) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OculusPlatformAchievementHandler*, "", "OculusPlatformAchievementHandler");
