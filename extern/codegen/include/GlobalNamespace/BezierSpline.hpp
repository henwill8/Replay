// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BezierCurve
#include "GlobalNamespace/BezierCurve.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: BezierSpline
  class BezierSpline : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::BezierSpline::ComputeControlPointsResults
    struct ComputeControlPointsResults;
    // Nested type: GlobalNamespace::BezierSpline::$$c
    class $$c;
    // private readonly System.Collections.Generic.List`1<BezierCurve> _segments
    // Offset: 0x10
    System::Collections::Generic::List_1<GlobalNamespace::BezierCurve>* segments;
    // private readonly System.Collections.Generic.List`1<UnityEngine.Vector3> _sourceDataPoints
    // Offset: 0x18
    System::Collections::Generic::List_1<UnityEngine::Vector3>* sourceDataPoints;
    // public System.Collections.Generic.List`1<BezierCurve> get_segments()
    // Offset: 0x1A2D850
    System::Collections::Generic::List_1<GlobalNamespace::BezierCurve>* get_segments();
    // public System.Void AddPoint(System.Single distance, UnityEngine.Vector2 point)
    // Offset: 0x1A2C5E8
    void AddPoint(float distance, UnityEngine::Vector2 point);
    // public System.Void SortSourceData()
    // Offset: 0x1A2D858
    void SortSourceData();
    // public System.Void AddArtificialStartAndFinishPoint()
    // Offset: 0x1A2C694
    void AddArtificialStartAndFinishPoint();
    // public System.Void ComputeControlPoints()
    // Offset: 0x1A2C840
    void ComputeControlPoints();
    // public System.Void Clear()
    // Offset: 0x1A2DF4C
    void Clear();
    // private BezierSpline/ComputeControlPointsResults ComputeControlPoints(System.Collections.Generic.List`1<System.Single> k)
    // Offset: 0x1A2D958
    GlobalNamespace::BezierSpline::ComputeControlPointsResults ComputeControlPoints(System::Collections::Generic::List_1<float>* k);
    // public System.Void .ctor()
    // Offset: 0x1A2C35C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static BezierSpline* New_ctor();
  }; // BezierSpline
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BezierSpline*, "", "BezierSpline");
#pragma pack(pop)
