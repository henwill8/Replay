// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.Utils.INetSerializable
#include "LiteNetLib/Utils/INetSerializable.hpp"
// Including type: IPoolablePacket
#include "GlobalNamespace/IPoolablePacket.hpp"
// Including type: ISyncStateSerializable`1
#include "GlobalNamespace/ISyncStateSerializable_1.hpp"
// Including type: NodePoseSyncState
#include "GlobalNamespace/NodePoseSyncState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PacketPool`1<T>
  template<typename T>
  class PacketPool_1;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: NetDataReader
  class NetDataReader;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: NodePoseSyncStateNetSerializable
  // [] Offset: FFFFFFFF
  class NodePoseSyncStateNetSerializable : public ::Il2CppObject/*, public LiteNetLib::Utils::INetSerializable, public GlobalNamespace::IPoolablePacket, public GlobalNamespace::ISyncStateSerializable_1<GlobalNamespace::NodePoseSyncState>*/ {
    public:
    // public System.Single time
    // Size: 0x4
    // Offset: 0x10
    float time;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public NodePoseSyncState nodePose
    // Size: 0x54
    // Offset: 0x14
    GlobalNamespace::NodePoseSyncState nodePose;
    // Field size check
    static_assert(sizeof(GlobalNamespace::NodePoseSyncState) == 0x54);
    // Creating value type constructor for type: NodePoseSyncStateNetSerializable
    NodePoseSyncStateNetSerializable(float time_ = {}, GlobalNamespace::NodePoseSyncState nodePose_ = {}) noexcept : time{time_}, nodePose{nodePose_} {}
    // Creating interface conversion operator: operator LiteNetLib::Utils::INetSerializable
    operator LiteNetLib::Utils::INetSerializable() noexcept {
      return *reinterpret_cast<LiteNetLib::Utils::INetSerializable*>(this);
    }
    // Creating interface conversion operator: operator GlobalNamespace::IPoolablePacket
    operator GlobalNamespace::IPoolablePacket() noexcept {
      return *reinterpret_cast<GlobalNamespace::IPoolablePacket*>(this);
    }
    // Creating interface conversion operator: operator GlobalNamespace::ISyncStateSerializable_1<GlobalNamespace::NodePoseSyncState>
    operator GlobalNamespace::ISyncStateSerializable_1<GlobalNamespace::NodePoseSyncState>() noexcept {
      return *reinterpret_cast<GlobalNamespace::ISyncStateSerializable_1<GlobalNamespace::NodePoseSyncState>*>(this);
    }
    // Get static field: static public readonly PacketPool`1<NodePoseSyncStateNetSerializable> pool
    static GlobalNamespace::PacketPool_1<GlobalNamespace::NodePoseSyncStateNetSerializable*>* _get_pool();
    // Set static field: static public readonly PacketPool`1<NodePoseSyncStateNetSerializable> pool
    static void _set_pool(GlobalNamespace::PacketPool_1<GlobalNamespace::NodePoseSyncStateNetSerializable*>* value);
    // static private System.Void NoDomainReloadInit()
    // Offset: 0xF8E920
    static void NoDomainReloadInit();
    // static private System.Void .cctor()
    // Offset: 0xF8EAA8
    static void _cctor();
    // private System.Single ISyncStateSerializable<NodePoseSyncState>.get_time()
    // Offset: 0xF8E8E4
    // Implemented from: ISyncStateSerializable`1
    // Base method: System.Single ISyncStateSerializable_1::get_time()
    float GlobalNamespace_ISyncStateSerializable_1_get_time();
    // private System.Void ISyncStateSerializable<NodePoseSyncState>.set_time(System.Single value)
    // Offset: 0xF8E8EC
    // Implemented from: ISyncStateSerializable`1
    // Base method: System.Void ISyncStateSerializable_1::set_time(System.Single value)
    void GlobalNamespace_ISyncStateSerializable_1_set_time(float value);
    // private NodePoseSyncState ISyncStateSerializable<NodePoseSyncState>.get_state()
    // Offset: 0xF8E8F4
    // Implemented from: ISyncStateSerializable`1
    // Base method: T ISyncStateSerializable_1::get_state()
    GlobalNamespace::NodePoseSyncState GlobalNamespace_ISyncStateSerializable_1_get_state();
    // private System.Void ISyncStateSerializable<NodePoseSyncState>.set_state(NodePoseSyncState value)
    // Offset: 0xF8E904
    // Implemented from: ISyncStateSerializable`1
    // Base method: System.Void ISyncStateSerializable_1::set_state(NodePoseSyncState value)
    void GlobalNamespace_ISyncStateSerializable_1_set_state(GlobalNamespace::NodePoseSyncState value);
    // public System.Void Serialize(LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0xF8E99C
    // Implemented from: LiteNetLib.Utils.INetSerializable
    // Base method: System.Void INetSerializable::Serialize(LiteNetLib.Utils.NetDataWriter writer)
    void Serialize(LiteNetLib::Utils::NetDataWriter* writer);
    // Creating proxy method: LiteNetLib_Utils_INetSerializable_Serialize
    // Maps to method: Serialize
    void LiteNetLib_Utils_INetSerializable_Serialize(LiteNetLib::Utils::NetDataWriter* writer);
    // public System.Void Deserialize(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0xF8E9DC
    // Implemented from: LiteNetLib.Utils.INetSerializable
    // Base method: System.Void INetSerializable::Deserialize(LiteNetLib.Utils.NetDataReader reader)
    void Deserialize(LiteNetLib::Utils::NetDataReader* reader);
    // Creating proxy method: LiteNetLib_Utils_INetSerializable_Deserialize
    // Maps to method: Deserialize
    void LiteNetLib_Utils_INetSerializable_Deserialize(LiteNetLib::Utils::NetDataReader* reader);
    // public System.Void Release()
    // Offset: 0xF8EA1C
    // Implemented from: IPoolablePacket
    // Base method: System.Void IPoolablePacket::Release()
    void Release();
    // public System.Void .ctor()
    // Offset: 0xF8EAA0
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NodePoseSyncStateNetSerializable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NodePoseSyncStateNetSerializable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NodePoseSyncStateNetSerializable*, creationType>()));
    }
  }; // NodePoseSyncStateNetSerializable
  #pragma pack(pop)
  static check_size<sizeof(NodePoseSyncStateNetSerializable), 20 + sizeof(GlobalNamespace::NodePoseSyncState)> __GlobalNamespace_NodePoseSyncStateNetSerializableSizeCheck;
  static_assert(sizeof(NodePoseSyncStateNetSerializable) == 0x68);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::NodePoseSyncStateNetSerializable*, "", "NodePoseSyncStateNetSerializable");
