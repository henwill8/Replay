// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
// Including type: BeatmapDifficultyMask
#include "GlobalNamespace/BeatmapDifficultyMask.hpp"
// Including type: BeatmapLevelsModel
#include "GlobalNamespace/BeatmapLevelsModel.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: EventBinder
  class EventBinder;
  // Forward declaring type: StandardLevelDetailView
  class StandardLevelDetailView;
  // Forward declaring type: StandardLevelBuyView
  class StandardLevelBuyView;
  // Forward declaring type: StandardLevelBuyInfoView
  class StandardLevelBuyInfoView;
  // Forward declaring type: LoadingControl
  class LoadingControl;
  // Forward declaring type: PlayerDataModel
  class PlayerDataModel;
  // Forward declaring type: AdditionalContentModel
  class AdditionalContentModel;
  // Skipping declaration: ContentType because it is already included!
  // Forward declaring type: IBeatmapLevelPack
  class IBeatmapLevelPack;
  // Forward declaring type: IBeatmapLevel
  class IBeatmapLevel;
  // Forward declaring type: IDifficultyBeatmap
  class IDifficultyBeatmap;
  // Forward declaring type: IPreviewBeatmapLevel
  class IPreviewBeatmapLevel;
  // Forward declaring type: BeatmapCharacteristicSO
  class BeatmapCharacteristicSO;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationTokenSource
  class CancellationTokenSource;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Toggle
  class Toggle;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: StandardLevelDetailViewController
  class StandardLevelDetailViewController : public HMUI::ViewController {
    public:
    // Nested type: GlobalNamespace::StandardLevelDetailViewController::ContentType
    struct ContentType;
    // Nested type: GlobalNamespace::StandardLevelDetailViewController::$$c__DisplayClass44_0
    class $$c__DisplayClass44_0;
    // Nested type: GlobalNamespace::StandardLevelDetailViewController::$LoadBeatmapLevelAsync$d__51
    struct $LoadBeatmapLevelAsync$d__51;
    // Nested type: GlobalNamespace::StandardLevelDetailViewController::$OpenLevelProductStoreOrShowBuyInfoAsync$d__53
    struct $OpenLevelProductStoreOrShowBuyInfoAsync$d__53;
    // Nested type: GlobalNamespace::StandardLevelDetailViewController::$OpenLevelProductStoreAsync$d__54
    struct $OpenLevelProductStoreAsync$d__54;
    // Nested type: GlobalNamespace::StandardLevelDetailViewController::$OpenLevelPackProductStoreAsync$d__55
    struct $OpenLevelPackProductStoreAsync$d__55;
    // Nested type: GlobalNamespace::StandardLevelDetailViewController::$RefreshAvailabilityAsync$d__57
    struct $RefreshAvailabilityAsync$d__57;
    // Autogenerated type: StandardLevelDetailViewController/ContentType
    struct ContentType : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: ContentType
      constexpr ContentType(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public StandardLevelDetailViewController/ContentType Loading
      static constexpr const int Loading = 0;
      // Get static field: static public StandardLevelDetailViewController/ContentType Loading
      static GlobalNamespace::StandardLevelDetailViewController::ContentType _get_Loading();
      // Set static field: static public StandardLevelDetailViewController/ContentType Loading
      static void _set_Loading(GlobalNamespace::StandardLevelDetailViewController::ContentType value);
      // static field const value: static public StandardLevelDetailViewController/ContentType OwnedAndReady
      static constexpr const int OwnedAndReady = 1;
      // Get static field: static public StandardLevelDetailViewController/ContentType OwnedAndReady
      static GlobalNamespace::StandardLevelDetailViewController::ContentType _get_OwnedAndReady();
      // Set static field: static public StandardLevelDetailViewController/ContentType OwnedAndReady
      static void _set_OwnedAndReady(GlobalNamespace::StandardLevelDetailViewController::ContentType value);
      // static field const value: static public StandardLevelDetailViewController/ContentType NoAllowedDifficultyBeatmap
      static constexpr const int NoAllowedDifficultyBeatmap = 2;
      // Get static field: static public StandardLevelDetailViewController/ContentType NoAllowedDifficultyBeatmap
      static GlobalNamespace::StandardLevelDetailViewController::ContentType _get_NoAllowedDifficultyBeatmap();
      // Set static field: static public StandardLevelDetailViewController/ContentType NoAllowedDifficultyBeatmap
      static void _set_NoAllowedDifficultyBeatmap(GlobalNamespace::StandardLevelDetailViewController::ContentType value);
      // static field const value: static public StandardLevelDetailViewController/ContentType OwnedAndDownloading
      static constexpr const int OwnedAndDownloading = 3;
      // Get static field: static public StandardLevelDetailViewController/ContentType OwnedAndDownloading
      static GlobalNamespace::StandardLevelDetailViewController::ContentType _get_OwnedAndDownloading();
      // Set static field: static public StandardLevelDetailViewController/ContentType OwnedAndDownloading
      static void _set_OwnedAndDownloading(GlobalNamespace::StandardLevelDetailViewController::ContentType value);
      // static field const value: static public StandardLevelDetailViewController/ContentType Buy
      static constexpr const int Buy = 4;
      // Get static field: static public StandardLevelDetailViewController/ContentType Buy
      static GlobalNamespace::StandardLevelDetailViewController::ContentType _get_Buy();
      // Set static field: static public StandardLevelDetailViewController/ContentType Buy
      static void _set_Buy(GlobalNamespace::StandardLevelDetailViewController::ContentType value);
      // static field const value: static public StandardLevelDetailViewController/ContentType BuyInfo
      static constexpr const int BuyInfo = 5;
      // Get static field: static public StandardLevelDetailViewController/ContentType BuyInfo
      static GlobalNamespace::StandardLevelDetailViewController::ContentType _get_BuyInfo();
      // Set static field: static public StandardLevelDetailViewController/ContentType BuyInfo
      static void _set_BuyInfo(GlobalNamespace::StandardLevelDetailViewController::ContentType value);
      // static field const value: static public StandardLevelDetailViewController/ContentType Error
      static constexpr const int Error = 6;
      // Get static field: static public StandardLevelDetailViewController/ContentType Error
      static GlobalNamespace::StandardLevelDetailViewController::ContentType _get_Error();
      // Set static field: static public StandardLevelDetailViewController/ContentType Error
      static void _set_Error(GlobalNamespace::StandardLevelDetailViewController::ContentType value);
      // static field const value: static public StandardLevelDetailViewController/ContentType Inactive
      static constexpr const int Inactive = 7;
      // Get static field: static public StandardLevelDetailViewController/ContentType Inactive
      static GlobalNamespace::StandardLevelDetailViewController::ContentType _get_Inactive();
      // Set static field: static public StandardLevelDetailViewController/ContentType Inactive
      static void _set_Inactive(GlobalNamespace::StandardLevelDetailViewController::ContentType value);
    }; // StandardLevelDetailViewController/ContentType
    // private StandardLevelDetailView _standardLevelDetailView
    // Offset: 0x70
    GlobalNamespace::StandardLevelDetailView* standardLevelDetailView;
    // private StandardLevelBuyView _standardLevelBuyView
    // Offset: 0x78
    GlobalNamespace::StandardLevelBuyView* standardLevelBuyView;
    // private StandardLevelBuyInfoView _standardLevelBuyInfoView
    // Offset: 0x80
    GlobalNamespace::StandardLevelBuyInfoView* standardLevelBuyInfoView;
    // private LoadingControl _loadingControl
    // Offset: 0x88
    GlobalNamespace::LoadingControl* loadingControl;
    // private UnityEngine.GameObject _requireInternetContainer
    // Offset: 0x90
    UnityEngine::GameObject* requireInternetContainer;
    // private UnityEngine.GameObject _noAllowedBeatmapInfoContainer
    // Offset: 0x98
    UnityEngine::GameObject* noAllowedBeatmapInfoContainer;
    // private PlayerDataModel _playerDataModel
    // Offset: 0xA0
    GlobalNamespace::PlayerDataModel* playerDataModel;
    // private AdditionalContentModel _additionalContentModel
    // Offset: 0xA8
    GlobalNamespace::AdditionalContentModel* additionalContentModel;
    // private BeatmapLevelsModel _beatmapLevelsModel
    // Offset: 0xB0
    GlobalNamespace::BeatmapLevelsModel* beatmapLevelsModel;
    // private System.Action`1<StandardLevelDetailViewController> didPressActionButtonEvent
    // Offset: 0xB8
    System::Action_1<GlobalNamespace::StandardLevelDetailViewController*>* didPressActionButtonEvent;
    // private System.Action`2<StandardLevelDetailViewController,IBeatmapLevelPack> didPressOpenLevelPackButtonEvent
    // Offset: 0xC0
    System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IBeatmapLevelPack*>* didPressOpenLevelPackButtonEvent;
    // private System.Action`2<StandardLevelDetailViewController,System.Boolean> levelFavoriteStatusDidChangeEvent
    // Offset: 0xC8
    System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, bool>* levelFavoriteStatusDidChangeEvent;
    // private System.Action`2<StandardLevelDetailViewController,IBeatmapLevel> didPressPracticeButtonEvent
    // Offset: 0xD0
    System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IBeatmapLevel*>* didPressPracticeButtonEvent;
    // private System.Action`2<StandardLevelDetailViewController,IDifficultyBeatmap> didChangeDifficultyBeatmapEvent
    // Offset: 0xD8
    System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IDifficultyBeatmap*>* didChangeDifficultyBeatmapEvent;
    // private System.Action`2<StandardLevelDetailViewController,StandardLevelDetailViewController/ContentType> didChangeContentEvent
    // Offset: 0xE0
    System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::StandardLevelDetailViewController::ContentType>* didChangeContentEvent;
    // private EventBinder _eventBinder
    // Offset: 0xE8
    GlobalNamespace::EventBinder* eventBinder;
    // private System.Threading.CancellationTokenSource _cancellationTokenSource
    // Offset: 0xF0
    System::Threading::CancellationTokenSource* cancellationTokenSource;
    // private IPreviewBeatmapLevel _previewBeatmapLevel
    // Offset: 0xF8
    GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel;
    // private IBeatmapLevel _beatmapLevel
    // Offset: 0x100
    GlobalNamespace::IBeatmapLevel* beatmapLevel;
    // private IBeatmapLevelPack _pack
    // Offset: 0x108
    GlobalNamespace::IBeatmapLevelPack* pack;
    // private System.Boolean _canBuyPack
    // Offset: 0x110
    bool canBuyPack;
    // private System.Boolean _showPlayerStats
    // Offset: 0x111
    bool showPlayerStats;
    // private System.Threading.CancellationTokenSource _loadingLevelCancellationTokenSource
    // Offset: 0x118
    System::Threading::CancellationTokenSource* loadingLevelCancellationTokenSource;
    // private BeatmapDifficultyMask _allowedBeatmapDifficultyMask
    // Offset: 0x120
    GlobalNamespace::BeatmapDifficultyMask allowedBeatmapDifficultyMask;
    // private System.Collections.Generic.HashSet`1<BeatmapCharacteristicSO> _notAllowedCharacteristics
    // Offset: 0x128
    System::Collections::Generic::HashSet_1<GlobalNamespace::BeatmapCharacteristicSO*>* notAllowedCharacteristics;
    // static field const value: static private System.String kLoadingDataErrorNoInternetLocalizationKey
    static constexpr const char* kLoadingDataErrorNoInternetLocalizationKey = "ERROR_LOADING_DATA_NO_INTERNET_MESSAGE";
    // Get static field: static private System.String kLoadingDataErrorNoInternetLocalizationKey
    static ::Il2CppString* _get_kLoadingDataErrorNoInternetLocalizationKey();
    // Set static field: static private System.String kLoadingDataErrorNoInternetLocalizationKey
    static void _set_kLoadingDataErrorNoInternetLocalizationKey(::Il2CppString* value);
    // static field const value: static private System.String kLoadingDataErrorLocalizationKey
    static constexpr const char* kLoadingDataErrorLocalizationKey = "ERROR_LOADING_DATA";
    // Get static field: static private System.String kLoadingDataErrorLocalizationKey
    static ::Il2CppString* _get_kLoadingDataErrorLocalizationKey();
    // Set static field: static private System.String kLoadingDataErrorLocalizationKey
    static void _set_kLoadingDataErrorLocalizationKey(::Il2CppString* value);
    // public System.Void add_didPressActionButtonEvent(System.Action`1<StandardLevelDetailViewController> value)
    // Offset: 0xF3F644
    void add_didPressActionButtonEvent(System::Action_1<GlobalNamespace::StandardLevelDetailViewController*>* value);
    // public System.Void remove_didPressActionButtonEvent(System.Action`1<StandardLevelDetailViewController> value)
    // Offset: 0xF3F6E8
    void remove_didPressActionButtonEvent(System::Action_1<GlobalNamespace::StandardLevelDetailViewController*>* value);
    // public System.Void add_didPressOpenLevelPackButtonEvent(System.Action`2<StandardLevelDetailViewController,IBeatmapLevelPack> value)
    // Offset: 0xF3F78C
    void add_didPressOpenLevelPackButtonEvent(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IBeatmapLevelPack*>* value);
    // public System.Void remove_didPressOpenLevelPackButtonEvent(System.Action`2<StandardLevelDetailViewController,IBeatmapLevelPack> value)
    // Offset: 0xF3F830
    void remove_didPressOpenLevelPackButtonEvent(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IBeatmapLevelPack*>* value);
    // public System.Void add_levelFavoriteStatusDidChangeEvent(System.Action`2<StandardLevelDetailViewController,System.Boolean> value)
    // Offset: 0xF3F8D4
    void add_levelFavoriteStatusDidChangeEvent(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, bool>* value);
    // public System.Void remove_levelFavoriteStatusDidChangeEvent(System.Action`2<StandardLevelDetailViewController,System.Boolean> value)
    // Offset: 0xF3F978
    void remove_levelFavoriteStatusDidChangeEvent(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, bool>* value);
    // public System.Void add_didPressPracticeButtonEvent(System.Action`2<StandardLevelDetailViewController,IBeatmapLevel> value)
    // Offset: 0xF3FA1C
    void add_didPressPracticeButtonEvent(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IBeatmapLevel*>* value);
    // public System.Void remove_didPressPracticeButtonEvent(System.Action`2<StandardLevelDetailViewController,IBeatmapLevel> value)
    // Offset: 0xF3FAC0
    void remove_didPressPracticeButtonEvent(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IBeatmapLevel*>* value);
    // public System.Void add_didChangeDifficultyBeatmapEvent(System.Action`2<StandardLevelDetailViewController,IDifficultyBeatmap> value)
    // Offset: 0xF3FB64
    void add_didChangeDifficultyBeatmapEvent(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IDifficultyBeatmap*>* value);
    // public System.Void remove_didChangeDifficultyBeatmapEvent(System.Action`2<StandardLevelDetailViewController,IDifficultyBeatmap> value)
    // Offset: 0xF3FC08
    void remove_didChangeDifficultyBeatmapEvent(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::IDifficultyBeatmap*>* value);
    // public System.Void add_didChangeContentEvent(System.Action`2<StandardLevelDetailViewController,StandardLevelDetailViewController/ContentType> value)
    // Offset: 0xF3FCAC
    void add_didChangeContentEvent(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::StandardLevelDetailViewController::ContentType>* value);
    // public System.Void remove_didChangeContentEvent(System.Action`2<StandardLevelDetailViewController,StandardLevelDetailViewController/ContentType> value)
    // Offset: 0xF3FD50
    void remove_didChangeContentEvent(System::Action_2<GlobalNamespace::StandardLevelDetailViewController*, GlobalNamespace::StandardLevelDetailViewController::ContentType>* value);
    // public IDifficultyBeatmap get_selectedDifficultyBeatmap()
    // Offset: 0xF3FDF4
    GlobalNamespace::IDifficultyBeatmap* get_selectedDifficultyBeatmap();
    // public System.Void SetData(IPreviewBeatmapLevel previewBeatmapLevel, System.Boolean showPlayerStats, System.Boolean hidePracticeButton, System.Boolean hide360DegreeBeatmapCharacteristic, System.String playButtonText, BeatmapDifficultyMask allowedBeatmapDifficultyMask, BeatmapCharacteristicSO[] notAllowedCharacteristics)
    // Offset: 0xF3FE10
    void SetData(GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel, bool showPlayerStats, bool hidePracticeButton, bool hide360DegreeBeatmapCharacteristic, ::Il2CppString* playButtonText, GlobalNamespace::BeatmapDifficultyMask allowedBeatmapDifficultyMask, ::Array<GlobalNamespace::BeatmapCharacteristicSO*>* notAllowedCharacteristics);
    // public System.Void SetData(IBeatmapLevelPack pack, IPreviewBeatmapLevel previewBeatmapLevel, System.Boolean showPlayerStats, System.Boolean hidePracticeButton, System.Boolean hide360DegreeBeatmapCharacteristic, System.Boolean canBuyPack, System.String playButtonText, BeatmapDifficultyMask allowedBeatmapDifficultyMask, BeatmapCharacteristicSO[] notAllowedCharacteristics)
    // Offset: 0xF3FF3C
    void SetData(GlobalNamespace::IBeatmapLevelPack* pack, GlobalNamespace::IPreviewBeatmapLevel* previewBeatmapLevel, bool showPlayerStats, bool hidePracticeButton, bool hide360DegreeBeatmapCharacteristic, bool canBuyPack, ::Il2CppString* playButtonText, GlobalNamespace::BeatmapDifficultyMask allowedBeatmapDifficultyMask, ::Array<GlobalNamespace::BeatmapCharacteristicSO*>* notAllowedCharacteristics);
    // private System.Void UpdateActionButtonIntractability()
    // Offset: 0xF407F0
    void UpdateActionButtonIntractability();
    // private System.Void HandleDidPressPracticeButton()
    // Offset: 0xF40A00
    void HandleDidPressPracticeButton();
    // private System.Void HandleLevelLoadingUpdate(BeatmapLevelsModel/LevelDownloadingUpdate levelLoadingUpdate)
    // Offset: 0xF40A6C
    void HandleLevelLoadingUpdate(GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate levelLoadingUpdate);
    // private System.Void UpdateDownloading(System.Boolean preparingToDownload, System.UInt32 bytesTransferred, System.UInt32 bytesTotal)
    // Offset: 0xF40B84
    void UpdateDownloading(bool preparingToDownload, uint bytesTransferred, uint bytesTotal);
    // private System.Void LoadBeatmapLevelAsync()
    // Offset: 0xF40DE8
    void LoadBeatmapLevelAsync();
    // public System.Void RefreshContentLevelDetailView()
    // Offset: 0xF40EB8
    void RefreshContentLevelDetailView();
    // private System.Void OpenLevelProductStoreOrShowBuyInfoAsync()
    // Offset: 0xF40ED0
    void OpenLevelProductStoreOrShowBuyInfoAsync();
    // private System.Void OpenLevelProductStoreAsync()
    // Offset: 0xF40FAC
    void OpenLevelProductStoreAsync();
    // private System.Void OpenLevelPackProductStoreAsync()
    // Offset: 0xF41088
    void OpenLevelPackProductStoreAsync();
    // private System.Void OpenLevelPack()
    // Offset: 0xF41164
    void OpenLevelPack();
    // private System.Void RefreshAvailabilityAsync()
    // Offset: 0xF4008C
    void RefreshAvailabilityAsync();
    // private System.Void ShowContent(StandardLevelDetailViewController/ContentType contentType, System.String errorText, System.Single downloadingProgress, System.String downloadingText)
    // Offset: 0xF40C48
    void ShowContent(GlobalNamespace::StandardLevelDetailViewController::ContentType contentType, ::Il2CppString* errorText, float downloadingProgress, ::Il2CppString* downloadingText);
    // private System.Void HandleAdditionalContentModelDidInvalidateData()
    // Offset: 0xF411CC
    void HandleAdditionalContentModelDidInvalidateData();
    // private System.Void <DidActivate>b__44_0()
    // Offset: 0xF41244
    void $DidActivate$b__44_0();
    // private System.Void <DidActivate>b__44_1()
    // Offset: 0xF412A8
    void $DidActivate$b__44_1();
    // private System.Void <DidActivate>b__44_4(StandardLevelDetailView view, IDifficultyBeatmap beatmap)
    // Offset: 0xF412AC
    void $DidActivate$b__44_4(GlobalNamespace::StandardLevelDetailView* view, GlobalNamespace::IDifficultyBeatmap* beatmap);
    // private System.Void <DidActivate>b__44_5(StandardLevelDetailView view, UnityEngine.UI.Toggle toggle)
    // Offset: 0xF414B4
    void $DidActivate$b__44_5(GlobalNamespace::StandardLevelDetailView* view, UnityEngine::UI::Toggle* toggle);
    // protected override System.Void DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0xF40168
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
    // protected override System.Void DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    // Offset: 0xF405E4
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    void DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling);
    // protected override System.Void OnDestroy()
    // Offset: 0xF406FC
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::OnDestroy()
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0xF411D0
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static StandardLevelDetailViewController* New_ctor();
  }; // StandardLevelDetailViewController
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::StandardLevelDetailViewController*, "", "StandardLevelDetailViewController");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::StandardLevelDetailViewController::ContentType, "", "StandardLevelDetailViewController/ContentType");
#pragma pack(pop)
