// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IConnectionManager
#include "GlobalNamespace/IConnectionManager.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  class Action_3;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OculusNetworkPlayerModel
  class OculusNetworkPlayerModel;
  // Forward declaring type: IConnection
  class IConnection;
  // Forward declaring type: IConnectionInitParams`1<T>
  template<typename T>
  class IConnectionInitParams_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataReader
  class NetDataReader;
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
}
// Forward declaring namespace: Oculus::Platform
namespace Oculus::Platform {
  // Forward declaring type: Message`1<T>
  template<typename T>
  class Message_1;
  // Forward declaring type: SendPolicy
  struct SendPolicy;
}
// Forward declaring namespace: Oculus::Platform::Models
namespace Oculus::Platform::Models {
  // Forward declaring type: NetworkingPeer
  class NetworkingPeer;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: OculusConnectionManager
  // [] Offset: FFFFFFFF
  class OculusConnectionManager : public ::Il2CppObject/*, public GlobalNamespace::IConnectionManager*/ {
    public:
    // Nested type: GlobalNamespace::OculusConnectionManager::NetworkMode
    struct NetworkMode;
    // Nested type: GlobalNamespace::OculusConnectionManager::OculusConnection
    class OculusConnection;
    // Nested type: GlobalNamespace::OculusConnectionManager::StartServerParams
    class StartServerParams;
    // Nested type: GlobalNamespace::OculusConnectionManager::ConnectToServerParams
    class ConnectToServerParams;
    // Nested type: GlobalNamespace::OculusConnectionManager::$HandlePeerConnectionRequest$d__62
    struct $HandlePeerConnectionRequest$d__62;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: OculusConnectionManager/NetworkMode
    // [] Offset: FFFFFFFF
    struct NetworkMode/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: NetworkMode
      constexpr NetworkMode(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public OculusConnectionManager/NetworkMode None
      static constexpr const int None = 0;
      // Get static field: static public OculusConnectionManager/NetworkMode None
      static GlobalNamespace::OculusConnectionManager::NetworkMode _get_None();
      // Set static field: static public OculusConnectionManager/NetworkMode None
      static void _set_None(GlobalNamespace::OculusConnectionManager::NetworkMode value);
      // static field const value: static public OculusConnectionManager/NetworkMode Client
      static constexpr const int Client = 1;
      // Get static field: static public OculusConnectionManager/NetworkMode Client
      static GlobalNamespace::OculusConnectionManager::NetworkMode _get_Client();
      // Set static field: static public OculusConnectionManager/NetworkMode Client
      static void _set_Client(GlobalNamespace::OculusConnectionManager::NetworkMode value);
      // static field const value: static public OculusConnectionManager/NetworkMode Server
      static constexpr const int Server = 2;
      // Get static field: static public OculusConnectionManager/NetworkMode Server
      static GlobalNamespace::OculusConnectionManager::NetworkMode _get_Server();
      // Set static field: static public OculusConnectionManager/NetworkMode Server
      static void _set_Server(GlobalNamespace::OculusConnectionManager::NetworkMode value);
    }; // OculusConnectionManager/NetworkMode
    #pragma pack(pop)
    static check_size<sizeof(OculusConnectionManager::NetworkMode), 0 + sizeof(int)> __GlobalNamespace_OculusConnectionManager_NetworkModeSizeCheck;
    static_assert(sizeof(OculusConnectionManager::NetworkMode) == 0x4);
    // private readonly System.Collections.Generic.List`1<OculusConnectionManager/OculusConnection> _connections
    // Size: 0x8
    // Offset: 0x10
    System::Collections::Generic::List_1<GlobalNamespace::OculusConnectionManager::OculusConnection*>* connections;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::OculusConnectionManager::OculusConnection*>*) == 0x8);
    // private readonly LiteNetLib.Utils.NetDataReader _dataReader
    // Size: 0x8
    // Offset: 0x18
    LiteNetLib::Utils::NetDataReader* dataReader;
    // Field size check
    static_assert(sizeof(LiteNetLib::Utils::NetDataReader*) == 0x8);
    // private OculusNetworkPlayerModel _oculusNetworkPlayerModel
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::OculusNetworkPlayerModel* oculusNetworkPlayerModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OculusNetworkPlayerModel*) == 0x8);
    // private OculusConnectionManager/NetworkMode _mode
    // Size: 0x4
    // Offset: 0x28
    GlobalNamespace::OculusConnectionManager::NetworkMode mode;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OculusConnectionManager::NetworkMode) == 0x4);
    // private System.Single _lastPingTime
    // Size: 0x4
    // Offset: 0x2C
    float lastPingTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _connectionEstablished
    // Size: 0x1
    // Offset: 0x30
    bool connectionEstablished;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: connectionEstablished and: onConnectedEvent
    char __padding5[0x7] = {};
    // [CompilerGeneratedAttribute] Offset: 0xD36530
    // private System.Action onConnectedEvent
    // Size: 0x8
    // Offset: 0x38
    System::Action* onConnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD36540
    // private System.Action`1<DisconnectedReason> onDisconnectedEvent
    // Size: 0x8
    // Offset: 0x40
    System::Action_1<GlobalNamespace::DisconnectedReason>* onDisconnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::DisconnectedReason>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD36550
    // private System.Action`1<ConnectionFailedReason> onConnectionFailedEvent
    // Size: 0x8
    // Offset: 0x48
    System::Action_1<GlobalNamespace::ConnectionFailedReason>* onConnectionFailedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::ConnectionFailedReason>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD36560
    // private System.Action`1<IConnection> onConnectionConnectedEvent
    // Size: 0x8
    // Offset: 0x50
    System::Action_1<GlobalNamespace::IConnection*>* onConnectionConnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::IConnection*>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD36570
    // private System.Action`2<IConnection,DisconnectedReason> onConnectionDisconnectedEvent
    // Size: 0x8
    // Offset: 0x58
    System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>* onConnectionDisconnectedEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD36580
    // private System.Action`2<IConnection,System.Single> onLatencyUpdatedEvent
    // Size: 0x8
    // Offset: 0x60
    System::Action_2<GlobalNamespace::IConnection*, float>* onLatencyUpdatedEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<GlobalNamespace::IConnection*, float>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD36590
    // private System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,LiteNetLib.DeliveryMethod> onReceivedDataEvent
    // Size: 0x8
    // Offset: 0x68
    System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* onReceivedDataEvent;
    // Field size check
    static_assert(sizeof(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD365A0
    // private System.Boolean <isDisconnecting>k__BackingField
    // Size: 0x1
    // Offset: 0x70
    bool isDisconnecting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isDisconnecting and: buffer
    char __padding13[0x7] = {};
    // private System.Byte[] _buffer
    // Size: 0x8
    // Offset: 0x78
    ::Array<uint8_t>* buffer;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // Creating value type constructor for type: OculusConnectionManager
    OculusConnectionManager(System::Collections::Generic::List_1<GlobalNamespace::OculusConnectionManager::OculusConnection*>* connections_ = {}, LiteNetLib::Utils::NetDataReader* dataReader_ = {}, GlobalNamespace::OculusNetworkPlayerModel* oculusNetworkPlayerModel_ = {}, GlobalNamespace::OculusConnectionManager::NetworkMode mode_ = {}, float lastPingTime_ = {}, bool connectionEstablished_ = {}, System::Action* onConnectedEvent_ = {}, System::Action_1<GlobalNamespace::DisconnectedReason>* onDisconnectedEvent_ = {}, System::Action_1<GlobalNamespace::ConnectionFailedReason>* onConnectionFailedEvent_ = {}, System::Action_1<GlobalNamespace::IConnection*>* onConnectionConnectedEvent_ = {}, System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>* onConnectionDisconnectedEvent_ = {}, System::Action_2<GlobalNamespace::IConnection*, float>* onLatencyUpdatedEvent_ = {}, System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* onReceivedDataEvent_ = {}, bool isDisconnecting_ = {}, ::Array<uint8_t>* buffer_ = {}) noexcept : connections{connections_}, dataReader{dataReader_}, oculusNetworkPlayerModel{oculusNetworkPlayerModel_}, mode{mode_}, lastPingTime{lastPingTime_}, connectionEstablished{connectionEstablished_}, onConnectedEvent{onConnectedEvent_}, onDisconnectedEvent{onDisconnectedEvent_}, onConnectionFailedEvent{onConnectionFailedEvent_}, onConnectionConnectedEvent{onConnectionConnectedEvent_}, onConnectionDisconnectedEvent{onConnectionDisconnectedEvent_}, onLatencyUpdatedEvent{onLatencyUpdatedEvent_}, onReceivedDataEvent{onReceivedDataEvent_}, isDisconnecting{isDisconnecting_}, buffer{buffer_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IConnectionManager
    operator GlobalNamespace::IConnectionManager() noexcept {
      return *reinterpret_cast<GlobalNamespace::IConnectionManager*>(this);
    }
    // static field const value: static private System.Single kPingFrequency
    static constexpr const float kPingFrequency = 15;
    // Get static field: static private System.Single kPingFrequency
    static float _get_kPingFrequency();
    // Set static field: static private System.Single kPingFrequency
    static void _set_kPingFrequency(float value);
    // private System.Void set_isDisconnecting(System.Boolean value)
    // Offset: 0x10FAB80
    void set_isDisconnecting(bool value);
    // public System.Boolean get_isServer()
    // Offset: 0x10FABAC
    bool get_isServer();
    // public System.Boolean get_isClient()
    // Offset: 0x10FABBC
    bool get_isClient();
    // private System.Void DisconnectInternal(DisconnectedReason disconnectedReason, ConnectionFailedReason connectionFailedReason)
    // Offset: 0x10FB358
    void DisconnectInternal(GlobalNamespace::DisconnectedReason disconnectedReason, GlobalNamespace::ConnectionFailedReason connectionFailedReason);
    // private System.Void HandlePeerConnectionRequest(Oculus.Platform.Message`1<Oculus.Platform.Models.NetworkingPeer> message)
    // Offset: 0x10FB62C
    void HandlePeerConnectionRequest(Oculus::Platform::Message_1<Oculus::Platform::Models::NetworkingPeer*>* message);
    // private System.Void HandleConnectionStateChanged(Oculus.Platform.Message`1<Oculus.Platform.Models.NetworkingPeer> message)
    // Offset: 0x10FB728
    void HandleConnectionStateChanged(Oculus::Platform::Message_1<Oculus::Platform::Models::NetworkingPeer*>* message);
    // private OculusConnectionManager/OculusConnection GetConnection(System.UInt64 user)
    // Offset: 0x10FB05C
    GlobalNamespace::OculusConnectionManager::OculusConnection* GetConnection(uint64_t user);
    // private System.Void RemoveConnection(System.UInt64 id, DisconnectedReason reason)
    // Offset: 0x10FB838
    void RemoveConnection(uint64_t id, GlobalNamespace::DisconnectedReason reason);
    // private System.Byte[] AcquireBuffer(System.Int32 size)
    // Offset: 0x10FB1BC
    ::Array<uint8_t>* AcquireBuffer(int size);
    // private System.Void ReleaseBuffer(System.Byte[] buffer)
    // Offset: 0x10FB25C
    void ReleaseBuffer(::Array<uint8_t>* buffer);
    // static private Oculus.Platform.SendPolicy DeliveryMethodToSendPolicy(LiteNetLib.DeliveryMethod deliveryMethod)
    // Offset: 0x10FBA58
    static Oculus::Platform::SendPolicy DeliveryMethodToSendPolicy(LiteNetLib::DeliveryMethod deliveryMethod);
    // static private LiteNetLib.DeliveryMethod SendPolicyToDeliveryMethod(Oculus.Platform.SendPolicy sendPolicy)
    // Offset: 0x10FB248
    static LiteNetLib::DeliveryMethod SendPolicyToDeliveryMethod(Oculus::Platform::SendPolicy sendPolicy);
    // static private System.Void VoidHandler(Oculus.Platform.Message`1<Oculus.Platform.Models.NetworkingPeer> message)
    // Offset: 0x10FBA68
    static void VoidHandler(Oculus::Platform::Message_1<Oculus::Platform::Models::NetworkingPeer*>* message);
    // private System.Void <PollUpdate>b__56_0(OculusConnectionManager/OculusConnection connection, System.Single latency)
    // Offset: 0x10FBB40
    void $PollUpdate$b__56_0(GlobalNamespace::OculusConnectionManager::OculusConnection* connection, float latency);
    // public System.Void add_onConnectedEvent(System.Action value)
    // Offset: 0x10FA094
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::add_onConnectedEvent(System.Action value)
    void add_onConnectedEvent(System::Action* value);
    // public System.Void remove_onConnectedEvent(System.Action value)
    // Offset: 0x10FA138
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::remove_onConnectedEvent(System.Action value)
    void remove_onConnectedEvent(System::Action* value);
    // public System.Void add_onDisconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0x10FA1DC
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::add_onDisconnectedEvent(System.Action`1<DisconnectedReason> value)
    void add_onDisconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value);
    // public System.Void remove_onDisconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0x10FA280
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::remove_onDisconnectedEvent(System.Action`1<DisconnectedReason> value)
    void remove_onDisconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value);
    // public System.Void add_onConnectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    // Offset: 0x10FA324
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::add_onConnectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    void add_onConnectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value);
    // public System.Void remove_onConnectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    // Offset: 0x10FA3C8
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::remove_onConnectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    void remove_onConnectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value);
    // public System.Void add_onConnectionConnectedEvent(System.Action`1<IConnection> value)
    // Offset: 0x10FA46C
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::add_onConnectionConnectedEvent(System.Action`1<IConnection> value)
    void add_onConnectionConnectedEvent(System::Action_1<GlobalNamespace::IConnection*>* value);
    // public System.Void remove_onConnectionConnectedEvent(System.Action`1<IConnection> value)
    // Offset: 0x10FA510
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::remove_onConnectionConnectedEvent(System.Action`1<IConnection> value)
    void remove_onConnectionConnectedEvent(System::Action_1<GlobalNamespace::IConnection*>* value);
    // public System.Void add_onConnectionDisconnectedEvent(System.Action`2<IConnection,DisconnectedReason> value)
    // Offset: 0x10FA5B4
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::add_onConnectionDisconnectedEvent(System.Action`2<IConnection,DisconnectedReason> value)
    void add_onConnectionDisconnectedEvent(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>* value);
    // public System.Void remove_onConnectionDisconnectedEvent(System.Action`2<IConnection,DisconnectedReason> value)
    // Offset: 0x10FA658
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::remove_onConnectionDisconnectedEvent(System.Action`2<IConnection,DisconnectedReason> value)
    void remove_onConnectionDisconnectedEvent(System::Action_2<GlobalNamespace::IConnection*, GlobalNamespace::DisconnectedReason>* value);
    // public System.Void add_onLatencyUpdatedEvent(System.Action`2<IConnection,System.Single> value)
    // Offset: 0x10FA6FC
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::add_onLatencyUpdatedEvent(System.Action`2<IConnection,System.Single> value)
    void add_onLatencyUpdatedEvent(System::Action_2<GlobalNamespace::IConnection*, float>* value);
    // public System.Void remove_onLatencyUpdatedEvent(System.Action`2<IConnection,System.Single> value)
    // Offset: 0x10FA7A0
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::remove_onLatencyUpdatedEvent(System.Action`2<IConnection,System.Single> value)
    void remove_onLatencyUpdatedEvent(System::Action_2<GlobalNamespace::IConnection*, float>* value);
    // public System.Void add_onReceivedDataEvent(System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,LiteNetLib.DeliveryMethod> value)
    // Offset: 0x10FA844
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::add_onReceivedDataEvent(System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,LiteNetLib.DeliveryMethod> value)
    void add_onReceivedDataEvent(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* value);
    // public System.Void remove_onReceivedDataEvent(System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,LiteNetLib.DeliveryMethod> value)
    // Offset: 0x10FA8E8
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::remove_onReceivedDataEvent(System.Action`3<IConnection,LiteNetLib.Utils.NetDataReader,LiteNetLib.DeliveryMethod> value)
    void remove_onReceivedDataEvent(System::Action_3<GlobalNamespace::IConnection*, LiteNetLib::Utils::NetDataReader*, LiteNetLib::DeliveryMethod>* value);
    // public System.String get_userId()
    // Offset: 0x10FA98C
    // Implemented from: IConnectionManager
    // Base method: System.String IConnectionManager::get_userId()
    ::Il2CppString* get_userId();
    // public System.String get_userName()
    // Offset: 0x10FAA54
    // Implemented from: IConnectionManager
    // Base method: System.String IConnectionManager::get_userName()
    ::Il2CppString* get_userName();
    // public System.Boolean get_isConnected()
    // Offset: 0x10FAB20
    // Implemented from: IConnectionManager
    // Base method: System.Boolean IConnectionManager::get_isConnected()
    bool get_isConnected();
    // public System.Boolean get_isConnecting()
    // Offset: 0x10FAB54
    // Implemented from: IConnectionManager
    // Base method: System.Boolean IConnectionManager::get_isConnecting()
    bool get_isConnecting();
    // public System.Boolean get_isDisconnecting()
    // Offset: 0x10FAB78
    // Implemented from: IConnectionManager
    // Base method: System.Boolean IConnectionManager::get_isDisconnecting()
    bool get_isDisconnecting();
    // public System.Boolean get_isDisposed()
    // Offset: 0x10FAB8C
    // Implemented from: IConnectionManager
    // Base method: System.Boolean IConnectionManager::get_isDisposed()
    bool get_isDisposed();
    // public System.Boolean get_isConnectionOwner()
    // Offset: 0x10FAB9C
    // Implemented from: IConnectionManager
    // Base method: System.Boolean IConnectionManager::get_isConnectionOwner()
    bool get_isConnectionOwner();
    // public System.Int32 get_connectionCount()
    // Offset: 0x10FABCC
    // Implemented from: IConnectionManager
    // Base method: System.Int32 IConnectionManager::get_connectionCount()
    int get_connectionCount();
    // public System.Void SendToAll(LiteNetLib.Utils.NetDataWriter writer, LiteNetLib.DeliveryMethod deliveryMethod)
    // Offset: 0x10FAC1C
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::SendToAll(LiteNetLib.Utils.NetDataWriter writer, LiteNetLib.DeliveryMethod deliveryMethod)
    void SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod deliveryMethod);
    // public System.Void SendToAll(LiteNetLib.Utils.NetDataWriter writer, LiteNetLib.DeliveryMethod deliveryMethod, IConnection excludingConnection)
    // Offset: 0x10FAC24
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::SendToAll(LiteNetLib.Utils.NetDataWriter writer, LiteNetLib.DeliveryMethod deliveryMethod, IConnection excludingConnection)
    void SendToAll(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod deliveryMethod, GlobalNamespace::IConnection* excludingConnection);
    // public System.Void PollUpdate()
    // Offset: 0x10FAE70
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::PollUpdate()
    void PollUpdate();
    // public System.Boolean Init(IConnectionInitParams`1<T> initParams)
    // Offset: 0xFFFFFFFF
    // Implemented from: IConnectionManager
    // Base method: System.Boolean IConnectionManager::Init(IConnectionInitParams`1<T> initParams)
    template<class T>
    bool Init(GlobalNamespace::IConnectionInitParams_1<T>* initParams) {
      static_assert(std::is_base_of_v<GlobalNamespace::IConnectionManager, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::Init");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Init", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(initParams)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___generic__method, initParams);
    }
    // public System.Void Disconnect(DisconnectedReason disconnectedReason)
    // Offset: 0x10FB350
    // Implemented from: IConnectionManager
    // Base method: System.Void IConnectionManager::Disconnect(DisconnectedReason disconnectedReason)
    void Disconnect(GlobalNamespace::DisconnectedReason disconnectedReason);
    // public System.Void Dispose()
    // Offset: 0x10FB5A8
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
    // public IConnection GetConnection(System.Int32 index)
    // Offset: 0x10FB5B4
    // Implemented from: IConnectionManager
    // Base method: IConnection IConnectionManager::GetConnection(System.Int32 index)
    GlobalNamespace::IConnection* GetConnection(int index);
    // public System.Void .ctor()
    // Offset: 0x10FBA6C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OculusConnectionManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OculusConnectionManager*, creationType>()));
    }
  }; // OculusConnectionManager
  #pragma pack(pop)
  static check_size<sizeof(OculusConnectionManager), 120 + sizeof(::Array<uint8_t>*)> __GlobalNamespace_OculusConnectionManagerSizeCheck;
  static_assert(sizeof(OculusConnectionManager) == 0x80);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OculusConnectionManager*, "", "OculusConnectionManager");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OculusConnectionManager::NetworkMode, "", "OculusConnectionManager/NetworkMode");
