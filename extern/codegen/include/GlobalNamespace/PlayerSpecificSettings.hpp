// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Nullable`1<T>
  template<typename T>
  struct Nullable_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x32
  #pragma pack(push, 1)
  // Autogenerated type: PlayerSpecificSettings
  // [] Offset: FFFFFFFF
  class PlayerSpecificSettings : public ::Il2CppObject {
    public:
    // private System.Boolean _staticLights
    // Size: 0x1
    // Offset: 0x10
    bool staticLights;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _leftHanded
    // Size: 0x1
    // Offset: 0x11
    bool leftHanded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: leftHanded and: playerHeight
    char __padding1[0x2] = {};
    // private System.Single _playerHeight
    // Size: 0x4
    // Offset: 0x14
    float playerHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _automaticPlayerHeight
    // Size: 0x1
    // Offset: 0x18
    bool automaticPlayerHeight;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: automaticPlayerHeight and: sfxVolume
    char __padding3[0x3] = {};
    // private System.Single _sfxVolume
    // Size: 0x4
    // Offset: 0x1C
    float sfxVolume;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _reduceDebris
    // Size: 0x1
    // Offset: 0x20
    bool reduceDebris;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _noTextsAndHuds
    // Size: 0x1
    // Offset: 0x21
    bool noTextsAndHuds;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _noFailEffects
    // Size: 0x1
    // Offset: 0x22
    bool noFailEffects;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _advancedHud
    // Size: 0x1
    // Offset: 0x23
    bool advancedHud;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _autoRestart
    // Size: 0x1
    // Offset: 0x24
    bool autoRestart;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: autoRestart and: saberTrailIntensity
    char __padding9[0x3] = {};
    // private System.Single _saberTrailIntensity
    // Size: 0x4
    // Offset: 0x28
    float saberTrailIntensity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _noteJumpStartBeatOffset
    // Size: 0x4
    // Offset: 0x2C
    float noteJumpStartBeatOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _hideNoteSpawnEffect
    // Size: 0x1
    // Offset: 0x30
    bool hideNoteSpawnEffect;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _adaptiveSfx
    // Size: 0x1
    // Offset: 0x31
    bool adaptiveSfx;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: PlayerSpecificSettings
    PlayerSpecificSettings(bool staticLights_ = {}, bool leftHanded_ = {}, float playerHeight_ = {}, bool automaticPlayerHeight_ = {}, float sfxVolume_ = {}, bool reduceDebris_ = {}, bool noTextsAndHuds_ = {}, bool noFailEffects_ = {}, bool advancedHud_ = {}, bool autoRestart_ = {}, float saberTrailIntensity_ = {}, float noteJumpStartBeatOffset_ = {}, bool hideNoteSpawnEffect_ = {}, bool adaptiveSfx_ = {}) noexcept : staticLights{staticLights_}, leftHanded{leftHanded_}, playerHeight{playerHeight_}, automaticPlayerHeight{automaticPlayerHeight_}, sfxVolume{sfxVolume_}, reduceDebris{reduceDebris_}, noTextsAndHuds{noTextsAndHuds_}, noFailEffects{noFailEffects_}, advancedHud{advancedHud_}, autoRestart{autoRestart_}, saberTrailIntensity{saberTrailIntensity_}, noteJumpStartBeatOffset{noteJumpStartBeatOffset_}, hideNoteSpawnEffect{hideNoteSpawnEffect_}, adaptiveSfx{adaptiveSfx_} {}
    // public System.Boolean get_staticLights()
    // Offset: 0xFBBC80
    bool get_staticLights();
    // public System.Boolean get_leftHanded()
    // Offset: 0xFBBC88
    bool get_leftHanded();
    // public System.Single get_playerHeight()
    // Offset: 0xFBBC90
    float get_playerHeight();
    // public System.Boolean get_automaticPlayerHeight()
    // Offset: 0xFBBC98
    bool get_automaticPlayerHeight();
    // public System.Single get_sfxVolume()
    // Offset: 0xFBBCA0
    float get_sfxVolume();
    // public System.Boolean get_reduceDebris()
    // Offset: 0xFBBCA8
    bool get_reduceDebris();
    // public System.Boolean get_noTextsAndHuds()
    // Offset: 0xFBBCB0
    bool get_noTextsAndHuds();
    // public System.Boolean get_noFailEffects()
    // Offset: 0xFBBCB8
    bool get_noFailEffects();
    // public System.Boolean get_advancedHud()
    // Offset: 0xFBBCC0
    bool get_advancedHud();
    // public System.Boolean get_autoRestart()
    // Offset: 0xFBBCC8
    bool get_autoRestart();
    // public System.Single get_saberTrailIntensity()
    // Offset: 0xFBBCD0
    float get_saberTrailIntensity();
    // public System.Single get_noteJumpStartBeatOffset()
    // Offset: 0xFBBCD8
    float get_noteJumpStartBeatOffset();
    // public System.Boolean get_hideNoteSpawnEffect()
    // Offset: 0xFBBCE0
    bool get_hideNoteSpawnEffect();
    // public System.Boolean get_adaptiveSfx()
    // Offset: 0xFBBCE8
    bool get_adaptiveSfx();
    // public System.Void .ctor(System.Boolean staticLights, System.Boolean leftHanded, System.Single playerHeight, System.Boolean automaticPlayerHeight, System.Single sfxVolume, System.Boolean reduceDebris, System.Boolean noTextsAndHuds, System.Boolean noFailEffects, System.Boolean advancedHud, System.Boolean autoRestart, System.Single saberTrailIntensity, System.Single noteJumpStartBeatOffset, System.Boolean hideNoteSpawnEffect, System.Boolean adaptiveSfx)
    // Offset: 0xFB89C4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayerSpecificSettings* New_ctor(bool staticLights, bool leftHanded, float playerHeight, bool automaticPlayerHeight, float sfxVolume, bool reduceDebris, bool noTextsAndHuds, bool noFailEffects, bool advancedHud, bool autoRestart, float saberTrailIntensity, float noteJumpStartBeatOffset, bool hideNoteSpawnEffect, bool adaptiveSfx) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayerSpecificSettings*, creationType>(staticLights, leftHanded, playerHeight, automaticPlayerHeight, sfxVolume, reduceDebris, noTextsAndHuds, noFailEffects, advancedHud, autoRestart, saberTrailIntensity, noteJumpStartBeatOffset, hideNoteSpawnEffect, adaptiveSfx)));
    }
    // public PlayerSpecificSettings CopyWith(System.Nullable`1<System.Boolean> staticLights, System.Nullable`1<System.Boolean> leftHanded, System.Nullable`1<System.Single> playerHeight, System.Nullable`1<System.Boolean> automaticPlayerHeight, System.Nullable`1<System.Single> sfxVolume, System.Nullable`1<System.Boolean> reduceDebris, System.Nullable`1<System.Boolean> noTextsAndHuds, System.Nullable`1<System.Boolean> noFailEffects, System.Nullable`1<System.Boolean> advancedHud, System.Nullable`1<System.Boolean> autoRestart, System.Nullable`1<System.Single> saberTrailIntensity, System.Nullable`1<System.Single> noteJumpStartBeatOffset, System.Nullable`1<System.Boolean> hideNoteSpawnEffect, System.Nullable`1<System.Boolean> adaptiveSfx)
    // Offset: 0xFB8E00
    GlobalNamespace::PlayerSpecificSettings* CopyWith(System::Nullable_1<bool> staticLights, System::Nullable_1<bool> leftHanded, System::Nullable_1<float> playerHeight, System::Nullable_1<bool> automaticPlayerHeight, System::Nullable_1<float> sfxVolume, System::Nullable_1<bool> reduceDebris, System::Nullable_1<bool> noTextsAndHuds, System::Nullable_1<bool> noFailEffects, System::Nullable_1<bool> advancedHud, System::Nullable_1<bool> autoRestart, System::Nullable_1<float> saberTrailIntensity, System::Nullable_1<float> noteJumpStartBeatOffset, System::Nullable_1<bool> hideNoteSpawnEffect, System::Nullable_1<bool> adaptiveSfx);
    // public System.Void .ctor()
    // Offset: 0xFB5184
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayerSpecificSettings* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerSpecificSettings::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayerSpecificSettings*, creationType>()));
    }
  }; // PlayerSpecificSettings
  #pragma pack(pop)
  static check_size<sizeof(PlayerSpecificSettings), 49 + sizeof(bool)> __GlobalNamespace_PlayerSpecificSettingsSizeCheck;
  static_assert(sizeof(PlayerSpecificSettings) == 0x32);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PlayerSpecificSettings*, "", "PlayerSpecificSettings");
