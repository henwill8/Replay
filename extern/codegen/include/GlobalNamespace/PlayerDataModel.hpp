// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PlayerDataFileManagerSO
  class PlayerDataFileManagerSO;
  // Forward declaring type: PlayerData
  class PlayerData;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: PlayerDataModel
  // [] Offset: FFFFFFFF
  class PlayerDataModel : public UnityEngine::MonoBehaviour {
    public:
    // private PlayerDataFileManagerSO _playerDataFileManager
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::PlayerDataFileManagerSO* playerDataFileManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerDataFileManagerSO*) == 0x8);
    // private PlayerData _playerData
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::PlayerData* playerData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerData*) == 0x8);
    // Creating value type constructor for type: PlayerDataModel
    PlayerDataModel(GlobalNamespace::PlayerDataFileManagerSO* playerDataFileManager_ = {}, GlobalNamespace::PlayerData* playerData_ = {}) noexcept : playerDataFileManager{playerDataFileManager_}, playerData{playerData_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public PlayerData get_playerData()
    // Offset: 0xFB9490
    GlobalNamespace::PlayerData* get_playerData();
    // protected System.Void OnEnable()
    // Offset: 0xFB9498
    void OnEnable();
    // protected System.Void OnApplicationPause(System.Boolean pauseStatus)
    // Offset: 0xFB94D4
    void OnApplicationPause(bool pauseStatus);
    // protected System.Void OnDisable()
    // Offset: 0xFB9500
    void OnDisable();
    // public System.Void ResetData()
    // Offset: 0xFB9504
    void ResetData();
    // public System.Void Save()
    // Offset: 0xFB94E0
    void Save();
    // public System.Void Load()
    // Offset: 0xFB949C
    void Load();
    // public System.Void .ctor()
    // Offset: 0xFB953C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PlayerDataModel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PlayerDataModel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PlayerDataModel*, creationType>()));
    }
  }; // PlayerDataModel
  #pragma pack(pop)
  static check_size<sizeof(PlayerDataModel), 32 + sizeof(GlobalNamespace::PlayerData*)> __GlobalNamespace_PlayerDataModelSizeCheck;
  static_assert(sizeof(PlayerDataModel) == 0x28);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PlayerDataModel*, "", "PlayerDataModel");
