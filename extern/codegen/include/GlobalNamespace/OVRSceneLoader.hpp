// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: SceneInfo because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Canvas
  class Canvas;
  // Forward declaring type: AsyncOperation
  class AsyncOperation;
  // Forward declaring type: AssetBundle
  class AssetBundle;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Text
  class Text;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: OVRSceneLoader
  // [] Offset: FFFFFFFF
  class OVRSceneLoader : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::OVRSceneLoader::SceneInfo
    struct SceneInfo;
    // Nested type: GlobalNamespace::OVRSceneLoader::$DelayCanvasPosUpdate$d__24
    class $DelayCanvasPosUpdate$d__24;
    // Nested type: GlobalNamespace::OVRSceneLoader::$onCheckSceneCoroutine$d__25
    class $onCheckSceneCoroutine$d__25;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRSceneLoader/SceneInfo
    // [] Offset: FFFFFFFF
    struct SceneInfo/*, public System::ValueType*/ {
      public:
      // public System.Collections.Generic.List`1<System.String> scenes
      // Size: 0x8
      // Offset: 0x0
      System::Collections::Generic::List_1<::Il2CppString*>* scenes;
      // Field size check
      static_assert(sizeof(System::Collections::Generic::List_1<::Il2CppString*>*) == 0x8);
      // public System.Int64 version
      // Size: 0x8
      // Offset: 0x8
      int64_t version;
      // Field size check
      static_assert(sizeof(int64_t) == 0x8);
      // Creating value type constructor for type: SceneInfo
      constexpr SceneInfo(System::Collections::Generic::List_1<::Il2CppString*>* scenes_ = {}, int64_t version_ = {}) noexcept : scenes{scenes_}, version{version_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
      // public System.Void .ctor(System.Collections.Generic.List`1<System.String> sceneList, System.Int64 currentSceneEpochVersion)
      // Offset: 0xE07DFC
      // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      // ABORTED: conflicts with another method.  SceneInfo(System::Collections::Generic::List_1<::Il2CppString*>* sceneList, int64_t currentSceneEpochVersion)
    }; // OVRSceneLoader/SceneInfo
    #pragma pack(pop)
    static check_size<sizeof(OVRSceneLoader::SceneInfo), 8 + sizeof(int64_t)> __GlobalNamespace_OVRSceneLoader_SceneInfoSizeCheck;
    static_assert(sizeof(OVRSceneLoader::SceneInfo) == 0x10);
    // public System.Single sceneCheckIntervalSeconds
    // Size: 0x4
    // Offset: 0x18
    float sceneCheckIntervalSeconds;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single logCloseTime
    // Size: 0x4
    // Offset: 0x1C
    float logCloseTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public UnityEngine.Canvas mainCanvas
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::Canvas* mainCanvas;
    // Field size check
    static_assert(sizeof(UnityEngine::Canvas*) == 0x8);
    // public UnityEngine.UI.Text logTextBox
    // Size: 0x8
    // Offset: 0x28
    UnityEngine::UI::Text* logTextBox;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Text*) == 0x8);
    // private UnityEngine.AsyncOperation loadSceneOperation
    // Size: 0x8
    // Offset: 0x30
    UnityEngine::AsyncOperation* loadSceneOperation;
    // Field size check
    static_assert(sizeof(UnityEngine::AsyncOperation*) == 0x8);
    // private System.String formattedLogText
    // Size: 0x8
    // Offset: 0x38
    ::Il2CppString* formattedLogText;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Single closeLogTimer
    // Size: 0x4
    // Offset: 0x40
    float closeLogTimer;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean closeLogDialogue
    // Size: 0x1
    // Offset: 0x44
    bool closeLogDialogue;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean canvasPosUpdated
    // Size: 0x1
    // Offset: 0x45
    bool canvasPosUpdated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: canvasPosUpdated and: scenePath
    char __padding8[0x2] = {};
    // private System.String scenePath
    // Size: 0x8
    // Offset: 0x48
    ::Il2CppString* scenePath;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.String sceneLoadDataPath
    // Size: 0x8
    // Offset: 0x50
    ::Il2CppString* sceneLoadDataPath;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Collections.Generic.List`1<UnityEngine.AssetBundle> loadedAssetBundles
    // Size: 0x8
    // Offset: 0x58
    System::Collections::Generic::List_1<UnityEngine::AssetBundle*>* loadedAssetBundles;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<UnityEngine::AssetBundle*>*) == 0x8);
    // private OVRSceneLoader/SceneInfo currentSceneInfo
    // Size: 0x10
    // Offset: 0x60
    GlobalNamespace::OVRSceneLoader::SceneInfo currentSceneInfo;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRSceneLoader::SceneInfo) == 0x10);
    // Creating value type constructor for type: OVRSceneLoader
    OVRSceneLoader(float sceneCheckIntervalSeconds_ = {}, float logCloseTime_ = {}, UnityEngine::Canvas* mainCanvas_ = {}, UnityEngine::UI::Text* logTextBox_ = {}, UnityEngine::AsyncOperation* loadSceneOperation_ = {}, ::Il2CppString* formattedLogText_ = {}, float closeLogTimer_ = {}, bool closeLogDialogue_ = {}, bool canvasPosUpdated_ = {}, ::Il2CppString* scenePath_ = {}, ::Il2CppString* sceneLoadDataPath_ = {}, System::Collections::Generic::List_1<UnityEngine::AssetBundle*>* loadedAssetBundles_ = {}, GlobalNamespace::OVRSceneLoader::SceneInfo currentSceneInfo_ = {}) noexcept : sceneCheckIntervalSeconds{sceneCheckIntervalSeconds_}, logCloseTime{logCloseTime_}, mainCanvas{mainCanvas_}, logTextBox{logTextBox_}, loadSceneOperation{loadSceneOperation_}, formattedLogText{formattedLogText_}, closeLogTimer{closeLogTimer_}, closeLogDialogue{closeLogDialogue_}, canvasPosUpdated{canvasPosUpdated_}, scenePath{scenePath_}, sceneLoadDataPath{sceneLoadDataPath_}, loadedAssetBundles{loadedAssetBundles_}, currentSceneInfo{currentSceneInfo_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static public System.String externalStoragePath
    static constexpr const char* externalStoragePath = "/sdcard/Android/data";
    // Get static field: static public System.String externalStoragePath
    static ::Il2CppString* _get_externalStoragePath();
    // Set static field: static public System.String externalStoragePath
    static void _set_externalStoragePath(::Il2CppString* value);
    // static field const value: static public System.String sceneLoadDataName
    static constexpr const char* sceneLoadDataName = "SceneLoadData.txt";
    // Get static field: static public System.String sceneLoadDataName
    static ::Il2CppString* _get_sceneLoadDataName();
    // Set static field: static public System.String sceneLoadDataName
    static void _set_sceneLoadDataName(::Il2CppString* value);
    // static field const value: static public System.String resourceBundleName
    static constexpr const char* resourceBundleName = "asset_resources";
    // Get static field: static public System.String resourceBundleName
    static ::Il2CppString* _get_resourceBundleName();
    // Set static field: static public System.String resourceBundleName
    static void _set_resourceBundleName(::Il2CppString* value);
    // private System.Void Awake()
    // Offset: 0x1533728
    void Awake();
    // private System.Void Start()
    // Offset: 0x15337A4
    void Start();
    // private System.Void LoadScene(OVRSceneLoader/SceneInfo sceneInfo)
    // Offset: 0x1533BA4
    void LoadScene(GlobalNamespace::OVRSceneLoader::SceneInfo sceneInfo);
    // private System.Void LoadSceneOperation_completed(UnityEngine.AsyncOperation obj)
    // Offset: 0x1534438
    void LoadSceneOperation_completed(UnityEngine::AsyncOperation* obj);
    // public System.Void Update()
    // Offset: 0x15345A0
    void Update();
    // private System.Void UpdateCanvasPosition()
    // Offset: 0x15347D8
    void UpdateCanvasPosition();
    // private OVRSceneLoader/SceneInfo GetSceneInfo()
    // Offset: 0x153397C
    GlobalNamespace::OVRSceneLoader::SceneInfo GetSceneInfo();
    // private System.Collections.IEnumerator DelayCanvasPosUpdate()
    // Offset: 0x1533900
    System::Collections::IEnumerator* DelayCanvasPosUpdate();
    // private System.Collections.IEnumerator onCheckSceneCoroutine()
    // Offset: 0x1534524
    System::Collections::IEnumerator* onCheckSceneCoroutine();
    // private System.Void DestroyAllGameObjects()
    // Offset: 0x1534A9C
    void DestroyAllGameObjects();
    // public System.Void .ctor()
    // Offset: 0x1534BB0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRSceneLoader* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRSceneLoader::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRSceneLoader*, creationType>()));
    }
  }; // OVRSceneLoader
  #pragma pack(pop)
  static check_size<sizeof(OVRSceneLoader), 96 + sizeof(GlobalNamespace::OVRSceneLoader::SceneInfo)> __GlobalNamespace_OVRSceneLoaderSizeCheck;
  static_assert(sizeof(OVRSceneLoader) == 0x70);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRSceneLoader*, "", "OVRSceneLoader");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRSceneLoader::SceneInfo, "", "OVRSceneLoader/SceneInfo");
