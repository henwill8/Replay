// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: AuthenticationToken
#include "GlobalNamespace/AuthenticationToken.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: NetworkUtility
  class NetworkUtility : public ::Il2CppObject {
    public:
    // Get static field: static private System.Byte[] _nameEncryptionKey
    static ::Array<uint8_t>* _get__nameEncryptionKey();
    // Set static field: static private System.Byte[] _nameEncryptionKey
    static void _set__nameEncryptionKey(::Array<uint8_t>* value);
    // Get static field: static private System.Byte[] _nameEncryptionIv
    static ::Array<uint8_t>* _get__nameEncryptionIv();
    // Set static field: static private System.Byte[] _nameEncryptionIv
    static void _set__nameEncryptionIv(::Array<uint8_t>* value);
    // static private System.Void .cctor()
    // Offset: 0x1E4BED8
    static void _cctor();
    // static private System.Void NoDomainReloadInit()
    // Offset: 0x1E4BEDC
    static void NoDomainReloadInit();
    // static public System.String GetHashedUserId(System.String userId, AuthenticationToken/Platform platform)
    // Offset: 0x1E4BFB4
    static ::Il2CppString* GetHashedUserId(::Il2CppString* userId, GlobalNamespace::AuthenticationToken::Platform platform);
    // static public System.String EncryptName(System.String text)
    // Offset: 0x1E4C184
    static ::Il2CppString* EncryptName(::Il2CppString* text);
    // static public System.String DecryptName(System.String text)
    // Offset: 0x1E4C4C4
    static ::Il2CppString* DecryptName(::Il2CppString* text);
    // static public System.String GenerateId()
    // Offset: 0x1E4C808
    static ::Il2CppString* GenerateId();
  }; // NetworkUtility
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::NetworkUtility*, "", "NetworkUtility");
#pragma pack(pop)
