// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: BeatmapObjectCallbackController
#include "GlobalNamespace/BeatmapObjectCallbackController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapObjectSpawnMovementData
  class BeatmapObjectSpawnMovementData;
  // Forward declaring type: BeatmapCallbackItemDataList
  class BeatmapCallbackItemDataList;
  // Forward declaring type: IBeatmapObjectSpawner
  class IBeatmapObjectSpawner;
  // Forward declaring type: SpawnRotationProcessor
  class SpawnRotationProcessor;
  // Forward declaring type: VariableBpmProcessor
  class VariableBpmProcessor;
  // Forward declaring type: ObstacleData
  class ObstacleData;
  // Forward declaring type: NoteData
  class NoteData;
  // Forward declaring type: BeatmapEventData
  class BeatmapEventData;
  // Forward declaring type: BeatmapObjectData
  class BeatmapObjectData;
  // Forward declaring type: NoteLineLayer
  struct NoteLineLayer;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x70
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapObjectSpawnController
  // [] Offset: FFFFFFFF
  class BeatmapObjectSpawnController : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::BeatmapObjectSpawnController::InitData
    class InitData;
    // private BeatmapObjectSpawnMovementData _beatmapObjectSpawnMovementData
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::BeatmapObjectSpawnMovementData* beatmapObjectSpawnMovementData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectSpawnMovementData*) == 0x8);
    // [InjectAttribute] Offset: 0xD374E0
    // private readonly BeatmapObjectCallbackController _beatmapObjectCallbackController
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::BeatmapObjectCallbackController* beatmapObjectCallbackController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectCallbackController*) == 0x8);
    // [InjectAttribute] Offset: 0xD374F0
    // private readonly IBeatmapObjectSpawner _beatmapObjectSpawner
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::IBeatmapObjectSpawner* beatmapObjectSpawner;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IBeatmapObjectSpawner*) == 0x8);
    // [InjectAttribute] Offset: 0xD37500
    // private readonly BeatmapObjectSpawnController/InitData _initData
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::BeatmapObjectSpawnController::InitData* initData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectSpawnController::InitData*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD37510
    // private System.Action didInitEvent
    // Size: 0x8
    // Offset: 0x38
    System::Action* didInitEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private System.Single _jumpOffsetY
    // Size: 0x4
    // Offset: 0x40
    float jumpOffsetY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _disableSpawning
    // Size: 0x1
    // Offset: 0x44
    bool disableSpawning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _isInitialized
    // Size: 0x1
    // Offset: 0x45
    bool isInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isInitialized and: beatmapObjectCallbackData
    char __padding7[0x2] = {};
    // private BeatmapObjectCallbackController/BeatmapObjectCallbackData _beatmapObjectCallbackData
    // Size: 0x8
    // Offset: 0x48
    GlobalNamespace::BeatmapObjectCallbackController::BeatmapObjectCallbackData* beatmapObjectCallbackData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectCallbackController::BeatmapObjectCallbackData*) == 0x8);
    // private BeatmapObjectCallbackController/BeatmapEventCallbackData _beatmapEventCallbackData
    // Size: 0x8
    // Offset: 0x50
    GlobalNamespace::BeatmapObjectCallbackController::BeatmapEventCallbackData* beatmapEventCallbackData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectCallbackController::BeatmapEventCallbackData*) == 0x8);
    // private BeatmapCallbackItemDataList _beatmapCallbackItemDataList
    // Size: 0x8
    // Offset: 0x58
    GlobalNamespace::BeatmapCallbackItemDataList* beatmapCallbackItemDataList;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapCallbackItemDataList*) == 0x8);
    // private readonly SpawnRotationProcessor _spawnRotationProcessor
    // Size: 0x8
    // Offset: 0x60
    GlobalNamespace::SpawnRotationProcessor* spawnRotationProcessor;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SpawnRotationProcessor*) == 0x8);
    // private readonly VariableBpmProcessor _variableBpmProcessor
    // Size: 0x8
    // Offset: 0x68
    GlobalNamespace::VariableBpmProcessor* variableBpmProcessor;
    // Field size check
    static_assert(sizeof(GlobalNamespace::VariableBpmProcessor*) == 0x8);
    // Creating value type constructor for type: BeatmapObjectSpawnController
    BeatmapObjectSpawnController(GlobalNamespace::BeatmapObjectSpawnMovementData* beatmapObjectSpawnMovementData_ = {}, GlobalNamespace::BeatmapObjectCallbackController* beatmapObjectCallbackController_ = {}, GlobalNamespace::IBeatmapObjectSpawner* beatmapObjectSpawner_ = {}, GlobalNamespace::BeatmapObjectSpawnController::InitData* initData_ = {}, System::Action* didInitEvent_ = {}, float jumpOffsetY_ = {}, bool disableSpawning_ = {}, bool isInitialized_ = {}, GlobalNamespace::BeatmapObjectCallbackController::BeatmapObjectCallbackData* beatmapObjectCallbackData_ = {}, GlobalNamespace::BeatmapObjectCallbackController::BeatmapEventCallbackData* beatmapEventCallbackData_ = {}, GlobalNamespace::BeatmapCallbackItemDataList* beatmapCallbackItemDataList_ = {}, GlobalNamespace::SpawnRotationProcessor* spawnRotationProcessor_ = {}, GlobalNamespace::VariableBpmProcessor* variableBpmProcessor_ = {}) noexcept : beatmapObjectSpawnMovementData{beatmapObjectSpawnMovementData_}, beatmapObjectCallbackController{beatmapObjectCallbackController_}, beatmapObjectSpawner{beatmapObjectSpawner_}, initData{initData_}, didInitEvent{didInitEvent_}, jumpOffsetY{jumpOffsetY_}, disableSpawning{disableSpawning_}, isInitialized{isInitialized_}, beatmapObjectCallbackData{beatmapObjectCallbackData_}, beatmapEventCallbackData{beatmapEventCallbackData_}, beatmapCallbackItemDataList{beatmapCallbackItemDataList_}, spawnRotationProcessor{spawnRotationProcessor_}, variableBpmProcessor{variableBpmProcessor_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Single get_jumpOffsetY()
    // Offset: 0xF5AB38
    float get_jumpOffsetY();
    // public System.Void set_jumpOffsetY(System.Single value)
    // Offset: 0xF5AB40
    void set_jumpOffsetY(float value);
    // public System.Single get_currentBpm()
    // Offset: 0xF5AB48
    float get_currentBpm();
    // public System.Single get_moveDuration()
    // Offset: 0xF5AB64
    float get_moveDuration();
    // public System.Single get_jumpDuration()
    // Offset: 0xF5AB80
    float get_jumpDuration();
    // public System.Single get_jumpDistance()
    // Offset: 0xF5AB9C
    float get_jumpDistance();
    // public System.Single get_verticalLayerDistance()
    // Offset: 0xF5ABB8
    float get_verticalLayerDistance();
    // public System.Single get_noteJumpMovementSpeed()
    // Offset: 0xF5ABE4
    float get_noteJumpMovementSpeed();
    // public System.Single get_noteLinesDistance()
    // Offset: 0xF5AC00
    float get_noteLinesDistance();
    // public BeatmapObjectSpawnMovementData get_beatmapObjectSpawnMovementData()
    // Offset: 0xF5AC1C
    GlobalNamespace::BeatmapObjectSpawnMovementData* get_beatmapObjectSpawnMovementData();
    // public System.Boolean get_isInitialized()
    // Offset: 0xF5AC24
    bool get_isInitialized();
    // public System.Void add_didInitEvent(System.Action value)
    // Offset: 0xF5AC2C
    void add_didInitEvent(System::Action* value);
    // public System.Void remove_didInitEvent(System.Action value)
    // Offset: 0xF5ACD0
    void remove_didInitEvent(System::Action* value);
    // protected System.Void Start()
    // Offset: 0xF5AD74
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0xF5B1E8
    void OnDestroy();
    // private System.Void SpawnObstacle(ObstacleData obstacleData)
    // Offset: 0xF5B2D4
    void SpawnObstacle(GlobalNamespace::ObstacleData* obstacleData);
    // private System.Void SpawnBasicNote(NoteData noteData, System.Single cutDirectionAngleOffset)
    // Offset: 0xF5B5D4
    void SpawnBasicNote(GlobalNamespace::NoteData* noteData, float cutDirectionAngleOffset);
    // private System.Void SpawnBombNote(NoteData noteData)
    // Offset: 0xF5B914
    void SpawnBombNote(GlobalNamespace::NoteData* noteData);
    // private System.Void ProcessEarlyBeatmapEventData(BeatmapEventData beatmapEventData)
    // Offset: 0xF5BA5C
    void ProcessEarlyBeatmapEventData(GlobalNamespace::BeatmapEventData* beatmapEventData);
    // private System.Void EarlyEventsWereProcessed()
    // Offset: 0xF5BAA0
    void EarlyEventsWereProcessed();
    // private System.Void ProcessLateBeatmapEventData(BeatmapEventData beatmapEventData)
    // Offset: 0xF5BD0C
    void ProcessLateBeatmapEventData(GlobalNamespace::BeatmapEventData* beatmapEventData);
    // private System.Void HandleBeatmapObjectCallback(BeatmapObjectData beatmapObjectData)
    // Offset: 0xF5BD28
    void HandleBeatmapObjectCallback(GlobalNamespace::BeatmapObjectData* beatmapObjectData);
    // private System.Void HandleBeatmapEventCallback(BeatmapEventData beatmapEventData)
    // Offset: 0xF5BD44
    void HandleBeatmapEventCallback(GlobalNamespace::BeatmapEventData* beatmapEventData);
    // private System.Void HandleCallbacksForThisFrameWereProcessed()
    // Offset: 0xF5BD98
    void HandleCallbacksForThisFrameWereProcessed();
    // public System.Void StopSpawning()
    // Offset: 0xF5BDB4
    void StopSpawning();
    // public UnityEngine.Vector2 Get2DNoteOffset(System.Int32 noteLineIndex, NoteLineLayer noteLineLayer)
    // Offset: 0xF5BDC0
    UnityEngine::Vector2 Get2DNoteOffset(int noteLineIndex, GlobalNamespace::NoteLineLayer noteLineLayer);
    // public System.Single JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset(NoteLineLayer lineLayer, System.Single distanceFromPlayer)
    // Offset: 0xF5BE4C
    float JumpPosYForLineLayerAtDistanceFromPlayerWithoutJumpOffset(GlobalNamespace::NoteLineLayer lineLayer, float distanceFromPlayer);
    // public System.Void .ctor()
    // Offset: 0xF5BEE0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapObjectSpawnController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapObjectSpawnController*, creationType>()));
    }
  }; // BeatmapObjectSpawnController
  #pragma pack(pop)
  static check_size<sizeof(BeatmapObjectSpawnController), 104 + sizeof(GlobalNamespace::VariableBpmProcessor*)> __GlobalNamespace_BeatmapObjectSpawnControllerSizeCheck;
  static_assert(sizeof(BeatmapObjectSpawnController) == 0x70);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BeatmapObjectSpawnController*, "", "BeatmapObjectSpawnController");
