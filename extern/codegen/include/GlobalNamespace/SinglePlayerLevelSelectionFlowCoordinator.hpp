// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LevelSelectionFlowCoordinator
#include "GlobalNamespace/LevelSelectionFlowCoordinator.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapCharacteristicSO
  class BeatmapCharacteristicSO;
  // Forward declaring type: PracticeViewController
  class PracticeViewController;
  // Forward declaring type: GameplaySetupViewController
  class GameplaySetupViewController;
  // Forward declaring type: MenuTransitionsHelper
  class MenuTransitionsHelper;
  // Forward declaring type: IVRPlatformHelper
  class IVRPlatformHelper;
  // Forward declaring type: AppStaticSettingsSO
  class AppStaticSettingsSO;
  // Forward declaring type: SimpleDialogPromptViewController
  class SimpleDialogPromptViewController;
  // Forward declaring type: PlayerSpecificSettings
  class PlayerSpecificSettings;
  // Forward declaring type: GameplayModifiers
  class GameplayModifiers;
  // Forward declaring type: LeaderboardViewController
  class LeaderboardViewController;
  // Forward declaring type: LevelCompletionResults
  class LevelCompletionResults;
  // Forward declaring type: IDifficultyBeatmap
  class IDifficultyBeatmap;
  // Forward declaring type: StandardLevelScenesTransitionSetupDataSO
  class StandardLevelScenesTransitionSetupDataSO;
  // Forward declaring type: IBeatmapLevelPack
  class IBeatmapLevelPack;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: SinglePlayerLevelSelectionFlowCoordinator
  class SinglePlayerLevelSelectionFlowCoordinator : public GlobalNamespace::LevelSelectionFlowCoordinator {
    public:
    // Nested type: GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator::$$c__DisplayClass37_0
    class $$c__DisplayClass37_0;
    // private BeatmapCharacteristicSO _degree360BeatmapCharacteristic
    // Offset: 0xD0
    GlobalNamespace::BeatmapCharacteristicSO* degree360BeatmapCharacteristic;
    // private readonly PracticeViewController _practiceViewController
    // Offset: 0xD8
    GlobalNamespace::PracticeViewController* practiceViewController;
    // private readonly GameplaySetupViewController _gameplaySetupViewController
    // Offset: 0xE0
    GlobalNamespace::GameplaySetupViewController* gameplaySetupViewController;
    // private readonly MenuTransitionsHelper _menuTransitionsHelper
    // Offset: 0xE8
    GlobalNamespace::MenuTransitionsHelper* menuTransitionsHelper;
    // private readonly IVRPlatformHelper _vrPlatformHelper
    // Offset: 0xF0
    GlobalNamespace::IVRPlatformHelper* vrPlatformHelper;
    // private readonly AppStaticSettingsSO _appStaticSettings
    // Offset: 0xF8
    GlobalNamespace::AppStaticSettingsSO* appStaticSettings;
    // private readonly SimpleDialogPromptViewController _simpleDialogPromptViewController
    // Offset: 0x100
    GlobalNamespace::SimpleDialogPromptViewController* simpleDialogPromptViewController;
    // private System.Action`1<SinglePlayerLevelSelectionFlowCoordinator> didFinishEvent
    // Offset: 0x108
    System::Action_1<GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator*>* didFinishEvent;
    // protected System.String get_gameMode()
    // Offset: 0xFFFFFFFF
    ::Il2CppString* get_gameMode();
    // protected System.Boolean get_isInPracticeView()
    // Offset: 0xFCE80C
    bool get_isInPracticeView();
    // protected PlayerSpecificSettings get_playerSettings()
    // Offset: 0xFD1594
    GlobalNamespace::PlayerSpecificSettings* get_playerSettings();
    // private GameplayModifiers get_gameplayModifiers()
    // Offset: 0xFD15CC
    GlobalNamespace::GameplayModifiers* get_gameplayModifiers();
    // protected System.Boolean get_hideGameplaySetup()
    // Offset: 0xFD15E8
    bool get_hideGameplaySetup();
    // protected LeaderboardViewController get_leaderboardViewController()
    // Offset: 0xFD15F0
    GlobalNamespace::LeaderboardViewController* get_leaderboardViewController();
    // protected System.Void SinglePlayerLevelSelectionFlowCoordinatorDidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy)
    // Offset: 0xFD163C
    void SinglePlayerLevelSelectionFlowCoordinatorDidActivate(bool firstActivation, bool addedToHierarchy);
    // protected System.Void SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate(System.Boolean removedFromHierarchy)
    // Offset: 0xFD1640
    void SinglePlayerLevelSelectionFlowCoordinatorDidDeactivate(bool removedFromHierarchy);
    // protected System.Void ProcessLevelCompletionResultsAfterLevelDidFinish(LevelCompletionResults levelCompletionResults, IDifficultyBeatmap difficultyBeatmap, GameplayModifiers gameplayModifiers, System.Boolean practice)
    // Offset: 0xFD1644
    void ProcessLevelCompletionResultsAfterLevelDidFinish(GlobalNamespace::LevelCompletionResults* levelCompletionResults, GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap, GlobalNamespace::GameplayModifiers* gameplayModifiers, bool practice);
    // public System.Void add_didFinishEvent(System.Action`1<SinglePlayerLevelSelectionFlowCoordinator> value)
    // Offset: 0xFD1648
    void add_didFinishEvent(System::Action_1<GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator*>* value);
    // public System.Void remove_didFinishEvent(System.Action`1<SinglePlayerLevelSelectionFlowCoordinator> value)
    // Offset: 0xFD16F0
    void remove_didFinishEvent(System::Action_1<GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator*>* value);
    // private System.Void StartLevelOrShow360Prompt(System.Action beforeSceneSwitchCallback, System.Boolean practice)
    // Offset: 0xFD1B3C
    void StartLevelOrShow360Prompt(System::Action* beforeSceneSwitchCallback, bool practice);
    // public System.Void StartLevel(System.Action beforeSceneSwitchCallback, System.Boolean practice)
    // Offset: 0xFCE584
    void StartLevel(System::Action* beforeSceneSwitchCallback, bool practice);
    // private System.Void HandlePracticeViewControllerDidPressPlayButton()
    // Offset: 0xFD21C4
    void HandlePracticeViewControllerDidPressPlayButton();
    // private System.Void HandleStandardLevelDidFinish(StandardLevelScenesTransitionSetupDataSO standardLevelScenesTransitionSetupData, LevelCompletionResults levelCompletionResults)
    // Offset: 0xFD21D0
    void HandleStandardLevelDidFinish(GlobalNamespace::StandardLevelScenesTransitionSetupDataSO* standardLevelScenesTransitionSetupData, GlobalNamespace::LevelCompletionResults* levelCompletionResults);
    // protected System.Void SetupGameplaySetupViewController(System.Boolean showModifiers, System.Boolean showEnvironmentOverrideSettings, System.Boolean showColorSchemesSettings)
    // Offset: 0xFCDEE4
    void SetupGameplaySetupViewController(bool showModifiers, bool showEnvironmentOverrideSettings, bool showColorSchemesSettings);
    // protected System.Boolean HandleBasicLevelCompletionResults(LevelCompletionResults levelCompletionResults, System.Boolean practice)
    // Offset: 0xFCE2D8
    bool HandleBasicLevelCompletionResults(GlobalNamespace::LevelCompletionResults* levelCompletionResults, bool practice);
    // protected System.Void DismissPracticeViewController(System.Action finishedCallback, System.Boolean immediately)
    // Offset: 0xFCE890
    void DismissPracticeViewController(System::Action* finishedCallback, bool immediately);
    // protected override System.Boolean get_enableCustomLevels()
    // Offset: 0xFD15B0
    // Implemented from: LevelSelectionFlowCoordinator
    // Base method: System.Boolean LevelSelectionFlowCoordinator::get_enableCustomLevels()
    bool get_enableCustomLevels();
    // protected override HMUI.ViewController get_initialTopScreenViewController()
    // Offset: 0xFD15F8
    // Implemented from: LevelSelectionFlowCoordinator
    // Base method: HMUI.ViewController LevelSelectionFlowCoordinator::get_initialTopScreenViewController()
    HMUI::ViewController* get_initialTopScreenViewController();
    // protected override HMUI.ViewController get_initialLeftScreenViewController()
    // Offset: 0xFD1600
    // Implemented from: LevelSelectionFlowCoordinator
    // Base method: HMUI.ViewController LevelSelectionFlowCoordinator::get_initialLeftScreenViewController()
    HMUI::ViewController* get_initialLeftScreenViewController();
    // protected override System.Void LevelSelectionFlowCoordinatorDidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy)
    // Offset: 0xFD1798
    // Implemented from: LevelSelectionFlowCoordinator
    // Base method: System.Void LevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorDidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy)
    void LevelSelectionFlowCoordinatorDidActivate(bool firstActivation, bool addedToHierarchy);
    // protected override System.Void LevelSelectionFlowCoordinatorDidDeactivate(System.Boolean removedFromHierarchy)
    // Offset: 0xFD1854
    // Implemented from: LevelSelectionFlowCoordinator
    // Base method: System.Void LevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorDidDeactivate(System.Boolean removedFromHierarchy)
    void LevelSelectionFlowCoordinatorDidDeactivate(bool removedFromHierarchy);
    // protected override System.Void LevelSelectionFlowCoordinatorTopViewControllerWillChange(HMUI.ViewController oldViewController, HMUI.ViewController newViewController, HMUI.ViewController/AnimationType animationType)
    // Offset: 0xFD1900
    // Implemented from: LevelSelectionFlowCoordinator
    // Base method: System.Void LevelSelectionFlowCoordinator::LevelSelectionFlowCoordinatorTopViewControllerWillChange(HMUI.ViewController oldViewController, HMUI.ViewController newViewController, HMUI.ViewController/AnimationType animationType)
    void LevelSelectionFlowCoordinatorTopViewControllerWillChange(HMUI::ViewController* oldViewController, HMUI::ViewController* newViewController, HMUI::ViewController::AnimationType animationType);
    // protected override System.Void ActionButtonWasPressed()
    // Offset: 0xFD1B30
    // Implemented from: LevelSelectionFlowCoordinator
    // Base method: System.Void LevelSelectionFlowCoordinator::ActionButtonWasPressed()
    void ActionButtonWasPressed();
    // protected override System.Void PracticeButtonWasPressed()
    // Offset: 0xFD1ED0
    // Implemented from: LevelSelectionFlowCoordinator
    // Base method: System.Void LevelSelectionFlowCoordinator::PracticeButtonWasPressed()
    void PracticeButtonWasPressed();
    // protected override System.Void SelectionDidChange(IBeatmapLevelPack pack, IDifficultyBeatmap beatmap)
    // Offset: 0xFD2140
    // Implemented from: LevelSelectionFlowCoordinator
    // Base method: System.Void LevelSelectionFlowCoordinator::SelectionDidChange(IBeatmapLevelPack pack, IDifficultyBeatmap beatmap)
    void SelectionDidChange(GlobalNamespace::IBeatmapLevelPack* pack, GlobalNamespace::IDifficultyBeatmap* beatmap);
    // protected override System.Void BackButtonWasPressed(HMUI.ViewController topViewController)
    // Offset: 0xFD2278
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::BackButtonWasPressed(HMUI.ViewController topViewController)
    void BackButtonWasPressed(HMUI::ViewController* topViewController);
    // protected System.Void .ctor()
    // Offset: 0xFCE968
    // Implemented from: LevelSelectionFlowCoordinator
    // Base method: System.Void LevelSelectionFlowCoordinator::.ctor()
    // Base method: System.Void FlowCoordinator::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static SinglePlayerLevelSelectionFlowCoordinator* New_ctor();
  }; // SinglePlayerLevelSelectionFlowCoordinator
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SinglePlayerLevelSelectionFlowCoordinator*, "", "SinglePlayerLevelSelectionFlowCoordinator");
#pragma pack(pop)
