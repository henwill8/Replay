// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: IGameplayRpcManager
  class IGameplayRpcManager;
  // Forward declaring type: PlayersAtGameStartModel
  class PlayersAtGameStartModel;
  // Forward declaring type: SceneStartHandler
  class SceneStartHandler;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: SceneStartSyncController
  // [] Offset: FFFFFFFF
  class SceneStartSyncController : public UnityEngine::MonoBehaviour {
    public:
    // [InjectAttribute] Offset: 0xD365F0
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMultiplayerSessionManager*) == 0x8);
    // [InjectAttribute] Offset: 0xD36600
    // private readonly IGameplayRpcManager _gameplayRpcManager
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::IGameplayRpcManager* gameplayRpcManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IGameplayRpcManager*) == 0x8);
    // [InjectAttribute] Offset: 0xD36610
    // private readonly PlayersAtGameStartModel _playersAtGameStartModel
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::PlayersAtGameStartModel* playersAtGameStartModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayersAtGameStartModel*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD36620
    // private System.Action syncStartDidSuccessEvent
    // Size: 0x8
    // Offset: 0x30
    System::Action* syncStartDidSuccessEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD36630
    // private System.Action syncStartDidReceiveTooLateEvent
    // Size: 0x8
    // Offset: 0x38
    System::Action* syncStartDidReceiveTooLateEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD36640
    // private System.Action syncStartDidFailEvent
    // Size: 0x8
    // Offset: 0x40
    System::Action* syncStartDidFailEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // private SceneStartHandler _sceneStartHandler
    // Size: 0x8
    // Offset: 0x48
    GlobalNamespace::SceneStartHandler* sceneStartHandler;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SceneStartHandler*) == 0x8);
    // private System.Single _waitStartTime
    // Size: 0x4
    // Offset: 0x50
    float waitStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: SceneStartSyncController
    SceneStartSyncController(GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager_ = {}, GlobalNamespace::IGameplayRpcManager* gameplayRpcManager_ = {}, GlobalNamespace::PlayersAtGameStartModel* playersAtGameStartModel_ = {}, System::Action* syncStartDidSuccessEvent_ = {}, System::Action* syncStartDidReceiveTooLateEvent_ = {}, System::Action* syncStartDidFailEvent_ = {}, GlobalNamespace::SceneStartHandler* sceneStartHandler_ = {}, float waitStartTime_ = {}) noexcept : multiplayerSessionManager{multiplayerSessionManager_}, gameplayRpcManager{gameplayRpcManager_}, playersAtGameStartModel{playersAtGameStartModel_}, syncStartDidSuccessEvent{syncStartDidSuccessEvent_}, syncStartDidReceiveTooLateEvent{syncStartDidReceiveTooLateEvent_}, syncStartDidFailEvent{syncStartDidFailEvent_}, sceneStartHandler{sceneStartHandler_}, waitStartTime{waitStartTime_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Single kLoadOtherTimeout
    static constexpr const float kLoadOtherTimeout = 15;
    // Get static field: static private System.Single kLoadOtherTimeout
    static float _get_kLoadOtherTimeout();
    // Set static field: static private System.Single kLoadOtherTimeout
    static void _set_kLoadOtherTimeout(float value);
    // static field const value: static private System.Single kLoadSelfTimeout
    static constexpr const float kLoadSelfTimeout = 20;
    // Get static field: static private System.Single kLoadSelfTimeout
    static float _get_kLoadSelfTimeout();
    // Set static field: static private System.Single kLoadSelfTimeout
    static void _set_kLoadSelfTimeout(float value);
    // public System.Void add_syncStartDidSuccessEvent(System.Action value)
    // Offset: 0x108BBEC
    void add_syncStartDidSuccessEvent(System::Action* value);
    // public System.Void remove_syncStartDidSuccessEvent(System.Action value)
    // Offset: 0x108BC90
    void remove_syncStartDidSuccessEvent(System::Action* value);
    // public System.Void add_syncStartDidReceiveTooLateEvent(System.Action value)
    // Offset: 0x108BD34
    void add_syncStartDidReceiveTooLateEvent(System::Action* value);
    // public System.Void remove_syncStartDidReceiveTooLateEvent(System.Action value)
    // Offset: 0x108BDD8
    void remove_syncStartDidReceiveTooLateEvent(System::Action* value);
    // public System.Void add_syncStartDidFailEvent(System.Action value)
    // Offset: 0x108BE7C
    void add_syncStartDidFailEvent(System::Action* value);
    // public System.Void remove_syncStartDidFailEvent(System.Action value)
    // Offset: 0x108BF20
    void remove_syncStartDidFailEvent(System::Action* value);
    // public System.Void StartSceneLoadSync()
    // Offset: 0x108BFC4
    void StartSceneLoadSync();
    // protected System.Void Update()
    // Offset: 0x108C0F4
    void Update();
    // protected System.Void OnDestroy()
    // Offset: 0x108C2AC
    void OnDestroy();
    // private System.Void HandleSceneSetupDidFinish()
    // Offset: 0x108C394
    void HandleSceneSetupDidFinish();
    // private System.Void HandleSceneSetupDidReceiveTooLate()
    // Offset: 0x108C3D4
    void HandleSceneSetupDidReceiveTooLate();
    // public System.Void .ctor()
    // Offset: 0x108C414
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SceneStartSyncController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SceneStartSyncController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SceneStartSyncController*, creationType>()));
    }
  }; // SceneStartSyncController
  #pragma pack(pop)
  static check_size<sizeof(SceneStartSyncController), 80 + sizeof(float)> __GlobalNamespace_SceneStartSyncControllerSizeCheck;
  static_assert(sizeof(SceneStartSyncController) == 0x54);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SceneStartSyncController*, "", "SceneStartSyncController");
