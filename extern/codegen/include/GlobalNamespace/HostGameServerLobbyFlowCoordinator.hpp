// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: GameServerLobbyFlowCoordinator
#include "GlobalNamespace/GameServerLobbyFlowCoordinator.hpp"
// Including type: HostLobbySetupViewController
#include "GlobalNamespace/HostLobbySetupViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: SimpleDialogPromptViewController
  class SimpleDialogPromptViewController;
  // Forward declaring type: IUnifiedNetworkPlayerModel
  class IUnifiedNetworkPlayerModel;
  // Forward declaring type: ILobbyStateDataModel
  class ILobbyStateDataModel;
  // Forward declaring type: ILobbyHostGameStateController
  class ILobbyHostGameStateController;
  // Forward declaring type: LobbyGameState
  class LobbyGameState;
  // Forward declaring type: NetworkPlayerEntitlementChecker
  class NetworkPlayerEntitlementChecker;
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
  // Forward declaring type: BeatmapCharacteristicSO
  class BeatmapCharacteristicSO;
  // Forward declaring type: BeatmapDifficulty
  struct BeatmapDifficulty;
  // Forward declaring type: GameplayModifiers
  class GameplayModifiers;
  // Forward declaring type: MultiplayerResultsViewController
  class MultiplayerResultsViewController;
  // Forward declaring type: MultiplayerLevelScenesTransitionSetupDataSO
  class MultiplayerLevelScenesTransitionSetupDataSO;
  // Forward declaring type: LevelCompletionResults
  class LevelCompletionResults;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationTokenSource
  class CancellationTokenSource;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x1B8
  #pragma pack(push, 1)
  // Autogenerated type: HostGameServerLobbyFlowCoordinator
  // [] Offset: FFFFFFFF
  class HostGameServerLobbyFlowCoordinator : public GlobalNamespace::GameServerLobbyFlowCoordinator {
    public:
    // Writing base type padding for base size: 0x161 to desired offset: 0x168
    char ___base_padding[0x7] = {};
    // Nested type: GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c__DisplayClass20_0
    class $$c__DisplayClass20_0;
    // Nested type: GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c__DisplayClass30_0
    class $$c__DisplayClass30_0;
    // Nested type: GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c__DisplayClass40_0
    class $$c__DisplayClass40_0;
    // Nested type: GlobalNamespace::HostGameServerLobbyFlowCoordinator::$$c
    class $$c;
    // Nested type: GlobalNamespace::HostGameServerLobbyFlowCoordinator::$UpdateMissingEntitlementsAsync$d__40
    struct $UpdateMissingEntitlementsAsync$d__40;
    // [InjectAttribute] Offset: 0xD3FDE0
    // private readonly HostLobbySetupViewController _hostLobbySetupViewController
    // Size: 0x8
    // Offset: 0x168
    GlobalNamespace::HostLobbySetupViewController* hostLobbySetupViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::HostLobbySetupViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xD3FDF0
    // private readonly SimpleDialogPromptViewController _simpleDialogPromptViewController
    // Size: 0x8
    // Offset: 0x170
    GlobalNamespace::SimpleDialogPromptViewController* simpleDialogPromptViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SimpleDialogPromptViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xD3FE00
    // private readonly IUnifiedNetworkPlayerModel _unifiedNetworkPlayerModel
    // Size: 0x8
    // Offset: 0x178
    GlobalNamespace::IUnifiedNetworkPlayerModel* unifiedNetworkPlayerModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IUnifiedNetworkPlayerModel*) == 0x8);
    // [InjectAttribute] Offset: 0xD3FE10
    // private readonly ILobbyStateDataModel _lobbyStateDataModel
    // Size: 0x8
    // Offset: 0x180
    GlobalNamespace::ILobbyStateDataModel* lobbyStateDataModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ILobbyStateDataModel*) == 0x8);
    // [InjectAttribute] Offset: 0xD3FE20
    // private readonly ILobbyHostGameStateController _lobbyGameStateController
    // Size: 0x8
    // Offset: 0x188
    GlobalNamespace::ILobbyHostGameStateController* lobbyGameStateController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ILobbyHostGameStateController*) == 0x8);
    // [InjectAttribute] Offset: 0xD3FE30
    // private readonly LobbyGameState _lobbyGameState
    // Size: 0x8
    // Offset: 0x190
    GlobalNamespace::LobbyGameState* lobbyGameState;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LobbyGameState*) == 0x8);
    // [InjectAttribute] Offset: 0xD3FE40
    // private readonly NetworkPlayerEntitlementChecker _entitlementChecker
    // Size: 0x8
    // Offset: 0x198
    GlobalNamespace::NetworkPlayerEntitlementChecker* entitlementChecker;
    // Field size check
    static_assert(sizeof(GlobalNamespace::NetworkPlayerEntitlementChecker*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD3FE50
    // private System.Action`1<HostGameServerLobbyFlowCoordinator> didFinishedEvent
    // Size: 0x8
    // Offset: 0x1A0
    System::Action_1<GlobalNamespace::HostGameServerLobbyFlowCoordinator*>* didFinishedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::HostGameServerLobbyFlowCoordinator*>*) == 0x8);
    // private readonly System.Text.StringBuilder _stringBuilder
    // Size: 0x8
    // Offset: 0x1A8
    System::Text::StringBuilder* stringBuilder;
    // Field size check
    static_assert(sizeof(System::Text::StringBuilder*) == 0x8);
    // private System.Threading.CancellationTokenSource _canStartGameCts
    // Size: 0x8
    // Offset: 0x1B0
    System::Threading::CancellationTokenSource* canStartGameCts;
    // Field size check
    static_assert(sizeof(System::Threading::CancellationTokenSource*) == 0x8);
    // Creating value type constructor for type: HostGameServerLobbyFlowCoordinator
    HostGameServerLobbyFlowCoordinator(GlobalNamespace::HostLobbySetupViewController* hostLobbySetupViewController_ = {}, GlobalNamespace::SimpleDialogPromptViewController* simpleDialogPromptViewController_ = {}, GlobalNamespace::IUnifiedNetworkPlayerModel* unifiedNetworkPlayerModel_ = {}, GlobalNamespace::ILobbyStateDataModel* lobbyStateDataModel_ = {}, GlobalNamespace::ILobbyHostGameStateController* lobbyGameStateController_ = {}, GlobalNamespace::LobbyGameState* lobbyGameState_ = {}, GlobalNamespace::NetworkPlayerEntitlementChecker* entitlementChecker_ = {}, System::Action_1<GlobalNamespace::HostGameServerLobbyFlowCoordinator*>* didFinishedEvent_ = {}, System::Text::StringBuilder* stringBuilder_ = {}, System::Threading::CancellationTokenSource* canStartGameCts_ = {}) noexcept : hostLobbySetupViewController{hostLobbySetupViewController_}, simpleDialogPromptViewController{simpleDialogPromptViewController_}, unifiedNetworkPlayerModel{unifiedNetworkPlayerModel_}, lobbyStateDataModel{lobbyStateDataModel_}, lobbyGameStateController{lobbyGameStateController_}, lobbyGameState{lobbyGameState_}, entitlementChecker{entitlementChecker_}, didFinishedEvent{didFinishedEvent_}, stringBuilder{stringBuilder_}, canStartGameCts{canStartGameCts_} {}
    // static field const value: static private System.Single kAllReadyCountdown
    static constexpr const float kAllReadyCountdown = 5;
    // Get static field: static private System.Single kAllReadyCountdown
    static float _get_kAllReadyCountdown();
    // Set static field: static private System.Single kAllReadyCountdown
    static void _set_kAllReadyCountdown(float value);
    // static field const value: static private System.Single kNotReadyCountdown
    static constexpr const float kNotReadyCountdown = 30;
    // Get static field: static private System.Single kNotReadyCountdown
    static float _get_kNotReadyCountdown();
    // Set static field: static private System.Single kNotReadyCountdown
    static void _set_kNotReadyCountdown(float value);
    // public System.Void add_didFinishedEvent(System.Action`1<HostGameServerLobbyFlowCoordinator> value)
    // Offset: 0xFCBEC8
    void add_didFinishedEvent(System::Action_1<GlobalNamespace::HostGameServerLobbyFlowCoordinator*>* value);
    // public System.Void remove_didFinishedEvent(System.Action`1<HostGameServerLobbyFlowCoordinator> value)
    // Offset: 0xFCBF70
    void remove_didFinishedEvent(System::Action_1<GlobalNamespace::HostGameServerLobbyFlowCoordinator*>* value);
    // private System.Void HandleLobbyPlayersDataModelDidChange(System.String userId)
    // Offset: 0xFCE87C
    void HandleLobbyPlayersDataModelDidChange(::Il2CppString* userId);
    // private System.Void SetLobbyPlayerDataToViews(System.String userId)
    // Offset: 0xFCD234
    void SetLobbyPlayerDataToViews(::Il2CppString* userId);
    // private System.Void HandleMenuRpcManagerSetIsReadyOnCountdown(System.String userId, System.Boolean isReady)
    // Offset: 0xFCEE98
    void HandleMenuRpcManagerSetIsReadyOnCountdown(::Il2CppString* userId, bool isReady);
    // private System.Void HandleMenuRpcManagerSetIsInLobby(System.String userId, System.Boolean backInLobby)
    // Offset: 0xFCF334
    void HandleMenuRpcManagerSetIsInLobby(::Il2CppString* userId, bool backInLobby);
    // private System.Void HandleLobbyStateDataModelPlayerConnected(IConnectedPlayer connectedPlayer)
    // Offset: 0xFCF338
    void HandleLobbyStateDataModelPlayerConnected(GlobalNamespace::IConnectedPlayer* connectedPlayer);
    // private System.Void HandleLobbyStateDataModelPlayerDisconnected(IConnectedPlayer connectedPlayer)
    // Offset: 0xFCF33C
    void HandleLobbyStateDataModelPlayerDisconnected(GlobalNamespace::IConnectedPlayer* connectedPlayer);
    // private System.Void HandleServerPlayerListControllerSelectSuggestedBeatmap(System.String levelId, BeatmapCharacteristicSO beatmapCharacteristic, BeatmapDifficulty beatmapDifficulty)
    // Offset: 0xFCF340
    void HandleServerPlayerListControllerSelectSuggestedBeatmap(::Il2CppString* levelId, GlobalNamespace::BeatmapCharacteristicSO* beatmapCharacteristic, GlobalNamespace::BeatmapDifficulty beatmapDifficulty);
    // private System.Void HandleServerPlayerListControllerSelectSuggestedGameplayModifiers(GameplayModifiers modifiers)
    // Offset: 0xFCF424
    void HandleServerPlayerListControllerSelectSuggestedGameplayModifiers(GlobalNamespace::GameplayModifiers* modifiers);
    // private System.Void HandleServerPlayerListControllerKickPlayer(System.String userId)
    // Offset: 0xFCF4E8
    void HandleServerPlayerListControllerKickPlayer(::Il2CppString* userId);
    // private System.Void HandleHostLobbySetupViewControllerStartGame()
    // Offset: 0xFCF848
    void HandleHostLobbySetupViewControllerStartGame();
    // private System.Void HandleLobbyGameStateControllerStartTimeChanged()
    // Offset: 0xFCFBF0
    void HandleLobbyGameStateControllerStartTimeChanged();
    // private System.Void HandleLobbyGameStateControllerSongStillDownloading()
    // Offset: 0xFCFCB8
    void HandleLobbyGameStateControllerSongStillDownloading();
    // private System.Void HandleHostLobbySetupViewControllerCancelStartGame()
    // Offset: 0xFCFD50
    void HandleHostLobbySetupViewControllerCancelStartGame();
    // private System.Void HandleLobbyGameBeforeSceneSwitchCallback()
    // Offset: 0xFCFEF0
    void HandleLobbyGameBeforeSceneSwitchCallback();
    // private System.Void UpdateGameStartTime()
    // Offset: 0xFCF0FC
    void UpdateGameStartTime();
    // private System.Void UpdateStartGameEnabledState()
    // Offset: 0xFCCD28
    void UpdateStartGameEnabledState();
    // private System.Void UpdateMissingEntitlementsAsync(System.String levelId)
    // Offset: 0xFD0260
    void UpdateMissingEntitlementsAsync(::Il2CppString* levelId);
    // private System.Void DismissViewControllersAndCoordinators()
    // Offset: 0xFCE744
    void DismissViewControllersAndCoordinators();
    // private System.Void DismissStartGameIfAllPlayersSpectating()
    // Offset: 0xFCE968
    void DismissStartGameIfAllPlayersSpectating();
    // private HostLobbySetupViewController/CannotStartGameReason ResolveCannotStartGameReason(System.Boolean allPlayersInLobby, System.Boolean somePlayersActive)
    // Offset: 0xFD0244
    GlobalNamespace::HostLobbySetupViewController::CannotStartGameReason ResolveCannotStartGameReason(bool allPlayersInLobby, bool somePlayersActive);
    // private System.Boolean CheckIfAllPlayersAreReady()
    // Offset: 0xFCEECC
    bool CheckIfAllPlayersAreReady();
    // private System.Boolean <DismissStartGameIfAllPlayersSpectating>b__42_0(System.Boolean current, IConnectedPlayer player)
    // Offset: 0xFD03D0
    bool $DismissStartGameIfAllPlayersSpectating$b__42_0(bool current, GlobalNamespace::IConnectedPlayer* player);
    // protected override System.Void DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0xFCC018
    // Implemented from: GameServerLobbyFlowCoordinator
    // Base method: System.Void GameServerLobbyFlowCoordinator::DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
    // protected override System.Void DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    // Offset: 0xFCD55C
    // Implemented from: GameServerLobbyFlowCoordinator
    // Base method: System.Void GameServerLobbyFlowCoordinator::DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    void DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling);
    // protected override System.Void TopViewControllerWillChange(HMUI.ViewController oldViewController, HMUI.ViewController newViewController, HMUI.ViewController/AnimationType animationType)
    // Offset: 0xFCE0D8
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::TopViewControllerWillChange(HMUI.ViewController oldViewController, HMUI.ViewController newViewController, HMUI.ViewController/AnimationType animationType)
    void TopViewControllerWillChange(HMUI::ViewController* oldViewController, HMUI::ViewController* newViewController, HMUI::ViewController::AnimationType animationType);
    // protected override System.Void BackButtonWasPressed(HMUI.ViewController topViewController)
    // Offset: 0xFCE224
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::BackButtonWasPressed(HMUI.ViewController topViewController)
    void BackButtonWasPressed(HMUI::ViewController* topViewController);
    // protected override System.Void HandleLobbySetupViewControllerSelectBeatmap()
    // Offset: 0xFCE3A4
    // Implemented from: GameServerLobbyFlowCoordinator
    // Base method: System.Void GameServerLobbyFlowCoordinator::HandleLobbySetupViewControllerSelectBeatmap()
    void HandleLobbySetupViewControllerSelectBeatmap();
    // protected override System.Void HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel(LevelSelectionFlowCoordinator/State state)
    // Offset: 0xFCE564
    // Implemented from: GameServerLobbyFlowCoordinator
    // Base method: System.Void GameServerLobbyFlowCoordinator::HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel(LevelSelectionFlowCoordinator/State state)
    void HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel(GlobalNamespace::LevelSelectionFlowCoordinator::State* state);
    // protected override System.Void Finish(System.Action finishedCallback, System.Boolean withFadeOut)
    // Offset: 0xFCE58C
    // Implemented from: GameServerLobbyFlowCoordinator
    // Base method: System.Void GameServerLobbyFlowCoordinator::Finish(System.Action finishedCallback, System.Boolean withFadeOut)
    void Finish(System::Action* finishedCallback, bool withFadeOut);
    // protected override System.Void HandleBackToLobbyPressed(MultiplayerResultsViewController viewController)
    // Offset: 0xFCE854
    // Implemented from: GameServerLobbyFlowCoordinator
    // Base method: System.Void GameServerLobbyFlowCoordinator::HandleBackToLobbyPressed(MultiplayerResultsViewController viewController)
    void HandleBackToLobbyPressed(GlobalNamespace::MultiplayerResultsViewController* viewController);
    // protected override System.Void HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged(System.Boolean isActive)
    // Offset: 0xFCFCBC
    // Implemented from: GameServerLobbyFlowCoordinator
    // Base method: System.Void GameServerLobbyFlowCoordinator::HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged(System.Boolean isActive)
    void HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged(bool isActive);
    // protected override System.Void HandleLobbyGameStateControllerLevelFinished(MultiplayerLevelScenesTransitionSetupDataSO multiplayerLevelScenesTransitionSetupData, LevelCompletionResults myCompletionResults, System.Collections.Generic.Dictionary`2<System.String,LevelCompletionResults> othersCompletionResults)
    // Offset: 0xFCFD28
    // Implemented from: GameServerLobbyFlowCoordinator
    // Base method: System.Void GameServerLobbyFlowCoordinator::HandleLobbyGameStateControllerLevelFinished(MultiplayerLevelScenesTransitionSetupDataSO multiplayerLevelScenesTransitionSetupData, LevelCompletionResults myCompletionResults, System.Collections.Generic.Dictionary`2<System.String,LevelCompletionResults> othersCompletionResults)
    void HandleLobbyGameStateControllerLevelFinished(GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO* multiplayerLevelScenesTransitionSetupData, GlobalNamespace::LevelCompletionResults* myCompletionResults, System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::LevelCompletionResults*>* othersCompletionResults);
    // public System.Void .ctor()
    // Offset: 0xFD035C
    // Implemented from: GameServerLobbyFlowCoordinator
    // Base method: System.Void GameServerLobbyFlowCoordinator::.ctor()
    // Base method: System.Void FlowCoordinator::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static HostGameServerLobbyFlowCoordinator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::HostGameServerLobbyFlowCoordinator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<HostGameServerLobbyFlowCoordinator*, creationType>()));
    }
  }; // HostGameServerLobbyFlowCoordinator
  #pragma pack(pop)
  static check_size<sizeof(HostGameServerLobbyFlowCoordinator), 432 + sizeof(System::Threading::CancellationTokenSource*)> __GlobalNamespace_HostGameServerLobbyFlowCoordinatorSizeCheck;
  static_assert(sizeof(HostGameServerLobbyFlowCoordinator) == 0x1B8);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::HostGameServerLobbyFlowCoordinator*, "", "HostGameServerLobbyFlowCoordinator");
