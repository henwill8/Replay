// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LeaderboardViewController
#include "GlobalNamespace/LeaderboardViewController.hpp"
// Including type: LeaderboardTableView
#include "GlobalNamespace/LeaderboardTableView.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IDifficultyBeatmap
  class IDifficultyBeatmap;
  // Forward declaring type: LoadingControl
  class LoadingControl;
  // Forward declaring type: MainSettingsModelSO
  class MainSettingsModelSO;
  // Forward declaring type: GameplayModifiersModelSO
  class GameplayModifiersModelSO;
  // Forward declaring type: GameplaySetupViewController
  class GameplaySetupViewController;
  // Forward declaring type: GameplayModifiers
  class GameplayModifiers;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: IconSegmentedControl
  class IconSegmentedControl;
  // Forward declaring type: TextSegmentedControl
  class TextSegmentedControl;
  // Forward declaring type: SegmentedControl
  class SegmentedControl;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Sprite
  class Sprite;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Button
  class Button;
}
// Forward declaring namespace: OnlineServices
namespace OnlineServices {
  // Forward declaring type: ServerManager
  class ServerManager;
  // Forward declaring type: PlatformServicesAvailabilityInfo
  class PlatformServicesAvailabilityInfo;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationTokenSource
  class CancellationTokenSource;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: CentralLeaderboardViewController
  class CentralLeaderboardViewController : public GlobalNamespace::LeaderboardViewController {
    public:
    // Nested type: GlobalNamespace::CentralLeaderboardViewController::LeaderboardPanel
    class LeaderboardPanel;
    // Nested type: GlobalNamespace::CentralLeaderboardViewController::ScoreScopeInfo
    class ScoreScopeInfo;
    // Nested type: GlobalNamespace::CentralLeaderboardViewController::$$c
    class $$c;
    // Nested type: GlobalNamespace::CentralLeaderboardViewController::$RefreshDelayed$d__36
    class $RefreshDelayed$d__36;
    // Nested type: GlobalNamespace::CentralLeaderboardViewController::$LoadScoresAsync$d__37
    struct $LoadScoresAsync$d__37;
    // private LeaderboardTableView _leaderboardTableView
    // Offset: 0x70
    GlobalNamespace::LeaderboardTableView* leaderboardTableView;
    // private HMUI.IconSegmentedControl _scopeSegmentedControl
    // Offset: 0x78
    HMUI::IconSegmentedControl* scopeSegmentedControl;
    // private LoadingControl _loadingControl
    // Offset: 0x80
    GlobalNamespace::LoadingControl* loadingControl;
    // private MainSettingsModelSO _mainSettingsModel
    // Offset: 0x88
    GlobalNamespace::MainSettingsModelSO* mainSettingsModel;
    // private HMUI.TextSegmentedControl _leaderboardTypeSegmentedControl
    // Offset: 0x90
    HMUI::TextSegmentedControl* leaderboardTypeSegmentedControl;
    // private UnityEngine.Sprite _globalLeaderboardIcon
    // Offset: 0x98
    UnityEngine::Sprite* globalLeaderboardIcon;
    // private UnityEngine.Sprite _friendsLeaderboardIcon
    // Offset: 0xA0
    UnityEngine::Sprite* friendsLeaderboardIcon;
    // private UnityEngine.UI.Button _enableOnlineServicesButton
    // Offset: 0xA8
    UnityEngine::UI::Button* enableOnlineServicesButton;
    // private GameplayModifiersModelSO _gameplayModifiersModel
    // Offset: 0xB0
    GlobalNamespace::GameplayModifiersModelSO* gameplayModifiersModel;
    // private UnityEngine.GameObject _optInOnlineServicesView
    // Offset: 0xB8
    UnityEngine::GameObject* optInOnlineServicesView;
    // private UnityEngine.GameObject _leaderboardView
    // Offset: 0xC0
    UnityEngine::GameObject* leaderboardView;
    // private readonly GameplaySetupViewController _gameplaySetupViewController
    // Offset: 0xC8
    GlobalNamespace::GameplaySetupViewController* gameplaySetupViewController;
    // private readonly OnlineServices.ServerManager _serverManager
    // Offset: 0xD0
    OnlineServices::ServerManager* serverManager;
    // private readonly System.Collections.Generic.List`1<LeaderboardTableView/ScoreData> _scores
    // Offset: 0xD8
    System::Collections::Generic::List_1<GlobalNamespace::LeaderboardTableView::ScoreData*>* scores;
    // private IDifficultyBeatmap _difficultyBeatmap
    // Offset: 0xE0
    GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap;
    // private System.Threading.CancellationTokenSource _cancellationTokenSource
    // Offset: 0xE8
    System::Threading::CancellationTokenSource* cancellationTokenSource;
    // private CentralLeaderboardViewController/LeaderboardPanel[] _leaderboardPanels
    // Offset: 0xF0
    ::Array<GlobalNamespace::CentralLeaderboardViewController::LeaderboardPanel*>* leaderboardPanels;
    // private CentralLeaderboardViewController/ScoreScopeInfo[] _scoreScopeInfos
    // Offset: 0xF8
    ::Array<GlobalNamespace::CentralLeaderboardViewController::ScoreScopeInfo*>* scoreScopeInfos;
    // private GameplayModifiers _gameplayModifiers
    // Offset: 0x100
    GlobalNamespace::GameplayModifiers* gameplayModifiers;
    // private GameplayModifiers get_gameplayModifiers()
    // Offset: 0x1A345D8
    GlobalNamespace::GameplayModifiers* get_gameplayModifiers();
    // private System.Boolean get_hasScoresData()
    // Offset: 0x1A345F4
    bool get_hasScoresData();
    // private System.Void HandleDidPressRefreshButton()
    // Offset: 0x1A3554C
    void HandleDidPressRefreshButton();
    // private System.Void HandleGameplaySetupViewControllerDidChangeGameplayModifiers()
    // Offset: 0x1A35558
    void HandleGameplaySetupViewControllerDidChangeGameplayModifiers();
    // private System.Void HandlelatformServicesAvailabilityInfoChanged(OnlineServices.PlatformServicesAvailabilityInfo availabilityInfo)
    // Offset: 0x1A355BC
    void HandlelatformServicesAvailabilityInfoChanged(OnlineServices::PlatformServicesAvailabilityInfo* availabilityInfo);
    // private System.Void HanldeLeaderboardTypeSegmentedControlDidSelectCell(HMUI.SegmentedControl control, System.Int32 index)
    // Offset: 0x1A355E4
    void HanldeLeaderboardTypeSegmentedControlDidSelectCell(HMUI::SegmentedControl* control, int index);
    // private System.Void HandleScopeSegmentedControlDidSelectCell(HMUI.SegmentedControl segmentedControl, System.Int32 cellNumber)
    // Offset: 0x1A3566C
    void HandleScopeSegmentedControlDidSelectCell(HMUI::SegmentedControl* segmentedControl, int cellNumber);
    // private System.Void HandleScoreForLeaderboardDidUpload(System.String leaderboardId)
    // Offset: 0x1A35678
    void HandleScoreForLeaderboardDidUpload(::Il2CppString* leaderboardId);
    // private System.Void Refresh(System.Boolean showLoadingIndicator, System.Boolean clear)
    // Offset: 0x1A3473C
    void Refresh(bool showLoadingIndicator, bool clear);
    // private System.Collections.IEnumerator RefreshDelayed(System.Boolean showLoadingIndicator, System.Boolean clear)
    // Offset: 0x1A356D8
    System::Collections::IEnumerator* RefreshDelayed(bool showLoadingIndicator, bool clear);
    // private System.Void LoadScoresAsync()
    // Offset: 0x1A357A0
    void LoadScoresAsync();
    // private System.Void ClearContent()
    // Offset: 0x1A346CC
    void ClearContent();
    // private System.Void <DidActivate>b__26_0()
    // Offset: 0x1A358F0
    void $DidActivate$b__26_0();
    // public override System.Void SetData(IDifficultyBeatmap difficultyBeatmap)
    // Offset: 0x1A34650
    // Implemented from: LeaderboardViewController
    // Base method: System.Void LeaderboardViewController::SetData(IDifficultyBeatmap difficultyBeatmap)
    void SetData(GlobalNamespace::IDifficultyBeatmap* difficultyBeatmap);
    // protected override System.Void DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0x1A3495C
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
    // protected override System.Void DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    // Offset: 0x1A35104
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    void DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling);
    // protected override System.Void OnDestroy()
    // Offset: 0x1A35304
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::OnDestroy()
    void OnDestroy();
    // public System.Void .ctor()
    // Offset: 0x1A35870
    // Implemented from: LeaderboardViewController
    // Base method: System.Void LeaderboardViewController::.ctor()
    // Base method: System.Void ViewController::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static CentralLeaderboardViewController* New_ctor();
  }; // CentralLeaderboardViewController
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::CentralLeaderboardViewController*, "", "CentralLeaderboardViewController");
#pragma pack(pop)
