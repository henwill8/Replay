// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Graphic
  class Graphic;
  // Forward declaring type: Button
  class Button;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: ButtonBinder
  class ButtonBinder;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: PreviousColorPanelController
  // [] Offset: FFFFFFFF
  class PreviousColorPanelController : public UnityEngine::MonoBehaviour {
    public:
    // private UnityEngine.UI.Graphic[] _graphics
    // Size: 0x8
    // Offset: 0x18
    ::Array<UnityEngine::UI::Graphic*>* graphics;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::UI::Graphic*>*) == 0x8);
    // private UnityEngine.UI.Button _button
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::UI::Button* button;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Button*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD3EAAC
    // private System.Action`1<UnityEngine.Color> colorWasSelectedEvent
    // Size: 0x8
    // Offset: 0x28
    System::Action_1<UnityEngine::Color>* colorWasSelectedEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<UnityEngine::Color>*) == 0x8);
    // private HMUI.ButtonBinder _buttonBinder
    // Size: 0x8
    // Offset: 0x30
    HMUI::ButtonBinder* buttonBinder;
    // Field size check
    static_assert(sizeof(HMUI::ButtonBinder*) == 0x8);
    // private UnityEngine.Color _color
    // Size: 0x10
    // Offset: 0x38
    UnityEngine::Color color;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // private UnityEngine.Color _graphicsColor
    // Size: 0x10
    // Offset: 0x48
    UnityEngine::Color graphicsColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // Creating value type constructor for type: PreviousColorPanelController
    PreviousColorPanelController(::Array<UnityEngine::UI::Graphic*>* graphics_ = {}, UnityEngine::UI::Button* button_ = {}, System::Action_1<UnityEngine::Color>* colorWasSelectedEvent_ = {}, HMUI::ButtonBinder* buttonBinder_ = {}, UnityEngine::Color color_ = {}, UnityEngine::Color graphicsColor_ = {}) noexcept : graphics{graphics_}, button{button_}, colorWasSelectedEvent{colorWasSelectedEvent_}, buttonBinder{buttonBinder_}, color{color_}, graphicsColor{graphicsColor_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Int32 kMaxColors
    static constexpr const int kMaxColors = 2;
    // Get static field: static private System.Int32 kMaxColors
    static int _get_kMaxColors();
    // Set static field: static private System.Int32 kMaxColors
    static void _set_kMaxColors(int value);
    // public System.Void add_colorWasSelectedEvent(System.Action`1<UnityEngine.Color> value)
    // Offset: 0xFBF738
    void add_colorWasSelectedEvent(System::Action_1<UnityEngine::Color>* value);
    // public System.Void remove_colorWasSelectedEvent(System.Action`1<UnityEngine.Color> value)
    // Offset: 0xFBF7DC
    void remove_colorWasSelectedEvent(System::Action_1<UnityEngine::Color>* value);
    // protected System.Void Awake()
    // Offset: 0xFBF880
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0xFBF944
    void OnDestroy();
    // public System.Void AddColor(UnityEngine.Color color)
    // Offset: 0xFBF960
    void AddColor(UnityEngine::Color color);
    // public System.Void DiscardUpcomingColor()
    // Offset: 0xFBFA18
    void DiscardUpcomingColor();
    // private System.Void <Awake>b__9_0()
    // Offset: 0xFBFA68
    void $Awake$b__9_0();
    // public System.Void .ctor()
    // Offset: 0xFBFA24
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static PreviousColorPanelController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::PreviousColorPanelController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<PreviousColorPanelController*, creationType>()));
    }
  }; // PreviousColorPanelController
  #pragma pack(pop)
  static check_size<sizeof(PreviousColorPanelController), 72 + sizeof(UnityEngine::Color)> __GlobalNamespace_PreviousColorPanelControllerSizeCheck;
  static_assert(sizeof(PreviousColorPanelController) == 0x58);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PreviousColorPanelController*, "", "PreviousColorPanelController");
