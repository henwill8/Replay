// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: LiteNetLib.INetEventListener
#include "LiteNetLib/INetEventListener.hpp"
// Including type: System.UInt32
#include "System/UInt32.hpp"
// Including type: System.Byte
#include "System/Byte.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
  // Forward declaring type: IPAddress
  class IPAddress;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NetworkPacketSerializer`2<TType, TData>
  template<typename TType, typename TData>
  class NetworkPacketSerializer_2;
  // Forward declaring type: GameplayServerConfiguration
  struct GameplayServerConfiguration;
}
// Forward declaring namespace: LiteNetLib
namespace LiteNetLib {
  // Forward declaring type: NetManager
  class NetManager;
  // Forward declaring type: NetPacketReader
  class NetPacketReader;
  // Forward declaring type: UnconnectedMessageType
  struct UnconnectedMessageType;
  // Forward declaring type: ConnectionRequest
  class ConnectionRequest;
  // Forward declaring type: NetPeer
  class NetPeer;
  // Forward declaring type: DisconnectInfo
  struct DisconnectInfo;
  // Forward declaring type: DeliveryMethod
  struct DeliveryMethod;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: INetSerializable
  class INetSerializable;
}
// Forward declaring namespace: System::Net::Sockets
namespace System::Net::Sockets {
  // Forward declaring type: SocketError
  struct SocketError;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x6C
  #pragma pack(push, 1)
  // Autogenerated type: LocalNetworkDiscoveryManager
  // [] Offset: FFFFFFFF
  class LocalNetworkDiscoveryManager : public UnityEngine::MonoBehaviour/*, public LiteNetLib::INetEventListener*/ {
    public:
    // Nested type: GlobalNamespace::LocalNetworkDiscoveryManager::PacketType
    struct PacketType;
    // Nested type: GlobalNamespace::LocalNetworkDiscoveryManager::BroadcastPacket
    class BroadcastPacket;
    // Nested type: GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestPacket
    class JoinRequestPacket;
    // Nested type: GlobalNamespace::LocalNetworkDiscoveryManager::JoinResponsePacket
    class JoinResponsePacket;
    // Nested type: GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestPacket
    class InviteRequestPacket;
    // Nested type: GlobalNamespace::LocalNetworkDiscoveryManager::InviteResponsePacket
    class InviteResponsePacket;
    // Nested type: GlobalNamespace::LocalNetworkDiscoveryManager::PeerUpdatedDelegate
    class PeerUpdatedDelegate;
    // Nested type: GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestedDelegate
    class JoinRequestedDelegate;
    // Nested type: GlobalNamespace::LocalNetworkDiscoveryManager::JoinRespondedDelegate
    class JoinRespondedDelegate;
    // Nested type: GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestedDelegate
    class InviteRequestedDelegate;
    // Nested type: GlobalNamespace::LocalNetworkDiscoveryManager::InviteRespondedDelegate
    class InviteRespondedDelegate;
    // Size: 0x1
    #pragma pack(push, 1)
    // Autogenerated type: LocalNetworkDiscoveryManager/PacketType
    // [] Offset: FFFFFFFF
    struct PacketType/*, public System::Enum*/ {
      public:
      // public System.Byte value__
      // Size: 0x1
      // Offset: 0x0
      uint8_t value;
      // Field size check
      static_assert(sizeof(uint8_t) == 0x1);
      // Creating value type constructor for type: PacketType
      constexpr PacketType(uint8_t value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator uint8_t
      constexpr operator uint8_t() const noexcept {
        return value;
      }
      // static field const value: static public LocalNetworkDiscoveryManager/PacketType Broadcast
      static constexpr const uint8_t Broadcast = 0u;
      // Get static field: static public LocalNetworkDiscoveryManager/PacketType Broadcast
      static GlobalNamespace::LocalNetworkDiscoveryManager::PacketType _get_Broadcast();
      // Set static field: static public LocalNetworkDiscoveryManager/PacketType Broadcast
      static void _set_Broadcast(GlobalNamespace::LocalNetworkDiscoveryManager::PacketType value);
      // static field const value: static public LocalNetworkDiscoveryManager/PacketType JoinRequest
      static constexpr const uint8_t JoinRequest = 1u;
      // Get static field: static public LocalNetworkDiscoveryManager/PacketType JoinRequest
      static GlobalNamespace::LocalNetworkDiscoveryManager::PacketType _get_JoinRequest();
      // Set static field: static public LocalNetworkDiscoveryManager/PacketType JoinRequest
      static void _set_JoinRequest(GlobalNamespace::LocalNetworkDiscoveryManager::PacketType value);
      // static field const value: static public LocalNetworkDiscoveryManager/PacketType JoinResponse
      static constexpr const uint8_t JoinResponse = 2u;
      // Get static field: static public LocalNetworkDiscoveryManager/PacketType JoinResponse
      static GlobalNamespace::LocalNetworkDiscoveryManager::PacketType _get_JoinResponse();
      // Set static field: static public LocalNetworkDiscoveryManager/PacketType JoinResponse
      static void _set_JoinResponse(GlobalNamespace::LocalNetworkDiscoveryManager::PacketType value);
      // static field const value: static public LocalNetworkDiscoveryManager/PacketType InviteRequest
      static constexpr const uint8_t InviteRequest = 3u;
      // Get static field: static public LocalNetworkDiscoveryManager/PacketType InviteRequest
      static GlobalNamespace::LocalNetworkDiscoveryManager::PacketType _get_InviteRequest();
      // Set static field: static public LocalNetworkDiscoveryManager/PacketType InviteRequest
      static void _set_InviteRequest(GlobalNamespace::LocalNetworkDiscoveryManager::PacketType value);
      // static field const value: static public LocalNetworkDiscoveryManager/PacketType InviteResponse
      static constexpr const uint8_t InviteResponse = 4u;
      // Get static field: static public LocalNetworkDiscoveryManager/PacketType InviteResponse
      static GlobalNamespace::LocalNetworkDiscoveryManager::PacketType _get_InviteResponse();
      // Set static field: static public LocalNetworkDiscoveryManager/PacketType InviteResponse
      static void _set_InviteResponse(GlobalNamespace::LocalNetworkDiscoveryManager::PacketType value);
    }; // LocalNetworkDiscoveryManager/PacketType
    #pragma pack(pop)
    static check_size<sizeof(LocalNetworkDiscoveryManager::PacketType), 0 + sizeof(uint8_t)> __GlobalNamespace_LocalNetworkDiscoveryManager_PacketTypeSizeCheck;
    static_assert(sizeof(LocalNetworkDiscoveryManager::PacketType) == 0x1);
    // [CompilerGeneratedAttribute] Offset: 0xD363B0
    // private LocalNetworkDiscoveryManager/PeerUpdatedDelegate peerUpdatedEvent
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::LocalNetworkDiscoveryManager::PeerUpdatedDelegate* peerUpdatedEvent;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LocalNetworkDiscoveryManager::PeerUpdatedDelegate*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD363C0
    // private LocalNetworkDiscoveryManager/JoinRequestedDelegate joinRequestedEvent
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestedDelegate* joinRequestedEvent;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestedDelegate*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD363D0
    // private LocalNetworkDiscoveryManager/JoinRespondedDelegate joinRespondedEvent
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::LocalNetworkDiscoveryManager::JoinRespondedDelegate* joinRespondedEvent;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRespondedDelegate*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD363E0
    // private LocalNetworkDiscoveryManager/InviteRequestedDelegate inviteRequestedEvent
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestedDelegate* inviteRequestedEvent;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestedDelegate*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD363F0
    // private LocalNetworkDiscoveryManager/InviteRespondedDelegate inviteRespondedEvent
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::LocalNetworkDiscoveryManager::InviteRespondedDelegate* inviteRespondedEvent;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRespondedDelegate*) == 0x8);
    // private LiteNetLib.NetManager _netManager
    // Size: 0x8
    // Offset: 0x40
    LiteNetLib::NetManager* netManager;
    // Field size check
    static_assert(sizeof(LiteNetLib::NetManager*) == 0x8);
    // private readonly NetworkPacketSerializer`2<LocalNetworkDiscoveryManager/PacketType,System.Net.IPEndPoint> _packetSerializer
    // Size: 0x8
    // Offset: 0x48
    GlobalNamespace::NetworkPacketSerializer_2<GlobalNamespace::LocalNetworkDiscoveryManager::PacketType, System::Net::IPEndPoint*>* packetSerializer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::NetworkPacketSerializer_2<GlobalNamespace::LocalNetworkDiscoveryManager::PacketType, System::Net::IPEndPoint*>*) == 0x8);
    // private readonly LiteNetLib.Utils.NetDataWriter _netDataWriter
    // Size: 0x8
    // Offset: 0x50
    LiteNetLib::Utils::NetDataWriter* netDataWriter;
    // Field size check
    static_assert(sizeof(LiteNetLib::Utils::NetDataWriter*) == 0x8);
    // private readonly LocalNetworkDiscoveryManager/BroadcastPacket _broadcastPacket
    // Size: 0x8
    // Offset: 0x58
    GlobalNamespace::LocalNetworkDiscoveryManager::BroadcastPacket* broadcastPacket;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LocalNetworkDiscoveryManager::BroadcastPacket*) == 0x8);
    // private System.Int32 _discoveryPort
    // Size: 0x4
    // Offset: 0x60
    int discoveryPort;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean _initialized
    // Size: 0x1
    // Offset: 0x64
    bool initialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _enableBroadcasting
    // Size: 0x1
    // Offset: 0x65
    bool enableBroadcasting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: enableBroadcasting and: lastBroadcastTime
    char __padding11[0x2] = {};
    // private System.Single _lastBroadcastTime
    // Size: 0x4
    // Offset: 0x68
    float lastBroadcastTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: LocalNetworkDiscoveryManager
    LocalNetworkDiscoveryManager(GlobalNamespace::LocalNetworkDiscoveryManager::PeerUpdatedDelegate* peerUpdatedEvent_ = {}, GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestedDelegate* joinRequestedEvent_ = {}, GlobalNamespace::LocalNetworkDiscoveryManager::JoinRespondedDelegate* joinRespondedEvent_ = {}, GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestedDelegate* inviteRequestedEvent_ = {}, GlobalNamespace::LocalNetworkDiscoveryManager::InviteRespondedDelegate* inviteRespondedEvent_ = {}, LiteNetLib::NetManager* netManager_ = {}, GlobalNamespace::NetworkPacketSerializer_2<GlobalNamespace::LocalNetworkDiscoveryManager::PacketType, System::Net::IPEndPoint*>* packetSerializer_ = {}, LiteNetLib::Utils::NetDataWriter* netDataWriter_ = {}, GlobalNamespace::LocalNetworkDiscoveryManager::BroadcastPacket* broadcastPacket_ = {}, int discoveryPort_ = {}, bool initialized_ = {}, bool enableBroadcasting_ = {}, float lastBroadcastTime_ = {}) noexcept : peerUpdatedEvent{peerUpdatedEvent_}, joinRequestedEvent{joinRequestedEvent_}, joinRespondedEvent{joinRespondedEvent_}, inviteRequestedEvent{inviteRequestedEvent_}, inviteRespondedEvent{inviteRespondedEvent_}, netManager{netManager_}, packetSerializer{packetSerializer_}, netDataWriter{netDataWriter_}, broadcastPacket{broadcastPacket_}, discoveryPort{discoveryPort_}, initialized{initialized_}, enableBroadcasting{enableBroadcasting_}, lastBroadcastTime{lastBroadcastTime_} {}
    // Creating interface conversion operator: operator LiteNetLib::INetEventListener
    operator LiteNetLib::INetEventListener() noexcept {
      return *reinterpret_cast<LiteNetLib::INetEventListener*>(this);
    }
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Single kBroadcastInterval
    static constexpr const float kBroadcastInterval = 5;
    // Get static field: static private System.Single kBroadcastInterval
    static float _get_kBroadcastInterval();
    // Set static field: static private System.Single kBroadcastInterval
    static void _set_kBroadcastInterval(float value);
    // static field const value: static private System.UInt32 kSignature
    static constexpr const uint kSignature = 3014087859u;
    // Get static field: static private System.UInt32 kSignature
    static uint _get_kSignature();
    // Set static field: static private System.UInt32 kSignature
    static void _set_kSignature(uint value);
    // static field const value: static private System.Byte kVersion
    static constexpr const uint8_t kVersion = 1u;
    // Get static field: static private System.Byte kVersion
    static uint8_t _get_kVersion();
    // Set static field: static private System.Byte kVersion
    static void _set_kVersion(uint8_t value);
    // public System.Void add_peerUpdatedEvent(LocalNetworkDiscoveryManager/PeerUpdatedDelegate value)
    // Offset: 0x1054758
    void add_peerUpdatedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::PeerUpdatedDelegate* value);
    // public System.Void remove_peerUpdatedEvent(LocalNetworkDiscoveryManager/PeerUpdatedDelegate value)
    // Offset: 0x10547FC
    void remove_peerUpdatedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::PeerUpdatedDelegate* value);
    // public System.Void add_joinRequestedEvent(LocalNetworkDiscoveryManager/JoinRequestedDelegate value)
    // Offset: 0x10548A0
    void add_joinRequestedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestedDelegate* value);
    // public System.Void remove_joinRequestedEvent(LocalNetworkDiscoveryManager/JoinRequestedDelegate value)
    // Offset: 0x1054944
    void remove_joinRequestedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestedDelegate* value);
    // public System.Void add_joinRespondedEvent(LocalNetworkDiscoveryManager/JoinRespondedDelegate value)
    // Offset: 0x10549E8
    void add_joinRespondedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRespondedDelegate* value);
    // public System.Void remove_joinRespondedEvent(LocalNetworkDiscoveryManager/JoinRespondedDelegate value)
    // Offset: 0x1054A8C
    void remove_joinRespondedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRespondedDelegate* value);
    // public System.Void add_inviteRequestedEvent(LocalNetworkDiscoveryManager/InviteRequestedDelegate value)
    // Offset: 0x1054B30
    void add_inviteRequestedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestedDelegate* value);
    // public System.Void remove_inviteRequestedEvent(LocalNetworkDiscoveryManager/InviteRequestedDelegate value)
    // Offset: 0x1054BD4
    void remove_inviteRequestedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestedDelegate* value);
    // public System.Void add_inviteRespondedEvent(LocalNetworkDiscoveryManager/InviteRespondedDelegate value)
    // Offset: 0x1054C78
    void add_inviteRespondedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRespondedDelegate* value);
    // public System.Void remove_inviteRespondedEvent(LocalNetworkDiscoveryManager/InviteRespondedDelegate value)
    // Offset: 0x1054D1C
    void remove_inviteRespondedEvent(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRespondedDelegate* value);
    // public System.String get_userId()
    // Offset: 0x1054DC0
    ::Il2CppString* get_userId();
    // public System.String get_userName()
    // Offset: 0x1054DDC
    ::Il2CppString* get_userName();
    // public System.Byte get_flags()
    // Offset: 0x1054DF8
    uint8_t get_flags();
    // public System.Void set_flags(System.Byte value)
    // Offset: 0x1054E14
    void set_flags(uint8_t value);
    // public System.Int32 get_currentPartySize()
    // Offset: 0x1054E44
    int get_currentPartySize();
    // public System.Void set_currentPartySize(System.Int32 value)
    // Offset: 0x1054E60
    void set_currentPartySize(int value);
    // public System.Int32 get_maxPartySize()
    // Offset: 0x1054E90
    int get_maxPartySize();
    // public System.Void set_maxPartySize(System.Int32 value)
    // Offset: 0x1054EAC
    void set_maxPartySize(int value);
    // public GameplayServerConfiguration get_configuration()
    // Offset: 0x1054EDC
    GlobalNamespace::GameplayServerConfiguration get_configuration();
    // public System.Void set_configuration(GameplayServerConfiguration value)
    // Offset: 0x1054F04
    void set_configuration(GlobalNamespace::GameplayServerConfiguration value);
    // public System.Boolean get_enableBroadcasting()
    // Offset: 0x1054F9C
    bool get_enableBroadcasting();
    // public System.Void set_enableBroadcasting(System.Boolean value)
    // Offset: 0x1054FA4
    void set_enableBroadcasting(bool value);
    // public System.Void Init(System.Int32 discoveryPort, System.String initUserId, System.String initUserName)
    // Offset: 0x1054FB0
    void Init(int discoveryPort, ::Il2CppString* initUserId, ::Il2CppString* initUserName);
    // protected System.Void OnEnable()
    // Offset: 0x105529C
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x10552B0
    void OnDisable();
    // protected System.Void Update()
    // Offset: 0x10552C4
    void Update();
    // public System.Void SendJoinRequest(System.Net.IPAddress ip)
    // Offset: 0x1055384
    void SendJoinRequest(System::Net::IPAddress* ip);
    // public System.Void SendJoinResponse(System.Net.IPAddress ip, System.String secret, System.Int32 multiplayerPort, System.Boolean blocked)
    // Offset: 0x1055494
    void SendJoinResponse(System::Net::IPAddress* ip, ::Il2CppString* secret, int multiplayerPort, bool blocked);
    // public System.Void SendInviteRequest(System.Net.IPAddress ip, System.String secret, System.Int32 multiplayerPort)
    // Offset: 0x10555B4
    void SendInviteRequest(System::Net::IPAddress* ip, ::Il2CppString* secret, int multiplayerPort);
    // public System.Void SendInviteResponse(System.Net.IPAddress ip, System.Boolean accepted, System.Boolean blocked)
    // Offset: 0x10556F4
    void SendInviteResponse(System::Net::IPAddress* ip, bool accepted, bool blocked);
    // private LiteNetLib.Utils.NetDataWriter WritePacket(T packet)
    // Offset: 0xFFFFFFFF
    template<class T>
    LiteNetLib::Utils::NetDataWriter* WritePacket(T packet) {
      static_assert(std::is_base_of_v<LiteNetLib::Utils::INetSerializable, std::remove_pointer_t<T>>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::WritePacket");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "WritePacket", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(packet)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<LiteNetLib::Utils::NetDataWriter*, false>(this, ___generic__method, packet);
    }
    // private System.Void <Init>b__56_0(LocalNetworkDiscoveryManager/BroadcastPacket packet, System.Net.IPEndPoint endPoint)
    // Offset: 0x1055A7C
    void $Init$b__56_0(GlobalNamespace::LocalNetworkDiscoveryManager::BroadcastPacket* packet, System::Net::IPEndPoint* endPoint);
    // private System.Void <Init>b__56_1(LocalNetworkDiscoveryManager/JoinRequestPacket packet, System.Net.IPEndPoint endPoint)
    // Offset: 0x1056148
    void $Init$b__56_1(GlobalNamespace::LocalNetworkDiscoveryManager::JoinRequestPacket* packet, System::Net::IPEndPoint* endPoint);
    // private System.Void <Init>b__56_2(LocalNetworkDiscoveryManager/JoinResponsePacket packet, System.Net.IPEndPoint endPoint)
    // Offset: 0x10565D0
    void $Init$b__56_2(GlobalNamespace::LocalNetworkDiscoveryManager::JoinResponsePacket* packet, System::Net::IPEndPoint* endPoint);
    // private System.Void <Init>b__56_3(LocalNetworkDiscoveryManager/InviteRequestPacket packet, System.Net.IPEndPoint endPoint)
    // Offset: 0x1056A50
    void $Init$b__56_3(GlobalNamespace::LocalNetworkDiscoveryManager::InviteRequestPacket* packet, System::Net::IPEndPoint* endPoint);
    // private System.Void <Init>b__56_4(LocalNetworkDiscoveryManager/InviteResponsePacket packet, System.Net.IPEndPoint endPoint)
    // Offset: 0x1056F04
    void $Init$b__56_4(GlobalNamespace::LocalNetworkDiscoveryManager::InviteResponsePacket* packet, System::Net::IPEndPoint* endPoint);
    // private System.Void LiteNetLib.INetEventListener.OnNetworkReceiveUnconnected(System.Net.IPEndPoint remoteEndPoint, LiteNetLib.NetPacketReader reader, LiteNetLib.UnconnectedMessageType messageType)
    // Offset: 0x10557FC
    // Implemented from: LiteNetLib.INetEventListener
    // Base method: System.Void INetEventListener::OnNetworkReceiveUnconnected(System.Net.IPEndPoint remoteEndPoint, LiteNetLib.NetPacketReader reader, LiteNetLib.UnconnectedMessageType messageType)
    void LiteNetLib_INetEventListener_OnNetworkReceiveUnconnected(System::Net::IPEndPoint* remoteEndPoint, LiteNetLib::NetPacketReader* reader, LiteNetLib::UnconnectedMessageType messageType);
    // private System.Void LiteNetLib.INetEventListener.OnConnectionRequest(LiteNetLib.ConnectionRequest request)
    // Offset: 0x10558A8
    // Implemented from: LiteNetLib.INetEventListener
    // Base method: System.Void INetEventListener::OnConnectionRequest(LiteNetLib.ConnectionRequest request)
    void LiteNetLib_INetEventListener_OnConnectionRequest(LiteNetLib::ConnectionRequest* request);
    // private System.Void LiteNetLib.INetEventListener.OnNetworkError(System.Net.IPEndPoint endPoint, System.Net.Sockets.SocketError socketErrorCode)
    // Offset: 0x10558C4
    // Implemented from: LiteNetLib.INetEventListener
    // Base method: System.Void INetEventListener::OnNetworkError(System.Net.IPEndPoint endPoint, System.Net.Sockets.SocketError socketErrorCode)
    void LiteNetLib_INetEventListener_OnNetworkError(System::Net::IPEndPoint* endPoint, System::Net::Sockets::SocketError socketErrorCode);
    // private System.Void LiteNetLib.INetEventListener.OnNetworkLatencyUpdate(LiteNetLib.NetPeer peer, System.Int32 latency)
    // Offset: 0x1055974
    // Implemented from: LiteNetLib.INetEventListener
    // Base method: System.Void INetEventListener::OnNetworkLatencyUpdate(LiteNetLib.NetPeer peer, System.Int32 latency)
    void LiteNetLib_INetEventListener_OnNetworkLatencyUpdate(LiteNetLib::NetPeer* peer, int latency);
    // private System.Void LiteNetLib.INetEventListener.OnPeerConnected(LiteNetLib.NetPeer peer)
    // Offset: 0x1055978
    // Implemented from: LiteNetLib.INetEventListener
    // Base method: System.Void INetEventListener::OnPeerConnected(LiteNetLib.NetPeer peer)
    void LiteNetLib_INetEventListener_OnPeerConnected(LiteNetLib::NetPeer* peer);
    // private System.Void LiteNetLib.INetEventListener.OnPeerDisconnected(LiteNetLib.NetPeer peer, LiteNetLib.DisconnectInfo disconnectInfo)
    // Offset: 0x105597C
    // Implemented from: LiteNetLib.INetEventListener
    // Base method: System.Void INetEventListener::OnPeerDisconnected(LiteNetLib.NetPeer peer, LiteNetLib.DisconnectInfo disconnectInfo)
    void LiteNetLib_INetEventListener_OnPeerDisconnected(LiteNetLib::NetPeer* peer, LiteNetLib::DisconnectInfo disconnectInfo);
    // private System.Void LiteNetLib.INetEventListener.OnNetworkReceive(LiteNetLib.NetPeer peer, LiteNetLib.NetPacketReader reader, LiteNetLib.DeliveryMethod deliveryMethod)
    // Offset: 0x1055980
    // Implemented from: LiteNetLib.INetEventListener
    // Base method: System.Void INetEventListener::OnNetworkReceive(LiteNetLib.NetPeer peer, LiteNetLib.NetPacketReader reader, LiteNetLib.DeliveryMethod deliveryMethod)
    void LiteNetLib_INetEventListener_OnNetworkReceive(LiteNetLib::NetPeer* peer, LiteNetLib::NetPacketReader* reader, LiteNetLib::DeliveryMethod deliveryMethod);
    // public System.Void .ctor()
    // Offset: 0x1055984
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LocalNetworkDiscoveryManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LocalNetworkDiscoveryManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LocalNetworkDiscoveryManager*, creationType>()));
    }
  }; // LocalNetworkDiscoveryManager
  #pragma pack(pop)
  static check_size<sizeof(LocalNetworkDiscoveryManager), 104 + sizeof(float)> __GlobalNamespace_LocalNetworkDiscoveryManagerSizeCheck;
  static_assert(sizeof(LocalNetworkDiscoveryManager) == 0x6C);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LocalNetworkDiscoveryManager*, "", "LocalNetworkDiscoveryManager");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LocalNetworkDiscoveryManager::PacketType, "", "LocalNetworkDiscoveryManager/PacketType");
