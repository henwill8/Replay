// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: IEquatableByReference`1
#include "GlobalNamespace/IEquatableByReference_1.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: LiteNetLib.Utils.INetImmutableSerializable`1
#include "LiteNetLib/Utils/INetImmutableSerializable_1.hpp"
// Including type: BeatmapDifficultyMask
#include "GlobalNamespace/BeatmapDifficultyMask.hpp"
// Including type: GameplayModifierMask
#include "GlobalNamespace/GameplayModifierMask.hpp"
// Including type: SongPackMask
#include "GlobalNamespace/SongPackMask.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataReader
  class NetDataReader;
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: GameplayServerConfiguration
  struct GameplayServerConfiguration;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: GameplayServerFilter
  // [] Offset: FFFFFFFF
  struct GameplayServerFilter/*, public System::ValueType, public GlobalNamespace::IEquatableByReference_1<GlobalNamespace::GameplayServerFilter>, public System::IEquatable_1<GlobalNamespace::GameplayServerFilter>, public LiteNetLib::Utils::INetImmutableSerializable_1<GlobalNamespace::GameplayServerFilter>*/ {
    public:
    // public readonly System.Boolean includePasswordProtected
    // Size: 0x1
    // Offset: 0x0
    bool includePasswordProtected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public readonly System.Boolean includeEmpty
    // Size: 0x1
    // Offset: 0x1
    bool includeEmpty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public readonly System.Boolean includeFull
    // Size: 0x1
    // Offset: 0x2
    bool includeFull;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public readonly System.Boolean filterNames
    // Size: 0x1
    // Offset: 0x3
    bool filterNames;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: filterNames and: nameFilter
    char __padding3[0x4] = {};
    // public readonly System.String nameFilter
    // Size: 0x8
    // Offset: 0x8
    ::Il2CppString* nameFilter;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public readonly System.Boolean filterDifficulties
    // Size: 0x1
    // Offset: 0x10
    bool filterDifficulties;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public readonly BeatmapDifficultyMask difficultyFilter
    // Size: 0x1
    // Offset: 0x11
    GlobalNamespace::BeatmapDifficultyMask difficultyFilter;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapDifficultyMask) == 0x1);
    // public readonly System.Boolean filterModifiers
    // Size: 0x1
    // Offset: 0x12
    bool filterModifiers;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: filterModifiers and: modifierFilter
    char __padding7[0x1] = {};
    // public readonly GameplayModifierMask modifierFilter
    // Size: 0x2
    // Offset: 0x14
    GlobalNamespace::GameplayModifierMask modifierFilter;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayModifierMask) == 0x2);
    // public readonly System.Boolean filterSongPacks
    // Size: 0x1
    // Offset: 0x16
    bool filterSongPacks;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: filterSongPacks and: songPackFilter
    char __padding9[0x1] = {};
    // public readonly SongPackMask songPackFilter
    // Size: 0x10
    // Offset: 0x18
    GlobalNamespace::SongPackMask songPackFilter;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SongPackMask) == 0x10);
    // Creating value type constructor for type: GameplayServerFilter
    constexpr GameplayServerFilter(bool includePasswordProtected_ = {}, bool includeEmpty_ = {}, bool includeFull_ = {}, bool filterNames_ = {}, ::Il2CppString* nameFilter_ = {}, bool filterDifficulties_ = {}, GlobalNamespace::BeatmapDifficultyMask difficultyFilter_ = {}, bool filterModifiers_ = {}, GlobalNamespace::GameplayModifierMask modifierFilter_ = {}, bool filterSongPacks_ = {}, GlobalNamespace::SongPackMask songPackFilter_ = {}) noexcept : includePasswordProtected{includePasswordProtected_}, includeEmpty{includeEmpty_}, includeFull{includeFull_}, filterNames{filterNames_}, nameFilter{nameFilter_}, filterDifficulties{filterDifficulties_}, difficultyFilter{difficultyFilter_}, filterModifiers{filterModifiers_}, modifierFilter{modifierFilter_}, filterSongPacks{filterSongPacks_}, songPackFilter{songPackFilter_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
    // Creating interface conversion operator: operator GlobalNamespace::IEquatableByReference_1<GlobalNamespace::GameplayServerFilter>
    operator GlobalNamespace::IEquatableByReference_1<GlobalNamespace::GameplayServerFilter>() noexcept {
      return *reinterpret_cast<GlobalNamespace::IEquatableByReference_1<GlobalNamespace::GameplayServerFilter>*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<GlobalNamespace::GameplayServerFilter>
    operator System::IEquatable_1<GlobalNamespace::GameplayServerFilter>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<GlobalNamespace::GameplayServerFilter>*>(this);
    }
    // Creating interface conversion operator: operator LiteNetLib::Utils::INetImmutableSerializable_1<GlobalNamespace::GameplayServerFilter>
    operator LiteNetLib::Utils::INetImmutableSerializable_1<GlobalNamespace::GameplayServerFilter>() noexcept {
      return *reinterpret_cast<LiteNetLib::Utils::INetImmutableSerializable_1<GlobalNamespace::GameplayServerFilter>*>(this);
    }
    // public System.Void .ctor(System.Boolean includePasswordProtected, System.Boolean includeEmpty, System.Boolean includeFull, System.Boolean filterNames, System.String nameFilter, System.Boolean filterDifficulties, BeatmapDifficultyMask difficultyFilter, System.Boolean filterModifiers, GameplayModifierMask modifierFilter, System.Boolean filterSongPacks, SongPackMask songPackFilter)
    // Offset: 0xDF51A8
    // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    // ABORTED: conflicts with another method.  GameplayServerFilter(bool includePasswordProtected, bool includeEmpty, bool includeFull, bool filterNames, ::Il2CppString* nameFilter, bool filterDifficulties, GlobalNamespace::BeatmapDifficultyMask difficultyFilter, bool filterModifiers, GlobalNamespace::GameplayModifierMask modifierFilter, bool filterSongPacks, GlobalNamespace::SongPackMask songPackFilter)
    // static public GameplayServerFilter get_defaultFilter()
    // Offset: 0x11D4F88
    static GlobalNamespace::GameplayServerFilter get_defaultFilter();
    // public System.Boolean Equals(ref GameplayServerFilter other)
    // Offset: 0xDF51EC
    bool Equals(GlobalNamespace::GameplayServerFilter& other);
    // static public GameplayServerFilter Deserialize(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0x11D531C
    static GlobalNamespace::GameplayServerFilter Deserialize(LiteNetLib::Utils::NetDataReader* reader);
    // public System.Boolean IncludesServerName(System.String lowerInvariantName)
    // Offset: 0xDF524C
    bool IncludesServerName(::Il2CppString* lowerInvariantName);
    // public System.Boolean IncludesPassword(System.String password)
    // Offset: 0xDF527C
    bool IncludesPassword(::Il2CppString* password);
    // public System.Boolean IncludesPlayerCount(System.Int32 currentPlayerCount, System.Int32 maxPlayerCount)
    // Offset: 0xDF5298
    bool IncludesPlayerCount(int currentPlayerCount, int maxPlayerCount);
    // public System.Boolean IncludesConfiguration(GameplayServerConfiguration configuration)
    // Offset: 0xDF52CC
    bool IncludesConfiguration(GlobalNamespace::GameplayServerConfiguration configuration);
    // public System.Boolean Equals(GameplayServerFilter other)
    // Offset: 0xDF51F4
    // Implemented from: System.IEquatable`1
    // Base method: System.Boolean IEquatable_1::Equals(GameplayServerFilter other)
    bool Equals(GlobalNamespace::GameplayServerFilter other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xDF522C
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0xDF5234
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public System.Void Serialize(LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0xDF523C
    // Implemented from: LiteNetLib.Utils.INetImmutableSerializable`1
    // Base method: System.Void INetImmutableSerializable_1::Serialize(LiteNetLib.Utils.NetDataWriter writer)
    void Serialize(LiteNetLib::Utils::NetDataWriter* writer);
    // public GameplayServerFilter CreateFromSerializedData(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0xDF5244
    // Implemented from: LiteNetLib.Utils.INetImmutableSerializable`1
    // Base method: T INetImmutableSerializable_1::CreateFromSerializedData(LiteNetLib.Utils.NetDataReader reader)
    GlobalNamespace::GameplayServerFilter CreateFromSerializedData(LiteNetLib::Utils::NetDataReader* reader);
    // Creating proxy method: LiteNetLib_Utils_INetImmutableSerializable_1_CreateFromSerializedData
    // Maps to method: CreateFromSerializedData
    GlobalNamespace::GameplayServerFilter LiteNetLib_Utils_INetImmutableSerializable_1_CreateFromSerializedData(LiteNetLib::Utils::NetDataReader* reader);
  }; // GameplayServerFilter
  #pragma pack(pop)
  static check_size<sizeof(GameplayServerFilter), 24 + sizeof(GlobalNamespace::SongPackMask)> __GlobalNamespace_GameplayServerFilterSizeCheck;
  static_assert(sizeof(GameplayServerFilter) == 0x28);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GameplayServerFilter, "", "GameplayServerFilter");
