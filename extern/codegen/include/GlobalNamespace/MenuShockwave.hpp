// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.ParticleSystem/EmitParams
#include "UnityEngine/ParticleSystem_EmitParams.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: ParticleSystem because it is already included!
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: VRUIControls
namespace VRUIControls {
  // Forward declaring type: VRPointer
  class VRPointer;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: Signal
  class Signal;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xBF
  #pragma pack(push, 1)
  // Autogenerated type: MenuShockwave
  // [] Offset: FFFFFFFF
  class MenuShockwave : public UnityEngine::MonoBehaviour {
    public:
    // private UnityEngine.ParticleSystem _shockwavePS
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::ParticleSystem* shockwavePS;
    // Field size check
    static_assert(sizeof(UnityEngine::ParticleSystem*) == 0x8);
    // private VRUIControls.VRPointer _vrPointer
    // Size: 0x8
    // Offset: 0x20
    VRUIControls::VRPointer* vrPointer;
    // Field size check
    static_assert(sizeof(VRUIControls::VRPointer*) == 0x8);
    // private Signal[] _buttonClickEvents
    // Size: 0x8
    // Offset: 0x28
    ::Array<GlobalNamespace::Signal*>* buttonClickEvents;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::Signal*>*) == 0x8);
    // private UnityEngine.ParticleSystem/EmitParams _shockwavePSEmitParams
    // Size: 0x8F
    // Offset: 0x30
    UnityEngine::ParticleSystem::EmitParams shockwavePSEmitParams;
    // Field size check
    static_assert(sizeof(UnityEngine::ParticleSystem::EmitParams) == 0x8F);
    // Creating value type constructor for type: MenuShockwave
    MenuShockwave(UnityEngine::ParticleSystem* shockwavePS_ = {}, VRUIControls::VRPointer* vrPointer_ = {}, ::Array<GlobalNamespace::Signal*>* buttonClickEvents_ = {}, UnityEngine::ParticleSystem::EmitParams shockwavePSEmitParams_ = {}) noexcept : shockwavePS{shockwavePS_}, vrPointer{vrPointer_}, buttonClickEvents{buttonClickEvents_}, shockwavePSEmitParams{shockwavePSEmitParams_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void Awake()
    // Offset: 0x1063300
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0x1063310
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x10633E4
    void OnDisable();
    // private System.Void HandleButtonClickEvent()
    // Offset: 0x10634B8
    void HandleButtonClickEvent();
    // public System.Void SpawnShockwave(UnityEngine.Vector3 pos)
    // Offset: 0x10634EC
    void SpawnShockwave(UnityEngine::Vector3 pos);
    // public System.Void .ctor()
    // Offset: 0x106359C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MenuShockwave* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MenuShockwave::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MenuShockwave*, creationType>()));
    }
  }; // MenuShockwave
  #pragma pack(pop)
  static check_size<sizeof(MenuShockwave), 48 + sizeof(UnityEngine::ParticleSystem::EmitParams)> __GlobalNamespace_MenuShockwaveSizeCheck;
  static_assert(sizeof(MenuShockwave) == 0xBF);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MenuShockwave*, "", "MenuShockwave");
