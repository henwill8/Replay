// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.FrameTiming
#include "UnityEngine/FrameTiming.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task
  class Task;
  // Forward declaring type: TaskCompletionSource`1<TResult>
  template<typename TResult>
  class TaskCompletionSource_1;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: StandaloneMonobehavior
  // [] Offset: FFFFFFFF
  class StandaloneMonobehavior : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::StandaloneMonobehavior::$AfterOneFrame$d__16
    class $AfterOneFrame$d__16;
    // Nested type: GlobalNamespace::StandaloneMonobehavior::$RunAsyncCoroutine$d__19
    class $RunAsyncCoroutine$d__19;
    // private System.Boolean _hasExecutedOneFrame
    // Size: 0x1
    // Offset: 0x18
    bool hasExecutedOneFrame;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hasExecutedOneFrame and: startTime
    char __padding0[0x3] = {};
    // private System.Single _startTime
    // Size: 0x4
    // Offset: 0x1C
    float startTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.FrameTiming[] _lastFrameTimings
    // Size: 0x8
    // Offset: 0x20
    ::Array<UnityEngine::FrameTiming>* lastFrameTimings;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::FrameTiming>*) == 0x8);
    // private System.Int32 _lastFrameTimeCount
    // Size: 0x4
    // Offset: 0x28
    int lastFrameTimeCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: StandaloneMonobehavior
    StandaloneMonobehavior(bool hasExecutedOneFrame_ = {}, float startTime_ = {}, ::Array<UnityEngine::FrameTiming>* lastFrameTimings_ = {}, int lastFrameTimeCount_ = {}) noexcept : hasExecutedOneFrame{hasExecutedOneFrame_}, startTime{startTime_}, lastFrameTimings{lastFrameTimings_}, lastFrameTimeCount{lastFrameTimeCount_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Single get_objectLifeTime()
    // Offset: 0x1C21A98
    float get_objectLifeTime();
    // public System.Single get_deltaTime()
    // Offset: 0x1C21AC4
    float get_deltaTime();
    // public System.Single get_lastFrameTime()
    // Offset: 0x1C21ACC
    float get_lastFrameTime();
    // protected System.Void Awake()
    // Offset: 0x1C21B54
    void Awake();
    // protected System.Void Start()
    // Offset: 0x1C21B7C
    void Start();
    // protected System.Void Update()
    // Offset: 0x1C21B80
    void Update();
    // protected System.Void OnDestroy()
    // Offset: 0x1C21B84
    void OnDestroy();
    // protected System.Void OnApplicationPause(System.Boolean pauseStatus)
    // Offset: 0x1C21B88
    void OnApplicationPause(bool pauseStatus);
    // public System.Void WhenReady(System.Action action)
    // Offset: 0x1C21B8C
    void WhenReady(System::Action* action);
    // private System.Collections.IEnumerator AfterOneFrame(System.Action action)
    // Offset: 0x1C21BD4
    System::Collections::IEnumerator* AfterOneFrame(System::Action* action);
    // static public T Create()
    // Offset: 0xFFFFFFFF
    template<class T>
    static T Create() {
      static_assert(std::is_convertible_v<T, GlobalNamespace::StandaloneMonobehavior*>);
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandaloneMonobehavior::Create");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod("", "StandaloneMonobehavior", "Create", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes()));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      return ::il2cpp_utils::RunMethodThrow<T, false>(static_cast<Il2CppClass*>(nullptr), ___generic__method);
    }
    // public System.Threading.Tasks.Task RunAsync(System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1C21C98
    System::Threading::Tasks::Task* RunAsync(System::Threading::CancellationToken cancellationToken);
    // private System.Collections.IEnumerator RunAsyncCoroutine(System.Threading.Tasks.TaskCompletionSource`1<System.Boolean> tcs, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x1C21D34
    System::Collections::IEnumerator* RunAsyncCoroutine(System::Threading::Tasks::TaskCompletionSource_1<bool>* tcs, System::Threading::CancellationToken cancellationToken);
    // private System.Single GetLastFrameTime()
    // Offset: 0x1C21AD0
    float GetLastFrameTime();
    // public System.Void .ctor()
    // Offset: 0x1C14FBC
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static StandaloneMonobehavior* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::StandaloneMonobehavior::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<StandaloneMonobehavior*, creationType>()));
    }
  }; // StandaloneMonobehavior
  #pragma pack(pop)
  static check_size<sizeof(StandaloneMonobehavior), 40 + sizeof(int)> __GlobalNamespace_StandaloneMonobehaviorSizeCheck;
  static_assert(sizeof(StandaloneMonobehavior) == 0x2C);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::StandaloneMonobehavior*, "", "StandaloneMonobehavior");
