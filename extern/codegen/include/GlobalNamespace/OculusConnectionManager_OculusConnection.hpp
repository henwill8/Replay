// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OculusConnectionManager
#include "GlobalNamespace/OculusConnectionManager.hpp"
// Including type: IConnection
#include "GlobalNamespace/IConnection.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
}
// Forward declaring namespace: LiteNetLib
namespace LiteNetLib {
  // Forward declaring type: DeliveryMethod
  struct DeliveryMethod;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x29
  #pragma pack(push, 1)
  // Autogenerated type: OculusConnectionManager/OculusConnection
  // [] Offset: FFFFFFFF
  class OculusConnectionManager::OculusConnection : public ::Il2CppObject/*, public GlobalNamespace::IConnection, public System::IEquatable_1<GlobalNamespace::OculusConnectionManager::OculusConnection*>*/ {
    public:
    // Nested type: GlobalNamespace::OculusConnectionManager::OculusConnection::$$c__DisplayClass15_0
    class $$c__DisplayClass15_0;
    // private readonly System.UInt64 _id
    // Size: 0x8
    // Offset: 0x10
    uint64_t id;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // private readonly System.String _userId
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* userId;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private readonly System.String _userName
    // Size: 0x8
    // Offset: 0x20
    ::Il2CppString* userName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private readonly System.Boolean _isConnectionOwner
    // Size: 0x1
    // Offset: 0x28
    bool isConnectionOwner;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: OculusConnection
    OculusConnection(uint64_t id_ = {}, ::Il2CppString* userId_ = {}, ::Il2CppString* userName_ = {}, bool isConnectionOwner_ = {}) noexcept : id{id_}, userId{userId_}, userName{userName_}, isConnectionOwner{isConnectionOwner_} {}
    // Creating interface conversion operator: operator GlobalNamespace::IConnection
    operator GlobalNamespace::IConnection() noexcept {
      return *reinterpret_cast<GlobalNamespace::IConnection*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<GlobalNamespace::OculusConnectionManager::OculusConnection*>
    operator System::IEquatable_1<GlobalNamespace::OculusConnectionManager::OculusConnection*>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<GlobalNamespace::OculusConnectionManager::OculusConnection*>*>(this);
    }
    // public System.UInt64 get_id()
    // Offset: 0x10FC048
    uint64_t get_id();
    // public System.Void .ctor(System.UInt64 id, System.String userName, System.Boolean isConnectionOwner)
    // Offset: 0x10FB97C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OculusConnectionManager::OculusConnection* New_ctor(uint64_t id, ::Il2CppString* userName, bool isConnectionOwner) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OculusConnectionManager::OculusConnection::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OculusConnectionManager::OculusConnection*, creationType>(id, userName, isConnectionOwner)));
    }
    // public System.Void Ping(System.Action`2<OculusConnectionManager/OculusConnection,System.Single> onPingResult)
    // Offset: 0x10FB260
    void Ping(System::Action_2<GlobalNamespace::OculusConnectionManager::OculusConnection*, float>* onPingResult);
    // public System.String get_userId()
    // Offset: 0x10FC050
    // Implemented from: IConnection
    // Base method: System.String IConnection::get_userId()
    ::Il2CppString* get_userId();
    // public System.String get_userName()
    // Offset: 0x10FC058
    // Implemented from: IConnection
    // Base method: System.String IConnection::get_userName()
    ::Il2CppString* get_userName();
    // public System.Boolean get_isConnectionOwner()
    // Offset: 0x10FC060
    // Implemented from: IConnection
    // Base method: System.Boolean IConnection::get_isConnectionOwner()
    bool get_isConnectionOwner();
    // public System.Void Send(LiteNetLib.Utils.NetDataWriter writer, LiteNetLib.DeliveryMethod deliveryMethod)
    // Offset: 0x10FAD14
    // Implemented from: IConnection
    // Base method: System.Void IConnection::Send(LiteNetLib.Utils.NetDataWriter writer, LiteNetLib.DeliveryMethod deliveryMethod)
    void Send(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::DeliveryMethod deliveryMethod);
    // public System.Void Disconnect()
    // Offset: 0x10FB59C
    // Implemented from: IConnection
    // Base method: System.Void IConnection::Disconnect()
    void Disconnect();
    // public System.Boolean Equals(OculusConnectionManager/OculusConnection other)
    // Offset: 0x10FC070
    // Implemented from: System.IEquatable`1
    // Base method: System.Boolean IEquatable_1::Equals(OculusConnectionManager/OculusConnection other)
    bool Equals(GlobalNamespace::OculusConnectionManager::OculusConnection* other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x10FC0A0
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x10FC1B4
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x10FC1E0
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
  }; // OculusConnectionManager/OculusConnection
  #pragma pack(pop)
  static check_size<sizeof(OculusConnectionManager::OculusConnection), 40 + sizeof(bool)> __GlobalNamespace_OculusConnectionManager_OculusConnectionSizeCheck;
  static_assert(sizeof(OculusConnectionManager::OculusConnection) == 0x29);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OculusConnectionManager::OculusConnection*, "", "OculusConnectionManager/OculusConnection");
