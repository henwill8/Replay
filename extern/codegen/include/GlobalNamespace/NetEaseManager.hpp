// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: NetEase.Docker.ReceivedHighscoreData
#include "NetEase/Docker/ReceivedHighscoreData.hpp"
// Including type: NetEase.Docker.InitializeData
#include "NetEase/Docker/InitializeData.hpp"
// Including type: NetEase.Docker.LoginData
#include "NetEase/Docker/LoginData.hpp"
// Including type: NetEase.Docker.LogoutData
#include "NetEase/Docker/LogoutData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: TaskCompletionSource`1<TResult>
  template<typename TResult>
  class TaskCompletionSource_1;
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: NetEaseManager
  // [] Offset: FFFFFFFF
  class NetEaseManager : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::NetEaseManager::$InitAsync$d__11
    struct $InitAsync$d__11;
    // Nested type: GlobalNamespace::NetEaseManager::$LoginAsync$d__13
    struct $LoginAsync$d__13;
    // Nested type: GlobalNamespace::NetEaseManager::$LogoutAsync$d__15
    struct $LogoutAsync$d__15;
    // Nested type: GlobalNamespace::NetEaseManager::$RequestHighscoreDataAsync$d__17
    struct $RequestHighscoreDataAsync$d__17;
    // private System.String _userName
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* userName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Threading.Tasks.TaskCompletionSource`1<NetEase.Docker.ReceivedHighscoreData> _requestHighscoreDataTaskCompletionSource
    // Size: 0x8
    // Offset: 0x20
    System::Threading::Tasks::TaskCompletionSource_1<NetEase::Docker::ReceivedHighscoreData>* requestHighscoreDataTaskCompletionSource;
    // Field size check
    static_assert(sizeof(System::Threading::Tasks::TaskCompletionSource_1<NetEase::Docker::ReceivedHighscoreData>*) == 0x8);
    // private System.Threading.Tasks.TaskCompletionSource`1<NetEase.Docker.InitializeData> _initTaskCompletionSource
    // Size: 0x8
    // Offset: 0x28
    System::Threading::Tasks::TaskCompletionSource_1<NetEase::Docker::InitializeData>* initTaskCompletionSource;
    // Field size check
    static_assert(sizeof(System::Threading::Tasks::TaskCompletionSource_1<NetEase::Docker::InitializeData>*) == 0x8);
    // private System.Threading.Tasks.TaskCompletionSource`1<NetEase.Docker.LoginData> _loginTaskCompletionSource
    // Size: 0x8
    // Offset: 0x30
    System::Threading::Tasks::TaskCompletionSource_1<NetEase::Docker::LoginData>* loginTaskCompletionSource;
    // Field size check
    static_assert(sizeof(System::Threading::Tasks::TaskCompletionSource_1<NetEase::Docker::LoginData>*) == 0x8);
    // private System.Threading.Tasks.TaskCompletionSource`1<NetEase.Docker.LogoutData> _logoutTaskCompletionSource
    // Size: 0x8
    // Offset: 0x38
    System::Threading::Tasks::TaskCompletionSource_1<NetEase::Docker::LogoutData>* logoutTaskCompletionSource;
    // Field size check
    static_assert(sizeof(System::Threading::Tasks::TaskCompletionSource_1<NetEase::Docker::LogoutData>*) == 0x8);
    // Creating value type constructor for type: NetEaseManager
    NetEaseManager(::Il2CppString* userName_ = {}, System::Threading::Tasks::TaskCompletionSource_1<NetEase::Docker::ReceivedHighscoreData>* requestHighscoreDataTaskCompletionSource_ = {}, System::Threading::Tasks::TaskCompletionSource_1<NetEase::Docker::InitializeData>* initTaskCompletionSource_ = {}, System::Threading::Tasks::TaskCompletionSource_1<NetEase::Docker::LoginData>* loginTaskCompletionSource_ = {}, System::Threading::Tasks::TaskCompletionSource_1<NetEase::Docker::LogoutData>* logoutTaskCompletionSource_ = {}) noexcept : userName{userName_}, requestHighscoreDataTaskCompletionSource{requestHighscoreDataTaskCompletionSource_}, initTaskCompletionSource{initTaskCompletionSource_}, loginTaskCompletionSource{loginTaskCompletionSource_}, logoutTaskCompletionSource{logoutTaskCompletionSource_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Boolean get_supportsLeaderboards()
    // Offset: 0xF858C4
    bool get_supportsLeaderboards();
    // public System.String get_userName()
    // Offset: 0xF87F0C
    ::Il2CppString* get_userName();
    // protected System.Void Awake()
    // Offset: 0xF87F14
    void Awake();
    // protected System.Void Update()
    // Offset: 0xF88040
    void Update();
    // public System.Threading.Tasks.Task`1<NetEase.Docker.InitializeData> InitAsync()
    // Offset: 0xF87BDC
    System::Threading::Tasks::Task_1<NetEase::Docker::InitializeData>* InitAsync();
    // private System.Void HandleDidInitialize(NetEase.Docker.InitializeData initializeData)
    // Offset: 0xF88044
    void HandleDidInitialize(NetEase::Docker::InitializeData initializeData);
    // public System.Threading.Tasks.Task`1<NetEase.Docker.LoginData> LoginAsync()
    // Offset: 0xF87CF4
    System::Threading::Tasks::Task_1<NetEase::Docker::LoginData>* LoginAsync();
    // private System.Void HandleDidLogin(NetEase.Docker.LoginData loginData)
    // Offset: 0xF880B8
    void HandleDidLogin(NetEase::Docker::LoginData loginData);
    // public System.Threading.Tasks.Task`1<NetEase.Docker.LogoutData> LogoutAsync()
    // Offset: 0xF868AC
    System::Threading::Tasks::Task_1<NetEase::Docker::LogoutData>* LogoutAsync();
    // private System.Void HandleDidLogout(NetEase.Docker.LogoutData logoutData)
    // Offset: 0xF88158
    void HandleDidLogout(NetEase::Docker::LogoutData logoutData);
    // public System.Threading.Tasks.Task`1<NetEase.Docker.ReceivedHighscoreData> RequestHighscoreDataAsync(System.String leaderboardId)
    // Offset: 0xF87478
    System::Threading::Tasks::Task_1<NetEase::Docker::ReceivedHighscoreData>* RequestHighscoreDataAsync(::Il2CppString* leaderboardId);
    // private System.Void HandleDidReceiveHighscore(NetEase.Docker.ReceivedHighscoreData highscoreData)
    // Offset: 0xF881CC
    void HandleDidReceiveHighscore(NetEase::Docker::ReceivedHighscoreData highscoreData);
    // public System.Void UploadHighscore(System.String leaderboardId, System.Int32 score)
    // Offset: 0xF862E8
    void UploadHighscore(::Il2CppString* leaderboardId, int score);
    // static public System.Void Log(System.String message)
    // Offset: 0xF88258
    static void Log(::Il2CppString* message);
    // public System.Void .ctor()
    // Offset: 0xF882C0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NetEaseManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::NetEaseManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NetEaseManager*, creationType>()));
    }
  }; // NetEaseManager
  #pragma pack(pop)
  static check_size<sizeof(NetEaseManager), 56 + sizeof(System::Threading::Tasks::TaskCompletionSource_1<NetEase::Docker::LogoutData>*)> __GlobalNamespace_NetEaseManagerSizeCheck;
  static_assert(sizeof(NetEaseManager) == 0x40);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::NetEaseManager*, "", "NetEaseManager");
