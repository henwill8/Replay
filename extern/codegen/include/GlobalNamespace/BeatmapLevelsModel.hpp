// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LevelDataAssetDownloadUpdate
  struct LevelDataAssetDownloadUpdate;
  // Forward declaring type: IBeatmapLevelPackCollection
  class IBeatmapLevelPackCollection;
  // Forward declaring type: BeatmapLevelPackCollectionContainerSO
  class BeatmapLevelPackCollectionContainerSO;
  // Forward declaring type: BeatmapLevelPackCollectionSO
  class BeatmapLevelPackCollectionSO;
  // Forward declaring type: BeatmapLevelDataLoaderSO
  class BeatmapLevelDataLoaderSO;
  // Forward declaring type: AdditionalContentModel
  class AdditionalContentModel;
  // Forward declaring type: IBeatmapDataAssetFileModel
  class IBeatmapDataAssetFileModel;
  // Forward declaring type: HMCache`2<K, V>
  template<typename K, typename V>
  class HMCache_2;
  // Forward declaring type: IBeatmapLevel
  class IBeatmapLevel;
  // Forward declaring type: IPreviewBeatmapLevel
  class IPreviewBeatmapLevel;
  // Forward declaring type: BeatmapLevelLoader
  class BeatmapLevelLoader;
  // Forward declaring type: IBeatmapLevelPack
  class IBeatmapLevelPack;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System::Threading
namespace System::Threading {
  // Forward declaring type: CancellationToken
  struct CancellationToken;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapLevelsModel
  // [] Offset: FFFFFFFF
  class BeatmapLevelsModel : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::BeatmapLevelsModel::GetBeatmapLevelResult
    struct GetBeatmapLevelResult;
    // Nested type: GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate
    struct LevelDownloadingUpdate;
    // Nested type: GlobalNamespace::BeatmapLevelsModel::$ReloadCustomLevelPackCollectionAsync$d__31
    struct $ReloadCustomLevelPackCollectionAsync$d__31;
    // Nested type: GlobalNamespace::BeatmapLevelsModel::$$c__DisplayClass34_0
    class $$c__DisplayClass34_0;
    // Nested type: GlobalNamespace::BeatmapLevelsModel::$$c
    class $$c;
    // Nested type: GlobalNamespace::BeatmapLevelsModel::$GetBeatmapLevelAsync$d__37
    struct $GetBeatmapLevelAsync$d__37;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: BeatmapLevelsModel/GetBeatmapLevelResult
    // [] Offset: FFFFFFFF
    struct GetBeatmapLevelResult/*, public System::ValueType*/ {
      public:
      // public readonly System.Boolean isError
      // Size: 0x1
      // Offset: 0x0
      bool isError;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: isError and: beatmapLevel
      char __padding0[0x7] = {};
      // public readonly IBeatmapLevel beatmapLevel
      // Size: 0x8
      // Offset: 0x8
      GlobalNamespace::IBeatmapLevel* beatmapLevel;
      // Field size check
      static_assert(sizeof(GlobalNamespace::IBeatmapLevel*) == 0x8);
      // Creating value type constructor for type: GetBeatmapLevelResult
      constexpr GetBeatmapLevelResult(bool isError_ = {}, GlobalNamespace::IBeatmapLevel* beatmapLevel_ = {}) noexcept : isError{isError_}, beatmapLevel{beatmapLevel_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
      // public System.Void .ctor(System.Boolean isError, IBeatmapLevel beatmapLevel)
      // Offset: 0xDF2688
      // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      // ABORTED: conflicts with another method.  GetBeatmapLevelResult(bool isError, GlobalNamespace::IBeatmapLevel* beatmapLevel)
    }; // BeatmapLevelsModel/GetBeatmapLevelResult
    #pragma pack(pop)
    static check_size<sizeof(BeatmapLevelsModel::GetBeatmapLevelResult), 8 + sizeof(GlobalNamespace::IBeatmapLevel*)> __GlobalNamespace_BeatmapLevelsModel_GetBeatmapLevelResultSizeCheck;
    static_assert(sizeof(BeatmapLevelsModel::GetBeatmapLevelResult) == 0x10);
    // Size: 0x14
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: BeatmapLevelsModel/LevelDownloadingUpdate
    // [] Offset: FFFFFFFF
    struct LevelDownloadingUpdate/*, public System::ValueType*/ {
      public:
      // Nested type: GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState
      struct DownloadingState;
      // Size: 0x4
      #pragma pack(push, 1)
      // Autogenerated type: BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState
      // [] Offset: FFFFFFFF
      struct DownloadingState/*, public System::Enum*/ {
        public:
        // public System.Int32 value__
        // Size: 0x4
        // Offset: 0x0
        int value;
        // Field size check
        static_assert(sizeof(int) == 0x4);
        // Creating value type constructor for type: DownloadingState
        constexpr DownloadingState(int value_ = {}) noexcept : value{value_} {}
        // Creating interface conversion operator: operator System::Enum
        operator System::Enum() noexcept {
          return *reinterpret_cast<System::Enum*>(this);
        }
        // Creating conversion operator: operator int
        constexpr operator int() const noexcept {
          return value;
        }
        // static field const value: static public BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState PreparingToDownload
        static constexpr const int PreparingToDownload = 0;
        // Get static field: static public BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState PreparingToDownload
        static GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState _get_PreparingToDownload();
        // Set static field: static public BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState PreparingToDownload
        static void _set_PreparingToDownload(GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState value);
        // static field const value: static public BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState Downloading
        static constexpr const int Downloading = 1;
        // Get static field: static public BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState Downloading
        static GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState _get_Downloading();
        // Set static field: static public BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState Downloading
        static void _set_Downloading(GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState value);
        // static field const value: static public BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState Completed
        static constexpr const int Completed = 2;
        // Get static field: static public BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState Completed
        static GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState _get_Completed();
        // Set static field: static public BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState Completed
        static void _set_Completed(GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState value);
      }; // BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState
      #pragma pack(pop)
      static check_size<sizeof(BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState), 0 + sizeof(int)> __GlobalNamespace_BeatmapLevelsModel_LevelDownloadingUpdate_DownloadingStateSizeCheck;
      static_assert(sizeof(BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState) == 0x4);
      // public readonly System.String levelID
      // Size: 0x8
      // Offset: 0x0
      ::Il2CppString* levelID;
      // Field size check
      static_assert(sizeof(::Il2CppString*) == 0x8);
      // public readonly System.UInt32 bytesTotal
      // Size: 0x4
      // Offset: 0x8
      uint bytesTotal;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      // public readonly System.UInt32 bytesTransferred
      // Size: 0x4
      // Offset: 0xC
      uint bytesTransferred;
      // Field size check
      static_assert(sizeof(uint) == 0x4);
      // public readonly BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState downloadingState
      // Size: 0x4
      // Offset: 0x10
      GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState downloadingState;
      // Field size check
      static_assert(sizeof(GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState) == 0x4);
      // Creating value type constructor for type: LevelDownloadingUpdate
      constexpr LevelDownloadingUpdate(::Il2CppString* levelID_ = {}, uint bytesTotal_ = {}, uint bytesTransferred_ = {}, GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState downloadingState_ = {}) noexcept : levelID{levelID_}, bytesTotal{bytesTotal_}, bytesTransferred{bytesTransferred_}, downloadingState{downloadingState_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
      // public System.Void .ctor(System.String levelID, System.UInt32 bytesTotal, System.UInt32 bytesTransferred, BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState downloadingState)
      // Offset: 0xDF2758
      // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      // ABORTED: conflicts with another method.  LevelDownloadingUpdate(::Il2CppString* levelID, uint bytesTotal, uint bytesTransferred, GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState downloadingState)
    }; // BeatmapLevelsModel/LevelDownloadingUpdate
    #pragma pack(pop)
    static check_size<sizeof(BeatmapLevelsModel::LevelDownloadingUpdate), 16 + sizeof(GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState)> __GlobalNamespace_BeatmapLevelsModel_LevelDownloadingUpdateSizeCheck;
    static_assert(sizeof(BeatmapLevelsModel::LevelDownloadingUpdate) == 0x14);
    // private BeatmapLevelPackCollectionContainerSO _dlcLevelPackCollectionContainer
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::BeatmapLevelPackCollectionContainerSO* dlcLevelPackCollectionContainer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapLevelPackCollectionContainerSO*) == 0x8);
    // private BeatmapLevelPackCollectionSO _ostAndExtrasPackCollection
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::BeatmapLevelPackCollectionSO* ostAndExtrasPackCollection;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapLevelPackCollectionSO*) == 0x8);
    // private BeatmapLevelDataLoaderSO _beatmapLevelDataLoader
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::BeatmapLevelDataLoaderSO* beatmapLevelDataLoader;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapLevelDataLoaderSO*) == 0x8);
    // private System.Int32 _maxCachedBeatmapLevels
    // Size: 0x4
    // Offset: 0x30
    int maxCachedBeatmapLevels;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: maxCachedBeatmapLevels and: additionalContentModel
    char __padding3[0x4] = {};
    // [InjectAttribute] Offset: 0xD35118
    // private AdditionalContentModel _additionalContentModel
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::AdditionalContentModel* additionalContentModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AdditionalContentModel*) == 0x8);
    // [InjectAttribute] Offset: 0xD35128
    // private IBeatmapDataAssetFileModel _beatmapDataAssetFileModel
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::IBeatmapDataAssetFileModel* beatmapDataAssetFileModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IBeatmapDataAssetFileModel*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD35138
    // private System.Action`1<BeatmapLevelsModel/LevelDownloadingUpdate> levelDownloadingUpdateEvent
    // Size: 0x8
    // Offset: 0x48
    System::Action_1<GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate>* levelDownloadingUpdateEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate>*) == 0x8);
    // private IBeatmapLevelPackCollection _allLoadedBeatmapLevelPackCollection
    // Size: 0x8
    // Offset: 0x50
    GlobalNamespace::IBeatmapLevelPackCollection* allLoadedBeatmapLevelPackCollection;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IBeatmapLevelPackCollection*) == 0x8);
    // private IBeatmapLevelPackCollection _allLoadedBeatmapLevelWithoutCustomLevelPackCollection
    // Size: 0x8
    // Offset: 0x58
    GlobalNamespace::IBeatmapLevelPackCollection* allLoadedBeatmapLevelWithoutCustomLevelPackCollection;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IBeatmapLevelPackCollection*) == 0x8);
    // private IBeatmapLevelPackCollection _customLevelPackCollection
    // Size: 0x8
    // Offset: 0x60
    GlobalNamespace::IBeatmapLevelPackCollection* customLevelPackCollection;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IBeatmapLevelPackCollection*) == 0x8);
    // private HMCache`2<System.String,IBeatmapLevel> _loadedBeatmapLevels
    // Size: 0x8
    // Offset: 0x68
    GlobalNamespace::HMCache_2<::Il2CppString*, GlobalNamespace::IBeatmapLevel*>* loadedBeatmapLevels;
    // Field size check
    static_assert(sizeof(GlobalNamespace::HMCache_2<::Il2CppString*, GlobalNamespace::IBeatmapLevel*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.String,IPreviewBeatmapLevel> _loadedPreviewBeatmapLevels
    // Size: 0x8
    // Offset: 0x70
    System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::IPreviewBeatmapLevel*>* loadedPreviewBeatmapLevels;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::IPreviewBeatmapLevel*>*) == 0x8);
    // private BeatmapLevelLoader _beatmapLevelLoader
    // Size: 0x8
    // Offset: 0x78
    GlobalNamespace::BeatmapLevelLoader* beatmapLevelLoader;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapLevelLoader*) == 0x8);
    // Creating value type constructor for type: BeatmapLevelsModel
    BeatmapLevelsModel(GlobalNamespace::BeatmapLevelPackCollectionContainerSO* dlcLevelPackCollectionContainer_ = {}, GlobalNamespace::BeatmapLevelPackCollectionSO* ostAndExtrasPackCollection_ = {}, GlobalNamespace::BeatmapLevelDataLoaderSO* beatmapLevelDataLoader_ = {}, int maxCachedBeatmapLevels_ = {}, GlobalNamespace::AdditionalContentModel* additionalContentModel_ = {}, GlobalNamespace::IBeatmapDataAssetFileModel* beatmapDataAssetFileModel_ = {}, System::Action_1<GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate>* levelDownloadingUpdateEvent_ = {}, GlobalNamespace::IBeatmapLevelPackCollection* allLoadedBeatmapLevelPackCollection_ = {}, GlobalNamespace::IBeatmapLevelPackCollection* allLoadedBeatmapLevelWithoutCustomLevelPackCollection_ = {}, GlobalNamespace::IBeatmapLevelPackCollection* customLevelPackCollection_ = {}, GlobalNamespace::HMCache_2<::Il2CppString*, GlobalNamespace::IBeatmapLevel*>* loadedBeatmapLevels_ = {}, System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::IPreviewBeatmapLevel*>* loadedPreviewBeatmapLevels_ = {}, GlobalNamespace::BeatmapLevelLoader* beatmapLevelLoader_ = {}) noexcept : dlcLevelPackCollectionContainer{dlcLevelPackCollectionContainer_}, ostAndExtrasPackCollection{ostAndExtrasPackCollection_}, beatmapLevelDataLoader{beatmapLevelDataLoader_}, maxCachedBeatmapLevels{maxCachedBeatmapLevels_}, additionalContentModel{additionalContentModel_}, beatmapDataAssetFileModel{beatmapDataAssetFileModel_}, levelDownloadingUpdateEvent{levelDownloadingUpdateEvent_}, allLoadedBeatmapLevelPackCollection{allLoadedBeatmapLevelPackCollection_}, allLoadedBeatmapLevelWithoutCustomLevelPackCollection{allLoadedBeatmapLevelWithoutCustomLevelPackCollection_}, customLevelPackCollection{customLevelPackCollection_}, loadedBeatmapLevels{loadedBeatmapLevels_}, loadedPreviewBeatmapLevels{loadedPreviewBeatmapLevels_}, beatmapLevelLoader{beatmapLevelLoader_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void add_levelDownloadingUpdateEvent(System.Action`1<BeatmapLevelsModel/LevelDownloadingUpdate> value)
    // Offset: 0x107A724
    void add_levelDownloadingUpdateEvent(System::Action_1<GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate>* value);
    // public System.Void remove_levelDownloadingUpdateEvent(System.Action`1<BeatmapLevelsModel/LevelDownloadingUpdate> value)
    // Offset: 0x107A7C8
    void remove_levelDownloadingUpdateEvent(System::Action_1<GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate>* value);
    // public BeatmapLevelPackCollectionSO get_ostAndExtrasPackCollection()
    // Offset: 0x107A86C
    GlobalNamespace::BeatmapLevelPackCollectionSO* get_ostAndExtrasPackCollection();
    // public IBeatmapLevelPackCollection get_dlcBeatmapLevelPackCollection()
    // Offset: 0x107A874
    GlobalNamespace::IBeatmapLevelPackCollection* get_dlcBeatmapLevelPackCollection();
    // public IBeatmapLevelPackCollection get_allLoadedBeatmapLevelPackCollection()
    // Offset: 0x107A890
    GlobalNamespace::IBeatmapLevelPackCollection* get_allLoadedBeatmapLevelPackCollection();
    // public IBeatmapLevelPackCollection get_allLoadedBeatmapLevelWithoutCustomLevelPackCollection()
    // Offset: 0x107A898
    GlobalNamespace::IBeatmapLevelPackCollection* get_allLoadedBeatmapLevelWithoutCustomLevelPackCollection();
    // public IBeatmapLevelPackCollection get_customLevelPackCollection()
    // Offset: 0x107A8A0
    GlobalNamespace::IBeatmapLevelPackCollection* get_customLevelPackCollection();
    // private System.Void Init()
    // Offset: 0x107A8A8
    void Init();
    // protected System.Void Start()
    // Offset: 0x107AC30
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x107AD20
    void OnDestroy();
    // public System.Void ClearLoadedBeatmapLevelsCaches()
    // Offset: 0x107AE14
    void ClearLoadedBeatmapLevelsCaches();
    // public System.Threading.Tasks.Task`1<IBeatmapLevelPackCollection> ReloadCustomLevelPackCollectionAsync(System.Threading.CancellationToken cancellationToken)
    // Offset: 0x107AE6C
    System::Threading::Tasks::Task_1<GlobalNamespace::IBeatmapLevelPackCollection*>* ReloadCustomLevelPackCollectionAsync(System::Threading::CancellationToken cancellationToken);
    // public IBeatmapLevelPack GetLevelPackForLevelId(System.String levelId)
    // Offset: 0x107AF78
    GlobalNamespace::IBeatmapLevelPack* GetLevelPackForLevelId(::Il2CppString* levelId);
    // public IBeatmapLevelPack GetLevelPack(System.String levePacklId)
    // Offset: 0x107B230
    GlobalNamespace::IBeatmapLevelPack* GetLevelPack(::Il2CppString* levePacklId);
    // public IPreviewBeatmapLevel GetLevelPreviewForLevelId(System.String levelId)
    // Offset: 0x107B3C0
    GlobalNamespace::IPreviewBeatmapLevel* GetLevelPreviewForLevelId(::Il2CppString* levelId);
    // public System.Boolean IsBeatmapLevelLoaded(System.String levelId)
    // Offset: 0x107B5C4
    bool IsBeatmapLevelLoaded(::Il2CppString* levelId);
    // public IBeatmapLevel GetBeatmapLevelIfLoaded(System.String levelId)
    // Offset: 0x107B690
    GlobalNamespace::IBeatmapLevel* GetBeatmapLevelIfLoaded(::Il2CppString* levelId);
    // public System.Threading.Tasks.Task`1<BeatmapLevelsModel/GetBeatmapLevelResult> GetBeatmapLevelAsync(System.String levelID, System.Threading.CancellationToken cancellationToken)
    // Offset: 0x107B784
    System::Threading::Tasks::Task_1<GlobalNamespace::BeatmapLevelsModel::GetBeatmapLevelResult>* GetBeatmapLevelAsync(::Il2CppString* levelID, System::Threading::CancellationToken cancellationToken);
    // private System.Void HandleLevelDataAssetDownloadUpdate(LevelDataAssetDownloadUpdate update)
    // Offset: 0x107B8D0
    void HandleLevelDataAssetDownloadUpdate(GlobalNamespace::LevelDataAssetDownloadUpdate update);
    // private System.Void UpdateLoadedPreviewLevels()
    // Offset: 0x107A968
    void UpdateLoadedPreviewLevels();
    // private System.Void UpdateAllLoadedBeatmapLevelPacks()
    // Offset: 0x107B984
    void UpdateAllLoadedBeatmapLevelPacks();
    // public System.Void .ctor()
    // Offset: 0x107BAF4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapLevelsModel* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapLevelsModel::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapLevelsModel*, creationType>()));
    }
  }; // BeatmapLevelsModel
  #pragma pack(pop)
  static check_size<sizeof(BeatmapLevelsModel), 120 + sizeof(GlobalNamespace::BeatmapLevelLoader*)> __GlobalNamespace_BeatmapLevelsModelSizeCheck;
  static_assert(sizeof(BeatmapLevelsModel) == 0x80);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BeatmapLevelsModel*, "", "BeatmapLevelsModel");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BeatmapLevelsModel::GetBeatmapLevelResult, "", "BeatmapLevelsModel/GetBeatmapLevelResult");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate, "", "BeatmapLevelsModel/LevelDownloadingUpdate");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BeatmapLevelsModel::LevelDownloadingUpdate::DownloadingState, "", "BeatmapLevelsModel/LevelDownloadingUpdate/DownloadingState");
