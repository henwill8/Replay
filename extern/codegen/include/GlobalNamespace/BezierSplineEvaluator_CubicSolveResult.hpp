// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BezierSplineEvaluator
#include "GlobalNamespace/BezierSplineEvaluator.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: BezierSplineEvaluator/CubicSolveResult
  struct BezierSplineEvaluator::CubicSolveResult : public System::ValueType {
    public:
    // public readonly System.Int32 numberOfSolutions
    // Offset: 0x0
    int numberOfSolutions;
    // public System.Single solution1
    // Offset: 0x4
    float solution1;
    // public System.Single solution2
    // Offset: 0x8
    float solution2;
    // public System.Single solution3
    // Offset: 0xC
    float solution3;
    // Creating value type constructor for type: CubicSolveResult
    constexpr CubicSolveResult(int numberOfSolutions_ = {}, float solution1_ = {}, float solution2_ = {}, float solution3_ = {}) noexcept : numberOfSolutions{numberOfSolutions_}, solution1{solution1_}, solution2{solution2_}, solution3{solution3_} {}
    // public System.Void .ctor(System.Single solution1)
    // Offset: 0xE7F364
    CubicSolveResult(float solution1);
    // public System.Void .ctor(System.Single solution1, System.Single solution2)
    // Offset: 0xE7F378
    CubicSolveResult(float solution1, float solution2);
    // public System.Void .ctor(System.Single solution1, System.Single solution2, System.Single solution3)
    // Offset: 0xE7F38C
    CubicSolveResult(float solution1, float solution2, float solution3);
  }; // BezierSplineEvaluator/CubicSolveResult
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BezierSplineEvaluator::CubicSolveResult, "", "BezierSplineEvaluator/CubicSolveResult");
#pragma pack(pop)
