// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.Layers.PacketLayerBase
#include "LiteNetLib/Layers/PacketLayerBase.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Byte
#include "System/Byte.hpp"
// Including type: System.Int64
#include "System/Int64.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ExpiringDictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class ExpiringDictionary_2;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPEndPoint
  class IPEndPoint;
  // Forward declaring type: IPAddress
  class IPAddress;
}
// Forward declaring namespace: System::Security::Cryptography
namespace System::Security::Cryptography {
  // Forward declaring type: AesCryptoServiceProvider
  class AesCryptoServiceProvider;
}
// Forward declaring namespace: System::Diagnostics
namespace System::Diagnostics {
  // Forward declaring type: Stopwatch
  class Stopwatch;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: PacketEncryptionLayer
  class PacketEncryptionLayer : public LiteNetLib::Layers::PacketLayerBase {
    public:
    // Nested type: GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics
    class EncryptionStatistics;
    // Nested type: GlobalNamespace::PacketEncryptionLayer::IEncryptionState
    class IEncryptionState;
    // Nested type: GlobalNamespace::PacketEncryptionLayer::EncryptionState
    class EncryptionState;
    // Nested type: GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList
    class PendingEncryptionStateList;
    // public readonly PacketEncryptionLayer/EncryptionStatistics statistics
    // Offset: 0x18
    GlobalNamespace::PacketEncryptionLayer::EncryptionStatistics* statistics;
    // private readonly ExpiringDictionary`2<System.Net.IPEndPoint,PacketEncryptionLayer/EncryptionState> _encryptionStates
    // Offset: 0x20
    GlobalNamespace::ExpiringDictionary_2<System::Net::IPEndPoint*, GlobalNamespace::PacketEncryptionLayer::EncryptionState*>* encryptionStates;
    // private readonly ExpiringDictionary`2<System.Net.IPAddress,PacketEncryptionLayer/PendingEncryptionStateList> _pendingEncryptionStates
    // Offset: 0x28
    GlobalNamespace::ExpiringDictionary_2<System::Net::IPAddress*, GlobalNamespace::PacketEncryptionLayer::PendingEncryptionStateList*>* pendingEncryptionStates;
    // private readonly System.Security.Cryptography.AesCryptoServiceProvider _aes
    // Offset: 0x30
    System::Security::Cryptography::AesCryptoServiceProvider* aes;
    // private System.Byte[] _unencryptedTrafficFilter
    // Offset: 0x38
    ::Array<uint8_t>* unencryptedTrafficFilter;
    // private System.Boolean <filterUnencryptedTraffic>k__BackingField
    // Offset: 0x40
    bool filterUnencryptedTraffic;
    // private System.Boolean <enableStatistics>k__BackingField
    // Offset: 0x41
    bool enableStatistics;
    // Deleting conversion operator: operator int
    constexpr operator int() const noexcept = delete;
    // static field const value: static private System.Int32 kMacHashSize
    static constexpr const int kMacHashSize = 10;
    // Get static field: static private System.Int32 kMacHashSize
    static int _get_kMacHashSize();
    // Set static field: static private System.Int32 kMacHashSize
    static void _set_kMacHashSize(int value);
    // static field const value: static private System.Int32 kHeaderSize
    static constexpr const int kHeaderSize = 5;
    // Get static field: static private System.Int32 kHeaderSize
    static int _get_kHeaderSize();
    // Set static field: static private System.Int32 kHeaderSize
    static void _set_kHeaderSize(int value);
    // static field const value: static private System.Int32 kMaxPadding
    static constexpr const int kMaxPadding = 64;
    // Get static field: static private System.Int32 kMaxPadding
    static int _get_kMaxPadding();
    // Set static field: static private System.Int32 kMaxPadding
    static void _set_kMaxPadding(int value);
    // static field const value: static private System.Int32 kMacKeySize
    static constexpr const int kMacKeySize = 64;
    // Get static field: static private System.Int32 kMacKeySize
    static int _get_kMacKeySize();
    // Set static field: static private System.Int32 kMacKeySize
    static void _set_kMacKeySize(int value);
    // static field const value: static private System.Int32 kKeySize
    static constexpr const int kKeySize = 32;
    // Get static field: static private System.Int32 kKeySize
    static int _get_kKeySize();
    // Set static field: static private System.Int32 kKeySize
    static void _set_kKeySize(int value);
    // static field const value: static private System.Int32 kBlockSize
    static constexpr const int kBlockSize = 16;
    // Get static field: static private System.Int32 kBlockSize
    static int _get_kBlockSize();
    // Set static field: static private System.Int32 kBlockSize
    static void _set_kBlockSize(int value);
    // static field const value: static private System.Int32 kMasterKeySize
    static constexpr const int kMasterKeySize = 48;
    // Get static field: static private System.Int32 kMasterKeySize
    static int _get_kMasterKeySize();
    // Set static field: static private System.Int32 kMasterKeySize
    static void _set_kMasterKeySize(int value);
    // static field const value: static private System.Byte kEncryptedPacketType
    static constexpr const uint8_t kEncryptedPacketType = 1u;
    // Get static field: static private System.Byte kEncryptedPacketType
    static uint8_t _get_kEncryptedPacketType();
    // Set static field: static private System.Byte kEncryptedPacketType
    static void _set_kEncryptedPacketType(uint8_t value);
    // static field const value: static private System.Byte kPlaintextPacketType
    static constexpr const uint8_t kPlaintextPacketType = 0u;
    // Get static field: static private System.Byte kPlaintextPacketType
    static uint8_t _get_kPlaintextPacketType();
    // Set static field: static private System.Byte kPlaintextPacketType
    static void _set_kPlaintextPacketType(uint8_t value);
    // static field const value: static public System.Int32 kRandomBlockSize
    static constexpr const int kRandomBlockSize = 32;
    // Get static field: static public System.Int32 kRandomBlockSize
    static int _get_kRandomBlockSize();
    // Set static field: static public System.Int32 kRandomBlockSize
    static void _set_kRandomBlockSize(int value);
    // static field const value: static private System.Int64 kEncryptionStateTimeout
    static constexpr const int64_t kEncryptionStateTimeout = 3000000000;
    // Get static field: static private System.Int64 kEncryptionStateTimeout
    static int64_t _get_kEncryptionStateTimeout();
    // Set static field: static private System.Int64 kEncryptionStateTimeout
    static void _set_kEncryptionStateTimeout(int64_t value);
    // static field const value: static private System.Int64 kPendingEncryptionStateTimeout
    static constexpr const int64_t kPendingEncryptionStateTimeout = 100000000;
    // Get static field: static private System.Int64 kPendingEncryptionStateTimeout
    static int64_t _get_kPendingEncryptionStateTimeout();
    // Set static field: static private System.Int64 kPendingEncryptionStateTimeout
    static void _set_kPendingEncryptionStateTimeout(int64_t value);
    // Get static field: static private System.Byte[] _masterSecretSeed
    static ::Array<uint8_t>* _get__masterSecretSeed();
    // Set static field: static private System.Byte[] _masterSecretSeed
    static void _set__masterSecretSeed(::Array<uint8_t>* value);
    // Get static field: static private System.Byte[] _keyExpansionSeed
    static ::Array<uint8_t>* _get__keyExpansionSeed();
    // Set static field: static private System.Byte[] _keyExpansionSeed
    static void _set__keyExpansionSeed(::Array<uint8_t>* value);
    // Get static field: static private System.Byte[] _tempIV
    static ::Array<uint8_t>* _get__tempIV();
    // Set static field: static private System.Byte[] _tempIV
    static void _set__tempIV(::Array<uint8_t>* value);
    // Get static field: static private System.Byte[] _tempHash
    static ::Array<uint8_t>* _get__tempHash();
    // Set static field: static private System.Byte[] _tempHash
    static void _set__tempHash(::Array<uint8_t>* value);
    // Get static field: static private System.Diagnostics.Stopwatch _stopwatch
    static System::Diagnostics::Stopwatch* _get__stopwatch();
    // Set static field: static private System.Diagnostics.Stopwatch _stopwatch
    static void _set__stopwatch(System::Diagnostics::Stopwatch* value);
    // static private System.Void NoDomainReloadInit()
    // Offset: 0x1E4C8D4
    static void NoDomainReloadInit();
    // private System.Void .ctor(System.Security.Cryptography.AesCryptoServiceProvider aes)
    // Offset: 0x1E4C9F0
    static PacketEncryptionLayer* New_ctor(System::Security::Cryptography::AesCryptoServiceProvider* aes);
    // public System.Boolean get_filterUnencryptedTraffic()
    // Offset: 0x1E4CB40
    bool get_filterUnencryptedTraffic();
    // public System.Void set_filterUnencryptedTraffic(System.Boolean value)
    // Offset: 0x1E4CB48
    void set_filterUnencryptedTraffic(bool value);
    // public System.Boolean get_enableStatistics()
    // Offset: 0x1E4CB54
    bool get_enableStatistics();
    // public System.Void set_enableStatistics(System.Boolean value)
    // Offset: 0x1E4CB5C
    void set_enableStatistics(bool value);
    // public System.Void SetUnencryptedTrafficFilter(System.Byte[] unencryptedTrafficFilter)
    // Offset: 0x1E4D9B4
    void SetUnencryptedTrafficFilter(::Array<uint8_t>* unencryptedTrafficFilter);
    // public PacketEncryptionLayer/IEncryptionState AddEncryptedEndpoint(System.UInt32 protocolVersion, System.Net.IPEndPoint endPoint, System.Byte[] preMasterSecret, System.Byte[] serverRandom, System.Byte[] clientRandom, System.Boolean isClient)
    // Offset: 0x1E4D9BC
    GlobalNamespace::PacketEncryptionLayer::IEncryptionState* AddEncryptedEndpoint(uint protocolVersion, System::Net::IPEndPoint* endPoint, ::Array<uint8_t>* preMasterSecret, ::Array<uint8_t>* serverRandom, ::Array<uint8_t>* clientRandom, bool isClient);
    // public System.Boolean RemoveEncryptedEndpoint(System.Net.IPEndPoint endPoint, PacketEncryptionLayer/IEncryptionState encryptedState)
    // Offset: 0x1E4DD90
    bool RemoveEncryptedEndpoint(System::Net::IPEndPoint* endPoint, GlobalNamespace::PacketEncryptionLayer::IEncryptionState* encryptedState);
    // public System.Void AddPendingEncryptedEndpoint(System.UInt32 protocolVersion, System.Net.IPEndPoint endPoint, System.Byte[] preMasterSecret, System.Byte[] serverRandom, System.Byte[] clientRandom, System.Boolean isClient)
    // Offset: 0x1E4E128
    void AddPendingEncryptedEndpoint(uint protocolVersion, System::Net::IPEndPoint* endPoint, ::Array<uint8_t>* preMasterSecret, ::Array<uint8_t>* serverRandom, ::Array<uint8_t>* clientRandom, bool isClient);
    // public System.Void PollUpdate()
    // Offset: 0x1E4E3F0
    void PollUpdate();
    // public System.Void RemoveAllEndpoints()
    // Offset: 0x1E4E584
    void RemoveAllEndpoints();
    // private System.Boolean TryGetEncryptionState(System.Net.IPEndPoint endPoint, out PacketEncryptionLayer/EncryptionState state)
    // Offset: 0x1E4E718
    bool TryGetEncryptionState(System::Net::IPEndPoint* endPoint, GlobalNamespace::PacketEncryptionLayer::EncryptionState*& state);
    // private System.Boolean TryGetPendingEncryptionState(System.Net.IPEndPoint endPoint, out PacketEncryptionLayer/EncryptionState state)
    // Offset: 0x1E4E830
    bool TryGetPendingEncryptionState(System::Net::IPEndPoint* endPoint, GlobalNamespace::PacketEncryptionLayer::EncryptionState*& state);
    // private System.Boolean TryGetPotentialPendingEncryptionStates(System.Net.IPEndPoint endPoint, out PacketEncryptionLayer/EncryptionState[] encryptionStates)
    // Offset: 0x1E4EB40
    bool TryGetPotentialPendingEncryptionStates(System::Net::IPEndPoint* endPoint, ::Array<GlobalNamespace::PacketEncryptionLayer::EncryptionState*>*& encryptionStates);
    // private System.Void PromotePendingEncryptionState(System.Net.IPEndPoint endPoint, PacketEncryptionLayer/EncryptionState state)
    // Offset: 0x1E4EE58
    void PromotePendingEncryptionState(System::Net::IPEndPoint* endPoint, GlobalNamespace::PacketEncryptionLayer::EncryptionState* state);
    // private System.Boolean MatchesFilter(System.Byte[] data, System.Int32 offset, System.Int32 length)
    // Offset: 0x1E4F208
    bool MatchesFilter(::Array<uint8_t>* data, int offset, int length);
    // private System.Boolean ProcessInboundPacketInternal(System.Net.IPEndPoint remoteEndPoint, ref System.Byte[] data, ref System.Int32 offset, ref System.Int32 length, out System.Boolean encrypted)
    // Offset: 0x1E4CDB0
    bool ProcessInboundPacketInternal(System::Net::IPEndPoint* remoteEndPoint, ::Array<uint8_t>*& data, int& offset, int& length, bool& encrypted);
    // private System.Boolean TryDecryptData(System.Byte[] data, PacketEncryptionLayer/EncryptionState state, System.Int32 startingOffset, ref System.Int32 offset, ref System.Int32 length)
    // Offset: 0x1E4F290
    bool TryDecryptData(::Array<uint8_t>* data, GlobalNamespace::PacketEncryptionLayer::EncryptionState* state, int startingOffset, int& offset, int& length);
    // public System.Boolean ProcessOutBoundPacketInternal(System.Net.IPEndPoint remoteEndPoint, ref System.Byte[] data, ref System.Int32 offset, ref System.Int32 length, out System.Boolean encrypted)
    // Offset: 0x1E4D1F0
    bool ProcessOutBoundPacketInternal(System::Net::IPEndPoint* remoteEndPoint, ::Array<uint8_t>*& data, int& offset, int& length, bool& encrypted);
    // static private System.Void FastCopyBlock(System.Byte[] inArr, System.Int32 inOff, System.Byte[] outArr, System.Int32 outOff)
    // Offset: 0x1E50188
    static void FastCopyBlock(::Array<uint8_t>* inArr, int inOff, ::Array<uint8_t>* outArr, int outOff);
    // static private System.Void FastCopyMac(System.Byte[] inArr, System.Int32 inOff, System.Byte[] outArr, System.Int32 outOff)
    // Offset: 0x1E504A8
    static void FastCopyMac(::Array<uint8_t>* inArr, int inOff, ::Array<uint8_t>* outArr, int outOff);
    // static public System.Void Log(System.String message)
    // Offset: 0x1E506A8
    static void Log(::Il2CppString* message);
    // static public System.Void LogV(System.String message)
    // Offset: 0x1E50730
    static void LogV(::Il2CppString* message);
    // static private System.Void .cctor()
    // Offset: 0x1E507B8
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x1E4CB68
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static PacketEncryptionLayer* New_ctor();
    // public override System.Void ProcessInboundPacket(System.Net.IPEndPoint remoteEndPoint, ref System.Byte[] data, ref System.Int32 offset, ref System.Int32 length)
    // Offset: 0x1E4CBCC
    // Implemented from: LiteNetLib.Layers.PacketLayerBase
    // Base method: System.Void PacketLayerBase::ProcessInboundPacket(System.Net.IPEndPoint remoteEndPoint, ref System.Byte[] data, ref System.Int32 offset, ref System.Int32 length)
    void ProcessInboundPacket(System::Net::IPEndPoint* remoteEndPoint, ::Array<uint8_t>*& data, int& offset, int& length);
    // public override System.Void ProcessOutBoundPacket(System.Net.IPEndPoint remoteEndPoint, ref System.Byte[] data, ref System.Int32 offset, ref System.Int32 length)
    // Offset: 0x1E4D020
    // Implemented from: LiteNetLib.Layers.PacketLayerBase
    // Base method: System.Void PacketLayerBase::ProcessOutBoundPacket(System.Net.IPEndPoint remoteEndPoint, ref System.Byte[] data, ref System.Int32 offset, ref System.Int32 length)
    void ProcessOutBoundPacket(System::Net::IPEndPoint* remoteEndPoint, ::Array<uint8_t>*& data, int& offset, int& length);
  }; // PacketEncryptionLayer
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PacketEncryptionLayer*, "", "PacketEncryptionLayer");
#pragma pack(pop)
