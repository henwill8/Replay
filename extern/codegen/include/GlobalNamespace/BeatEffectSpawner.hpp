// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
// Including type: BeatEffect
#include "GlobalNamespace/BeatEffect.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ColorManager
  class ColorManager;
  // Forward declaring type: BeatmapObjectManager
  class BeatmapObjectManager;
  // Forward declaring type: AudioTimeSyncController
  class AudioTimeSyncController;
  // Forward declaring type: SongController
  class SongController;
  // Forward declaring type: MonoMemoryPoolContainer`1<T>
  template<typename T>
  class MonoMemoryPoolContainer_1;
  // Forward declaring type: NoteController
  class NoteController;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: BeatEffectSpawner
  // [] Offset: FFFFFFFF
  class BeatEffectSpawner : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::BeatEffectSpawner::InitData
    class InitData;
    // private System.Single _effectDuration
    // Size: 0x4
    // Offset: 0x18
    float effectDuration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Color _bombColorEffect
    // Size: 0x10
    // Offset: 0x1C
    UnityEngine::Color bombColorEffect;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // Padding between fields: bombColorEffect and: colorManager
    char __padding1[0x4] = {};
    // [InjectAttribute] Offset: 0xD3824C
    // private readonly ColorManager _colorManager
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::ColorManager* colorManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorManager*) == 0x8);
    // [InjectAttribute] Offset: 0xD3825C
    // private readonly BeatmapObjectManager _beatmapObjectManager
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::BeatmapObjectManager* beatmapObjectManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectManager*) == 0x8);
    // [InjectAttribute] Offset: 0xD3826C
    // private readonly AudioTimeSyncController _audioTimeSyncController
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::AudioTimeSyncController* audioTimeSyncController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AudioTimeSyncController*) == 0x8);
    // [InjectAttribute] Offset: 0xD3827C
    // private readonly BeatEffectSpawner/InitData _initData
    // Size: 0x8
    // Offset: 0x48
    GlobalNamespace::BeatEffectSpawner::InitData* initData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatEffectSpawner::InitData*) == 0x8);
    // private SongController _songController
    // Size: 0x8
    // Offset: 0x50
    GlobalNamespace::SongController* songController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SongController*) == 0x8);
    // private MonoMemoryPoolContainer`1<BeatEffect> _beatEffectPoolContainer
    // Size: 0x8
    // Offset: 0x58
    GlobalNamespace::MonoMemoryPoolContainer_1<GlobalNamespace::BeatEffect*>* beatEffectPoolContainer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MonoMemoryPoolContainer_1<GlobalNamespace::BeatEffect*>*) == 0x8);
    // private readonly System.Collections.Generic.List`1<BeatEffect> _beatEffectsToDespawn
    // Size: 0x8
    // Offset: 0x60
    System::Collections::Generic::List_1<GlobalNamespace::BeatEffect*>* beatEffectsToDespawn;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::BeatEffect*>*) == 0x8);
    // Creating value type constructor for type: BeatEffectSpawner
    BeatEffectSpawner(float effectDuration_ = {}, UnityEngine::Color bombColorEffect_ = {}, GlobalNamespace::ColorManager* colorManager_ = {}, GlobalNamespace::BeatmapObjectManager* beatmapObjectManager_ = {}, GlobalNamespace::AudioTimeSyncController* audioTimeSyncController_ = {}, GlobalNamespace::BeatEffectSpawner::InitData* initData_ = {}, GlobalNamespace::SongController* songController_ = {}, GlobalNamespace::MonoMemoryPoolContainer_1<GlobalNamespace::BeatEffect*>* beatEffectPoolContainer_ = {}, System::Collections::Generic::List_1<GlobalNamespace::BeatEffect*>* beatEffectsToDespawn_ = {}) noexcept : effectDuration{effectDuration_}, bombColorEffect{bombColorEffect_}, colorManager{colorManager_}, beatmapObjectManager{beatmapObjectManager_}, audioTimeSyncController{audioTimeSyncController_}, initData{initData_}, songController{songController_}, beatEffectPoolContainer{beatEffectPoolContainer_}, beatEffectsToDespawn{beatEffectsToDespawn_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // private System.Void Init(BeatEffect/Pool beatEffectPool)
    // Offset: 0x1067738
    void Init(GlobalNamespace::BeatEffect::Pool* beatEffectPool);
    // protected System.Void Start()
    // Offset: 0x10677B8
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x106784C
    void OnDestroy();
    // protected System.Void Update()
    // Offset: 0x10678EC
    void Update();
    // private System.Void HandleNoteDidStartJump(NoteController noteController)
    // Offset: 0x1067ADC
    void HandleNoteDidStartJump(GlobalNamespace::NoteController* noteController);
    // private System.Void HandleBeatEffectDidFinish(BeatEffect beatEffect)
    // Offset: 0x1067DB4
    void HandleBeatEffectDidFinish(GlobalNamespace::BeatEffect* beatEffect);
    // public System.Void .ctor()
    // Offset: 0x1067E60
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatEffectSpawner* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatEffectSpawner::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatEffectSpawner*, creationType>()));
    }
  }; // BeatEffectSpawner
  #pragma pack(pop)
  static check_size<sizeof(BeatEffectSpawner), 96 + sizeof(System::Collections::Generic::List_1<GlobalNamespace::BeatEffect*>*)> __GlobalNamespace_BeatEffectSpawnerSizeCheck;
  static_assert(sizeof(BeatEffectSpawner) == 0x68);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BeatEffectSpawner*, "", "BeatEffectSpawner");
