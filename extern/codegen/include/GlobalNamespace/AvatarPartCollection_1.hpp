// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Object
  class Object;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IAvatarPart
  class IAvatarPart;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: AvatarPartCollection`1
  // [] Offset: FFFFFFFF
  template<typename T>
  class AvatarPartCollection_1 : public ::Il2CppObject {
    public:
    // private readonly System.Collections.Generic.Dictionary`2<System.String,T> _partById
    // Size: 0x8
    // Offset: 0x0
    System::Collections::Generic::Dictionary_2<::Il2CppString*, T>* partById;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<::Il2CppString*, T>*) == 0x8);
    // private readonly System.Collections.Generic.Dictionary`2<System.String,System.Int32> _partIndexById
    // Size: 0x8
    // Offset: 0x0
    System::Collections::Generic::Dictionary_2<::Il2CppString*, int>* partIndexById;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<::Il2CppString*, int>*) == 0x8);
    // private readonly T[] _parts
    // Size: 0x8
    // Offset: 0x0
    ::Array<T>* parts;
    // Field size check
    static_assert(sizeof(::Array<T>*) == 0x8);
    // Creating value type constructor for type: AvatarPartCollection_1
    AvatarPartCollection_1(System::Collections::Generic::Dictionary_2<::Il2CppString*, T>* partById_ = {}, System::Collections::Generic::Dictionary_2<::Il2CppString*, int>* partIndexById_ = {}, ::Array<T>* parts_ = {}) noexcept : partById{partById_}, partIndexById{partIndexById_}, parts{parts_} {}
    // public System.Int32 get_count()
    // Offset: 0xFFFFFFFF
    int get_count() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartCollection_1::get_count");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_count", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
    }
    // public T[] get_parts()
    // Offset: 0xFFFFFFFF
    ::Array<T>* get_parts() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartCollection_1::get_parts");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_parts", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<::Array<T>*, false>(this, ___internal__method);
    }
    // public System.Void .ctor(T[] parts)
    // Offset: 0xFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AvatarPartCollection_1<T>* New_ctor(::Array<T>* parts) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartCollection_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AvatarPartCollection_1<T>*, creationType>(parts)));
    }
    // public T GetById(System.String id)
    // Offset: 0xFFFFFFFF
    T GetById(::Il2CppString* id) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartCollection_1::GetById");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetById", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(id)));
      return ::il2cpp_utils::RunMethodThrow<T, false>(this, ___internal__method, id);
    }
    // public T GetRandom()
    // Offset: 0xFFFFFFFF
    T GetRandom() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartCollection_1::GetRandom");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetRandom", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<T, false>(this, ___internal__method);
    }
    // public T GetByIndex(System.Int32 index)
    // Offset: 0xFFFFFFFF
    T GetByIndex(int index) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartCollection_1::GetByIndex");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetByIndex", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(index)));
      return ::il2cpp_utils::RunMethodThrow<T, false>(this, ___internal__method, index);
    }
    // public System.Int32 GetIndexById(System.String id)
    // Offset: 0xFFFFFFFF
    int GetIndexById(::Il2CppString* id) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartCollection_1::GetIndexById");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetIndexById", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(id)));
      return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method, id);
    }
    // public T GetDefault()
    // Offset: 0xFFFFFFFF
    T GetDefault() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPartCollection_1::GetDefault");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetDefault", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<T, false>(this, ___internal__method);
    }
  }; // AvatarPartCollection`1
  // Could not write size check! Type: AvatarPartCollection`1 is generic, or has no fields that are valid for size checks!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(GlobalNamespace::AvatarPartCollection_1, "", "AvatarPartCollection`1");
