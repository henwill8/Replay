// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: RemoteProcedureCall
#include "GlobalNamespace/RemoteProcedureCall.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: Vector3Serializable
#include "GlobalNamespace/Vector3Serializable.hpp"
// Including type: Vector4Serializable
#include "GlobalNamespace/Vector4Serializable.hpp"
// Including type: QuaternionSerializable
#include "GlobalNamespace/QuaternionSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Enum
  class Enum;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Skipping declaration: INetSerializable because it is already included!
  // Forward declaring type: INetImmutableSerializable`1<T>
  template<typename T>
  class INetImmutableSerializable_1;
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: NetDataReader
  class NetDataReader;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: RemoteProcedureCall/TypeWrapper`1
  template<typename T>
  struct RemoteProcedureCall::TypeWrapper_1 : public System::ValueType {
    public:
    // private System.Object _v
    // Offset: 0x0
    ::Il2CppObject* v;
    // Creating value type constructor for type: TypeWrapper_1
    constexpr TypeWrapper_1(::Il2CppObject* v_ = {}) noexcept : v{v_} {}
    // Creating conversion operator: operator ::Il2CppObject*
    constexpr operator ::Il2CppObject*() const noexcept {
      return v;
    }
    // private System.Enum get_e()
    // Offset: 0xFFFFFFFF
    System::Enum* get_e() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<System::Enum*>(*this, "get_e"));
    }
    // private System.Void set_e(System.Enum value)
    // Offset: 0xFFFFFFFF
    void set_e(System::Enum* value) {
      THROW_UNLESS(il2cpp_utils::RunMethod(*this, "set_e", value));
    }
    // private System.Int32 get_i()
    // Offset: 0xFFFFFFFF
    int get_i() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<int>(*this, "get_i"));
    }
    // private System.Void set_i(System.Int32 value)
    // Offset: 0xFFFFFFFF
    void set_i(int value) {
      THROW_UNLESS(il2cpp_utils::RunMethod(*this, "set_i", value));
    }
    // private System.Int64 get_l()
    // Offset: 0xFFFFFFFF
    int64_t get_l() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<int64_t>(*this, "get_l"));
    }
    // private System.Void set_l(System.Int64 value)
    // Offset: 0xFFFFFFFF
    void set_l(int64_t value) {
      THROW_UNLESS(il2cpp_utils::RunMethod(*this, "set_l", value));
    }
    // private System.Single get_f()
    // Offset: 0xFFFFFFFF
    float get_f() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<float>(*this, "get_f"));
    }
    // private System.Void set_f(System.Single value)
    // Offset: 0xFFFFFFFF
    void set_f(float value) {
      THROW_UNLESS(il2cpp_utils::RunMethod(*this, "set_f", value));
    }
    // private System.Byte get_c()
    // Offset: 0xFFFFFFFF
    uint8_t get_c() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<uint8_t>(*this, "get_c"));
    }
    // private System.Void set_c(System.Byte value)
    // Offset: 0xFFFFFFFF
    void set_c(uint8_t value) {
      THROW_UNLESS(il2cpp_utils::RunMethod(*this, "set_c", value));
    }
    // private System.Boolean get_b()
    // Offset: 0xFFFFFFFF
    bool get_b() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(*this, "get_b"));
    }
    // private System.Void set_b(System.Boolean value)
    // Offset: 0xFFFFFFFF
    void set_b(bool value) {
      THROW_UNLESS(il2cpp_utils::RunMethod(*this, "set_b", value));
    }
    // private System.String get_s()
    // Offset: 0xFFFFFFFF
    ::Il2CppString* get_s() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppString*>(*this, "get_s"));
    }
    // private System.Void set_s(System.String value)
    // Offset: 0xFFFFFFFF
    void set_s(::Il2CppString* value) {
      THROW_UNLESS(il2cpp_utils::RunMethod(*this, "set_s", value));
    }
    // private System.Int32[] get_ia()
    // Offset: 0xFFFFFFFF
    ::Array<int>* get_ia() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<int>*>(*this, "get_ia"));
    }
    // private System.Void set_ia(System.Int32[] value)
    // Offset: 0xFFFFFFFF
    void set_ia(::Array<int>* value) {
      THROW_UNLESS(il2cpp_utils::RunMethod(*this, "set_ia", value));
    }
    // private System.Int64[] get_la()
    // Offset: 0xFFFFFFFF
    ::Array<int64_t>* get_la() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<int64_t>*>(*this, "get_la"));
    }
    // private System.Void set_la(System.Int64[] value)
    // Offset: 0xFFFFFFFF
    void set_la(::Array<int64_t>* value) {
      THROW_UNLESS(il2cpp_utils::RunMethod(*this, "set_la", value));
    }
    // private System.Single[] get_fa()
    // Offset: 0xFFFFFFFF
    ::Array<float>* get_fa() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<float>*>(*this, "get_fa"));
    }
    // private System.Void set_fa(System.Single[] value)
    // Offset: 0xFFFFFFFF
    void set_fa(::Array<float>* value) {
      THROW_UNLESS(il2cpp_utils::RunMethod(*this, "set_fa", value));
    }
    // private System.Byte[] get_ca()
    // Offset: 0xFFFFFFFF
    ::Array<uint8_t>* get_ca() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<uint8_t>*>(*this, "get_ca"));
    }
    // private System.Void set_ca(System.Byte[] value)
    // Offset: 0xFFFFFFFF
    void set_ca(::Array<uint8_t>* value) {
      THROW_UNLESS(il2cpp_utils::RunMethod(*this, "set_ca", value));
    }
    // private System.Boolean[] get_ba()
    // Offset: 0xFFFFFFFF
    ::Array<bool>* get_ba() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<bool>*>(*this, "get_ba"));
    }
    // private System.Void set_ba(System.Boolean[] value)
    // Offset: 0xFFFFFFFF
    void set_ba(::Array<bool>* value) {
      THROW_UNLESS(il2cpp_utils::RunMethod(*this, "set_ba", value));
    }
    // private System.String[] get_sa()
    // Offset: 0xFFFFFFFF
    ::Array<::Il2CppString*>* get_sa() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<::Array<::Il2CppString*>*>(*this, "get_sa"));
    }
    // private System.Void set_sa(System.String[] value)
    // Offset: 0xFFFFFFFF
    void set_sa(::Array<::Il2CppString*>* value) {
      THROW_UNLESS(il2cpp_utils::RunMethod(*this, "set_sa", value));
    }
    // private Vector3Serializable get_v3()
    // Offset: 0xFFFFFFFF
    GlobalNamespace::Vector3Serializable get_v3() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::Vector3Serializable>(*this, "get_v3"));
    }
    // private System.Void set_v3(Vector3Serializable value)
    // Offset: 0xFFFFFFFF
    void set_v3(GlobalNamespace::Vector3Serializable value) {
      THROW_UNLESS(il2cpp_utils::RunMethod(*this, "set_v3", value));
    }
    // private Vector4Serializable get_v4()
    // Offset: 0xFFFFFFFF
    GlobalNamespace::Vector4Serializable get_v4() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::Vector4Serializable>(*this, "get_v4"));
    }
    // private System.Void set_v4(Vector4Serializable value)
    // Offset: 0xFFFFFFFF
    void set_v4(GlobalNamespace::Vector4Serializable value) {
      THROW_UNLESS(il2cpp_utils::RunMethod(*this, "set_v4", value));
    }
    // private QuaternionSerializable get_q()
    // Offset: 0xFFFFFFFF
    GlobalNamespace::QuaternionSerializable get_q() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::QuaternionSerializable>(*this, "get_q"));
    }
    // private System.Void set_q(QuaternionSerializable value)
    // Offset: 0xFFFFFFFF
    void set_q(GlobalNamespace::QuaternionSerializable value) {
      THROW_UNLESS(il2cpp_utils::RunMethod(*this, "set_q", value));
    }
    // private LiteNetLib.Utils.INetSerializable get_ns()
    // Offset: 0xFFFFFFFF
    LiteNetLib::Utils::INetSerializable* get_ns() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<LiteNetLib::Utils::INetSerializable*>(*this, "get_ns"));
    }
    // private System.Void set_ns(LiteNetLib.Utils.INetSerializable value)
    // Offset: 0xFFFFFFFF
    void set_ns(LiteNetLib::Utils::INetSerializable* value) {
      THROW_UNLESS(il2cpp_utils::RunMethod(*this, "set_ns", value));
    }
    // private LiteNetLib.Utils.INetImmutableSerializable`1<T> get_ins()
    // Offset: 0xFFFFFFFF
    LiteNetLib::Utils::INetImmutableSerializable_1<T>* get_ins() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<LiteNetLib::Utils::INetImmutableSerializable_1<T>*>(*this, "get_ins"));
    }
    // private System.Void set_ins(LiteNetLib.Utils.INetImmutableSerializable`1<T> value)
    // Offset: 0xFFFFFFFF
    void set_ins(LiteNetLib::Utils::INetImmutableSerializable_1<T>* value) {
      THROW_UNLESS(il2cpp_utils::RunMethod(*this, "set_ins", value));
    }
    // public System.Void .ctor(T v)
    // Offset: 0xFFFFFFFF
    TypeWrapper_1(T v) {
      THROW_UNLESS(il2cpp_utils::RunMethod(*this, ".ctor", v));
    }
    // public System.Void Serialize(LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0xFFFFFFFF
    void Serialize(LiteNetLib::Utils::NetDataWriter* writer) {
      THROW_UNLESS(il2cpp_utils::RunMethod(*this, "Serialize", writer));
    }
    // public System.Void Deserialize(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0xFFFFFFFF
    void Deserialize(LiteNetLib::Utils::NetDataReader* reader) {
      THROW_UNLESS(il2cpp_utils::RunMethod(*this, "Deserialize", reader));
    }
  }; // RemoteProcedureCall/TypeWrapper`1
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(GlobalNamespace::RemoteProcedureCall::TypeWrapper_1, "", "RemoteProcedureCall/TypeWrapper`1");
#pragma pack(pop)
