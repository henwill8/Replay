// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: LiteNetLib.Utils.INetImmutableSerializable`1
#include "LiteNetLib/Utils/INetImmutableSerializable_1.hpp"
// Including type: System.IEquatable`1
#include "System/IEquatable_1.hpp"
// Including type: BloomFilter
#include "GlobalNamespace/BloomFilter.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataReader
  class NetDataReader;
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: SongPackMask
  struct SongPackMask : public System::ValueType/*, public LiteNetLib::Utils::INetImmutableSerializable_1<GlobalNamespace::SongPackMask>, public System::IEquatable_1<GlobalNamespace::SongPackMask>*/ {
    public:
    // private readonly BloomFilter _bloomFilter
    // Offset: 0x0
    GlobalNamespace::BloomFilter bloomFilter;
    // Creating value type constructor for type: SongPackMask
    constexpr SongPackMask(GlobalNamespace::BloomFilter bloomFilter_ = {}) noexcept : bloomFilter{bloomFilter_} {}
    // Creating interface conversion operator: operator LiteNetLib::Utils::INetImmutableSerializable_1<GlobalNamespace::SongPackMask>
    operator LiteNetLib::Utils::INetImmutableSerializable_1<GlobalNamespace::SongPackMask>() noexcept {
      return *reinterpret_cast<LiteNetLib::Utils::INetImmutableSerializable_1<GlobalNamespace::SongPackMask>*>(this);
    }
    // Creating interface conversion operator: operator System::IEquatable_1<GlobalNamespace::SongPackMask>
    operator System::IEquatable_1<GlobalNamespace::SongPackMask>() noexcept {
      return *reinterpret_cast<System::IEquatable_1<GlobalNamespace::SongPackMask>*>(this);
    }
    // Creating conversion operator: operator GlobalNamespace::BloomFilter
    constexpr operator GlobalNamespace::BloomFilter() const noexcept {
      return bloomFilter;
    }
    // static field const value: static private System.String kToStringPrefix
    static constexpr const char* kToStringPrefix = "[SongPackMask ";
    // Get static field: static private System.String kToStringPrefix
    static ::Il2CppString* _get_kToStringPrefix();
    // Set static field: static private System.String kToStringPrefix
    static void _set_kToStringPrefix(::Il2CppString* value);
    // static field const value: static private System.String kToStringSuffix
    static constexpr const char* kToStringSuffix = "]";
    // Get static field: static private System.String kToStringSuffix
    static ::Il2CppString* _get_kToStringSuffix();
    // Set static field: static private System.String kToStringSuffix
    static void _set_kToStringSuffix(::Il2CppString* value);
    // public System.Void .ctor(System.String packId)
    // Offset: 0xCB6480
    SongPackMask(::Il2CppString* packId);
    // public System.Void .ctor(BloomFilter bloomFilter)
    // Offset: 0xCB64B8
    // ABORTED: conflicts with another method.  SongPackMask(GlobalNamespace::BloomFilter bloomFilter);
    // static public SongPackMask get_all()
    // Offset: 0x19A7958
    static GlobalNamespace::SongPackMask get_all();
    // public System.Boolean Contains(SongPackMask other)
    // Offset: 0xCB64C0
    bool Contains(GlobalNamespace::SongPackMask other);
    // public System.Int32 DifferenceFrom(SongPackMask other)
    // Offset: 0xCB64DC
    int DifferenceFrom(GlobalNamespace::SongPackMask other);
    // static public SongPackMask Deserialize(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0x19A7A50
    static GlobalNamespace::SongPackMask Deserialize(LiteNetLib::Utils::NetDataReader* reader);
    // public System.String ToShortString()
    // Offset: 0xCB6544
    ::Il2CppString* ToShortString();
    // public System.Byte[] ToBytes()
    // Offset: 0xCB654C
    ::Array<uint8_t>* ToBytes();
    // static public System.Boolean TryParse(System.String stringSerializedMask, out SongPackMask songPackMask)
    // Offset: 0x19A7BEC
    static bool TryParse(::Il2CppString* stringSerializedMask, GlobalNamespace::SongPackMask& songPackMask);
    // static public SongPackMask Parse(System.String stringSerializedMask)
    // Offset: 0x19A7CF4
    static GlobalNamespace::SongPackMask Parse(::Il2CppString* stringSerializedMask);
    // static public SongPackMask FromBytes(System.Byte[] bytes, System.Int32 offset)
    // Offset: 0x19A7DA8
    static GlobalNamespace::SongPackMask FromBytes(::Array<uint8_t>* bytes, int offset);
    // public System.Void Serialize(LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0xCB652C
    // Implemented from: LiteNetLib.Utils.INetImmutableSerializable`1
    // Base method: System.Void INetImmutableSerializable_1::Serialize(LiteNetLib.Utils.NetDataWriter writer)
    void Serialize(LiteNetLib::Utils::NetDataWriter* writer);
    // public SongPackMask CreateFromSerializedData(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0xCB6534
    // Implemented from: LiteNetLib.Utils.INetImmutableSerializable`1
    // Base method: T INetImmutableSerializable_1::CreateFromSerializedData(LiteNetLib.Utils.NetDataReader reader)
    GlobalNamespace::SongPackMask CreateFromSerializedData(LiteNetLib::Utils::NetDataReader* reader);
    // Creating proxy method: LiteNetLib_Utils_INetImmutableSerializable_1_CreateFromSerializedData
    // Maps to method: CreateFromSerializedData
    GlobalNamespace::SongPackMask LiteNetLib_Utils_INetImmutableSerializable_1_CreateFromSerializedData(LiteNetLib::Utils::NetDataReader* reader);
    // public override System.String ToString()
    // Offset: 0xCB653C
    // Implemented from: System.ValueType
    // Base method: System.String ValueType::ToString()
    ::Il2CppString* ToString();
    // public override System.Int32 GetHashCode()
    // Offset: 0xCB6554
    // Implemented from: System.ValueType
    // Base method: System.Int32 ValueType::GetHashCode()
    int GetHashCode();
    // public System.Boolean Equals(SongPackMask other)
    // Offset: 0xCB65A8
    // Implemented from: System.IEquatable`1
    // Base method: System.Boolean IEquatable_1::Equals(SongPackMask other)
    bool Equals(GlobalNamespace::SongPackMask other);
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0xCB65C4
    // Implemented from: System.ValueType
    // Base method: System.Boolean ValueType::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
  }; // SongPackMask
  // static public SongPackMask op_BitwiseOr(SongPackMask a, SongPackMask b)
  // Offset: 0x19A7964
  GlobalNamespace::SongPackMask operator|(const GlobalNamespace::SongPackMask& a, const GlobalNamespace::SongPackMask& b);
  // static public SongPackMask op_BitwiseAnd(SongPackMask a, SongPackMask b)
  // Offset: 0x19A7970
  GlobalNamespace::SongPackMask operator&(const GlobalNamespace::SongPackMask& a, const GlobalNamespace::SongPackMask& b);
  // static public System.Boolean op_Equality(SongPackMask a, SongPackMask b)
  // Offset: 0x19A797C
  bool operator ==(const GlobalNamespace::SongPackMask& a, const GlobalNamespace::SongPackMask& b);
  // static public System.Boolean op_Inequality(SongPackMask a, SongPackMask b)
  // Offset: 0x19A7994
  bool operator !=(const GlobalNamespace::SongPackMask& a, const GlobalNamespace::SongPackMask& b);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SongPackMask, "", "SongPackMask");
#pragma pack(pop)
