// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: UnityEngine.Color
#include "UnityEngine/Color.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: MeshFilter
  class MeshFilter;
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: OVRScreenFade
  // [] Offset: FFFFFFFF
  class OVRScreenFade : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::OVRScreenFade::$Fade$d__20
    class $Fade$d__20;
    // [TooltipAttribute] Offset: 0xCF8C08
    // public System.Single fadeTime
    // Size: 0x4
    // Offset: 0x18
    float fadeTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [TooltipAttribute] Offset: 0xCF8C40
    // public UnityEngine.Color fadeColor
    // Size: 0x10
    // Offset: 0x1C
    UnityEngine::Color fadeColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // public System.Boolean fadeOnStart
    // Size: 0x1
    // Offset: 0x2C
    bool fadeOnStart;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: fadeOnStart and: renderQueue
    char __padding2[0x3] = {};
    // public System.Int32 renderQueue
    // Size: 0x4
    // Offset: 0x30
    int renderQueue;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single uiFadeAlpha
    // Size: 0x4
    // Offset: 0x34
    float uiFadeAlpha;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.MeshRenderer fadeRenderer
    // Size: 0x8
    // Offset: 0x38
    UnityEngine::MeshRenderer* fadeRenderer;
    // Field size check
    static_assert(sizeof(UnityEngine::MeshRenderer*) == 0x8);
    // private UnityEngine.MeshFilter fadeMesh
    // Size: 0x8
    // Offset: 0x40
    UnityEngine::MeshFilter* fadeMesh;
    // Field size check
    static_assert(sizeof(UnityEngine::MeshFilter*) == 0x8);
    // private UnityEngine.Material fadeMaterial
    // Size: 0x8
    // Offset: 0x48
    UnityEngine::Material* fadeMaterial;
    // Field size check
    static_assert(sizeof(UnityEngine::Material*) == 0x8);
    // private System.Boolean isFading
    // Size: 0x1
    // Offset: 0x50
    bool isFading;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: isFading and: currentAlpha
    char __padding8[0x3] = {};
    // [CompilerGeneratedAttribute] Offset: 0xCF8C78
    // private System.Single <currentAlpha>k__BackingField
    // Size: 0x4
    // Offset: 0x54
    float currentAlpha;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: OVRScreenFade
    OVRScreenFade(float fadeTime_ = {}, UnityEngine::Color fadeColor_ = {}, bool fadeOnStart_ = {}, int renderQueue_ = {}, float uiFadeAlpha_ = {}, UnityEngine::MeshRenderer* fadeRenderer_ = {}, UnityEngine::MeshFilter* fadeMesh_ = {}, UnityEngine::Material* fadeMaterial_ = {}, bool isFading_ = {}, float currentAlpha_ = {}) noexcept : fadeTime{fadeTime_}, fadeColor{fadeColor_}, fadeOnStart{fadeOnStart_}, renderQueue{renderQueue_}, uiFadeAlpha{uiFadeAlpha_}, fadeRenderer{fadeRenderer_}, fadeMesh{fadeMesh_}, fadeMaterial{fadeMaterial_}, isFading{isFading_}, currentAlpha{currentAlpha_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Single get_currentAlpha()
    // Offset: 0x1535730
    float get_currentAlpha();
    // private System.Void set_currentAlpha(System.Single value)
    // Offset: 0x1535738
    void set_currentAlpha(float value);
    // private System.Void Start()
    // Offset: 0x1535740
    void Start();
    // public System.Void FadeOut()
    // Offset: 0x1535D08
    void FadeOut();
    // private System.Void OnLevelFinishedLoading(System.Int32 level)
    // Offset: 0x1535D3C
    void OnLevelFinishedLoading(int level);
    // private System.Void OnEnable()
    // Offset: 0x1535D70
    void OnEnable();
    // private System.Void OnDestroy()
    // Offset: 0x1535D84
    void OnDestroy();
    // public System.Void SetUIFade(System.Single level)
    // Offset: 0x1535EE8
    void SetUIFade(float level);
    // public System.Void SetFadeLevel(System.Single level)
    // Offset: 0x1535C70
    void SetFadeLevel(float level);
    // private System.Collections.IEnumerator Fade(System.Single startAlpha, System.Single endAlpha)
    // Offset: 0x1535C78
    System::Collections::IEnumerator* Fade(float startAlpha, float endAlpha);
    // private System.Void SetMaterialAlpha()
    // Offset: 0x1535F68
    void SetMaterialAlpha();
    // public System.Void .ctor()
    // Offset: 0x15360E8
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRScreenFade* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRScreenFade::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRScreenFade*, creationType>()));
    }
  }; // OVRScreenFade
  #pragma pack(pop)
  static check_size<sizeof(OVRScreenFade), 84 + sizeof(float)> __GlobalNamespace_OVRScreenFadeSizeCheck;
  static_assert(sizeof(OVRScreenFade) == 0x58);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRScreenFade*, "", "OVRScreenFade");
