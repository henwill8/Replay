// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: BeatmapEventType
#include "GlobalNamespace/BeatmapEventType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapObjectCallbackController
  class BeatmapObjectCallbackController;
  // Forward declaring type: BeatmapEventData
  class BeatmapEventData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x74
  #pragma pack(push, 1)
  // Autogenerated type: LightPairRotationEventEffect
  // [] Offset: FFFFFFFF
  class LightPairRotationEventEffect : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::LightPairRotationEventEffect::RotationData
    class RotationData;
    // private BeatmapEventType _eventL
    // Size: 0x4
    // Offset: 0x18
    GlobalNamespace::BeatmapEventType eventL;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapEventType) == 0x4);
    // private BeatmapEventType _eventR
    // Size: 0x4
    // Offset: 0x1C
    GlobalNamespace::BeatmapEventType eventR;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapEventType) == 0x4);
    // private BeatmapEventType _switchOverrideRandomValuesEvent
    // Size: 0x4
    // Offset: 0x20
    GlobalNamespace::BeatmapEventType switchOverrideRandomValuesEvent;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapEventType) == 0x4);
    // private UnityEngine.Vector3 _rotationVector
    // Size: 0xC
    // Offset: 0x24
    UnityEngine::Vector3 rotationVector;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // [SpaceAttribute] Offset: 0xD38E08
    // private System.Boolean _overrideRandomValues
    // Size: 0x1
    // Offset: 0x30
    bool overrideRandomValues;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean _useZPositionForAngleOffset
    // Size: 0x1
    // Offset: 0x31
    bool useZPositionForAngleOffset;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: useZPositionForAngleOffset and: zPositionAngleOffsetScale
    char __padding5[0x2] = {};
    // private System.Single _zPositionAngleOffsetScale
    // Size: 0x4
    // Offset: 0x34
    float zPositionAngleOffsetScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _startRotation
    // Size: 0x4
    // Offset: 0x38
    float startRotation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: startRotation and: transformL
    char __padding7[0x4] = {};
    // [SpaceAttribute] Offset: 0xD38E70
    // private UnityEngine.Transform _transformL
    // Size: 0x8
    // Offset: 0x40
    UnityEngine::Transform* transformL;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // private UnityEngine.Transform _transformR
    // Size: 0x8
    // Offset: 0x48
    UnityEngine::Transform* transformR;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // [InjectAttribute] Offset: 0xD38EB8
    // private readonly BeatmapObjectCallbackController _beatmapObjectCallbackController
    // Size: 0x8
    // Offset: 0x50
    GlobalNamespace::BeatmapObjectCallbackController* beatmapObjectCallbackController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectCallbackController*) == 0x8);
    // private LightPairRotationEventEffect/RotationData _rotationDataL
    // Size: 0x8
    // Offset: 0x58
    GlobalNamespace::LightPairRotationEventEffect::RotationData* rotationDataL;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LightPairRotationEventEffect::RotationData*) == 0x8);
    // private LightPairRotationEventEffect/RotationData _rotationDataR
    // Size: 0x8
    // Offset: 0x60
    GlobalNamespace::LightPairRotationEventEffect::RotationData* rotationDataR;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LightPairRotationEventEffect::RotationData*) == 0x8);
    // private System.Int32 _randomGenerationFrameNum
    // Size: 0x4
    // Offset: 0x68
    int randomGenerationFrameNum;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Single _randomStartRotation
    // Size: 0x4
    // Offset: 0x6C
    float randomStartRotation;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _randomDirection
    // Size: 0x4
    // Offset: 0x70
    float randomDirection;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: LightPairRotationEventEffect
    LightPairRotationEventEffect(GlobalNamespace::BeatmapEventType eventL_ = {}, GlobalNamespace::BeatmapEventType eventR_ = {}, GlobalNamespace::BeatmapEventType switchOverrideRandomValuesEvent_ = {}, UnityEngine::Vector3 rotationVector_ = {}, bool overrideRandomValues_ = {}, bool useZPositionForAngleOffset_ = {}, float zPositionAngleOffsetScale_ = {}, float startRotation_ = {}, UnityEngine::Transform* transformL_ = {}, UnityEngine::Transform* transformR_ = {}, GlobalNamespace::BeatmapObjectCallbackController* beatmapObjectCallbackController_ = {}, GlobalNamespace::LightPairRotationEventEffect::RotationData* rotationDataL_ = {}, GlobalNamespace::LightPairRotationEventEffect::RotationData* rotationDataR_ = {}, int randomGenerationFrameNum_ = {}, float randomStartRotation_ = {}, float randomDirection_ = {}) noexcept : eventL{eventL_}, eventR{eventR_}, switchOverrideRandomValuesEvent{switchOverrideRandomValuesEvent_}, rotationVector{rotationVector_}, overrideRandomValues{overrideRandomValues_}, useZPositionForAngleOffset{useZPositionForAngleOffset_}, zPositionAngleOffsetScale{zPositionAngleOffsetScale_}, startRotation{startRotation_}, transformL{transformL_}, transformR{transformR_}, beatmapObjectCallbackController{beatmapObjectCallbackController_}, rotationDataL{rotationDataL_}, rotationDataR{rotationDataR_}, randomGenerationFrameNum{randomGenerationFrameNum_}, randomStartRotation{randomStartRotation_}, randomDirection{randomDirection_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Single kSpeedMultiplier
    static constexpr const float kSpeedMultiplier = 20;
    // Get static field: static private System.Single kSpeedMultiplier
    static float _get_kSpeedMultiplier();
    // Set static field: static private System.Single kSpeedMultiplier
    static void _set_kSpeedMultiplier(float value);
    // protected System.Void Start()
    // Offset: 0x10E3AD4
    void Start();
    // protected System.Void Update()
    // Offset: 0x10E3DA8
    void Update();
    // private System.Void OnDestroy()
    // Offset: 0x10E402C
    void OnDestroy();
    // private System.Void HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger(BeatmapEventData beatmapEventData)
    // Offset: 0x10E4108
    void HandleBeatmapObjectCallbackControllerBeatmapEventDidTrigger(GlobalNamespace::BeatmapEventData* beatmapEventData);
    // private System.Void UpdateRotationData(System.Int32 beatmapEventDataValue, LightPairRotationEventEffect/RotationData rotationData, System.Single startRotationOffset, System.Single direction)
    // Offset: 0x10E4390
    void UpdateRotationData(int beatmapEventDataValue, GlobalNamespace::LightPairRotationEventEffect::RotationData* rotationData, float startRotationOffset, float direction);
    // public System.Void .ctor()
    // Offset: 0x10E4604
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static LightPairRotationEventEffect* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::LightPairRotationEventEffect::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<LightPairRotationEventEffect*, creationType>()));
    }
  }; // LightPairRotationEventEffect
  #pragma pack(pop)
  static check_size<sizeof(LightPairRotationEventEffect), 112 + sizeof(float)> __GlobalNamespace_LightPairRotationEventEffectSizeCheck;
  static_assert(sizeof(LightPairRotationEventEffect) == 0x74);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LightPairRotationEventEffect*, "", "LightPairRotationEventEffect");
