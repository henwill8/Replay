// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: MultiplayerSessionManager/MessageType
#include "GlobalNamespace/MultiplayerSessionManager_MessageType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: <>c because it is already included!
  // Forward declaring type: IStateTable`2<TType, TState>
  template<typename TType, typename TState>
  class IStateTable_2;
  // Forward declaring type: IEquatableByReference`1<T>
  template<typename T>
  class IEquatableByReference_1;
  // Forward declaring type: ISyncStateSerializable`1<T>
  template<typename T>
  class ISyncStateSerializable_1;
  // Forward declaring type: IPoolablePacket
  class IPoolablePacket;
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: LocalMultiplayerSyncState`3<TStateTable, TType, TState>
  template<typename TStateTable, typename TType, typename TState>
  class LocalMultiplayerSyncState_3;
  // Forward declaring type: RemoteMultiplayerSyncState`3<TStateTable, TType, TState>
  template<typename TStateTable, typename TType, typename TState>
  class RemoteMultiplayerSyncState_3;
  // Forward declaring type: IPacketPool`1<T>
  template<typename T>
  class IPacketPool_1;
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
  // Forward declaring type: MultiplayerSyncState`3<TStateTable, TType, TState>
  template<typename TStateTable, typename TType, typename TState>
  class MultiplayerSyncState_3;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: INetSerializable
  class INetSerializable;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: ValueType because it is already included!
  // Skipping declaration: IConvertible because it is already included!
  // Forward declaring type: Func`2<T, TResult>
  template<typename T, typename TResult>
  class Func_2;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: MultiplayerSyncStateManager`4
  template<typename TStateTable, typename TType, typename TState, typename TSerializable>
  class MultiplayerSyncStateManager_4 : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::MultiplayerSyncStateManager_4::$$c<TStateTable, TType, TState, TSerializable>
    class $$c;
    // Autogenerated type: MultiplayerSyncStateManager`4/<>c
    class $$c : public ::Il2CppObject, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = MultiplayerSyncStateManager_4<TStateTable, TType, TState, TSerializable>*;
      static constexpr std::string_view NESTED_NAME = "$$c";
      // Autogenerated static field getter
      // Get static field: static public readonly MultiplayerSyncStateManager`4/<>c<TStateTable,TType,TState,TSerializable> <>9
      static typename GlobalNamespace::MultiplayerSyncStateManager_4<TStateTable, TType, TState, TSerializable>::$$c* _get_$$9() {
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<typename GlobalNamespace::MultiplayerSyncStateManager_4<TStateTable, TType, TState, TSerializable>::$$c*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename MultiplayerSyncStateManager_4<TStateTable, TType, TState, TSerializable>::$$c*>::get(), "<>9")));
      }
      // Autogenerated static field setter
      // Set static field: static public readonly MultiplayerSyncStateManager`4/<>c<TStateTable,TType,TState,TSerializable> <>9
      static void _set_$$9(typename GlobalNamespace::MultiplayerSyncStateManager_4<TStateTable, TType, TState, TSerializable>::$$c* value) {
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename MultiplayerSyncStateManager_4<TStateTable, TType, TState, TSerializable>::$$c*>::get(), "<>9", value)));
      }
      // Autogenerated static field getter
      // Get static field: static public System.Func`2<RemoteMultiplayerSyncState`3<TStateTable,TType,TState>,System.Int32> <>9__33_0
      static System::Func_2<GlobalNamespace::RemoteMultiplayerSyncState_3<TStateTable, TType, TState>*, int>* _get_$$9__33_0() {
        return THROW_UNLESS((il2cpp_utils::GetFieldValue<System::Func_2<GlobalNamespace::RemoteMultiplayerSyncState_3<TStateTable, TType, TState>*, int>*>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename MultiplayerSyncStateManager_4<TStateTable, TType, TState, TSerializable>::$$c*>::get(), "<>9__33_0")));
      }
      // Autogenerated static field setter
      // Set static field: static public System.Func`2<RemoteMultiplayerSyncState`3<TStateTable,TType,TState>,System.Int32> <>9__33_0
      static void _set_$$9__33_0(System::Func_2<GlobalNamespace::RemoteMultiplayerSyncState_3<TStateTable, TType, TState>*, int>* value) {
        THROW_UNLESS((il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename MultiplayerSyncStateManager_4<TStateTable, TType, TState, TSerializable>::$$c*>::get(), "<>9__33_0", value)));
      }
      // static private System.Void .cctor()
      // Offset: 0xFFFFFFFF
      static void _cctor() {
        THROW_UNLESS((il2cpp_utils::RunMethod(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<typename MultiplayerSyncStateManager_4<TStateTable, TType, TState, TSerializable>::$$c*>::get(), ".cctor")));
      }
      // System.Int32 <HandlePlayerConnected>b__33_0(RemoteMultiplayerSyncState`3<TStateTable,TType,TState> s)
      // Offset: 0xFFFFFFFF
      int $HandlePlayerConnected$b__33_0(GlobalNamespace::RemoteMultiplayerSyncState_3<TStateTable, TType, TState>* s) {
        return THROW_UNLESS((il2cpp_utils::RunMethod<int>(this, "<HandlePlayerConnected>b__33_0", s)));
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      static typename MultiplayerSyncStateManager_4<TStateTable, TType, TState, TSerializable>::$$c* New_ctor() {
        return THROW_UNLESS((il2cpp_utils::New<typename MultiplayerSyncStateManager_4<TStateTable, TType, TState, TSerializable>::$$c*>()));
      }
    }; // MultiplayerSyncStateManager`4/<>c
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Offset: 0x0
    GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // private LocalMultiplayerSyncState`3<TStateTable,TType,TState> _localState
    // Offset: 0x0
    GlobalNamespace::LocalMultiplayerSyncState_3<TStateTable, TType, TState>* localState;
    // private readonly System.Collections.Generic.List`1<RemoteMultiplayerSyncState`3<TStateTable,TType,TState>> _connectedPlayerStates
    // Offset: 0x0
    System::Collections::Generic::List_1<GlobalNamespace::RemoteMultiplayerSyncState_3<TStateTable, TType, TState>*>* connectedPlayerStates;
    // private readonly System.Collections.Generic.List`1<RemoteMultiplayerSyncState`3<TStateTable,TType,TState>> _disconnectedPlayerStates
    // Offset: 0x0
    System::Collections::Generic::List_1<GlobalNamespace::RemoteMultiplayerSyncState_3<TStateTable, TType, TState>*>* disconnectedPlayerStates;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected IMultiplayerSessionManager get_multiplayerSessionManager()
    // Offset: 0xFFFFFFFF
    GlobalNamespace::IMultiplayerSessionManager* get_multiplayerSessionManager() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::IMultiplayerSessionManager*>(this, "get_multiplayerSessionManager"));
    }
    // public LocalMultiplayerSyncState`3<TStateTable,TType,TState> get_localState()
    // Offset: 0xFFFFFFFF
    GlobalNamespace::LocalMultiplayerSyncState_3<TStateTable, TType, TState>* get_localState() {
      return THROW_UNLESS((il2cpp_utils::RunMethod<GlobalNamespace::LocalMultiplayerSyncState_3<TStateTable, TType, TState>*>(this, "get_localState")));
    }
    // public System.Int32 get_connectedPlayerCount()
    // Offset: 0xFFFFFFFF
    int get_connectedPlayerCount() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_connectedPlayerCount"));
    }
    // public System.Int32 get_disconnectedPlayerCount()
    // Offset: 0xFFFFFFFF
    int get_disconnectedPlayerCount() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_disconnectedPlayerCount"));
    }
    // public System.Single get_syncTime()
    // Offset: 0xFFFFFFFF
    float get_syncTime() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_syncTime"));
    }
    // protected System.Single get_unreliableUpdateFrequency()
    // Offset: 0xFFFFFFFF
    float get_unreliableUpdateFrequency() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_unreliableUpdateFrequency"));
    }
    // protected System.Single get_reliableUpdateFrequency()
    // Offset: 0xFFFFFFFF
    float get_reliableUpdateFrequency() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<float>(this, "get_reliableUpdateFrequency"));
    }
    // protected System.Int32 get_localBufferSize()
    // Offset: 0xFFFFFFFF
    int get_localBufferSize() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_localBufferSize"));
    }
    // protected System.Int32 get_remoteBufferSize()
    // Offset: 0xFFFFFFFF
    int get_remoteBufferSize() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_remoteBufferSize"));
    }
    // protected IPacketPool`1<TSerializable> get_serializablePool()
    // Offset: 0xFFFFFFFF
    GlobalNamespace::IPacketPool_1<TSerializable>* get_serializablePool() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::IPacketPool_1<TSerializable>*>(this, "get_serializablePool"));
    }
    // protected MultiplayerSessionManager/MessageType get_messageType()
    // Offset: 0xFFFFFFFF
    GlobalNamespace::MultiplayerSessionManager_MessageType get_messageType() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<GlobalNamespace::MultiplayerSessionManager_MessageType>(this, "get_messageType"));
    }
    // protected System.Void Start()
    // Offset: 0xFFFFFFFF
    void Start() {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Start"));
    }
    // protected System.Void LateUpdate()
    // Offset: 0xFFFFFFFF
    void LateUpdate() {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "LateUpdate"));
    }
    // protected System.Void OnDestroy()
    // Offset: 0xFFFFFFFF
    void OnDestroy() {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnDestroy"));
    }
    // protected TState Interpolate(TState a, System.Single timeA, TState b, System.Single timeB, System.Single time)
    // Offset: 0xFFFFFFFF
    TState Interpolate(TState a, float timeA, TState b, float timeB, float time) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<TState>(this, "Interpolate", a, timeA, b, timeB, time));
    }
    // protected TState Smooth(TState a, TState b, System.Single smoooth)
    // Offset: 0xFFFFFFFF
    TState Smooth(TState a, TState b, float smoooth) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<TState>(this, "Smooth", a, b, smoooth));
    }
    // public System.Void ClearBufferedStates()
    // Offset: 0xFFFFFFFF
    void ClearBufferedStates() {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "ClearBufferedStates"));
    }
    // private System.Void TryCreateLocalState()
    // Offset: 0xFFFFFFFF
    void TryCreateLocalState() {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "TryCreateLocalState"));
    }
    // private System.Void HandlePlayerConnected(IConnectedPlayer player)
    // Offset: 0xFFFFFFFF
    void HandlePlayerConnected(GlobalNamespace::IConnectedPlayer* player) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandlePlayerConnected", player));
    }
    // private System.Void HandlePlayerDisconnected(IConnectedPlayer player)
    // Offset: 0xFFFFFFFF
    void HandlePlayerDisconnected(GlobalNamespace::IConnectedPlayer* player) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandlePlayerDisconnected", player));
    }
    // private System.Void HandleSyncPacket(TSerializable packet, IConnectedPlayer player)
    // Offset: 0xFFFFFFFF
    void HandleSyncPacket(TSerializable packet, GlobalNamespace::IConnectedPlayer* player) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "HandleSyncPacket", packet, player));
    }
    // public MultiplayerSyncState`3<TStateTable,TType,TState> GetSyncState(System.Int32 i)
    // Offset: 0xFFFFFFFF
    GlobalNamespace::MultiplayerSyncState_3<TStateTable, TType, TState>* GetSyncState(int i) {
      return THROW_UNLESS((il2cpp_utils::RunMethod<GlobalNamespace::MultiplayerSyncState_3<TStateTable, TType, TState>*>(this, "GetSyncState", i)));
    }
    // public MultiplayerSyncState`3<TStateTable,TType,TState> GetSyncStateForPlayer(IConnectedPlayer player)
    // Offset: 0xFFFFFFFF
    GlobalNamespace::MultiplayerSyncState_3<TStateTable, TType, TState>* GetSyncStateForPlayer(GlobalNamespace::IConnectedPlayer* player) {
      return THROW_UNLESS((il2cpp_utils::RunMethod<GlobalNamespace::MultiplayerSyncState_3<TStateTable, TType, TState>*>(this, "GetSyncStateForPlayer", player)));
    }
    // public MultiplayerSyncState`3<TStateTable,TType,TState> GetDisconnectedSyncState(System.Int32 i)
    // Offset: 0xFFFFFFFF
    GlobalNamespace::MultiplayerSyncState_3<TStateTable, TType, TState>* GetDisconnectedSyncState(int i) {
      return THROW_UNLESS((il2cpp_utils::RunMethod<GlobalNamespace::MultiplayerSyncState_3<TStateTable, TType, TState>*>(this, "GetDisconnectedSyncState", i)));
    }
    // protected System.Void .ctor()
    // Offset: 0xFFFFFFFF
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static MultiplayerSyncStateManager_4<TStateTable, TType, TState, TSerializable>* New_ctor() {
      return THROW_UNLESS((il2cpp_utils::New<MultiplayerSyncStateManager_4<TStateTable, TType, TState, TSerializable>*>()));
    }
  }; // MultiplayerSyncStateManager`4
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(GlobalNamespace::MultiplayerSyncStateManager_4, "", "MultiplayerSyncStateManager`4");
#pragma pack(pop)
