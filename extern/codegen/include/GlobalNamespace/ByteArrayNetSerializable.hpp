// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: LiteNetLib.Utils.INetSerializable
#include "LiteNetLib/Utils/INetSerializable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: NetDataReader
  class NetDataReader;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x2C
  #pragma pack(push, 1)
  // Autogenerated type: ByteArrayNetSerializable
  // [] Offset: FFFFFFFF
  class ByteArrayNetSerializable : public ::Il2CppObject/*, public LiteNetLib::Utils::INetSerializable*/ {
    public:
    // private System.Byte[] _data
    // Size: 0x8
    // Offset: 0x10
    ::Array<uint8_t>* data;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private readonly System.String _name
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* name;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private readonly System.Boolean _allowNull
    // Size: 0x1
    // Offset: 0x20
    bool allowNull;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: allowNull and: minLength
    char __padding2[0x3] = {};
    // private readonly System.Int32 _minLength
    // Size: 0x4
    // Offset: 0x24
    int minLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 _maxLength
    // Size: 0x4
    // Offset: 0x28
    int maxLength;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: ByteArrayNetSerializable
    ByteArrayNetSerializable(::Array<uint8_t>* data_ = {}, ::Il2CppString* name_ = {}, bool allowNull_ = {}, int minLength_ = {}, int maxLength_ = {}) noexcept : data{data_}, name{name_}, allowNull{allowNull_}, minLength{minLength_}, maxLength{maxLength_} {}
    // Creating interface conversion operator: operator LiteNetLib::Utils::INetSerializable
    operator LiteNetLib::Utils::INetSerializable() noexcept {
      return *reinterpret_cast<LiteNetLib::Utils::INetSerializable*>(this);
    }
    // public System.Void .ctor(System.String name, System.Boolean allowNull, System.Int32 minLength, System.Int32 maxLength)
    // Offset: 0x11CAA84
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ByteArrayNetSerializable* New_ctor(::Il2CppString* name, bool allowNull, int minLength, int maxLength) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ByteArrayNetSerializable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ByteArrayNetSerializable*, creationType>(name, allowNull, minLength, maxLength)));
    }
    // public System.Void .ctor(System.String name, System.Int32 size)
    // Offset: 0x11CAAE4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ByteArrayNetSerializable* New_ctor(::Il2CppString* name, int size) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ByteArrayNetSerializable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ByteArrayNetSerializable*, creationType>(name, size)));
    }
    // public System.Byte[] get_data()
    // Offset: 0x11CAB30
    ::Array<uint8_t>* get_data();
    // public System.Void set_data(System.Byte[] value)
    // Offset: 0x11CAB38
    void set_data(::Array<uint8_t>* value);
    // public System.Void Clear()
    // Offset: 0x11CB080
    void Clear();
    // public System.Void Serialize(LiteNetLib.Utils.NetDataWriter writer)
    // Offset: 0x11CAD4C
    // Implemented from: LiteNetLib.Utils.INetSerializable
    // Base method: System.Void INetSerializable::Serialize(LiteNetLib.Utils.NetDataWriter writer)
    void Serialize(LiteNetLib::Utils::NetDataWriter* writer);
    // Creating proxy method: LiteNetLib_Utils_INetSerializable_Serialize
    // Maps to method: Serialize
    void LiteNetLib_Utils_INetSerializable_Serialize(LiteNetLib::Utils::NetDataWriter* writer);
    // public System.Void Deserialize(LiteNetLib.Utils.NetDataReader reader)
    // Offset: 0x11CAE5C
    // Implemented from: LiteNetLib.Utils.INetSerializable
    // Base method: System.Void INetSerializable::Deserialize(LiteNetLib.Utils.NetDataReader reader)
    void Deserialize(LiteNetLib::Utils::NetDataReader* reader);
    // Creating proxy method: LiteNetLib_Utils_INetSerializable_Deserialize
    // Maps to method: Deserialize
    void LiteNetLib_Utils_INetSerializable_Deserialize(LiteNetLib::Utils::NetDataReader* reader);
  }; // ByteArrayNetSerializable
  #pragma pack(pop)
  static check_size<sizeof(ByteArrayNetSerializable), 40 + sizeof(int)> __GlobalNamespace_ByteArrayNetSerializableSizeCheck;
  static_assert(sizeof(ByteArrayNetSerializable) == 0x2C);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::ByteArrayNetSerializable*, "", "ByteArrayNetSerializable");
