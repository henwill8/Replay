// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: NoteController
#include "GlobalNamespace/NoteController.hpp"
// Including type: IGameNoteControllerInitializable`1
#include "GlobalNamespace/IGameNoteControllerInitializable_1.hpp"
// Including type: IGameNoteTypeProvider
#include "GlobalNamespace/IGameNoteTypeProvider.hpp"
// Including type: GameNoteController/GameNoteType
#include "GlobalNamespace/GameNoteController_GameNoteType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BoxCuttableBySaber
  class BoxCuttableBySaber;
  // Forward declaring type: AudioTimeSyncController
  class AudioTimeSyncController;
  // Forward declaring type: NoteData
  class NoteData;
  // Forward declaring type: Saber
  class Saber;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
  // Skipping declaration: Vector3 because it is already included!
  // Skipping declaration: Quaternion because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: GameNoteController
  class GameNoteController : public GlobalNamespace::NoteController/*, public GlobalNamespace::IGameNoteControllerInitializable_1<GlobalNamespace::GameNoteController*>, public GlobalNamespace::IGameNoteTypeProvider*/ {
    public:
    // Nested type: GlobalNamespace::GameNoteController::Pool
    class Pool;
    // private BoxCuttableBySaber _bigCuttableBySaber
    // Offset: 0x78
    GlobalNamespace::BoxCuttableBySaber* bigCuttableBySaber;
    // private BoxCuttableBySaber _smallCuttableBySaber
    // Offset: 0x80
    GlobalNamespace::BoxCuttableBySaber* smallCuttableBySaber;
    // private UnityEngine.GameObject _wrapperGO
    // Offset: 0x88
    UnityEngine::GameObject* wrapperGO;
    // private readonly AudioTimeSyncController _audioTimeSyncController
    // Offset: 0x90
    GlobalNamespace::AudioTimeSyncController* audioTimeSyncController;
    // private System.Action`1<GameNoteController> gameNoteControllerDidInitEvent
    // Offset: 0x98
    System::Action_1<GlobalNamespace::GameNoteController*>* gameNoteControllerDidInitEvent;
    // private GameNoteController/GameNoteType _gameNoteType
    // Offset: 0xA0
    GlobalNamespace::GameNoteController_GameNoteType gameNoteType;
    // private System.Boolean _hidden
    // Offset: 0xA4
    bool hidden;
    // Creating interface conversion operator: operator GlobalNamespace::IGameNoteControllerInitializable_1<GlobalNamespace::GameNoteController*>
    operator GlobalNamespace::IGameNoteControllerInitializable_1<GlobalNamespace::GameNoteController*>() noexcept {
      return *reinterpret_cast<GlobalNamespace::IGameNoteControllerInitializable_1<GlobalNamespace::GameNoteController*>*>(this);
    }
    // Creating interface conversion operator: operator GlobalNamespace::IGameNoteTypeProvider
    operator GlobalNamespace::IGameNoteTypeProvider() noexcept {
      return *reinterpret_cast<GlobalNamespace::IGameNoteTypeProvider*>(this);
    }
    // public System.Void add_gameNoteControllerDidInitEvent(System.Action`1<GameNoteController> value)
    // Offset: 0x1A198D0
    void add_gameNoteControllerDidInitEvent(System::Action_1<GlobalNamespace::GameNoteController*>* value);
    // public System.Void remove_gameNoteControllerDidInitEvent(System.Action`1<GameNoteController> value)
    // Offset: 0x1A19974
    void remove_gameNoteControllerDidInitEvent(System::Action_1<GlobalNamespace::GameNoteController*>* value);
    // public System.Void Init(NoteData noteData, System.Single worldRotation, UnityEngine.Vector3 moveStartPos, UnityEngine.Vector3 moveEndPos, UnityEngine.Vector3 jumpEndPos, System.Single moveDuration, System.Single jumpDuration, System.Single jumpGravity, GameNoteController/GameNoteType gameNoteType, System.Single cutDirectionAngleOffset)
    // Offset: 0x1A19A7C
    void Init(GlobalNamespace::NoteData* noteData, float worldRotation, UnityEngine::Vector3 moveStartPos, UnityEngine::Vector3 moveEndPos, UnityEngine::Vector3 jumpEndPos, float moveDuration, float jumpDuration, float jumpGravity, GlobalNamespace::GameNoteController_GameNoteType gameNoteType, float cutDirectionAngleOffset);
    // private System.Void HandleBigWasCutBySaber(Saber saber, UnityEngine.Vector3 cutPoint, UnityEngine.Quaternion orientation, UnityEngine.Vector3 cutDirVec)
    // Offset: 0x1A19EA8
    void HandleBigWasCutBySaber(GlobalNamespace::Saber* saber, UnityEngine::Vector3 cutPoint, UnityEngine::Quaternion orientation, UnityEngine::Vector3 cutDirVec);
    // private System.Void HandleSmallWasCutBySaber(Saber saber, UnityEngine.Vector3 cutPoint, UnityEngine.Quaternion orientation, UnityEngine.Vector3 cutDirVec)
    // Offset: 0x1A1A250
    void HandleSmallWasCutBySaber(GlobalNamespace::Saber* saber, UnityEngine::Vector3 cutPoint, UnityEngine::Quaternion orientation, UnityEngine::Vector3 cutDirVec);
    // private System.Void HandleCut(Saber saber, UnityEngine.Vector3 cutPoint, UnityEngine.Quaternion orientation, UnityEngine.Vector3 cutDirVec, System.Boolean allowBadCut)
    // Offset: 0x1A19EC0
    void HandleCut(GlobalNamespace::Saber* saber, UnityEngine::Vector3 cutPoint, UnityEngine::Quaternion orientation, UnityEngine::Vector3 cutDirVec, bool allowBadCut);
    // public GameNoteController/GameNoteType get_gameNoteType()
    // Offset: 0x1A19A18
    // Implemented from: IGameNoteTypeProvider
    // Base method: GameNoteController/GameNoteType IGameNoteTypeProvider::get_gameNoteType()
    GlobalNamespace::GameNoteController_GameNoteType get_gameNoteType();
    // public override System.Void set_hide(System.Boolean value)
    // Offset: 0x1A19A20
    // Implemented from: NoteController
    // Base method: System.Void NoteController::set_hide(System.Boolean value)
    void set_hide(bool value);
    // public override System.Boolean get_hide()
    // Offset: 0x1A19A64
    // Implemented from: NoteController
    // Base method: System.Boolean NoteController::get_hide()
    bool get_hide();
    // public override System.Void set_pause(System.Boolean value)
    // Offset: 0x1A19A6C
    // Implemented from: NoteController
    // Base method: System.Void NoteController::set_pause(System.Boolean value)
    void set_pause(bool value);
    // protected override System.Void Awake()
    // Offset: 0x1A19BDC
    // Implemented from: NoteController
    // Base method: System.Void NoteController::Awake()
    void Awake();
    // protected override System.Void OnDestroy()
    // Offset: 0x1A19CB0
    // Implemented from: NoteController
    // Base method: System.Void NoteController::OnDestroy()
    void OnDestroy();
    // protected override System.Void NoteDidPassMissedMarker()
    // Offset: 0x1A19E04
    // Implemented from: NoteController
    // Base method: System.Void NoteController::NoteDidPassMissedMarker()
    void NoteDidPassMissedMarker();
    // protected override System.Void NoteDidStartDissolving()
    // Offset: 0x1A19E5C
    // Implemented from: NoteController
    // Base method: System.Void NoteController::NoteDidStartDissolving()
    void NoteDidStartDissolving();
    // protected override System.Void NoteDidStartJump()
    // Offset: 0x1A1A268
    // Implemented from: NoteController
    // Base method: System.Void NoteController::NoteDidStartJump()
    void NoteDidStartJump();
    // public System.Void .ctor()
    // Offset: 0x1A1A2B4
    // Implemented from: NoteController
    // Base method: System.Void NoteController::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static GameNoteController* New_ctor();
  }; // GameNoteController
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GameNoteController*, "", "GameNoteController");
#pragma pack(pop)
