// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BezierSpline
#include "GlobalNamespace/BezierSpline.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: BezierSpline/ComputeControlPointsResults
  struct BezierSpline::ComputeControlPointsResults : public System::ValueType {
    public:
    // public readonly System.Single[] p1
    // Offset: 0x0
    ::Array<float>* p1;
    // public readonly System.Single[] p2
    // Offset: 0x8
    ::Array<float>* p2;
    // Creating value type constructor for type: ComputeControlPointsResults
    constexpr ComputeControlPointsResults(::Array<float>* p1_ = {}, ::Array<float>* p2_ = {}) noexcept : p1{p1_}, p2{p2_} {}
    // public System.Void .ctor(System.Single[] p1, System.Single[] p2)
    // Offset: 0xE7F330
    // ABORTED: conflicts with another method.  ComputeControlPointsResults(::Array<float>* p1, ::Array<float>* p2);
  }; // BezierSpline/ComputeControlPointsResults
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BezierSpline::ComputeControlPointsResults, "", "BezierSpline/ComputeControlPointsResults");
#pragma pack(pop)
