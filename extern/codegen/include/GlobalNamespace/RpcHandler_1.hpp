// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: MultiplayerSessionManager/MessageType
#include "GlobalNamespace/MultiplayerSessionManager_MessageType.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: <>c__DisplayClass13_0`1 because it is already included!
  // Skipping declaration: <>c__DisplayClass14_0`2 because it is already included!
  // Skipping declaration: <>c__DisplayClass15_0`3 because it is already included!
  // Skipping declaration: <>c__DisplayClass16_0`4 because it is already included!
  // Skipping declaration: <>c__DisplayClass17_0`5 because it is already included!
  // Skipping declaration: <>c__DisplayClass18_0`1 because it is already included!
  // Skipping declaration: <>c__DisplayClass19_0`2 because it is already included!
  // Skipping declaration: <>c__DisplayClass20_0`3 because it is already included!
  // Skipping declaration: <>c__DisplayClass21_0`4 because it is already included!
  // Skipping declaration: <>c__DisplayClass22_0`5 because it is already included!
  // Skipping declaration: <>c__DisplayClass23_0`1 because it is already included!
  // Skipping declaration: <>c__DisplayClass23_1`1 because it is already included!
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: NetworkPacketSerializer`2<TType, TData>
  template<typename TType, typename TData>
  class NetworkPacketSerializer_2;
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
  // Forward declaring type: RemoteProcedureCall
  class RemoteProcedureCall;
  // Forward declaring type: RemoteProcedureCall`1<T0>
  template<typename T0>
  class RemoteProcedureCall_1;
  // Forward declaring type: RemoteProcedureCall`2<T0, T1>
  template<typename T0, typename T1>
  class RemoteProcedureCall_2;
  // Forward declaring type: RemoteProcedureCall`3<T0, T1, T2>
  template<typename T0, typename T1, typename T2>
  class RemoteProcedureCall_3;
  // Forward declaring type: RemoteProcedureCall`4<T0, T1, T2, T3>
  template<typename T0, typename T1, typename T2, typename T3>
  class RemoteProcedureCall_4;
  // Forward declaring type: IRemoteProcedureCall
  class IRemoteProcedureCall;
}
// Forward declaring namespace: System
namespace System {
  // Skipping declaration: IConvertible because it is already included!
  // Skipping declaration: ValueType because it is already included!
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  class Action_3;
  // Forward declaring type: Action`4<T1, T2, T3, T4>
  template<typename T1, typename T2, typename T3, typename T4>
  class Action_4;
  // Forward declaring type: Action`5<T1, T2, T3, T4, T5>
  template<typename T1, typename T2, typename T3, typename T4, typename T5>
  class Action_5;
  // Forward declaring type: Action`6<T1, T2, T3, T4, T5, T6>
  template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6>
  class Action_6;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: RpcHandler`1
  template<typename TType>
  class RpcHandler_1 : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::RpcHandler_1::$$c__DisplayClass13_0_1<TType, T>
    template<typename T>
    class $$c__DisplayClass13_0_1;
    // Nested type: GlobalNamespace::RpcHandler_1::$$c__DisplayClass14_0_2<TType, T, T0>
    template<typename T, typename T0>
    class $$c__DisplayClass14_0_2;
    // Nested type: GlobalNamespace::RpcHandler_1::$$c__DisplayClass15_0_3<TType, T, T0, T1>
    template<typename T, typename T0, typename T1>
    class $$c__DisplayClass15_0_3;
    // Nested type: GlobalNamespace::RpcHandler_1::$$c__DisplayClass16_0_4<TType, T, T0, T1, T2>
    template<typename T, typename T0, typename T1, typename T2>
    class $$c__DisplayClass16_0_4;
    // Nested type: GlobalNamespace::RpcHandler_1::$$c__DisplayClass17_0_5<TType, T, T0, T1, T2, T3>
    template<typename T, typename T0, typename T1, typename T2, typename T3>
    class $$c__DisplayClass17_0_5;
    // Nested type: GlobalNamespace::RpcHandler_1::$$c__DisplayClass18_0_1<TType, T>
    template<typename T>
    class $$c__DisplayClass18_0_1;
    // Nested type: GlobalNamespace::RpcHandler_1::$$c__DisplayClass19_0_2<TType, T, T0>
    template<typename T, typename T0>
    class $$c__DisplayClass19_0_2;
    // Nested type: GlobalNamespace::RpcHandler_1::$$c__DisplayClass20_0_3<TType, T, T0, T1>
    template<typename T, typename T0, typename T1>
    class $$c__DisplayClass20_0_3;
    // Nested type: GlobalNamespace::RpcHandler_1::$$c__DisplayClass21_0_4<TType, T, T0, T1, T2>
    template<typename T, typename T0, typename T1, typename T2>
    class $$c__DisplayClass21_0_4;
    // Nested type: GlobalNamespace::RpcHandler_1::$$c__DisplayClass22_0_5<TType, T, T0, T1, T2, T3>
    template<typename T, typename T0, typename T1, typename T2, typename T3>
    class $$c__DisplayClass22_0_5;
    // Nested type: GlobalNamespace::RpcHandler_1::$$c__DisplayClass23_0_1<TType, T>
    template<typename T>
    class $$c__DisplayClass23_0_1;
    // Nested type: GlobalNamespace::RpcHandler_1::$$c__DisplayClass23_1_1<TType, T>
    template<typename T>
    class $$c__DisplayClass23_1_1;
    // Autogenerated type: RpcHandler`1/<>c__DisplayClass13_0`1
    template<typename T>
    class $$c__DisplayClass13_0_1 : public ::Il2CppObject, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = RpcHandler_1<TType>*;
      static constexpr std::string_view NESTED_NAME = "$$c__DisplayClass13_0_1";
      // public System.Action`1<System.String> callback
      // Offset: 0x0
      System::Action_1<::Il2CppString*>* callback;
      // Creating conversion operator: operator System::Action_1<::Il2CppString*>*
      constexpr operator System::Action_1<::Il2CppString*>*() const noexcept {
        return callback;
      }
      // System.Void <RegisterCallback>b__0(IConnectedPlayer player, T rpc)
      // Offset: 0xFFFFFFFF
      void $RegisterCallback$b__0(GlobalNamespace::IConnectedPlayer* player, T rpc) {
        THROW_UNLESS(il2cpp_utils::RunMethod(this, "<RegisterCallback>b__0", player, rpc));
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      static typename RpcHandler_1<TType>::$$c__DisplayClass13_0_1<T>* New_ctor() {
        return THROW_UNLESS(il2cpp_utils::New<typename RpcHandler_1<TType>::$$c__DisplayClass13_0_1<T>*>());
      }
    }; // RpcHandler`1/<>c__DisplayClass13_0`1
    // Autogenerated type: RpcHandler`1/<>c__DisplayClass14_0`2
    template<typename T, typename T0>
    class $$c__DisplayClass14_0_2 : public ::Il2CppObject, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = RpcHandler_1<TType>*;
      static constexpr std::string_view NESTED_NAME = "$$c__DisplayClass14_0_2";
      // public System.Action`2<System.String,T0> callback
      // Offset: 0x0
      System::Action_2<::Il2CppString*, T0>* callback;
      // Creating conversion operator: operator System::Action_2<::Il2CppString*, T0>*
      constexpr operator System::Action_2<::Il2CppString*, T0>*() const noexcept {
        return callback;
      }
      // System.Void <RegisterCallback>b__0(IConnectedPlayer player, T rpc)
      // Offset: 0xFFFFFFFF
      void $RegisterCallback$b__0(GlobalNamespace::IConnectedPlayer* player, T rpc) {
        THROW_UNLESS(il2cpp_utils::RunMethod(this, "<RegisterCallback>b__0", player, rpc));
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      static typename RpcHandler_1<TType>::$$c__DisplayClass14_0_2<T, T0>* New_ctor() {
        return THROW_UNLESS((il2cpp_utils::New<typename RpcHandler_1<TType>::$$c__DisplayClass14_0_2<T, T0>*>()));
      }
    }; // RpcHandler`1/<>c__DisplayClass14_0`2
    // Autogenerated type: RpcHandler`1/<>c__DisplayClass15_0`3
    template<typename T, typename T0, typename T1>
    class $$c__DisplayClass15_0_3 : public ::Il2CppObject, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = RpcHandler_1<TType>*;
      static constexpr std::string_view NESTED_NAME = "$$c__DisplayClass15_0_3";
      // public System.Action`3<System.String,T0,T1> callback
      // Offset: 0x0
      System::Action_3<::Il2CppString*, T0, T1>* callback;
      // Creating conversion operator: operator System::Action_3<::Il2CppString*, T0, T1>*
      constexpr operator System::Action_3<::Il2CppString*, T0, T1>*() const noexcept {
        return callback;
      }
      // System.Void <RegisterCallback>b__0(IConnectedPlayer player, T rpc)
      // Offset: 0xFFFFFFFF
      void $RegisterCallback$b__0(GlobalNamespace::IConnectedPlayer* player, T rpc) {
        THROW_UNLESS(il2cpp_utils::RunMethod(this, "<RegisterCallback>b__0", player, rpc));
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      static typename RpcHandler_1<TType>::$$c__DisplayClass15_0_3<T, T0, T1>* New_ctor() {
        return THROW_UNLESS((il2cpp_utils::New<typename RpcHandler_1<TType>::$$c__DisplayClass15_0_3<T, T0, T1>*>()));
      }
    }; // RpcHandler`1/<>c__DisplayClass15_0`3
    // Autogenerated type: RpcHandler`1/<>c__DisplayClass16_0`4
    template<typename T, typename T0, typename T1, typename T2>
    class $$c__DisplayClass16_0_4 : public ::Il2CppObject, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = RpcHandler_1<TType>*;
      static constexpr std::string_view NESTED_NAME = "$$c__DisplayClass16_0_4";
      // public System.Action`4<System.String,T0,T1,T2> callback
      // Offset: 0x0
      System::Action_4<::Il2CppString*, T0, T1, T2>* callback;
      // Creating conversion operator: operator System::Action_4<::Il2CppString*, T0, T1, T2>*
      constexpr operator System::Action_4<::Il2CppString*, T0, T1, T2>*() const noexcept {
        return callback;
      }
      // System.Void <RegisterCallback>b__0(IConnectedPlayer player, T rpc)
      // Offset: 0xFFFFFFFF
      void $RegisterCallback$b__0(GlobalNamespace::IConnectedPlayer* player, T rpc) {
        THROW_UNLESS(il2cpp_utils::RunMethod(this, "<RegisterCallback>b__0", player, rpc));
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      static typename RpcHandler_1<TType>::$$c__DisplayClass16_0_4<T, T0, T1, T2>* New_ctor() {
        return THROW_UNLESS((il2cpp_utils::New<typename RpcHandler_1<TType>::$$c__DisplayClass16_0_4<T, T0, T1, T2>*>()));
      }
    }; // RpcHandler`1/<>c__DisplayClass16_0`4
    // Autogenerated type: RpcHandler`1/<>c__DisplayClass17_0`5
    template<typename T, typename T0, typename T1, typename T2, typename T3>
    class $$c__DisplayClass17_0_5 : public ::Il2CppObject, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = RpcHandler_1<TType>*;
      static constexpr std::string_view NESTED_NAME = "$$c__DisplayClass17_0_5";
      // public System.Action`5<System.String,T0,T1,T2,T3> callback
      // Offset: 0x0
      System::Action_5<::Il2CppString*, T0, T1, T2, T3>* callback;
      // Creating conversion operator: operator System::Action_5<::Il2CppString*, T0, T1, T2, T3>*
      constexpr operator System::Action_5<::Il2CppString*, T0, T1, T2, T3>*() const noexcept {
        return callback;
      }
      // System.Void <RegisterCallback>b__0(IConnectedPlayer player, T rpc)
      // Offset: 0xFFFFFFFF
      void $RegisterCallback$b__0(GlobalNamespace::IConnectedPlayer* player, T rpc) {
        THROW_UNLESS(il2cpp_utils::RunMethod(this, "<RegisterCallback>b__0", player, rpc));
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      static typename RpcHandler_1<TType>::$$c__DisplayClass17_0_5<T, T0, T1, T2, T3>* New_ctor() {
        return THROW_UNLESS((il2cpp_utils::New<typename RpcHandler_1<TType>::$$c__DisplayClass17_0_5<T, T0, T1, T2, T3>*>()));
      }
    }; // RpcHandler`1/<>c__DisplayClass17_0`5
    // Autogenerated type: RpcHandler`1/<>c__DisplayClass18_0`1
    template<typename T>
    class $$c__DisplayClass18_0_1 : public ::Il2CppObject, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = RpcHandler_1<TType>*;
      static constexpr std::string_view NESTED_NAME = "$$c__DisplayClass18_0_1";
      // public System.Action`2<System.String,System.Single> callback
      // Offset: 0x0
      System::Action_2<::Il2CppString*, float>* callback;
      // Creating conversion operator: operator System::Action_2<::Il2CppString*, float>*
      constexpr operator System::Action_2<::Il2CppString*, float>*() const noexcept {
        return callback;
      }
      // System.Void <RegisterCallbackWithTime>b__0(IConnectedPlayer player, T rpc)
      // Offset: 0xFFFFFFFF
      void $RegisterCallbackWithTime$b__0(GlobalNamespace::IConnectedPlayer* player, T rpc) {
        THROW_UNLESS(il2cpp_utils::RunMethod(this, "<RegisterCallbackWithTime>b__0", player, rpc));
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      static typename RpcHandler_1<TType>::$$c__DisplayClass18_0_1<T>* New_ctor() {
        return THROW_UNLESS(il2cpp_utils::New<typename RpcHandler_1<TType>::$$c__DisplayClass18_0_1<T>*>());
      }
    }; // RpcHandler`1/<>c__DisplayClass18_0`1
    // Autogenerated type: RpcHandler`1/<>c__DisplayClass19_0`2
    template<typename T, typename T0>
    class $$c__DisplayClass19_0_2 : public ::Il2CppObject, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = RpcHandler_1<TType>*;
      static constexpr std::string_view NESTED_NAME = "$$c__DisplayClass19_0_2";
      // public System.Action`3<System.String,System.Single,T0> callback
      // Offset: 0x0
      System::Action_3<::Il2CppString*, float, T0>* callback;
      // Creating conversion operator: operator System::Action_3<::Il2CppString*, float, T0>*
      constexpr operator System::Action_3<::Il2CppString*, float, T0>*() const noexcept {
        return callback;
      }
      // System.Void <RegisterCallbackWithTime>b__0(IConnectedPlayer player, T rpc)
      // Offset: 0xFFFFFFFF
      void $RegisterCallbackWithTime$b__0(GlobalNamespace::IConnectedPlayer* player, T rpc) {
        THROW_UNLESS(il2cpp_utils::RunMethod(this, "<RegisterCallbackWithTime>b__0", player, rpc));
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      static typename RpcHandler_1<TType>::$$c__DisplayClass19_0_2<T, T0>* New_ctor() {
        return THROW_UNLESS((il2cpp_utils::New<typename RpcHandler_1<TType>::$$c__DisplayClass19_0_2<T, T0>*>()));
      }
    }; // RpcHandler`1/<>c__DisplayClass19_0`2
    // Autogenerated type: RpcHandler`1/<>c__DisplayClass20_0`3
    template<typename T, typename T0, typename T1>
    class $$c__DisplayClass20_0_3 : public ::Il2CppObject, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = RpcHandler_1<TType>*;
      static constexpr std::string_view NESTED_NAME = "$$c__DisplayClass20_0_3";
      // public System.Action`4<System.String,System.Single,T0,T1> callback
      // Offset: 0x0
      System::Action_4<::Il2CppString*, float, T0, T1>* callback;
      // Creating conversion operator: operator System::Action_4<::Il2CppString*, float, T0, T1>*
      constexpr operator System::Action_4<::Il2CppString*, float, T0, T1>*() const noexcept {
        return callback;
      }
      // System.Void <RegisterCallbackWithTime>b__0(IConnectedPlayer player, T rpc)
      // Offset: 0xFFFFFFFF
      void $RegisterCallbackWithTime$b__0(GlobalNamespace::IConnectedPlayer* player, T rpc) {
        THROW_UNLESS(il2cpp_utils::RunMethod(this, "<RegisterCallbackWithTime>b__0", player, rpc));
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      static typename RpcHandler_1<TType>::$$c__DisplayClass20_0_3<T, T0, T1>* New_ctor() {
        return THROW_UNLESS((il2cpp_utils::New<typename RpcHandler_1<TType>::$$c__DisplayClass20_0_3<T, T0, T1>*>()));
      }
    }; // RpcHandler`1/<>c__DisplayClass20_0`3
    // Autogenerated type: RpcHandler`1/<>c__DisplayClass21_0`4
    template<typename T, typename T0, typename T1, typename T2>
    class $$c__DisplayClass21_0_4 : public ::Il2CppObject, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = RpcHandler_1<TType>*;
      static constexpr std::string_view NESTED_NAME = "$$c__DisplayClass21_0_4";
      // public System.Action`5<System.String,System.Single,T0,T1,T2> callback
      // Offset: 0x0
      System::Action_5<::Il2CppString*, float, T0, T1, T2>* callback;
      // Creating conversion operator: operator System::Action_5<::Il2CppString*, float, T0, T1, T2>*
      constexpr operator System::Action_5<::Il2CppString*, float, T0, T1, T2>*() const noexcept {
        return callback;
      }
      // System.Void <RegisterCallbackWithTime>b__0(IConnectedPlayer player, T rpc)
      // Offset: 0xFFFFFFFF
      void $RegisterCallbackWithTime$b__0(GlobalNamespace::IConnectedPlayer* player, T rpc) {
        THROW_UNLESS(il2cpp_utils::RunMethod(this, "<RegisterCallbackWithTime>b__0", player, rpc));
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      static typename RpcHandler_1<TType>::$$c__DisplayClass21_0_4<T, T0, T1, T2>* New_ctor() {
        return THROW_UNLESS((il2cpp_utils::New<typename RpcHandler_1<TType>::$$c__DisplayClass21_0_4<T, T0, T1, T2>*>()));
      }
    }; // RpcHandler`1/<>c__DisplayClass21_0`4
    // Autogenerated type: RpcHandler`1/<>c__DisplayClass22_0`5
    template<typename T, typename T0, typename T1, typename T2, typename T3>
    class $$c__DisplayClass22_0_5 : public ::Il2CppObject, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = RpcHandler_1<TType>*;
      static constexpr std::string_view NESTED_NAME = "$$c__DisplayClass22_0_5";
      // public System.Action`6<System.String,System.Single,T0,T1,T2,T3> callback
      // Offset: 0x0
      System::Action_6<::Il2CppString*, float, T0, T1, T2, T3>* callback;
      // Creating conversion operator: operator System::Action_6<::Il2CppString*, float, T0, T1, T2, T3>*
      constexpr operator System::Action_6<::Il2CppString*, float, T0, T1, T2, T3>*() const noexcept {
        return callback;
      }
      // System.Void <RegisterCallbackWithTime>b__0(IConnectedPlayer player, T rpc)
      // Offset: 0xFFFFFFFF
      void $RegisterCallbackWithTime$b__0(GlobalNamespace::IConnectedPlayer* player, T rpc) {
        THROW_UNLESS(il2cpp_utils::RunMethod(this, "<RegisterCallbackWithTime>b__0", player, rpc));
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      static typename RpcHandler_1<TType>::$$c__DisplayClass22_0_5<T, T0, T1, T2, T3>* New_ctor() {
        return THROW_UNLESS((il2cpp_utils::New<typename RpcHandler_1<TType>::$$c__DisplayClass22_0_5<T, T0, T1, T2, T3>*>()));
      }
    }; // RpcHandler`1/<>c__DisplayClass22_0`5
    // Autogenerated type: RpcHandler`1/<>c__DisplayClass23_0`1
    template<typename T>
    class $$c__DisplayClass23_0_1 : public ::Il2CppObject, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = RpcHandler_1<TType>*;
      static constexpr std::string_view NESTED_NAME = "$$c__DisplayClass23_0_1";
      // public RpcHandler`1<TType> <>4__this
      // Offset: 0x0
      GlobalNamespace::RpcHandler_1<TType>* $$4__this;
      // public System.Action`2<IConnectedPlayer,T> callback
      // Offset: 0x0
      System::Action_2<GlobalNamespace::IConnectedPlayer*, T>* callback;
      // System.Void <RegisterCallback>b__0(T rpc, IConnectedPlayer player)
      // Offset: 0xFFFFFFFF
      void $RegisterCallback$b__0(T rpc, GlobalNamespace::IConnectedPlayer* player) {
        THROW_UNLESS(il2cpp_utils::RunMethod(this, "<RegisterCallback>b__0", rpc, player));
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      static typename RpcHandler_1<TType>::$$c__DisplayClass23_0_1<T>* New_ctor() {
        return THROW_UNLESS(il2cpp_utils::New<typename RpcHandler_1<TType>::$$c__DisplayClass23_0_1<T>*>());
      }
    }; // RpcHandler`1/<>c__DisplayClass23_0`1
    // Autogenerated type: RpcHandler`1/<>c__DisplayClass23_1`1
    template<typename T>
    class $$c__DisplayClass23_1_1 : public ::Il2CppObject, public ::il2cpp_utils::il2cpp_type_check::NestedType {
      public:
      using declaring_type = RpcHandler_1<TType>*;
      static constexpr std::string_view NESTED_NAME = "$$c__DisplayClass23_1_1";
      // public IConnectedPlayer player
      // Offset: 0x0
      GlobalNamespace::IConnectedPlayer* player;
      // public T rpc
      // Offset: 0x0
      T rpc;
      // public RpcHandler`1/<>c__DisplayClass23_0`1<TType,T> CS$<>8__locals1
      // Offset: 0x0
      typename GlobalNamespace::RpcHandler_1<TType>::$$c__DisplayClass23_0_1<T>* CS$$$8__locals1;
      // System.Void <RegisterCallback>b__1()
      // Offset: 0xFFFFFFFF
      void $RegisterCallback$b__1() {
        THROW_UNLESS(il2cpp_utils::RunMethod(this, "<RegisterCallback>b__1"));
      }
      // public System.Void .ctor()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Object
      // Base method: System.Void Object::.ctor()
      static typename RpcHandler_1<TType>::$$c__DisplayClass23_1_1<T>* New_ctor() {
        return THROW_UNLESS(il2cpp_utils::New<typename RpcHandler_1<TType>::$$c__DisplayClass23_1_1<T>*>());
      }
    }; // RpcHandler`1/<>c__DisplayClass23_1`1
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Offset: 0x0
    GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // private readonly MultiplayerSessionManager/MessageType _messageType
    // Offset: 0x0
    GlobalNamespace::MultiplayerSessionManager_MessageType messageType;
    // private readonly NetworkPacketSerializer`2<TType,IConnectedPlayer> _rpcSerializer
    // Offset: 0x0
    GlobalNamespace::NetworkPacketSerializer_2<TType, GlobalNamespace::IConnectedPlayer*>* rpcSerializer;
    // private readonly System.Boolean _delayCallTime
    // Offset: 0x0
    bool delayCallTime;
    // private System.Boolean _destroyed
    // Offset: 0x0
    bool destroyed;
    // Autogenerated static field getter
    // Get static field: static private System.Single kMaximumRpcTimeOffset
    static float _get_kMaximumRpcTimeOffset() {
      return THROW_UNLESS(il2cpp_utils::GetFieldValue<float>(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<RpcHandler_1<TType>*>::get(), "kMaximumRpcTimeOffset"));
    }
    // Autogenerated static field setter
    // Set static field: static private System.Single kMaximumRpcTimeOffset
    static void _set_kMaximumRpcTimeOffset(float value) {
      THROW_UNLESS(il2cpp_utils::SetFieldValue(il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<RpcHandler_1<TType>*>::get(), "kMaximumRpcTimeOffset", value));
    }
    // public System.Void .ctor(IMultiplayerSessionManager multiplayerSessionManager, MultiplayerSessionManager/MessageType messageType, System.Boolean delayCallTime)
    // Offset: 0xFFFFFFFF
    static RpcHandler_1<TType>* New_ctor(GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager, GlobalNamespace::MultiplayerSessionManager_MessageType messageType, bool delayCallTime) {
      return THROW_UNLESS(il2cpp_utils::New<RpcHandler_1<TType>*>(multiplayerSessionManager, messageType, delayCallTime));
    }
    // public System.Void Destroy()
    // Offset: 0xFFFFFFFF
    void Destroy() {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Destroy"));
    }
    // public System.Void EnqueueRpc()
    // Offset: 0xFFFFFFFF
    template<class T>
    void EnqueueRpc() {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall*>);
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "EnqueueRpc", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
    }
    // public System.Void EnqueueRpc(T0 value0)
    // Offset: 0xFFFFFFFF
    template<class T, class T0>
    void EnqueueRpc(T0 value0) {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall_1<T0>*>);
      THROW_UNLESS((il2cpp_utils::RunGenericMethod(this, "EnqueueRpc", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get()}, value0)));
    }
    // public System.Void EnqueueRpc(T0 value0, T1 value1)
    // Offset: 0xFFFFFFFF
    template<class T, class T0, class T1>
    void EnqueueRpc(T0 value0, T1 value1) {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall_2<T0, T1>*>);
      THROW_UNLESS((il2cpp_utils::RunGenericMethod(this, "EnqueueRpc", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}, value0, value1)));
    }
    // public System.Void EnqueueRpc(T0 value0, T1 value1, T2 value2)
    // Offset: 0xFFFFFFFF
    template<class T, class T0, class T1, class T2>
    void EnqueueRpc(T0 value0, T1 value1, T2 value2) {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall_3<T0, T1, T2>*>);
      THROW_UNLESS((il2cpp_utils::RunGenericMethod(this, "EnqueueRpc", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()}, value0, value1, value2)));
    }
    // public System.Void EnqueueRpc(T0 value0, T1 value1, T2 value2, T3 value3)
    // Offset: 0xFFFFFFFF
    template<class T, class T0, class T1, class T2, class T3>
    void EnqueueRpc(T0 value0, T1 value1, T2 value2, T3 value3) {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall_4<T0, T1, T2, T3>*>);
      THROW_UNLESS((il2cpp_utils::RunGenericMethod(this, "EnqueueRpc", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()}, value0, value1, value2, value3)));
    }
    // public System.Void RegisterCallback(TType type, System.Action`1<System.String> callback)
    // Offset: 0xFFFFFFFF
    template<class T>
    void RegisterCallback(TType type, System::Action_1<::Il2CppString*>* callback) {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall*>);
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "RegisterCallback", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, type, callback));
    }
    // public System.Void RegisterCallback(TType type, System.Action`2<System.String,T0> callback)
    // Offset: 0xFFFFFFFF
    template<class T, class T0>
    void RegisterCallback(TType type, System::Action_2<::Il2CppString*, T0>* callback) {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall_1<T0>*>);
      THROW_UNLESS((il2cpp_utils::RunGenericMethod(this, "RegisterCallback", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get()}, type, callback)));
    }
    // public System.Void RegisterCallback(TType type, System.Action`3<System.String,T0,T1> callback)
    // Offset: 0xFFFFFFFF
    template<class T, class T0, class T1>
    void RegisterCallback(TType type, System::Action_3<::Il2CppString*, T0, T1>* callback) {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall_2<T0, T1>*>);
      THROW_UNLESS((il2cpp_utils::RunGenericMethod(this, "RegisterCallback", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}, type, callback)));
    }
    // public System.Void RegisterCallback(TType type, System.Action`4<System.String,T0,T1,T2> callback)
    // Offset: 0xFFFFFFFF
    template<class T, class T0, class T1, class T2>
    void RegisterCallback(TType type, System::Action_4<::Il2CppString*, T0, T1, T2>* callback) {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall_3<T0, T1, T2>*>);
      THROW_UNLESS((il2cpp_utils::RunGenericMethod(this, "RegisterCallback", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()}, type, callback)));
    }
    // public System.Void RegisterCallback(TType type, System.Action`5<System.String,T0,T1,T2,T3> callback)
    // Offset: 0xFFFFFFFF
    template<class T, class T0, class T1, class T2, class T3>
    void RegisterCallback(TType type, System::Action_5<::Il2CppString*, T0, T1, T2, T3>* callback) {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall_4<T0, T1, T2, T3>*>);
      THROW_UNLESS((il2cpp_utils::RunGenericMethod(this, "RegisterCallback", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()}, type, callback)));
    }
    // public System.Void RegisterCallbackWithTime(TType type, System.Action`2<System.String,System.Single> callback)
    // Offset: 0xFFFFFFFF
    template<class T>
    void RegisterCallbackWithTime(TType type, System::Action_2<::Il2CppString*, float>* callback) {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall*>);
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "RegisterCallbackWithTime", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, type, callback));
    }
    // public System.Void RegisterCallbackWithTime(TType type, System.Action`3<System.String,System.Single,T0> callback)
    // Offset: 0xFFFFFFFF
    template<class T, class T0>
    void RegisterCallbackWithTime(TType type, System::Action_3<::Il2CppString*, float, T0>* callback) {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall_1<T0>*>);
      THROW_UNLESS((il2cpp_utils::RunGenericMethod(this, "RegisterCallbackWithTime", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get()}, type, callback)));
    }
    // public System.Void RegisterCallbackWithTime(TType type, System.Action`4<System.String,System.Single,T0,T1> callback)
    // Offset: 0xFFFFFFFF
    template<class T, class T0, class T1>
    void RegisterCallbackWithTime(TType type, System::Action_4<::Il2CppString*, float, T0, T1>* callback) {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall_2<T0, T1>*>);
      THROW_UNLESS((il2cpp_utils::RunGenericMethod(this, "RegisterCallbackWithTime", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get()}, type, callback)));
    }
    // public System.Void RegisterCallbackWithTime(TType type, System.Action`5<System.String,System.Single,T0,T1,T2> callback)
    // Offset: 0xFFFFFFFF
    template<class T, class T0, class T1, class T2>
    void RegisterCallbackWithTime(TType type, System::Action_5<::Il2CppString*, float, T0, T1, T2>* callback) {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall_3<T0, T1, T2>*>);
      THROW_UNLESS((il2cpp_utils::RunGenericMethod(this, "RegisterCallbackWithTime", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get()}, type, callback)));
    }
    // public System.Void RegisterCallbackWithTime(TType type, System.Action`6<System.String,System.Single,T0,T1,T2,T3> callback)
    // Offset: 0xFFFFFFFF
    template<class T, class T0, class T1, class T2, class T3>
    void RegisterCallbackWithTime(TType type, System::Action_6<::Il2CppString*, float, T0, T1, T2, T3>* callback) {
      static_assert(std::is_convertible_v<T, GlobalNamespace::RemoteProcedureCall_4<T0, T1, T2, T3>*>);
      THROW_UNLESS((il2cpp_utils::RunGenericMethod(this, "RegisterCallbackWithTime", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T0>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T1>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T2>::get(), il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T3>::get()}, type, callback)));
    }
    // private System.Void RegisterCallback(TType type, System.Action`2<IConnectedPlayer,T> callback)
    // Offset: 0xFFFFFFFF
    template<class T>
    void RegisterCallback(TType type, System::Action_2<GlobalNamespace::IConnectedPlayer*, T>* callback) {
      static_assert(std::is_base_of_v<GlobalNamespace::IRemoteProcedureCall, std::remove_pointer_t<T>>);
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "RegisterCallback", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, type, callback));
    }
  }; // RpcHandler`1
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(GlobalNamespace::RpcHandler_1, "", "RpcHandler`1");
#pragma pack(pop)
