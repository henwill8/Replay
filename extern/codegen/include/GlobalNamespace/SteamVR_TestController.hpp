// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: Valve.VR.EVRButtonId
#include "Valve/VR/EVRButtonId.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: SteamVR_TestController
  // [] Offset: FFFFFFFF
  class SteamVR_TestController : public UnityEngine::MonoBehaviour {
    public:
    // private System.Collections.Generic.List`1<System.Int32> controllerIndices
    // Size: 0x8
    // Offset: 0x18
    System::Collections::Generic::List_1<int>* controllerIndices;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<int>*) == 0x8);
    // private Valve.VR.EVRButtonId[] buttonIds
    // Size: 0x8
    // Offset: 0x20
    ::Array<Valve::VR::EVRButtonId>* buttonIds;
    // Field size check
    static_assert(sizeof(::Array<Valve::VR::EVRButtonId>*) == 0x8);
    // private Valve.VR.EVRButtonId[] axisIds
    // Size: 0x8
    // Offset: 0x28
    ::Array<Valve::VR::EVRButtonId>* axisIds;
    // Field size check
    static_assert(sizeof(::Array<Valve::VR::EVRButtonId>*) == 0x8);
    // public UnityEngine.Transform point
    // Size: 0x8
    // Offset: 0x30
    UnityEngine::Transform* point;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // public UnityEngine.Transform pointer
    // Size: 0x8
    // Offset: 0x38
    UnityEngine::Transform* pointer;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // Creating value type constructor for type: SteamVR_TestController
    SteamVR_TestController(System::Collections::Generic::List_1<int>* controllerIndices_ = {}, ::Array<Valve::VR::EVRButtonId>* buttonIds_ = {}, ::Array<Valve::VR::EVRButtonId>* axisIds_ = {}, UnityEngine::Transform* point_ = {}, UnityEngine::Transform* pointer_ = {}) noexcept : controllerIndices{controllerIndices_}, buttonIds{buttonIds_}, axisIds{axisIds_}, point{point_}, pointer{pointer_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // private System.Void OnDeviceConnected(System.Int32 index, System.Boolean connected)
    // Offset: 0x129E838
    void OnDeviceConnected(int index, bool connected);
    // private System.Void OnEnable()
    // Offset: 0x129EE3C
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x129EF00
    void OnDisable();
    // private System.Void PrintControllerStatus(System.Int32 index)
    // Offset: 0x129E9EC
    void PrintControllerStatus(int index);
    // private System.Void Update()
    // Offset: 0x129EFC4
    void Update();
    // public System.Void .ctor()
    // Offset: 0x129F914
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SteamVR_TestController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_TestController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SteamVR_TestController*, creationType>()));
    }
  }; // SteamVR_TestController
  #pragma pack(pop)
  static check_size<sizeof(SteamVR_TestController), 56 + sizeof(UnityEngine::Transform*)> __GlobalNamespace_SteamVR_TestControllerSizeCheck;
  static_assert(sizeof(SteamVR_TestController) == 0x40);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SteamVR_TestController*, "", "SteamVR_TestController");
