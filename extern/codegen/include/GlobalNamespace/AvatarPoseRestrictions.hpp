// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AvatarPoseController
  class AvatarPoseController;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Quaternion because it is already included!
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: AvatarPoseRestrictions
  // [] Offset: FFFFFFFF
  class AvatarPoseRestrictions : public UnityEngine::MonoBehaviour {
    public:
    // private System.Single _maxHeadSquareDistanceFromCenter
    // Size: 0x4
    // Offset: 0x18
    float maxHeadSquareDistanceFromCenter;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _minHeadYPos
    // Size: 0x4
    // Offset: 0x1C
    float minHeadYPos;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _maxHeadYPos
    // Size: 0x4
    // Offset: 0x20
    float maxHeadYPos;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _minHandSquareDistanceFromHeadCenter
    // Size: 0x4
    // Offset: 0x24
    float minHandSquareDistanceFromHeadCenter;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _maxHandSquareDistanceFromHeadCenter
    // Size: 0x4
    // Offset: 0x28
    float maxHandSquareDistanceFromHeadCenter;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _forceHeadPosition
    // Size: 0x1
    // Offset: 0x2C
    bool forceHeadPosition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: forceHeadPosition and: centerHeadOffset
    char __padding5[0x3] = {};
    // private UnityEngine.Vector3 _centerHeadOffset
    // Size: 0xC
    // Offset: 0x30
    UnityEngine::Vector3 centerHeadOffset;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // Padding between fields: centerHeadOffset and: avatarPoseController
    char __padding6[0x4] = {};
    // [InjectAttribute] Offset: 0xD33D44
    // private readonly AvatarPoseController _avatarPoseController
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::AvatarPoseController* avatarPoseController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AvatarPoseController*) == 0x8);
    // Creating value type constructor for type: AvatarPoseRestrictions
    AvatarPoseRestrictions(float maxHeadSquareDistanceFromCenter_ = {}, float minHeadYPos_ = {}, float maxHeadYPos_ = {}, float minHandSquareDistanceFromHeadCenter_ = {}, float maxHandSquareDistanceFromHeadCenter_ = {}, bool forceHeadPosition_ = {}, UnityEngine::Vector3 centerHeadOffset_ = {}, GlobalNamespace::AvatarPoseController* avatarPoseController_ = {}) noexcept : maxHeadSquareDistanceFromCenter{maxHeadSquareDistanceFromCenter_}, minHeadYPos{minHeadYPos_}, maxHeadYPos{maxHeadYPos_}, minHandSquareDistanceFromHeadCenter{minHandSquareDistanceFromHeadCenter_}, maxHandSquareDistanceFromHeadCenter{maxHandSquareDistanceFromHeadCenter_}, forceHeadPosition{forceHeadPosition_}, centerHeadOffset{centerHeadOffset_}, avatarPoseController{avatarPoseController_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void Start()
    // Offset: 0x1034E04
    void Start();
    // private System.Void HandleAvatarPoseControllerPositionsWillBeSet(UnityEngine.Quaternion headRotation, UnityEngine.Vector3 headPosition, UnityEngine.Vector3 leftHandPosition, UnityEngine.Vector3 rightHandPosition, out UnityEngine.Vector3 newHeadPosition, out UnityEngine.Vector3 newLeftHandPosition, out UnityEngine.Vector3 newRightHandPosition)
    // Offset: 0x1034E9C
    void HandleAvatarPoseControllerPositionsWillBeSet(UnityEngine::Quaternion headRotation, UnityEngine::Vector3 headPosition, UnityEngine::Vector3 leftHandPosition, UnityEngine::Vector3 rightHandPosition, UnityEngine::Vector3& newHeadPosition, UnityEngine::Vector3& newLeftHandPosition, UnityEngine::Vector3& newRightHandPosition);
    // private UnityEngine.Vector3 LimitHandPositionRelativeToHead(UnityEngine.Vector3 handPosition, UnityEngine.Vector3 headCenter)
    // Offset: 0x103524C
    UnityEngine::Vector3 LimitHandPositionRelativeToHead(UnityEngine::Vector3 handPosition, UnityEngine::Vector3 headCenter);
    // public System.Void .ctor()
    // Offset: 0x10353F4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AvatarPoseRestrictions* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarPoseRestrictions::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AvatarPoseRestrictions*, creationType>()));
    }
  }; // AvatarPoseRestrictions
  #pragma pack(pop)
  static check_size<sizeof(AvatarPoseRestrictions), 64 + sizeof(GlobalNamespace::AvatarPoseController*)> __GlobalNamespace_AvatarPoseRestrictionsSizeCheck;
  static_assert(sizeof(AvatarPoseRestrictions) == 0x48);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::AvatarPoseRestrictions*, "", "AvatarPoseRestrictions");
