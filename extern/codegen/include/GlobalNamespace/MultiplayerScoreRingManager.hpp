// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: MultiplayerScoreRingItem
#include "GlobalNamespace/MultiplayerScoreRingItem.hpp"
// Including type: MultiplayerController
#include "GlobalNamespace/MultiplayerController.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerPlayersManager
  class MultiplayerPlayersManager;
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: BeatmapObjectSpawnCenter
  class BeatmapObjectSpawnCenter;
  // Forward declaring type: MultiplayerLayoutProvider
  class MultiplayerLayoutProvider;
  // Forward declaring type: MultiplayerScoreProvider
  class MultiplayerScoreProvider;
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Color because it is already included!
}
// Forward declaring namespace: Tweening
namespace Tweening {
  // Forward declaring type: EaseType
  struct EaseType;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: MultiplayerScoreRingManager
  class MultiplayerScoreRingManager : public UnityEngine::MonoBehaviour {
    public:
    // private System.Single _delayBetweenScoreUpdates
    // Offset: 0x18
    float delayBetweenScoreUpdates;
    // private System.Single _centerDistanceOffset
    // Offset: 0x1C
    float centerDistanceOffset;
    // private readonly MultiplayerController _multiplayerController
    // Offset: 0x20
    GlobalNamespace::MultiplayerController* multiplayerController;
    // private readonly MultiplayerPlayersManager _multiplayerPlayersManager
    // Offset: 0x28
    GlobalNamespace::MultiplayerPlayersManager* multiplayerPlayersManager;
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Offset: 0x30
    GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // private readonly BeatmapObjectSpawnCenter _spawnCenter
    // Offset: 0x38
    GlobalNamespace::BeatmapObjectSpawnCenter* spawnCenter;
    // private readonly MultiplayerLayoutProvider _layoutProvider
    // Offset: 0x40
    GlobalNamespace::MultiplayerLayoutProvider* layoutProvider;
    // private readonly MultiplayerScoreProvider _scoreProvider
    // Offset: 0x48
    GlobalNamespace::MultiplayerScoreProvider* scoreProvider;
    // private readonly MultiplayerScoreRingItem/Pool _scoreRingItemPool
    // Offset: 0x50
    GlobalNamespace::MultiplayerScoreRingItem::Pool* scoreRingItemPool;
    // private readonly System.Collections.Generic.Dictionary`2<System.String,MultiplayerScoreRingItem> _scoreRingItems
    // Offset: 0x58
    System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::MultiplayerScoreRingItem*>* scoreRingItems;
    // private System.Collections.Generic.List`1<IConnectedPlayer> _allActivePlayers
    // Offset: 0x60
    System::Collections::Generic::List_1<GlobalNamespace::IConnectedPlayer*>* allActivePlayers;
    // private System.Int32 _currentlyScoreUpdateIndex
    // Offset: 0x68
    int currentlyScoreUpdateIndex;
    // private System.Single _timeSinceLastScoreUpdate
    // Offset: 0x6C
    float timeSinceLastScoreUpdate;
    // private MultiplayerScoreRingItem _firstPlayerItem
    // Offset: 0x70
    GlobalNamespace::MultiplayerScoreRingItem* firstPlayerItem;
    // private System.Boolean _spawnCenterDistanceFound
    // Offset: 0x78
    bool spawnCenterDistanceFound;
    // private System.Boolean _playersSpawned
    // Offset: 0x79
    bool playersSpawned;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void Start()
    // Offset: 0xF80218
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0xF808E8
    void OnDestroy();
    // protected System.Void Update()
    // Offset: 0xF80C08
    void Update();
    // private System.Void UpdateScore(IConnectedPlayer playerToUpdate)
    // Offset: 0xF80CEC
    void UpdateScore(GlobalNamespace::IConnectedPlayer* playerToUpdate);
    // public System.Void AnimateColorsForPlayer(System.String userId, UnityEngine.Color nameColor, UnityEngine.Color scoreColor, System.Single duration, Tweening.EaseType easeType)
    // Offset: 0xF80EC4
    void AnimateColorsForPlayer(::Il2CppString* userId, UnityEngine::Color nameColor, UnityEngine::Color scoreColor, float duration, Tweening::EaseType easeType);
    // public System.Void AnimateColorsForAllPlayers(UnityEngine.Color nameColor, UnityEngine.Color scoreColor, System.Single duration, Tweening.EaseType easeType)
    // Offset: 0xF7A4A0
    void AnimateColorsForAllPlayers(UnityEngine::Color nameColor, UnityEngine::Color scoreColor, float duration, Tweening::EaseType easeType);
    // private System.Void SetPlayerToFailedState(IConnectedPlayer player)
    // Offset: 0xF81030
    void SetPlayerToFailedState(GlobalNamespace::IConnectedPlayer* player);
    // private System.Void TrySpawnTexts()
    // Offset: 0xF81140
    void TrySpawnTexts();
    // private System.Void SpawnTexts()
    // Offset: 0xF81158
    void SpawnTexts();
    // private System.Void HandleStateChanged(MultiplayerController/State state)
    // Offset: 0xF803D4
    void HandleStateChanged(GlobalNamespace::MultiplayerController::State state);
    // private System.Void HandleSpawnCenterDistanceWasFound(System.Single spawnCenterDistance)
    // Offset: 0xF803A4
    void HandleSpawnCenterDistanceWasFound(float spawnCenterDistance);
    // private System.Void HandlePlayerSpawningDidFinish()
    // Offset: 0xF803BC
    void HandlePlayerSpawningDidFinish();
    // private System.Void HandlePlayerStateChanged(IConnectedPlayer player)
    // Offset: 0xF81788
    void HandlePlayerStateChanged(GlobalNamespace::IConnectedPlayer* player);
    // private System.Void HandlePlayerDisconnected(IConnectedPlayer player)
    // Offset: 0xF817CC
    void HandlePlayerDisconnected(GlobalNamespace::IConnectedPlayer* player);
    // public System.Void .ctor()
    // Offset: 0xF817D0
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static MultiplayerScoreRingManager* New_ctor();
  }; // MultiplayerScoreRingManager
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerScoreRingManager*, "", "MultiplayerScoreRingManager");
#pragma pack(pop)
