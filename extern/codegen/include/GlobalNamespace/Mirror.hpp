// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MirrorRendererSO
  class MirrorRendererSO;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: MeshRenderer
  class MeshRenderer;
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Mirror
  // [] Offset: FFFFFFFF
  // [ExecuteInEditMode] Offset: D22C6C
  // [RequireComponent] Offset: D22C6C
  class Mirror : public UnityEngine::MonoBehaviour {
    public:
    // private MirrorRendererSO _mirrorRenderer
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::MirrorRendererSO* mirrorRenderer;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MirrorRendererSO*) == 0x8);
    // private UnityEngine.MeshRenderer _renderer
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::MeshRenderer* renderer;
    // Field size check
    static_assert(sizeof(UnityEngine::MeshRenderer*) == 0x8);
    // private UnityEngine.Material _mirrorMaterial
    // Size: 0x8
    // Offset: 0x28
    UnityEngine::Material* mirrorMaterial;
    // Field size check
    static_assert(sizeof(UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material _noMirrorMaterial
    // Size: 0x8
    // Offset: 0x30
    UnityEngine::Material* noMirrorMaterial;
    // Field size check
    static_assert(sizeof(UnityEngine::Material*) == 0x8);
    // Creating value type constructor for type: Mirror
    Mirror(GlobalNamespace::MirrorRendererSO* mirrorRenderer_ = {}, UnityEngine::MeshRenderer* renderer_ = {}, UnityEngine::Material* mirrorMaterial_ = {}, UnityEngine::Material* noMirrorMaterial_ = {}) noexcept : mirrorRenderer{mirrorRenderer_}, renderer{renderer_}, mirrorMaterial{mirrorMaterial_}, noMirrorMaterial{noMirrorMaterial_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // [DoesNotRequireDomainReloadInitAttribute] Offset: 0xD23280
    // Get static field: static private readonly System.Int32 _texturePropertyID
    static int _get__texturePropertyID();
    // Set static field: static private readonly System.Int32 _texturePropertyID
    static void _set__texturePropertyID(int value);
    // protected System.Void Update()
    // Offset: 0x2250E38
    void Update();
    // protected System.Void OnWillRenderObject()
    // Offset: 0x2250F68
    void OnWillRenderObject();
    // public System.Void .ctor()
    // Offset: 0x2251A38
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Mirror* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::Mirror::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Mirror*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x2251A40
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // Mirror
  #pragma pack(pop)
  static check_size<sizeof(Mirror), 48 + sizeof(UnityEngine::Material*)> __GlobalNamespace_MirrorSizeCheck;
  static_assert(sizeof(Mirror) == 0x38);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::Mirror*, "", "Mirror");
