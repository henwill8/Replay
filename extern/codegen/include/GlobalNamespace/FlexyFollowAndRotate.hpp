// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: FlexyFollowAndRotate
  // [] Offset: FFFFFFFF
  class FlexyFollowAndRotate : public UnityEngine::MonoBehaviour {
    public:
    // private UnityEngine.Transform _target
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::Transform* target;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // private System.Single _smooth
    // Size: 0x4
    // Offset: 0x20
    float smooth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: FlexyFollowAndRotate
    FlexyFollowAndRotate(UnityEngine::Transform* target_ = {}, float smooth_ = {}) noexcept : target{target_}, smooth{smooth_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void Update()
    // Offset: 0x110A6D8
    void Update();
    // public System.Void .ctor()
    // Offset: 0x110A8B4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FlexyFollowAndRotate* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FlexyFollowAndRotate::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FlexyFollowAndRotate*, creationType>()));
    }
  }; // FlexyFollowAndRotate
  #pragma pack(pop)
  static check_size<sizeof(FlexyFollowAndRotate), 32 + sizeof(float)> __GlobalNamespace_FlexyFollowAndRotateSizeCheck;
  static_assert(sizeof(FlexyFollowAndRotate) == 0x24);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::FlexyFollowAndRotate*, "", "FlexyFollowAndRotate");
