// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BeatmapObjectExecutionRatingsRecorder
#include "GlobalNamespace/BeatmapObjectExecutionRatingsRecorder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: NoteExecutionRating
  class NoteExecutionRating;
  // Forward declaring type: NoteCutInfo
  class NoteCutInfo;
  // Forward declaring type: ISaberSwingRatingCounter
  class ISaberSwingRatingCounter;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapObjectExecutionRatingsRecorder/CutScoreHandler
  // [] Offset: FFFFFFFF
  class BeatmapObjectExecutionRatingsRecorder::CutScoreHandler : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::DidFinishCallback
    class DidFinishCallback;
    // private readonly BeatmapObjectExecutionRatingsRecorder/CutScoreHandler/DidFinishCallback _finishCallback
    // Size: 0x8
    // Offset: 0x10
    GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::DidFinishCallback* finishCallback;
    // Field size check
    static_assert(sizeof(GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::DidFinishCallback*) == 0x8);
    // private NoteExecutionRating _noteExecutionRating
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::NoteExecutionRating* noteExecutionRating;
    // Field size check
    static_assert(sizeof(GlobalNamespace::NoteExecutionRating*) == 0x8);
    // private NoteCutInfo _noteCutInfo
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::NoteCutInfo* noteCutInfo;
    // Field size check
    static_assert(sizeof(GlobalNamespace::NoteCutInfo*) == 0x8);
    // Creating value type constructor for type: CutScoreHandler
    CutScoreHandler(GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::DidFinishCallback* finishCallback_ = {}, GlobalNamespace::NoteExecutionRating* noteExecutionRating_ = {}, GlobalNamespace::NoteCutInfo* noteCutInfo_ = {}) noexcept : finishCallback{finishCallback_}, noteExecutionRating{noteExecutionRating_}, noteCutInfo{noteCutInfo_} {}
    // public System.Void .ctor(BeatmapObjectExecutionRatingsRecorder/CutScoreHandler/DidFinishCallback finishCallback)
    // Offset: 0xF582D8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapObjectExecutionRatingsRecorder::CutScoreHandler* New_ctor(GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::DidFinishCallback* finishCallback) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::CutScoreHandler::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapObjectExecutionRatingsRecorder::CutScoreHandler*, creationType>(finishCallback)));
    }
    // public System.Void Set(NoteCutInfo noteCutInfo, NoteExecutionRating noteExecutionRating, ISaberSwingRatingCounter swingRatingCounter)
    // Offset: 0xF58A3C
    void Set(GlobalNamespace::NoteCutInfo* noteCutInfo, GlobalNamespace::NoteExecutionRating* noteExecutionRating, GlobalNamespace::ISaberSwingRatingCounter* swingRatingCounter);
    // private System.Void HandleSwingRatingCounterDidFinish(ISaberSwingRatingCounter swingRatingCounter)
    // Offset: 0xF58E84
    void HandleSwingRatingCounterDidFinish(GlobalNamespace::ISaberSwingRatingCounter* swingRatingCounter);
  }; // BeatmapObjectExecutionRatingsRecorder/CutScoreHandler
  #pragma pack(pop)
  static check_size<sizeof(BeatmapObjectExecutionRatingsRecorder::CutScoreHandler), 32 + sizeof(GlobalNamespace::NoteCutInfo*)> __GlobalNamespace_BeatmapObjectExecutionRatingsRecorder_CutScoreHandlerSizeCheck;
  static_assert(sizeof(BeatmapObjectExecutionRatingsRecorder::CutScoreHandler) == 0x28);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BeatmapObjectExecutionRatingsRecorder::CutScoreHandler*, "", "BeatmapObjectExecutionRatingsRecorder/CutScoreHandler");
