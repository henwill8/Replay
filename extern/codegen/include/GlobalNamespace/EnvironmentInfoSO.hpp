// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: PersistentScriptableObject
#include "GlobalNamespace/PersistentScriptableObject.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ColorSchemeSO
  class ColorSchemeSO;
  // Forward declaring type: SceneInfo
  class SceneInfo;
  // Forward declaring type: EnvironmentTypeSO
  class EnvironmentTypeSO;
  // Forward declaring type: EnvironmentSizeData
  class EnvironmentSizeData;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: EnvironmentInfoSO
  // [] Offset: FFFFFFFF
  class EnvironmentInfoSO : public GlobalNamespace::PersistentScriptableObject {
    public:
    // private System.String _environmentName
    // Size: 0x8
    // Offset: 0x18
    ::Il2CppString* environmentName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private ColorSchemeSO _colorScheme
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::ColorSchemeSO* colorScheme;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ColorSchemeSO*) == 0x8);
    // private SceneInfo _sceneInfo
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::SceneInfo* sceneInfo;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SceneInfo*) == 0x8);
    // private System.String _serializedName
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppString* serializedName;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private EnvironmentTypeSO _environmentType
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::EnvironmentTypeSO* environmentType;
    // Field size check
    static_assert(sizeof(GlobalNamespace::EnvironmentTypeSO*) == 0x8);
    // private EnvironmentSizeData _environmentSizeData
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::EnvironmentSizeData* environmentSizeData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::EnvironmentSizeData*) == 0x8);
    // private System.Collections.Generic.List`1<System.String> _environmentKeywords
    // Size: 0x8
    // Offset: 0x48
    System::Collections::Generic::List_1<::Il2CppString*>* environmentKeywords;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<::Il2CppString*>*) == 0x8);
    // Creating value type constructor for type: EnvironmentInfoSO
    EnvironmentInfoSO(::Il2CppString* environmentName_ = {}, GlobalNamespace::ColorSchemeSO* colorScheme_ = {}, GlobalNamespace::SceneInfo* sceneInfo_ = {}, ::Il2CppString* serializedName_ = {}, GlobalNamespace::EnvironmentTypeSO* environmentType_ = {}, GlobalNamespace::EnvironmentSizeData* environmentSizeData_ = {}, System::Collections::Generic::List_1<::Il2CppString*>* environmentKeywords_ = {}) noexcept : environmentName{environmentName_}, colorScheme{colorScheme_}, sceneInfo{sceneInfo_}, serializedName{serializedName_}, environmentType{environmentType_}, environmentSizeData{environmentSizeData_}, environmentKeywords{environmentKeywords_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public SceneInfo get_sceneInfo()
    // Offset: 0xF270C4
    GlobalNamespace::SceneInfo* get_sceneInfo();
    // public System.String get_environmentName()
    // Offset: 0xF270CC
    ::Il2CppString* get_environmentName();
    // public ColorSchemeSO get_colorScheme()
    // Offset: 0xF270D4
    GlobalNamespace::ColorSchemeSO* get_colorScheme();
    // public System.String get_serializedName()
    // Offset: 0xF270DC
    ::Il2CppString* get_serializedName();
    // public EnvironmentTypeSO get_environmentType()
    // Offset: 0xF270E4
    GlobalNamespace::EnvironmentTypeSO* get_environmentType();
    // public EnvironmentSizeData get_environmentSizeData()
    // Offset: 0xF270EC
    GlobalNamespace::EnvironmentSizeData* get_environmentSizeData();
    // public System.Collections.Generic.IReadOnlyList`1<System.String> get_environmentKeywords()
    // Offset: 0xF270F4
    System::Collections::Generic::IReadOnlyList_1<::Il2CppString*>* get_environmentKeywords();
    // public System.Void .ctor()
    // Offset: 0xF270FC
    // Implemented from: PersistentScriptableObject
    // Base method: System.Void PersistentScriptableObject::.ctor()
    // Base method: System.Void ScriptableObject::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EnvironmentInfoSO* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentInfoSO::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EnvironmentInfoSO*, creationType>()));
    }
  }; // EnvironmentInfoSO
  #pragma pack(pop)
  static check_size<sizeof(EnvironmentInfoSO), 72 + sizeof(System::Collections::Generic::List_1<::Il2CppString*>*)> __GlobalNamespace_EnvironmentInfoSOSizeCheck;
  static_assert(sizeof(EnvironmentInfoSO) == 0x50);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::EnvironmentInfoSO*, "", "EnvironmentInfoSO");
