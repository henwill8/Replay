// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: BeatmapObjectCallbackController
#include "GlobalNamespace/BeatmapObjectCallbackController.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapEventData
  class BeatmapEventData;
  // Forward declaring type: SpawnRotationProcessor
  class SpawnRotationProcessor;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: EnvironmentSpawnRotation
  class EnvironmentSpawnRotation : public UnityEngine::MonoBehaviour {
    public:
    // private System.Single _aheadTime
    // Offset: 0x18
    float aheadTime;
    // private System.Single _smooth
    // Offset: 0x1C
    float smooth;
    // private BeatmapObjectCallbackController _beatmapObjectCallbackController
    // Offset: 0x20
    GlobalNamespace::BeatmapObjectCallbackController* beatmapObjectCallbackController;
    // private System.Action`1<UnityEngine.Quaternion> didRotateEvent
    // Offset: 0x28
    System::Action_1<UnityEngine::Quaternion>* didRotateEvent;
    // private SpawnRotationProcessor _spawnRotationProcessor
    // Offset: 0x30
    GlobalNamespace::SpawnRotationProcessor* spawnRotationProcessor;
    // private BeatmapObjectCallbackController/BeatmapEventCallbackData _eventCallbackData
    // Offset: 0x38
    GlobalNamespace::BeatmapObjectCallbackController::BeatmapEventCallbackData* eventCallbackData;
    // private System.Single _currentRotation
    // Offset: 0x40
    float currentRotation;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get static field: static private readonly System.Int32 _spawnRotationID
    static int _get__spawnRotationID();
    // Set static field: static private readonly System.Int32 _spawnRotationID
    static void _set__spawnRotationID(int value);
    // public System.Void add_didRotateEvent(System.Action`1<UnityEngine.Quaternion> value)
    // Offset: 0xBEB1B0
    void add_didRotateEvent(System::Action_1<UnityEngine::Quaternion>* value);
    // public System.Void remove_didRotateEvent(System.Action`1<UnityEngine.Quaternion> value)
    // Offset: 0xBEB254
    void remove_didRotateEvent(System::Action_1<UnityEngine::Quaternion>* value);
    // public System.Single get_targetRotation()
    // Offset: 0xBEB2F8
    float get_targetRotation();
    // public System.Single get_currentRotation()
    // Offset: 0xBEB314
    float get_currentRotation();
    // protected System.Void Awake()
    // Offset: 0xBEB31C
    void Awake();
    // protected System.Void Start()
    // Offset: 0xBEB33C
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0xBEB480
    void OnDestroy();
    // private System.Void BeatmapEventAtNoteSpawnCallback(BeatmapEventData beatmapEventData)
    // Offset: 0xBEB4A4
    void BeatmapEventAtNoteSpawnCallback(GlobalNamespace::BeatmapEventData* beatmapEventData);
    // protected System.Void Update()
    // Offset: 0xBEB59C
    void Update();
    // public System.Void .ctor()
    // Offset: 0xBEB780
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static EnvironmentSpawnRotation* New_ctor();
    // static private System.Void .cctor()
    // Offset: 0xBEB7F4
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // EnvironmentSpawnRotation
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::EnvironmentSpawnRotation*, "", "EnvironmentSpawnRotation");
#pragma pack(pop)
