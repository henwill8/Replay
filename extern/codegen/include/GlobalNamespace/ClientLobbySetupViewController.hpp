// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Button
  class Button;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: EditableBeatmapSelectionView
  class EditableBeatmapSelectionView;
  // Forward declaring type: EditableModifiersSelectionView
  class EditableModifiersSelectionView;
  // Forward declaring type: ILobbyPlayerDataModel
  class ILobbyPlayerDataModel;
  // Forward declaring type: MultiplayerLobbyState
  struct MultiplayerLobbyState;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: ToggleBinder
  class ToggleBinder;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xC8
  #pragma pack(push, 1)
  // Autogenerated type: ClientLobbySetupViewController
  // [] Offset: FFFFFFFF
  class ClientLobbySetupViewController : public HMUI::ViewController {
    public:
    // private UnityEngine.UI.Button _readyButton
    // Size: 0x8
    // Offset: 0x70
    UnityEngine::UI::Button* readyButton;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Button*) == 0x8);
    // private UnityEngine.UI.Button _unreadyButton
    // Size: 0x8
    // Offset: 0x78
    UnityEngine::UI::Button* unreadyButton;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Button*) == 0x8);
    // [SpaceAttribute] Offset: 0xD42ACC
    // private EditableBeatmapSelectionView _editableBeatmapSelectionView
    // Size: 0x8
    // Offset: 0x80
    GlobalNamespace::EditableBeatmapSelectionView* editableBeatmapSelectionView;
    // Field size check
    static_assert(sizeof(GlobalNamespace::EditableBeatmapSelectionView*) == 0x8);
    // private EditableModifiersSelectionView _editableModifiersSelectionView
    // Size: 0x8
    // Offset: 0x88
    GlobalNamespace::EditableModifiersSelectionView* editableModifiersSelectionView;
    // Field size check
    static_assert(sizeof(GlobalNamespace::EditableModifiersSelectionView*) == 0x8);
    // private UnityEngine.GameObject _spectatorWarningTextWrapper
    // Size: 0x8
    // Offset: 0x90
    UnityEngine::GameObject* spectatorWarningTextWrapper;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD42B24
    // private System.Action suggestBeatmapEvent
    // Size: 0x8
    // Offset: 0x98
    System::Action* suggestBeatmapEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD42B34
    // private System.Action clearSuggestedBeatmapEvent
    // Size: 0x8
    // Offset: 0xA0
    System::Action* clearSuggestedBeatmapEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD42B44
    // private System.Action suggestModifiersEvent
    // Size: 0x8
    // Offset: 0xA8
    System::Action* suggestModifiersEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD42B54
    // private System.Action clearSuggestedModifiersEvent
    // Size: 0x8
    // Offset: 0xB0
    System::Action* clearSuggestedModifiersEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD42B64
    // private System.Action`1<System.Boolean> setPlayerReadyEvent
    // Size: 0x8
    // Offset: 0xB8
    System::Action_1<bool>* setPlayerReadyEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<bool>*) == 0x8);
    // private readonly HMUI.ToggleBinder _toggleBinder
    // Size: 0x8
    // Offset: 0xC0
    HMUI::ToggleBinder* toggleBinder;
    // Field size check
    static_assert(sizeof(HMUI::ToggleBinder*) == 0x8);
    // Creating value type constructor for type: ClientLobbySetupViewController
    ClientLobbySetupViewController(UnityEngine::UI::Button* readyButton_ = {}, UnityEngine::UI::Button* unreadyButton_ = {}, GlobalNamespace::EditableBeatmapSelectionView* editableBeatmapSelectionView_ = {}, GlobalNamespace::EditableModifiersSelectionView* editableModifiersSelectionView_ = {}, UnityEngine::GameObject* spectatorWarningTextWrapper_ = {}, System::Action* suggestBeatmapEvent_ = {}, System::Action* clearSuggestedBeatmapEvent_ = {}, System::Action* suggestModifiersEvent_ = {}, System::Action* clearSuggestedModifiersEvent_ = {}, System::Action_1<bool>* setPlayerReadyEvent_ = {}, HMUI::ToggleBinder* toggleBinder_ = {}) noexcept : readyButton{readyButton_}, unreadyButton{unreadyButton_}, editableBeatmapSelectionView{editableBeatmapSelectionView_}, editableModifiersSelectionView{editableModifiersSelectionView_}, spectatorWarningTextWrapper{spectatorWarningTextWrapper_}, suggestBeatmapEvent{suggestBeatmapEvent_}, clearSuggestedBeatmapEvent{clearSuggestedBeatmapEvent_}, suggestModifiersEvent{suggestModifiersEvent_}, clearSuggestedModifiersEvent{clearSuggestedModifiersEvent_}, setPlayerReadyEvent{setPlayerReadyEvent_}, toggleBinder{toggleBinder_} {}
    // public System.Void add_suggestBeatmapEvent(System.Action value)
    // Offset: 0x103DA80
    void add_suggestBeatmapEvent(System::Action* value);
    // public System.Void remove_suggestBeatmapEvent(System.Action value)
    // Offset: 0x103DB24
    void remove_suggestBeatmapEvent(System::Action* value);
    // public System.Void add_clearSuggestedBeatmapEvent(System.Action value)
    // Offset: 0x103DBC8
    void add_clearSuggestedBeatmapEvent(System::Action* value);
    // public System.Void remove_clearSuggestedBeatmapEvent(System.Action value)
    // Offset: 0x103DC6C
    void remove_clearSuggestedBeatmapEvent(System::Action* value);
    // public System.Void add_suggestModifiersEvent(System.Action value)
    // Offset: 0x103DD10
    void add_suggestModifiersEvent(System::Action* value);
    // public System.Void remove_suggestModifiersEvent(System.Action value)
    // Offset: 0x103DDB4
    void remove_suggestModifiersEvent(System::Action* value);
    // public System.Void add_clearSuggestedModifiersEvent(System.Action value)
    // Offset: 0x103DE58
    void add_clearSuggestedModifiersEvent(System::Action* value);
    // public System.Void remove_clearSuggestedModifiersEvent(System.Action value)
    // Offset: 0x103DEFC
    void remove_clearSuggestedModifiersEvent(System::Action* value);
    // public System.Void add_setPlayerReadyEvent(System.Action`1<System.Boolean> value)
    // Offset: 0x103DFA0
    void add_setPlayerReadyEvent(System::Action_1<bool>* value);
    // public System.Void remove_setPlayerReadyEvent(System.Action`1<System.Boolean> value)
    // Offset: 0x103E044
    void remove_setPlayerReadyEvent(System::Action_1<bool>* value);
    // public System.Void SetLocalLobbyPlayerData(ILobbyPlayerDataModel lobbyPlayerData)
    // Offset: 0x103E0E8
    void SetLocalLobbyPlayerData(GlobalNamespace::ILobbyPlayerDataModel* lobbyPlayerData);
    // public System.Void SetLobbyState(MultiplayerLobbyState lobbyState)
    // Offset: 0x103E5B0
    void SetLobbyState(GlobalNamespace::MultiplayerLobbyState lobbyState);
    // public System.Void SetPlayerActiveState(System.Boolean isActive)
    // Offset: 0x103E58C
    void SetPlayerActiveState(bool isActive);
    // private System.Void <DidActivate>b__24_0()
    // Offset: 0x103E9A8
    void $DidActivate$b__24_0();
    // private System.Void <DidActivate>b__24_1()
    // Offset: 0x103E9BC
    void $DidActivate$b__24_1();
    // private System.Void <DidActivate>b__24_2()
    // Offset: 0x103E9D0
    void $DidActivate$b__24_2();
    // private System.Void <DidActivate>b__24_3()
    // Offset: 0x103E9E4
    void $DidActivate$b__24_3();
    // private System.Void <DidActivate>b__24_4()
    // Offset: 0x103E9F8
    void $DidActivate$b__24_4();
    // private System.Void <DidActivate>b__24_5()
    // Offset: 0x103EA5C
    void $DidActivate$b__24_5();
    // protected override System.Void DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0x103E6E8
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
    // public System.Void .ctor()
    // Offset: 0x103E934
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ClientLobbySetupViewController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::ClientLobbySetupViewController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ClientLobbySetupViewController*, creationType>()));
    }
  }; // ClientLobbySetupViewController
  #pragma pack(pop)
  static check_size<sizeof(ClientLobbySetupViewController), 192 + sizeof(HMUI::ToggleBinder*)> __GlobalNamespace_ClientLobbySetupViewControllerSizeCheck;
  static_assert(sizeof(ClientLobbySetupViewController) == 0xC8);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::ClientLobbySetupViewController*, "", "ClientLobbySetupViewController");
