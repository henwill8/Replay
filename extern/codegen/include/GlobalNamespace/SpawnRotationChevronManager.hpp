// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: SpawnRotationChevron
#include "GlobalNamespace/SpawnRotationChevron.hpp"
// Including type: BeatmapObjectCallbackController
#include "GlobalNamespace/BeatmapObjectCallbackController.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IAudioTimeSource
  class IAudioTimeSource;
  // Forward declaring type: BeatmapObjectSpawnController
  class BeatmapObjectSpawnController;
  // Forward declaring type: SpawnRotationProcessor
  class SpawnRotationProcessor;
  // Forward declaring type: BeatmapObjectData
  class BeatmapObjectData;
  // Forward declaring type: BeatmapEventData
  class BeatmapEventData;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AnimationCurve
  class AnimationCurve;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: SpawnRotationChevronManager
  class SpawnRotationChevronManager : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::SpawnRotationChevronManager::DirectionData
    class DirectionData;
    // private System.Single _fadeInTime
    // Offset: 0x18
    float fadeInTime;
    // private System.Single _fadeOutTime
    // Offset: 0x1C
    float fadeOutTime;
    // private System.Single _jumpStartOffsetTime
    // Offset: 0x20
    float jumpStartOffsetTime;
    // private System.Single _cutOffsetTime
    // Offset: 0x24
    float cutOffsetTime;
    // private UnityEngine.AnimationCurve _fadeInLightAmountCurve
    // Offset: 0x28
    UnityEngine::AnimationCurve* fadeInLightAmountCurve;
    // private UnityEngine.AnimationCurve _fadeOutLightAmountCurve
    // Offset: 0x30
    UnityEngine::AnimationCurve* fadeOutLightAmountCurve;
    // private readonly SpawnRotationChevron/Pool _chevronPool
    // Offset: 0x38
    GlobalNamespace::SpawnRotationChevron::Pool* chevronPool;
    // private readonly IAudioTimeSource _audioTimeSyncController
    // Offset: 0x40
    GlobalNamespace::IAudioTimeSource* audioTimeSyncController;
    // private readonly BeatmapObjectSpawnController _beatmapObjectSpawnController
    // Offset: 0x48
    GlobalNamespace::BeatmapObjectSpawnController* beatmapObjectSpawnController;
    // private readonly BeatmapObjectCallbackController _beatmapObjectCallbackController
    // Offset: 0x50
    GlobalNamespace::BeatmapObjectCallbackController* beatmapObjectCallbackController;
    // private readonly SpawnRotationProcessor _spawnRotationProcessor
    // Offset: 0x58
    GlobalNamespace::SpawnRotationProcessor* spawnRotationProcessor;
    // private BeatmapObjectCallbackController/BeatmapObjectCallbackData _beatmapObjectCallbackData
    // Offset: 0x60
    GlobalNamespace::BeatmapObjectCallbackController::BeatmapObjectCallbackData* beatmapObjectCallbackData;
    // private BeatmapObjectCallbackController/BeatmapEventCallbackData _beatmapEventCallbackData
    // Offset: 0x68
    GlobalNamespace::BeatmapObjectCallbackController::BeatmapEventCallbackData* beatmapEventCallbackData;
    // private System.Collections.Generic.Dictionary`2<System.Int32,SpawnRotationChevronManager/DirectionData> _directionToDataDictionary
    // Offset: 0x70
    System::Collections::Generic::Dictionary_2<int, GlobalNamespace::SpawnRotationChevronManager::DirectionData*>* directionToDataDictionary;
    // private System.Collections.Generic.HashSet`1<System.Int32> _activeDirections
    // Offset: 0x78
    System::Collections::Generic::HashSet_1<int>* activeDirections;
    // private System.Collections.Generic.List`1<System.Int32> _reusableDirectionsList
    // Offset: 0x80
    System::Collections::Generic::List_1<int>* reusableDirectionsList;
    // private System.Single _moveDuration
    // Offset: 0x88
    float moveDuration;
    // private System.Single _halfJumpDuration
    // Offset: 0x8C
    float halfJumpDuration;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void Start()
    // Offset: 0xF3C42C
    void Start();
    // protected System.Void Update()
    // Offset: 0xF3C6C4
    void Update();
    // protected System.Void OnDestroy()
    // Offset: 0xF3D0B8
    void OnDestroy();
    // private System.Void HandleBeatmapObjectCallback(BeatmapObjectData beatmapObjectData)
    // Offset: 0xF3D1E4
    void HandleBeatmapObjectCallback(GlobalNamespace::BeatmapObjectData* beatmapObjectData);
    // private System.Void HandleBeatmapEventCallback(BeatmapEventData beatmapEventData)
    // Offset: 0xF3D5AC
    void HandleBeatmapEventCallback(GlobalNamespace::BeatmapEventData* beatmapEventData);
    // private System.Void HandleBeatmapObjectSpawnControllerDidInit()
    // Offset: 0xF3C574
    void HandleBeatmapObjectSpawnControllerDidInit();
    // public System.Void .ctor()
    // Offset: 0xF3D628
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static SpawnRotationChevronManager* New_ctor();
  }; // SpawnRotationChevronManager
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SpawnRotationChevronManager*, "", "SpawnRotationChevronManager");
#pragma pack(pop)
