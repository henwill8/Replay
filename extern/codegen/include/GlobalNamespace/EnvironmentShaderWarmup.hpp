// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MainCamera
  class MainCamera;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: EnvironmentShaderWarmup
  // [] Offset: FFFFFFFF
  class EnvironmentShaderWarmup : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::EnvironmentShaderWarmup::$HideAfterFrames$d__6
    class $HideAfterFrames$d__6;
    // private UnityEngine.Material[] _materials
    // Size: 0x8
    // Offset: 0x18
    ::Array<UnityEngine::Material*>* materials;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Material*>*) == 0x8);
    // [InjectAttribute] Offset: 0xD32974
    // private readonly MainCamera _mainCamera
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::MainCamera* mainCamera;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MainCamera*) == 0x8);
    // private UnityEngine.Transform _parentingTransform
    // Size: 0x8
    // Offset: 0x28
    UnityEngine::Transform* parentingTransform;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // Creating value type constructor for type: EnvironmentShaderWarmup
    EnvironmentShaderWarmup(::Array<UnityEngine::Material*>* materials_ = {}, GlobalNamespace::MainCamera* mainCamera_ = {}, UnityEngine::Transform* parentingTransform_ = {}) noexcept : materials{materials_}, mainCamera{mainCamera_}, parentingTransform{parentingTransform_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Int32 kNumberOfColumns
    static constexpr const int kNumberOfColumns = 4;
    // Get static field: static private System.Int32 kNumberOfColumns
    static int _get_kNumberOfColumns();
    // Set static field: static private System.Int32 kNumberOfColumns
    static void _set_kNumberOfColumns(int value);
    // static field const value: static private System.Int32 kNumberOfRows
    static constexpr const int kNumberOfRows = 4;
    // Get static field: static private System.Int32 kNumberOfRows
    static int _get_kNumberOfRows();
    // Set static field: static private System.Int32 kNumberOfRows
    static void _set_kNumberOfRows(int value);
    // protected System.Void Start()
    // Offset: 0xF27D50
    void Start();
    // private System.Collections.IEnumerator HideAfterFrames(System.Int32 numberOfFrames)
    // Offset: 0xF280F0
    System::Collections::IEnumerator* HideAfterFrames(int numberOfFrames);
    // public System.Void .ctor()
    // Offset: 0xF281A8
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static EnvironmentShaderWarmup* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::EnvironmentShaderWarmup::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<EnvironmentShaderWarmup*, creationType>()));
    }
  }; // EnvironmentShaderWarmup
  #pragma pack(pop)
  static check_size<sizeof(EnvironmentShaderWarmup), 40 + sizeof(UnityEngine::Transform*)> __GlobalNamespace_EnvironmentShaderWarmupSizeCheck;
  static_assert(sizeof(EnvironmentShaderWarmup) == 0x30);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::EnvironmentShaderWarmup*, "", "EnvironmentShaderWarmup");
