// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MissionNode
  class MissionNode;
  // Forward declaring type: MissionStagesManager
  class MissionStagesManager;
  // Forward declaring type: CampaignProgressModel
  class CampaignProgressModel;
  // Forward declaring type: MissionNodeConnection
  class MissionNodeConnection;
  // Forward declaring type: MissionNodeVisualController
  class MissionNodeVisualController;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x59
  #pragma pack(push, 1)
  // Autogenerated type: MissionNodesManager
  // [] Offset: FFFFFFFF
  class MissionNodesManager : public UnityEngine::MonoBehaviour {
    public:
    // private MissionNode _rootMissionNode
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::MissionNode* rootMissionNode;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MissionNode*) == 0x8);
    // private MissionNode _finalMissionNode
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::MissionNode* finalMissionNode;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MissionNode*) == 0x8);
    // private MissionStagesManager _missionStagesManager
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::MissionStagesManager* missionStagesManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MissionStagesManager*) == 0x8);
    // private UnityEngine.GameObject _connectionsParentObject
    // Size: 0x8
    // Offset: 0x30
    UnityEngine::GameObject* connectionsParentObject;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // private UnityEngine.GameObject _missionNodesParentObject
    // Size: 0x8
    // Offset: 0x38
    UnityEngine::GameObject* missionNodesParentObject;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // [InjectAttribute] Offset: 0xD40AA8
    // private CampaignProgressModel _missionProgressModel
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::CampaignProgressModel* missionProgressModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::CampaignProgressModel*) == 0x8);
    // private MissionNodeConnection[] _allMissionNodeConnections
    // Size: 0x8
    // Offset: 0x48
    ::Array<GlobalNamespace::MissionNodeConnection*>* allMissionNodeConnections;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::MissionNodeConnection*>*) == 0x8);
    // private MissionNode[] _allMissionNodes
    // Size: 0x8
    // Offset: 0x50
    ::Array<GlobalNamespace::MissionNode*>* allMissionNodes;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::MissionNode*>*) == 0x8);
    // private System.Boolean _isInitialized
    // Size: 0x1
    // Offset: 0x58
    bool isInitialized;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: MissionNodesManager
    MissionNodesManager(GlobalNamespace::MissionNode* rootMissionNode_ = {}, GlobalNamespace::MissionNode* finalMissionNode_ = {}, GlobalNamespace::MissionStagesManager* missionStagesManager_ = {}, UnityEngine::GameObject* connectionsParentObject_ = {}, UnityEngine::GameObject* missionNodesParentObject_ = {}, GlobalNamespace::CampaignProgressModel* missionProgressModel_ = {}, ::Array<GlobalNamespace::MissionNodeConnection*>* allMissionNodeConnections_ = {}, ::Array<GlobalNamespace::MissionNode*>* allMissionNodes_ = {}, bool isInitialized_ = {}) noexcept : rootMissionNode{rootMissionNode_}, finalMissionNode{finalMissionNode_}, missionStagesManager{missionStagesManager_}, connectionsParentObject{connectionsParentObject_}, missionNodesParentObject{missionNodesParentObject_}, missionProgressModel{missionProgressModel_}, allMissionNodeConnections{allMissionNodeConnections_}, allMissionNodes{allMissionNodes_}, isInitialized{isInitialized_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public MissionNode get_rootMissionNode()
    // Offset: 0x109B2D0
    GlobalNamespace::MissionNode* get_rootMissionNode();
    // public MissionNode get_finalMissionNode()
    // Offset: 0x109B2D8
    GlobalNamespace::MissionNode* get_finalMissionNode();
    // public MissionStagesManager get_missionStagesManager()
    // Offset: 0x109B2E0
    GlobalNamespace::MissionStagesManager* get_missionStagesManager();
    // public CampaignProgressModel get_missionProgressModel()
    // Offset: 0x109B2E8
    GlobalNamespace::CampaignProgressModel* get_missionProgressModel();
    // public MissionNode[] get_allMissionNodes()
    // Offset: 0x109B2F0
    ::Array<GlobalNamespace::MissionNode*>* get_allMissionNodes();
    // public System.Boolean get_IsInitialized()
    // Offset: 0x109B2F8
    bool get_IsInitialized();
    // protected System.Void Awake()
    // Offset: 0x109B300
    void Awake();
    // public System.Void SetupNodeMap()
    // Offset: 0x1098990
    void SetupNodeMap();
    // public System.Boolean MissionWasCleared(MissionNode missionNode)
    // Offset: 0x109B78C
    bool MissionWasCleared(GlobalNamespace::MissionNode* missionNode);
    // public MissionNode GetMissionNodeWithModelClearedStateInconsistency()
    // Offset: 0x1098598
    GlobalNamespace::MissionNode* GetMissionNodeWithModelClearedStateInconsistency();
    // public System.Boolean DidFirstLockedMissionStageChange()
    // Offset: 0x1099958
    bool DidFirstLockedMissionStageChange();
    // public System.Void UpdateStageLockText()
    // Offset: 0x1099918
    void UpdateStageLockText();
    // public MissionNode GetTopMostNotClearedMissionNode()
    // Offset: 0x1098738
    GlobalNamespace::MissionNode* GetTopMostNotClearedMissionNode();
    // private System.Void GetAllMissionNodes()
    // Offset: 0x109B338
    void GetAllMissionNodes();
    // private System.Collections.Generic.HashSet`1<MissionNode> GetAllMissionNodes(MissionNode node, System.Collections.Generic.HashSet`1<MissionNode> visited)
    // Offset: 0x109B974
    System::Collections::Generic::HashSet_1<GlobalNamespace::MissionNode*>* GetAllMissionNodes(GlobalNamespace::MissionNode* node, System::Collections::Generic::HashSet_1<GlobalNamespace::MissionNode*>* visited);
    // public MissionNodeConnection[] GetNewEnabledConnection()
    // Offset: 0x10995E0
    ::Array<GlobalNamespace::MissionNodeConnection*>* GetNewEnabledConnection();
    // private System.Void ResetAllNodes()
    // Offset: 0x109B4B0
    void ResetAllNodes();
    // private System.Void SetupStages()
    // Offset: 0x109B518
    void SetupStages();
    // private System.Void RegisterAllNodes()
    // Offset: 0x109B3D4
    void RegisterAllNodes();
    // private System.Void SetupNodeTree(MissionNodeVisualController node, System.Boolean parentCleared)
    // Offset: 0x109B580
    void SetupNodeTree(GlobalNamespace::MissionNodeVisualController* node, bool parentCleared);
    // private System.Boolean IsNodeInteractable(MissionNodeVisualController node, System.Boolean parentCleared)
    // Offset: 0x109BA64
    bool IsNodeInteractable(GlobalNamespace::MissionNodeVisualController* node, bool parentCleared);
    // private System.Void SetupNodeConnections()
    // Offset: 0x109B6B0
    void SetupNodeConnections();
    // public System.Void .ctor()
    // Offset: 0x109BB74
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MissionNodesManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MissionNodesManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MissionNodesManager*, creationType>()));
    }
  }; // MissionNodesManager
  #pragma pack(pop)
  static check_size<sizeof(MissionNodesManager), 88 + sizeof(bool)> __GlobalNamespace_MissionNodesManagerSizeCheck;
  static_assert(sizeof(MissionNodesManager) == 0x59);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MissionNodesManager*, "", "MissionNodesManager");
