// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.FlowCoordinator
#include "HMUI/FlowCoordinator.hpp"
// Including type: LevelSelectionFlowCoordinator
#include "GlobalNamespace/LevelSelectionFlowCoordinator.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: ScreenModeSO
  class ScreenModeSO;
  // Forward declaring type: ScreenModeController
  class ScreenModeController;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ServerPlayerListController
  class ServerPlayerListController;
  // Forward declaring type: SelectModifiersViewController
  class SelectModifiersViewController;
  // Forward declaring type: MultiplayerLevelSelectionFlowCoordinator
  class MultiplayerLevelSelectionFlowCoordinator;
  // Forward declaring type: MultiplayerResultsViewController
  class MultiplayerResultsViewController;
  // Forward declaring type: SimpleDialogPromptViewController
  class SimpleDialogPromptViewController;
  // Forward declaring type: ConnectionErrorDialogViewController
  class ConnectionErrorDialogViewController;
  // Forward declaring type: GameplaySetupViewController
  class GameplaySetupViewController;
  // Forward declaring type: IMenuRpcManager
  class IMenuRpcManager;
  // Forward declaring type: MultiplayerLobbyController
  class MultiplayerLobbyController;
  // Forward declaring type: MultiplayerLobbyCenterStageManager
  class MultiplayerLobbyCenterStageManager;
  // Forward declaring type: FadeInOutController
  class FadeInOutController;
  // Forward declaring type: CenterStageScreenController
  class CenterStageScreenController;
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: ILobbyStateDataModel
  class ILobbyStateDataModel;
  // Forward declaring type: ILobbyPlayersDataModel
  class ILobbyPlayersDataModel;
  // Forward declaring type: ILobbyGameStateController
  class ILobbyGameStateController;
  // Forward declaring type: PlayerDataModel
  class PlayerDataModel;
  // Forward declaring type: PlatformLeaderboardsModel
  class PlatformLeaderboardsModel;
  // Forward declaring type: MultiplayerLevelScenesTransitionSetupDataSO
  class MultiplayerLevelScenesTransitionSetupDataSO;
  // Forward declaring type: LevelCompletionResults
  class LevelCompletionResults;
  // Forward declaring type: DisconnectedReason
  struct DisconnectedReason;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: GameServerLobbyFlowCoordinator
  class GameServerLobbyFlowCoordinator : public HMUI::FlowCoordinator {
    public:
    // private HMUI.ScreenModeSO _screenMode
    // Offset: 0xA8
    HMUI::ScreenModeSO* screenMode;
    // protected readonly ServerPlayerListController serverPlayerListController
    // Offset: 0xB0
    GlobalNamespace::ServerPlayerListController* serverPlayerListController;
    // protected readonly SelectModifiersViewController selectModifiersViewController
    // Offset: 0xB8
    GlobalNamespace::SelectModifiersViewController* selectModifiersViewController;
    // protected readonly MultiplayerLevelSelectionFlowCoordinator multiplayerLevelSelectionFlowCoordinator
    // Offset: 0xC0
    GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator* multiplayerLevelSelectionFlowCoordinator;
    // protected readonly MultiplayerResultsViewController multiplayerResultsViewController
    // Offset: 0xC8
    GlobalNamespace::MultiplayerResultsViewController* multiplayerResultsViewController;
    // protected readonly SimpleDialogPromptViewController simpleDialogPromptViewController
    // Offset: 0xD0
    GlobalNamespace::SimpleDialogPromptViewController* simpleDialogPromptViewController;
    // protected readonly ConnectionErrorDialogViewController connectionErrorDialogViewController
    // Offset: 0xD8
    GlobalNamespace::ConnectionErrorDialogViewController* connectionErrorDialogViewController;
    // private readonly GameplaySetupViewController _gameplaySetupViewController
    // Offset: 0xE0
    GlobalNamespace::GameplaySetupViewController* gameplaySetupViewController;
    // protected readonly IMenuRpcManager menuRpcManager
    // Offset: 0xE8
    GlobalNamespace::IMenuRpcManager* menuRpcManager;
    // protected readonly MultiplayerLobbyController multiplayerLobbyController
    // Offset: 0xF0
    GlobalNamespace::MultiplayerLobbyController* multiplayerLobbyController;
    // protected readonly MultiplayerLobbyCenterStageManager multiplayerLobbyCenterStageManager
    // Offset: 0xF8
    GlobalNamespace::MultiplayerLobbyCenterStageManager* multiplayerLobbyCenterStageManager;
    // protected readonly FadeInOutController fadeInOutController
    // Offset: 0x100
    GlobalNamespace::FadeInOutController* fadeInOutController;
    // protected readonly CenterStageScreenController centerStageScreenController
    // Offset: 0x108
    GlobalNamespace::CenterStageScreenController* centerStageScreenController;
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Offset: 0x110
    GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // protected readonly ILobbyStateDataModel lobbyStateDataModel
    // Offset: 0x118
    GlobalNamespace::ILobbyStateDataModel* lobbyStateDataModel;
    // protected readonly ILobbyPlayersDataModel lobbyPlayersDataModel
    // Offset: 0x120
    GlobalNamespace::ILobbyPlayersDataModel* lobbyPlayersDataModel;
    // protected readonly ILobbyGameStateController lobbyGameStateController
    // Offset: 0x128
    GlobalNamespace::ILobbyGameStateController* lobbyGameStateController;
    // private readonly HMUI.ScreenModeController _screenModeController
    // Offset: 0x130
    HMUI::ScreenModeController* screenModeController;
    // private readonly PlayerDataModel _playerDataModel
    // Offset: 0x138
    GlobalNamespace::PlayerDataModel* playerDataModel;
    // private readonly PlatformLeaderboardsModel _platformLeaderboardsModel
    // Offset: 0x140
    GlobalNamespace::PlatformLeaderboardsModel* platformLeaderboardsModel;
    // protected LevelSelectionFlowCoordinator/State lastSimpleLevelSelectionFlowCoordinatorState
    // Offset: 0x148
    GlobalNamespace::LevelSelectionFlowCoordinator::State* lastSimpleLevelSelectionFlowCoordinatorState;
    // protected System.Boolean isAlreadyFinishing
    // Offset: 0x150
    bool isAlreadyFinishing;
    // protected System.Void Finish(System.Action finishedCallback, System.Boolean withFadeOut)
    // Offset: 0xFFFFFFFF
    void Finish(System::Action* finishedCallback, bool withFadeOut);
    // protected System.Void PresentBackButtonConfirmationDialog()
    // Offset: 0x1A1B86C
    void PresentBackButtonConfirmationDialog();
    // protected System.Void HandleLobbySetupViewControllerSelectBeatmap()
    // Offset: 0x1A1BA70
    void HandleLobbySetupViewControllerSelectBeatmap();
    // private System.Void HandleLobbyGameStateControllerLobbyDisconnected()
    // Offset: 0x1A1BA8C
    void HandleLobbyGameStateControllerLobbyDisconnected();
    // protected System.Void HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel(LevelSelectionFlowCoordinator/State state)
    // Offset: 0x1A1BB4C
    void HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel(GlobalNamespace::LevelSelectionFlowCoordinator::State* state);
    // protected System.Void HandleMultiplayerLevelSelectionFlowCoordinatorCancelSelectLevel()
    // Offset: 0x1A1BE98
    void HandleMultiplayerLevelSelectionFlowCoordinatorCancelSelectLevel();
    // protected System.Void HandleLobbySetupViewControllerSelectModifiers()
    // Offset: 0x1A1BEDC
    void HandleLobbySetupViewControllerSelectModifiers();
    // protected System.Void HandleLobbyGameStateControllerLevelFinished(MultiplayerLevelScenesTransitionSetupDataSO multiplayerLevelScenesTransitionSetupData, LevelCompletionResults myCompletionResults, System.Collections.Generic.Dictionary`2<System.String,LevelCompletionResults> othersCompletionResults)
    // Offset: 0x1A1C038
    void HandleLobbyGameStateControllerLevelFinished(GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO* multiplayerLevelScenesTransitionSetupData, GlobalNamespace::LevelCompletionResults* myCompletionResults, System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::LevelCompletionResults*>* othersCompletionResults);
    // protected System.Void HandleLobbyGameStateControllerLevelDidGetDisconnected(DisconnectedReason disconnectedReason)
    // Offset: 0x1A1C31C
    void HandleLobbyGameStateControllerLevelDidGetDisconnected(GlobalNamespace::DisconnectedReason disconnectedReason);
    // protected System.Void HandleBackToLobbyPressed(MultiplayerResultsViewController viewController)
    // Offset: 0x1A1C320
    void HandleBackToLobbyPressed(GlobalNamespace::MultiplayerResultsViewController* viewController);
    // protected System.Void ShowSideViewControllers(System.Boolean showSideViewControllers, HMUI.ViewController/AnimationType animationType)
    // Offset: 0x1A1C334
    void ShowSideViewControllers(bool showSideViewControllers, HMUI::ViewController::AnimationType animationType);
    // protected System.Void ShowBackButton(System.Boolean show)
    // Offset: 0x1A1C39C
    void ShowBackButton(bool show);
    // private System.Void ShowDisconnectDialogAndFinish(DisconnectedReason disconnectedReason)
    // Offset: 0x1A1B664
    void ShowDisconnectDialogAndFinish(GlobalNamespace::DisconnectedReason disconnectedReason);
    // protected System.Void UpdateLocalPlayerIsActiveState(System.Boolean isActive)
    // Offset: 0x1A1C3A8
    void UpdateLocalPlayerIsActiveState(bool isActive);
    // private System.Void <PresentBackButtonConfirmationDialog>b__27_0(System.Int32 btnIndex)
    // Offset: 0x1A1C570
    void $PresentBackButtonConfirmationDialog$b__27_0(int btnIndex);
    // private System.Void <ShowDisconnectDialogAndFinish>b__38_0()
    // Offset: 0x1A1C6C4
    void $ShowDisconnectDialogAndFinish$b__38_0();
    // protected override System.Void DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0x1A1AF40
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
    // protected override System.Void DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    // Offset: 0x1A1B0E4
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    void DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling);
    // protected override System.Void TransitionDidStart()
    // Offset: 0x1A1B260
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::TransitionDidStart()
    void TransitionDidStart();
    // protected override System.Void TransitionDidFinish()
    // Offset: 0x1A1B37C
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::TransitionDidFinish()
    void TransitionDidFinish();
    // protected System.Void .ctor()
    // Offset: 0x1A1C568
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static GameServerLobbyFlowCoordinator* New_ctor();
  }; // GameServerLobbyFlowCoordinator
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GameServerLobbyFlowCoordinator*, "", "GameServerLobbyFlowCoordinator");
#pragma pack(pop)
