// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.FlowCoordinator
#include "HMUI/FlowCoordinator.hpp"
// Including type: LevelSelectionFlowCoordinator
#include "GlobalNamespace/LevelSelectionFlowCoordinator.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: ScreenModeSO
  class ScreenModeSO;
  // Forward declaring type: ScreenModeController
  class ScreenModeController;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: ServerPlayerListController
  class ServerPlayerListController;
  // Forward declaring type: SelectModifiersViewController
  class SelectModifiersViewController;
  // Forward declaring type: MultiplayerLevelSelectionFlowCoordinator
  class MultiplayerLevelSelectionFlowCoordinator;
  // Forward declaring type: MultiplayerResultsViewController
  class MultiplayerResultsViewController;
  // Forward declaring type: SimpleDialogPromptViewController
  class SimpleDialogPromptViewController;
  // Forward declaring type: ConnectionErrorDialogViewController
  class ConnectionErrorDialogViewController;
  // Forward declaring type: MultiplayerSettingsPanelController
  class MultiplayerSettingsPanelController;
  // Forward declaring type: GameplaySetupViewController
  class GameplaySetupViewController;
  // Forward declaring type: IMenuRpcManager
  class IMenuRpcManager;
  // Forward declaring type: MultiplayerLobbyController
  class MultiplayerLobbyController;
  // Forward declaring type: MultiplayerLobbyCenterStageManager
  class MultiplayerLobbyCenterStageManager;
  // Forward declaring type: FadeInOutController
  class FadeInOutController;
  // Forward declaring type: CenterStageScreenController
  class CenterStageScreenController;
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: ILobbyStateDataModel
  class ILobbyStateDataModel;
  // Forward declaring type: ILobbyPlayersDataModel
  class ILobbyPlayersDataModel;
  // Forward declaring type: ILobbyGameStateController
  class ILobbyGameStateController;
  // Forward declaring type: PlayerDataModel
  class PlayerDataModel;
  // Forward declaring type: PlatformLeaderboardsModel
  class PlatformLeaderboardsModel;
  // Forward declaring type: IAnalyticsModel
  class IAnalyticsModel;
  // Forward declaring type: MultiplayerLevelScenesTransitionSetupDataSO
  class MultiplayerLevelScenesTransitionSetupDataSO;
  // Forward declaring type: LevelCompletionResults
  class LevelCompletionResults;
  // Forward declaring type: DisconnectedReason
  struct DisconnectedReason;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x161
  #pragma pack(push, 1)
  // Autogenerated type: GameServerLobbyFlowCoordinator
  // [] Offset: FFFFFFFF
  class GameServerLobbyFlowCoordinator : public HMUI::FlowCoordinator {
    public:
    // private HMUI.ScreenModeSO _screenMode
    // Size: 0x8
    // Offset: 0xA8
    HMUI::ScreenModeSO* screenMode;
    // Field size check
    static_assert(sizeof(HMUI::ScreenModeSO*) == 0x8);
    // [InjectAttribute] Offset: 0xD3FC90
    // protected readonly ServerPlayerListController serverPlayerListController
    // Size: 0x8
    // Offset: 0xB0
    GlobalNamespace::ServerPlayerListController* serverPlayerListController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ServerPlayerListController*) == 0x8);
    // [InjectAttribute] Offset: 0xD3FCA0
    // protected readonly SelectModifiersViewController selectModifiersViewController
    // Size: 0x8
    // Offset: 0xB8
    GlobalNamespace::SelectModifiersViewController* selectModifiersViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SelectModifiersViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xD3FCB0
    // protected readonly MultiplayerLevelSelectionFlowCoordinator multiplayerLevelSelectionFlowCoordinator
    // Size: 0x8
    // Offset: 0xC0
    GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator* multiplayerLevelSelectionFlowCoordinator;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator*) == 0x8);
    // [InjectAttribute] Offset: 0xD3FCC0
    // protected readonly MultiplayerResultsViewController multiplayerResultsViewController
    // Size: 0x8
    // Offset: 0xC8
    GlobalNamespace::MultiplayerResultsViewController* multiplayerResultsViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerResultsViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xD3FCD0
    // protected readonly SimpleDialogPromptViewController simpleDialogPromptViewController
    // Size: 0x8
    // Offset: 0xD0
    GlobalNamespace::SimpleDialogPromptViewController* simpleDialogPromptViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SimpleDialogPromptViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xD3FCE0
    // protected readonly ConnectionErrorDialogViewController connectionErrorDialogViewController
    // Size: 0x8
    // Offset: 0xD8
    GlobalNamespace::ConnectionErrorDialogViewController* connectionErrorDialogViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ConnectionErrorDialogViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xD3FCF0
    // protected MultiplayerSettingsPanelController multiplayerSettingsPanelController
    // Size: 0x8
    // Offset: 0xE0
    GlobalNamespace::MultiplayerSettingsPanelController* multiplayerSettingsPanelController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerSettingsPanelController*) == 0x8);
    // [InjectAttribute] Offset: 0xD3FD00
    // private readonly GameplaySetupViewController _gameplaySetupViewController
    // Size: 0x8
    // Offset: 0xE8
    GlobalNamespace::GameplaySetupViewController* gameplaySetupViewController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplaySetupViewController*) == 0x8);
    // [InjectAttribute] Offset: 0xD3FD10
    // protected readonly IMenuRpcManager menuRpcManager
    // Size: 0x8
    // Offset: 0xF0
    GlobalNamespace::IMenuRpcManager* menuRpcManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMenuRpcManager*) == 0x8);
    // [InjectAttribute] Offset: 0xD3FD20
    // protected readonly MultiplayerLobbyController multiplayerLobbyController
    // Size: 0x8
    // Offset: 0xF8
    GlobalNamespace::MultiplayerLobbyController* multiplayerLobbyController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerLobbyController*) == 0x8);
    // [InjectAttribute] Offset: 0xD3FD30
    // protected readonly MultiplayerLobbyCenterStageManager multiplayerLobbyCenterStageManager
    // Size: 0x8
    // Offset: 0x100
    GlobalNamespace::MultiplayerLobbyCenterStageManager* multiplayerLobbyCenterStageManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerLobbyCenterStageManager*) == 0x8);
    // [InjectAttribute] Offset: 0xD3FD40
    // protected readonly FadeInOutController fadeInOutController
    // Size: 0x8
    // Offset: 0x108
    GlobalNamespace::FadeInOutController* fadeInOutController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::FadeInOutController*) == 0x8);
    // [InjectAttribute] Offset: 0xD3FD50
    // protected readonly CenterStageScreenController centerStageScreenController
    // Size: 0x8
    // Offset: 0x110
    GlobalNamespace::CenterStageScreenController* centerStageScreenController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::CenterStageScreenController*) == 0x8);
    // [InjectAttribute] Offset: 0xD3FD60
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Size: 0x8
    // Offset: 0x118
    GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMultiplayerSessionManager*) == 0x8);
    // [InjectAttribute] Offset: 0xD3FD70
    // protected readonly ILobbyStateDataModel lobbyStateDataModel
    // Size: 0x8
    // Offset: 0x120
    GlobalNamespace::ILobbyStateDataModel* lobbyStateDataModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ILobbyStateDataModel*) == 0x8);
    // [InjectAttribute] Offset: 0xD3FD80
    // protected readonly ILobbyPlayersDataModel lobbyPlayersDataModel
    // Size: 0x8
    // Offset: 0x128
    GlobalNamespace::ILobbyPlayersDataModel* lobbyPlayersDataModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ILobbyPlayersDataModel*) == 0x8);
    // [InjectAttribute] Offset: 0xD3FD90
    // protected readonly ILobbyGameStateController lobbyGameStateController
    // Size: 0x8
    // Offset: 0x130
    GlobalNamespace::ILobbyGameStateController* lobbyGameStateController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ILobbyGameStateController*) == 0x8);
    // [InjectAttribute] Offset: 0xD3FDA0
    // private readonly HMUI.ScreenModeController _screenModeController
    // Size: 0x8
    // Offset: 0x138
    HMUI::ScreenModeController* screenModeController;
    // Field size check
    static_assert(sizeof(HMUI::ScreenModeController*) == 0x8);
    // [InjectAttribute] Offset: 0xD3FDB0
    // private readonly PlayerDataModel _playerDataModel
    // Size: 0x8
    // Offset: 0x140
    GlobalNamespace::PlayerDataModel* playerDataModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayerDataModel*) == 0x8);
    // [InjectAttribute] Offset: 0xD3FDC0
    // private readonly PlatformLeaderboardsModel _platformLeaderboardsModel
    // Size: 0x8
    // Offset: 0x148
    GlobalNamespace::PlatformLeaderboardsModel* platformLeaderboardsModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlatformLeaderboardsModel*) == 0x8);
    // [InjectAttribute] Offset: 0xD3FDD0
    // private readonly IAnalyticsModel _analyticsModel
    // Size: 0x8
    // Offset: 0x150
    GlobalNamespace::IAnalyticsModel* analyticsModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IAnalyticsModel*) == 0x8);
    // protected LevelSelectionFlowCoordinator/State lastSimpleLevelSelectionFlowCoordinatorState
    // Size: 0x8
    // Offset: 0x158
    GlobalNamespace::LevelSelectionFlowCoordinator::State* lastSimpleLevelSelectionFlowCoordinatorState;
    // Field size check
    static_assert(sizeof(GlobalNamespace::LevelSelectionFlowCoordinator::State*) == 0x8);
    // protected System.Boolean isAlreadyFinishing
    // Size: 0x1
    // Offset: 0x160
    bool isAlreadyFinishing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: GameServerLobbyFlowCoordinator
    GameServerLobbyFlowCoordinator(HMUI::ScreenModeSO* screenMode_ = {}, GlobalNamespace::ServerPlayerListController* serverPlayerListController_ = {}, GlobalNamespace::SelectModifiersViewController* selectModifiersViewController_ = {}, GlobalNamespace::MultiplayerLevelSelectionFlowCoordinator* multiplayerLevelSelectionFlowCoordinator_ = {}, GlobalNamespace::MultiplayerResultsViewController* multiplayerResultsViewController_ = {}, GlobalNamespace::SimpleDialogPromptViewController* simpleDialogPromptViewController_ = {}, GlobalNamespace::ConnectionErrorDialogViewController* connectionErrorDialogViewController_ = {}, GlobalNamespace::MultiplayerSettingsPanelController* multiplayerSettingsPanelController_ = {}, GlobalNamespace::GameplaySetupViewController* gameplaySetupViewController_ = {}, GlobalNamespace::IMenuRpcManager* menuRpcManager_ = {}, GlobalNamespace::MultiplayerLobbyController* multiplayerLobbyController_ = {}, GlobalNamespace::MultiplayerLobbyCenterStageManager* multiplayerLobbyCenterStageManager_ = {}, GlobalNamespace::FadeInOutController* fadeInOutController_ = {}, GlobalNamespace::CenterStageScreenController* centerStageScreenController_ = {}, GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager_ = {}, GlobalNamespace::ILobbyStateDataModel* lobbyStateDataModel_ = {}, GlobalNamespace::ILobbyPlayersDataModel* lobbyPlayersDataModel_ = {}, GlobalNamespace::ILobbyGameStateController* lobbyGameStateController_ = {}, HMUI::ScreenModeController* screenModeController_ = {}, GlobalNamespace::PlayerDataModel* playerDataModel_ = {}, GlobalNamespace::PlatformLeaderboardsModel* platformLeaderboardsModel_ = {}, GlobalNamespace::IAnalyticsModel* analyticsModel_ = {}, GlobalNamespace::LevelSelectionFlowCoordinator::State* lastSimpleLevelSelectionFlowCoordinatorState_ = {}, bool isAlreadyFinishing_ = {}) noexcept : screenMode{screenMode_}, serverPlayerListController{serverPlayerListController_}, selectModifiersViewController{selectModifiersViewController_}, multiplayerLevelSelectionFlowCoordinator{multiplayerLevelSelectionFlowCoordinator_}, multiplayerResultsViewController{multiplayerResultsViewController_}, simpleDialogPromptViewController{simpleDialogPromptViewController_}, connectionErrorDialogViewController{connectionErrorDialogViewController_}, multiplayerSettingsPanelController{multiplayerSettingsPanelController_}, gameplaySetupViewController{gameplaySetupViewController_}, menuRpcManager{menuRpcManager_}, multiplayerLobbyController{multiplayerLobbyController_}, multiplayerLobbyCenterStageManager{multiplayerLobbyCenterStageManager_}, fadeInOutController{fadeInOutController_}, centerStageScreenController{centerStageScreenController_}, multiplayerSessionManager{multiplayerSessionManager_}, lobbyStateDataModel{lobbyStateDataModel_}, lobbyPlayersDataModel{lobbyPlayersDataModel_}, lobbyGameStateController{lobbyGameStateController_}, screenModeController{screenModeController_}, playerDataModel{playerDataModel_}, platformLeaderboardsModel{platformLeaderboardsModel_}, analyticsModel{analyticsModel_}, lastSimpleLevelSelectionFlowCoordinatorState{lastSimpleLevelSelectionFlowCoordinatorState_}, isAlreadyFinishing{isAlreadyFinishing_} {}
    // protected System.Void Finish(System.Action finishedCallback, System.Boolean withFadeOut)
    // Offset: 0xFFFFFFFF
    void Finish(System::Action* finishedCallback, bool withFadeOut);
    // protected System.Void PresentBackButtonConfirmationDialog()
    // Offset: 0xF35D70
    void PresentBackButtonConfirmationDialog();
    // protected System.Void HandleLobbySetupViewControllerSelectBeatmap()
    // Offset: 0xF35F74
    void HandleLobbySetupViewControllerSelectBeatmap();
    // protected System.Void HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged(System.Boolean isActive)
    // Offset: 0xF35F90
    void HandleMultiplayerSettingsPanelControllerPlayerActiveStateChanged(bool isActive);
    // private System.Void HandleLobbyGameStateControllerLobbyDisconnected()
    // Offset: 0xF35F94
    void HandleLobbyGameStateControllerLobbyDisconnected();
    // protected System.Void HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel(LevelSelectionFlowCoordinator/State state)
    // Offset: 0xF36054
    void HandleMultiplayerLevelSelectionFlowCoordinatorDidSelectLevel(GlobalNamespace::LevelSelectionFlowCoordinator::State* state);
    // protected System.Void HandleMultiplayerLevelSelectionFlowCoordinatorCancelSelectLevel()
    // Offset: 0xF363A0
    void HandleMultiplayerLevelSelectionFlowCoordinatorCancelSelectLevel();
    // protected System.Void HandleLobbySetupViewControllerSelectModifiers()
    // Offset: 0xF363E4
    void HandleLobbySetupViewControllerSelectModifiers();
    // protected System.Void HandleLobbyGameStateControllerLevelFinished(MultiplayerLevelScenesTransitionSetupDataSO multiplayerLevelScenesTransitionSetupData, LevelCompletionResults myCompletionResults, System.Collections.Generic.Dictionary`2<System.String,LevelCompletionResults> othersCompletionResults)
    // Offset: 0xF36540
    void HandleLobbyGameStateControllerLevelFinished(GlobalNamespace::MultiplayerLevelScenesTransitionSetupDataSO* multiplayerLevelScenesTransitionSetupData, GlobalNamespace::LevelCompletionResults* myCompletionResults, System::Collections::Generic::Dictionary_2<::Il2CppString*, GlobalNamespace::LevelCompletionResults*>* othersCompletionResults);
    // protected System.Void HandleLobbyGameStateControllerLevelDidGetDisconnected(DisconnectedReason disconnectedReason)
    // Offset: 0xF36854
    void HandleLobbyGameStateControllerLevelDidGetDisconnected(GlobalNamespace::DisconnectedReason disconnectedReason);
    // protected System.Void HandleBackToLobbyPressed(MultiplayerResultsViewController viewController)
    // Offset: 0xF36858
    void HandleBackToLobbyPressed(GlobalNamespace::MultiplayerResultsViewController* viewController);
    // protected System.Void ShowSideViewControllers(System.Boolean showSideViewControllers, HMUI.ViewController/AnimationType animationType)
    // Offset: 0xF3686C
    void ShowSideViewControllers(bool showSideViewControllers, HMUI::ViewController::AnimationType animationType);
    // protected System.Void ShowBackButton(System.Boolean show)
    // Offset: 0xF368D4
    void ShowBackButton(bool show);
    // private System.Void ShowDisconnectDialogAndFinish(DisconnectedReason disconnectedReason)
    // Offset: 0xF35A2C
    void ShowDisconnectDialogAndFinish(GlobalNamespace::DisconnectedReason disconnectedReason);
    // protected System.Void UpdateLocalPlayerIsActiveState(System.Boolean isActive)
    // Offset: 0xF368E0
    void UpdateLocalPlayerIsActiveState(bool isActive);
    // private System.Void <PresentBackButtonConfirmationDialog>b__29_0(System.Int32 btnIndex)
    // Offset: 0xF36AA8
    void $PresentBackButtonConfirmationDialog$b__29_0(int btnIndex);
    // private System.Void <ShowDisconnectDialogAndFinish>b__41_0()
    // Offset: 0xF36BFC
    void $ShowDisconnectDialogAndFinish$b__41_0();
    // protected override System.Void DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0xF35278
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
    // protected override System.Void DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    // Offset: 0xF35464
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::DidDeactivate(System.Boolean removedFromHierarchy, System.Boolean screenSystemDisabling)
    void DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling);
    // protected override System.Void TransitionDidStart()
    // Offset: 0xF35628
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::TransitionDidStart()
    void TransitionDidStart();
    // protected override System.Void TransitionDidFinish()
    // Offset: 0xF35744
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::TransitionDidFinish()
    void TransitionDidFinish();
    // protected System.Void .ctor()
    // Offset: 0xF36AA0
    // Implemented from: HMUI.FlowCoordinator
    // Base method: System.Void FlowCoordinator::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GameServerLobbyFlowCoordinator* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::GameServerLobbyFlowCoordinator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GameServerLobbyFlowCoordinator*, creationType>()));
    }
  }; // GameServerLobbyFlowCoordinator
  #pragma pack(pop)
  static check_size<sizeof(GameServerLobbyFlowCoordinator), 352 + sizeof(bool)> __GlobalNamespace_GameServerLobbyFlowCoordinatorSizeCheck;
  static_assert(sizeof(GameServerLobbyFlowCoordinator) == 0x161);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::GameServerLobbyFlowCoordinator*, "", "GameServerLobbyFlowCoordinator");
