// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Threading.CancellationToken
#include "System/Threading/CancellationToken.hpp"
// Including type: System.Runtime.CompilerServices.IAsyncStateMachine
#include "System/Runtime/CompilerServices/IAsyncStateMachine.hpp"
// Including type: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1
#include "System/Runtime/CompilerServices/AsyncTaskMethodBuilder_1.hpp"
// Including type: System.Runtime.CompilerServices.TaskAwaiter`1
#include "System/Runtime/CompilerServices/TaskAwaiter_1.hpp"
// Including type: System.Runtime.CompilerServices.AsyncVoidMethodBuilder
#include "System/Runtime/CompilerServices/AsyncVoidMethodBuilder.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: ScheduledTask because it is already included!
  // Skipping declaration: <LoadAsync>d__7 because it is already included!
  // Skipping declaration: <LoadAllAsync>d__8 because it is already included!
  // Forward declaring type: HMCache`2<K, V>
  template<typename K, typename V>
  class HMCache_2;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Func`3<T1, T2, TResult>
  template<typename T1, typename T2, typename TResult>
  class Func_3;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
  // Forward declaring type: TaskCompletionSource`1<TResult>
  template<typename TResult>
  class TaskCompletionSource_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // WARNING Size may be invalid!
  // Autogenerated type: AsyncCachedLoader`2
  // [] Offset: FFFFFFFF
  template<typename TKey, typename TValue>
  class AsyncCachedLoader_2 : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::AsyncCachedLoader_2::ScheduledTask<TKey, TValue>
    struct ScheduledTask;
    // Nested type: GlobalNamespace::AsyncCachedLoader_2::$LoadAsync$d__7<TKey, TValue>
    struct $LoadAsync$d__7;
    // Nested type: GlobalNamespace::AsyncCachedLoader_2::$LoadAllAsync$d__8<TKey, TValue>
    struct $LoadAllAsync$d__8;
    // WARNING Size may be invalid!
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: AsyncCachedLoader`2/ScheduledTask
    // [] Offset: FFFFFFFF
    struct ScheduledTask : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public System::ValueType*/ {
      public:
      using declaring_type = AsyncCachedLoader_2<TKey, TValue>*;
      static constexpr std::string_view NESTED_NAME = "ScheduledTask";
      // public TKey keyId
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      TKey keyId;
      // public System.Threading.Tasks.TaskCompletionSource`1<TValue> taskCompletionSource
      // Size: 0x8
      // Offset: 0x0
      System::Threading::Tasks::TaskCompletionSource_1<TValue>* taskCompletionSource;
      // Field size check
      static_assert(sizeof(System::Threading::Tasks::TaskCompletionSource_1<TValue>*) == 0x8);
      // public System.Threading.CancellationToken cancellationToken
      // Size: 0x8
      // Offset: 0x0
      System::Threading::CancellationToken cancellationToken;
      // Field size check
      static_assert(sizeof(System::Threading::CancellationToken) == 0x8);
      // Creating value type constructor for type: ScheduledTask
      constexpr ScheduledTask(TKey keyId_ = {}, System::Threading::Tasks::TaskCompletionSource_1<TValue>* taskCompletionSource_ = {}, System::Threading::CancellationToken cancellationToken_ = {}) noexcept : keyId{keyId_}, taskCompletionSource{taskCompletionSource_}, cancellationToken{cancellationToken_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
      // public System.Void .ctor(TKey keyId, System.Threading.Tasks.TaskCompletionSource`1<TValue> taskCompletionSource, System.Threading.CancellationToken cancellationToken)
      // Offset: 0xFFFFFFFF
      // template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      // ABORTED: conflicts with another method.  ScheduledTask(TKey keyId, System::Threading::Tasks::TaskCompletionSource_1<TValue>* taskCompletionSource, System::Threading::CancellationToken cancellationToken)
    }; // AsyncCachedLoader`2/ScheduledTask
    // Could not write size check! Type: AsyncCachedLoader`2/ScheduledTask is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: AsyncCachedLoader`2/<LoadAsync>d__7
    // [] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: D1F27C
    struct $LoadAsync$d__7 : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public System::ValueType, public System::Runtime::CompilerServices::IAsyncStateMachine*/ {
      public:
      using declaring_type = AsyncCachedLoader_2<TKey, TValue>*;
      static constexpr std::string_view NESTED_NAME = "$LoadAsync$d__7";
      // public System.Int32 <>1__state
      // Size: 0x4
      // Offset: 0x0
      int $$1__state;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1<TValue> <>t__builder
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<TValue> $$t__builder;
      // public TKey keyId
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      TKey keyId;
      // public System.Threading.CancellationToken cancellationToken
      // Size: 0x8
      // Offset: 0x0
      System::Threading::CancellationToken cancellationToken;
      // Field size check
      static_assert(sizeof(System::Threading::CancellationToken) == 0x8);
      // public AsyncCachedLoader`2<TKey,TValue> <>4__this
      // Size: 0x8
      // Offset: 0x0
      GlobalNamespace::AsyncCachedLoader_2<TKey, TValue>* $$4__this;
      // Field size check
      static_assert(sizeof(GlobalNamespace::AsyncCachedLoader_2<TKey, TValue>*) == 0x8);
      // private System.Runtime.CompilerServices.TaskAwaiter`1<TValue> <>u__1
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      System::Runtime::CompilerServices::TaskAwaiter_1<TValue> $$u__1;
      // Creating value type constructor for type: $LoadAsync$d__7
      constexpr $LoadAsync$d__7(int $$1__state_ = {}, System::Runtime::CompilerServices::AsyncTaskMethodBuilder_1<TValue> $$t__builder_ = {}, TKey keyId_ = {}, System::Threading::CancellationToken cancellationToken_ = {}, GlobalNamespace::AsyncCachedLoader_2<TKey, TValue>* $$4__this_ = {}, System::Runtime::CompilerServices::TaskAwaiter_1<TValue> $$u__1_ = {}) noexcept : $$1__state{$$1__state_}, $$t__builder{$$t__builder_}, keyId{keyId_}, cancellationToken{cancellationToken_}, $$4__this{$$4__this_}, $$u__1{$$u__1_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator System::Runtime::CompilerServices::IAsyncStateMachine
      operator System::Runtime::CompilerServices::IAsyncStateMachine() noexcept {
        return *reinterpret_cast<System::Runtime::CompilerServices::IAsyncStateMachine*>(this);
      }
      // private System.Void MoveNext()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Runtime.CompilerServices.IAsyncStateMachine
      // Base method: System.Void IAsyncStateMachine::MoveNext()
      void MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AsyncCachedLoader_2::$LoadAsync$d__7::MoveNext");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
        ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
      }
      // private System.Void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine)
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Runtime.CompilerServices.IAsyncStateMachine
      // Base method: System.Void IAsyncStateMachine::SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine)
      void SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AsyncCachedLoader_2::$LoadAsync$d__7::SetStateMachine");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(stateMachine)));
        ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
      }
    }; // AsyncCachedLoader`2/<LoadAsync>d__7
    // Could not write size check! Type: AsyncCachedLoader`2/<LoadAsync>d__7 is generic, or has no fields that are valid for size checks!
    // WARNING Size may be invalid!
    // Autogenerated type: AsyncCachedLoader`2/<LoadAllAsync>d__8
    // [] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: D1F28C
    struct $LoadAllAsync$d__8 : public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public System::ValueType, public System::Runtime::CompilerServices::IAsyncStateMachine*/ {
      public:
      using declaring_type = AsyncCachedLoader_2<TKey, TValue>*;
      static constexpr std::string_view NESTED_NAME = "$LoadAllAsync$d__8";
      // public System.Int32 <>1__state
      // Size: 0x4
      // Offset: 0x0
      int $$1__state;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Runtime.CompilerServices.AsyncVoidMethodBuilder <>t__builder
      // Size: 0x20
      // Offset: 0x0
      System::Runtime::CompilerServices::AsyncVoidMethodBuilder $$t__builder;
      // Field size check
      static_assert(sizeof(System::Runtime::CompilerServices::AsyncVoidMethodBuilder) == 0x20);
      // public AsyncCachedLoader`2<TKey,TValue> <>4__this
      // Size: 0x8
      // Offset: 0x0
      GlobalNamespace::AsyncCachedLoader_2<TKey, TValue>* $$4__this;
      // Field size check
      static_assert(sizeof(GlobalNamespace::AsyncCachedLoader_2<TKey, TValue>*) == 0x8);
      // private AsyncCachedLoader`2/ScheduledTask<TKey,TValue> <scheduledTask>5__2
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      typename GlobalNamespace::AsyncCachedLoader_2<TKey, TValue>::ScheduledTask $scheduledTask$5__2;
      // private System.Runtime.CompilerServices.TaskAwaiter`1<TValue> <>u__1
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      System::Runtime::CompilerServices::TaskAwaiter_1<TValue> $$u__1;
      // Creating value type constructor for type: $LoadAllAsync$d__8
      constexpr $LoadAllAsync$d__8(int $$1__state_ = {}, System::Runtime::CompilerServices::AsyncVoidMethodBuilder $$t__builder_ = {}, GlobalNamespace::AsyncCachedLoader_2<TKey, TValue>* $$4__this_ = {}, typename GlobalNamespace::AsyncCachedLoader_2<TKey, TValue>::ScheduledTask $scheduledTask$5__2_ = {}, System::Runtime::CompilerServices::TaskAwaiter_1<TValue> $$u__1_ = {}) noexcept : $$1__state{$$1__state_}, $$t__builder{$$t__builder_}, $$4__this{$$4__this_}, $scheduledTask$5__2{$scheduledTask$5__2_}, $$u__1{$$u__1_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
      // Creating interface conversion operator: operator System::Runtime::CompilerServices::IAsyncStateMachine
      operator System::Runtime::CompilerServices::IAsyncStateMachine() noexcept {
        return *reinterpret_cast<System::Runtime::CompilerServices::IAsyncStateMachine*>(this);
      }
      // private System.Void MoveNext()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Runtime.CompilerServices.IAsyncStateMachine
      // Base method: System.Void IAsyncStateMachine::MoveNext()
      void MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AsyncCachedLoader_2::$LoadAllAsync$d__8::MoveNext");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "MoveNext", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
        ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method);
      }
      // private System.Void SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine)
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Runtime.CompilerServices.IAsyncStateMachine
      // Base method: System.Void IAsyncStateMachine::SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine stateMachine)
      void SetStateMachine(System::Runtime::CompilerServices::IAsyncStateMachine* stateMachine) {
        static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AsyncCachedLoader_2::$LoadAllAsync$d__8::SetStateMachine");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(*this, "SetStateMachine", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(stateMachine)));
        ::il2cpp_utils::RunMethodThrow<void, false>(*this, ___internal__method, stateMachine);
      }
    }; // AsyncCachedLoader`2/<LoadAllAsync>d__8
    // Could not write size check! Type: AsyncCachedLoader`2/<LoadAllAsync>d__8 is generic, or has no fields that are valid for size checks!
    // private System.Collections.Generic.List`1<AsyncCachedLoader`2/ScheduledTask<TKey,TValue>> _scheduledTaskList
    // Size: 0x8
    // Offset: 0x0
    System::Collections::Generic::List_1<typename GlobalNamespace::AsyncCachedLoader_2<TKey, TValue>::ScheduledTask>* scheduledTaskList;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<typename GlobalNamespace::AsyncCachedLoader_2<TKey, TValue>::ScheduledTask>*) == 0x8);
    // private HMCache`2<TKey,TValue> _cache
    // Size: 0x8
    // Offset: 0x0
    GlobalNamespace::HMCache_2<TKey, TValue>* cache;
    // Field size check
    static_assert(sizeof(GlobalNamespace::HMCache_2<TKey, TValue>*) == 0x8);
    // private System.Func`3<TKey,System.Threading.CancellationToken,System.Threading.Tasks.Task`1<TValue>> _resultValueFunc
    // Size: 0x8
    // Offset: 0x0
    System::Func_3<TKey, System::Threading::CancellationToken, System::Threading::Tasks::Task_1<TValue>*>* resultValueFunc;
    // Field size check
    static_assert(sizeof(System::Func_3<TKey, System::Threading::CancellationToken, System::Threading::Tasks::Task_1<TValue>*>*) == 0x8);
    // private System.Boolean _isLoading
    // Size: 0x1
    // Offset: 0x0
    bool isLoading;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: AsyncCachedLoader_2
    AsyncCachedLoader_2(System::Collections::Generic::List_1<typename GlobalNamespace::AsyncCachedLoader_2<TKey, TValue>::ScheduledTask>* scheduledTaskList_ = {}, GlobalNamespace::HMCache_2<TKey, TValue>* cache_ = {}, System::Func_3<TKey, System::Threading::CancellationToken, System::Threading::Tasks::Task_1<TValue>*>* resultValueFunc_ = {}, bool isLoading_ = {}) noexcept : scheduledTaskList{scheduledTaskList_}, cache{cache_}, resultValueFunc{resultValueFunc_}, isLoading{isLoading_} {}
    // public System.Void ClearCache()
    // Offset: 0xFFFFFFFF
    void ClearCache() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AsyncCachedLoader_2::ClearCache");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ClearCache", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
    }
    // public System.Void .ctor(System.Int32 maxNumberCachedElements, System.Func`3<TKey,System.Threading.CancellationToken,System.Threading.Tasks.Task`1<TValue>> resultValueFunc)
    // Offset: 0xFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AsyncCachedLoader_2<TKey, TValue>* New_ctor(int maxNumberCachedElements, System::Func_3<TKey, System::Threading::CancellationToken, System::Threading::Tasks::Task_1<TValue>*>* resultValueFunc) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AsyncCachedLoader_2::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AsyncCachedLoader_2<TKey, TValue>*, creationType>(maxNumberCachedElements, resultValueFunc)));
    }
    // public System.Threading.Tasks.Task`1<TValue> LoadAsync(TKey keyId, System.Threading.CancellationToken cancellationToken)
    // Offset: 0xFFFFFFFF
    System::Threading::Tasks::Task_1<TValue>* LoadAsync(TKey keyId, System::Threading::CancellationToken cancellationToken) {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AsyncCachedLoader_2::LoadAsync");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LoadAsync", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(keyId, cancellationToken)));
      return ::il2cpp_utils::RunMethodThrow<System::Threading::Tasks::Task_1<TValue>*, false>(this, ___internal__method, keyId, cancellationToken);
    }
    // private System.Void LoadAllAsync()
    // Offset: 0xFFFFFFFF
    void LoadAllAsync() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AsyncCachedLoader_2::LoadAllAsync");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "LoadAllAsync", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
    }
  }; // AsyncCachedLoader`2
  // Could not write size check! Type: AsyncCachedLoader`2 is generic, or has no fields that are valid for size checks!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(GlobalNamespace::AsyncCachedLoader_2, "", "AsyncCachedLoader`2");
