// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: SteamVR_Skybox
  class SteamVR_Skybox : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::SteamVR_Skybox::CellSize
    struct CellSize;
    // Autogenerated type: SteamVR_Skybox/CellSize
    struct CellSize : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: CellSize
      constexpr CellSize(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public SteamVR_Skybox/CellSize x1024
      static constexpr const int x1024 = 0;
      // Get static field: static public SteamVR_Skybox/CellSize x1024
      static GlobalNamespace::SteamVR_Skybox::CellSize _get_x1024();
      // Set static field: static public SteamVR_Skybox/CellSize x1024
      static void _set_x1024(GlobalNamespace::SteamVR_Skybox::CellSize value);
      // static field const value: static public SteamVR_Skybox/CellSize x64
      static constexpr const int x64 = 1;
      // Get static field: static public SteamVR_Skybox/CellSize x64
      static GlobalNamespace::SteamVR_Skybox::CellSize _get_x64();
      // Set static field: static public SteamVR_Skybox/CellSize x64
      static void _set_x64(GlobalNamespace::SteamVR_Skybox::CellSize value);
      // static field const value: static public SteamVR_Skybox/CellSize x32
      static constexpr const int x32 = 2;
      // Get static field: static public SteamVR_Skybox/CellSize x32
      static GlobalNamespace::SteamVR_Skybox::CellSize _get_x32();
      // Set static field: static public SteamVR_Skybox/CellSize x32
      static void _set_x32(GlobalNamespace::SteamVR_Skybox::CellSize value);
      // static field const value: static public SteamVR_Skybox/CellSize x16
      static constexpr const int x16 = 3;
      // Get static field: static public SteamVR_Skybox/CellSize x16
      static GlobalNamespace::SteamVR_Skybox::CellSize _get_x16();
      // Set static field: static public SteamVR_Skybox/CellSize x16
      static void _set_x16(GlobalNamespace::SteamVR_Skybox::CellSize value);
      // static field const value: static public SteamVR_Skybox/CellSize x8
      static constexpr const int x8 = 4;
      // Get static field: static public SteamVR_Skybox/CellSize x8
      static GlobalNamespace::SteamVR_Skybox::CellSize _get_x8();
      // Set static field: static public SteamVR_Skybox/CellSize x8
      static void _set_x8(GlobalNamespace::SteamVR_Skybox::CellSize value);
    }; // SteamVR_Skybox/CellSize
    // public UnityEngine.Texture front
    // Offset: 0x18
    UnityEngine::Texture* front;
    // public UnityEngine.Texture back
    // Offset: 0x20
    UnityEngine::Texture* back;
    // public UnityEngine.Texture left
    // Offset: 0x28
    UnityEngine::Texture* left;
    // public UnityEngine.Texture right
    // Offset: 0x30
    UnityEngine::Texture* right;
    // public UnityEngine.Texture top
    // Offset: 0x38
    UnityEngine::Texture* top;
    // public UnityEngine.Texture bottom
    // Offset: 0x40
    UnityEngine::Texture* bottom;
    // public SteamVR_Skybox/CellSize StereoCellSize
    // Offset: 0x48
    GlobalNamespace::SteamVR_Skybox::CellSize StereoCellSize;
    // public System.Single StereoIpdMm
    // Offset: 0x4C
    float StereoIpdMm;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void SetTextureByIndex(System.Int32 i, UnityEngine.Texture t)
    // Offset: 0xD93C08
    void SetTextureByIndex(int i, UnityEngine::Texture* t);
    // public UnityEngine.Texture GetTextureByIndex(System.Int32 i)
    // Offset: 0xD93C74
    UnityEngine::Texture* GetTextureByIndex(int i);
    // static public System.Void SetOverride(UnityEngine.Texture front, UnityEngine.Texture back, UnityEngine.Texture left, UnityEngine.Texture right, UnityEngine.Texture top, UnityEngine.Texture bottom)
    // Offset: 0xD8A370
    static void SetOverride(UnityEngine::Texture* front, UnityEngine::Texture* back, UnityEngine::Texture* left, UnityEngine::Texture* right, UnityEngine::Texture* top, UnityEngine::Texture* bottom);
    // static public System.Void ClearOverride()
    // Offset: 0xD8A7E4
    static void ClearOverride();
    // private System.Void OnEnable()
    // Offset: 0xD93CD0
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0xD93CE4
    void OnDisable();
    // public System.Void .ctor()
    // Offset: 0xD93CE8
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static SteamVR_Skybox* New_ctor();
  }; // SteamVR_Skybox
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SteamVR_Skybox*, "", "SteamVR_Skybox");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SteamVR_Skybox::CellSize, "", "SteamVR_Skybox/CellSize");
#pragma pack(pop)
