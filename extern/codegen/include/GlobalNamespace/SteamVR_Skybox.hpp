// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Texture
  class Texture;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: SteamVR_Skybox
  // [] Offset: FFFFFFFF
  class SteamVR_Skybox : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::SteamVR_Skybox::CellSize
    struct CellSize;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: SteamVR_Skybox/CellSize
    // [] Offset: FFFFFFFF
    struct CellSize/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: CellSize
      constexpr CellSize(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public SteamVR_Skybox/CellSize x1024
      static constexpr const int x1024 = 0;
      // Get static field: static public SteamVR_Skybox/CellSize x1024
      static GlobalNamespace::SteamVR_Skybox::CellSize _get_x1024();
      // Set static field: static public SteamVR_Skybox/CellSize x1024
      static void _set_x1024(GlobalNamespace::SteamVR_Skybox::CellSize value);
      // static field const value: static public SteamVR_Skybox/CellSize x64
      static constexpr const int x64 = 1;
      // Get static field: static public SteamVR_Skybox/CellSize x64
      static GlobalNamespace::SteamVR_Skybox::CellSize _get_x64();
      // Set static field: static public SteamVR_Skybox/CellSize x64
      static void _set_x64(GlobalNamespace::SteamVR_Skybox::CellSize value);
      // static field const value: static public SteamVR_Skybox/CellSize x32
      static constexpr const int x32 = 2;
      // Get static field: static public SteamVR_Skybox/CellSize x32
      static GlobalNamespace::SteamVR_Skybox::CellSize _get_x32();
      // Set static field: static public SteamVR_Skybox/CellSize x32
      static void _set_x32(GlobalNamespace::SteamVR_Skybox::CellSize value);
      // static field const value: static public SteamVR_Skybox/CellSize x16
      static constexpr const int x16 = 3;
      // Get static field: static public SteamVR_Skybox/CellSize x16
      static GlobalNamespace::SteamVR_Skybox::CellSize _get_x16();
      // Set static field: static public SteamVR_Skybox/CellSize x16
      static void _set_x16(GlobalNamespace::SteamVR_Skybox::CellSize value);
      // static field const value: static public SteamVR_Skybox/CellSize x8
      static constexpr const int x8 = 4;
      // Get static field: static public SteamVR_Skybox/CellSize x8
      static GlobalNamespace::SteamVR_Skybox::CellSize _get_x8();
      // Set static field: static public SteamVR_Skybox/CellSize x8
      static void _set_x8(GlobalNamespace::SteamVR_Skybox::CellSize value);
    }; // SteamVR_Skybox/CellSize
    #pragma pack(pop)
    static check_size<sizeof(SteamVR_Skybox::CellSize), 0 + sizeof(int)> __GlobalNamespace_SteamVR_Skybox_CellSizeSizeCheck;
    static_assert(sizeof(SteamVR_Skybox::CellSize) == 0x4);
    // public UnityEngine.Texture front
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::Texture* front;
    // Field size check
    static_assert(sizeof(UnityEngine::Texture*) == 0x8);
    // public UnityEngine.Texture back
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::Texture* back;
    // Field size check
    static_assert(sizeof(UnityEngine::Texture*) == 0x8);
    // public UnityEngine.Texture left
    // Size: 0x8
    // Offset: 0x28
    UnityEngine::Texture* left;
    // Field size check
    static_assert(sizeof(UnityEngine::Texture*) == 0x8);
    // public UnityEngine.Texture right
    // Size: 0x8
    // Offset: 0x30
    UnityEngine::Texture* right;
    // Field size check
    static_assert(sizeof(UnityEngine::Texture*) == 0x8);
    // public UnityEngine.Texture top
    // Size: 0x8
    // Offset: 0x38
    UnityEngine::Texture* top;
    // Field size check
    static_assert(sizeof(UnityEngine::Texture*) == 0x8);
    // public UnityEngine.Texture bottom
    // Size: 0x8
    // Offset: 0x40
    UnityEngine::Texture* bottom;
    // Field size check
    static_assert(sizeof(UnityEngine::Texture*) == 0x8);
    // public SteamVR_Skybox/CellSize StereoCellSize
    // Size: 0x4
    // Offset: 0x48
    GlobalNamespace::SteamVR_Skybox::CellSize StereoCellSize;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SteamVR_Skybox::CellSize) == 0x4);
    // public System.Single StereoIpdMm
    // Size: 0x4
    // Offset: 0x4C
    float StereoIpdMm;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: SteamVR_Skybox
    SteamVR_Skybox(UnityEngine::Texture* front_ = {}, UnityEngine::Texture* back_ = {}, UnityEngine::Texture* left_ = {}, UnityEngine::Texture* right_ = {}, UnityEngine::Texture* top_ = {}, UnityEngine::Texture* bottom_ = {}, GlobalNamespace::SteamVR_Skybox::CellSize StereoCellSize_ = {}, float StereoIpdMm_ = {}) noexcept : front{front_}, back{back_}, left{left_}, right{right_}, top{top_}, bottom{bottom_}, StereoCellSize{StereoCellSize_}, StereoIpdMm{StereoIpdMm_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void SetTextureByIndex(System.Int32 i, UnityEngine.Texture t)
    // Offset: 0x129E260
    void SetTextureByIndex(int i, UnityEngine::Texture* t);
    // public UnityEngine.Texture GetTextureByIndex(System.Int32 i)
    // Offset: 0x129E2CC
    UnityEngine::Texture* GetTextureByIndex(int i);
    // static public System.Void SetOverride(UnityEngine.Texture front, UnityEngine.Texture back, UnityEngine.Texture left, UnityEngine.Texture right, UnityEngine.Texture top, UnityEngine.Texture bottom)
    // Offset: 0x12949C8
    static void SetOverride(UnityEngine::Texture* front, UnityEngine::Texture* back, UnityEngine::Texture* left, UnityEngine::Texture* right, UnityEngine::Texture* top, UnityEngine::Texture* bottom);
    // static public System.Void ClearOverride()
    // Offset: 0x1294E3C
    static void ClearOverride();
    // private System.Void OnEnable()
    // Offset: 0x129E328
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0x129E33C
    void OnDisable();
    // public System.Void .ctor()
    // Offset: 0x129E340
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SteamVR_Skybox* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SteamVR_Skybox::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SteamVR_Skybox*, creationType>()));
    }
  }; // SteamVR_Skybox
  #pragma pack(pop)
  static check_size<sizeof(SteamVR_Skybox), 76 + sizeof(float)> __GlobalNamespace_SteamVR_SkyboxSizeCheck;
  static_assert(sizeof(SteamVR_Skybox) == 0x50);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SteamVR_Skybox*, "", "SteamVR_Skybox");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SteamVR_Skybox::CellSize, "", "SteamVR_Skybox/CellSize");
