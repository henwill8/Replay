// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: StandaloneMonobehavior
#include "GlobalNamespace/StandaloneMonobehavior.hpp"
// Including type: IMultiplayerSessionManager
#include "GlobalNamespace/IMultiplayerSessionManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IConnectionInitParams`1<T>
  template<typename T>
  class IConnectionInitParams_1;
  // Forward declaring type: NetworkPacketSerializer`2<TType, TData>
  template<typename TType, typename TData>
  class NetworkPacketSerializer_2;
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
  // Forward declaring type: SynchronizedActionQueue
  class SynchronizedActionQueue;
  // Forward declaring type: ConnectedPlayerManager
  class ConnectedPlayerManager;
  // Forward declaring type: IConnectionManager
  class IConnectionManager;
  // Skipping declaration: SessionType because it is already included!
  // Forward declaring type: UpdateConnectionStateReason
  struct UpdateConnectionStateReason;
  // Forward declaring type: INetworkPacketSubSerializer`1<TData>
  template<typename TData>
  class INetworkPacketSubSerializer_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Queue`1<T>
  template<typename T>
  class Queue_1;
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
  // Forward declaring type: String
  class String;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Func`1<TResult>
  template<typename TResult>
  class Func_1;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: INetSerializable
  class INetSerializable;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: MultiplayerSessionManager
  class MultiplayerSessionManager : public GlobalNamespace::StandaloneMonobehavior/*, public GlobalNamespace::IMultiplayerSessionManager*/ {
    public:
    // Nested type: GlobalNamespace::MultiplayerSessionManager::SessionType
    struct SessionType;
    // Nested type: GlobalNamespace::MultiplayerSessionManager::ConnectionState
    struct ConnectionState;
    // Nested type: GlobalNamespace::MultiplayerSessionManager::$$c__DisplayClass92_0
    class $$c__DisplayClass92_0;
    // Nested type: GlobalNamespace::MultiplayerSessionManager::$$c
    class $$c;
    // Autogenerated type: MultiplayerSessionManager/SessionType
    struct SessionType : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: SessionType
      constexpr SessionType(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MultiplayerSessionManager/SessionType Player
      static constexpr const int Player = 0;
      // Get static field: static public MultiplayerSessionManager/SessionType Player
      static GlobalNamespace::MultiplayerSessionManager::SessionType _get_Player();
      // Set static field: static public MultiplayerSessionManager/SessionType Player
      static void _set_Player(GlobalNamespace::MultiplayerSessionManager::SessionType value);
      // static field const value: static public MultiplayerSessionManager/SessionType Spectator
      static constexpr const int Spectator = 1;
      // Get static field: static public MultiplayerSessionManager/SessionType Spectator
      static GlobalNamespace::MultiplayerSessionManager::SessionType _get_Spectator();
      // Set static field: static public MultiplayerSessionManager/SessionType Spectator
      static void _set_Spectator(GlobalNamespace::MultiplayerSessionManager::SessionType value);
      // static field const value: static public MultiplayerSessionManager/SessionType DedicatedServer
      static constexpr const int DedicatedServer = 2;
      // Get static field: static public MultiplayerSessionManager/SessionType DedicatedServer
      static GlobalNamespace::MultiplayerSessionManager::SessionType _get_DedicatedServer();
      // Set static field: static public MultiplayerSessionManager/SessionType DedicatedServer
      static void _set_DedicatedServer(GlobalNamespace::MultiplayerSessionManager::SessionType value);
    }; // MultiplayerSessionManager/SessionType
    // Autogenerated type: MultiplayerSessionManager/ConnectionState
    struct ConnectionState : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: ConnectionState
      constexpr ConnectionState(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public MultiplayerSessionManager/ConnectionState Disconnected
      static constexpr const int Disconnected = 0;
      // Get static field: static public MultiplayerSessionManager/ConnectionState Disconnected
      static GlobalNamespace::MultiplayerSessionManager::ConnectionState _get_Disconnected();
      // Set static field: static public MultiplayerSessionManager/ConnectionState Disconnected
      static void _set_Disconnected(GlobalNamespace::MultiplayerSessionManager::ConnectionState value);
      // static field const value: static public MultiplayerSessionManager/ConnectionState Connecting
      static constexpr const int Connecting = 1;
      // Get static field: static public MultiplayerSessionManager/ConnectionState Connecting
      static GlobalNamespace::MultiplayerSessionManager::ConnectionState _get_Connecting();
      // Set static field: static public MultiplayerSessionManager/ConnectionState Connecting
      static void _set_Connecting(GlobalNamespace::MultiplayerSessionManager::ConnectionState value);
      // static field const value: static public MultiplayerSessionManager/ConnectionState Connected
      static constexpr const int Connected = 2;
      // Get static field: static public MultiplayerSessionManager/ConnectionState Connected
      static GlobalNamespace::MultiplayerSessionManager::ConnectionState _get_Connected();
      // Set static field: static public MultiplayerSessionManager/ConnectionState Connected
      static void _set_Connected(GlobalNamespace::MultiplayerSessionManager::ConnectionState value);
      // static field const value: static public MultiplayerSessionManager/ConnectionState Disconnecting
      static constexpr const int Disconnecting = 3;
      // Get static field: static public MultiplayerSessionManager/ConnectionState Disconnecting
      static GlobalNamespace::MultiplayerSessionManager::ConnectionState _get_Disconnecting();
      // Set static field: static public MultiplayerSessionManager/ConnectionState Disconnecting
      static void _set_Disconnecting(GlobalNamespace::MultiplayerSessionManager::ConnectionState value);
    }; // MultiplayerSessionManager/ConnectionState
    // private readonly NetworkPacketSerializer`2<MultiplayerSessionManager/MessageType,IConnectedPlayer> _packetSerializer
    // Offset: 0x30
    GlobalNamespace::NetworkPacketSerializer_2<GlobalNamespace::MultiplayerSessionManager_MessageType, GlobalNamespace::IConnectedPlayer*>* packetSerializer;
    // private readonly System.Collections.Generic.List`1<IConnectedPlayer> _connectedPlayers
    // Offset: 0x38
    System::Collections::Generic::List_1<GlobalNamespace::IConnectedPlayer*>* connectedPlayers;
    // private readonly System.Collections.Generic.HashSet`1<System.String> _localPlayerState
    // Offset: 0x40
    System::Collections::Generic::HashSet_1<::Il2CppString*>* localPlayerState;
    // private readonly SynchronizedActionQueue _synchronizedActionQueue
    // Offset: 0x48
    GlobalNamespace::SynchronizedActionQueue* synchronizedActionQueue;
    // private System.Int32 _maxPlayerCount
    // Offset: 0x50
    int maxPlayerCount;
    // private MultiplayerSessionManager/ConnectionState _connectionState
    // Offset: 0x54
    GlobalNamespace::MultiplayerSessionManager::ConnectionState connectionState;
    // private readonly System.Collections.Generic.Queue`1<System.Int32> _freeSortIndices
    // Offset: 0x58
    System::Collections::Generic::Queue_1<int>* freeSortIndices;
    // private System.Action connectedEvent
    // Offset: 0x60
    System::Action* connectedEvent;
    // private System.Action`1<ConnectionFailedReason> connectionFailedEvent
    // Offset: 0x68
    System::Action_1<GlobalNamespace::ConnectionFailedReason>* connectionFailedEvent;
    // private System.Action`1<IConnectedPlayer> playerConnectedEvent
    // Offset: 0x70
    System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerConnectedEvent;
    // private System.Action`1<IConnectedPlayer> playerDisconnectedEvent
    // Offset: 0x78
    System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerDisconnectedEvent;
    // private System.Action`1<IConnectedPlayer> playerStateChangedEvent
    // Offset: 0x80
    System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerStateChangedEvent;
    // private System.Action`1<DisconnectedReason> disconnectedEvent
    // Offset: 0x88
    System::Action_1<GlobalNamespace::DisconnectedReason>* disconnectedEvent;
    // private IConnectedPlayer <connectionOwner>k__BackingField
    // Offset: 0x90
    GlobalNamespace::IConnectedPlayer* connectionOwner;
    // private System.Boolean _exclusiveConnectedPlayerManager
    // Offset: 0x98
    bool exclusiveConnectedPlayerManager;
    // private ConnectedPlayerManager _connectedPlayerManager
    // Offset: 0xA0
    GlobalNamespace::ConnectedPlayerManager* connectedPlayerManager;
    // Creating interface conversion operator: operator GlobalNamespace::IMultiplayerSessionManager
    operator GlobalNamespace::IMultiplayerSessionManager() noexcept {
      return *reinterpret_cast<GlobalNamespace::IMultiplayerSessionManager*>(this);
    }
    // static field const value: static private System.String kMultiplayerSessionState
    static constexpr const char* kMultiplayerSessionState = "multiplayer_session";
    // Get static field: static private System.String kMultiplayerSessionState
    static ::Il2CppString* _get_kMultiplayerSessionState();
    // Set static field: static private System.String kMultiplayerSessionState
    static void _set_kMultiplayerSessionState(::Il2CppString* value);
    // private System.Void set_connectionOwner(IConnectedPlayer value)
    // Offset: 0x1E49AAC
    void set_connectionOwner(GlobalNamespace::IConnectedPlayer* value);
    // public ConnectedPlayerManager get_connectedPlayerManager()
    // Offset: 0x1E49C88
    GlobalNamespace::ConnectedPlayerManager* get_connectedPlayerManager();
    // public System.Void StartSession(MultiplayerSessionManager/SessionType sessionType, IConnectionInitParams`1<T> initParams)
    // Offset: 0xFFFFFFFF
    template<class T>
    void StartSession(GlobalNamespace::MultiplayerSessionManager::SessionType sessionType, GlobalNamespace::IConnectionInitParams_1<T>* initParams) {
      static_assert(std::is_base_of_v<GlobalNamespace::IConnectionManager, std::remove_pointer_t<T>>);
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "StartSession", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, sessionType, initParams));
    }
    // private System.Void InitInternal(MultiplayerSessionManager/SessionType sessionType)
    // Offset: 0x1E4A7DC
    void InitInternal(GlobalNamespace::MultiplayerSessionManager::SessionType sessionType);
    // private System.Void UpdateSynchronizedActions()
    // Offset: 0x1E49DD4
    void UpdateSynchronizedActions();
    // private System.Void HandleReinitialized()
    // Offset: 0x1E4AE8C
    void HandleReinitialized();
    // private System.Void HandleConnected()
    // Offset: 0x1E4AE9C
    void HandleConnected();
    // private System.Void HandleDisconnected(DisconnectedReason disconnectedReason)
    // Offset: 0x1E4AEAC
    void HandleDisconnected(GlobalNamespace::DisconnectedReason disconnectedReason);
    // private System.Void HandleConnectionFailed(ConnectionFailedReason reason)
    // Offset: 0x1E4AEBC
    void HandleConnectionFailed(GlobalNamespace::ConnectionFailedReason reason);
    // private System.Void HandleSyncTimeInitialized()
    // Offset: 0x1E4AECC
    void HandleSyncTimeInitialized();
    // private System.Void HandlePlayerConnected(IConnectedPlayer player)
    // Offset: 0x1E4AEDC
    void HandlePlayerConnected(GlobalNamespace::IConnectedPlayer* player);
    // private System.Void HandlePlayerDisconnected(IConnectedPlayer player)
    // Offset: 0x1E4B514
    void HandlePlayerDisconnected(GlobalNamespace::IConnectedPlayer* player);
    // private System.Void HandlePlayerStateChanged(IConnectedPlayer player)
    // Offset: 0x1E4B5F4
    void HandlePlayerStateChanged(GlobalNamespace::IConnectedPlayer* player);
    // private System.Void HandlePlayerOrderChanged(IConnectedPlayer player)
    // Offset: 0x1E4B67C
    void HandlePlayerOrderChanged(GlobalNamespace::IConnectedPlayer* player);
    // private System.Void UpdateConnectionState(UpdateConnectionStateReason updateReason, DisconnectedReason disconnectedReason, ConnectionFailedReason connectionFailedReason)
    // Offset: 0x1E49E68
    void UpdateConnectionState(GlobalNamespace::UpdateConnectionStateReason updateReason, GlobalNamespace::DisconnectedReason disconnectedReason, GlobalNamespace::ConnectionFailedReason connectionFailedReason);
    // private System.Boolean TryUpdateConnectedPlayer(IConnectedPlayer player, System.Boolean isPlayerConnected)
    // Offset: 0x1E4AFBC
    bool TryUpdateConnectedPlayer(GlobalNamespace::IConnectedPlayer* player, bool isPlayerConnected);
    // private System.Int32 GetNextAvailableSortIndex()
    // Offset: 0x1E4BA34
    int GetNextAvailableSortIndex();
    // public System.Void add_connectedEvent(System.Action value)
    // Offset: 0x1E492DC
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Void IMultiplayerSessionManager::add_connectedEvent(System.Action value)
    void add_connectedEvent(System::Action* value);
    // public System.Void remove_connectedEvent(System.Action value)
    // Offset: 0x1E49380
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Void IMultiplayerSessionManager::remove_connectedEvent(System.Action value)
    void remove_connectedEvent(System::Action* value);
    // public System.Void add_connectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    // Offset: 0x1E49424
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Void IMultiplayerSessionManager::add_connectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    void add_connectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value);
    // public System.Void remove_connectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    // Offset: 0x1E494C8
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Void IMultiplayerSessionManager::remove_connectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    void remove_connectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value);
    // public System.Void add_playerConnectedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x1E4956C
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Void IMultiplayerSessionManager::add_playerConnectedEvent(System.Action`1<IConnectedPlayer> value)
    void add_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void remove_playerConnectedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x1E49610
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Void IMultiplayerSessionManager::remove_playerConnectedEvent(System.Action`1<IConnectedPlayer> value)
    void remove_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void add_playerDisconnectedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x1E496B4
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Void IMultiplayerSessionManager::add_playerDisconnectedEvent(System.Action`1<IConnectedPlayer> value)
    void add_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void remove_playerDisconnectedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x1E49758
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Void IMultiplayerSessionManager::remove_playerDisconnectedEvent(System.Action`1<IConnectedPlayer> value)
    void remove_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void add_playerStateChangedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x1E497FC
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Void IMultiplayerSessionManager::add_playerStateChangedEvent(System.Action`1<IConnectedPlayer> value)
    void add_playerStateChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void remove_playerStateChangedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x1E498A0
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Void IMultiplayerSessionManager::remove_playerStateChangedEvent(System.Action`1<IConnectedPlayer> value)
    void remove_playerStateChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void add_disconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0x1E49944
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Void IMultiplayerSessionManager::add_disconnectedEvent(System.Action`1<DisconnectedReason> value)
    void add_disconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value);
    // public System.Void remove_disconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0x1E499E8
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Void IMultiplayerSessionManager::remove_disconnectedEvent(System.Action`1<DisconnectedReason> value)
    void remove_disconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value);
    // public System.Boolean get_isConnectionOwner()
    // Offset: 0x1E49A8C
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Boolean IMultiplayerSessionManager::get_isConnectionOwner()
    bool get_isConnectionOwner();
    // public IConnectedPlayer get_connectionOwner()
    // Offset: 0x1E49AA4
    // Implemented from: IMultiplayerSessionManager
    // Base method: IConnectedPlayer IMultiplayerSessionManager::get_connectionOwner()
    GlobalNamespace::IConnectedPlayer* get_connectionOwner();
    // public System.Boolean get_isSpectating()
    // Offset: 0x1E49AB4
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Boolean IMultiplayerSessionManager::get_isSpectating()
    bool get_isSpectating();
    // public System.Boolean get_isConnectingOrConnected()
    // Offset: 0x1E49B90
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Boolean IMultiplayerSessionManager::get_isConnectingOrConnected()
    bool get_isConnectingOrConnected();
    // public System.Boolean get_isConnected()
    // Offset: 0x1E49BB4
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Boolean IMultiplayerSessionManager::get_isConnected()
    bool get_isConnected();
    // public System.Boolean get_isConnecting()
    // Offset: 0x1E49BA4
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Boolean IMultiplayerSessionManager::get_isConnecting()
    bool get_isConnecting();
    // public System.Boolean get_isDisconnecting()
    // Offset: 0x1E49BC4
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Boolean IMultiplayerSessionManager::get_isDisconnecting()
    bool get_isDisconnecting();
    // public System.Collections.Generic.IReadOnlyList`1<IConnectedPlayer> get_connectedPlayers()
    // Offset: 0x1E49BD4
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Collections.Generic.IReadOnlyList`1<IConnectedPlayer> IMultiplayerSessionManager::get_connectedPlayers()
    System::Collections::Generic::IReadOnlyList_1<GlobalNamespace::IConnectedPlayer*>* get_connectedPlayers();
    // public System.Int32 get_connectedPlayerCount()
    // Offset: 0x1E49BDC
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Int32 IMultiplayerSessionManager::get_connectedPlayerCount()
    int get_connectedPlayerCount();
    // public System.Single get_syncTime()
    // Offset: 0x1E49C2C
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Single IMultiplayerSessionManager::get_syncTime()
    float get_syncTime();
    // public System.Boolean get_isSyncTimeInitialized()
    // Offset: 0x1E49C44
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Boolean IMultiplayerSessionManager::get_isSyncTimeInitialized()
    bool get_isSyncTimeInitialized();
    // public System.Single get_syncTimeDelay()
    // Offset: 0x1E49C58
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Single IMultiplayerSessionManager::get_syncTimeDelay()
    float get_syncTimeDelay();
    // public IConnectedPlayer get_localPlayer()
    // Offset: 0x1E49C70
    // Implemented from: IMultiplayerSessionManager
    // Base method: IConnectedPlayer IMultiplayerSessionManager::get_localPlayer()
    GlobalNamespace::IConnectedPlayer* get_localPlayer();
    // public System.Int32 get_maxPlayerCount()
    // Offset: 0x1E49C90
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Int32 IMultiplayerSessionManager::get_maxPlayerCount()
    int get_maxPlayerCount();
    // protected override System.Void Start()
    // Offset: 0x1E49C98
    // Implemented from: StandaloneMonobehavior
    // Base method: System.Void StandaloneMonobehavior::Start()
    void Start();
    // protected override System.Void Update()
    // Offset: 0x1E49D9C
    // Implemented from: StandaloneMonobehavior
    // Base method: System.Void StandaloneMonobehavior::Update()
    void Update();
    // protected override System.Void OnDestroy()
    // Offset: 0x1E49E38
    // Implemented from: StandaloneMonobehavior
    // Base method: System.Void StandaloneMonobehavior::OnDestroy()
    void OnDestroy();
    // protected override System.Void OnApplicationPause(System.Boolean pauseStatus)
    // Offset: 0x1E4A62C
    // Implemented from: StandaloneMonobehavior
    // Base method: System.Void StandaloneMonobehavior::OnApplicationPause(System.Boolean pauseStatus)
    void OnApplicationPause(bool pauseStatus);
    // public System.Void RegisterSerializer(MultiplayerSessionManager/MessageType serializerType, INetworkPacketSubSerializer`1<IConnectedPlayer> subSerializer)
    // Offset: 0x1E4A68C
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Void IMultiplayerSessionManager::RegisterSerializer(MultiplayerSessionManager/MessageType serializerType, INetworkPacketSubSerializer`1<IConnectedPlayer> subSerializer)
    void RegisterSerializer(GlobalNamespace::MultiplayerSessionManager_MessageType serializerType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>* subSerializer);
    // public System.Void UnregisterSerializer(MultiplayerSessionManager/MessageType serializerType, INetworkPacketSubSerializer`1<IConnectedPlayer> subSerializer)
    // Offset: 0x1E4A6FC
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Void IMultiplayerSessionManager::UnregisterSerializer(MultiplayerSessionManager/MessageType serializerType, INetworkPacketSubSerializer`1<IConnectedPlayer> subSerializer)
    void UnregisterSerializer(GlobalNamespace::MultiplayerSessionManager_MessageType serializerType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>* subSerializer);
    // public System.Void RegisterCallback(MultiplayerSessionManager/MessageType serializerType, System.Action`2<T,IConnectedPlayer> callback, System.Func`1<T> constructor)
    // Offset: 0xFFFFFFFF
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Void IMultiplayerSessionManager::RegisterCallback(MultiplayerSessionManager/MessageType serializerType, System.Action`2<T,IConnectedPlayer> callback, System.Func`1<T> constructor)
    template<class T>
    void RegisterCallback(GlobalNamespace::MultiplayerSessionManager_MessageType serializerType, System::Action_2<T, GlobalNamespace::IConnectedPlayer*>* callback, System::Func_1<T>* constructor) {
      static_assert(std::is_base_of_v<LiteNetLib::Utils::INetSerializable, std::remove_pointer_t<T>>);
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "RegisterCallback", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, serializerType, callback, constructor));
    }
    // public System.Void UnregisterCallback(MultiplayerSessionManager/MessageType serializerType)
    // Offset: 0xFFFFFFFF
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Void IMultiplayerSessionManager::UnregisterCallback(MultiplayerSessionManager/MessageType serializerType)
    template<class T>
    void UnregisterCallback(GlobalNamespace::MultiplayerSessionManager_MessageType serializerType) {
      static_assert(std::is_base_of_v<LiteNetLib::Utils::INetSerializable, std::remove_pointer_t<T>>);
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "UnregisterCallback", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, serializerType));
    }
    // public System.Void StartSession(ConnectedPlayerManager connectedPlayerManager)
    // Offset: 0x1E4A76C
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Void IMultiplayerSessionManager::StartSession(ConnectedPlayerManager connectedPlayerManager)
    void StartSession(GlobalNamespace::ConnectedPlayerManager* connectedPlayerManager);
    // public System.Void SetMaxPlayerCount(System.Int32 maxPlayerCount)
    // Offset: 0x1E4ABDC
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Void IMultiplayerSessionManager::SetMaxPlayerCount(System.Int32 maxPlayerCount)
    void SetMaxPlayerCount(int maxPlayerCount);
    // public System.Void EndSession()
    // Offset: 0x1E4A260
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Void IMultiplayerSessionManager::EndSession()
    void EndSession();
    // public System.Void Disconnect()
    // Offset: 0x1E4ABE4
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Void IMultiplayerSessionManager::Disconnect()
    void Disconnect();
    // public System.Void Send(T message)
    // Offset: 0xFFFFFFFF
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Void IMultiplayerSessionManager::Send(T message)
    template<class T>
    void Send(T message) {
      static_assert(std::is_base_of_v<LiteNetLib::Utils::INetSerializable, std::remove_pointer_t<T>>);
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "Send", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, message));
    }
    // public System.Void SendUnreliable(T message)
    // Offset: 0xFFFFFFFF
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Void IMultiplayerSessionManager::SendUnreliable(T message)
    template<class T>
    void SendUnreliable(T message) {
      static_assert(std::is_base_of_v<LiteNetLib::Utils::INetSerializable, std::remove_pointer_t<T>>);
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "SendUnreliable", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, message));
    }
    // public System.Void PerformAtSyncTime(System.Single syncTime, System.Action action)
    // Offset: 0x1E4AC4C
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Void IMultiplayerSessionManager::PerformAtSyncTime(System.Single syncTime, System.Action action)
    void PerformAtSyncTime(float syncTime, System::Action* action);
    // public IConnectedPlayer GetPlayerByUserId(System.String userId)
    // Offset: 0x1E4B6B4
    // Implemented from: IMultiplayerSessionManager
    // Base method: IConnectedPlayer IMultiplayerSessionManager::GetPlayerByUserId(System.String userId)
    GlobalNamespace::IConnectedPlayer* GetPlayerByUserId(::Il2CppString* userId);
    // public IConnectedPlayer GetConnectedPlayer(System.Int32 i)
    // Offset: 0x1E4B890
    // Implemented from: IMultiplayerSessionManager
    // Base method: IConnectedPlayer IMultiplayerSessionManager::GetConnectedPlayer(System.Int32 i)
    GlobalNamespace::IConnectedPlayer* GetConnectedPlayer(int i);
    // public IConnectedPlayer GetConnectedPlayerByUserId(System.String userId)
    // Offset: 0x1E4B7C0
    // Implemented from: IMultiplayerSessionManager
    // Base method: IConnectedPlayer IMultiplayerSessionManager::GetConnectedPlayerByUserId(System.String userId)
    GlobalNamespace::IConnectedPlayer* GetConnectedPlayerByUserId(::Il2CppString* userId);
    // public System.Void SetLocalPlayerState(System.String state, System.Boolean hasState)
    // Offset: 0x1E49CEC
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Void IMultiplayerSessionManager::SetLocalPlayerState(System.String state, System.Boolean hasState)
    void SetLocalPlayerState(::Il2CppString* state, bool hasState);
    // public System.Boolean LocalPlayerHasState(System.String state)
    // Offset: 0x1E4B910
    // Implemented from: IMultiplayerSessionManager
    // Base method: System.Boolean IMultiplayerSessionManager::LocalPlayerHasState(System.String state)
    bool LocalPlayerHasState(::Il2CppString* state);
    // public System.Void .ctor()
    // Offset: 0x1E4BACC
    // Implemented from: StandaloneMonobehavior
    // Base method: System.Void StandaloneMonobehavior::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static MultiplayerSessionManager* New_ctor();
  }; // MultiplayerSessionManager
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerSessionManager*, "", "MultiplayerSessionManager");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerSessionManager::SessionType, "", "MultiplayerSessionManager/SessionType");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerSessionManager::ConnectionState, "", "MultiplayerSessionManager/ConnectionState");
#pragma pack(pop)
