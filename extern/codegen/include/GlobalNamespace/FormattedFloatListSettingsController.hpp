// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ListSettingsController
#include "GlobalNamespace/ListSettingsController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x55
  #pragma pack(push, 1)
  // Autogenerated type: FormattedFloatListSettingsController
  // [] Offset: FFFFFFFF
  class FormattedFloatListSettingsController : public GlobalNamespace::ListSettingsController {
    public:
    // Nested type: GlobalNamespace::FormattedFloatListSettingsController::ValueType
    struct ValueType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: FormattedFloatListSettingsController/ValueType
    // [] Offset: FFFFFFFF
    struct ValueType/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: ValueType
      constexpr ValueType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public FormattedFloatListSettingsController/ValueType Normal
      static constexpr const int Normal = 0;
      // Get static field: static public FormattedFloatListSettingsController/ValueType Normal
      static GlobalNamespace::FormattedFloatListSettingsController::ValueType _get_Normal();
      // Set static field: static public FormattedFloatListSettingsController/ValueType Normal
      static void _set_Normal(GlobalNamespace::FormattedFloatListSettingsController::ValueType value);
      // static field const value: static public FormattedFloatListSettingsController/ValueType Normalized
      static constexpr const int Normalized = 1;
      // Get static field: static public FormattedFloatListSettingsController/ValueType Normalized
      static GlobalNamespace::FormattedFloatListSettingsController::ValueType _get_Normalized();
      // Set static field: static public FormattedFloatListSettingsController/ValueType Normalized
      static void _set_Normalized(GlobalNamespace::FormattedFloatListSettingsController::ValueType value);
      // static field const value: static public FormattedFloatListSettingsController/ValueType InvertedNormalized
      static constexpr const int InvertedNormalized = 2;
      // Get static field: static public FormattedFloatListSettingsController/ValueType InvertedNormalized
      static GlobalNamespace::FormattedFloatListSettingsController::ValueType _get_InvertedNormalized();
      // Set static field: static public FormattedFloatListSettingsController/ValueType InvertedNormalized
      static void _set_InvertedNormalized(GlobalNamespace::FormattedFloatListSettingsController::ValueType value);
    }; // FormattedFloatListSettingsController/ValueType
    #pragma pack(pop)
    static check_size<sizeof(FormattedFloatListSettingsController::ValueType), 0 + sizeof(int)> __GlobalNamespace_FormattedFloatListSettingsController_ValueTypeSizeCheck;
    static_assert(sizeof(FormattedFloatListSettingsController::ValueType) == 0x4);
    // private System.Single[] _values
    // Size: 0x8
    // Offset: 0x28
    ::Array<float>* values;
    // Field size check
    static_assert(sizeof(::Array<float>*) == 0x8);
    // private System.String _formattingString
    // Size: 0x8
    // Offset: 0x30
    ::Il2CppString* formattingString;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private FormattedFloatListSettingsController/ValueType valueType
    // Size: 0x4
    // Offset: 0x38
    GlobalNamespace::FormattedFloatListSettingsController::ValueType valueType;
    // Field size check
    static_assert(sizeof(GlobalNamespace::FormattedFloatListSettingsController::ValueType) == 0x4);
    // Padding between fields: valueType and: valueDidChangeEvent
    char __padding2[0x4] = {};
    // [CompilerGeneratedAttribute] Offset: 0xD411AC
    // private System.Action`2<FormattedFloatListSettingsController,System.Single> valueDidChangeEvent
    // Size: 0x8
    // Offset: 0x40
    System::Action_2<GlobalNamespace::FormattedFloatListSettingsController*, float>* valueDidChangeEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<GlobalNamespace::FormattedFloatListSettingsController*, float>*) == 0x8);
    // private System.Single _value
    // Size: 0x4
    // Offset: 0x48
    float value;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _min
    // Size: 0x4
    // Offset: 0x4C
    float min;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _max
    // Size: 0x4
    // Offset: 0x50
    float max;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _hasValue
    // Size: 0x1
    // Offset: 0x54
    bool hasValue;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: FormattedFloatListSettingsController
    FormattedFloatListSettingsController(::Array<float>* values_ = {}, ::Il2CppString* formattingString_ = {}, GlobalNamespace::FormattedFloatListSettingsController::ValueType valueType_ = {}, System::Action_2<GlobalNamespace::FormattedFloatListSettingsController*, float>* valueDidChangeEvent_ = {}, float value_ = {}, float min_ = {}, float max_ = {}, bool hasValue_ = {}) noexcept : values{values_}, formattingString{formattingString_}, valueType{valueType_}, valueDidChangeEvent{valueDidChangeEvent_}, value{value_}, min{min_}, max{max_}, hasValue{hasValue_} {}
    // public System.Void add_valueDidChangeEvent(System.Action`2<FormattedFloatListSettingsController,System.Single> value)
    // Offset: 0xF3075C
    void add_valueDidChangeEvent(System::Action_2<GlobalNamespace::FormattedFloatListSettingsController*, float>* value);
    // public System.Void remove_valueDidChangeEvent(System.Action`2<FormattedFloatListSettingsController,System.Single> value)
    // Offset: 0xF30800
    void remove_valueDidChangeEvent(System::Action_2<GlobalNamespace::FormattedFloatListSettingsController*, float>* value);
    // public System.Single get_value()
    // Offset: 0xF308A4
    float get_value();
    // public System.Single[] get_values()
    // Offset: 0xF308AC
    ::Array<float>* get_values();
    // public System.Void set_values(System.Single[] value)
    // Offset: 0xF308B4
    void set_values(::Array<float>* value);
    // public System.Void SetValue(System.Single value, System.Boolean callCallback)
    // Offset: 0xF308E4
    void SetValue(float value, bool callCallback);
    // protected override System.Boolean GetInitValues(out System.Int32 idx, out System.Int32 numberOfElements)
    // Offset: 0xF308FC
    // Implemented from: ListSettingsController
    // Base method: System.Boolean ListSettingsController::GetInitValues(out System.Int32 idx, out System.Int32 numberOfElements)
    bool GetInitValues(int& idx, int& numberOfElements);
    // protected override System.Void ApplyValue(System.Int32 idx)
    // Offset: 0xF30A54
    // Implemented from: ListSettingsController
    // Base method: System.Void ListSettingsController::ApplyValue(System.Int32 idx)
    void ApplyValue(int idx);
    // protected override System.String TextForValue(System.Int32 idx)
    // Offset: 0xF30AF8
    // Implemented from: ListSettingsController
    // Base method: System.String ListSettingsController::TextForValue(System.Int32 idx)
    ::Il2CppString* TextForValue(int idx);
    // public System.Void .ctor()
    // Offset: 0xF30BE4
    // Implemented from: ListSettingsController
    // Base method: System.Void ListSettingsController::.ctor()
    // Base method: System.Void IncDecSettingsController::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FormattedFloatListSettingsController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::FormattedFloatListSettingsController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FormattedFloatListSettingsController*, creationType>()));
    }
  }; // FormattedFloatListSettingsController
  #pragma pack(pop)
  static check_size<sizeof(FormattedFloatListSettingsController), 84 + sizeof(bool)> __GlobalNamespace_FormattedFloatListSettingsControllerSizeCheck;
  static_assert(sizeof(FormattedFloatListSettingsController) == 0x55);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::FormattedFloatListSettingsController*, "", "FormattedFloatListSettingsController");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::FormattedFloatListSettingsController::ValueType, "", "FormattedFloatListSettingsController/ValueType");
