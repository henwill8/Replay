// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRPose
#include "GlobalNamespace/OVRPose.hpp"
// Including type: OVRManager/TrackingOrigin
#include "GlobalNamespace/OVRManager.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: EyeFov because it is already included!
  // Skipping declaration: EyeRenderDesc because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: UnityEngine::XR
namespace UnityEngine::XR {
  // Forward declaring type: XRNode
  struct XRNode;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x50
  #pragma pack(push, 1)
  // Autogenerated type: OVRDisplay
  // [] Offset: FFFFFFFF
  class OVRDisplay : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::OVRDisplay::EyeFov
    struct EyeFov;
    // Nested type: GlobalNamespace::OVRDisplay::EyeRenderDesc
    struct EyeRenderDesc;
    // Nested type: GlobalNamespace::OVRDisplay::LatencyData
    struct LatencyData;
    // Size: 0x10
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRDisplay/EyeFov
    // [] Offset: FFFFFFFF
    struct EyeFov/*, public System::ValueType*/ {
      public:
      // public System.Single UpFov
      // Size: 0x4
      // Offset: 0x0
      float UpFov;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single DownFov
      // Size: 0x4
      // Offset: 0x4
      float DownFov;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single LeftFov
      // Size: 0x4
      // Offset: 0x8
      float LeftFov;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // public System.Single RightFov
      // Size: 0x4
      // Offset: 0xC
      float RightFov;
      // Field size check
      static_assert(sizeof(float) == 0x4);
      // Creating value type constructor for type: EyeFov
      constexpr EyeFov(float UpFov_ = {}, float DownFov_ = {}, float LeftFov_ = {}, float RightFov_ = {}) noexcept : UpFov{UpFov_}, DownFov{DownFov_}, LeftFov{LeftFov_}, RightFov{RightFov_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
    }; // OVRDisplay/EyeFov
    #pragma pack(pop)
    static check_size<sizeof(OVRDisplay::EyeFov), 12 + sizeof(float)> __GlobalNamespace_OVRDisplay_EyeFovSizeCheck;
    static_assert(sizeof(OVRDisplay::EyeFov) == 0x10);
    // Size: 0x20
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: OVRDisplay/EyeRenderDesc
    // [] Offset: FFFFFFFF
    struct EyeRenderDesc/*, public System::ValueType*/ {
      public:
      // public UnityEngine.Vector2 resolution
      // Size: 0x8
      // Offset: 0x0
      UnityEngine::Vector2 resolution;
      // Field size check
      static_assert(sizeof(UnityEngine::Vector2) == 0x8);
      // public UnityEngine.Vector2 fov
      // Size: 0x8
      // Offset: 0x8
      UnityEngine::Vector2 fov;
      // Field size check
      static_assert(sizeof(UnityEngine::Vector2) == 0x8);
      // public OVRDisplay/EyeFov fullFov
      // Size: 0x10
      // Offset: 0x10
      GlobalNamespace::OVRDisplay::EyeFov fullFov;
      // Field size check
      static_assert(sizeof(GlobalNamespace::OVRDisplay::EyeFov) == 0x10);
      // Creating value type constructor for type: EyeRenderDesc
      constexpr EyeRenderDesc(UnityEngine::Vector2 resolution_ = {}, UnityEngine::Vector2 fov_ = {}, GlobalNamespace::OVRDisplay::EyeFov fullFov_ = {}) noexcept : resolution{resolution_}, fov{fov_}, fullFov{fullFov_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
    }; // OVRDisplay/EyeRenderDesc
    #pragma pack(pop)
    static check_size<sizeof(OVRDisplay::EyeRenderDesc), 16 + sizeof(GlobalNamespace::OVRDisplay::EyeFov)> __GlobalNamespace_OVRDisplay_EyeRenderDescSizeCheck;
    static_assert(sizeof(OVRDisplay::EyeRenderDesc) == 0x20);
    // private System.Boolean needsConfigureTexture
    // Size: 0x1
    // Offset: 0x10
    bool needsConfigureTexture;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: needsConfigureTexture and: eyeDescs
    char __padding0[0x7] = {};
    // private OVRDisplay/EyeRenderDesc[] eyeDescs
    // Size: 0x8
    // Offset: 0x18
    ::Array<GlobalNamespace::OVRDisplay::EyeRenderDesc>* eyeDescs;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::OVRDisplay::EyeRenderDesc>*) == 0x8);
    // private System.Boolean recenterRequested
    // Size: 0x1
    // Offset: 0x20
    bool recenterRequested;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: recenterRequested and: recenterRequestedFrameCount
    char __padding2[0x3] = {};
    // private System.Int32 recenterRequestedFrameCount
    // Size: 0x4
    // Offset: 0x24
    int recenterRequestedFrameCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private OVRPose previousRelativeTrackingSpacePose
    // Size: 0x1C
    // Offset: 0x28
    GlobalNamespace::OVRPose previousRelativeTrackingSpacePose;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRPose) == 0x1C);
    // private OVRManager/TrackingOrigin previousTrackingOrigin
    // Size: 0x4
    // Offset: 0x44
    GlobalNamespace::OVRManager::TrackingOrigin previousTrackingOrigin;
    // Field size check
    static_assert(sizeof(GlobalNamespace::OVRManager::TrackingOrigin) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xCF7860
    // private System.Action RecenteredPose
    // Size: 0x8
    // Offset: 0x48
    System::Action* RecenteredPose;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // Creating value type constructor for type: OVRDisplay
    OVRDisplay(bool needsConfigureTexture_ = {}, ::Array<GlobalNamespace::OVRDisplay::EyeRenderDesc>* eyeDescs_ = {}, bool recenterRequested_ = {}, int recenterRequestedFrameCount_ = {}, GlobalNamespace::OVRPose previousRelativeTrackingSpacePose_ = {}, GlobalNamespace::OVRManager::TrackingOrigin previousTrackingOrigin_ = {}, System::Action* RecenteredPose_ = {}) noexcept : needsConfigureTexture{needsConfigureTexture_}, eyeDescs{eyeDescs_}, recenterRequested{recenterRequested_}, recenterRequestedFrameCount{recenterRequestedFrameCount_}, previousRelativeTrackingSpacePose{previousRelativeTrackingSpacePose_}, previousTrackingOrigin{previousTrackingOrigin_}, RecenteredPose{RecenteredPose_} {}
    // public System.Void Update()
    // Offset: 0x11AB324
    void Update();
    // public System.Void add_RecenteredPose(System.Action value)
    // Offset: 0x11AB610
    void add_RecenteredPose(System::Action* value);
    // public System.Void remove_RecenteredPose(System.Action value)
    // Offset: 0x11AB6B4
    void remove_RecenteredPose(System::Action* value);
    // public System.Void RecenterPose()
    // Offset: 0x11AB758
    void RecenterPose();
    // public UnityEngine.Vector3 get_acceleration()
    // Offset: 0x11AB7D4
    UnityEngine::Vector3 get_acceleration();
    // public UnityEngine.Vector3 get_angularAcceleration()
    // Offset: 0x11AB900
    UnityEngine::Vector3 get_angularAcceleration();
    // public UnityEngine.Vector3 get_velocity()
    // Offset: 0x11ABA2C
    UnityEngine::Vector3 get_velocity();
    // public UnityEngine.Vector3 get_angularVelocity()
    // Offset: 0x11ABB58
    UnityEngine::Vector3 get_angularVelocity();
    // public OVRDisplay/EyeRenderDesc GetEyeRenderDesc(UnityEngine.XR.XRNode eye)
    // Offset: 0x11AB0EC
    GlobalNamespace::OVRDisplay::EyeRenderDesc GetEyeRenderDesc(UnityEngine::XR::XRNode eye);
    // public OVRDisplay/LatencyData get_latency()
    // Offset: 0x11ABC84
    GlobalNamespace::OVRDisplay::LatencyData get_latency();
    // public System.Single get_appFramerate()
    // Offset: 0x11ABE50
    float get_appFramerate();
    // public System.Int32 get_recommendedMSAALevel()
    // Offset: 0x11ABEEC
    int get_recommendedMSAALevel();
    // public System.Single[] get_displayFrequenciesAvailable()
    // Offset: 0x11ABF58
    ::Array<float>* get_displayFrequenciesAvailable();
    // public System.Single get_displayFrequency()
    // Offset: 0x11ABFB8
    float get_displayFrequency();
    // public System.Void set_displayFrequency(System.Single value)
    // Offset: 0x11AC018
    void set_displayFrequency(float value);
    // private System.Void UpdateTextures()
    // Offset: 0x11AB2F8
    void UpdateTextures();
    // private System.Void ConfigureEyeDesc(UnityEngine.XR.XRNode eye)
    // Offset: 0x11AC088
    void ConfigureEyeDesc(UnityEngine::XR::XRNode eye);
    // public System.Void .ctor()
    // Offset: 0x11AB148
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRDisplay* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRDisplay::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRDisplay*, creationType>()));
    }
  }; // OVRDisplay
  #pragma pack(pop)
  static check_size<sizeof(OVRDisplay), 72 + sizeof(System::Action*)> __GlobalNamespace_OVRDisplaySizeCheck;
  static_assert(sizeof(OVRDisplay) == 0x50);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRDisplay*, "", "OVRDisplay");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRDisplay::EyeFov, "", "OVRDisplay/EyeFov");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRDisplay::EyeRenderDesc, "", "OVRDisplay/EyeRenderDesc");
