// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: IPlatformUserModel
#include "GlobalNamespace/IPlatformUserModel.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: UserInfo
  class UserInfo;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IReadOnlyList`1<T>
  template<typename T>
  class IReadOnlyList_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: TestPlatformUserModel
  class TestPlatformUserModel : public ::Il2CppObject/*, public GlobalNamespace::IPlatformUserModel*/ {
    public:
    // Nested type: GlobalNamespace::TestPlatformUserModel::$GetUserInfo$d__0
    struct $GetUserInfo$d__0;
    // Nested type: GlobalNamespace::TestPlatformUserModel::$GetUserFriendsUserIds$d__1
    struct $GetUserFriendsUserIds$d__1;
    // Nested type: GlobalNamespace::TestPlatformUserModel::$GetUserAuthToken$d__2
    struct $GetUserAuthToken$d__2;
    // Nested type: GlobalNamespace::TestPlatformUserModel::$GetUserNamesForUserIds$d__3
    struct $GetUserNamesForUserIds$d__3;
    // Creating interface conversion operator: operator GlobalNamespace::IPlatformUserModel
    operator GlobalNamespace::IPlatformUserModel() noexcept {
      return *reinterpret_cast<GlobalNamespace::IPlatformUserModel*>(this);
    }
    // public System.Threading.Tasks.Task`1<UserInfo> GetUserInfo()
    // Offset: 0xFEBB40
    // Implemented from: IPlatformUserModel
    // Base method: System.Threading.Tasks.Task`1<UserInfo> IPlatformUserModel::GetUserInfo()
    System::Threading::Tasks::Task_1<GlobalNamespace::UserInfo*>* GetUserInfo();
    // public System.Threading.Tasks.Task`1<System.Collections.Generic.IReadOnlyList`1<System.String>> GetUserFriendsUserIds(System.Boolean cached)
    // Offset: 0xFEBC4C
    // Implemented from: IPlatformUserModel
    // Base method: System.Threading.Tasks.Task`1<System.Collections.Generic.IReadOnlyList`1<System.String>> IPlatformUserModel::GetUserFriendsUserIds(System.Boolean cached)
    System::Threading::Tasks::Task_1<System::Collections::Generic::IReadOnlyList_1<::Il2CppString*>*>* GetUserFriendsUserIds(bool cached);
    // public System.Threading.Tasks.Task`1<System.String> GetUserAuthToken()
    // Offset: 0xFEBD58
    // Implemented from: IPlatformUserModel
    // Base method: System.Threading.Tasks.Task`1<System.String> IPlatformUserModel::GetUserAuthToken()
    System::Threading::Tasks::Task_1<::Il2CppString*>* GetUserAuthToken();
    // public System.Threading.Tasks.Task`1<System.Collections.Generic.IReadOnlyList`1<System.String>> GetUserNamesForUserIds(System.Collections.Generic.IReadOnlyList`1<System.String> userIds)
    // Offset: 0xFEBE64
    // Implemented from: IPlatformUserModel
    // Base method: System.Threading.Tasks.Task`1<System.Collections.Generic.IReadOnlyList`1<System.String>> IPlatformUserModel::GetUserNamesForUserIds(System.Collections.Generic.IReadOnlyList`1<System.String> userIds)
    System::Threading::Tasks::Task_1<System::Collections::Generic::IReadOnlyList_1<::Il2CppString*>*>* GetUserNamesForUserIds(System::Collections::Generic::IReadOnlyList_1<::Il2CppString*>* userIds);
    // public System.Void .ctor()
    // Offset: 0xFEBF7C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static TestPlatformUserModel* New_ctor();
  }; // TestPlatformUserModel
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::TestPlatformUserModel*, "", "TestPlatformUserModel");
#pragma pack(pop)
