// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PlayerController
  class PlayerController;
  // Forward declaring type: AudioTimeSyncController
  class AudioTimeSyncController;
  // Forward declaring type: NoteCutDirection
  struct NoteCutDirection;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: NoteJump
  class NoteJump : public UnityEngine::MonoBehaviour {
    public:
    // private UnityEngine.Transform _rotatedObject
    // Offset: 0x18
    UnityEngine::Transform* rotatedObject;
    // private System.Single _yAvoidanceUp
    // Offset: 0x20
    float yAvoidanceUp;
    // private System.Single _yAvoidanceDown
    // Offset: 0x24
    float yAvoidanceDown;
    // private System.Single _endDistanceOffest
    // Offset: 0x28
    float endDistanceOffest;
    // private PlayerController _playerController
    // Offset: 0x30
    GlobalNamespace::PlayerController* playerController;
    // private AudioTimeSyncController _audioTimeSyncController
    // Offset: 0x38
    GlobalNamespace::AudioTimeSyncController* audioTimeSyncController;
    // private System.Action noteJumpDidFinishEvent
    // Offset: 0x40
    System::Action* noteJumpDidFinishEvent;
    // private System.Action noteJumpDidPassMissedMarkerEvent
    // Offset: 0x48
    System::Action* noteJumpDidPassMissedMarkerEvent;
    // private System.Action`1<NoteJump> noteJumpDidPassThreeQuartersEvent
    // Offset: 0x50
    System::Action_1<GlobalNamespace::NoteJump*>* noteJumpDidPassThreeQuartersEvent;
    // private System.Action noteJumpDidPassHalfEvent
    // Offset: 0x58
    System::Action* noteJumpDidPassHalfEvent;
    // private UnityEngine.Vector3 _startPos
    // Offset: 0x60
    UnityEngine::Vector3 startPos;
    // private UnityEngine.Vector3 _endPos
    // Offset: 0x6C
    UnityEngine::Vector3 endPos;
    // private System.Single _jumpDuration
    // Offset: 0x78
    float jumpDuration;
    // private UnityEngine.Vector3 _moveVec
    // Offset: 0x7C
    UnityEngine::Vector3 moveVec;
    // private System.Single _beatTime
    // Offset: 0x88
    float beatTime;
    // private System.Single _startVerticalVelocity
    // Offset: 0x8C
    float startVerticalVelocity;
    // private UnityEngine.Quaternion _startRotation
    // Offset: 0x90
    UnityEngine::Quaternion startRotation;
    // private UnityEngine.Quaternion _middleRotation
    // Offset: 0xA0
    UnityEngine::Quaternion middleRotation;
    // private UnityEngine.Quaternion _endRotation
    // Offset: 0xB0
    UnityEngine::Quaternion endRotation;
    // private System.Single _gravity
    // Offset: 0xC0
    float gravity;
    // private System.Single _yAvoidance
    // Offset: 0xC4
    float yAvoidance;
    // private System.Single _missedTime
    // Offset: 0xC8
    float missedTime;
    // private System.Boolean _missedMarkReported
    // Offset: 0xCC
    bool missedMarkReported;
    // private System.Boolean _threeQuartersMarkReported
    // Offset: 0xCD
    bool threeQuartersMarkReported;
    // private System.Boolean _halfJumpMarkReported
    // Offset: 0xCE
    bool halfJumpMarkReported;
    // private UnityEngine.Vector3 _localPosition
    // Offset: 0xD0
    UnityEngine::Vector3 localPosition;
    // private readonly UnityEngine.Vector3[] _randomRotations
    // Offset: 0xE0
    ::Array<UnityEngine::Vector3>* randomRotations;
    // private System.Int32 _randomRotationIdx
    // Offset: 0xE8
    int randomRotationIdx;
    // private UnityEngine.Quaternion _worldRotation
    // Offset: 0xEC
    UnityEngine::Quaternion worldRotation;
    // private UnityEngine.Quaternion _inverseWorldRotation
    // Offset: 0xFC
    UnityEngine::Quaternion inverseWorldRotation;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static public System.Single kMissedTimeOffset
    static constexpr const float kMissedTimeOffset = 0.15;
    // Get static field: static public System.Single kMissedTimeOffset
    static float _get_kMissedTimeOffset();
    // Set static field: static public System.Single kMissedTimeOffset
    static void _set_kMissedTimeOffset(float value);
    // public System.Void add_noteJumpDidFinishEvent(System.Action value)
    // Offset: 0xC2FFAC
    void add_noteJumpDidFinishEvent(System::Action* value);
    // public System.Void remove_noteJumpDidFinishEvent(System.Action value)
    // Offset: 0xC30050
    void remove_noteJumpDidFinishEvent(System::Action* value);
    // public System.Void add_noteJumpDidPassMissedMarkerEvent(System.Action value)
    // Offset: 0xC300F4
    void add_noteJumpDidPassMissedMarkerEvent(System::Action* value);
    // public System.Void remove_noteJumpDidPassMissedMarkerEvent(System.Action value)
    // Offset: 0xC30198
    void remove_noteJumpDidPassMissedMarkerEvent(System::Action* value);
    // public System.Void add_noteJumpDidPassThreeQuartersEvent(System.Action`1<NoteJump> value)
    // Offset: 0xC3023C
    void add_noteJumpDidPassThreeQuartersEvent(System::Action_1<GlobalNamespace::NoteJump*>* value);
    // public System.Void remove_noteJumpDidPassThreeQuartersEvent(System.Action`1<NoteJump> value)
    // Offset: 0xC302E0
    void remove_noteJumpDidPassThreeQuartersEvent(System::Action_1<GlobalNamespace::NoteJump*>* value);
    // public System.Void add_noteJumpDidPassHalfEvent(System.Action value)
    // Offset: 0xC30384
    void add_noteJumpDidPassHalfEvent(System::Action* value);
    // public System.Void remove_noteJumpDidPassHalfEvent(System.Action value)
    // Offset: 0xC30428
    void remove_noteJumpDidPassHalfEvent(System::Action* value);
    // public System.Single get_distanceToPlayer()
    // Offset: 0xC304CC
    float get_distanceToPlayer();
    // public UnityEngine.Vector3 get_beatPos()
    // Offset: 0xC305BC
    UnityEngine::Vector3 get_beatPos();
    // public System.Single get_jumpDuration()
    // Offset: 0xC30668
    float get_jumpDuration();
    // public UnityEngine.Vector3 get_moveVec()
    // Offset: 0xC30670
    UnityEngine::Vector3 get_moveVec();
    // public System.Void Init(System.Single beatTime, System.Single worldRotation, UnityEngine.Vector3 startPos, UnityEngine.Vector3 endPos, System.Single jumpDuration, System.Single gravity, System.Single flipYSide, NoteCutDirection cutDirection, System.Single cutDirectionAngleOffset)
    // Offset: 0xC3067C
    void Init(float beatTime, float worldRotation, UnityEngine::Vector3 startPos, UnityEngine::Vector3 endPos, float jumpDuration, float gravity, float flipYSide, GlobalNamespace::NoteCutDirection cutDirection, float cutDirectionAngleOffset);
    // private System.Single EaseInOutQuad(System.Single t)
    // Offset: 0xC309C4
    float EaseInOutQuad(float t);
    // public UnityEngine.Vector3 ManualUpdate()
    // Offset: 0xC309F4
    UnityEngine::Vector3 ManualUpdate();
    // public System.Void .ctor()
    // Offset: 0xC3103C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static NoteJump* New_ctor();
  }; // NoteJump
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::NoteJump*, "", "NoteJump");
#pragma pack(pop)
