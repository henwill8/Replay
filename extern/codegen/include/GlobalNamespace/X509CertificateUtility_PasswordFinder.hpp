// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: X509CertificateUtility
#include "GlobalNamespace/X509CertificateUtility.hpp"
// Including type: Org.BouncyCastle.OpenSsl.IPasswordFinder
#include "Org/BouncyCastle/OpenSsl/IPasswordFinder.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: X509CertificateUtility/PasswordFinder
  class X509CertificateUtility::PasswordFinder : public ::Il2CppObject/*, public Org::BouncyCastle::OpenSsl::IPasswordFinder*/ {
    public:
    // private readonly System.Char[] _password
    // Offset: 0x10
    ::Array<::Il2CppChar>* password;
    // Creating interface conversion operator: operator Org::BouncyCastle::OpenSsl::IPasswordFinder
    operator Org::BouncyCastle::OpenSsl::IPasswordFinder() noexcept {
      return *reinterpret_cast<Org::BouncyCastle::OpenSsl::IPasswordFinder*>(this);
    }
    // Creating conversion operator: operator ::Array<::Il2CppChar>*
    constexpr operator ::Array<::Il2CppChar>*() const noexcept {
      return password;
    }
    // public System.Void .ctor(System.Byte[] password)
    // Offset: 0x1E5A29C
    static X509CertificateUtility::PasswordFinder* New_ctor(::Array<uint8_t>* password);
    // public System.Void .ctor(System.String password)
    // Offset: 0x1E58D34
    static X509CertificateUtility::PasswordFinder* New_ctor(::Il2CppString* password);
    // public System.Char[] GetPassword()
    // Offset: 0x1E5A374
    // Implemented from: Org.BouncyCastle.OpenSsl.IPasswordFinder
    // Base method: System.Char[] IPasswordFinder::GetPassword()
    ::Array<::Il2CppChar>* GetPassword();
  }; // X509CertificateUtility/PasswordFinder
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::X509CertificateUtility::PasswordFinder*, "", "X509CertificateUtility/PasswordFinder");
#pragma pack(pop)
