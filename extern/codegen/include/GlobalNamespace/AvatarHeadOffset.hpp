// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AvatarPoseController
  class AvatarPoseController;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: AvatarHeadOffset
  // [] Offset: FFFFFFFF
  class AvatarHeadOffset : public UnityEngine::MonoBehaviour {
    public:
    // private UnityEngine.Vector3 _positionOffset
    // Size: 0xC
    // Offset: 0x18
    UnityEngine::Vector3 positionOffset;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector3) == 0xC);
    // Padding between fields: positionOffset and: avatarPoseController
    char __padding0[0x4] = {};
    // [InjectAttribute] Offset: 0xD33C24
    // private readonly AvatarPoseController _avatarPoseController
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::AvatarPoseController* avatarPoseController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AvatarPoseController*) == 0x8);
    // Creating value type constructor for type: AvatarHeadOffset
    AvatarHeadOffset(UnityEngine::Vector3 positionOffset_ = {}, GlobalNamespace::AvatarPoseController* avatarPoseController_ = {}) noexcept : positionOffset{positionOffset_}, avatarPoseController{avatarPoseController_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void Start()
    // Offset: 0x1033178
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0x10332AC
    void OnDestroy();
    // private System.Void HandleMultiplayerAvatarPoseControllerDidUpdatePose(UnityEngine.Vector3 headLocalPosition)
    // Offset: 0x1033428
    void HandleMultiplayerAvatarPoseControllerDidUpdatePose(UnityEngine::Vector3 headLocalPosition);
    // public System.Void .ctor()
    // Offset: 0x10334F8
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AvatarHeadOffset* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::AvatarHeadOffset::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AvatarHeadOffset*, creationType>()));
    }
  }; // AvatarHeadOffset
  #pragma pack(pop)
  static check_size<sizeof(AvatarHeadOffset), 40 + sizeof(GlobalNamespace::AvatarPoseController*)> __GlobalNamespace_AvatarHeadOffsetSizeCheck;
  static_assert(sizeof(AvatarHeadOffset) == 0x30);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::AvatarHeadOffset*, "", "AvatarHeadOffset");
