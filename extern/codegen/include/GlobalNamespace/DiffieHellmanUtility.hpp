// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IDiffieHellmanKeyPair
  class IDiffieHellmanKeyPair;
}
// Forward declaring namespace: Org::BouncyCastle::Security
namespace Org::BouncyCastle::Security {
  // Forward declaring type: SecureRandom
  class SecureRandom;
}
// Forward declaring namespace: Org::BouncyCastle::Crypto::Parameters
namespace Org::BouncyCastle::Crypto::Parameters {
  // Forward declaring type: DHParameters
  class DHParameters;
  // Forward declaring type: ECDomainParameters
  class ECDomainParameters;
}
// Forward declaring namespace: System::Threading::Tasks
namespace System::Threading::Tasks {
  // Forward declaring type: Task`1<TResult>
  template<typename TResult>
  class Task_1;
}
// Forward declaring namespace: Org::BouncyCastle::Crypto::Agreement
namespace Org::BouncyCastle::Crypto::Agreement {
  // Forward declaring type: DHBasicAgreement
  class DHBasicAgreement;
  // Forward declaring type: ECDHBasicAgreement
  class ECDHBasicAgreement;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: DiffieHellmanUtility
  class DiffieHellmanUtility : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::DiffieHellmanUtility::KeyType
    struct KeyType;
    // Nested type: GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair
    class DiffieHellmanKeyPair;
    // Nested type: GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair
    class ElipticalCurveKeyPair;
    // Nested type: GlobalNamespace::DiffieHellmanUtility::OperationTimer
    class OperationTimer;
    // Get static field: static private Org.BouncyCastle.Security.SecureRandom _secureRandom
    static Org::BouncyCastle::Security::SecureRandom* _get__secureRandom();
    // Set static field: static private Org.BouncyCastle.Security.SecureRandom _secureRandom
    static void _set__secureRandom(Org::BouncyCastle::Security::SecureRandom* value);
    // Get static field: static private Org.BouncyCastle.Crypto.Parameters.DHParameters _dhParameters
    static Org::BouncyCastle::Crypto::Parameters::DHParameters* _get__dhParameters();
    // Set static field: static private Org.BouncyCastle.Crypto.Parameters.DHParameters _dhParameters
    static void _set__dhParameters(Org::BouncyCastle::Crypto::Parameters::DHParameters* value);
    // Get static field: static private Org.BouncyCastle.Crypto.Parameters.ECDomainParameters _ecParameters
    static Org::BouncyCastle::Crypto::Parameters::ECDomainParameters* _get__ecParameters();
    // Set static field: static private Org.BouncyCastle.Crypto.Parameters.ECDomainParameters _ecParameters
    static void _set__ecParameters(Org::BouncyCastle::Crypto::Parameters::ECDomainParameters* value);
    // Get static field: static private System.Byte[] _ecPointFormats
    static ::Array<uint8_t>* _get__ecPointFormats();
    // Set static field: static private System.Byte[] _ecPointFormats
    static void _set__ecPointFormats(::Array<uint8_t>* value);
    // static private System.Void NoDomainReloadInit()
    // Offset: 0x1B4A460
    static void NoDomainReloadInit();
    // static public System.Threading.Tasks.Task`1<IDiffieHellmanKeyPair> GenerateKeysAsync(DiffieHellmanUtility/KeyType keyType)
    // Offset: 0x1B4A5B4
    static System::Threading::Tasks::Task_1<GlobalNamespace::IDiffieHellmanKeyPair*>* GenerateKeysAsync(GlobalNamespace::DiffieHellmanUtility::KeyType keyType);
    // static public IDiffieHellmanKeyPair GenerateKeys(DiffieHellmanUtility/KeyType keyType)
    // Offset: 0x1B4A670
    static GlobalNamespace::IDiffieHellmanKeyPair* GenerateKeys(GlobalNamespace::DiffieHellmanUtility::KeyType keyType);
    // static private DiffieHellmanUtility/DiffieHellmanKeyPair GenerateDiffieHellmanKeys()
    // Offset: 0x1B4A848
    static GlobalNamespace::DiffieHellmanUtility::DiffieHellmanKeyPair* GenerateDiffieHellmanKeys();
    // static private DiffieHellmanUtility/ElipticalCurveKeyPair GenerateElipticalCurveKeys()
    // Offset: 0x1B4A6F4
    static GlobalNamespace::DiffieHellmanUtility::ElipticalCurveKeyPair* GenerateElipticalCurveKeys();
    // static private System.Byte[] GetPreMasterSecret(Org.BouncyCastle.Crypto.Agreement.DHBasicAgreement dhBasicAgreement, System.Byte[] clientPublicKey)
    // Offset: 0x1B4AB18
    static ::Array<uint8_t>* GetPreMasterSecret(Org::BouncyCastle::Crypto::Agreement::DHBasicAgreement* dhBasicAgreement, ::Array<uint8_t>* clientPublicKey);
    // static private System.Byte[] GetPreMasterSecret(Org.BouncyCastle.Crypto.Agreement.ECDHBasicAgreement ecdhBasicAgreement, System.Byte[] clientPublicKey)
    // Offset: 0x1B4AC6C
    static ::Array<uint8_t>* GetPreMasterSecret(Org::BouncyCastle::Crypto::Agreement::ECDHBasicAgreement* ecdhBasicAgreement, ::Array<uint8_t>* clientPublicKey);
    // static private System.Void .cctor()
    // Offset: 0x1B4AE08
    static void _cctor();
  }; // DiffieHellmanUtility
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::DiffieHellmanUtility*, "", "DiffieHellmanUtility");
#pragma pack(pop)
