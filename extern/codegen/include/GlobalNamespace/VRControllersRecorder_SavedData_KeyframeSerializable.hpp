// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: VRControllersRecorder/SavedData
#include "GlobalNamespace/VRControllersRecorder_SavedData.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: VRControllersRecorder/SavedData/KeyframeSerializable
  // [] Offset: FFFFFFFF
  class VRControllersRecorder::SavedData::KeyframeSerializable : public ::Il2CppObject {
    public:
    // public System.Single _xPos1
    // Size: 0x4
    // Offset: 0x10
    float xPos1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _yPos1
    // Size: 0x4
    // Offset: 0x14
    float yPos1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _zPos1
    // Size: 0x4
    // Offset: 0x18
    float zPos1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _xPos2
    // Size: 0x4
    // Offset: 0x1C
    float xPos2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _yPos2
    // Size: 0x4
    // Offset: 0x20
    float yPos2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _zPos2
    // Size: 0x4
    // Offset: 0x24
    float zPos2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _xPos3
    // Size: 0x4
    // Offset: 0x28
    float xPos3;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _yPos3
    // Size: 0x4
    // Offset: 0x2C
    float yPos3;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _zPos3
    // Size: 0x4
    // Offset: 0x30
    float zPos3;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _xRot1
    // Size: 0x4
    // Offset: 0x34
    float xRot1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _yRot1
    // Size: 0x4
    // Offset: 0x38
    float yRot1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _zRot1
    // Size: 0x4
    // Offset: 0x3C
    float zRot1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _wRot1
    // Size: 0x4
    // Offset: 0x40
    float wRot1;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _xRot2
    // Size: 0x4
    // Offset: 0x44
    float xRot2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _yRot2
    // Size: 0x4
    // Offset: 0x48
    float yRot2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _zRot2
    // Size: 0x4
    // Offset: 0x4C
    float zRot2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _wRot2
    // Size: 0x4
    // Offset: 0x50
    float wRot2;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _xRot3
    // Size: 0x4
    // Offset: 0x54
    float xRot3;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _yRot3
    // Size: 0x4
    // Offset: 0x58
    float yRot3;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _zRot3
    // Size: 0x4
    // Offset: 0x5C
    float zRot3;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _wRot3
    // Size: 0x4
    // Offset: 0x60
    float wRot3;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // public System.Single _time
    // Size: 0x4
    // Offset: 0x64
    float time;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: KeyframeSerializable
    KeyframeSerializable(float xPos1_ = {}, float yPos1_ = {}, float zPos1_ = {}, float xPos2_ = {}, float yPos2_ = {}, float zPos2_ = {}, float xPos3_ = {}, float yPos3_ = {}, float zPos3_ = {}, float xRot1_ = {}, float yRot1_ = {}, float zRot1_ = {}, float wRot1_ = {}, float xRot2_ = {}, float yRot2_ = {}, float zRot2_ = {}, float wRot2_ = {}, float xRot3_ = {}, float yRot3_ = {}, float zRot3_ = {}, float wRot3_ = {}, float time_ = {}) noexcept : xPos1{xPos1_}, yPos1{yPos1_}, zPos1{zPos1_}, xPos2{xPos2_}, yPos2{yPos2_}, zPos2{zPos2_}, xPos3{xPos3_}, yPos3{yPos3_}, zPos3{zPos3_}, xRot1{xRot1_}, yRot1{yRot1_}, zRot1{zRot1_}, wRot1{wRot1_}, xRot2{xRot2_}, yRot2{yRot2_}, zRot2{zRot2_}, wRot2{wRot2_}, xRot3{xRot3_}, yRot3{yRot3_}, zRot3{zRot3_}, wRot3{wRot3_}, time{time_} {}
    // public System.Void .ctor()
    // Offset: 0x171D38C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VRControllersRecorder::SavedData::KeyframeSerializable* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::VRControllersRecorder::SavedData::KeyframeSerializable::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VRControllersRecorder::SavedData::KeyframeSerializable*, creationType>()));
    }
  }; // VRControllersRecorder/SavedData/KeyframeSerializable
  #pragma pack(pop)
  static check_size<sizeof(VRControllersRecorder::SavedData::KeyframeSerializable), 100 + sizeof(float)> __GlobalNamespace_VRControllersRecorder_SavedData_KeyframeSerializableSizeCheck;
  static_assert(sizeof(VRControllersRecorder::SavedData::KeyframeSerializable) == 0x68);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::VRControllersRecorder::SavedData::KeyframeSerializable*, "", "VRControllersRecorder/SavedData/KeyframeSerializable");
