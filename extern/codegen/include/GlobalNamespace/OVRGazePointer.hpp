// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRCursor
#include "GlobalNamespace/OVRCursor.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: OVRProgressIndicator
  class OVRProgressIndicator;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: OVRGazePointer
  class OVRGazePointer : public GlobalNamespace::OVRCursor {
    public:
    // private UnityEngine.Transform gazeIcon
    // Offset: 0x18
    UnityEngine::Transform* gazeIcon;
    // public System.Boolean hideByDefault
    // Offset: 0x20
    bool hideByDefault;
    // public System.Single showTimeoutPeriod
    // Offset: 0x24
    float showTimeoutPeriod;
    // public System.Single hideTimeoutPeriod
    // Offset: 0x28
    float hideTimeoutPeriod;
    // public System.Boolean dimOnHideRequest
    // Offset: 0x2C
    bool dimOnHideRequest;
    // public System.Single depthScaleMultiplier
    // Offset: 0x30
    float depthScaleMultiplier;
    // public System.Boolean matchNormalOnPhysicsColliders
    // Offset: 0x34
    bool matchNormalOnPhysicsColliders;
    // public UnityEngine.Transform rayTransform
    // Offset: 0x38
    UnityEngine::Transform* rayTransform;
    // private System.Boolean <hidden>k__BackingField
    // Offset: 0x40
    bool hidden;
    // private System.Single <currentScale>k__BackingField
    // Offset: 0x44
    float currentScale;
    // private System.Single depth
    // Offset: 0x48
    float depth;
    // private System.Single hideUntilTime
    // Offset: 0x4C
    float hideUntilTime;
    // private System.Int32 positionSetsThisFrame
    // Offset: 0x50
    int positionSetsThisFrame;
    // private System.Single lastShowRequestTime
    // Offset: 0x54
    float lastShowRequestTime;
    // private System.Single lastHideRequestTime
    // Offset: 0x58
    float lastHideRequestTime;
    // private OVRProgressIndicator progressIndicator
    // Offset: 0x60
    GlobalNamespace::OVRProgressIndicator* progressIndicator;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // Get static field: static private OVRGazePointer _instance
    static GlobalNamespace::OVRGazePointer* _get__instance();
    // Set static field: static private OVRGazePointer _instance
    static void _set__instance(GlobalNamespace::OVRGazePointer* value);
    // public System.Boolean get_hidden()
    // Offset: 0x1074524
    bool get_hidden();
    // private System.Void set_hidden(System.Boolean value)
    // Offset: 0x107452C
    void set_hidden(bool value);
    // public System.Single get_currentScale()
    // Offset: 0x1074538
    float get_currentScale();
    // private System.Void set_currentScale(System.Single value)
    // Offset: 0x1074540
    void set_currentScale(float value);
    // static public OVRGazePointer get_instance()
    // Offset: 0x1074548
    static GlobalNamespace::OVRGazePointer* get_instance();
    // public System.Single get_visibilityStrength()
    // Offset: 0x1074728
    float get_visibilityStrength();
    // public System.Single get_SelectionProgress()
    // Offset: 0x1074838
    float get_SelectionProgress();
    // public System.Void set_SelectionProgress(System.Single value)
    // Offset: 0x10748C0
    void set_SelectionProgress(float value);
    // public System.Void Awake()
    // Offset: 0x1074950
    void Awake();
    // private System.Void Update()
    // Offset: 0x1074AD8
    void Update();
    // private System.Void LateUpdate()
    // Offset: 0x1075534
    void LateUpdate();
    // public System.Void RequestHide()
    // Offset: 0x10756F8
    void RequestHide();
    // public System.Void RequestShow()
    // Offset: 0x1075504
    void RequestShow();
    // private System.Void Hide()
    // Offset: 0x1074D10
    void Hide();
    // private System.Void Show()
    // Offset: 0x1074FF8
    void Show();
    // public override System.Void SetCursorStartDest(UnityEngine.Vector3 _, UnityEngine.Vector3 pos, UnityEngine.Vector3 normal)
    // Offset: 0x10752DC
    // Implemented from: OVRCursor
    // Base method: System.Void OVRCursor::SetCursorStartDest(UnityEngine.Vector3 _, UnityEngine.Vector3 pos, UnityEngine.Vector3 normal)
    void SetCursorStartDest(UnityEngine::Vector3 _, UnityEngine::Vector3 pos, UnityEngine::Vector3 normal);
    // public override System.Void SetCursorRay(UnityEngine.Transform ray)
    // Offset: 0x1075530
    // Implemented from: OVRCursor
    // Base method: System.Void OVRCursor::SetCursorRay(UnityEngine.Transform ray)
    void SetCursorRay(UnityEngine::Transform* ray);
    // public System.Void .ctor()
    // Offset: 0x1075730
    // Implemented from: OVRCursor
    // Base method: System.Void OVRCursor::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static OVRGazePointer* New_ctor();
  }; // OVRGazePointer
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRGazePointer*, "", "OVRGazePointer");
#pragma pack(pop)
