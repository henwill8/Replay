// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRSkeleton
#include "GlobalNamespace/OVRSkeleton.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x98
  #pragma pack(push, 1)
  // Autogenerated type: OVRCustomSkeleton
  // [] Offset: FFFFFFFF
  // [DefaultExecutionOrder] Offset: CF5870
  class OVRCustomSkeleton : public GlobalNamespace::OVRSkeleton {
    public:
    // private System.Collections.Generic.List`1<UnityEngine.Transform> _customBones
    // Size: 0x8
    // Offset: 0x90
    System::Collections::Generic::List_1<UnityEngine::Transform*>* customBones;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<UnityEngine::Transform*>*) == 0x8);
    // Creating value type constructor for type: OVRCustomSkeleton
    OVRCustomSkeleton(System::Collections::Generic::List_1<UnityEngine::Transform*>* customBones_ = {}) noexcept : customBones{customBones_} {}
    // public System.Collections.Generic.List`1<UnityEngine.Transform> get_CustomBones()
    // Offset: 0x11A90BC
    System::Collections::Generic::List_1<UnityEngine::Transform*>* get_CustomBones();
    // protected override System.Void InitializeBones(OVRPlugin/Skeleton skeleton)
    // Offset: 0x11A90C4
    // Implemented from: OVRSkeleton
    // Base method: System.Void OVRSkeleton::InitializeBones(OVRPlugin/Skeleton skeleton)
    void InitializeBones(GlobalNamespace::OVRPlugin::Skeleton skeleton);
    // public System.Void .ctor()
    // Offset: 0x11A9280
    // Implemented from: OVRSkeleton
    // Base method: System.Void OVRSkeleton::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OVRCustomSkeleton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::OVRCustomSkeleton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OVRCustomSkeleton*, creationType>()));
    }
  }; // OVRCustomSkeleton
  #pragma pack(pop)
  static check_size<sizeof(OVRCustomSkeleton), 144 + sizeof(System::Collections::Generic::List_1<UnityEngine::Transform*>*)> __GlobalNamespace_OVRCustomSkeletonSizeCheck;
  static_assert(sizeof(OVRCustomSkeleton) == 0x98);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRCustomSkeleton*, "", "OVRCustomSkeleton");
