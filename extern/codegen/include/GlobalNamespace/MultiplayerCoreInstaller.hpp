// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Zenject.MonoInstaller
#include "Zenject/MonoInstaller.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerMockSettings
  class MultiplayerMockSettings;
  // Forward declaring type: MockScoreSyncStateManager
  class MockScoreSyncStateManager;
  // Forward declaring type: ScoreSyncStateManager
  class ScoreSyncStateManager;
  // Forward declaring type: GameplayCoreSceneSetupData
  class GameplayCoreSceneSetupData;
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x48
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerCoreInstaller
  // [] Offset: FFFFFFFF
  class MultiplayerCoreInstaller : public Zenject::MonoInstaller {
    public:
    // private MultiplayerMockSettings _multiplayerMockSettings
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::MultiplayerMockSettings* multiplayerMockSettings;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerMockSettings*) == 0x8);
    // [SpaceAttribute] Offset: 0xD3E46C
    // private MockScoreSyncStateManager _mockScoreSyncStateManagerPrefab
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::MockScoreSyncStateManager* mockScoreSyncStateManagerPrefab;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MockScoreSyncStateManager*) == 0x8);
    // private ScoreSyncStateManager _scoreSyncStateManagerPrefab
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::ScoreSyncStateManager* scoreSyncStateManagerPrefab;
    // Field size check
    static_assert(sizeof(GlobalNamespace::ScoreSyncStateManager*) == 0x8);
    // [InjectAttribute] Offset: 0xD3E4B4
    // private readonly GameplayCoreSceneSetupData _sceneSetupData
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::GameplayCoreSceneSetupData* sceneSetupData;
    // Field size check
    static_assert(sizeof(GlobalNamespace::GameplayCoreSceneSetupData*) == 0x8);
    // [InjectAttribute] Offset: 0xD3E4C4
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMultiplayerSessionManager*) == 0x8);
    // Creating value type constructor for type: MultiplayerCoreInstaller
    MultiplayerCoreInstaller(GlobalNamespace::MultiplayerMockSettings* multiplayerMockSettings_ = {}, GlobalNamespace::MockScoreSyncStateManager* mockScoreSyncStateManagerPrefab_ = {}, GlobalNamespace::ScoreSyncStateManager* scoreSyncStateManagerPrefab_ = {}, GlobalNamespace::GameplayCoreSceneSetupData* sceneSetupData_ = {}, GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager_ = {}) noexcept : multiplayerMockSettings{multiplayerMockSettings_}, mockScoreSyncStateManagerPrefab{mockScoreSyncStateManagerPrefab_}, scoreSyncStateManagerPrefab{scoreSyncStateManagerPrefab_}, sceneSetupData{sceneSetupData_}, multiplayerSessionManager{multiplayerSessionManager_} {}
    // public override System.Void InstallBindings()
    // Offset: 0x1021F54
    // Implemented from: Zenject.MonoInstallerBase
    // Base method: System.Void MonoInstallerBase::InstallBindings()
    void InstallBindings();
    // public System.Void .ctor()
    // Offset: 0x102240C
    // Implemented from: Zenject.MonoInstaller
    // Base method: System.Void MonoInstaller::.ctor()
    // Base method: System.Void MonoInstallerBase::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerCoreInstaller* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerCoreInstaller::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerCoreInstaller*, creationType>()));
    }
  }; // MultiplayerCoreInstaller
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerCoreInstaller), 64 + sizeof(GlobalNamespace::IMultiplayerSessionManager*)> __GlobalNamespace_MultiplayerCoreInstallerSizeCheck;
  static_assert(sizeof(MultiplayerCoreInstaller) == 0x48);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerCoreInstaller*, "", "MultiplayerCoreInstaller");
