// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: BaseNetworkPlayerModel
#include "GlobalNamespace/BaseNetworkPlayerModel.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: LocalNetworkDiscoveryManager
  class LocalNetworkDiscoveryManager;
  // Forward declaring type: IPlatformUserModel
  class IPlatformUserModel;
  // Forward declaring type: INetworkConfig
  class INetworkConfig;
  // Skipping declaration: INetworkPlayerModel because it is already included!
  // Forward declaring type: INetworkPlayer
  class INetworkPlayer;
  // Forward declaring type: LiteNetLibConnectionManager
  class LiteNetLibConnectionManager;
  // Skipping declaration: GameplayServerConfiguration because it is already included!
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
  // Forward declaring type: ConnectionFailedReason
  struct ConnectionFailedReason;
  // Forward declaring type: INetworkPlayerModelPartyConfig`1<T>
  template<typename T>
  class INetworkPlayerModelPartyConfig_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: IEnumerable`1<T>
  template<typename T>
  class IEnumerable_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: System::Net
namespace System::Net {
  // Forward declaring type: IPAddress
  class IPAddress;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: LocalNetworkPlayerModel
  class LocalNetworkPlayerModel : public GlobalNamespace::BaseNetworkPlayerModel {
    public:
    // Nested type: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkFlags
    struct LocalNetworkFlags;
    // Nested type: GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer
    class LocalNetworkPlayer;
    // Nested type: GlobalNamespace::LocalNetworkPlayerModel::CreatePartyConfig
    class CreatePartyConfig;
    // Nested type: GlobalNamespace::LocalNetworkPlayerModel::$Start$d__44
    struct $Start$d__44;
    // private LocalNetworkDiscoveryManager _discoveryManager
    // Offset: 0x78
    GlobalNamespace::LocalNetworkDiscoveryManager* discoveryManager;
    // private readonly IPlatformUserModel _platformUserModel
    // Offset: 0x80
    GlobalNamespace::IPlatformUserModel* platformUserModel;
    // private readonly INetworkConfig _networkConfig
    // Offset: 0x88
    GlobalNamespace::INetworkConfig* networkConfig;
    // private readonly System.Collections.Generic.List`1<LocalNetworkPlayerModel/LocalNetworkPlayer> _partyPlayers
    // Offset: 0x90
    System::Collections::Generic::List_1<GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*>* partyPlayers;
    // private readonly System.Collections.Generic.List`1<LocalNetworkPlayerModel/LocalNetworkPlayer> _otherPlayers
    // Offset: 0x98
    System::Collections::Generic::List_1<GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*>* otherPlayers;
    // private LocalNetworkPlayerModel/LocalNetworkPlayer _localPlayer
    // Offset: 0xA0
    GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer* localPlayer;
    // private System.Boolean _networkingFailed
    // Offset: 0xA8
    bool networkingFailed;
    // private System.Boolean _partyEnabled
    // Offset: 0xA9
    bool partyEnabled;
    // private System.Int32 _maxPlayerCount
    // Offset: 0xAC
    int maxPlayerCount;
    // private INetworkPlayerModel _partyManager
    // Offset: 0xB0
    GlobalNamespace::INetworkPlayerModel* partyManager;
    // private System.Action`1<System.Int32> partySizeChangedEvent
    // Offset: 0xB8
    System::Action_1<int>* partySizeChangedEvent;
    // private System.Action`1<INetworkPlayerModel> partyChangedEvent
    // Offset: 0xC0
    System::Action_1<GlobalNamespace::INetworkPlayerModel*>* partyChangedEvent;
    // private System.Action`1<INetworkPlayer> joinRequestedEvent
    // Offset: 0xC8
    System::Action_1<GlobalNamespace::INetworkPlayer*>* joinRequestedEvent;
    // private System.Action`1<INetworkPlayer> inviteRequestedEvent
    // Offset: 0xD0
    System::Action_1<GlobalNamespace::INetworkPlayer*>* inviteRequestedEvent;
    // private System.Boolean get_canInvitePlayers()
    // Offset: 0x1A67B24
    bool get_canInvitePlayers();
    // private System.Boolean get_hasConnectedPeers()
    // Offset: 0x1A67BC4
    bool get_hasConnectedPeers();
    // public System.Boolean get_hasNetworkingFailed()
    // Offset: 0x1A6820C
    bool get_hasNetworkingFailed();
    // public LiteNetLibConnectionManager get_liteNetLibConnectionManager()
    // Offset: 0x1A68214
    GlobalNamespace::LiteNetLibConnectionManager* get_liteNetLibConnectionManager();
    // private System.Boolean TryGetPlayer(System.String userId, out LocalNetworkPlayerModel/LocalNetworkPlayer player)
    // Offset: 0x1A688BC
    bool TryGetPlayer(::Il2CppString* userId, GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer*& player);
    // private LocalNetworkPlayerModel/LocalNetworkPlayer GetPlayer(System.String userId)
    // Offset: 0x1A68A24
    GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer* GetPlayer(::Il2CppString* userId);
    // private System.Void RefreshLocalPlayer(System.Boolean forcePlayersChanged)
    // Offset: 0x1A68580
    void RefreshLocalPlayer(bool forcePlayersChanged);
    // private System.Void HandlePeerUpdate(System.String userId, System.Net.IPAddress ipAddress, System.String encryptedUserName, System.Int32 currentPartySize, System.Int32 maxPartySize, System.Byte flags, GameplayServerConfiguration configuration)
    // Offset: 0x1A68BB4
    void HandlePeerUpdate(::Il2CppString* userId, System::Net::IPAddress* ipAddress, ::Il2CppString* encryptedUserName, int currentPartySize, int maxPartySize, uint8_t flags, GlobalNamespace::GameplayServerConfiguration configuration);
    // private System.Void SendJoinRequest(LocalNetworkPlayerModel/LocalNetworkPlayer player)
    // Offset: 0x1A68DF8
    void SendJoinRequest(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer* player);
    // private System.Void HandleJoinRequest(System.String userId, System.Net.IPAddress ipAddress, System.String encryptedUserName, System.Byte flags)
    // Offset: 0x1A68E70
    void HandleJoinRequest(::Il2CppString* userId, System::Net::IPAddress* ipAddress, ::Il2CppString* encryptedUserName, uint8_t flags);
    // private System.Void SendJoinResponse(LocalNetworkPlayerModel/LocalNetworkPlayer player, System.Boolean allowJoin)
    // Offset: 0x1A69090
    void SendJoinResponse(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer* player, bool allowJoin);
    // private System.Void HandleJoinResponse(System.String id, System.String secret, System.Int32 multiplayerPort, System.Boolean blocked)
    // Offset: 0x1A69370
    void HandleJoinResponse(::Il2CppString* id, ::Il2CppString* secret, int multiplayerPort, bool blocked);
    // private System.Void SendInviteRequest(LocalNetworkPlayerModel/LocalNetworkPlayer player)
    // Offset: 0x1A694C4
    void SendInviteRequest(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer* player);
    // private System.Void HandleInviteRequest(System.String userId, System.Net.IPAddress ipAddress, System.String encryptedUserName, System.String secret, System.Int32 multiplayerPort, System.Byte flags)
    // Offset: 0x1A6958C
    void HandleInviteRequest(::Il2CppString* userId, System::Net::IPAddress* ipAddress, ::Il2CppString* encryptedUserName, ::Il2CppString* secret, int multiplayerPort, uint8_t flags);
    // private System.Void SendInviteResponse(LocalNetworkPlayerModel/LocalNetworkPlayer player, System.Boolean acceptInvite)
    // Offset: 0x1A697E0
    void SendInviteResponse(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer* player, bool acceptInvite);
    // private System.Void HandleInviteResponse(System.String userId, System.Boolean accepted, System.Boolean blocked)
    // Offset: 0x1A69894
    void HandleInviteResponse(::Il2CppString* userId, bool accepted, bool blocked);
    // private System.Void ConnectToPeer(LocalNetworkPlayerModel/LocalNetworkPlayer player)
    // Offset: 0x1A69988
    void ConnectToPeer(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer* player);
    // private System.Void DisconnectPeer(LocalNetworkPlayerModel/LocalNetworkPlayer player)
    // Offset: 0x1A6AA90
    void DisconnectPeer(GlobalNamespace::LocalNetworkPlayerModel::LocalNetworkPlayer* player);
    // private System.Void HandlePlayersChanged()
    // Offset: 0x1A68B1C
    void HandlePlayersChanged();
    // private System.Void TryStartServer()
    // Offset: 0x1A691E0
    void TryStartServer();
    // public override System.Int32 get_currentPartySize()
    // Offset: 0x1A67C1C
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Int32 BaseNetworkPlayerModel::get_currentPartySize()
    int get_currentPartySize();
    // public override System.Boolean get_discoveryEnabled()
    // Offset: 0x1A67C6C
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Boolean BaseNetworkPlayerModel::get_discoveryEnabled()
    bool get_discoveryEnabled();
    // public override System.Void set_discoveryEnabled(System.Boolean value)
    // Offset: 0x1A67C88
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::set_discoveryEnabled(System.Boolean value)
    void set_discoveryEnabled(bool value);
    // public override System.Void add_partySizeChangedEvent(System.Action`1<System.Int32> value)
    // Offset: 0x1A67CA8
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::add_partySizeChangedEvent(System.Action`1<System.Int32> value)
    void add_partySizeChangedEvent(System::Action_1<int>* value);
    // public override System.Void remove_partySizeChangedEvent(System.Action`1<System.Int32> value)
    // Offset: 0x1A67D4C
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::remove_partySizeChangedEvent(System.Action`1<System.Int32> value)
    void remove_partySizeChangedEvent(System::Action_1<int>* value);
    // public override System.Void add_partyChangedEvent(System.Action`1<INetworkPlayerModel> value)
    // Offset: 0x1A67DF0
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::add_partyChangedEvent(System.Action`1<INetworkPlayerModel> value)
    void add_partyChangedEvent(System::Action_1<GlobalNamespace::INetworkPlayerModel*>* value);
    // public override System.Void remove_partyChangedEvent(System.Action`1<INetworkPlayerModel> value)
    // Offset: 0x1A67E94
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::remove_partyChangedEvent(System.Action`1<INetworkPlayerModel> value)
    void remove_partyChangedEvent(System::Action_1<GlobalNamespace::INetworkPlayerModel*>* value);
    // public override System.Void add_joinRequestedEvent(System.Action`1<INetworkPlayer> value)
    // Offset: 0x1A67F38
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::add_joinRequestedEvent(System.Action`1<INetworkPlayer> value)
    void add_joinRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value);
    // public override System.Void remove_joinRequestedEvent(System.Action`1<INetworkPlayer> value)
    // Offset: 0x1A67FDC
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::remove_joinRequestedEvent(System.Action`1<INetworkPlayer> value)
    void remove_joinRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value);
    // public override System.Void add_inviteRequestedEvent(System.Action`1<INetworkPlayer> value)
    // Offset: 0x1A68080
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::add_inviteRequestedEvent(System.Action`1<INetworkPlayer> value)
    void add_inviteRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value);
    // public override System.Void remove_inviteRequestedEvent(System.Action`1<INetworkPlayer> value)
    // Offset: 0x1A68124
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::remove_inviteRequestedEvent(System.Action`1<INetworkPlayer> value)
    void remove_inviteRequestedEvent(System::Action_1<GlobalNamespace::INetworkPlayer*>* value);
    // public override System.Boolean get_localPlayerIsPartyOwner()
    // Offset: 0x1A681C8
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Boolean BaseNetworkPlayerModel::get_localPlayerIsPartyOwner()
    bool get_localPlayerIsPartyOwner();
    // public override INetworkPlayer get_localPlayer()
    // Offset: 0x1A681F4
    // Implemented from: BaseNetworkPlayerModel
    // Base method: INetworkPlayer BaseNetworkPlayerModel::get_localPlayer()
    GlobalNamespace::INetworkPlayer* get_localPlayer();
    // public System.Collections.Generic.IEnumerable`1<INetworkPlayer> get_otherPlayers()
    // Offset: 0x1A681FC
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Collections.Generic.IEnumerable`1<INetworkPlayer> BaseNetworkPlayerModel::INetworkPlayerModel.get_otherPlayers()
    // Base method: System.Collections.Generic.IEnumerable`1<INetworkPlayer> INetworkPlayerModel::get_otherPlayers()
    System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* get_otherPlayers();
    // Creating proxy method: GlobalNamespace_INetworkPlayerModel_get_otherPlayers
    // Maps to method: get_otherPlayers
    System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* GlobalNamespace_INetworkPlayerModel_get_otherPlayers();
    // Creating proxy method: GlobalNamespace_INetworkPlayerModel_get_otherPlayers
    // Maps to method: get_otherPlayers
    // Skipping redundant proxy method: GlobalNamespace_INetworkPlayerModel_get_otherPlayers
    // protected override System.Void Start()
    // Offset: 0x1A6826C
    // Implemented from: StandaloneMonobehavior
    // Base method: System.Void StandaloneMonobehavior::Start()
    void Start();
    // protected override System.Void Update()
    // Offset: 0x1A68348
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::Update()
    void Update();
    // protected override System.Void OnDestroy()
    // Offset: 0x1A6868C
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::OnDestroy()
    void OnDestroy();
    // protected override System.Collections.Generic.IEnumerable`1<INetworkPlayer> GetPartyPlayers()
    // Offset: 0x1A688AC
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Collections.Generic.IEnumerable`1<INetworkPlayer> BaseNetworkPlayerModel::GetPartyPlayers()
    System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* GetPartyPlayers();
    // protected override System.Collections.Generic.IEnumerable`1<INetworkPlayer> GetOtherPlayers()
    // Offset: 0x1A688B4
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Collections.Generic.IEnumerable`1<INetworkPlayer> BaseNetworkPlayerModel::GetOtherPlayers()
    System::Collections::Generic::IEnumerable_1<GlobalNamespace::INetworkPlayer*>* GetOtherPlayers();
    // protected override System.Void PlayerConnected(IConnectedPlayer connectedPlayer)
    // Offset: 0x1A69B5C
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::PlayerConnected(IConnectedPlayer connectedPlayer)
    void PlayerConnected(GlobalNamespace::IConnectedPlayer* connectedPlayer);
    // protected override System.Void ConnectionFailed(ConnectionFailedReason reason)
    // Offset: 0x1A6A02C
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::ConnectionFailed(ConnectionFailedReason reason)
    void ConnectionFailed(GlobalNamespace::ConnectionFailedReason reason);
    // protected override System.Void PlayerDisconnected(IConnectedPlayer connectedPlayer)
    // Offset: 0x1A6A1A0
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::PlayerDisconnected(IConnectedPlayer connectedPlayer)
    void PlayerDisconnected(GlobalNamespace::IConnectedPlayer* connectedPlayer);
    // protected override System.Void PlayerStateChanged(IConnectedPlayer connectedPlayer)
    // Offset: 0x1A6A550
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::PlayerStateChanged(IConnectedPlayer connectedPlayer)
    void PlayerStateChanged(GlobalNamespace::IConnectedPlayer* connectedPlayer);
    // protected override System.Void PartySizeChanged(System.Int32 currentPartySize)
    // Offset: 0x1A6AB80
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::PartySizeChanged(System.Int32 currentPartySize)
    void PartySizeChanged(int currentPartySize);
    // public override System.Boolean CreateParty(INetworkPlayerModelPartyConfig`1<T> createConfig)
    // Offset: 0xFFFFFFFF
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Boolean BaseNetworkPlayerModel::CreateParty(INetworkPlayerModelPartyConfig`1<T> createConfig)
    template<class T>
    bool CreateParty(GlobalNamespace::INetworkPlayerModelPartyConfig_1<T>* createConfig) {
      static_assert(std::is_base_of_v<GlobalNamespace::INetworkPlayerModel, std::remove_pointer_t<T>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<bool>(this, "CreateParty", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, createConfig)));
    }
    // public override System.Void DestroyParty()
    // Offset: 0x1A6ABC0
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::DestroyParty()
    void DestroyParty();
    // public override System.Void Disconnect()
    // Offset: 0x1A6AC4C
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::Disconnect()
    void Disconnect();
    // protected override System.Void ConnectedPlayerManagerChanged()
    // Offset: 0x1A6AC84
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::ConnectedPlayerManagerChanged()
    void ConnectedPlayerManagerChanged();
    // public System.Void .ctor()
    // Offset: 0x1A6AC8C
    // Implemented from: BaseNetworkPlayerModel
    // Base method: System.Void BaseNetworkPlayerModel::.ctor()
    // Base method: System.Void StandaloneMonobehavior::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static LocalNetworkPlayerModel* New_ctor();
  }; // LocalNetworkPlayerModel
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::LocalNetworkPlayerModel*, "", "LocalNetworkPlayerModel");
#pragma pack(pop)
