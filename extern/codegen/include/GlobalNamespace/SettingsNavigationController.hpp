// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.NavigationController
#include "HMUI/NavigationController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Skipping declaration: FinishAction because it is already included!
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Button
  class Button;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xB8
  #pragma pack(push, 1)
  // Autogenerated type: SettingsNavigationController
  // [] Offset: FFFFFFFF
  class SettingsNavigationController : public HMUI::NavigationController {
    public:
    // Writing base type padding for base size: 0x94 to desired offset: 0x98
    char ___base_padding[0x4] = {};
    // Nested type: GlobalNamespace::SettingsNavigationController::FinishAction
    struct FinishAction;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: SettingsNavigationController/FinishAction
    // [] Offset: FFFFFFFF
    struct FinishAction/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: FinishAction
      constexpr FinishAction(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public SettingsNavigationController/FinishAction Ok
      static constexpr const int Ok = 0;
      // Get static field: static public SettingsNavigationController/FinishAction Ok
      static GlobalNamespace::SettingsNavigationController::FinishAction _get_Ok();
      // Set static field: static public SettingsNavigationController/FinishAction Ok
      static void _set_Ok(GlobalNamespace::SettingsNavigationController::FinishAction value);
      // static field const value: static public SettingsNavigationController/FinishAction Cancel
      static constexpr const int Cancel = 1;
      // Get static field: static public SettingsNavigationController/FinishAction Cancel
      static GlobalNamespace::SettingsNavigationController::FinishAction _get_Cancel();
      // Set static field: static public SettingsNavigationController/FinishAction Cancel
      static void _set_Cancel(GlobalNamespace::SettingsNavigationController::FinishAction value);
      // static field const value: static public SettingsNavigationController/FinishAction Apply
      static constexpr const int Apply = 2;
      // Get static field: static public SettingsNavigationController/FinishAction Apply
      static GlobalNamespace::SettingsNavigationController::FinishAction _get_Apply();
      // Set static field: static public SettingsNavigationController/FinishAction Apply
      static void _set_Apply(GlobalNamespace::SettingsNavigationController::FinishAction value);
    }; // SettingsNavigationController/FinishAction
    #pragma pack(pop)
    static check_size<sizeof(SettingsNavigationController::FinishAction), 0 + sizeof(int)> __GlobalNamespace_SettingsNavigationController_FinishActionSizeCheck;
    static_assert(sizeof(SettingsNavigationController::FinishAction) == 0x4);
    // private UnityEngine.UI.Button _okButton
    // Size: 0x8
    // Offset: 0x98
    UnityEngine::UI::Button* okButton;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Button*) == 0x8);
    // private UnityEngine.UI.Button _applyButton
    // Size: 0x8
    // Offset: 0xA0
    UnityEngine::UI::Button* applyButton;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Button*) == 0x8);
    // private UnityEngine.UI.Button _cancelButton
    // Size: 0x8
    // Offset: 0xA8
    UnityEngine::UI::Button* cancelButton;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Button*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD43988
    // private System.Action`1<SettingsNavigationController/FinishAction> didFinishEvent
    // Size: 0x8
    // Offset: 0xB0
    System::Action_1<GlobalNamespace::SettingsNavigationController::FinishAction>* didFinishEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<GlobalNamespace::SettingsNavigationController::FinishAction>*) == 0x8);
    // Creating value type constructor for type: SettingsNavigationController
    SettingsNavigationController(UnityEngine::UI::Button* okButton_ = {}, UnityEngine::UI::Button* applyButton_ = {}, UnityEngine::UI::Button* cancelButton_ = {}, System::Action_1<GlobalNamespace::SettingsNavigationController::FinishAction>* didFinishEvent_ = {}) noexcept : okButton{okButton_}, applyButton{applyButton_}, cancelButton{cancelButton_}, didFinishEvent{didFinishEvent_} {}
    // public System.Void add_didFinishEvent(System.Action`1<SettingsNavigationController/FinishAction> value)
    // Offset: 0xF6A3FC
    void add_didFinishEvent(System::Action_1<GlobalNamespace::SettingsNavigationController::FinishAction>* value);
    // public System.Void remove_didFinishEvent(System.Action`1<SettingsNavigationController/FinishAction> value)
    // Offset: 0xF6A4A0
    void remove_didFinishEvent(System::Action_1<GlobalNamespace::SettingsNavigationController::FinishAction>* value);
    // private System.Void HandleFinishButton(SettingsNavigationController/FinishAction finishAction)
    // Offset: 0xF6A684
    void HandleFinishButton(GlobalNamespace::SettingsNavigationController::FinishAction finishAction);
    // private System.Void <DidActivate>b__7_0()
    // Offset: 0xF6A700
    void $DidActivate$b__7_0();
    // private System.Void <DidActivate>b__7_1()
    // Offset: 0xF6A708
    void $DidActivate$b__7_1();
    // private System.Void <DidActivate>b__7_2()
    // Offset: 0xF6A710
    void $DidActivate$b__7_2();
    // protected override System.Void DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0xF6A544
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::DidActivate(System.Boolean firstActivation, System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    void DidActivate(bool firstActivation, bool addedToHierarchy, bool screenSystemEnabling);
    // public System.Void .ctor()
    // Offset: 0xF6A6F8
    // Implemented from: HMUI.NavigationController
    // Base method: System.Void NavigationController::.ctor()
    // Base method: System.Void ContainerViewController::.ctor()
    // Base method: System.Void ViewController::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SettingsNavigationController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SettingsNavigationController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SettingsNavigationController*, creationType>()));
    }
  }; // SettingsNavigationController
  #pragma pack(pop)
  static check_size<sizeof(SettingsNavigationController), 176 + sizeof(System::Action_1<GlobalNamespace::SettingsNavigationController::FinishAction>*)> __GlobalNamespace_SettingsNavigationControllerSizeCheck;
  static_assert(sizeof(SettingsNavigationController) == 0xB8);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SettingsNavigationController*, "", "SettingsNavigationController");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SettingsNavigationController::FinishAction, "", "SettingsNavigationController/FinishAction");
