// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: ColorType
#include "GlobalNamespace/ColorType.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: BeatmapObjectData
  class BeatmapObjectData;
  // Forward declaring type: BeatmapEventData
  class BeatmapEventData;
  // Forward declaring type: NoteData
  class NoteData;
  // Forward declaring type: ObstacleData
  class ObstacleData;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: BeatmapCallbackItemDataList
  class BeatmapCallbackItemDataList : public ::Il2CppObject {
    public:
    // Nested type: GlobalNamespace::BeatmapCallbackItemDataList::SpawnBasicNoteCallback
    class SpawnBasicNoteCallback;
    // Nested type: GlobalNamespace::BeatmapCallbackItemDataList::SpawnLongNoteCallback
    class SpawnLongNoteCallback;
    // Nested type: GlobalNamespace::BeatmapCallbackItemDataList::SpawnBombNoteCallback
    class SpawnBombNoteCallback;
    // Nested type: GlobalNamespace::BeatmapCallbackItemDataList::SpawnObstacleCallback
    class SpawnObstacleCallback;
    // Nested type: GlobalNamespace::BeatmapCallbackItemDataList::ProcessBeatmapEventCallback
    class ProcessBeatmapEventCallback;
    // Nested type: GlobalNamespace::BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback
    class GetRelativeNoteOffsetCallback;
    // private readonly BeatmapCallbackItemDataList/SpawnBasicNoteCallback _spawnBasicNoteCallback
    // Offset: 0x10
    GlobalNamespace::BeatmapCallbackItemDataList::SpawnBasicNoteCallback* spawnBasicNoteCallback;
    // private readonly BeatmapCallbackItemDataList/SpawnBombNoteCallback _spawnBombNoteCallback
    // Offset: 0x18
    GlobalNamespace::BeatmapCallbackItemDataList::SpawnBombNoteCallback* spawnBombNoteCallback;
    // private readonly BeatmapCallbackItemDataList/SpawnObstacleCallback _spawnObstacleCallback
    // Offset: 0x20
    GlobalNamespace::BeatmapCallbackItemDataList::SpawnObstacleCallback* spawnObstacleCallback;
    // private readonly BeatmapCallbackItemDataList/ProcessBeatmapEventCallback _processEarlyBeatmapEventCallback
    // Offset: 0x28
    GlobalNamespace::BeatmapCallbackItemDataList::ProcessBeatmapEventCallback* processEarlyBeatmapEventCallback;
    // private readonly BeatmapCallbackItemDataList/ProcessBeatmapEventCallback _processLateBeatmapEventCallback
    // Offset: 0x30
    GlobalNamespace::BeatmapCallbackItemDataList::ProcessBeatmapEventCallback* processLateBeatmapEventCallback;
    // private readonly System.Action _earlyEventsWereProcessedCallback
    // Offset: 0x38
    System::Action* earlyEventsWereProcessedCallback;
    // private readonly BeatmapCallbackItemDataList/GetRelativeNoteOffsetCallback _getRelativeNoteOffsetCallback
    // Offset: 0x40
    GlobalNamespace::BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback* getRelativeNoteOffsetCallback;
    // private readonly System.Collections.Generic.List`1<BeatmapObjectData> _beatmapObjectDataList
    // Offset: 0x48
    System::Collections::Generic::List_1<GlobalNamespace::BeatmapObjectData*>* beatmapObjectDataList;
    // private readonly System.Collections.Generic.List`1<BeatmapEventData> _beatmapEventDataList
    // Offset: 0x50
    System::Collections::Generic::List_1<GlobalNamespace::BeatmapEventData*>* beatmapEventDataList;
    // private readonly System.Collections.Generic.Dictionary`2<ColorType,System.Collections.Generic.List`1<NoteData>> _notesByColorType
    // Offset: 0x58
    System::Collections::Generic::Dictionary_2<GlobalNamespace::ColorType, System::Collections::Generic::List_1<GlobalNamespace::NoteData*>*>* notesByColorType;
    // private readonly System.Collections.Generic.List`1<NoteData> _bombNotes
    // Offset: 0x60
    System::Collections::Generic::List_1<GlobalNamespace::NoteData*>* bombNotes;
    // private readonly System.Collections.Generic.List`1<ObstacleData> _obstacles
    // Offset: 0x68
    System::Collections::Generic::List_1<GlobalNamespace::ObstacleData*>* obstacles;
    // private readonly System.Collections.Generic.List`1<BeatmapEventData> _beatmapEarlyEvents
    // Offset: 0x70
    System::Collections::Generic::List_1<GlobalNamespace::BeatmapEventData*>* beatmapEarlyEvents;
    // private readonly System.Collections.Generic.List`1<BeatmapEventData> _beatmapLateEvents
    // Offset: 0x78
    System::Collections::Generic::List_1<GlobalNamespace::BeatmapEventData*>* beatmapLateEvents;
    // private System.Single _maxNotesAlignmentAngle
    // Offset: 0x80
    float maxNotesAlignmentAngle;
    // public System.Void .ctor(BeatmapCallbackItemDataList/SpawnBasicNoteCallback spawnBasicNoteCallback, BeatmapCallbackItemDataList/SpawnBombNoteCallback spawnBombNoteCallback, BeatmapCallbackItemDataList/SpawnObstacleCallback spawnObstacleCallback, BeatmapCallbackItemDataList/ProcessBeatmapEventCallback processEarlyBeatmapEventCallback, BeatmapCallbackItemDataList/ProcessBeatmapEventCallback processLateBeatmapEventCallback, System.Action earlyEventsWereProcessedCallback, BeatmapCallbackItemDataList/GetRelativeNoteOffsetCallback getRelativeNoteOffsetCallback)
    // Offset: 0x1A78F34
    static BeatmapCallbackItemDataList* New_ctor(GlobalNamespace::BeatmapCallbackItemDataList::SpawnBasicNoteCallback* spawnBasicNoteCallback, GlobalNamespace::BeatmapCallbackItemDataList::SpawnBombNoteCallback* spawnBombNoteCallback, GlobalNamespace::BeatmapCallbackItemDataList::SpawnObstacleCallback* spawnObstacleCallback, GlobalNamespace::BeatmapCallbackItemDataList::ProcessBeatmapEventCallback* processEarlyBeatmapEventCallback, GlobalNamespace::BeatmapCallbackItemDataList::ProcessBeatmapEventCallback* processLateBeatmapEventCallback, System::Action* earlyEventsWereProcessedCallback, GlobalNamespace::BeatmapCallbackItemDataList::GetRelativeNoteOffsetCallback* getRelativeNoteOffsetCallback);
    // public System.Void InsertBeatmapObjectData(BeatmapObjectData beatmapObjectData)
    // Offset: 0x1A792B8
    void InsertBeatmapObjectData(GlobalNamespace::BeatmapObjectData* beatmapObjectData);
    // public System.Void InsertBeatmapEventData(BeatmapEventData beatmapEventData)
    // Offset: 0x1A793BC
    void InsertBeatmapEventData(GlobalNamespace::BeatmapEventData* beatmapEventData);
    // public System.Void ProcessData()
    // Offset: 0x1A794C0
    void ProcessData();
    // private System.Boolean ProcessNotesByColorType(System.Collections.Generic.List`1<NoteData> notesWithTheSameColorTypeList)
    // Offset: 0x1A7A260
    bool ProcessNotesByColorType(System::Collections::Generic::List_1<GlobalNamespace::NoteData*>* notesWithTheSameColorTypeList);
    // private System.Void SpawnNoteOrLongNote(NoteData noteData, System.Single cutDirectionAngleOffset)
    // Offset: 0x1A7A48C
    void SpawnNoteOrLongNote(GlobalNamespace::NoteData* noteData, float cutDirectionAngleOffset);
  }; // BeatmapCallbackItemDataList
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BeatmapCallbackItemDataList*, "", "BeatmapCallbackItemDataList");
#pragma pack(pop)
