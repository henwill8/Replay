// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AudioPitchGainEffect
  class AudioPitchGainEffect;
}
// Forward declaring namespace: Tweening
namespace Tweening {
  // Forward declaring type: TweeningManager
  class TweeningManager;
  // Forward declaring type: Tween`1<T>
  template<typename T>
  class Tween_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x78
  #pragma pack(push, 1)
  // Autogenerated type: CrossFadeAudioSource
  // [] Offset: FFFFFFFF
  class CrossFadeAudioSource : public UnityEngine::MonoBehaviour {
    public:
    // private System.Single _duration
    // Size: 0x4
    // Offset: 0x18
    float duration;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: duration and: audioSource1
    char __padding0[0x4] = {};
    // private UnityEngine.AudioSource _audioSource1
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::AudioSource* audioSource1;
    // Field size check
    static_assert(sizeof(UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AudioSource _audioSource2
    // Size: 0x8
    // Offset: 0x28
    UnityEngine::AudioSource* audioSource2;
    // Field size check
    static_assert(sizeof(UnityEngine::AudioSource*) == 0x8);
    // private AudioPitchGainEffect _audioPitchGainEffect1
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::AudioPitchGainEffect* audioPitchGainEffect1;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AudioPitchGainEffect*) == 0x8);
    // private AudioPitchGainEffect _audioPitchGainEffect2
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::AudioPitchGainEffect* audioPitchGainEffect2;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AudioPitchGainEffect*) == 0x8);
    // [InjectAttribute] Offset: 0xD338E8
    // private readonly Tweening.TweeningManager _tweeningManager
    // Size: 0x8
    // Offset: 0x40
    Tweening::TweeningManager* tweeningManager;
    // Field size check
    static_assert(sizeof(Tweening::TweeningManager*) == 0x8);
    // private UnityEngine.AudioSource _activeAudioSource
    // Size: 0x8
    // Offset: 0x48
    UnityEngine::AudioSource* activeAudioSource;
    // Field size check
    static_assert(sizeof(UnityEngine::AudioSource*) == 0x8);
    // private UnityEngine.AudioSource _inactiveAudioSource
    // Size: 0x8
    // Offset: 0x50
    UnityEngine::AudioSource* inactiveAudioSource;
    // Field size check
    static_assert(sizeof(UnityEngine::AudioSource*) == 0x8);
    // private Tweening.Tween`1<System.Single> _volumeDownTween
    // Size: 0x8
    // Offset: 0x58
    Tweening::Tween_1<float>* volumeDownTween;
    // Field size check
    static_assert(sizeof(Tweening::Tween_1<float>*) == 0x8);
    // private Tweening.Tween`1<System.Single> _volumeUpTween
    // Size: 0x8
    // Offset: 0x60
    Tweening::Tween_1<float>* volumeUpTween;
    // Field size check
    static_assert(sizeof(Tweening::Tween_1<float>*) == 0x8);
    // private AudioPitchGainEffect _activePitchGainEffect
    // Size: 0x8
    // Offset: 0x68
    GlobalNamespace::AudioPitchGainEffect* activePitchGainEffect;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AudioPitchGainEffect*) == 0x8);
    // private AudioPitchGainEffect _inactivePitchGainEffect
    // Size: 0x8
    // Offset: 0x70
    GlobalNamespace::AudioPitchGainEffect* inactivePitchGainEffect;
    // Field size check
    static_assert(sizeof(GlobalNamespace::AudioPitchGainEffect*) == 0x8);
    // Creating value type constructor for type: CrossFadeAudioSource
    CrossFadeAudioSource(float duration_ = {}, UnityEngine::AudioSource* audioSource1_ = {}, UnityEngine::AudioSource* audioSource2_ = {}, GlobalNamespace::AudioPitchGainEffect* audioPitchGainEffect1_ = {}, GlobalNamespace::AudioPitchGainEffect* audioPitchGainEffect2_ = {}, Tweening::TweeningManager* tweeningManager_ = {}, UnityEngine::AudioSource* activeAudioSource_ = {}, UnityEngine::AudioSource* inactiveAudioSource_ = {}, Tweening::Tween_1<float>* volumeDownTween_ = {}, Tweening::Tween_1<float>* volumeUpTween_ = {}, GlobalNamespace::AudioPitchGainEffect* activePitchGainEffect_ = {}, GlobalNamespace::AudioPitchGainEffect* inactivePitchGainEffect_ = {}) noexcept : duration{duration_}, audioSource1{audioSource1_}, audioSource2{audioSource2_}, audioPitchGainEffect1{audioPitchGainEffect1_}, audioPitchGainEffect2{audioPitchGainEffect2_}, tweeningManager{tweeningManager_}, activeAudioSource{activeAudioSource_}, inactiveAudioSource{inactiveAudioSource_}, volumeDownTween{volumeDownTween_}, volumeUpTween{volumeUpTween_}, activePitchGainEffect{activePitchGainEffect_}, inactivePitchGainEffect{inactivePitchGainEffect_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public UnityEngine.AudioClip get_clip()
    // Offset: 0x104561C
    UnityEngine::AudioClip* get_clip();
    // public System.Void set_clip(UnityEngine.AudioClip value)
    // Offset: 0x1045638
    void set_clip(UnityEngine::AudioClip* value);
    // public System.Void set_pitch(System.Single value)
    // Offset: 0x104567C
    void set_pitch(float value);
    // public System.Void set_time(System.Single value)
    // Offset: 0x10456C8
    void set_time(float value);
    // public System.Boolean get_isPlaying()
    // Offset: 0x1045714
    bool get_isPlaying();
    // protected System.Void Awake()
    // Offset: 0x1045730
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0x10458E8
    void OnDestroy();
    // public System.Void PlayPitchGainEffect(System.Single volumeScale)
    // Offset: 0x1045980
    void PlayPitchGainEffect(float volumeScale);
    // public System.Void InterruptLastPitchGainEffect()
    // Offset: 0x10459A0
    void InterruptLastPitchGainEffect();
    // public System.Void CrossFade(System.Single toSongTime, System.Single toVolume)
    // Offset: 0x10459BC
    void CrossFade(float toSongTime, float toVolume);
    // public System.Void Play()
    // Offset: 0x1045BB0
    void Play();
    // public System.Void Stop()
    // Offset: 0x1045BCC
    void Stop();
    // private System.Void <Awake>b__21_0(System.Single val)
    // Offset: 0x1045C3C
    void $Awake$b__21_0(float val);
    // private System.Void <Awake>b__21_1(System.Single val)
    // Offset: 0x1045C58
    void $Awake$b__21_1(float val);
    // private System.Void <CrossFade>b__25_0(System.Single val)
    // Offset: 0x1045C74
    void $CrossFade$b__25_0(float val);
    // private System.Void <CrossFade>b__25_1(System.Single val)
    // Offset: 0x1045C90
    void $CrossFade$b__25_1(float val);
    // private System.Void <CrossFade>b__25_2()
    // Offset: 0x1045CAC
    void $CrossFade$b__25_2();
    // public System.Void .ctor()
    // Offset: 0x1045C28
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static CrossFadeAudioSource* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::CrossFadeAudioSource::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<CrossFadeAudioSource*, creationType>()));
    }
  }; // CrossFadeAudioSource
  #pragma pack(pop)
  static check_size<sizeof(CrossFadeAudioSource), 112 + sizeof(GlobalNamespace::AudioPitchGainEffect*)> __GlobalNamespace_CrossFadeAudioSourceSizeCheck;
  static_assert(sizeof(CrossFadeAudioSource) == 0x78);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::CrossFadeAudioSource*, "", "CrossFadeAudioSource");
