// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioSource
  class AudioSource;
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AudioPitchGainEffect
  class AudioPitchGainEffect;
}
// Forward declaring namespace: Tweening
namespace Tweening {
  // Forward declaring type: TweeningManager
  class TweeningManager;
  // Forward declaring type: Tween`1<T>
  template<typename T>
  class Tween_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: CrossFadeAudioSource
  class CrossFadeAudioSource : public UnityEngine::MonoBehaviour {
    public:
    // private System.Single _duration
    // Offset: 0x18
    float duration;
    // private UnityEngine.AudioSource _audioSource1
    // Offset: 0x20
    UnityEngine::AudioSource* audioSource1;
    // private UnityEngine.AudioSource _audioSource2
    // Offset: 0x28
    UnityEngine::AudioSource* audioSource2;
    // private AudioPitchGainEffect _audioPitchGainEffect1
    // Offset: 0x30
    GlobalNamespace::AudioPitchGainEffect* audioPitchGainEffect1;
    // private AudioPitchGainEffect _audioPitchGainEffect2
    // Offset: 0x38
    GlobalNamespace::AudioPitchGainEffect* audioPitchGainEffect2;
    // private readonly Tweening.TweeningManager _tweeningManager
    // Offset: 0x40
    Tweening::TweeningManager* tweeningManager;
    // private UnityEngine.AudioSource _activeAudioSource
    // Offset: 0x48
    UnityEngine::AudioSource* activeAudioSource;
    // private UnityEngine.AudioSource _inactiveAudioSource
    // Offset: 0x50
    UnityEngine::AudioSource* inactiveAudioSource;
    // private Tweening.Tween`1<System.Single> _volumeDownTween
    // Offset: 0x58
    Tweening::Tween_1<float>* volumeDownTween;
    // private Tweening.Tween`1<System.Single> _volumeUpTween
    // Offset: 0x60
    Tweening::Tween_1<float>* volumeUpTween;
    // private AudioPitchGainEffect _activePitchGainEffect
    // Offset: 0x68
    GlobalNamespace::AudioPitchGainEffect* activePitchGainEffect;
    // private AudioPitchGainEffect _inactivePitchGainEffect
    // Offset: 0x70
    GlobalNamespace::AudioPitchGainEffect* inactivePitchGainEffect;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public UnityEngine.AudioClip get_clip()
    // Offset: 0x1A55D5C
    UnityEngine::AudioClip* get_clip();
    // public System.Void set_clip(UnityEngine.AudioClip value)
    // Offset: 0x1A55D78
    void set_clip(UnityEngine::AudioClip* value);
    // public System.Void set_pitch(System.Single value)
    // Offset: 0x1A55DBC
    void set_pitch(float value);
    // public System.Void set_time(System.Single value)
    // Offset: 0x1A55E08
    void set_time(float value);
    // public System.Boolean get_isPlaying()
    // Offset: 0x1A55E54
    bool get_isPlaying();
    // protected System.Void Awake()
    // Offset: 0x1A55E70
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0x1A56028
    void OnDestroy();
    // public System.Void PlayPitchGainEffect(System.Single volumeScale)
    // Offset: 0x1A560C0
    void PlayPitchGainEffect(float volumeScale);
    // public System.Void InterruptLastPitchGainEffect()
    // Offset: 0x1A560E0
    void InterruptLastPitchGainEffect();
    // public System.Void CrossFade(System.Single toSongTime, System.Single toVolume)
    // Offset: 0x1A560FC
    void CrossFade(float toSongTime, float toVolume);
    // public System.Void Play()
    // Offset: 0x1A562F0
    void Play();
    // public System.Void Stop()
    // Offset: 0x1A5630C
    void Stop();
    // private System.Void <Awake>b__21_0(System.Single val)
    // Offset: 0x1A5637C
    void $Awake$b__21_0(float val);
    // private System.Void <Awake>b__21_1(System.Single val)
    // Offset: 0x1A56398
    void $Awake$b__21_1(float val);
    // private System.Void <CrossFade>b__25_0(System.Single val)
    // Offset: 0x1A563B4
    void $CrossFade$b__25_0(float val);
    // private System.Void <CrossFade>b__25_1(System.Single val)
    // Offset: 0x1A563D0
    void $CrossFade$b__25_1(float val);
    // private System.Void <CrossFade>b__25_2()
    // Offset: 0x1A563EC
    void $CrossFade$b__25_2();
    // public System.Void .ctor()
    // Offset: 0x1A56368
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static CrossFadeAudioSource* New_ctor();
  }; // CrossFadeAudioSource
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::CrossFadeAudioSource*, "", "CrossFadeAudioSource");
#pragma pack(pop)
