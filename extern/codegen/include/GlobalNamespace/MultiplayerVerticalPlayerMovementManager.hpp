// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: MultiplayerScoreProvider
#include "GlobalNamespace/MultiplayerScoreProvider.hpp"
// Including type: MultiplayerController
#include "GlobalNamespace/MultiplayerController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: MultiplayerPlayersManager
  class MultiplayerPlayersManager;
  // Forward declaring type: MultiplayerLayoutProvider
  class MultiplayerLayoutProvider;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x54
  #pragma pack(push, 1)
  // Autogenerated type: MultiplayerVerticalPlayerMovementManager
  // [] Offset: FFFFFFFF
  class MultiplayerVerticalPlayerMovementManager : public UnityEngine::MonoBehaviour {
    public:
    // [TooltipAttribute] Offset: 0xD3C804
    // private System.Single _movementRange
    // Size: 0x4
    // Offset: 0x18
    float movementRange;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _duelMovementRange
    // Size: 0x4
    // Offset: 0x1C
    float duelMovementRange;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _metersPerSecondMove
    // Size: 0x4
    // Offset: 0x20
    float metersPerSecondMove;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _minScoreDifference
    // Size: 0x4
    // Offset: 0x24
    float minScoreDifference;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [InjectAttribute] Offset: 0xD3C880
    // private readonly MultiplayerPlayersManager _multiplayerPlayersManager
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::MultiplayerPlayersManager* multiplayerPlayersManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerPlayersManager*) == 0x8);
    // [InjectAttribute] Offset: 0xD3C890
    // private readonly MultiplayerScoreProvider _scoreProvider
    // Size: 0x8
    // Offset: 0x30
    GlobalNamespace::MultiplayerScoreProvider* scoreProvider;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerScoreProvider*) == 0x8);
    // [InjectAttribute] Offset: 0xD3C8A0
    // private readonly MultiplayerLayoutProvider _layoutProvider
    // Size: 0x8
    // Offset: 0x38
    GlobalNamespace::MultiplayerLayoutProvider* layoutProvider;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerLayoutProvider*) == 0x8);
    // [InjectAttribute] Offset: 0xD3C8B0
    // private readonly MultiplayerController _multiplayerController
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::MultiplayerController* multiplayerController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::MultiplayerController*) == 0x8);
    // private readonly System.Collections.Generic.List`1<MultiplayerScoreProvider/RankedPlayer> _reusablePlayersList
    // Size: 0x8
    // Offset: 0x48
    System::Collections::Generic::List_1<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*>* reusablePlayersList;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*>*) == 0x8);
    // private System.Single _lastFrameBaseScore
    // Size: 0x4
    // Offset: 0x50
    float lastFrameBaseScore;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: MultiplayerVerticalPlayerMovementManager
    MultiplayerVerticalPlayerMovementManager(float movementRange_ = {}, float duelMovementRange_ = {}, float metersPerSecondMove_ = {}, float minScoreDifference_ = {}, GlobalNamespace::MultiplayerPlayersManager* multiplayerPlayersManager_ = {}, GlobalNamespace::MultiplayerScoreProvider* scoreProvider_ = {}, GlobalNamespace::MultiplayerLayoutProvider* layoutProvider_ = {}, GlobalNamespace::MultiplayerController* multiplayerController_ = {}, System::Collections::Generic::List_1<GlobalNamespace::MultiplayerScoreProvider::RankedPlayer*>* reusablePlayersList_ = {}, float lastFrameBaseScore_ = {}) noexcept : movementRange{movementRange_}, duelMovementRange{duelMovementRange_}, metersPerSecondMove{metersPerSecondMove_}, minScoreDifference{minScoreDifference_}, multiplayerPlayersManager{multiplayerPlayersManager_}, scoreProvider{scoreProvider_}, layoutProvider{layoutProvider_}, multiplayerController{multiplayerController_}, reusablePlayersList{reusablePlayersList_}, lastFrameBaseScore{lastFrameBaseScore_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void Start()
    // Offset: 0xF83DD4
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0xF83E98
    void OnDestroy();
    // protected System.Void Update()
    // Offset: 0xF83F74
    void Update();
    // private System.Void HandleStateChanged(MultiplayerController/State state)
    // Offset: 0xF83E88
    void HandleStateChanged(GlobalNamespace::MultiplayerController::State state);
    // public System.Void .ctor()
    // Offset: 0xF8467C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MultiplayerVerticalPlayerMovementManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::MultiplayerVerticalPlayerMovementManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MultiplayerVerticalPlayerMovementManager*, creationType>()));
    }
  }; // MultiplayerVerticalPlayerMovementManager
  #pragma pack(pop)
  static check_size<sizeof(MultiplayerVerticalPlayerMovementManager), 80 + sizeof(float)> __GlobalNamespace_MultiplayerVerticalPlayerMovementManagerSizeCheck;
  static_assert(sizeof(MultiplayerVerticalPlayerMovementManager) == 0x54);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::MultiplayerVerticalPlayerMovementManager*, "", "MultiplayerVerticalPlayerMovementManager");
