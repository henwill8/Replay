// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IDisposable
#include "System/IDisposable.hpp"
// Including type: DisconnectedReason
#include "GlobalNamespace/DisconnectedReason.hpp"
// Including type: ConnectionFailedReason
#include "GlobalNamespace/ConnectionFailedReason.hpp"
// Including type: MultiplayerAvatarData
#include "GlobalNamespace/MultiplayerAvatarData.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Including type: System.Byte
#include "System/Byte.hpp"
// Including type: System.Single
#include "System/Single.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IConnection
  class IConnection;
  // Forward declaring type: IConnectedPlayer
  class IConnectedPlayer;
  // Forward declaring type: RollingAverage
  class RollingAverage;
  // Forward declaring type: IConnectionManager
  class IConnectionManager;
  // Forward declaring type: NetworkPacketSerializer`2<TType, TData>
  template<typename TType, typename TData>
  class NetworkPacketSerializer_2;
  // Forward declaring type: IConnectionInitParams`1<T>
  template<typename T>
  class IConnectionInitParams_1;
  // Forward declaring type: INetworkPacketSubSerializer`1<TData>
  template<typename TData>
  class INetworkPacketSubSerializer_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Forward declaring namespace: LiteNetLib::Utils
namespace LiteNetLib::Utils {
  // Forward declaring type: NetDataWriter
  class NetDataWriter;
  // Forward declaring type: NetDataReader
  class NetDataReader;
  // Forward declaring type: INetSerializable
  class INetSerializable;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: LiteNetLib
namespace LiteNetLib {
  // Forward declaring type: DeliveryMethod
  struct DeliveryMethod;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: ConnectedPlayerManager
  class ConnectedPlayerManager : public ::Il2CppObject/*, public System::IDisposable*/ {
    public:
    // Nested type: GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer
    class ConnectedPlayer;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::InternalMessageType
    struct InternalMessageType;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::MessageType
    struct MessageType;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket
    class PlayerConnectedPacket;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket
    class PlayerStatePacket;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket
    class PlayerSortOrderPacket;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket
    class PlayerDisconnectedPacket;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket
    class KickPlayerPacket;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::SyncTimePacket
    class SyncTimePacket;
    // Nested type: GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket
    class PlayerLatencyPacket;
    // Autogenerated type: ConnectedPlayerManager/InternalMessageType
    struct InternalMessageType : public System::Enum {
      public:
      // public System.Byte value__
      // Offset: 0x0
      uint8_t value;
      // Creating value type constructor for type: InternalMessageType
      constexpr InternalMessageType(uint8_t value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator uint8_t
      constexpr operator uint8_t() const noexcept {
        return value;
      }
      // static field const value: static public ConnectedPlayerManager/InternalMessageType SyncTime
      static constexpr const uint8_t SyncTime = 0u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType SyncTime
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_SyncTime();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType SyncTime
      static void _set_SyncTime(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
      // static field const value: static public ConnectedPlayerManager/InternalMessageType PlayerConnected
      static constexpr const uint8_t PlayerConnected = 1u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerConnected
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_PlayerConnected();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerConnected
      static void _set_PlayerConnected(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
      // static field const value: static public ConnectedPlayerManager/InternalMessageType PlayerStateUpdate
      static constexpr const uint8_t PlayerStateUpdate = 2u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerStateUpdate
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_PlayerStateUpdate();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerStateUpdate
      static void _set_PlayerStateUpdate(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
      // static field const value: static public ConnectedPlayerManager/InternalMessageType PlayerLatencyUpdate
      static constexpr const uint8_t PlayerLatencyUpdate = 3u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerLatencyUpdate
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_PlayerLatencyUpdate();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerLatencyUpdate
      static void _set_PlayerLatencyUpdate(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
      // static field const value: static public ConnectedPlayerManager/InternalMessageType PlayerDisconnected
      static constexpr const uint8_t PlayerDisconnected = 4u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerDisconnected
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_PlayerDisconnected();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerDisconnected
      static void _set_PlayerDisconnected(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
      // static field const value: static public ConnectedPlayerManager/InternalMessageType PlayerSortOrderUpdate
      static constexpr const uint8_t PlayerSortOrderUpdate = 5u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType PlayerSortOrderUpdate
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_PlayerSortOrderUpdate();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType PlayerSortOrderUpdate
      static void _set_PlayerSortOrderUpdate(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
      // static field const value: static public ConnectedPlayerManager/InternalMessageType Party
      static constexpr const uint8_t Party = 6u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType Party
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_Party();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType Party
      static void _set_Party(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
      // static field const value: static public ConnectedPlayerManager/InternalMessageType MultiplayerSession
      static constexpr const uint8_t MultiplayerSession = 7u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType MultiplayerSession
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_MultiplayerSession();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType MultiplayerSession
      static void _set_MultiplayerSession(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
      // static field const value: static public ConnectedPlayerManager/InternalMessageType KickPlayer
      static constexpr const uint8_t KickPlayer = 8u;
      // Get static field: static public ConnectedPlayerManager/InternalMessageType KickPlayer
      static GlobalNamespace::ConnectedPlayerManager::InternalMessageType _get_KickPlayer();
      // Set static field: static public ConnectedPlayerManager/InternalMessageType KickPlayer
      static void _set_KickPlayer(GlobalNamespace::ConnectedPlayerManager::InternalMessageType value);
    }; // ConnectedPlayerManager/InternalMessageType
    // private System.Action connectedEvent
    // Offset: 0x10
    System::Action* connectedEvent;
    // private System.Action reinitializedEvent
    // Offset: 0x18
    System::Action* reinitializedEvent;
    // private System.Action`1<DisconnectedReason> disconnectedEvent
    // Offset: 0x20
    System::Action_1<GlobalNamespace::DisconnectedReason>* disconnectedEvent;
    // private System.Action`1<ConnectionFailedReason> connectionFailedEvent
    // Offset: 0x28
    System::Action_1<GlobalNamespace::ConnectionFailedReason>* connectionFailedEvent;
    // private System.Action`1<IConnectedPlayer> playerConnectedEvent
    // Offset: 0x30
    System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerConnectedEvent;
    // private System.Action`1<IConnectedPlayer> playerDisconnectedEvent
    // Offset: 0x38
    System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerDisconnectedEvent;
    // private System.Action`1<IConnectedPlayer> playerStateChangedEvent
    // Offset: 0x40
    System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerStateChangedEvent;
    // private System.Action`1<IConnectedPlayer> playerOrderChangedEvent
    // Offset: 0x48
    System::Action_1<GlobalNamespace::IConnectedPlayer*>* playerOrderChangedEvent;
    // private System.Action syncTimeInitializedEvent
    // Offset: 0x50
    System::Action* syncTimeInitializedEvent;
    // private readonly System.Int64 _startTicks
    // Offset: 0x58
    int64_t startTicks;
    // private readonly RollingAverage _syncTimeOffset
    // Offset: 0x60
    GlobalNamespace::RollingAverage* syncTimeOffset;
    // private System.Single _syncTimeDelay
    // Offset: 0x68
    float syncTimeDelay;
    // private readonly IConnectionManager _connectionManager
    // Offset: 0x70
    GlobalNamespace::IConnectionManager* connectionManager;
    // private readonly LiteNetLib.Utils.NetDataWriter _temporaryDataWriter
    // Offset: 0x78
    LiteNetLib::Utils::NetDataWriter* temporaryDataWriter;
    // private readonly LiteNetLib.Utils.NetDataWriter _reliableDataWriter
    // Offset: 0x80
    LiteNetLib::Utils::NetDataWriter* reliableDataWriter;
    // private readonly LiteNetLib.Utils.NetDataWriter _unreliableDataWriter
    // Offset: 0x88
    LiteNetLib::Utils::NetDataWriter* unreliableDataWriter;
    // private readonly System.Collections.Generic.List`1<ConnectedPlayerManager/ConnectedPlayer> _players
    // Offset: 0x90
    System::Collections::Generic::List_1<GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer*>* players;
    // private readonly System.Collections.Generic.HashSet`1<System.String> _localPlayerState
    // Offset: 0x98
    System::Collections::Generic::HashSet_1<::Il2CppString*>* localPlayerState;
    // private MultiplayerAvatarData _localPlayerAvatar
    // Offset: 0xA0
    GlobalNamespace::MultiplayerAvatarData localPlayerAvatar;
    // private ConnectedPlayerManager/ConnectedPlayer _localPlayer
    // Offset: 0x110
    GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* localPlayer;
    // private System.Byte _lastConnectionId
    // Offset: 0x118
    uint8_t lastConnectionId;
    // private System.Single _lastSyncTimeUpdate
    // Offset: 0x11C
    float lastSyncTimeUpdate;
    // private System.Single _lastPollTime
    // Offset: 0x120
    float lastPollTime;
    // private readonly NetworkPacketSerializer`2<ConnectedPlayerManager/InternalMessageType,IConnectedPlayer> _messageSerializer
    // Offset: 0x128
    GlobalNamespace::NetworkPacketSerializer_2<GlobalNamespace::ConnectedPlayerManager::InternalMessageType, GlobalNamespace::IConnectedPlayer*>* messageSerializer;
    // Creating interface conversion operator: operator System::IDisposable
    operator System::IDisposable() noexcept {
      return *reinterpret_cast<System::IDisposable*>(this);
    }
    // static field const value: static public System.Int32 invalidSortIndex
    static constexpr const int invalidSortIndex = -1;
    // Get static field: static public System.Int32 invalidSortIndex
    static int _get_invalidSortIndex();
    // Set static field: static public System.Int32 invalidSortIndex
    static void _set_invalidSortIndex(int value);
    // static field const value: static private System.Byte kAllConnectionsId
    static constexpr const uint8_t kAllConnectionsId = 255u;
    // Get static field: static private System.Byte kAllConnectionsId
    static uint8_t _get_kAllConnectionsId();
    // Set static field: static private System.Byte kAllConnectionsId
    static void _set_kAllConnectionsId(uint8_t value);
    // static field const value: static private System.Byte kLocalConnectionId
    static constexpr const uint8_t kLocalConnectionId = 0u;
    // Get static field: static private System.Byte kLocalConnectionId
    static uint8_t _get_kLocalConnectionId();
    // Set static field: static private System.Byte kLocalConnectionId
    static void _set_kLocalConnectionId(uint8_t value);
    // static field const value: static private System.Single kSyncTimeUpdateFrequency
    static constexpr const float kSyncTimeUpdateFrequency = 5;
    // Get static field: static private System.Single kSyncTimeUpdateFrequency
    static float _get_kSyncTimeUpdateFrequency();
    // Set static field: static private System.Single kSyncTimeUpdateFrequency
    static void _set_kSyncTimeUpdateFrequency(float value);
    // static field const value: static private System.Single kSyncTimeAllowedReceiveWindow
    static constexpr const float kSyncTimeAllowedReceiveWindow = 0.03;
    // Get static field: static private System.Single kSyncTimeAllowedReceiveWindow
    static float _get_kSyncTimeAllowedReceiveWindow();
    // Set static field: static private System.Single kSyncTimeAllowedReceiveWindow
    static void _set_kSyncTimeAllowedReceiveWindow(float value);
    // static field const value: static private System.Int32 kMaxUnreliableMessageLength
    static constexpr const int kMaxUnreliableMessageLength = 412;
    // Get static field: static private System.Int32 kMaxUnreliableMessageLength
    static int _get_kMaxUnreliableMessageLength();
    // Set static field: static private System.Int32 kMaxUnreliableMessageLength
    static void _set_kMaxUnreliableMessageLength(int value);
    // private System.Byte GetNextConnectionId()
    // Offset: 0x1B444DC
    uint8_t GetNextConnectionId();
    // private System.Void RemoveAllPlayers(DisconnectedReason reason)
    // Offset: 0x1B44604
    void RemoveAllPlayers(GlobalNamespace::DisconnectedReason reason);
    // private System.Void RemovePlayer(ConnectedPlayerManager/ConnectedPlayer player, DisconnectedReason reason)
    // Offset: 0x1B44680
    void RemovePlayer(GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* player, GlobalNamespace::DisconnectedReason reason);
    // private System.Void AddPlayer(ConnectedPlayerManager/ConnectedPlayer player)
    // Offset: 0x1B449B8
    void AddPlayer(GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* player);
    // private ConnectedPlayerManager/ConnectedPlayer GetPlayer(System.Byte connectionId)
    // Offset: 0x1B4452C
    GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* GetPlayer(uint8_t connectionId);
    // private ConnectedPlayerManager/ConnectedPlayer GetPlayer(IConnection connection, System.Byte remoteConnectionId)
    // Offset: 0x1B452A0
    GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* GetPlayer(GlobalNamespace::IConnection* connection, uint8_t remoteConnectionId);
    // private ConnectedPlayerManager/ConnectedPlayer GetPlayer(System.String userId)
    // Offset: 0x1B453C4
    GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* GetPlayer(::Il2CppString* userId);
    // public IConnectedPlayer GetConnectedPlayer(System.Int32 index)
    // Offset: 0x1B454A4
    GlobalNamespace::IConnectedPlayer* GetConnectedPlayer(int index);
    // public System.Void add_connectedEvent(System.Action value)
    // Offset: 0x1B4551C
    void add_connectedEvent(System::Action* value);
    // public System.Void remove_connectedEvent(System.Action value)
    // Offset: 0x1B455C0
    void remove_connectedEvent(System::Action* value);
    // public System.Void add_reinitializedEvent(System.Action value)
    // Offset: 0x1B45664
    void add_reinitializedEvent(System::Action* value);
    // public System.Void remove_reinitializedEvent(System.Action value)
    // Offset: 0x1B45708
    void remove_reinitializedEvent(System::Action* value);
    // public System.Void add_disconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0x1B457AC
    void add_disconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value);
    // public System.Void remove_disconnectedEvent(System.Action`1<DisconnectedReason> value)
    // Offset: 0x1B45850
    void remove_disconnectedEvent(System::Action_1<GlobalNamespace::DisconnectedReason>* value);
    // public System.Void add_connectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    // Offset: 0x1B458F4
    void add_connectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value);
    // public System.Void remove_connectionFailedEvent(System.Action`1<ConnectionFailedReason> value)
    // Offset: 0x1B45998
    void remove_connectionFailedEvent(System::Action_1<GlobalNamespace::ConnectionFailedReason>* value);
    // public System.Void add_playerConnectedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x1B45A3C
    void add_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void remove_playerConnectedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x1B45AE0
    void remove_playerConnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void add_playerDisconnectedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x1B45B84
    void add_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void remove_playerDisconnectedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x1B45C28
    void remove_playerDisconnectedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void add_playerStateChangedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x1B45CCC
    void add_playerStateChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void remove_playerStateChangedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x1B45D70
    void remove_playerStateChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void add_playerOrderChangedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x1B45E14
    void add_playerOrderChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void remove_playerOrderChangedEvent(System.Action`1<IConnectedPlayer> value)
    // Offset: 0x1B45EB8
    void remove_playerOrderChangedEvent(System::Action_1<GlobalNamespace::IConnectedPlayer*>* value);
    // public System.Void add_syncTimeInitializedEvent(System.Action value)
    // Offset: 0x1B45F5C
    void add_syncTimeInitializedEvent(System::Action* value);
    // public System.Void remove_syncTimeInitializedEvent(System.Action value)
    // Offset: 0x1B46000
    void remove_syncTimeInitializedEvent(System::Action* value);
    // public System.Boolean get_isConnectionOwner()
    // Offset: 0x1B44C40
    bool get_isConnectionOwner();
    // public System.Boolean get_isConnectedOrConnecting()
    // Offset: 0x1B460A4
    bool get_isConnectedOrConnecting();
    // public System.Boolean get_isConnected()
    // Offset: 0x1B44840
    bool get_isConnected();
    // public System.Boolean get_isConnecting()
    // Offset: 0x1B460DC
    bool get_isConnecting();
    // public System.Boolean get_isDisconnecting()
    // Offset: 0x1B46190
    bool get_isDisconnecting();
    // public IConnectedPlayer get_localPlayer()
    // Offset: 0x1B46244
    GlobalNamespace::IConnectedPlayer* get_localPlayer();
    // public System.Int32 get_connectedPlayerCount()
    // Offset: 0x1B4624C
    int get_connectedPlayerCount();
    // public System.Single get_syncTime()
    // Offset: 0x1B44CA4
    float get_syncTime();
    // public System.Single get_syncTimeDelay()
    // Offset: 0x1B4633C
    float get_syncTimeDelay();
    // public System.Void set_syncTimeDelay(System.Single value)
    // Offset: 0x1B46344
    void set_syncTimeDelay(float value);
    // public System.Boolean get_syncTimeInitialized()
    // Offset: 0x1B4634C
    bool get_syncTimeInitialized();
    // private System.Single get_runTime()
    // Offset: 0x1B4629C
    float get_runTime();
    // static public ConnectedPlayerManager TryCreate(IConnectionInitParams`1<T> initParams)
    // Offset: 0xFFFFFFFF
    template<class T>
    static GlobalNamespace::ConnectedPlayerManager* TryCreate(GlobalNamespace::IConnectionInitParams_1<T>* initParams) {
      static_assert(std::is_base_of_v<GlobalNamespace::IConnectionManager, std::remove_pointer_t<T>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<GlobalNamespace::ConnectedPlayerManager*>("", "ConnectedPlayerManager", "TryCreate", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, initParams)));
    }
    // private System.Void .ctor(IConnectionManager connectionManager)
    // Offset: 0x1B46388
    static ConnectedPlayerManager* New_ctor(GlobalNamespace::IConnectionManager* connectionManager);
    // private System.Void ResetLocalState()
    // Offset: 0x1B470FC
    void ResetLocalState();
    // public System.Boolean TryReinitialize(IConnectionInitParams`1<T> initParams)
    // Offset: 0xFFFFFFFF
    template<class T>
    bool TryReinitialize(GlobalNamespace::IConnectionInitParams_1<T>* initParams) {
      static_assert(std::is_base_of_v<GlobalNamespace::IConnectionManager, std::remove_pointer_t<T>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<bool>(this, "TryReinitialize", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, initParams)));
    }
    // public System.Void PollUpdate()
    // Offset: 0x1B47448
    void PollUpdate();
    // public System.Void RegisterSerializer(ConnectedPlayerManager/MessageType serializerType, INetworkPacketSubSerializer`1<IConnectedPlayer> subSerializer)
    // Offset: 0x1B47814
    void RegisterSerializer(GlobalNamespace::ConnectedPlayerManager::MessageType serializerType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>* subSerializer);
    // public System.Void UnregisterSerializer(ConnectedPlayerManager/MessageType serializerType, INetworkPacketSubSerializer`1<IConnectedPlayer> subSerializer)
    // Offset: 0x1B47884
    void UnregisterSerializer(GlobalNamespace::ConnectedPlayerManager::MessageType serializerType, GlobalNamespace::INetworkPacketSubSerializer_1<GlobalNamespace::IConnectedPlayer*>* subSerializer);
    // public T GetConnectionManager()
    // Offset: 0xFFFFFFFF
    template<class T>
    T GetConnectionManager() {
      static_assert(std::is_base_of_v<GlobalNamespace::IConnectionManager, std::remove_pointer_t<T>>);
      return THROW_UNLESS((il2cpp_utils::RunGenericMethod<T>(this, "GetConnectionManager", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()})));
    }
    // public System.Void Disconnect(DisconnectedReason disconnectedReason)
    // Offset: 0x1B448F4
    void Disconnect(GlobalNamespace::DisconnectedReason disconnectedReason);
    // public System.Void KickPlayer(System.String userId, DisconnectedReason disconnectedReason)
    // Offset: 0x1B47E34
    void KickPlayer(::Il2CppString* userId, GlobalNamespace::DisconnectedReason disconnectedReason);
    // public System.Void SetLocalPlayerState(System.String state, System.Boolean setState)
    // Offset: 0x1B47F20
    void SetLocalPlayerState(::Il2CppString* state, bool setState);
    // public System.Void SetLocalPlayerAvatar(MultiplayerAvatarData multiplayerAvatarData)
    // Offset: 0x1B47FF0
    void SetLocalPlayerAvatar(GlobalNamespace::MultiplayerAvatarData multiplayerAvatarData);
    // public System.Void SetLocalPlayerSortIndex(System.Int32 sortIndex)
    // Offset: 0x1B480B8
    void SetLocalPlayerSortIndex(int sortIndex);
    // public System.Void SetPlayerSortIndex(IConnectedPlayer player, System.Int32 sortIndex)
    // Offset: 0x1B480C8
    void SetPlayerSortIndex(GlobalNamespace::IConnectedPlayer* player, int sortIndex);
    // private System.Void HandleConnected()
    // Offset: 0x1B481CC
    void HandleConnected();
    // private System.Void HandleDisconnected(DisconnectedReason disconnectedReason)
    // Offset: 0x1B481E0
    void HandleDisconnected(GlobalNamespace::DisconnectedReason disconnectedReason);
    // private System.Void HandleConnectionFailed(ConnectionFailedReason reason)
    // Offset: 0x1B48260
    void HandleConnectionFailed(GlobalNamespace::ConnectionFailedReason reason);
    // private System.Void HandleConnectionConnected(IConnection connection)
    // Offset: 0x1B47334
    void HandleConnectionConnected(GlobalNamespace::IConnection* connection);
    // private System.Void OnNetworkLatencyUpdate(IConnection connection, System.Single latency)
    // Offset: 0x1B484C8
    void OnNetworkLatencyUpdate(GlobalNamespace::IConnection* connection, float latency);
    // private System.Void HandleConnectionDisconnected(IConnection connection, DisconnectedReason disconnectedReason)
    // Offset: 0x1B48704
    void HandleConnectionDisconnected(GlobalNamespace::IConnection* connection, GlobalNamespace::DisconnectedReason disconnectedReason);
    // private System.Void OnNetworkReceive(IConnection connection, LiteNetLib.Utils.NetDataReader reader, LiteNetLib.DeliveryMethod deliveryMethod)
    // Offset: 0x1B4881C
    void OnNetworkReceive(GlobalNamespace::IConnection* connection, LiteNetLib::Utils::NetDataReader* reader, LiteNetLib::DeliveryMethod deliveryMethod);
    // public System.Void Send(T message)
    // Offset: 0xFFFFFFFF
    template<class T>
    void Send(T message) {
      static_assert(std::is_base_of_v<LiteNetLib::Utils::INetSerializable, std::remove_pointer_t<T>>);
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "Send", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, message));
    }
    // public System.Void SendUnreliable(T message)
    // Offset: 0xFFFFFFFF
    template<class T>
    void SendUnreliable(T message) {
      static_assert(std::is_base_of_v<LiteNetLib::Utils::INetSerializable, std::remove_pointer_t<T>>);
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "SendUnreliable", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, message));
    }
    // private System.Void SendImmediately(LiteNetLib.Utils.INetSerializable message, System.Boolean onlyFirstDegree)
    // Offset: 0x1B44CE8
    void SendImmediately(LiteNetLib::Utils::INetSerializable* message, bool onlyFirstDegree);
    // private System.Void SendImmediatelyExcludingPlayer(LiteNetLib.Utils.INetSerializable message, ConnectedPlayerManager/ConnectedPlayer excludingPlayer, System.Boolean onlyFirstDegree)
    // Offset: 0x1B44E74
    void SendImmediatelyExcludingPlayer(LiteNetLib::Utils::INetSerializable* message, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* excludingPlayer, bool onlyFirstDegree);
    // private System.Void SendImmediatelyToPlayer(LiteNetLib.Utils.INetSerializable message, ConnectedPlayerManager/ConnectedPlayer toPlayer)
    // Offset: 0x1B44F8C
    void SendImmediatelyToPlayer(LiteNetLib::Utils::INetSerializable* message, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* toPlayer);
    // private System.Void SendImmediatelyFromPlayer(LiteNetLib.Utils.INetSerializable message, ConnectedPlayerManager/ConnectedPlayer fromPlayer, System.Boolean onlyFirstDegree)
    // Offset: 0x1B48604
    void SendImmediatelyFromPlayer(LiteNetLib::Utils::INetSerializable* message, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* fromPlayer, bool onlyFirstDegree);
    // private System.Void SendImmediatelyFromPlayerToPlayer(LiteNetLib.Utils.INetSerializable message, ConnectedPlayerManager/ConnectedPlayer fromPlayer, ConnectedPlayerManager/ConnectedPlayer toPlayer)
    // Offset: 0x1B451A8
    void SendImmediatelyFromPlayerToPlayer(LiteNetLib::Utils::INetSerializable* message, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* fromPlayer, GlobalNamespace::ConnectedPlayerManager::ConnectedPlayer* toPlayer);
    // private System.Void FlushReliableQueue()
    // Offset: 0x1B47624
    void FlushReliableQueue();
    // private System.Void FlushUnreliableQueue()
    // Offset: 0x1B4771C
    void FlushUnreliableQueue();
    // private LiteNetLib.Utils.NetDataWriter WriteOne(System.Byte senderId, System.Byte receiverId, LiteNetLib.Utils.INetSerializable message)
    // Offset: 0x1B48C30
    LiteNetLib::Utils::NetDataWriter* WriteOne(uint8_t senderId, uint8_t receiverId, LiteNetLib::Utils::INetSerializable* message);
    // private System.Void Write(LiteNetLib.Utils.NetDataWriter writer, LiteNetLib.Utils.INetSerializable packet)
    // Offset: 0x1B48CB0
    void Write(LiteNetLib::Utils::NetDataWriter* writer, LiteNetLib::Utils::INetSerializable* packet);
    // private System.Void HandleServerPlayerConnected(ConnectedPlayerManager/PlayerConnectedPacket packet, IConnectedPlayer iPlayer)
    // Offset: 0x1B48DAC
    void HandleServerPlayerConnected(GlobalNamespace::ConnectedPlayerManager::PlayerConnectedPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer);
    // private System.Void HandlePlayerStateUpdate(ConnectedPlayerManager/PlayerStatePacket packet, IConnectedPlayer iPlayer)
    // Offset: 0x1B48FD4
    void HandlePlayerStateUpdate(GlobalNamespace::ConnectedPlayerManager::PlayerStatePacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer);
    // private System.Void HandlePlayerLatencyUpdate(ConnectedPlayerManager/PlayerLatencyPacket packet, IConnectedPlayer iPlayer)
    // Offset: 0x1B490F4
    void HandlePlayerLatencyUpdate(GlobalNamespace::ConnectedPlayerManager::PlayerLatencyPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer);
    // private System.Void HandleServerPlayerDisconnected(ConnectedPlayerManager/PlayerDisconnectedPacket packet, IConnectedPlayer iPlayer)
    // Offset: 0x1B49244
    void HandleServerPlayerDisconnected(GlobalNamespace::ConnectedPlayerManager::PlayerDisconnectedPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer);
    // private System.Void HandleKickPlayerPacket(ConnectedPlayerManager/KickPlayerPacket packet, IConnectedPlayer iPlayer)
    // Offset: 0x1B49350
    void HandleKickPlayerPacket(GlobalNamespace::ConnectedPlayerManager::KickPlayerPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer);
    // private System.Void HandlePlayerSortOrderUpdate(ConnectedPlayerManager/PlayerSortOrderPacket packet, IConnectedPlayer iPlayer)
    // Offset: 0x1B4949C
    void HandlePlayerSortOrderUpdate(GlobalNamespace::ConnectedPlayerManager::PlayerSortOrderPacket* packet, GlobalNamespace::IConnectedPlayer* iPlayer);
    // private System.Void HandleSyncTimePacket(ConnectedPlayerManager/SyncTimePacket packet, IConnectedPlayer player)
    // Offset: 0x1B49638
    void HandleSyncTimePacket(GlobalNamespace::ConnectedPlayerManager::SyncTimePacket* packet, GlobalNamespace::IConnectedPlayer* player);
    // private System.Void Log(System.String message)
    // Offset: 0x1B497F0
    void Log(::Il2CppString* message);
    // public System.Void Dispose()
    // Offset: 0x1B478F4
    // Implemented from: System.IDisposable
    // Base method: System.Void IDisposable::Dispose()
    void Dispose();
    // Creating proxy method: System_IDisposable_Dispose
    // Maps to method: Dispose
    void System_IDisposable_Dispose();
  }; // ConnectedPlayerManager
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::ConnectedPlayerManager*, "", "ConnectedPlayerManager");
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::ConnectedPlayerManager::InternalMessageType, "", "ConnectedPlayerManager/InternalMessageType");
#pragma pack(pop)
