// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: BeatmapObjectSpawnCenter
  // [] Offset: FFFFFFFF
  class BeatmapObjectSpawnCenter : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::BeatmapObjectSpawnCenter::PlayerCountToDistance
    class PlayerCountToDistance;
    // private BeatmapObjectSpawnCenter/PlayerCountToDistance[] _distances
    // Size: 0x8
    // Offset: 0x18
    ::Array<GlobalNamespace::BeatmapObjectSpawnCenter::PlayerCountToDistance*>* distances;
    // Field size check
    static_assert(sizeof(::Array<GlobalNamespace::BeatmapObjectSpawnCenter::PlayerCountToDistance*>*) == 0x8);
    // private System.Single _defaultDistnace
    // Size: 0x4
    // Offset: 0x20
    float defaultDistnace;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: defaultDistnace and: spawnCenterDistanceWasFoundEvent
    char __padding1[0x4] = {};
    // [CompilerGeneratedAttribute] Offset: 0xD374C0
    // private System.Action`1<System.Single> spawnCenterDistanceWasFoundEvent
    // Size: 0x8
    // Offset: 0x28
    System::Action_1<float>* spawnCenterDistanceWasFoundEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<float>*) == 0x8);
    // private System.Boolean _spawnCenterDistanceWasFound
    // Size: 0x1
    // Offset: 0x30
    bool spawnCenterDistanceWasFound;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: spawnCenterDistanceWasFound and: spawnCenterDistance
    char __padding3[0x3] = {};
    // private System.Single _spawnCenterDistance
    // Size: 0x4
    // Offset: 0x34
    float spawnCenterDistance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: BeatmapObjectSpawnCenter
    BeatmapObjectSpawnCenter(::Array<GlobalNamespace::BeatmapObjectSpawnCenter::PlayerCountToDistance*>* distances_ = {}, float defaultDistnace_ = {}, System::Action_1<float>* spawnCenterDistanceWasFoundEvent_ = {}, bool spawnCenterDistanceWasFound_ = {}, float spawnCenterDistance_ = {}) noexcept : distances{distances_}, defaultDistnace{defaultDistnace_}, spawnCenterDistanceWasFoundEvent{spawnCenterDistanceWasFoundEvent_}, spawnCenterDistanceWasFound{spawnCenterDistanceWasFound_}, spawnCenterDistance{spawnCenterDistance_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Single get_spawnCenterDistance()
    // Offset: 0xF5A80C
    float get_spawnCenterDistance();
    // public System.Boolean get_spawnCenterDistanceWasFound()
    // Offset: 0xF5A814
    bool get_spawnCenterDistanceWasFound();
    // public System.Void add_spawnCenterDistanceWasFoundEvent(System.Action`1<System.Single> value)
    // Offset: 0xF5A81C
    void add_spawnCenterDistanceWasFoundEvent(System::Action_1<float>* value);
    // public System.Void remove_spawnCenterDistanceWasFoundEvent(System.Action`1<System.Single> value)
    // Offset: 0xF5A8C0
    void remove_spawnCenterDistanceWasFoundEvent(System::Action_1<float>* value);
    // public System.Single CalculateSpawnCenterPosition(System.Int32 numberOfPlayers)
    // Offset: 0xF5A964
    float CalculateSpawnCenterPosition(int numberOfPlayers);
    // private System.Void ReportAndSaveSpawnCenterDistance(System.Single distance)
    // Offset: 0xF5AA90
    void ReportAndSaveSpawnCenterDistance(float distance);
    // public System.Void .ctor()
    // Offset: 0xF5AB10
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BeatmapObjectSpawnCenter* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::BeatmapObjectSpawnCenter::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BeatmapObjectSpawnCenter*, creationType>()));
    }
  }; // BeatmapObjectSpawnCenter
  #pragma pack(pop)
  static check_size<sizeof(BeatmapObjectSpawnCenter), 52 + sizeof(float)> __GlobalNamespace_BeatmapObjectSpawnCenterSizeCheck;
  static_assert(sizeof(BeatmapObjectSpawnCenter) == 0x38);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::BeatmapObjectSpawnCenter*, "", "BeatmapObjectSpawnCenter");
