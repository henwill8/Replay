// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: PauseMenuManager
  class PauseMenuManager;
  // Forward declaring type: IGamePause
  class IGamePause;
  // Forward declaring type: IPauseTrigger
  class IPauseTrigger;
  // Forward declaring type: BeatmapObjectManager
  class BeatmapObjectManager;
  // Forward declaring type: ILevelRestartController
  class ILevelRestartController;
  // Forward declaring type: IReturnToMenuController
  class IReturnToMenuController;
  // Forward declaring type: VRPlatformHelper
  class VRPlatformHelper;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: PauseController
  class PauseController : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::PauseController::$$c__DisplayClass17_0
    class $$c__DisplayClass17_0;
    // private PauseMenuManager _pauseMenuManager
    // Offset: 0x18
    GlobalNamespace::PauseMenuManager* pauseMenuManager;
    // private IGamePause _gamePause
    // Offset: 0x20
    GlobalNamespace::IGamePause* gamePause;
    // private IPauseTrigger _pauseTrigger
    // Offset: 0x28
    GlobalNamespace::IPauseTrigger* pauseTrigger;
    // private BeatmapObjectManager _beatmapObjectManager
    // Offset: 0x30
    GlobalNamespace::BeatmapObjectManager* beatmapObjectManager;
    // private ILevelRestartController _levelRestartController
    // Offset: 0x38
    GlobalNamespace::ILevelRestartController* levelRestartController;
    // private IReturnToMenuController _returnToMenuController
    // Offset: 0x40
    GlobalNamespace::IReturnToMenuController* returnToMenuController;
    // private VRPlatformHelper _vrPlatformHelper
    // Offset: 0x48
    GlobalNamespace::VRPlatformHelper* vrPlatformHelper;
    // private System.Action didPauseEvent
    // Offset: 0x50
    System::Action* didPauseEvent;
    // private System.Action didResumeEvent
    // Offset: 0x58
    System::Action* didResumeEvent;
    // private System.Action`1<System.Action`1<System.Boolean>> canPauseEvent
    // Offset: 0x60
    System::Action_1<System::Action_1<bool>*>* canPauseEvent;
    // private System.Boolean _paused
    // Offset: 0x68
    bool paused;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void add_didPauseEvent(System.Action value)
    // Offset: 0xBD3B64
    void add_didPauseEvent(System::Action* value);
    // public System.Void remove_didPauseEvent(System.Action value)
    // Offset: 0xBD3C08
    void remove_didPauseEvent(System::Action* value);
    // public System.Void add_didResumeEvent(System.Action value)
    // Offset: 0xBD3CAC
    void add_didResumeEvent(System::Action* value);
    // public System.Void remove_didResumeEvent(System.Action value)
    // Offset: 0xBD3D50
    void remove_didResumeEvent(System::Action* value);
    // public System.Void add_canPauseEvent(System.Action`1<System.Action`1<System.Boolean>> value)
    // Offset: 0xBD3DF4
    void add_canPauseEvent(System::Action_1<System::Action_1<bool>*>* value);
    // public System.Void remove_canPauseEvent(System.Action`1<System.Action`1<System.Boolean>> value)
    // Offset: 0xBD3E98
    void remove_canPauseEvent(System::Action_1<System::Action_1<bool>*>* value);
    // private System.Boolean get_canPause()
    // Offset: 0xBD3F3C
    bool get_canPause();
    // private System.Void Start()
    // Offset: 0xBD4028
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0xBD44F8
    void OnDestroy();
    // protected System.Void OnApplicationPause(System.Boolean pauseStatus)
    // Offset: 0xBD4A60
    void OnApplicationPause(bool pauseStatus);
    // public System.Void Pause()
    // Offset: 0xBD4A6C
    void Pause();
    // private System.Void HandlePauseTriggered()
    // Offset: 0xBD4C04
    void HandlePauseTriggered();
    // private System.Void HandleInputFocusWasCaptured()
    // Offset: 0xBD4C08
    void HandleInputFocusWasCaptured();
    // private System.Void HandleHMDUnmounted()
    // Offset: 0xBD4C0C
    void HandleHMDUnmounted();
    // private System.Void HandlePauseMenuManagerDidFinishResumeAnimation()
    // Offset: 0xBD4C10
    void HandlePauseMenuManagerDidFinishResumeAnimation();
    // private System.Void HandlePauseMenuManagerDidPressContinueButton()
    // Offset: 0xBD4CE4
    void HandlePauseMenuManagerDidPressContinueButton();
    // private System.Void HandlePauseMenuManagerDidPressRestartButton()
    // Offset: 0xBD4D54
    void HandlePauseMenuManagerDidPressRestartButton();
    // private System.Void HandlePauseMenuManagerDidPressMenuButton()
    // Offset: 0xBD4E04
    void HandlePauseMenuManagerDidPressMenuButton();
    // public System.Void .ctor()
    // Offset: 0xBD4EB4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static PauseController* New_ctor();
  }; // PauseController
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::PauseController*, "", "PauseController");
#pragma pack(pop)
