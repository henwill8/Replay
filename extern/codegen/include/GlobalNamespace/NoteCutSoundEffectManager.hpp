// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: NoteCutSoundEffect
#include "GlobalNamespace/NoteCutSoundEffect.hpp"
// Including type: System.Int32
#include "System/Int32.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: AudioManagerSO
  class AudioManagerSO;
  // Forward declaring type: BeatmapObjectManager
  class BeatmapObjectManager;
  // Forward declaring type: SaberManager
  class SaberManager;
  // Forward declaring type: AudioTimeSyncController
  class AudioTimeSyncController;
  // Forward declaring type: RandomObjectPicker`1<T>
  template<typename T>
  class RandomObjectPicker_1;
  // Forward declaring type: MonoMemoryPoolContainer`1<T>
  template<typename T>
  class MonoMemoryPoolContainer_1;
  // Forward declaring type: NoteController
  class NoteController;
  // Forward declaring type: NoteCutInfo
  class NoteCutInfo;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: AudioClip
  class AudioClip;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Autogenerated type: NoteCutSoundEffectManager
  class NoteCutSoundEffectManager : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: GlobalNamespace::NoteCutSoundEffectManager::InitData
    class InitData;
    // private AudioManagerSO _audioManager
    // Offset: 0x18
    GlobalNamespace::AudioManagerSO* audioManager;
    // private System.Single _audioSamplesBeatAlignOffset
    // Offset: 0x20
    float audioSamplesBeatAlignOffset;
    // private UnityEngine.AudioClip[] _longCutEffectsAudioClips
    // Offset: 0x28
    ::Array<UnityEngine::AudioClip*>* longCutEffectsAudioClips;
    // private UnityEngine.AudioClip[] _shortCutEffectsAudioClips
    // Offset: 0x30
    ::Array<UnityEngine::AudioClip*>* shortCutEffectsAudioClips;
    // private UnityEngine.AudioClip _testAudioClip
    // Offset: 0x38
    UnityEngine::AudioClip* testAudioClip;
    // private readonly NoteCutSoundEffectManager/InitData _initData
    // Offset: 0x40
    GlobalNamespace::NoteCutSoundEffectManager::InitData* initData;
    // private readonly BeatmapObjectManager _beatmapObjectManager
    // Offset: 0x48
    GlobalNamespace::BeatmapObjectManager* beatmapObjectManager;
    // private readonly SaberManager _saberManager
    // Offset: 0x50
    GlobalNamespace::SaberManager* saberManager;
    // private readonly NoteCutSoundEffect/Pool _noteCutSoundEffectPool
    // Offset: 0x58
    GlobalNamespace::NoteCutSoundEffect::Pool* noteCutSoundEffectPool;
    // private readonly AudioTimeSyncController _audioTimeSyncController
    // Offset: 0x60
    GlobalNamespace::AudioTimeSyncController* audioTimeSyncController;
    // private System.Boolean <handleWrongSaberTypeAsGood>k__BackingField
    // Offset: 0x68
    bool handleWrongSaberTypeAsGood;
    // private RandomObjectPicker`1<UnityEngine.AudioClip> _randomLongCutSoundPicker
    // Offset: 0x70
    GlobalNamespace::RandomObjectPicker_1<UnityEngine::AudioClip*>* randomLongCutSoundPicker;
    // private RandomObjectPicker`1<UnityEngine.AudioClip> _randomShortCutSoundPicker
    // Offset: 0x78
    GlobalNamespace::RandomObjectPicker_1<UnityEngine::AudioClip*>* randomShortCutSoundPicker;
    // private System.Single _prevNoteATime
    // Offset: 0x80
    float prevNoteATime;
    // private System.Single _prevNoteBTime
    // Offset: 0x84
    float prevNoteBTime;
    // private NoteCutSoundEffect _prevNoteASoundEffect
    // Offset: 0x88
    GlobalNamespace::NoteCutSoundEffect* prevNoteASoundEffect;
    // private NoteCutSoundEffect _prevNoteBSoundEffect
    // Offset: 0x90
    GlobalNamespace::NoteCutSoundEffect* prevNoteBSoundEffect;
    // private System.Single _beatAlignOffset
    // Offset: 0x98
    float beatAlignOffset;
    // private System.Boolean _useTestAudioClips
    // Offset: 0x9C
    bool useTestAudioClips;
    // private MonoMemoryPoolContainer`1<NoteCutSoundEffect> _noteCutSoundEffectPoolContainer
    // Offset: 0xA0
    GlobalNamespace::MonoMemoryPoolContainer_1<GlobalNamespace::NoteCutSoundEffect*>* noteCutSoundEffectPoolContainer;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Int32 kMaxNumberOfEffects
    static constexpr const int kMaxNumberOfEffects = 64;
    // Get static field: static private System.Int32 kMaxNumberOfEffects
    static int _get_kMaxNumberOfEffects();
    // Set static field: static private System.Int32 kMaxNumberOfEffects
    static void _set_kMaxNumberOfEffects(int value);
    // static field const value: static private System.Single kTwoNotesAtTheSameTimeVolumeMul
    static constexpr const float kTwoNotesAtTheSameTimeVolumeMul = 0.9;
    // Get static field: static private System.Single kTwoNotesAtTheSameTimeVolumeMul
    static float _get_kTwoNotesAtTheSameTimeVolumeMul();
    // Set static field: static private System.Single kTwoNotesAtTheSameTimeVolumeMul
    static void _set_kTwoNotesAtTheSameTimeVolumeMul(float value);
    // static field const value: static private System.Single kDenseNotesVolumeMul
    static constexpr const float kDenseNotesVolumeMul = 0.9;
    // Get static field: static private System.Single kDenseNotesVolumeMul
    static float _get_kDenseNotesVolumeMul();
    // Set static field: static private System.Single kDenseNotesVolumeMul
    static void _set_kDenseNotesVolumeMul(float value);
    // public System.Boolean get_handleWrongSaberTypeAsGood()
    // Offset: 0xFE39CC
    bool get_handleWrongSaberTypeAsGood();
    // public System.Void set_handleWrongSaberTypeAsGood(System.Boolean value)
    // Offset: 0xFE39D4
    void set_handleWrongSaberTypeAsGood(bool value);
    // protected System.Void Start()
    // Offset: 0xFE39E0
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0xFE3C1C
    void OnDestroy();
    // private System.Void HandleNoteWasSpawned(NoteController noteController)
    // Offset: 0xFE3D0C
    void HandleNoteWasSpawned(GlobalNamespace::NoteController* noteController);
    // private System.Void HandleNoteWasCut(NoteController noteController, NoteCutInfo noteCutInfo)
    // Offset: 0xFE419C
    void HandleNoteWasCut(GlobalNamespace::NoteController* noteController, GlobalNamespace::NoteCutInfo* noteCutInfo);
    // private System.Void HandleCutSoundEffectDidFinish(NoteCutSoundEffect cutSoundEffect)
    // Offset: 0xFE42B8
    void HandleCutSoundEffectDidFinish(GlobalNamespace::NoteCutSoundEffect* cutSoundEffect);
    // public System.Void Pause()
    // Offset: 0xFE4364
    void Pause();
    // public System.Void Resume()
    // Offset: 0xFE4460
    void Resume();
    // public System.Void .ctor()
    // Offset: 0xFE45A8
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static NoteCutSoundEffectManager* New_ctor();
  }; // NoteCutSoundEffectManager
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::NoteCutSoundEffectManager*, "", "NoteCutSoundEffectManager");
#pragma pack(pop)
