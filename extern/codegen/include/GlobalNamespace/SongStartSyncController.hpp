// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IMultiplayerSessionManager
  class IMultiplayerSessionManager;
  // Forward declaring type: IGameplayRpcManager
  class IGameplayRpcManager;
  // Forward declaring type: PlayersAtGameStartModel
  class PlayersAtGameStartModel;
  // Forward declaring type: SongStartHandler
  class SongStartHandler;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0x60
  #pragma pack(push, 1)
  // Autogenerated type: SongStartSyncController
  // [] Offset: FFFFFFFF
  class SongStartSyncController : public UnityEngine::MonoBehaviour {
    public:
    // [InjectAttribute] Offset: 0xD36650
    // private readonly IMultiplayerSessionManager _multiplayerSessionManager
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IMultiplayerSessionManager*) == 0x8);
    // [InjectAttribute] Offset: 0xD36660
    // private readonly IGameplayRpcManager _gameplayRpcManager
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::IGameplayRpcManager* gameplayRpcManager;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IGameplayRpcManager*) == 0x8);
    // [InjectAttribute] Offset: 0xD36670
    // private readonly PlayersAtGameStartModel _playersAtGameStartModel
    // Size: 0x8
    // Offset: 0x28
    GlobalNamespace::PlayersAtGameStartModel* playersAtGameStartModel;
    // Field size check
    static_assert(sizeof(GlobalNamespace::PlayersAtGameStartModel*) == 0x8);
    // private System.Single _waitStartTime
    // Size: 0x4
    // Offset: 0x30
    float waitStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _songStarted
    // Size: 0x1
    // Offset: 0x34
    bool songStarted;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: songStarted and: startTime
    char __padding4[0x3] = {};
    // private System.Single _startTime
    // Size: 0x4
    // Offset: 0x38
    float startTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: startTime and: songStartHandler
    char __padding5[0x4] = {};
    // private SongStartHandler _songStartHandler
    // Size: 0x8
    // Offset: 0x40
    GlobalNamespace::SongStartHandler* songStartHandler;
    // Field size check
    static_assert(sizeof(GlobalNamespace::SongStartHandler*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD36680
    // private System.Action syncStartFailedEvent
    // Size: 0x8
    // Offset: 0x48
    System::Action* syncStartFailedEvent;
    // Field size check
    static_assert(sizeof(System::Action*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD36690
    // private System.Action`1<System.Single> syncStartSuccessEvent
    // Size: 0x8
    // Offset: 0x50
    System::Action_1<float>* syncStartSuccessEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<float>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD366A0
    // private System.Action`1<System.Single> syncResumeEvent
    // Size: 0x8
    // Offset: 0x58
    System::Action_1<float>* syncResumeEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<float>*) == 0x8);
    // Creating value type constructor for type: SongStartSyncController
    SongStartSyncController(GlobalNamespace::IMultiplayerSessionManager* multiplayerSessionManager_ = {}, GlobalNamespace::IGameplayRpcManager* gameplayRpcManager_ = {}, GlobalNamespace::PlayersAtGameStartModel* playersAtGameStartModel_ = {}, float waitStartTime_ = {}, bool songStarted_ = {}, float startTime_ = {}, GlobalNamespace::SongStartHandler* songStartHandler_ = {}, System::Action* syncStartFailedEvent_ = {}, System::Action_1<float>* syncStartSuccessEvent_ = {}, System::Action_1<float>* syncResumeEvent_ = {}) noexcept : multiplayerSessionManager{multiplayerSessionManager_}, gameplayRpcManager{gameplayRpcManager_}, playersAtGameStartModel{playersAtGameStartModel_}, waitStartTime{waitStartTime_}, songStarted{songStarted_}, startTime{startTime_}, songStartHandler{songStartHandler_}, syncStartFailedEvent{syncStartFailedEvent_}, syncStartSuccessEvent{syncStartSuccessEvent_}, syncResumeEvent{syncResumeEvent_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Single kAudioLoadTimeoutForceStart
    static constexpr const float kAudioLoadTimeoutForceStart = 10;
    // Get static field: static private System.Single kAudioLoadTimeoutForceStart
    static float _get_kAudioLoadTimeoutForceStart();
    // Set static field: static private System.Single kAudioLoadTimeoutForceStart
    static void _set_kAudioLoadTimeoutForceStart(float value);
    // static field const value: static private System.Single kAudioLoadTimeout
    static constexpr const float kAudioLoadTimeout = 15;
    // Get static field: static private System.Single kAudioLoadTimeout
    static float _get_kAudioLoadTimeout();
    // Set static field: static private System.Single kAudioLoadTimeout
    static void _set_kAudioLoadTimeout(float value);
    // public System.Boolean get_isSongStarted()
    // Offset: 0xF7261C
    bool get_isSongStarted();
    // public System.Single get_songStartSyncTime()
    // Offset: 0xF72624
    float get_songStartSyncTime();
    // public System.Void add_syncStartFailedEvent(System.Action value)
    // Offset: 0xF72640
    void add_syncStartFailedEvent(System::Action* value);
    // public System.Void remove_syncStartFailedEvent(System.Action value)
    // Offset: 0xF726E4
    void remove_syncStartFailedEvent(System::Action* value);
    // public System.Void add_syncStartSuccessEvent(System.Action`1<System.Single> value)
    // Offset: 0xF72788
    void add_syncStartSuccessEvent(System::Action_1<float>* value);
    // public System.Void remove_syncStartSuccessEvent(System.Action`1<System.Single> value)
    // Offset: 0xF7282C
    void remove_syncStartSuccessEvent(System::Action_1<float>* value);
    // public System.Void add_syncResumeEvent(System.Action`1<System.Single> value)
    // Offset: 0xF728D0
    void add_syncResumeEvent(System::Action_1<float>* value);
    // public System.Void remove_syncResumeEvent(System.Action`1<System.Single> value)
    // Offset: 0xF72974
    void remove_syncResumeEvent(System::Action_1<float>* value);
    // protected System.Void Start()
    // Offset: 0xF72A18
    void Start();
    // protected System.Void OnDestroy()
    // Offset: 0xF72A24
    void OnDestroy();
    // protected System.Void Update()
    // Offset: 0xF72A38
    void Update();
    // protected System.Void OnApplicationPause(System.Boolean pauseStatus)
    // Offset: 0xF72B6C
    void OnApplicationPause(bool pauseStatus);
    // public System.Void StartSong()
    // Offset: 0xF72BF8
    void StartSong();
    // private System.Void HandleSetSongStartSyncTime(System.Single songStartSyncTime)
    // Offset: 0xF72D50
    void HandleSetSongStartSyncTime(float songStartSyncTime);
    // public System.Void .ctor()
    // Offset: 0xF72DD4
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SongStartSyncController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("GlobalNamespace::SongStartSyncController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SongStartSyncController*, creationType>()));
    }
  }; // SongStartSyncController
  #pragma pack(pop)
  static check_size<sizeof(SongStartSyncController), 88 + sizeof(System::Action_1<float>*)> __GlobalNamespace_SongStartSyncControllerSizeCheck;
  static_assert(sizeof(SongStartSyncController) == 0x60);
}
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::SongStartSyncController*, "", "SongStartSyncController");
