// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: OVRPlugin
#include "GlobalNamespace/OVRPlugin.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
// Completed includes
// Type namespace: 
namespace GlobalNamespace {
  // Size: 0xC
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: OVRPlugin/HapticsBuffer
  // [] Offset: FFFFFFFF
  struct OVRPlugin::HapticsBuffer/*, public System::ValueType*/ {
    public:
    // public System.IntPtr Samples
    // Size: 0x8
    // Offset: 0x0
    System::IntPtr Samples;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // public System.Int32 SamplesCount
    // Size: 0x4
    // Offset: 0x8
    int SamplesCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: HapticsBuffer
    constexpr HapticsBuffer(System::IntPtr Samples_ = {}, int SamplesCount_ = {}) noexcept : Samples{Samples_}, SamplesCount{SamplesCount_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
  }; // OVRPlugin/HapticsBuffer
  #pragma pack(pop)
  static check_size<sizeof(OVRPlugin::HapticsBuffer), 8 + sizeof(int)> __GlobalNamespace_OVRPlugin_HapticsBufferSizeCheck;
  static_assert(sizeof(OVRPlugin::HapticsBuffer) == 0xC);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(GlobalNamespace::OVRPlugin::HapticsBuffer, "", "OVRPlugin/HapticsBuffer");
