// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.UI.Button
#include "UnityEngine/UI/Button.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HMUI
namespace HMUI {
  // Skipping declaration: SelectionState because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: HMUI
namespace HMUI {
  // Size: 0x104
  #pragma pack(push, 1)
  // Autogenerated type: HMUI.NoTransitionsButton
  // [] Offset: FFFFFFFF
  class NoTransitionsButton : public UnityEngine::UI::Button {
    public:
    // Nested type: HMUI::NoTransitionsButton::SelectionState
    struct SelectionState;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: HMUI.NoTransitionsButton/SelectionState
    // [] Offset: FFFFFFFF
    struct SelectionState/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: SelectionState
      constexpr SelectionState(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public HMUI.NoTransitionsButton/SelectionState Normal
      static constexpr const int Normal = 0;
      // Get static field: static public HMUI.NoTransitionsButton/SelectionState Normal
      static HMUI::NoTransitionsButton::SelectionState _get_Normal();
      // Set static field: static public HMUI.NoTransitionsButton/SelectionState Normal
      static void _set_Normal(HMUI::NoTransitionsButton::SelectionState value);
      // static field const value: static public HMUI.NoTransitionsButton/SelectionState Highlighted
      static constexpr const int Highlighted = 1;
      // Get static field: static public HMUI.NoTransitionsButton/SelectionState Highlighted
      static HMUI::NoTransitionsButton::SelectionState _get_Highlighted();
      // Set static field: static public HMUI.NoTransitionsButton/SelectionState Highlighted
      static void _set_Highlighted(HMUI::NoTransitionsButton::SelectionState value);
      // static field const value: static public HMUI.NoTransitionsButton/SelectionState Pressed
      static constexpr const int Pressed = 2;
      // Get static field: static public HMUI.NoTransitionsButton/SelectionState Pressed
      static HMUI::NoTransitionsButton::SelectionState _get_Pressed();
      // Set static field: static public HMUI.NoTransitionsButton/SelectionState Pressed
      static void _set_Pressed(HMUI::NoTransitionsButton::SelectionState value);
      // static field const value: static public HMUI.NoTransitionsButton/SelectionState Disabled
      static constexpr const int Disabled = 3;
      // Get static field: static public HMUI.NoTransitionsButton/SelectionState Disabled
      static HMUI::NoTransitionsButton::SelectionState _get_Disabled();
      // Set static field: static public HMUI.NoTransitionsButton/SelectionState Disabled
      static void _set_Disabled(HMUI::NoTransitionsButton::SelectionState value);
    }; // HMUI.NoTransitionsButton/SelectionState
    #pragma pack(pop)
    static check_size<sizeof(NoTransitionsButton::SelectionState), 0 + sizeof(int)> __HMUI_NoTransitionsButton_SelectionStateSizeCheck;
    static_assert(sizeof(NoTransitionsButton::SelectionState) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xD190C0
    // private System.Action`1<HMUI.NoTransitionsButton/SelectionState> selectionStateDidChangeEvent
    // Size: 0x8
    // Offset: 0xF8
    System::Action_1<HMUI::NoTransitionsButton::SelectionState>* selectionStateDidChangeEvent;
    // Field size check
    static_assert(sizeof(System::Action_1<HMUI::NoTransitionsButton::SelectionState>*) == 0x8);
    // private HMUI.NoTransitionsButton/SelectionState _selectionState
    // Size: 0x4
    // Offset: 0x100
    HMUI::NoTransitionsButton::SelectionState selectionState;
    // Field size check
    static_assert(sizeof(HMUI::NoTransitionsButton::SelectionState) == 0x4);
    // Creating value type constructor for type: NoTransitionsButton
    NoTransitionsButton(System::Action_1<HMUI::NoTransitionsButton::SelectionState>* selectionStateDidChangeEvent_ = {}, HMUI::NoTransitionsButton::SelectionState selectionState_ = {}) noexcept : selectionStateDidChangeEvent{selectionStateDidChangeEvent_}, selectionState{selectionState_} {}
    // public HMUI.NoTransitionsButton/SelectionState get_selectionState()
    // Offset: 0x11B8A40
    HMUI::NoTransitionsButton::SelectionState get_selectionState();
    // public System.Void add_selectionStateDidChangeEvent(System.Action`1<HMUI.NoTransitionsButton/SelectionState> value)
    // Offset: 0x11B8A48
    void add_selectionStateDidChangeEvent(System::Action_1<HMUI::NoTransitionsButton::SelectionState>* value);
    // public System.Void remove_selectionStateDidChangeEvent(System.Action`1<HMUI.NoTransitionsButton/SelectionState> value)
    // Offset: 0x11B8AEC
    void remove_selectionStateDidChangeEvent(System::Action_1<HMUI::NoTransitionsButton::SelectionState>* value);
    // protected override System.Void DoStateTransition(UnityEngine.UI.Selectable/SelectionState state, System.Boolean instant)
    // Offset: 0x11B8B90
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::DoStateTransition(UnityEngine.UI.Selectable/SelectionState state, System.Boolean instant)
    void DoStateTransition(UnityEngine::UI::Selectable::SelectionState state, bool instant);
    // public System.Void .ctor()
    // Offset: 0x11B8C24
    // Implemented from: UnityEngine.UI.Button
    // Base method: System.Void Button::.ctor()
    // Base method: System.Void Selectable::.ctor()
    // Base method: System.Void UIBehaviour::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static NoTransitionsButton* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("HMUI::NoTransitionsButton::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<NoTransitionsButton*, creationType>()));
    }
  }; // HMUI.NoTransitionsButton
  #pragma pack(pop)
  static check_size<sizeof(NoTransitionsButton), 256 + sizeof(HMUI::NoTransitionsButton::SelectionState)> __HMUI_NoTransitionsButtonSizeCheck;
  static_assert(sizeof(NoTransitionsButton) == 0x104);
}
DEFINE_IL2CPP_ARG_TYPE(HMUI::NoTransitionsButton*, "HMUI", "NoTransitionsButton");
DEFINE_IL2CPP_ARG_TYPE(HMUI::NoTransitionsButton::SelectionState, "HMUI", "NoTransitionsButton/SelectionState");
