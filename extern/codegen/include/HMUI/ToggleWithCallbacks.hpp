// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.UI.Toggle
#include "UnityEngine/UI/Toggle.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HMUI
namespace HMUI {
  // Skipping declaration: SelectionState because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`1<T>
  template<typename T>
  class Action_1;
}
// Completed forward declares
// Type namespace: HMUI
namespace HMUI {
  // Autogenerated type: HMUI.ToggleWithCallbacks
  class ToggleWithCallbacks : public UnityEngine::UI::Toggle {
    public:
    // Nested type: HMUI::ToggleWithCallbacks::SelectionState
    struct SelectionState;
    // Autogenerated type: HMUI.ToggleWithCallbacks/SelectionState
    struct SelectionState : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: SelectionState
      constexpr SelectionState(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public HMUI.ToggleWithCallbacks/SelectionState Normal
      static constexpr const int Normal = 0;
      // Get static field: static public HMUI.ToggleWithCallbacks/SelectionState Normal
      static HMUI::ToggleWithCallbacks::SelectionState _get_Normal();
      // Set static field: static public HMUI.ToggleWithCallbacks/SelectionState Normal
      static void _set_Normal(HMUI::ToggleWithCallbacks::SelectionState value);
      // static field const value: static public HMUI.ToggleWithCallbacks/SelectionState Highlighted
      static constexpr const int Highlighted = 1;
      // Get static field: static public HMUI.ToggleWithCallbacks/SelectionState Highlighted
      static HMUI::ToggleWithCallbacks::SelectionState _get_Highlighted();
      // Set static field: static public HMUI.ToggleWithCallbacks/SelectionState Highlighted
      static void _set_Highlighted(HMUI::ToggleWithCallbacks::SelectionState value);
      // static field const value: static public HMUI.ToggleWithCallbacks/SelectionState Pressed
      static constexpr const int Pressed = 2;
      // Get static field: static public HMUI.ToggleWithCallbacks/SelectionState Pressed
      static HMUI::ToggleWithCallbacks::SelectionState _get_Pressed();
      // Set static field: static public HMUI.ToggleWithCallbacks/SelectionState Pressed
      static void _set_Pressed(HMUI::ToggleWithCallbacks::SelectionState value);
      // static field const value: static public HMUI.ToggleWithCallbacks/SelectionState Selected
      static constexpr const int Selected = 3;
      // Get static field: static public HMUI.ToggleWithCallbacks/SelectionState Selected
      static HMUI::ToggleWithCallbacks::SelectionState _get_Selected();
      // Set static field: static public HMUI.ToggleWithCallbacks/SelectionState Selected
      static void _set_Selected(HMUI::ToggleWithCallbacks::SelectionState value);
      // static field const value: static public HMUI.ToggleWithCallbacks/SelectionState Disabled
      static constexpr const int Disabled = 4;
      // Get static field: static public HMUI.ToggleWithCallbacks/SelectionState Disabled
      static HMUI::ToggleWithCallbacks::SelectionState _get_Disabled();
      // Set static field: static public HMUI.ToggleWithCallbacks/SelectionState Disabled
      static void _set_Disabled(HMUI::ToggleWithCallbacks::SelectionState value);
    }; // HMUI.ToggleWithCallbacks/SelectionState
    // private System.Action`1<HMUI.ToggleWithCallbacks/SelectionState> stateDidChangeEvent
    // Offset: 0x118
    System::Action_1<HMUI::ToggleWithCallbacks::SelectionState>* stateDidChangeEvent;
    // public System.Void add_stateDidChangeEvent(System.Action`1<HMUI.ToggleWithCallbacks/SelectionState> value)
    // Offset: 0x1086C60
    void add_stateDidChangeEvent(System::Action_1<HMUI::ToggleWithCallbacks::SelectionState>* value);
    // public System.Void remove_stateDidChangeEvent(System.Action`1<HMUI.ToggleWithCallbacks/SelectionState> value)
    // Offset: 0x1086F18
    void remove_stateDidChangeEvent(System::Action_1<HMUI::ToggleWithCallbacks::SelectionState>* value);
    // public HMUI.ToggleWithCallbacks/SelectionState get_selectionState()
    // Offset: 0x1086FC8
    HMUI::ToggleWithCallbacks::SelectionState get_selectionState();
    // protected override System.Void DoStateTransition(UnityEngine.UI.Selectable/SelectionState state, System.Boolean instant)
    // Offset: 0x108D020
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::DoStateTransition(UnityEngine.UI.Selectable/SelectionState state, System.Boolean instant)
    void DoStateTransition(UnityEngine::UI::Selectable::SelectionState state, bool instant);
    // public System.Void .ctor()
    // Offset: 0x108D0AC
    // Implemented from: UnityEngine.UI.Toggle
    // Base method: System.Void Toggle::.ctor()
    // Base method: System.Void Selectable::.ctor()
    // Base method: System.Void UIBehaviour::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static ToggleWithCallbacks* New_ctor();
  }; // HMUI.ToggleWithCallbacks
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(HMUI::ToggleWithCallbacks*, "HMUI", "ToggleWithCallbacks");
DEFINE_IL2CPP_ARG_TYPE(HMUI::ToggleWithCallbacks::SelectionState, "HMUI", "ToggleWithCallbacks/SelectionState");
#pragma pack(pop)
