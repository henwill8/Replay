// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: TableView
  class TableView;
  // Forward declaring type: VerticalScrollIndicator
  class VerticalScrollIndicator;
  // Forward declaring type: ButtonBinder
  class ButtonBinder;
  // Forward declaring type: EventSystemListener
  class EventSystemListener;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: PointerEventData
  class PointerEventData;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Button
  class Button;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IVRPlatformHelper
  class IVRPlatformHelper;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Vector2
  struct Vector2;
}
// Completed forward declares
// Type namespace: HMUI
namespace HMUI {
  // Size: 0x7C
  #pragma pack(push, 1)
  // Autogenerated type: HMUI.TableViewScroller
  // [] Offset: FFFFFFFF
  class TableViewScroller : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: HMUI::TableViewScroller::ScrollPositionType
    struct ScrollPositionType;
    // Nested type: HMUI::TableViewScroller::ScrollDirection
    struct ScrollDirection;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: HMUI.TableViewScroller/ScrollDirection
    // [] Offset: FFFFFFFF
    struct ScrollDirection/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: ScrollDirection
      constexpr ScrollDirection(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public HMUI.TableViewScroller/ScrollDirection None
      static constexpr const int None = 0;
      // Get static field: static public HMUI.TableViewScroller/ScrollDirection None
      static HMUI::TableViewScroller::ScrollDirection _get_None();
      // Set static field: static public HMUI.TableViewScroller/ScrollDirection None
      static void _set_None(HMUI::TableViewScroller::ScrollDirection value);
      // static field const value: static public HMUI.TableViewScroller/ScrollDirection Up
      static constexpr const int Up = 1;
      // Get static field: static public HMUI.TableViewScroller/ScrollDirection Up
      static HMUI::TableViewScroller::ScrollDirection _get_Up();
      // Set static field: static public HMUI.TableViewScroller/ScrollDirection Up
      static void _set_Up(HMUI::TableViewScroller::ScrollDirection value);
      // static field const value: static public HMUI.TableViewScroller/ScrollDirection Left
      static constexpr const int Left = 2;
      // Get static field: static public HMUI.TableViewScroller/ScrollDirection Left
      static HMUI::TableViewScroller::ScrollDirection _get_Left();
      // Set static field: static public HMUI.TableViewScroller/ScrollDirection Left
      static void _set_Left(HMUI::TableViewScroller::ScrollDirection value);
      // static field const value: static public HMUI.TableViewScroller/ScrollDirection Down
      static constexpr const int Down = 3;
      // Get static field: static public HMUI.TableViewScroller/ScrollDirection Down
      static HMUI::TableViewScroller::ScrollDirection _get_Down();
      // Set static field: static public HMUI.TableViewScroller/ScrollDirection Down
      static void _set_Down(HMUI::TableViewScroller::ScrollDirection value);
      // static field const value: static public HMUI.TableViewScroller/ScrollDirection Right
      static constexpr const int Right = 4;
      // Get static field: static public HMUI.TableViewScroller/ScrollDirection Right
      static HMUI::TableViewScroller::ScrollDirection _get_Right();
      // Set static field: static public HMUI.TableViewScroller/ScrollDirection Right
      static void _set_Right(HMUI::TableViewScroller::ScrollDirection value);
    }; // HMUI.TableViewScroller/ScrollDirection
    #pragma pack(pop)
    static check_size<sizeof(TableViewScroller::ScrollDirection), 0 + sizeof(int)> __HMUI_TableViewScroller_ScrollDirectionSizeCheck;
    static_assert(sizeof(TableViewScroller::ScrollDirection) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xD19FD8
    // private System.Action`2<HMUI.TableViewScroller,System.Single> positionDidChangeEvent
    // Size: 0x8
    // Offset: 0x18
    System::Action_2<HMUI::TableViewScroller*, float>* positionDidChangeEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<HMUI::TableViewScroller*, float>*) == 0x8);
    // private HMUI.TableView _tableView
    // Size: 0x8
    // Offset: 0x20
    HMUI::TableView* tableView;
    // Field size check
    static_assert(sizeof(HMUI::TableView*) == 0x8);
    // private System.Single _scrollableSize
    // Size: 0x4
    // Offset: 0x28
    float scrollableSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _contentSize
    // Size: 0x4
    // Offset: 0x2C
    float contentSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _viewportSize
    // Size: 0x4
    // Offset: 0x30
    float viewportSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _targetPosition
    // Size: 0x4
    // Offset: 0x34
    float targetPosition;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Boolean _hideScrollIndicatorIfNotNeeded
    // Size: 0x1
    // Offset: 0x38
    bool hideScrollIndicatorIfNotNeeded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hideScrollIndicatorIfNotNeeded and: verticalScrollIndicator
    char __padding6[0x7] = {};
    // private HMUI.VerticalScrollIndicator _verticalScrollIndicator
    // Size: 0x8
    // Offset: 0x40
    HMUI::VerticalScrollIndicator* verticalScrollIndicator;
    // Field size check
    static_assert(sizeof(HMUI::VerticalScrollIndicator*) == 0x8);
    // private System.Boolean _hideScrollButtonsIfNotNeeded
    // Size: 0x1
    // Offset: 0x48
    bool hideScrollButtonsIfNotNeeded;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: hideScrollButtonsIfNotNeeded and: pageUpButton
    char __padding8[0x7] = {};
    // private UnityEngine.UI.Button _pageUpButton
    // Size: 0x8
    // Offset: 0x50
    UnityEngine::UI::Button* pageUpButton;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Button*) == 0x8);
    // private UnityEngine.UI.Button _pageDownButton
    // Size: 0x8
    // Offset: 0x58
    UnityEngine::UI::Button* pageDownButton;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Button*) == 0x8);
    // private HMUI.ButtonBinder _buttonBinder
    // Size: 0x8
    // Offset: 0x60
    HMUI::ButtonBinder* buttonBinder;
    // Field size check
    static_assert(sizeof(HMUI::ButtonBinder*) == 0x8);
    // private HMUI.EventSystemListener _eventSystemListener
    // Size: 0x8
    // Offset: 0x68
    HMUI::EventSystemListener* eventSystemListener;
    // Field size check
    static_assert(sizeof(HMUI::EventSystemListener*) == 0x8);
    // private IVRPlatformHelper _platformHelper
    // Size: 0x8
    // Offset: 0x70
    GlobalNamespace::IVRPlatformHelper* platformHelper;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IVRPlatformHelper*) == 0x8);
    // private HMUI.TableViewScroller/ScrollDirection _lastJoystickScrollDirection
    // Size: 0x4
    // Offset: 0x78
    HMUI::TableViewScroller::ScrollDirection lastJoystickScrollDirection;
    // Field size check
    static_assert(sizeof(HMUI::TableViewScroller::ScrollDirection) == 0x4);
    // Creating value type constructor for type: TableViewScroller
    TableViewScroller(System::Action_2<HMUI::TableViewScroller*, float>* positionDidChangeEvent_ = {}, HMUI::TableView* tableView_ = {}, float scrollableSize_ = {}, float contentSize_ = {}, float viewportSize_ = {}, float targetPosition_ = {}, bool hideScrollIndicatorIfNotNeeded_ = {}, HMUI::VerticalScrollIndicator* verticalScrollIndicator_ = {}, bool hideScrollButtonsIfNotNeeded_ = {}, UnityEngine::UI::Button* pageUpButton_ = {}, UnityEngine::UI::Button* pageDownButton_ = {}, HMUI::ButtonBinder* buttonBinder_ = {}, HMUI::EventSystemListener* eventSystemListener_ = {}, GlobalNamespace::IVRPlatformHelper* platformHelper_ = {}, HMUI::TableViewScroller::ScrollDirection lastJoystickScrollDirection_ = {}) noexcept : positionDidChangeEvent{positionDidChangeEvent_}, tableView{tableView_}, scrollableSize{scrollableSize_}, contentSize{contentSize_}, viewportSize{viewportSize_}, targetPosition{targetPosition_}, hideScrollIndicatorIfNotNeeded{hideScrollIndicatorIfNotNeeded_}, verticalScrollIndicator{verticalScrollIndicator_}, hideScrollButtonsIfNotNeeded{hideScrollButtonsIfNotNeeded_}, pageUpButton{pageUpButton_}, pageDownButton{pageDownButton_}, buttonBinder{buttonBinder_}, eventSystemListener{eventSystemListener_}, platformHelper{platformHelper_}, lastJoystickScrollDirection{lastJoystickScrollDirection_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static private System.Single kJoystickScrollSpeed
    static constexpr const float kJoystickScrollSpeed = 60;
    // Get static field: static private System.Single kJoystickScrollSpeed
    static float _get_kJoystickScrollSpeed();
    // Set static field: static private System.Single kJoystickScrollSpeed
    static void _set_kJoystickScrollSpeed(float value);
    // public System.Void add_positionDidChangeEvent(System.Action`2<HMUI.TableViewScroller,System.Single> value)
    // Offset: 0x11C549C
    void add_positionDidChangeEvent(System::Action_2<HMUI::TableViewScroller*, float>* value);
    // public System.Void remove_positionDidChangeEvent(System.Action`2<HMUI.TableViewScroller,System.Single> value)
    // Offset: 0x11C5540
    void remove_positionDidChangeEvent(System::Action_2<HMUI::TableViewScroller*, float>* value);
    // public System.Single get_position()
    // Offset: 0x11C4904
    float get_position();
    // private System.Void set_position(System.Single value)
    // Offset: 0x11C55E4
    void set_position(float value);
    // public System.Single get_targetPosition()
    // Offset: 0x11C56B4
    float get_targetPosition();
    // public System.Single get_scrollableSize()
    // Offset: 0x11C56BC
    float get_scrollableSize();
    // public System.Void Init(HMUI.TableView tableView, UnityEngine.UI.Button pageUpButton, UnityEngine.UI.Button pageDownButton, HMUI.VerticalScrollIndicator verticalScrollIndicator, HMUI.EventSystemListener eventSystemListener, IVRPlatformHelper platformHelper, System.Boolean hideScrollButtonsIfNotNeeded, System.Boolean hideScrollIndicatorIfNotNeeded)
    // Offset: 0x11C420C
    void Init(HMUI::TableView* tableView, UnityEngine::UI::Button* pageUpButton, UnityEngine::UI::Button* pageDownButton, HMUI::VerticalScrollIndicator* verticalScrollIndicator, HMUI::EventSystemListener* eventSystemListener, GlobalNamespace::IVRPlatformHelper* platformHelper, bool hideScrollButtonsIfNotNeeded, bool hideScrollIndicatorIfNotNeeded);
    // protected System.Void OnDestroy()
    // Offset: 0x11C5824
    void OnDestroy();
    // public System.Void ScrollToCellWithIdx(System.Int32 idx, HMUI.TableViewScroller/ScrollPositionType scrollPositionType, System.Boolean animated)
    // Offset: 0x11C5208
    void ScrollToCellWithIdx(int idx, HMUI::TableViewScroller::ScrollPositionType scrollPositionType, bool animated);
    // protected System.Void Update()
    // Offset: 0x11C5CD8
    void Update();
    // private System.Void UpdateVerticalScrollIndicator(System.Single posY)
    // Offset: 0x11C5DF8
    void UpdateVerticalScrollIndicator(float posY);
    // private System.Single GetNumberOfVisibleCells()
    // Offset: 0x11C5EA4
    float GetNumberOfVisibleCells();
    // private System.Void RefreshScrollableSize()
    // Offset: 0x11C56C4
    void RefreshScrollableSize();
    // private System.Void HandleTableViewDidReloadData(HMUI.TableView tableView)
    // Offset: 0x11C5F88
    void HandleTableViewDidReloadData(HMUI::TableView* tableView);
    // private System.Void HandleTableViewDidInsertCells(HMUI.TableView tableView)
    // Offset: 0x11C5FAC
    void HandleTableViewDidInsertCells(HMUI::TableView* tableView);
    // private System.Void HandleTableViewDidDeleteCells(HMUI.TableView tableView)
    // Offset: 0x11C5FD0
    void HandleTableViewDidDeleteCells(HMUI::TableView* tableView);
    // private System.Void HandleTableViewDidChangeRectSize(HMUI.TableView tableView)
    // Offset: 0x11C5FF4
    void HandleTableViewDidChangeRectSize(HMUI::TableView* tableView);
    // public System.Void PageScrollUp()
    // Offset: 0x11C6018
    void PageScrollUp();
    // public System.Void PageScrollDown()
    // Offset: 0x11C612C
    void PageScrollDown();
    // private System.Void RefreshScrollBar()
    // Offset: 0x11C5A64
    void RefreshScrollBar();
    // private System.Void HandlePointerDidEnter(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x11C6250
    void HandlePointerDidEnter(UnityEngine::EventSystems::PointerEventData* eventData);
    // private System.Void HandlePointerDidExit(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x11C63F0
    void HandlePointerDidExit(UnityEngine::EventSystems::PointerEventData* eventData);
    // private System.Void HandleJoystickWasNotCenteredThisFrame(UnityEngine.Vector2 deltaPos)
    // Offset: 0x11C6778
    void HandleJoystickWasNotCenteredThisFrame(UnityEngine::Vector2 deltaPos);
    // private System.Void HandleJoystickWasCenteredThisFrame()
    // Offset: 0x11C65A0
    void HandleJoystickWasCenteredThisFrame();
    // private System.Void <Init>b__27_0()
    // Offset: 0x11C6990
    void $Init$b__27_0();
    // private System.Void <Init>b__27_1()
    // Offset: 0x11C69B4
    void $Init$b__27_1();
    // public System.Void .ctor()
    // Offset: 0x11C6988
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TableViewScroller* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TableViewScroller::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TableViewScroller*, creationType>()));
    }
  }; // HMUI.TableViewScroller
  #pragma pack(pop)
  static check_size<sizeof(TableViewScroller), 120 + sizeof(HMUI::TableViewScroller::ScrollDirection)> __HMUI_TableViewScrollerSizeCheck;
  static_assert(sizeof(TableViewScroller) == 0x7C);
}
DEFINE_IL2CPP_ARG_TYPE(HMUI::TableViewScroller*, "HMUI", "TableViewScroller");
DEFINE_IL2CPP_ARG_TYPE(HMUI::TableViewScroller::ScrollDirection, "HMUI", "TableViewScroller/ScrollDirection");
