// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.ContainerViewController
#include "HMUI/ContainerViewController.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Skipping declaration: ViewController because it is already included!
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Completed forward declares
// Type namespace: HMUI
namespace HMUI {
  // Autogenerated type: HMUI.NavigationController
  class NavigationController : public HMUI::ContainerViewController {
    public:
    // Nested type: HMUI::NavigationController::Orientation
    struct Orientation;
    // Nested type: HMUI::NavigationController::Alignment
    struct Alignment;
    // Nested type: HMUI::NavigationController::$$c__DisplayClass8_0
    class $$c__DisplayClass8_0;
    // Nested type: HMUI::NavigationController::$$c__DisplayClass10_0
    class $$c__DisplayClass10_0;
    // Autogenerated type: HMUI.NavigationController/Orientation
    struct Orientation : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: Orientation
      constexpr Orientation(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public HMUI.NavigationController/Orientation Horizontal
      static constexpr const int Horizontal = 0;
      // Get static field: static public HMUI.NavigationController/Orientation Horizontal
      static HMUI::NavigationController::Orientation _get_Horizontal();
      // Set static field: static public HMUI.NavigationController/Orientation Horizontal
      static void _set_Horizontal(HMUI::NavigationController::Orientation value);
      // static field const value: static public HMUI.NavigationController/Orientation Vertical
      static constexpr const int Vertical = 1;
      // Get static field: static public HMUI.NavigationController/Orientation Vertical
      static HMUI::NavigationController::Orientation _get_Vertical();
      // Set static field: static public HMUI.NavigationController/Orientation Vertical
      static void _set_Vertical(HMUI::NavigationController::Orientation value);
    }; // HMUI.NavigationController/Orientation
    // Autogenerated type: HMUI.NavigationController/Alignment
    struct Alignment : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: Alignment
      constexpr Alignment(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public HMUI.NavigationController/Alignment Beginning
      static constexpr const int Beginning = 0;
      // Get static field: static public HMUI.NavigationController/Alignment Beginning
      static HMUI::NavigationController::Alignment _get_Beginning();
      // Set static field: static public HMUI.NavigationController/Alignment Beginning
      static void _set_Beginning(HMUI::NavigationController::Alignment value);
      // static field const value: static public HMUI.NavigationController/Alignment Middle
      static constexpr const int Middle = 1;
      // Get static field: static public HMUI.NavigationController/Alignment Middle
      static HMUI::NavigationController::Alignment _get_Middle();
      // Set static field: static public HMUI.NavigationController/Alignment Middle
      static void _set_Middle(HMUI::NavigationController::Alignment value);
      // static field const value: static public HMUI.NavigationController/Alignment End
      static constexpr const int End = 2;
      // Get static field: static public HMUI.NavigationController/Alignment End
      static HMUI::NavigationController::Alignment _get_End();
      // Set static field: static public HMUI.NavigationController/Alignment End
      static void _set_End(HMUI::NavigationController::Alignment value);
    }; // HMUI.NavigationController/Alignment
    // private HMUI.NavigationController/Orientation _orientation
    // Offset: 0x78
    HMUI::NavigationController::Orientation orientation;
    // private System.Boolean _reversedStacking
    // Offset: 0x7C
    bool reversedStacking;
    // private HMUI.NavigationController/Alignment _alignment
    // Offset: 0x80
    HMUI::NavigationController::Alignment alignment;
    // private System.Single _edgeSize
    // Offset: 0x84
    float edgeSize;
    // private System.Single _viewControllersSeparator
    // Offset: 0x88
    float viewControllersSeparator;
    // public System.Void PushViewController(HMUI.ViewController viewController, System.Action finishedCallback, System.Boolean immediately)
    // Offset: 0x10DE600
    void PushViewController(HMUI::ViewController* viewController, System::Action* finishedCallback, bool immediately);
    // public System.Void PopViewController(System.Action finishedCallback, System.Boolean immediately)
    // Offset: 0x10DE718
    void PopViewController(System::Action* finishedCallback, bool immediately);
    // public System.Void PopViewControllers(System.Int32 numberOfViewControllersToPop, System.Action finishedCallback, System.Boolean immediately)
    // Offset: 0x10DE72C
    void PopViewControllers(int numberOfViewControllersToPop, System::Action* finishedCallback, bool immediately);
    // private UnityEngine.Vector3 PositionVector(System.Single pos)
    // Offset: 0x10DE5A4
    UnityEngine::Vector3 PositionVector(float pos);
    // private System.Void SetupViewControllerRect(HMUI.ViewController viewController)
    // Offset: 0x10DE54C
    void SetupViewControllerRect(HMUI::ViewController* viewController);
    // private System.Single[] GetNewPositionsForViewControllers(System.Collections.Generic.List`1<HMUI.ViewController> viewControllers, System.Collections.Generic.HashSet`1<HMUI.ViewController> fixedViewControllers, System.Single fixedEndPos)
    // Offset: 0x10DE0CC
    ::Array<float>* GetNewPositionsForViewControllers(System::Collections::Generic::List_1<HMUI::ViewController*>* viewControllers, System::Collections::Generic::HashSet_1<HMUI::ViewController*>* fixedViewControllers, float fixedEndPos);
    // protected override System.Void LayoutViewControllers(System.Collections.Generic.List`1<HMUI.ViewController> viewControllers)
    // Offset: 0x10DDF98
    // Implemented from: HMUI.ContainerViewController
    // Base method: System.Void ContainerViewController::LayoutViewControllers(System.Collections.Generic.List`1<HMUI.ViewController> viewControllers)
    void LayoutViewControllers(System::Collections::Generic::List_1<HMUI::ViewController*>* viewControllers);
    // public System.Void .ctor()
    // Offset: 0x10DE9E4
    // Implemented from: HMUI.ContainerViewController
    // Base method: System.Void ContainerViewController::.ctor()
    // Base method: System.Void ViewController::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static NavigationController* New_ctor();
  }; // HMUI.NavigationController
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(HMUI::NavigationController*, "HMUI", "NavigationController");
DEFINE_IL2CPP_ARG_TYPE(HMUI::NavigationController::Orientation, "HMUI", "NavigationController/Orientation");
DEFINE_IL2CPP_ARG_TYPE(HMUI::NavigationController::Alignment, "HMUI", "NavigationController/Alignment");
#pragma pack(pop)
