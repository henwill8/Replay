// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.RangeValuesTextSlider
#include "HMUI/RangeValuesTextSlider.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: HMUI
namespace HMUI {
  // WARNING Size may be invalid!
  // Autogenerated type: HMUI.TimeSlider
  // [] Offset: FFFFFFFF
  class TimeSlider : public HMUI::RangeValuesTextSlider {
    public:
    // Nested type: HMUI::TimeSlider::TimeType
    struct TimeType;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: HMUI.TimeSlider/TimeType
    // [] Offset: FFFFFFFF
    struct TimeType/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: TimeType
      constexpr TimeType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public HMUI.TimeSlider/TimeType Default
      static constexpr const int Default = 0;
      // Get static field: static public HMUI.TimeSlider/TimeType Default
      static HMUI::TimeSlider::TimeType _get_Default();
      // Set static field: static public HMUI.TimeSlider/TimeType Default
      static void _set_Default(HMUI::TimeSlider::TimeType value);
      // static field const value: static public HMUI.TimeSlider/TimeType Miliseconds
      static constexpr const int Miliseconds = 1;
      // Get static field: static public HMUI.TimeSlider/TimeType Miliseconds
      static HMUI::TimeSlider::TimeType _get_Miliseconds();
      // Set static field: static public HMUI.TimeSlider/TimeType Miliseconds
      static void _set_Miliseconds(HMUI::TimeSlider::TimeType value);
    }; // HMUI.TimeSlider/TimeType
    #pragma pack(pop)
    static check_size<sizeof(TimeSlider::TimeType), 0 + sizeof(int)> __HMUI_TimeSlider_TimeTypeSizeCheck;
    static_assert(sizeof(TimeSlider::TimeType) == 0x4);
    // private HMUI.TimeSlider/TimeType _timeType
    // Size: 0x4
    // Offset: 0x160
    HMUI::TimeSlider::TimeType timeType;
    // Field size check
    static_assert(sizeof(HMUI::TimeSlider::TimeType) == 0x4);
    // Creating value type constructor for type: TimeSlider
    TimeSlider(HMUI::TimeSlider::TimeType timeType_ = {}) noexcept : timeType{timeType_} {}
    // protected override System.String TextForValue(System.Single value)
    // Offset: 0x11C81EC
    // Implemented from: HMUI.RangeValuesTextSlider
    // Base method: System.String RangeValuesTextSlider::TextForValue(System.Single value)
    ::Il2CppString* TextForValue(float value);
    // public System.Void .ctor()
    // Offset: 0x11C83A4
    // Implemented from: HMUI.RangeValuesTextSlider
    // Base method: System.Void RangeValuesTextSlider::.ctor()
    // Base method: System.Void TextSlider::.ctor()
    // Base method: System.Void Selectable::.ctor()
    // Base method: System.Void UIBehaviour::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TimeSlider* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TimeSlider::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TimeSlider*, creationType>()));
    }
  }; // HMUI.TimeSlider
  // WARNING Not writing size check since size may be invalid!
}
DEFINE_IL2CPP_ARG_TYPE(HMUI::TimeSlider*, "HMUI", "TimeSlider");
DEFINE_IL2CPP_ARG_TYPE(HMUI::TimeSlider::TimeType, "HMUI", "TimeSlider/TimeType");
