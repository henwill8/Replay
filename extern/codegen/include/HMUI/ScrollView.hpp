// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IVRPlatformHelper
  class IVRPlatformHelper;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: Vector2
  struct Vector2;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: VerticalScrollIndicator
  class VerticalScrollIndicator;
  // Forward declaring type: ButtonBinder
  class ButtonBinder;
  // Forward declaring type: EventSystemListener
  class EventSystemListener;
  // Forward declaring type: ItemForFocussedScrolling
  class ItemForFocussedScrolling;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Button
  class Button;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: PointerEventData
  class PointerEventData;
}
// Completed forward declares
// Type namespace: HMUI
namespace HMUI {
  // Size: 0x90
  #pragma pack(push, 1)
  // Autogenerated type: HMUI.ScrollView
  // [] Offset: FFFFFFFF
  // [RequireComponent] Offset: D17BA8
  class ScrollView : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: HMUI::ScrollView::ScrollType
    struct ScrollType;
    // Nested type: HMUI::ScrollView::ScrollDirection
    struct ScrollDirection;
    // Nested type: HMUI::ScrollView::$$c
    class $$c;
    // Nested type: HMUI::ScrollView::$$c__DisplayClass36_0
    class $$c__DisplayClass36_0;
    // Nested type: HMUI::ScrollView::$$c__DisplayClass37_0
    class $$c__DisplayClass37_0;
    // Nested type: HMUI::ScrollView::$$c__DisplayClass42_0
    class $$c__DisplayClass42_0;
    // Nested type: HMUI::ScrollView::$$c__DisplayClass42_1
    class $$c__DisplayClass42_1;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: HMUI.ScrollView/ScrollType
    // [] Offset: FFFFFFFF
    struct ScrollType/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: ScrollType
      constexpr ScrollType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public HMUI.ScrollView/ScrollType PageSize
      static constexpr const int PageSize = 0;
      // Get static field: static public HMUI.ScrollView/ScrollType PageSize
      static HMUI::ScrollView::ScrollType _get_PageSize();
      // Set static field: static public HMUI.ScrollView/ScrollType PageSize
      static void _set_PageSize(HMUI::ScrollView::ScrollType value);
      // static field const value: static public HMUI.ScrollView/ScrollType FixedCellSize
      static constexpr const int FixedCellSize = 1;
      // Get static field: static public HMUI.ScrollView/ScrollType FixedCellSize
      static HMUI::ScrollView::ScrollType _get_FixedCellSize();
      // Set static field: static public HMUI.ScrollView/ScrollType FixedCellSize
      static void _set_FixedCellSize(HMUI::ScrollView::ScrollType value);
      // static field const value: static public HMUI.ScrollView/ScrollType FocusItems
      static constexpr const int FocusItems = 2;
      // Get static field: static public HMUI.ScrollView/ScrollType FocusItems
      static HMUI::ScrollView::ScrollType _get_FocusItems();
      // Set static field: static public HMUI.ScrollView/ScrollType FocusItems
      static void _set_FocusItems(HMUI::ScrollView::ScrollType value);
    }; // HMUI.ScrollView/ScrollType
    #pragma pack(pop)
    static check_size<sizeof(ScrollView::ScrollType), 0 + sizeof(int)> __HMUI_ScrollView_ScrollTypeSizeCheck;
    static_assert(sizeof(ScrollView::ScrollType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: HMUI.ScrollView/ScrollDirection
    // [] Offset: FFFFFFFF
    struct ScrollDirection/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: ScrollDirection
      constexpr ScrollDirection(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public HMUI.ScrollView/ScrollDirection None
      static constexpr const int None = 0;
      // Get static field: static public HMUI.ScrollView/ScrollDirection None
      static HMUI::ScrollView::ScrollDirection _get_None();
      // Set static field: static public HMUI.ScrollView/ScrollDirection None
      static void _set_None(HMUI::ScrollView::ScrollDirection value);
      // static field const value: static public HMUI.ScrollView/ScrollDirection Up
      static constexpr const int Up = 1;
      // Get static field: static public HMUI.ScrollView/ScrollDirection Up
      static HMUI::ScrollView::ScrollDirection _get_Up();
      // Set static field: static public HMUI.ScrollView/ScrollDirection Up
      static void _set_Up(HMUI::ScrollView::ScrollDirection value);
      // static field const value: static public HMUI.ScrollView/ScrollDirection Down
      static constexpr const int Down = 2;
      // Get static field: static public HMUI.ScrollView/ScrollDirection Down
      static HMUI::ScrollView::ScrollDirection _get_Down();
      // Set static field: static public HMUI.ScrollView/ScrollDirection Down
      static void _set_Down(HMUI::ScrollView::ScrollDirection value);
    }; // HMUI.ScrollView/ScrollDirection
    #pragma pack(pop)
    static check_size<sizeof(ScrollView::ScrollDirection), 0 + sizeof(int)> __HMUI_ScrollView_ScrollDirectionSizeCheck;
    static_assert(sizeof(ScrollView::ScrollDirection) == 0x4);
    // private UnityEngine.RectTransform _viewport
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::RectTransform* viewport;
    // Field size check
    static_assert(sizeof(UnityEngine::RectTransform*) == 0x8);
    // private UnityEngine.RectTransform _contentRectTransform
    // Size: 0x8
    // Offset: 0x20
    UnityEngine::RectTransform* contentRectTransform;
    // Field size check
    static_assert(sizeof(UnityEngine::RectTransform*) == 0x8);
    // [SpaceAttribute] Offset: 0xD19538
    // private UnityEngine.UI.Button _pageUpButton
    // Size: 0x8
    // Offset: 0x28
    UnityEngine::UI::Button* pageUpButton;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Button*) == 0x8);
    // private UnityEngine.UI.Button _pageDownButton
    // Size: 0x8
    // Offset: 0x30
    UnityEngine::UI::Button* pageDownButton;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Button*) == 0x8);
    // [NullAllowed] Offset: 0xD19580
    // private HMUI.VerticalScrollIndicator _verticalScrollIndicator
    // Size: 0x8
    // Offset: 0x38
    HMUI::VerticalScrollIndicator* verticalScrollIndicator;
    // Field size check
    static_assert(sizeof(HMUI::VerticalScrollIndicator*) == 0x8);
    // [SpaceAttribute] Offset: 0xD195B8
    // private System.Single _smooth
    // Size: 0x4
    // Offset: 0x40
    float smooth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _joystickScrollSpeed
    // Size: 0x4
    // Offset: 0x44
    float joystickScrollSpeed;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _joystickQuickSnapMaxTime
    // Size: 0x4
    // Offset: 0x48
    float joystickQuickSnapMaxTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private HMUI.ScrollView/ScrollType _scrollType
    // Size: 0x4
    // Offset: 0x4C
    HMUI::ScrollView::ScrollType scrollType;
    // Field size check
    static_assert(sizeof(HMUI::ScrollView::ScrollType) == 0x4);
    // [SpaceAttribute] Offset: 0xD19620
    // [DrawIfAttribute] Offset: 0xD19620
    // private System.Single _fixedCellSize
    // Size: 0x4
    // Offset: 0x50
    float fixedCellSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [DrawIfAttribute] Offset: 0xD196D8
    // private System.Single _scrollItemRelativeThresholdPosition
    // Size: 0x4
    // Offset: 0x54
    float scrollItemRelativeThresholdPosition;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [DrawIfAttribute] Offset: 0xD19780
    // private System.Single _pageStepNormalizedSize
    // Size: 0x4
    // Offset: 0x58
    float pageStepNormalizedSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: pageStepNormalizedSize and: platformHelper
    char __padding11[0x4] = {};
    // [InjectAttribute] Offset: 0xD19848
    // private readonly IVRPlatformHelper _platformHelper
    // Size: 0x8
    // Offset: 0x60
    GlobalNamespace::IVRPlatformHelper* platformHelper;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IVRPlatformHelper*) == 0x8);
    // private HMUI.ButtonBinder _buttonBinder
    // Size: 0x8
    // Offset: 0x68
    HMUI::ButtonBinder* buttonBinder;
    // Field size check
    static_assert(sizeof(HMUI::ButtonBinder*) == 0x8);
    // private System.Single _destinationPosY
    // Size: 0x4
    // Offset: 0x70
    float destinationPosY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: destinationPosY and: scrollFocusPosYs
    char __padding14[0x4] = {};
    // private System.Single[] _scrollFocusPosYs
    // Size: 0x8
    // Offset: 0x78
    ::Array<float>* scrollFocusPosYs;
    // Field size check
    static_assert(sizeof(::Array<float>*) == 0x8);
    // private HMUI.EventSystemListener _eventSystemListener
    // Size: 0x8
    // Offset: 0x80
    HMUI::EventSystemListener* eventSystemListener;
    // Field size check
    static_assert(sizeof(HMUI::EventSystemListener*) == 0x8);
    // private HMUI.ScrollView/ScrollDirection _lastJoystickScrollDirection
    // Size: 0x4
    // Offset: 0x88
    HMUI::ScrollView::ScrollDirection lastJoystickScrollDirection;
    // Field size check
    static_assert(sizeof(HMUI::ScrollView::ScrollDirection) == 0x4);
    // private System.Single _joystickScrollStartTime
    // Size: 0x4
    // Offset: 0x8C
    float joystickScrollStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Creating value type constructor for type: ScrollView
    ScrollView(UnityEngine::RectTransform* viewport_ = {}, UnityEngine::RectTransform* contentRectTransform_ = {}, UnityEngine::UI::Button* pageUpButton_ = {}, UnityEngine::UI::Button* pageDownButton_ = {}, HMUI::VerticalScrollIndicator* verticalScrollIndicator_ = {}, float smooth_ = {}, float joystickScrollSpeed_ = {}, float joystickQuickSnapMaxTime_ = {}, HMUI::ScrollView::ScrollType scrollType_ = {}, float fixedCellSize_ = {}, float scrollItemRelativeThresholdPosition_ = {}, float pageStepNormalizedSize_ = {}, GlobalNamespace::IVRPlatformHelper* platformHelper_ = {}, HMUI::ButtonBinder* buttonBinder_ = {}, float destinationPosY_ = {}, ::Array<float>* scrollFocusPosYs_ = {}, HMUI::EventSystemListener* eventSystemListener_ = {}, HMUI::ScrollView::ScrollDirection lastJoystickScrollDirection_ = {}, float joystickScrollStartTime_ = {}) noexcept : viewport{viewport_}, contentRectTransform{contentRectTransform_}, pageUpButton{pageUpButton_}, pageDownButton{pageDownButton_}, verticalScrollIndicator{verticalScrollIndicator_}, smooth{smooth_}, joystickScrollSpeed{joystickScrollSpeed_}, joystickQuickSnapMaxTime{joystickQuickSnapMaxTime_}, scrollType{scrollType_}, fixedCellSize{fixedCellSize_}, scrollItemRelativeThresholdPosition{scrollItemRelativeThresholdPosition_}, pageStepNormalizedSize{pageStepNormalizedSize_}, platformHelper{platformHelper_}, buttonBinder{buttonBinder_}, destinationPosY{destinationPosY_}, scrollFocusPosYs{scrollFocusPosYs_}, eventSystemListener{eventSystemListener_}, lastJoystickScrollDirection{lastJoystickScrollDirection_}, joystickScrollStartTime{joystickScrollStartTime_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // private System.Single get_scrollPageHeight()
    // Offset: 0x11BB16C
    float get_scrollPageHeight();
    // private System.Single get_contentHeight()
    // Offset: 0x11BB1B0
    float get_contentHeight();
    // protected System.Void Awake()
    // Offset: 0x11BB1F4
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0x11BB7E0
    void OnDestroy();
    // protected System.Void Update()
    // Offset: 0x11BB9C0
    void Update();
    // protected System.Void SetContentHeight(System.Single contentHeight)
    // Offset: 0x11BB558
    void SetContentHeight(float contentHeight);
    // public System.Void ScrollDown(System.Boolean animated)
    // Offset: 0x11BBBB4
    void ScrollDown(bool animated);
    // public System.Void ScrollToWorldPosition(UnityEngine.Vector3 worldPosition, System.Single pageRelativePosition, System.Boolean animated)
    // Offset: 0x11BBBF8
    void ScrollToWorldPosition(UnityEngine::Vector3 worldPosition, float pageRelativePosition, bool animated);
    // public System.Void ScrollToWorldPositionIfOutsideArea(UnityEngine.Vector3 worldPosition, System.Single pageRelativePosition, System.Single relativeBoundaryStart, System.Single relativeBoundaryEnd, System.Boolean animated)
    // Offset: 0x11BBD70
    void ScrollToWorldPositionIfOutsideArea(UnityEngine::Vector3 worldPosition, float pageRelativePosition, float relativeBoundaryStart, float relativeBoundaryEnd, bool animated);
    // public System.Void ScrollTo(System.Single destinationPosY, System.Boolean animated)
    // Offset: 0x11BB0E8
    void ScrollTo(float destinationPosY, bool animated);
    // private UnityEngine.Vector2 WorldPositionToScrollViewPosition(UnityEngine.Vector3 worldPosition)
    // Offset: 0x11BBC44
    UnityEngine::Vector2 WorldPositionToScrollViewPosition(UnityEngine::Vector3 worldPosition);
    // private System.Void SetDestinationPosY(System.Single value)
    // Offset: 0x11BBE24
    void SetDestinationPosY(float value);
    // private System.Void UpdateVerticalScrollIndicator(System.Single posY)
    // Offset: 0x11BBAF0
    void UpdateVerticalScrollIndicator(float posY);
    // private System.Void PageUpButtonPressed()
    // Offset: 0x11BBED4
    void PageUpButtonPressed();
    // private System.Void PageDownButtonPressed()
    // Offset: 0x11BC0AC
    void PageDownButtonPressed();
    // private System.Void RefreshButtons()
    // Offset: 0x11BB754
    void RefreshButtons();
    // private System.Void HandlePointerDidEnter(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x11BC2B4
    void HandlePointerDidEnter(UnityEngine::EventSystems::PointerEventData* eventData);
    // private System.Void HandlePointerDidExit(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x11BC454
    void HandlePointerDidExit(UnityEngine::EventSystems::PointerEventData* eventData);
    // private System.Void HandleJoystickWasNotCenteredThisFrame(UnityEngine.Vector2 deltaPos)
    // Offset: 0x11BC954
    void HandleJoystickWasNotCenteredThisFrame(UnityEngine::Vector2 deltaPos);
    // private System.Void HandleJoystickWasCenteredThisFrame()
    // Offset: 0x11BC604
    void HandleJoystickWasCenteredThisFrame();
    // private System.Single <Awake>b__25_0(HMUI.ItemForFocussedScrolling item)
    // Offset: 0x11BCA70
    float $Awake$b__25_0(HMUI::ItemForFocussedScrolling* item);
    // public System.Void .ctor()
    // Offset: 0x11BCA40
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScrollView* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScrollView::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScrollView*, creationType>()));
    }
  }; // HMUI.ScrollView
  #pragma pack(pop)
  static check_size<sizeof(ScrollView), 140 + sizeof(float)> __HMUI_ScrollViewSizeCheck;
  static_assert(sizeof(ScrollView) == 0x90);
}
DEFINE_IL2CPP_ARG_TYPE(HMUI::ScrollView*, "HMUI", "ScrollView");
DEFINE_IL2CPP_ARG_TYPE(HMUI::ScrollView::ScrollType, "HMUI", "ScrollView/ScrollType");
DEFINE_IL2CPP_ARG_TYPE(HMUI::ScrollView::ScrollDirection, "HMUI", "ScrollView/ScrollDirection");
