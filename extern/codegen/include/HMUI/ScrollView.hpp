// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Including type: System.Enum
#include "System/Enum.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IVRPlatformHelper
  class IVRPlatformHelper;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: Vector2
  struct Vector2;
}
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: VerticalScrollIndicator
  class VerticalScrollIndicator;
  // Forward declaring type: ButtonBinder
  class ButtonBinder;
  // Forward declaring type: EventSystemListener
  class EventSystemListener;
  // Forward declaring type: ItemForFocussedScrolling
  class ItemForFocussedScrolling;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Button
  class Button;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: PointerEventData
  class PointerEventData;
}
// Completed forward declares
// Type namespace: HMUI
namespace HMUI {
  // Autogenerated type: HMUI.ScrollView
  class ScrollView : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: HMUI::ScrollView::ScrollType
    struct ScrollType;
    // Nested type: HMUI::ScrollView::ScrollDirection
    struct ScrollDirection;
    // Nested type: HMUI::ScrollView::$$c
    class $$c;
    // Nested type: HMUI::ScrollView::$$c__DisplayClass36_0
    class $$c__DisplayClass36_0;
    // Nested type: HMUI::ScrollView::$$c__DisplayClass37_0
    class $$c__DisplayClass37_0;
    // Nested type: HMUI::ScrollView::$$c__DisplayClass42_0
    class $$c__DisplayClass42_0;
    // Nested type: HMUI::ScrollView::$$c__DisplayClass42_1
    class $$c__DisplayClass42_1;
    // Autogenerated type: HMUI.ScrollView/ScrollType
    struct ScrollType : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: ScrollType
      constexpr ScrollType(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public HMUI.ScrollView/ScrollType PageSize
      static constexpr const int PageSize = 0;
      // Get static field: static public HMUI.ScrollView/ScrollType PageSize
      static HMUI::ScrollView::ScrollType _get_PageSize();
      // Set static field: static public HMUI.ScrollView/ScrollType PageSize
      static void _set_PageSize(HMUI::ScrollView::ScrollType value);
      // static field const value: static public HMUI.ScrollView/ScrollType FixedCellSize
      static constexpr const int FixedCellSize = 1;
      // Get static field: static public HMUI.ScrollView/ScrollType FixedCellSize
      static HMUI::ScrollView::ScrollType _get_FixedCellSize();
      // Set static field: static public HMUI.ScrollView/ScrollType FixedCellSize
      static void _set_FixedCellSize(HMUI::ScrollView::ScrollType value);
      // static field const value: static public HMUI.ScrollView/ScrollType FocusItems
      static constexpr const int FocusItems = 2;
      // Get static field: static public HMUI.ScrollView/ScrollType FocusItems
      static HMUI::ScrollView::ScrollType _get_FocusItems();
      // Set static field: static public HMUI.ScrollView/ScrollType FocusItems
      static void _set_FocusItems(HMUI::ScrollView::ScrollType value);
    }; // HMUI.ScrollView/ScrollType
    // Autogenerated type: HMUI.ScrollView/ScrollDirection
    struct ScrollDirection : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: ScrollDirection
      constexpr ScrollDirection(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public HMUI.ScrollView/ScrollDirection None
      static constexpr const int None = 0;
      // Get static field: static public HMUI.ScrollView/ScrollDirection None
      static HMUI::ScrollView::ScrollDirection _get_None();
      // Set static field: static public HMUI.ScrollView/ScrollDirection None
      static void _set_None(HMUI::ScrollView::ScrollDirection value);
      // static field const value: static public HMUI.ScrollView/ScrollDirection Up
      static constexpr const int Up = 1;
      // Get static field: static public HMUI.ScrollView/ScrollDirection Up
      static HMUI::ScrollView::ScrollDirection _get_Up();
      // Set static field: static public HMUI.ScrollView/ScrollDirection Up
      static void _set_Up(HMUI::ScrollView::ScrollDirection value);
      // static field const value: static public HMUI.ScrollView/ScrollDirection Down
      static constexpr const int Down = 2;
      // Get static field: static public HMUI.ScrollView/ScrollDirection Down
      static HMUI::ScrollView::ScrollDirection _get_Down();
      // Set static field: static public HMUI.ScrollView/ScrollDirection Down
      static void _set_Down(HMUI::ScrollView::ScrollDirection value);
    }; // HMUI.ScrollView/ScrollDirection
    // private UnityEngine.RectTransform _viewport
    // Offset: 0x18
    UnityEngine::RectTransform* viewport;
    // private UnityEngine.RectTransform _contentRectTransform
    // Offset: 0x20
    UnityEngine::RectTransform* contentRectTransform;
    // private UnityEngine.UI.Button _pageUpButton
    // Offset: 0x28
    UnityEngine::UI::Button* pageUpButton;
    // private UnityEngine.UI.Button _pageDownButton
    // Offset: 0x30
    UnityEngine::UI::Button* pageDownButton;
    // private HMUI.VerticalScrollIndicator _verticalScrollIndicator
    // Offset: 0x38
    HMUI::VerticalScrollIndicator* verticalScrollIndicator;
    // private System.Single _smooth
    // Offset: 0x40
    float smooth;
    // private System.Single _joystickScrollSpeed
    // Offset: 0x44
    float joystickScrollSpeed;
    // private System.Single _joystickQuickSnapMaxTime
    // Offset: 0x48
    float joystickQuickSnapMaxTime;
    // private HMUI.ScrollView/ScrollType _scrollType
    // Offset: 0x4C
    HMUI::ScrollView::ScrollType scrollType;
    // private System.Single _fixedCellSize
    // Offset: 0x50
    float fixedCellSize;
    // private System.Single _scrollItemRelativeThresholdPosition
    // Offset: 0x54
    float scrollItemRelativeThresholdPosition;
    // private System.Single _pageStepNormalizedSize
    // Offset: 0x58
    float pageStepNormalizedSize;
    // private readonly IVRPlatformHelper _platformHelper
    // Offset: 0x60
    GlobalNamespace::IVRPlatformHelper* platformHelper;
    // private HMUI.ButtonBinder _buttonBinder
    // Offset: 0x68
    HMUI::ButtonBinder* buttonBinder;
    // private System.Single _destinationPosY
    // Offset: 0x70
    float destinationPosY;
    // private System.Single[] _scrollFocusPosYs
    // Offset: 0x78
    ::Array<float>* scrollFocusPosYs;
    // private HMUI.EventSystemListener _eventSystemListener
    // Offset: 0x80
    HMUI::EventSystemListener* eventSystemListener;
    // private HMUI.ScrollView/ScrollDirection _lastJoystickScrollDirection
    // Offset: 0x88
    HMUI::ScrollView::ScrollDirection lastJoystickScrollDirection;
    // private System.Single _joystickScrollStartTime
    // Offset: 0x8C
    float joystickScrollStartTime;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // private System.Single get_scrollPageHeight()
    // Offset: 0x107F664
    float get_scrollPageHeight();
    // private System.Single get_contentHeight()
    // Offset: 0x107F6A8
    float get_contentHeight();
    // protected System.Void Awake()
    // Offset: 0x107F6EC
    void Awake();
    // protected System.Void OnDestroy()
    // Offset: 0x107FCD8
    void OnDestroy();
    // protected System.Void Update()
    // Offset: 0x107FEB8
    void Update();
    // protected System.Void SetContentHeight(System.Single contentHeight)
    // Offset: 0x107FA50
    void SetContentHeight(float contentHeight);
    // public System.Void ScrollDown(System.Boolean animated)
    // Offset: 0x10800AC
    void ScrollDown(bool animated);
    // public System.Void ScrollToWorldPosition(UnityEngine.Vector3 worldPosition, System.Single pageRelativePosition, System.Boolean animated)
    // Offset: 0x10800F0
    void ScrollToWorldPosition(UnityEngine::Vector3 worldPosition, float pageRelativePosition, bool animated);
    // public System.Void ScrollToWorldPositionIfOutsideArea(UnityEngine.Vector3 worldPosition, System.Single pageRelativePosition, System.Single relativeBoundaryStart, System.Single relativeBoundaryEnd, System.Boolean animated)
    // Offset: 0x1080268
    void ScrollToWorldPositionIfOutsideArea(UnityEngine::Vector3 worldPosition, float pageRelativePosition, float relativeBoundaryStart, float relativeBoundaryEnd, bool animated);
    // public System.Void ScrollTo(System.Single destinationPosY, System.Boolean animated)
    // Offset: 0x107F5E0
    void ScrollTo(float destinationPosY, bool animated);
    // private UnityEngine.Vector2 WorldPositionToScrollViewPosition(UnityEngine.Vector3 worldPosition)
    // Offset: 0x108013C
    UnityEngine::Vector2 WorldPositionToScrollViewPosition(UnityEngine::Vector3 worldPosition);
    // private System.Void SetDestinationPosY(System.Single value)
    // Offset: 0x108031C
    void SetDestinationPosY(float value);
    // private System.Void UpdateVerticalScrollIndicator(System.Single posY)
    // Offset: 0x107FFE8
    void UpdateVerticalScrollIndicator(float posY);
    // private System.Void PageUpButtonPressed()
    // Offset: 0x10803CC
    void PageUpButtonPressed();
    // private System.Void PageDownButtonPressed()
    // Offset: 0x10805A4
    void PageDownButtonPressed();
    // private System.Void RefreshButtons()
    // Offset: 0x107FC4C
    void RefreshButtons();
    // private System.Void HandlePointerDidEnter(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x10807AC
    void HandlePointerDidEnter(UnityEngine::EventSystems::PointerEventData* eventData);
    // private System.Void HandlePointerDidExit(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0x108094C
    void HandlePointerDidExit(UnityEngine::EventSystems::PointerEventData* eventData);
    // private System.Void HandleJoystickWasNotCenteredThisFrame(UnityEngine.Vector2 deltaPos)
    // Offset: 0x1080E4C
    void HandleJoystickWasNotCenteredThisFrame(UnityEngine::Vector2 deltaPos);
    // private System.Void HandleJoystickWasCenteredThisFrame()
    // Offset: 0x1080AFC
    void HandleJoystickWasCenteredThisFrame();
    // private System.Single <Awake>b__25_0(HMUI.ItemForFocussedScrolling item)
    // Offset: 0x1080F68
    float $Awake$b__25_0(HMUI::ItemForFocussedScrolling* item);
    // public System.Void .ctor()
    // Offset: 0x1080F38
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static ScrollView* New_ctor();
  }; // HMUI.ScrollView
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(HMUI::ScrollView*, "HMUI", "ScrollView");
DEFINE_IL2CPP_ARG_TYPE(HMUI::ScrollView::ScrollType, "HMUI", "ScrollView/ScrollType");
DEFINE_IL2CPP_ARG_TYPE(HMUI::ScrollView::ScrollDirection, "HMUI", "ScrollView/ScrollDirection");
#pragma pack(pop)
