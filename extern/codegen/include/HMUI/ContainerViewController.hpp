// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
// Including type: HMUI.ViewController
#include "HMUI/ViewController.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: Screen
  class Screen;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: RectTransform
  class RectTransform;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
  // Forward declaring type: HashSet`1<T>
  template<typename T>
  class HashSet_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action
  class Action;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
  // Forward declaring type: Action`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  class Action_3;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: HMUI
namespace HMUI {
  // Size: 0x80
  #pragma pack(push, 1)
  // Autogenerated type: HMUI.ContainerViewController
  // [] Offset: FFFFFFFF
  class ContainerViewController : public HMUI::ViewController {
    public:
    // Nested type: HMUI::ContainerViewController::$AddViewControllerCoroutine$d__15
    class $AddViewControllerCoroutine$d__15;
    // Nested type: HMUI::ContainerViewController::$RemoveViewControllersCoroutine$d__17
    class $RemoveViewControllersCoroutine$d__17;
    // [NullAllowed] Offset: 0xD18B58
    // private UnityEngine.RectTransform _controllersContainer
    // Size: 0x8
    // Offset: 0x70
    UnityEngine::RectTransform* controllersContainer;
    // Field size check
    static_assert(sizeof(UnityEngine::RectTransform*) == 0x8);
    // protected System.Collections.Generic.List`1<HMUI.ViewController> _viewControllers
    // Size: 0x8
    // Offset: 0x78
    System::Collections::Generic::List_1<HMUI::ViewController*>* viewControllers;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::List_1<HMUI::ViewController*>*) == 0x8);
    // Creating value type constructor for type: ContainerViewController
    ContainerViewController(UnityEngine::RectTransform* controllersContainer_ = {}, System::Collections::Generic::List_1<HMUI::ViewController*>* viewControllers_ = {}) noexcept : controllersContainer{controllersContainer_}, viewControllers{viewControllers_} {}
    // public UnityEngine.RectTransform get_controllersContainer()
    // Offset: 0x11FA118
    UnityEngine::RectTransform* get_controllersContainer();
    // public System.Collections.Generic.List`1<HMUI.ViewController> get_viewControllers()
    // Offset: 0x11FA1C4
    System::Collections::Generic::List_1<HMUI::ViewController*>* get_viewControllers();
    // protected System.Void LayoutViewControllers(System.Collections.Generic.List`1<HMUI.ViewController> viewControllers)
    // Offset: 0xFFFFFFFF
    void LayoutViewControllers(System::Collections::Generic::List_1<HMUI::ViewController*>* viewControllers);
    // public System.Void ClearChildViewControllers()
    // Offset: 0x11FA5E4
    void ClearChildViewControllers();
    // public System.Void SetChildViewController(HMUI.ViewController viewController)
    // Offset: 0x11FA70C
    void SetChildViewController(HMUI::ViewController* viewController);
    // public System.Void SetChildViewControllers(params HMUI.ViewController[] viewControllers)
    // Offset: 0x11FA7C8
    void SetChildViewControllers(::Array<HMUI::ViewController*>* viewControllers);
    // Creating initializer_list -> params proxy for: System.Void SetChildViewControllers(params HMUI.ViewController[] viewControllers)
    void SetChildViewControllers(std::initializer_list<HMUI::ViewController*> viewControllers);
    // Creating TArgs -> initializer_list proxy for: System.Void SetChildViewControllers(params HMUI.ViewController[] viewControllers)
    template<class ...TParams>
    void SetChildViewControllers(TParams&&... viewControllers) {
      SetChildViewControllers({viewControllers...});
    }
    // protected System.Void AddViewController(HMUI.ViewController viewController, System.Action finishedCallback, System.Action`2<System.Single,HMUI.ViewController[]> animationLayouter, System.Boolean immediately)
    // Offset: 0x11FA940
    void AddViewController(HMUI::ViewController* viewController, System::Action* finishedCallback, System::Action_2<float, ::Array<HMUI::ViewController*>*>* animationLayouter, bool immediately);
    // private System.Collections.IEnumerator AddViewControllerCoroutine(HMUI.ViewController newViewController, System.Action finishedCallback, System.Action`2<System.Single,HMUI.ViewController[]> animationLayouter, System.Boolean immediately)
    // Offset: 0x11FAA54
    System::Collections::IEnumerator* AddViewControllerCoroutine(HMUI::ViewController* newViewController, System::Action* finishedCallback, System::Action_2<float, ::Array<HMUI::ViewController*>*>* animationLayouter, bool immediately);
    // protected System.Void RemoveViewControllers(HMUI.ViewController[] viewControllers, System.Action finishedCallback, System.Action`3<System.Single,HMUI.ViewController[],System.Collections.Generic.HashSet`1<HMUI.ViewController>> animationLayouter, System.Boolean immediately)
    // Offset: 0x11FAB54
    void RemoveViewControllers(::Array<HMUI::ViewController*>* viewControllers, System::Action* finishedCallback, System::Action_3<float, ::Array<HMUI::ViewController*>*, System::Collections::Generic::HashSet_1<HMUI::ViewController*>*>* animationLayouter, bool immediately);
    // private System.Collections.IEnumerator RemoveViewControllersCoroutine(HMUI.ViewController[] viewControllersToRemove, System.Action finishedCallback, System.Action`3<System.Single,HMUI.ViewController[],System.Collections.Generic.HashSet`1<HMUI.ViewController>> animationLayouter, System.Boolean immediately)
    // Offset: 0x11FABC0
    System::Collections::IEnumerator* RemoveViewControllersCoroutine(::Array<HMUI::ViewController*>* viewControllersToRemove, System::Action* finishedCallback, System::Action_3<float, ::Array<HMUI::ViewController*>*, System::Collections::Generic::HashSet_1<HMUI::ViewController*>*>* animationLayouter, bool immediately);
    // private System.Single[] GetNewXPositionsForViewControllers(System.Collections.Generic.List`1<HMUI.ViewController> viewControllers, System.Int32 exludeFromEndCount)
    // Offset: 0x11FACC0
    ::Array<float>* GetNewXPositionsForViewControllers(System::Collections::Generic::List_1<HMUI::ViewController*>* viewControllers, int exludeFromEndCount);
    // public override System.Void __Init(HMUI.Screen screen, HMUI.ViewController parentViewController, HMUI.ContainerViewController containerViewController)
    // Offset: 0x11FA1CC
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::__Init(HMUI.Screen screen, HMUI.ViewController parentViewController, HMUI.ContainerViewController containerViewController)
    void __Init(HMUI::Screen* screen, HMUI::ViewController* parentViewController, HMUI::ContainerViewController* containerViewController);
    // public override System.Void __Activate(System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    // Offset: 0x11FA2AC
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::__Activate(System.Boolean addedToHierarchy, System.Boolean screenSystemEnabling)
    void __Activate(bool addedToHierarchy, bool screenSystemEnabling);
    // public override System.Void __Deactivate(System.Boolean removedFromHierarchy, System.Boolean deactivateGameObject, System.Boolean screenSystemDisabling)
    // Offset: 0x11FA3E8
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::__Deactivate(System.Boolean removedFromHierarchy, System.Boolean deactivateGameObject, System.Boolean screenSystemDisabling)
    void __Deactivate(bool removedFromHierarchy, bool deactivateGameObject, bool screenSystemDisabling);
    // public override System.Void DeactivateGameObject()
    // Offset: 0x11FA4D0
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::DeactivateGameObject()
    void DeactivateGameObject();
    // protected System.Void .ctor()
    // Offset: 0x11FAEF4
    // Implemented from: HMUI.ViewController
    // Base method: System.Void ViewController::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ContainerViewController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ContainerViewController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ContainerViewController*, creationType>()));
    }
  }; // HMUI.ContainerViewController
  #pragma pack(pop)
  static check_size<sizeof(ContainerViewController), 120 + sizeof(System::Collections::Generic::List_1<HMUI::ViewController*>*)> __HMUI_ContainerViewControllerSizeCheck;
  static_assert(sizeof(ContainerViewController) == 0x80);
}
DEFINE_IL2CPP_ARG_TYPE(HMUI::ContainerViewController*, "HMUI", "ContainerViewController");
