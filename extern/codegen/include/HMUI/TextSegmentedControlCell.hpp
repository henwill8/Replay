// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.SegmentedControlCell
#include "HMUI/SegmentedControlCell.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TextMeshProUGUI
  class TextMeshProUGUI;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: GameObject
  class GameObject;
}
// Completed forward declares
// Type namespace: HMUI
namespace HMUI {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: HMUI.TextSegmentedControlCell
  // [] Offset: FFFFFFFF
  class TextSegmentedControlCell : public HMUI::SegmentedControlCell {
    public:
    // protected TMPro.TextMeshProUGUI _text
    // Size: 0x8
    // Offset: 0x48
    TMPro::TextMeshProUGUI* text;
    // Field size check
    static_assert(sizeof(TMPro::TextMeshProUGUI*) == 0x8);
    // private UnityEngine.GameObject _backgroundGameObject
    // Size: 0x8
    // Offset: 0x50
    UnityEngine::GameObject* backgroundGameObject;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // Creating value type constructor for type: TextSegmentedControlCell
    TextSegmentedControlCell(TMPro::TextMeshProUGUI* text_ = {}, UnityEngine::GameObject* backgroundGameObject_ = {}) noexcept : text{text_}, backgroundGameObject{backgroundGameObject_} {}
    // public System.Void set_text(System.String value)
    // Offset: 0x11C6F90
    void set_text(::Il2CppString* value);
    // public System.String get_text()
    // Offset: 0x11C7004
    ::Il2CppString* get_text();
    // public System.Void set_fontSize(System.Single value)
    // Offset: 0x11C6F74
    void set_fontSize(float value);
    // public System.Single get_fontSize()
    // Offset: 0x11C7020
    float get_fontSize();
    // public System.Void set_hideBackgroundImage(System.Boolean value)
    // Offset: 0x11C6FAC
    void set_hideBackgroundImage(bool value);
    // public System.Single get_preferredWidth()
    // Offset: 0x11C6FD0
    float get_preferredWidth();
    // public System.Void .ctor()
    // Offset: 0x11C703C
    // Implemented from: HMUI.SegmentedControlCell
    // Base method: System.Void SegmentedControlCell::.ctor()
    // Base method: System.Void SelectableCell::.ctor()
    // Base method: System.Void Interactable::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextSegmentedControlCell* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("HMUI::TextSegmentedControlCell::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextSegmentedControlCell*, creationType>()));
    }
  }; // HMUI.TextSegmentedControlCell
  #pragma pack(pop)
  static check_size<sizeof(TextSegmentedControlCell), 80 + sizeof(UnityEngine::GameObject*)> __HMUI_TextSegmentedControlCellSizeCheck;
  static_assert(sizeof(TextSegmentedControlCell) == 0x58);
}
DEFINE_IL2CPP_ARG_TYPE(HMUI::TextSegmentedControlCell*, "HMUI", "TextSegmentedControlCell");
