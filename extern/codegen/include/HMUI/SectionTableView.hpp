// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: HMUI.TableView
#include "HMUI/TableView.hpp"
// Including type: HMUI.TableView/IDataSource
#include "HMUI/TableView_IDataSource.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: TableCell
  class TableCell;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`3<T1, T2, T3>
  template<typename T1, typename T2, typename T3>
  class Action_3;
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Completed forward declares
// Type namespace: HMUI
namespace HMUI {
  // Size: 0x110
  #pragma pack(push, 1)
  // Autogenerated type: HMUI.SectionTableView
  // [] Offset: FFFFFFFF
  class SectionTableView : public HMUI::TableView/*, public HMUI::TableView::IDataSource*/ {
    public:
    // Nested type: HMUI::SectionTableView::IDataSource
    class IDataSource;
    // Nested type: HMUI::SectionTableView::Section
    struct Section;
    // Size: 0xC
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: HMUI.SectionTableView/Section
    // [] Offset: FFFFFFFF
    struct Section/*, public System::ValueType*/ {
      public:
      // public System.Boolean unfolded
      // Size: 0x1
      // Offset: 0x0
      bool unfolded;
      // Field size check
      static_assert(sizeof(bool) == 0x1);
      // Padding between fields: unfolded and: startBaseRow
      char __padding0[0x3] = {};
      // public System.Int32 startBaseRow
      // Size: 0x4
      // Offset: 0x4
      int startBaseRow;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 numberOfBaseRows
      // Size: 0x4
      // Offset: 0x8
      int numberOfBaseRows;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: Section
      constexpr Section(bool unfolded_ = {}, int startBaseRow_ = {}, int numberOfBaseRows_ = {}) noexcept : unfolded{unfolded_}, startBaseRow{startBaseRow_}, numberOfBaseRows{numberOfBaseRows_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
    }; // HMUI.SectionTableView/Section
    #pragma pack(pop)
    static check_size<sizeof(SectionTableView::Section), 8 + sizeof(int)> __HMUI_SectionTableView_SectionSizeCheck;
    static_assert(sizeof(SectionTableView::Section) == 0xC);
    // private System.Boolean _unfoldSectionsByDefault
    // Size: 0x1
    // Offset: 0xE8
    bool unfoldSectionsByDefault;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: unfoldSectionsByDefault and: didSelectRowInSectionEvent
    char __padding0[0x7] = {};
    // [CompilerGeneratedAttribute] Offset: 0xD19DD0
    // private System.Action`3<HMUI.SectionTableView,System.Int32,System.Int32> didSelectRowInSectionEvent
    // Size: 0x8
    // Offset: 0xF0
    System::Action_3<HMUI::SectionTableView*, int, int>* didSelectRowInSectionEvent;
    // Field size check
    static_assert(sizeof(System::Action_3<HMUI::SectionTableView*, int, int>*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD19DE0
    // private System.Action`2<HMUI.SectionTableView,System.Int32> didSelectHeaderEvent
    // Size: 0x8
    // Offset: 0xF8
    System::Action_2<HMUI::SectionTableView*, int>* didSelectHeaderEvent;
    // Field size check
    static_assert(sizeof(System::Action_2<HMUI::SectionTableView*, int>*) == 0x8);
    // private HMUI.SectionTableView/IDataSource _dataSource
    // Size: 0x8
    // Offset: 0x100
    HMUI::SectionTableView::IDataSource* dataSource;
    // Field size check
    static_assert(sizeof(HMUI::SectionTableView::IDataSource*) == 0x8);
    // private HMUI.SectionTableView/Section[] _sections
    // Size: 0x8
    // Offset: 0x108
    ::Array<HMUI::SectionTableView::Section>* sections;
    // Field size check
    static_assert(sizeof(::Array<HMUI::SectionTableView::Section>*) == 0x8);
    // Creating value type constructor for type: SectionTableView
    SectionTableView(bool unfoldSectionsByDefault_ = {}, System::Action_3<HMUI::SectionTableView*, int, int>* didSelectRowInSectionEvent_ = {}, System::Action_2<HMUI::SectionTableView*, int>* didSelectHeaderEvent_ = {}, HMUI::SectionTableView::IDataSource* dataSource_ = {}, ::Array<HMUI::SectionTableView::Section>* sections_ = {}) noexcept : unfoldSectionsByDefault{unfoldSectionsByDefault_}, didSelectRowInSectionEvent{didSelectRowInSectionEvent_}, didSelectHeaderEvent{didSelectHeaderEvent_}, dataSource{dataSource_}, sections{sections_} {}
    // Creating interface conversion operator: operator HMUI::TableView::IDataSource
    operator HMUI::TableView::IDataSource() noexcept {
      return *reinterpret_cast<HMUI::TableView::IDataSource*>(this);
    }
    // public System.Void add_didSelectRowInSectionEvent(System.Action`3<HMUI.SectionTableView,System.Int32,System.Int32> value)
    // Offset: 0x11BD6FC
    void add_didSelectRowInSectionEvent(System::Action_3<HMUI::SectionTableView*, int, int>* value);
    // public System.Void remove_didSelectRowInSectionEvent(System.Action`3<HMUI.SectionTableView,System.Int32,System.Int32> value)
    // Offset: 0x11BD7A0
    void remove_didSelectRowInSectionEvent(System::Action_3<HMUI::SectionTableView*, int, int>* value);
    // public System.Void add_didSelectHeaderEvent(System.Action`2<HMUI.SectionTableView,System.Int32> value)
    // Offset: 0x11BD844
    void add_didSelectHeaderEvent(System::Action_2<HMUI::SectionTableView*, int>* value);
    // public System.Void remove_didSelectHeaderEvent(System.Action`2<HMUI.SectionTableView,System.Int32> value)
    // Offset: 0x11BD8E8
    void remove_didSelectHeaderEvent(System::Action_2<HMUI::SectionTableView*, int>* value);
    // public HMUI.SectionTableView/IDataSource get_dataSource()
    // Offset: 0x11BD98C
    HMUI::SectionTableView::IDataSource* get_dataSource();
    // public System.Void set_dataSource(HMUI.SectionTableView/IDataSource value)
    // Offset: 0x11BD994
    void set_dataSource(HMUI::SectionTableView::IDataSource* value);
    // public System.Boolean IsSectionUnfolded(System.Int32 section)
    // Offset: 0x11BD9E8
    bool IsSectionUnfolded(int section);
    // public System.Void ReloadData(System.Boolean resetFoldState)
    // Offset: 0x11BDDD0
    void ReloadData(bool resetFoldState);
    // public System.Void UnfoldAllSections()
    // Offset: 0x11BE3A4
    void UnfoldAllSections();
    // public System.Void FoldAll()
    // Offset: 0x11BE404
    void FoldAll();
    // public System.Void UnfoldSection(System.Int32 section)
    // Offset: 0x11BE460
    void UnfoldSection(int section);
    // public System.Void FoldSection(System.Int32 section)
    // Offset: 0x11BE900
    void FoldSection(int section);
    // public System.Void ScrollToRow(System.Int32 section, System.Int32 row, HMUI.TableViewScroller/ScrollPositionType scrollPositionType, System.Boolean animated)
    // Offset: 0x11BECF8
    void ScrollToRow(int section, int row, HMUI::TableViewScroller::ScrollPositionType scrollPositionType, bool animated);
    // public System.Void SectionAndRowForBaseRow(System.Int32 baseRow, out System.Int32 section, out System.Int32 row, out System.Boolean isSectionHeader)
    // Offset: 0x11BDCD8
    void SectionAndRowForBaseRow(int baseRow, int& section, int& row, bool& isSectionHeader);
    // public System.Single CellSize()
    // Offset: 0x11BDA28
    // Implemented from: HMUI.TableView/IDataSource
    // Base method: System.Single IDataSource::CellSize()
    float CellSize();
    // public System.Int32 NumberOfCells()
    // Offset: 0x11BDAD8
    // Implemented from: HMUI.TableView/IDataSource
    // Base method: System.Int32 IDataSource::NumberOfCells()
    int NumberOfCells();
    // public HMUI.TableCell CellForIdx(HMUI.TableView tableView, System.Int32 baseRow)
    // Offset: 0x11BDB28
    // Implemented from: HMUI.TableView/IDataSource
    // Base method: HMUI.TableCell IDataSource::CellForIdx(HMUI.TableView tableView, System.Int32 baseRow)
    HMUI::TableCell* CellForIdx(HMUI::TableView* tableView, int baseRow);
    // public override System.Void ReloadData()
    // Offset: 0x11BDDC8
    // Implemented from: HMUI.TableView
    // Base method: System.Void TableView::ReloadData()
    void ReloadData();
    // protected override System.Void DidSelectCellWithIdx(System.Int32 baseRow)
    // Offset: 0x11BE2DC
    // Implemented from: HMUI.TableView
    // Base method: System.Void TableView::DidSelectCellWithIdx(System.Int32 baseRow)
    void DidSelectCellWithIdx(int baseRow);
    // public System.Void .ctor()
    // Offset: 0x11BED98
    // Implemented from: HMUI.TableView
    // Base method: System.Void TableView::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static SectionTableView* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("HMUI::SectionTableView::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<SectionTableView*, creationType>()));
    }
  }; // HMUI.SectionTableView
  #pragma pack(pop)
  static check_size<sizeof(SectionTableView), 264 + sizeof(::Array<HMUI::SectionTableView::Section>*)> __HMUI_SectionTableViewSizeCheck;
  static_assert(sizeof(SectionTableView) == 0x110);
}
DEFINE_IL2CPP_ARG_TYPE(HMUI::SectionTableView*, "HMUI", "SectionTableView");
DEFINE_IL2CPP_ARG_TYPE(HMUI::SectionTableView::Section, "HMUI", "SectionTableView/Section");
