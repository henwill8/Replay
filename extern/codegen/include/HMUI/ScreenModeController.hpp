// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: CurvedCanvasSettings
  class CurvedCanvasSettings;
  // Forward declaring type: ScreenModeData
  class ScreenModeData;
}
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: IVRPlatformHelper
  class IVRPlatformHelper;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
}
// Completed forward declares
// Type namespace: HMUI
namespace HMUI {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: HMUI.ScreenModeController
  // [] Offset: FFFFFFFF
  class ScreenModeController : public UnityEngine::MonoBehaviour {
    public:
    // private HMUI.CurvedCanvasSettings[] _curvedCanvases
    // Size: 0x8
    // Offset: 0x18
    ::Array<HMUI::CurvedCanvasSettings*>* curvedCanvases;
    // Field size check
    static_assert(sizeof(::Array<HMUI::CurvedCanvasSettings*>*) == 0x8);
    // [InjectAttribute] Offset: 0xD18C20
    // private readonly IVRPlatformHelper _vrPlatformHelper
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::IVRPlatformHelper* vrPlatformHelper;
    // Field size check
    static_assert(sizeof(GlobalNamespace::IVRPlatformHelper*) == 0x8);
    // private HMUI.ScreenModeData _defaultModeData
    // Size: 0x8
    // Offset: 0x28
    HMUI::ScreenModeData* defaultModeData;
    // Field size check
    static_assert(sizeof(HMUI::ScreenModeData*) == 0x8);
    // private UnityEngine.Transform _transform
    // Size: 0x8
    // Offset: 0x30
    UnityEngine::Transform* transform;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // Creating value type constructor for type: ScreenModeController
    ScreenModeController(::Array<HMUI::CurvedCanvasSettings*>* curvedCanvases_ = {}, GlobalNamespace::IVRPlatformHelper* vrPlatformHelper_ = {}, HMUI::ScreenModeData* defaultModeData_ = {}, UnityEngine::Transform* transform_ = {}) noexcept : curvedCanvases{curvedCanvases_}, vrPlatformHelper{vrPlatformHelper_}, defaultModeData{defaultModeData_}, transform{transform_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // protected System.Void Awake()
    // Offset: 0x11BA974
    void Awake();
    // public System.Void SetMode(HMUI.ScreenModeData screenModeData)
    // Offset: 0x11BAB90
    void SetMode(HMUI::ScreenModeData* screenModeData);
    // public System.Void SetDefaultMode()
    // Offset: 0x11BADF8
    void SetDefaultMode();
    // public System.Void .ctor()
    // Offset: 0x11BAE00
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ScreenModeController* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("HMUI::ScreenModeController::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ScreenModeController*, creationType>()));
    }
  }; // HMUI.ScreenModeController
  #pragma pack(pop)
  static check_size<sizeof(ScreenModeController), 48 + sizeof(UnityEngine::Transform*)> __HMUI_ScreenModeControllerSizeCheck;
  static_assert(sizeof(ScreenModeController) == 0x38);
}
DEFINE_IL2CPP_ARG_TYPE(HMUI::ScreenModeController*, "HMUI", "ScreenModeController");
