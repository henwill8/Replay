// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: HMUI
namespace HMUI {
  // Forward declaring type: SegmentedControlCell
  class SegmentedControlCell;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: GameObject
  class GameObject;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Action`2<T1, T2>
  template<typename T1, typename T2>
  class Action_2;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: List`1<T>
  template<typename T>
  class List_1;
}
// Completed forward declares
// Type namespace: HMUI
namespace HMUI {
  // Autogenerated type: HMUI.SegmentedControl
  class SegmentedControl : public UnityEngine::MonoBehaviour {
    public:
    // Nested type: HMUI::SegmentedControl::IDataSource
    class IDataSource;
    // private UnityEngine.Transform _separatorPrefab
    // Offset: 0x18
    UnityEngine::Transform* separatorPrefab;
    // private System.Action`2<HMUI.SegmentedControl,System.Int32> didSelectCellEvent
    // Offset: 0x20
    System::Action_2<HMUI::SegmentedControl*, int>* didSelectCellEvent;
    // private System.Int32 _numberOfCells
    // Offset: 0x28
    int numberOfCells;
    // private System.Collections.Generic.List`1<HMUI.SegmentedControlCell> _cells
    // Offset: 0x30
    System::Collections::Generic::List_1<HMUI::SegmentedControlCell*>* cells;
    // private System.Collections.Generic.List`1<UnityEngine.GameObject> _separators
    // Offset: 0x38
    System::Collections::Generic::List_1<UnityEngine::GameObject*>* separators;
    // private HMUI.SegmentedControl/IDataSource _dataSource
    // Offset: 0x40
    HMUI::SegmentedControl::IDataSource* dataSource;
    // private System.Int32 _selectedCellNumber
    // Offset: 0x48
    int selectedCellNumber;
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public System.Void add_didSelectCellEvent(System.Action`2<HMUI.SegmentedControl,System.Int32> value)
    // Offset: 0x10E4760
    void add_didSelectCellEvent(System::Action_2<HMUI::SegmentedControl*, int>* value);
    // public System.Void remove_didSelectCellEvent(System.Action`2<HMUI.SegmentedControl,System.Int32> value)
    // Offset: 0x10E4804
    void remove_didSelectCellEvent(System::Action_2<HMUI::SegmentedControl*, int>* value);
    // public HMUI.SegmentedControl/IDataSource get_dataSource()
    // Offset: 0x10E48A8
    HMUI::SegmentedControl::IDataSource* get_dataSource();
    // public System.Void set_dataSource(HMUI.SegmentedControl/IDataSource value)
    // Offset: 0x10E48B0
    void set_dataSource(HMUI::SegmentedControl::IDataSource* value);
    // public System.Int32 get_selectedCellNumber()
    // Offset: 0x10E4BFC
    int get_selectedCellNumber();
    // private System.Void CreateCells()
    // Offset: 0x10E4C04
    void CreateCells();
    // public System.Void CellSelectionStateDidChange(HMUI.SegmentedControlCell changedCell)
    // Offset: 0x10E50C8
    void CellSelectionStateDidChange(HMUI::SegmentedControlCell* changedCell);
    // public System.Void ReloadData()
    // Offset: 0x10E48D8
    void ReloadData();
    // public System.Void SelectCellWithNumber(System.Int32 selectCellNumber)
    // Offset: 0x10E51A0
    void SelectCellWithNumber(int selectCellNumber);
    // public System.Void .ctor()
    // Offset: 0x10E5280
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static SegmentedControl* New_ctor();
  }; // HMUI.SegmentedControl
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(HMUI::SegmentedControl*, "HMUI", "SegmentedControl");
#pragma pack(pop)
