// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: GlobalNamespace
namespace GlobalNamespace {
  // Forward declaring type: VRController
  class VRController;
}
// Forward declaring namespace: VRUIControls
namespace VRUIControls {
  // Forward declaring type: VRLaserPointer
  class VRLaserPointer;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Transform
  class Transform;
  // Skipping declaration: Vector3 because it is already included!
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: EventSystem
  class EventSystem;
  // Forward declaring type: PointerEventData
  class PointerEventData;
}
// Completed forward declares
// Type namespace: VRUIControls
namespace VRUIControls {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: VRUIControls.VRPointer
  // [] Offset: FFFFFFFF
  // [RequireComponent] Offset: D23F68
  class VRPointer : public UnityEngine::MonoBehaviour {
    public:
    // private VRController _leftVRController
    // Size: 0x8
    // Offset: 0x18
    GlobalNamespace::VRController* leftVRController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::VRController*) == 0x8);
    // private VRController _rightVRController
    // Size: 0x8
    // Offset: 0x20
    GlobalNamespace::VRController* rightVRController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::VRController*) == 0x8);
    // private VRUIControls.VRLaserPointer _laserPointerPrefab
    // Size: 0x8
    // Offset: 0x28
    VRUIControls::VRLaserPointer* laserPointerPrefab;
    // Field size check
    static_assert(sizeof(VRUIControls::VRLaserPointer*) == 0x8);
    // private UnityEngine.Transform _cursorPrefab
    // Size: 0x8
    // Offset: 0x30
    UnityEngine::Transform* cursorPrefab;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // private System.Single _defaultLaserPointerLength
    // Size: 0x4
    // Offset: 0x38
    float defaultLaserPointerLength;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single _laserPointerWidth
    // Size: 0x4
    // Offset: 0x3C
    float laserPointerWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private VRUIControls.VRLaserPointer _laserPointer
    // Size: 0x8
    // Offset: 0x40
    VRUIControls::VRLaserPointer* laserPointer;
    // Field size check
    static_assert(sizeof(VRUIControls::VRLaserPointer*) == 0x8);
    // private UnityEngine.Transform _cursorTransform
    // Size: 0x8
    // Offset: 0x48
    UnityEngine::Transform* cursorTransform;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // private UnityEngine.EventSystems.EventSystem _eventSystem
    // Size: 0x8
    // Offset: 0x50
    UnityEngine::EventSystems::EventSystem* eventSystem;
    // Field size check
    static_assert(sizeof(UnityEngine::EventSystems::EventSystem*) == 0x8);
    // private VRController _vrController
    // Size: 0x8
    // Offset: 0x58
    GlobalNamespace::VRController* vrController;
    // Field size check
    static_assert(sizeof(GlobalNamespace::VRController*) == 0x8);
    // private UnityEngine.EventSystems.PointerEventData _pointerData
    // Size: 0x8
    // Offset: 0x60
    UnityEngine::EventSystems::PointerEventData* pointerData;
    // Field size check
    static_assert(sizeof(UnityEngine::EventSystems::PointerEventData*) == 0x8);
    // Creating value type constructor for type: VRPointer
    VRPointer(GlobalNamespace::VRController* leftVRController_ = {}, GlobalNamespace::VRController* rightVRController_ = {}, VRUIControls::VRLaserPointer* laserPointerPrefab_ = {}, UnityEngine::Transform* cursorPrefab_ = {}, float defaultLaserPointerLength_ = {}, float laserPointerWidth_ = {}, VRUIControls::VRLaserPointer* laserPointer_ = {}, UnityEngine::Transform* cursorTransform_ = {}, UnityEngine::EventSystems::EventSystem* eventSystem_ = {}, GlobalNamespace::VRController* vrController_ = {}, UnityEngine::EventSystems::PointerEventData* pointerData_ = {}) noexcept : leftVRController{leftVRController_}, rightVRController{rightVRController_}, laserPointerPrefab{laserPointerPrefab_}, cursorPrefab{cursorPrefab_}, defaultLaserPointerLength{defaultLaserPointerLength_}, laserPointerWidth{laserPointerWidth_}, laserPointer{laserPointer_}, cursorTransform{cursorTransform_}, eventSystem{eventSystem_}, vrController{vrController_}, pointerData{pointerData_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // static field const value: static public System.Single kScrollMultiplier
    static constexpr const float kScrollMultiplier = 1;
    // Get static field: static public System.Single kScrollMultiplier
    static float _get_kScrollMultiplier();
    // Set static field: static public System.Single kScrollMultiplier
    static void _set_kScrollMultiplier(float value);
    // Get static field: static private System.Boolean _lastControllerUsedWasRight
    static bool _get__lastControllerUsedWasRight();
    // Set static field: static private System.Boolean _lastControllerUsedWasRight
    static void _set__lastControllerUsedWasRight(bool value);
    // Get static field: static private System.Boolean _rightControllerWasReleased
    static bool _get__rightControllerWasReleased();
    // Set static field: static private System.Boolean _rightControllerWasReleased
    static void _set__rightControllerWasReleased(bool value);
    // Get static field: static private System.Boolean _leftControllerWasReleased
    static bool _get__leftControllerWasReleased();
    // Set static field: static private System.Boolean _leftControllerWasReleased
    static void _set__leftControllerWasReleased(bool value);
    // public VRController get_vrController()
    // Offset: 0x22596C8
    GlobalNamespace::VRController* get_vrController();
    // public UnityEngine.Vector3 get_cursorPosition()
    // Offset: 0x22596D0
    UnityEngine::Vector3 get_cursorPosition();
    // private UnityEngine.EventSystems.EventSystem get_eventSystem()
    // Offset: 0x22596EC
    UnityEngine::EventSystems::EventSystem* get_eventSystem();
    // static private System.Void NoDomainReloadInit()
    // Offset: 0x225976C
    static void NoDomainReloadInit();
    // protected System.Void Awake()
    // Offset: 0x22597F0
    void Awake();
    // protected System.Void OnEnable()
    // Offset: 0x225988C
    void OnEnable();
    // protected System.Void OnDisable()
    // Offset: 0x2259B28
    void OnDisable();
    // protected System.Void LateUpdate()
    // Offset: 0x2259CC8
    void LateUpdate();
    // private System.Void CreateLaserPointerAndLaserHit()
    // Offset: 0x2259890
    void CreateLaserPointerAndLaserHit();
    // private System.Void RefreshLaserPointerAndLaserHit(UnityEngine.EventSystems.PointerEventData pointerData)
    // Offset: 0x225A0C8
    void RefreshLaserPointerAndLaserHit(UnityEngine::EventSystems::PointerEventData* pointerData);
    // private System.Void OnApplicationFocus(System.Boolean hasFocus)
    // Offset: 0x225A394
    void OnApplicationFocus(bool hasFocus);
    // private System.Void DestroyLaserAndHit()
    // Offset: 0x2259B2C
    void DestroyLaserAndHit();
    // public System.String get_state()
    // Offset: 0x225A44C
    ::Il2CppString* get_state();
    // public System.Void Process(UnityEngine.EventSystems.PointerEventData pointerEventData)
    // Offset: 0x2258D94
    void Process(UnityEngine::EventSystems::PointerEventData* pointerEventData);
    // public System.Void .ctor()
    // Offset: 0x225A734
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static VRPointer* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("VRUIControls::VRPointer::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<VRPointer*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x225A748
    // Implemented from: UnityEngine.Object
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // VRUIControls.VRPointer
  #pragma pack(pop)
  static check_size<sizeof(VRPointer), 96 + sizeof(UnityEngine::EventSystems::PointerEventData*)> __VRUIControls_VRPointerSizeCheck;
  static_assert(sizeof(VRPointer) == 0x68);
}
DEFINE_IL2CPP_ARG_TYPE(VRUIControls::VRPointer*, "VRUIControls", "VRPointer");
