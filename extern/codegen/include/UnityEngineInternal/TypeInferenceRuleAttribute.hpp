// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: UnityEngineInternal.TypeInferenceRules
#include "UnityEngineInternal/TypeInferenceRules.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: UnityEngineInternal
namespace UnityEngineInternal {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: UnityEngineInternal.TypeInferenceRuleAttribute
  // [] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: CBC6CC
  class TypeInferenceRuleAttribute : public System::Attribute {
    public:
    // private readonly System.String _rule
    // Size: 0x8
    // Offset: 0x10
    ::Il2CppString* rule;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // Creating value type constructor for type: TypeInferenceRuleAttribute
    TypeInferenceRuleAttribute(::Il2CppString* rule_ = {}) noexcept : rule{rule_} {}
    // Creating conversion operator: operator ::Il2CppString*
    constexpr operator ::Il2CppString*() const noexcept {
      return rule;
    }
    // public System.Void .ctor(UnityEngineInternal.TypeInferenceRules rule)
    // Offset: 0x1AC050C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TypeInferenceRuleAttribute* New_ctor(UnityEngineInternal::TypeInferenceRules rule) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngineInternal::TypeInferenceRuleAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TypeInferenceRuleAttribute*, creationType>(rule)));
    }
    // public System.Void .ctor(System.String rule)
    // Offset: 0x1AC05B4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TypeInferenceRuleAttribute* New_ctor(::Il2CppString* rule) {
      static auto ___internal__logger = ::Logger::get().WithContext("UnityEngineInternal::TypeInferenceRuleAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TypeInferenceRuleAttribute*, creationType>(rule)));
    }
    // public override System.String ToString()
    // Offset: 0x1AC05E8
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
  }; // UnityEngineInternal.TypeInferenceRuleAttribute
  #pragma pack(pop)
  static check_size<sizeof(TypeInferenceRuleAttribute), 16 + sizeof(::Il2CppString*)> __UnityEngineInternal_TypeInferenceRuleAttributeSizeCheck;
  static_assert(sizeof(TypeInferenceRuleAttribute) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(UnityEngineInternal::TypeInferenceRuleAttribute*, "UnityEngineInternal", "TypeInferenceRuleAttribute");
