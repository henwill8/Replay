// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Attribute
#include "System/Attribute.hpp"
// Including type: JetBrains.Annotations.AssertionConditionType
#include "JetBrains/Annotations/AssertionConditionType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: JetBrains.Annotations
namespace JetBrains::Annotations {
  // Size: 0x14
  #pragma pack(push, 1)
  // Autogenerated type: JetBrains.Annotations.AssertionConditionAttribute
  // [] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: CF4834
  class AssertionConditionAttribute : public System::Attribute {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xCF4DAC
    // private JetBrains.Annotations.AssertionConditionType <ConditionType>k__BackingField
    // Size: 0x4
    // Offset: 0x10
    JetBrains::Annotations::AssertionConditionType ConditionType;
    // Field size check
    static_assert(sizeof(JetBrains::Annotations::AssertionConditionType) == 0x4);
    // Creating value type constructor for type: AssertionConditionAttribute
    AssertionConditionAttribute(JetBrains::Annotations::AssertionConditionType ConditionType_ = {}) noexcept : ConditionType{ConditionType_} {}
    // Creating conversion operator: operator JetBrains::Annotations::AssertionConditionType
    constexpr operator JetBrains::Annotations::AssertionConditionType() const noexcept {
      return ConditionType;
    }
    // public System.Void .ctor(JetBrains.Annotations.AssertionConditionType conditionType)
    // Offset: 0x22BCF44
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AssertionConditionAttribute* New_ctor(JetBrains::Annotations::AssertionConditionType conditionType) {
      static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::AssertionConditionAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AssertionConditionAttribute*, creationType>(conditionType)));
    }
    // public JetBrains.Annotations.AssertionConditionType get_ConditionType()
    // Offset: 0x22BCF70
    JetBrains::Annotations::AssertionConditionType get_ConditionType();
    // private System.Void set_ConditionType(JetBrains.Annotations.AssertionConditionType value)
    // Offset: 0x22BCF78
    void set_ConditionType(JetBrains::Annotations::AssertionConditionType value);
  }; // JetBrains.Annotations.AssertionConditionAttribute
  #pragma pack(pop)
  static check_size<sizeof(AssertionConditionAttribute), 16 + sizeof(JetBrains::Annotations::AssertionConditionType)> __JetBrains_Annotations_AssertionConditionAttributeSizeCheck;
  static_assert(sizeof(AssertionConditionAttribute) == 0x14);
}
DEFINE_IL2CPP_ARG_TYPE(JetBrains::Annotations::AssertionConditionAttribute*, "JetBrains.Annotations", "AssertionConditionAttribute");
