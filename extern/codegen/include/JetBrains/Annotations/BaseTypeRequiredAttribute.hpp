// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Attribute
#include "System/Attribute.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Type
  class Type;
}
// Completed forward declares
// Type namespace: JetBrains.Annotations
namespace JetBrains::Annotations {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: JetBrains.Annotations.BaseTypeRequiredAttribute
  // [] Offset: FFFFFFFF
  // [AttributeUsageAttribute] Offset: CF43C8
  // [BaseTypeRequiredAttribute] Offset: CF43C8
  class BaseTypeRequiredAttribute : public System::Attribute {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xCF4C3C
    // private System.Type <BaseType>k__BackingField
    // Size: 0x8
    // Offset: 0x10
    System::Type* BaseType;
    // Field size check
    static_assert(sizeof(System::Type*) == 0x8);
    // Creating value type constructor for type: BaseTypeRequiredAttribute
    BaseTypeRequiredAttribute(System::Type* BaseType_ = {}) noexcept : BaseType{BaseType_} {}
    // Creating conversion operator: operator System::Type*
    constexpr operator System::Type*() const noexcept {
      return BaseType;
    }
    // public System.Void .ctor(System.Type baseType)
    // Offset: 0x22BCF88
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BaseTypeRequiredAttribute* New_ctor(System::Type* baseType) {
      static auto ___internal__logger = ::Logger::get().WithContext("JetBrains::Annotations::BaseTypeRequiredAttribute::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BaseTypeRequiredAttribute*, creationType>(baseType)));
    }
    // public System.Type get_BaseType()
    // Offset: 0x22BCFBC
    System::Type* get_BaseType();
    // private System.Void set_BaseType(System.Type value)
    // Offset: 0x22BCFC4
    void set_BaseType(System::Type* value);
  }; // JetBrains.Annotations.BaseTypeRequiredAttribute
  #pragma pack(pop)
  static check_size<sizeof(BaseTypeRequiredAttribute), 16 + sizeof(System::Type*)> __JetBrains_Annotations_BaseTypeRequiredAttributeSizeCheck;
  static_assert(sizeof(BaseTypeRequiredAttribute) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(JetBrains::Annotations::BaseTypeRequiredAttribute*, "JetBrains.Annotations", "BaseTypeRequiredAttribute");
