// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
// Including type: System.Collections.Generic.IEnumerable`1
#include "System/Collections/Generic/IEnumerable_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IComparable`1<T>
  template<typename T>
  class IComparable_1;
}
// Completed forward declares
// Type namespace: Priority_Queue
namespace Priority_Queue {
  // Autogenerated type: Priority_Queue.IPriorityQueue`2
  template<typename TItem, typename TPriority>
  class IPriorityQueue_2 : public System::Collections::Generic::IEnumerable_1<TItem> {
    public:
    // public System.Void Enqueue(TItem node, TPriority priority)
    // Offset: 0xFFFFFFFF
    void Enqueue(TItem node, TPriority priority) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Enqueue", node, priority));
    }
    // public TItem Dequeue()
    // Offset: 0xFFFFFFFF
    TItem Dequeue() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<TItem>(this, "Dequeue"));
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFF
    void Clear() {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Clear"));
    }
    // public System.Boolean Contains(TItem node)
    // Offset: 0xFFFFFFFF
    bool Contains(TItem node) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "Contains", node));
    }
    // public System.Void Remove(TItem node)
    // Offset: 0xFFFFFFFF
    void Remove(TItem node) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Remove", node));
    }
    // public System.Void UpdatePriority(TItem node, TPriority priority)
    // Offset: 0xFFFFFFFF
    void UpdatePriority(TItem node, TPriority priority) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "UpdatePriority", node, priority));
    }
    // public TItem get_First()
    // Offset: 0xFFFFFFFF
    TItem get_First() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<TItem>(this, "get_First"));
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFF
    int get_Count() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_Count"));
    }
  }; // Priority_Queue.IPriorityQueue`2
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(Priority_Queue::IPriorityQueue_2, "Priority_Queue", "IPriorityQueue`2");
#pragma pack(pop)
