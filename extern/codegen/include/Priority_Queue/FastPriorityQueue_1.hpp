// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Priority_Queue.IFixedSizePriorityQueue`2
#include "Priority_Queue/IFixedSizePriorityQueue_2.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Priority_Queue
namespace Priority_Queue {
  // Skipping declaration: <GetEnumerator>d__22 because it is already included!
  // Forward declaring type: FastPriorityQueueNode
  class FastPriorityQueueNode;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
// Type namespace: Priority_Queue
namespace Priority_Queue {
  // WARNING Size may be invalid!
  // Autogenerated type: Priority_Queue.FastPriorityQueue`1
  // [] Offset: FFFFFFFF
  template<typename T>
  class FastPriorityQueue_1 : public ::Il2CppObject/*, public Priority_Queue::IFixedSizePriorityQueue_2<T, float>*/ {
    public:
    // Nested type: Priority_Queue::FastPriorityQueue_1::$GetEnumerator$d__22<T>
    class $GetEnumerator$d__22;
    // WARNING Size may be invalid!
    // Autogenerated type: Priority_Queue.FastPriorityQueue`1/<GetEnumerator>d__22
    // [] Offset: FFFFFFFF
    // [CompilerGeneratedAttribute] Offset: D31CD0
    class $GetEnumerator$d__22 : public ::il2cpp_utils::il2cpp_type_check::NestedType, public ::Il2CppObject/*, public System::Collections::Generic::IEnumerator_1<T>*/ {
      public:
      using declaring_type = FastPriorityQueue_1<T>*;
      static constexpr std::string_view NESTED_NAME = "$GetEnumerator$d__22";
      // private System.Int32 <>1__state
      // Size: 0x4
      // Offset: 0x0
      int $$1__state;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // private T <>2__current
      // Size: 0xFFFFFFFF
      // Offset: 0x0
      T $$2__current;
      // public Priority_Queue.FastPriorityQueue`1<T> <>4__this
      // Size: 0x8
      // Offset: 0x0
      Priority_Queue::FastPriorityQueue_1<T>* $$4__this;
      // Field size check
      static_assert(sizeof(Priority_Queue::FastPriorityQueue_1<T>*) == 0x8);
      // private System.Int32 <i>5__2
      // Size: 0x4
      // Offset: 0x0
      int $i$5__2;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: $GetEnumerator$d__22
      $GetEnumerator$d__22(int $$1__state_ = {}, T $$2__current_ = {}, Priority_Queue::FastPriorityQueue_1<T>* $$4__this_ = {}, int $i$5__2_ = {}) noexcept : $$1__state{$$1__state_}, $$2__current{$$2__current_}, $$4__this{$$4__this_}, $i$5__2{$i$5__2_} {}
      // Creating interface conversion operator: operator System::Collections::Generic::IEnumerator_1<T>
      operator System::Collections::Generic::IEnumerator_1<T>() noexcept {
        return *reinterpret_cast<System::Collections::Generic::IEnumerator_1<T>*>(this);
      }
      // public System.Void .ctor(System.Int32 <>1__state)
      // Offset: 0xFFFFFFFF
      template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
      static typename FastPriorityQueue_1<T>::$GetEnumerator$d__22* New_ctor(int $$1__state) {
        static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::$GetEnumerator$d__22::.ctor");
        return THROW_UNLESS((::il2cpp_utils::New<typename FastPriorityQueue_1<T>::$GetEnumerator$d__22*, creationType>($$1__state)));
      }
      // private System.Void System.IDisposable.Dispose()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.IDisposable
      // Base method: System.Void IDisposable::Dispose()
      void System_IDisposable_Dispose() {
        static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::$GetEnumerator$d__22::System.IDisposable.Dispose");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.IDisposable.Dispose", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
        ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
      }
      // private System.Boolean MoveNext()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Boolean IEnumerator::MoveNext()
      bool MoveNext() {
        static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::$GetEnumerator$d__22::MoveNext");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "MoveNext", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
        return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
      }
      // Creating proxy method: System_Collections_IEnumerator_MoveNext
      // Maps to method: MoveNext
      bool System_Collections_IEnumerator_MoveNext() {
        return MoveNext();
      }
      // private T System.Collections.Generic.IEnumerator<T>.get_Current()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.IEnumerator`1
      // Base method: T IEnumerator_1::get_Current()
      T System_Collections_Generic_IEnumerator_1_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::$GetEnumerator$d__22::System.Collections.Generic.IEnumerator<T>.get_Current");
        static auto* ___internal__method = THROW_UNLESS((::il2cpp_utils::FindMethod(this, "System.Collections.Generic.IEnumerator<T>.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes())));
        return ::il2cpp_utils::RunMethodThrow<T, false>(this, ___internal__method);
      }
      // private System.Void System.Collections.IEnumerator.Reset()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Void IEnumerator::Reset()
      void System_Collections_IEnumerator_Reset() {
        static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::$GetEnumerator$d__22::System.Collections.IEnumerator.Reset");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.Reset", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
        ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Object IEnumerator::get_Current()
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::$GetEnumerator$d__22::System.Collections.IEnumerator.get_Current");
        static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerator.get_Current", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
        return ::il2cpp_utils::RunMethodThrow<::Il2CppObject*, false>(this, ___internal__method);
      }
    }; // Priority_Queue.FastPriorityQueue`1/<GetEnumerator>d__22
    // Could not write size check! Type: Priority_Queue.FastPriorityQueue`1/<GetEnumerator>d__22 is generic, or has no fields that are valid for size checks!
    // private System.Int32 _numNodes
    // Size: 0x4
    // Offset: 0x0
    int numNodes;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private T[] _nodes
    // Size: 0x8
    // Offset: 0x0
    ::Array<T>* nodes;
    // Field size check
    static_assert(sizeof(::Array<T>*) == 0x8);
    // Creating value type constructor for type: FastPriorityQueue_1
    FastPriorityQueue_1(int numNodes_ = {}, ::Array<T>* nodes_ = {}) noexcept : numNodes{numNodes_}, nodes{nodes_} {}
    // Creating interface conversion operator: operator Priority_Queue::IFixedSizePriorityQueue_2<T, float>
    operator Priority_Queue::IFixedSizePriorityQueue_2<T, float>() noexcept {
      return *reinterpret_cast<Priority_Queue::IFixedSizePriorityQueue_2<T, float>*>(this);
    }
    // public System.Void .ctor(System.Int32 maxNodes)
    // Offset: 0xFFFFFFFF
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FastPriorityQueue_1<T>* New_ctor(int maxNodes) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FastPriorityQueue_1<T>*, creationType>(maxNodes)));
    }
    // private System.Void CascadeUp(T node)
    // Offset: 0xFFFFFFFF
    void CascadeUp(T node) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::CascadeUp");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CascadeUp", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(node)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node);
    }
    // private System.Void CascadeDown(T node)
    // Offset: 0xFFFFFFFF
    void CascadeDown(T node) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::CascadeDown");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "CascadeDown", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(node)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node);
    }
    // private System.Boolean HasHigherPriority(T higher, T lower)
    // Offset: 0xFFFFFFFF
    bool HasHigherPriority(T higher, T lower) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::HasHigherPriority");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HasHigherPriority", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(higher, lower)));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, higher, lower);
    }
    // private System.Boolean HasHigherOrEqualPriority(T higher, T lower)
    // Offset: 0xFFFFFFFF
    bool HasHigherOrEqualPriority(T higher, T lower) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::HasHigherOrEqualPriority");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "HasHigherOrEqualPriority", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(higher, lower)));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, higher, lower);
    }
    // private System.Void OnNodeUpdated(T node)
    // Offset: 0xFFFFFFFF
    void OnNodeUpdated(T node) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::OnNodeUpdated");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "OnNodeUpdated", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(node)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node);
    }
    // public System.Boolean IsValidQueue()
    // Offset: 0xFFFFFFFF
    bool IsValidQueue() {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::IsValidQueue");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "IsValidQueue", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method);
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IPriorityQueue`2
    // Base method: System.Int32 IPriorityQueue_2::get_Count()
    int get_Count() {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::get_Count");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_Count", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
    }
    // public System.Int32 get_MaxSize()
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IFixedSizePriorityQueue`2
    // Base method: System.Int32 IFixedSizePriorityQueue_2::get_MaxSize()
    int get_MaxSize() {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::get_MaxSize");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_MaxSize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IPriorityQueue`2
    // Base method: System.Void IPriorityQueue_2::Clear()
    void Clear() {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::Clear");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Clear", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method);
    }
    // public System.Boolean Contains(T node)
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IPriorityQueue`2
    // Base method: System.Boolean IPriorityQueue_2::Contains(T node)
    bool Contains(T node) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::Contains");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Contains", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(node)));
      return ::il2cpp_utils::RunMethodThrow<bool, false>(this, ___internal__method, node);
    }
    // public System.Void Enqueue(T node, System.Single priority)
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IPriorityQueue`2
    // Base method: System.Void IPriorityQueue_2::Enqueue(T node, System.Single priority)
    void Enqueue(T node, float priority) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::Enqueue");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Enqueue", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(node, priority)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node, priority);
    }
    // public T Dequeue()
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IPriorityQueue`2
    // Base method: TItem IPriorityQueue_2::Dequeue()
    T Dequeue() {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::Dequeue");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Dequeue", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<T, false>(this, ___internal__method);
    }
    // public System.Void Resize(System.Int32 maxNodes)
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IFixedSizePriorityQueue`2
    // Base method: System.Void IFixedSizePriorityQueue_2::Resize(System.Int32 maxNodes)
    void Resize(int maxNodes) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::Resize");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Resize", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(maxNodes)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, maxNodes);
    }
    // public T get_First()
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IPriorityQueue`2
    // Base method: TItem IPriorityQueue_2::get_First()
    T get_First() {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::get_First");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_First", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<T, false>(this, ___internal__method);
    }
    // public System.Void UpdatePriority(T node, System.Single priority)
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IPriorityQueue`2
    // Base method: System.Void IPriorityQueue_2::UpdatePriority(T node, System.Single priority)
    void UpdatePriority(T node, float priority) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::UpdatePriority");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "UpdatePriority", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(node, priority)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node, priority);
    }
    // public System.Void Remove(T node)
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IPriorityQueue`2
    // Base method: System.Void IPriorityQueue_2::Remove(T node)
    void Remove(T node) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::Remove");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "Remove", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(node)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node);
    }
    // public System.Void ResetNode(T node)
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IFixedSizePriorityQueue`2
    // Base method: System.Void IFixedSizePriorityQueue_2::ResetNode(T node)
    void ResetNode(T node) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::ResetNode");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ResetNode", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(node)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, node);
    }
    // public System.Collections.Generic.IEnumerator`1<T> GetEnumerator()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.Generic.IEnumerable`1
    // Base method: System.Collections.Generic.IEnumerator`1<T> IEnumerable_1::GetEnumerator()
    System::Collections::Generic::IEnumerator_1<T>* GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::GetEnumerator");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "GetEnumerator", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<System::Collections::Generic::IEnumerator_1<T>*, false>(this, ___internal__method);
    }
    // Creating proxy method: System_Collections_Generic_IEnumerable_1_GetEnumerator
    // Maps to method: GetEnumerator
    System::Collections::Generic::IEnumerator_1<T>* System_Collections_Generic_IEnumerable_1_GetEnumerator() {
      return GetEnumerator();
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.IEnumerable
    // Base method: System.Collections.IEnumerator IEnumerable::GetEnumerator()
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::FastPriorityQueue_1::System.Collections.IEnumerable.GetEnumerator");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "System.Collections.IEnumerable.GetEnumerator", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<System::Collections::IEnumerator*, false>(this, ___internal__method);
    }
  }; // Priority_Queue.FastPriorityQueue`1
  // Could not write size check! Type: Priority_Queue.FastPriorityQueue`1 is generic, or has no fields that are valid for size checks!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(Priority_Queue::FastPriorityQueue_1, "Priority_Queue", "FastPriorityQueue`1");
