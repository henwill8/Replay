// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Priority_Queue.IFixedSizePriorityQueue`2
#include "Priority_Queue/IFixedSizePriorityQueue_2.hpp"
// Including type: System.Collections.Generic.IEnumerator`1
#include "System/Collections/Generic/IEnumerator_1.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Priority_Queue
namespace Priority_Queue {
  // Skipping declaration: <GetEnumerator>d__25 because it is already included!
  // Forward declaring type: GenericPriorityQueueNode`1<TPriority>
  template<typename TPriority>
  class GenericPriorityQueueNode_1;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: IComparable`1<T>
  template<typename T>
  class IComparable_1;
  // Forward declaring type: Comparison`1<T>
  template<typename T>
  class Comparison_1;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: IComparer`1<T>
  template<typename T>
  class IComparer_1;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IEnumerator because it is already included!
}
// Completed forward declares
// Type namespace: Priority_Queue
namespace Priority_Queue {
  // Autogenerated type: Priority_Queue.GenericPriorityQueue`2
  template<typename TItem, typename TPriority>
  class GenericPriorityQueue_2 : public ::Il2CppObject/*, public Priority_Queue::IFixedSizePriorityQueue_2<TItem, TPriority>*/ {
    public:
    // Nested type: Priority_Queue::GenericPriorityQueue_2::$GetEnumerator$d__25<TItem, TPriority>
    class $GetEnumerator$d__25;
    // Autogenerated type: Priority_Queue.GenericPriorityQueue`2/<GetEnumerator>d__25
    class $GetEnumerator$d__25 : public ::Il2CppObject, public ::il2cpp_utils::il2cpp_type_check::NestedType/*, public System::Collections::Generic::IEnumerator_1<TItem>*/ {
      public:
      using declaring_type = GenericPriorityQueue_2<TItem, TPriority>*;
      static constexpr std::string_view NESTED_NAME = "$GetEnumerator$d__25";
      // private System.Int32 <>1__state
      // Offset: 0x0
      int $$1__state;
      // private TItem <>2__current
      // Offset: 0x0
      TItem $$2__current;
      // public Priority_Queue.GenericPriorityQueue`2<TItem,TPriority> <>4__this
      // Offset: 0x0
      Priority_Queue::GenericPriorityQueue_2<TItem, TPriority>* $$4__this;
      // private System.Int32 <i>5__2
      // Offset: 0x0
      int $i$5__2;
      // Creating interface conversion operator: operator System::Collections::Generic::IEnumerator_1<TItem>
      operator System::Collections::Generic::IEnumerator_1<TItem>() noexcept {
        return *reinterpret_cast<System::Collections::Generic::IEnumerator_1<TItem>*>(this);
      }
      // public System.Void .ctor(System.Int32 <>1__state)
      // Offset: 0xFFFFFFFF
      static typename GenericPriorityQueue_2<TItem, TPriority>::$GetEnumerator$d__25* New_ctor(int $$1__state) {
        return THROW_UNLESS((il2cpp_utils::New<typename GenericPriorityQueue_2<TItem, TPriority>::$GetEnumerator$d__25*>($$1__state)));
      }
      // private System.Void System.IDisposable.Dispose()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.IDisposable
      // Base method: System.Void IDisposable::Dispose()
      void System_IDisposable_Dispose() {
        THROW_UNLESS(il2cpp_utils::RunMethod(this, "System.IDisposable.Dispose"));
      }
      // private System.Boolean MoveNext()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Boolean IEnumerator::MoveNext()
      bool MoveNext() {
        return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "MoveNext"));
      }
      // Creating proxy method: System_Collections_IEnumerator_MoveNext
      // Maps to method: MoveNext
      bool System_Collections_IEnumerator_MoveNext() {
        return MoveNext();
      }
      // private TItem System.Collections.Generic.IEnumerator<TItem>.get_Current()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.Generic.IEnumerator`1
      // Base method: T IEnumerator_1::get_Current()
      TItem System_Collections_Generic_IEnumerator_1_get_Current() {
        return THROW_UNLESS((il2cpp_utils::RunMethod<TItem>(this, "System.Collections.Generic.IEnumerator<TItem>.get_Current")));
      }
      // private System.Void System.Collections.IEnumerator.Reset()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Void IEnumerator::Reset()
      void System_Collections_IEnumerator_Reset() {
        THROW_UNLESS(il2cpp_utils::RunMethod(this, "System.Collections.IEnumerator.Reset"));
      }
      // private System.Object System.Collections.IEnumerator.get_Current()
      // Offset: 0xFFFFFFFF
      // Implemented from: System.Collections.IEnumerator
      // Base method: System.Object IEnumerator::get_Current()
      ::Il2CppObject* System_Collections_IEnumerator_get_Current() {
        return THROW_UNLESS(il2cpp_utils::RunMethod<::Il2CppObject*>(this, "System.Collections.IEnumerator.get_Current"));
      }
    }; // Priority_Queue.GenericPriorityQueue`2/<GetEnumerator>d__25
    // private System.Int32 _numNodes
    // Offset: 0x0
    int numNodes;
    // private TItem[] _nodes
    // Offset: 0x0
    ::Array<TItem>* nodes;
    // private System.Int64 _numNodesEverEnqueued
    // Offset: 0x0
    int64_t numNodesEverEnqueued;
    // private readonly System.Comparison`1<TPriority> _comparer
    // Offset: 0x0
    System::Comparison_1<TPriority>* comparer;
    // Creating interface conversion operator: operator Priority_Queue::IFixedSizePriorityQueue_2<TItem, TPriority>
    operator Priority_Queue::IFixedSizePriorityQueue_2<TItem, TPriority>() noexcept {
      return *reinterpret_cast<Priority_Queue::IFixedSizePriorityQueue_2<TItem, TPriority>*>(this);
    }
    // public System.Void .ctor(System.Int32 maxNodes)
    // Offset: 0xFFFFFFFF
    static GenericPriorityQueue_2<TItem, TPriority>* New_ctor(int maxNodes) {
      return THROW_UNLESS((il2cpp_utils::New<GenericPriorityQueue_2<TItem, TPriority>*>(maxNodes)));
    }
    // public System.Void .ctor(System.Int32 maxNodes, System.Collections.Generic.IComparer`1<TPriority> comparer)
    // Offset: 0xFFFFFFFF
    static GenericPriorityQueue_2<TItem, TPriority>* New_ctor(int maxNodes, System::Collections::Generic::IComparer_1<TPriority>* comparer) {
      return THROW_UNLESS((il2cpp_utils::New<GenericPriorityQueue_2<TItem, TPriority>*>(maxNodes, comparer)));
    }
    // public System.Void .ctor(System.Int32 maxNodes, System.Comparison`1<TPriority> comparer)
    // Offset: 0xFFFFFFFF
    static GenericPriorityQueue_2<TItem, TPriority>* New_ctor(int maxNodes, System::Comparison_1<TPriority>* comparer) {
      return THROW_UNLESS((il2cpp_utils::New<GenericPriorityQueue_2<TItem, TPriority>*>(maxNodes, comparer)));
    }
    // private System.Void CascadeUp(TItem node)
    // Offset: 0xFFFFFFFF
    void CascadeUp(TItem node) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "CascadeUp", node));
    }
    // private System.Void CascadeDown(TItem node)
    // Offset: 0xFFFFFFFF
    void CascadeDown(TItem node) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "CascadeDown", node));
    }
    // private System.Boolean HasHigherPriority(TItem higher, TItem lower)
    // Offset: 0xFFFFFFFF
    bool HasHigherPriority(TItem higher, TItem lower) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "HasHigherPriority", higher, lower));
    }
    // private System.Void OnNodeUpdated(TItem node)
    // Offset: 0xFFFFFFFF
    void OnNodeUpdated(TItem node) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "OnNodeUpdated", node));
    }
    // public System.Collections.Generic.IEnumerator`1<TItem> GetEnumerator()
    // Offset: 0xFFFFFFFF
    System::Collections::Generic::IEnumerator_1<TItem>* GetEnumerator() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::Generic::IEnumerator_1<TItem>*>(this, "GetEnumerator"));
    }
    // public System.Boolean IsValidQueue()
    // Offset: 0xFFFFFFFF
    bool IsValidQueue() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "IsValidQueue"));
    }
    // public System.Int32 get_Count()
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IPriorityQueue`2
    // Base method: System.Int32 IPriorityQueue_2::get_Count()
    int get_Count() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_Count"));
    }
    // public System.Int32 get_MaxSize()
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IFixedSizePriorityQueue`2
    // Base method: System.Int32 IFixedSizePriorityQueue_2::get_MaxSize()
    int get_MaxSize() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<int>(this, "get_MaxSize"));
    }
    // public System.Void Clear()
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IPriorityQueue`2
    // Base method: System.Void IPriorityQueue_2::Clear()
    void Clear() {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Clear"));
    }
    // public System.Boolean Contains(TItem node)
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IPriorityQueue`2
    // Base method: System.Boolean IPriorityQueue_2::Contains(TItem node)
    bool Contains(TItem node) {
      return THROW_UNLESS(il2cpp_utils::RunMethod<bool>(this, "Contains", node));
    }
    // public System.Void Enqueue(TItem node, TPriority priority)
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IPriorityQueue`2
    // Base method: System.Void IPriorityQueue_2::Enqueue(TItem node, TPriority priority)
    void Enqueue(TItem node, TPriority priority) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Enqueue", node, priority));
    }
    // public TItem Dequeue()
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IPriorityQueue`2
    // Base method: TItem IPriorityQueue_2::Dequeue()
    TItem Dequeue() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<TItem>(this, "Dequeue"));
    }
    // public System.Void Resize(System.Int32 maxNodes)
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IFixedSizePriorityQueue`2
    // Base method: System.Void IFixedSizePriorityQueue_2::Resize(System.Int32 maxNodes)
    void Resize(int maxNodes) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Resize", maxNodes));
    }
    // public TItem get_First()
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IPriorityQueue`2
    // Base method: TItem IPriorityQueue_2::get_First()
    TItem get_First() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<TItem>(this, "get_First"));
    }
    // public System.Void UpdatePriority(TItem node, TPriority priority)
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IPriorityQueue`2
    // Base method: System.Void IPriorityQueue_2::UpdatePriority(TItem node, TPriority priority)
    void UpdatePriority(TItem node, TPriority priority) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "UpdatePriority", node, priority));
    }
    // public System.Void Remove(TItem node)
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IPriorityQueue`2
    // Base method: System.Void IPriorityQueue_2::Remove(TItem node)
    void Remove(TItem node) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "Remove", node));
    }
    // public System.Void ResetNode(TItem node)
    // Offset: 0xFFFFFFFF
    // Implemented from: Priority_Queue.IFixedSizePriorityQueue`2
    // Base method: System.Void IFixedSizePriorityQueue_2::ResetNode(TItem node)
    void ResetNode(TItem node) {
      THROW_UNLESS(il2cpp_utils::RunMethod(this, "ResetNode", node));
    }
    // private System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Collections.IEnumerable
    // Base method: System.Collections.IEnumerator IEnumerable::GetEnumerator()
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator() {
      return THROW_UNLESS(il2cpp_utils::RunMethod<System::Collections::IEnumerator*>(this, "System.Collections.IEnumerable.GetEnumerator"));
    }
  }; // Priority_Queue.GenericPriorityQueue`2
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(Priority_Queue::GenericPriorityQueue_2, "Priority_Queue", "GenericPriorityQueue`2");
#pragma pack(pop)
