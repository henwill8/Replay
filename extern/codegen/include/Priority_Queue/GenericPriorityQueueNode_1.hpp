// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Priority_Queue
namespace Priority_Queue {
  // WARNING Size may be invalid!
  // Autogenerated type: Priority_Queue.GenericPriorityQueueNode`1
  // [] Offset: FFFFFFFF
  template<typename TPriority>
  class GenericPriorityQueueNode_1 : public ::Il2CppObject {
    public:
    // [CompilerGeneratedAttribute] Offset: 0xD4593C
    // private TPriority <Priority>k__BackingField
    // Size: 0xFFFFFFFF
    // Offset: 0x0
    TPriority Priority;
    // [CompilerGeneratedAttribute] Offset: 0xD4594C
    // private System.Int32 <QueueIndex>k__BackingField
    // Size: 0x4
    // Offset: 0x0
    int QueueIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // [CompilerGeneratedAttribute] Offset: 0xD4595C
    // private System.Int64 <InsertionIndex>k__BackingField
    // Size: 0x8
    // Offset: 0x0
    int64_t InsertionIndex;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // Creating value type constructor for type: GenericPriorityQueueNode_1
    GenericPriorityQueueNode_1(TPriority Priority_ = {}, int QueueIndex_ = {}, int64_t InsertionIndex_ = {}) noexcept : Priority{Priority_}, QueueIndex{QueueIndex_}, InsertionIndex{InsertionIndex_} {}
    // public TPriority get_Priority()
    // Offset: 0xFFFFFFFF
    TPriority get_Priority() {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::GenericPriorityQueueNode_1::get_Priority");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_Priority", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<TPriority, false>(this, ___internal__method);
    }
    // protected internal System.Void set_Priority(TPriority value)
    // Offset: 0xFFFFFFFF
    void set_Priority(TPriority value) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::GenericPriorityQueueNode_1::set_Priority");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_Priority", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
    }
    // public System.Int32 get_QueueIndex()
    // Offset: 0xFFFFFFFF
    int get_QueueIndex() {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::GenericPriorityQueueNode_1::get_QueueIndex");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_QueueIndex", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<int, false>(this, ___internal__method);
    }
    // System.Void set_QueueIndex(System.Int32 value)
    // Offset: 0xFFFFFFFF
    void set_QueueIndex(int value) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::GenericPriorityQueueNode_1::set_QueueIndex");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_QueueIndex", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
    }
    // public System.Int64 get_InsertionIndex()
    // Offset: 0xFFFFFFFF
    int64_t get_InsertionIndex() {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::GenericPriorityQueueNode_1::get_InsertionIndex");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "get_InsertionIndex", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes()));
      return ::il2cpp_utils::RunMethodThrow<int64_t, false>(this, ___internal__method);
    }
    // System.Void set_InsertionIndex(System.Int64 value)
    // Offset: 0xFFFFFFFF
    void set_InsertionIndex(int64_t value) {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::GenericPriorityQueueNode_1::set_InsertionIndex");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "set_InsertionIndex", std::vector<Il2CppClass*>{}, ::il2cpp_utils::ExtractTypes(value)));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___internal__method, value);
    }
    // public System.Void .ctor()
    // Offset: 0xFFFFFFFF
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static GenericPriorityQueueNode_1<TPriority>* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Priority_Queue::GenericPriorityQueueNode_1::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<GenericPriorityQueueNode_1<TPriority>*, creationType>()));
    }
  }; // Priority_Queue.GenericPriorityQueueNode`1
  // Could not write size check! Type: Priority_Queue.GenericPriorityQueueNode`1 is generic, or has no fields that are valid for size checks!
}
DEFINE_IL2CPP_ARG_TYPE_GENERIC_CLASS(Priority_Queue::GenericPriorityQueueNode_1, "Priority_Queue", "GenericPriorityQueueNode`1");
