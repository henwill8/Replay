// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Oculus.Platform.Message
#include "Oculus/Platform/Message.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Type namespace: Oculus.Platform
namespace Oculus::Platform {
  // Size: 0x20
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Platform.Request
  // [] Offset: FFFFFFFF
  class Request : public ::Il2CppObject {
    public:
    // private Oculus.Platform.Message/Callback callback_
    // Size: 0x8
    // Offset: 0x10
    Oculus::Platform::Message::Callback* callback;
    // Field size check
    static_assert(sizeof(Oculus::Platform::Message::Callback*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xD20E08
    // private System.UInt64 <RequestID>k__BackingField
    // Size: 0x8
    // Offset: 0x18
    uint64_t RequestID;
    // Field size check
    static_assert(sizeof(uint64_t) == 0x8);
    // Creating value type constructor for type: Request
    Request(Oculus::Platform::Message::Callback* callback_ = {}, uint64_t RequestID_ = {}) noexcept : callback{callback_}, RequestID{RequestID_} {}
    // public System.Void .ctor(System.UInt64 requestID)
    // Offset: 0x13E1414
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Request* New_ctor(uint64_t requestID) {
      static auto ___internal__logger = ::Logger::get().WithContext("Oculus::Platform::Request::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Request*, creationType>(requestID)));
    }
    // public System.UInt64 get_RequestID()
    // Offset: 0x13F4E94
    uint64_t get_RequestID();
    // public System.Void set_RequestID(System.UInt64 value)
    // Offset: 0x13F4E9C
    void set_RequestID(uint64_t value);
    // public Oculus.Platform.Request OnComplete(Oculus.Platform.Message/Callback callback)
    // Offset: 0x13F4EA4
    Oculus::Platform::Request* OnComplete(Oculus::Platform::Message::Callback* callback);
    // public System.Void HandleMessage(Oculus.Platform.Message msg)
    // Offset: 0x13F4F2C
    void HandleMessage(Oculus::Platform::Message* msg);
    // static public System.Void RunCallbacks(System.UInt32 limit)
    // Offset: 0x13DFB14
    static void RunCallbacks(uint limit);
  }; // Oculus.Platform.Request
  #pragma pack(pop)
  static check_size<sizeof(Request), 24 + sizeof(uint64_t)> __Oculus_Platform_RequestSizeCheck;
  static_assert(sizeof(Request) == 0x20);
}
DEFINE_IL2CPP_ARG_TYPE(Oculus::Platform::Request*, "Oculus.Platform", "Request");
