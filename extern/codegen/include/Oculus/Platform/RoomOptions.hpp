// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Platform
namespace Oculus::Platform {
  // Forward declaring type: UserOrdering
  struct UserOrdering;
  // Forward declaring type: TimeWindow
  struct TimeWindow;
}
// Completed forward declares
// Type namespace: Oculus.Platform
namespace Oculus::Platform {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Platform.RoomOptions
  // [] Offset: FFFFFFFF
  class RoomOptions : public ::Il2CppObject {
    public:
    // private System.IntPtr Handle
    // Size: 0x8
    // Offset: 0x10
    System::IntPtr Handle;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // Creating value type constructor for type: RoomOptions
    RoomOptions(System::IntPtr Handle_ = {}) noexcept : Handle{Handle_} {}
    // Creating conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept {
      return Handle;
    }
    // public System.Void SetDataStore(System.String key, System.String value)
    // Offset: 0x13F5C4C
    void SetDataStore(::Il2CppString* key, ::Il2CppString* value);
    // public System.Void ClearDataStore()
    // Offset: 0x13F5CD0
    void ClearDataStore();
    // public System.Void SetExcludeRecentlyMet(System.Boolean value)
    // Offset: 0x13F5D3C
    void SetExcludeRecentlyMet(bool value);
    // public System.Void SetMaxUserResults(System.UInt32 value)
    // Offset: 0x13F5DB8
    void SetMaxUserResults(uint value);
    // public System.Void SetOrdering(Oculus.Platform.UserOrdering value)
    // Offset: 0x13F5E34
    void SetOrdering(Oculus::Platform::UserOrdering value);
    // public System.Void SetRecentlyMetTimeWindow(Oculus.Platform.TimeWindow value)
    // Offset: 0x13F5EB0
    void SetRecentlyMetTimeWindow(Oculus::Platform::TimeWindow value);
    // public System.Void SetRoomId(System.UInt64 value)
    // Offset: 0x13F5F2C
    void SetRoomId(uint64_t value);
    // public System.Void SetTurnOffUpdates(System.Boolean value)
    // Offset: 0x13F5FA8
    void SetTurnOffUpdates(bool value);
    // static public System.IntPtr op_Explicit(Oculus.Platform.RoomOptions options)
    // Offset: 0x13F6024
    // ABORTED: conflicts with another method.  explicit operator System::IntPtr();
    // public System.Void .ctor()
    // Offset: 0x13F5BD4
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RoomOptions* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Oculus::Platform::RoomOptions::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RoomOptions*, creationType>()));
    }
    // protected override System.Void Finalize()
    // Offset: 0x13F6074
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // Oculus.Platform.RoomOptions
  #pragma pack(pop)
  static check_size<sizeof(RoomOptions), 16 + sizeof(System::IntPtr)> __Oculus_Platform_RoomOptionsSizeCheck;
  static_assert(sizeof(RoomOptions) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(Oculus::Platform::RoomOptions*, "Oculus.Platform", "RoomOptions");
