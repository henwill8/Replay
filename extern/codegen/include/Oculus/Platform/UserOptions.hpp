// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.IntPtr
#include "System/IntPtr.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Oculus::Platform
namespace Oculus::Platform {
  // Forward declaring type: ServiceProvider
  struct ServiceProvider;
  // Forward declaring type: TimeWindow
  struct TimeWindow;
}
// Completed forward declares
// Type namespace: Oculus.Platform
namespace Oculus::Platform {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Oculus.Platform.UserOptions
  // [] Offset: FFFFFFFF
  class UserOptions : public ::Il2CppObject {
    public:
    // private System.IntPtr Handle
    // Size: 0x8
    // Offset: 0x10
    System::IntPtr Handle;
    // Field size check
    static_assert(sizeof(System::IntPtr) == 0x8);
    // Creating value type constructor for type: UserOptions
    UserOptions(System::IntPtr Handle_ = {}) noexcept : Handle{Handle_} {}
    // Creating conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept {
      return Handle;
    }
    // public System.Void SetMaxUsers(System.UInt32 value)
    // Offset: 0x13F7FC8
    void SetMaxUsers(uint value);
    // public System.Void AddServiceProvider(Oculus.Platform.ServiceProvider value)
    // Offset: 0x13F4B3C
    void AddServiceProvider(Oculus::Platform::ServiceProvider value);
    // public System.Void ClearServiceProviders()
    // Offset: 0x13F8044
    void ClearServiceProviders();
    // public System.Void SetTimeWindow(Oculus.Platform.TimeWindow value)
    // Offset: 0x13F80B0
    void SetTimeWindow(Oculus::Platform::TimeWindow value);
    // static public System.IntPtr op_Explicit(Oculus.Platform.UserOptions options)
    // Offset: 0x13F4BB8
    // ABORTED: conflicts with another method.  explicit operator System::IntPtr();
    // public System.Void .ctor()
    // Offset: 0x13F4AC4
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UserOptions* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Oculus::Platform::UserOptions::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UserOptions*, creationType>()));
    }
    // protected override System.Void Finalize()
    // Offset: 0x13F812C
    // Implemented from: System.Object
    // Base method: System.Void Object::Finalize()
    void Finalize();
  }; // Oculus.Platform.UserOptions
  #pragma pack(pop)
  static check_size<sizeof(UserOptions), 16 + sizeof(System::IntPtr)> __Oculus_Platform_UserOptionsSizeCheck;
  static_assert(sizeof(UserOptions) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(Oculus::Platform::UserOptions*, "Oculus.Platform", "UserOptions");
