// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Math::EC::Multiplier
namespace Org::BouncyCastle::Math::EC::Multiplier {
  // Forward declaring type: WNafPreCompInfo
  class WNafPreCompInfo;
}
// Forward declaring namespace: Org::BouncyCastle::Math::EC
namespace Org::BouncyCastle::Math::EC {
  // Forward declaring type: ECPoint
  class ECPoint;
  // Forward declaring type: ECPointMap
  class ECPointMap;
}
// Forward declaring namespace: Org::BouncyCastle::Math
namespace Org::BouncyCastle::Math {
  // Forward declaring type: BigInteger
  class BigInteger;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Math.EC.Multiplier
namespace Org::BouncyCastle::Math::EC::Multiplier {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities
  // [] Offset: FFFFFFFF
  class WNafUtilities : public ::Il2CppObject {
    public:
    // Nested type: Org::BouncyCastle::Math::EC::Multiplier::WNafUtilities::ConfigureBasepointCallback
    class ConfigureBasepointCallback;
    // Nested type: Org::BouncyCastle::Math::EC::Multiplier::WNafUtilities::PrecomputeCallback
    class PrecomputeCallback;
    // Nested type: Org::BouncyCastle::Math::EC::Multiplier::WNafUtilities::PrecomputeWithPointMapCallback
    class PrecomputeWithPointMapCallback;
    // Creating value type constructor for type: WNafUtilities
    WNafUtilities() noexcept {}
    // Get static field: static public readonly System.String PRECOMP_NAME
    static ::Il2CppString* _get_PRECOMP_NAME();
    // Set static field: static public readonly System.String PRECOMP_NAME
    static void _set_PRECOMP_NAME(::Il2CppString* value);
    // Get static field: static private readonly System.Int32[] DEFAULT_WINDOW_SIZE_CUTOFFS
    static ::Array<int>* _get_DEFAULT_WINDOW_SIZE_CUTOFFS();
    // Set static field: static private readonly System.Int32[] DEFAULT_WINDOW_SIZE_CUTOFFS
    static void _set_DEFAULT_WINDOW_SIZE_CUTOFFS(::Array<int>* value);
    // Get static field: static private readonly System.Int32 MAX_WIDTH
    static int _get_MAX_WIDTH();
    // Set static field: static private readonly System.Int32 MAX_WIDTH
    static void _set_MAX_WIDTH(int value);
    // Get static field: static private readonly Org.BouncyCastle.Math.EC.ECPoint[] EMPTY_POINTS
    static ::Array<Org::BouncyCastle::Math::EC::ECPoint*>* _get_EMPTY_POINTS();
    // Set static field: static private readonly Org.BouncyCastle.Math.EC.ECPoint[] EMPTY_POINTS
    static void _set_EMPTY_POINTS(::Array<Org::BouncyCastle::Math::EC::ECPoint*>* value);
    // static public System.Void ConfigureBasepoint(Org.BouncyCastle.Math.EC.ECPoint p)
    // Offset: 0x1BBCB3C
    static void ConfigureBasepoint(Org::BouncyCastle::Math::EC::ECPoint* p);
    // static public System.Int32[] GenerateCompactNaf(Org.BouncyCastle.Math.BigInteger k)
    // Offset: 0x1BBCD0C
    static ::Array<int>* GenerateCompactNaf(Org::BouncyCastle::Math::BigInteger* k);
    // static public System.Int32[] GenerateCompactWindowNaf(System.Int32 width, Org.BouncyCastle.Math.BigInteger k)
    // Offset: 0x1BBC6C4
    static ::Array<int>* GenerateCompactWindowNaf(int width, Org::BouncyCastle::Math::BigInteger* k);
    // static public System.Byte[] GenerateNaf(Org.BouncyCastle.Math.BigInteger k)
    // Offset: 0x1BBD000
    static ::Array<uint8_t>* GenerateNaf(Org::BouncyCastle::Math::BigInteger* k);
    // static public System.Byte[] GenerateWindowNaf(System.Int32 width, Org.BouncyCastle.Math.BigInteger k)
    // Offset: 0x1BBD19C
    static ::Array<uint8_t>* GenerateWindowNaf(int width, Org::BouncyCastle::Math::BigInteger* k);
    // static public System.Int32 GetNafWeight(Org.BouncyCastle.Math.BigInteger k)
    // Offset: 0x1BBD500
    static int GetNafWeight(Org::BouncyCastle::Math::BigInteger* k);
    // static public System.Int32 GetWindowSize(System.Int32 bits)
    // Offset: 0x1BBC514
    static int GetWindowSize(int bits);
    // static public System.Int32 GetWindowSize(System.Int32 bits, System.Int32 maxWidth)
    // Offset: 0x1BBD650
    static int GetWindowSize(int bits, int maxWidth);
    // static public System.Int32 GetWindowSize(System.Int32 bits, System.Int32[] windowSizeCutoffs, System.Int32 maxWidth)
    // Offset: 0x1BBD574
    static int GetWindowSize(int bits, ::Array<int>* windowSizeCutoffs, int maxWidth);
    // static public Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo Precompute(Org.BouncyCastle.Math.EC.ECPoint p, System.Int32 minWidth, System.Boolean includeNegated)
    // Offset: 0x1BBC588
    static Org::BouncyCastle::Math::EC::Multiplier::WNafPreCompInfo* Precompute(Org::BouncyCastle::Math::EC::ECPoint* p, int minWidth, bool includeNegated);
    // static public Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo PrecomputeWithPointMap(Org.BouncyCastle.Math.EC.ECPoint p, Org.BouncyCastle.Math.EC.ECPointMap pointMap, Org.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo fromWNaf, System.Boolean includeNegated)
    // Offset: 0x1BBD724
    static Org::BouncyCastle::Math::EC::Multiplier::WNafPreCompInfo* PrecomputeWithPointMap(Org::BouncyCastle::Math::EC::ECPoint* p, Org::BouncyCastle::Math::EC::ECPointMap* pointMap, Org::BouncyCastle::Math::EC::Multiplier::WNafPreCompInfo* fromWNaf, bool includeNegated);
    // static private System.Byte[] Trim(System.Byte[] a, System.Int32 length)
    // Offset: 0x1BBD474
    static ::Array<uint8_t>* Trim(::Array<uint8_t>* a, int length);
    // static private System.Int32[] Trim(System.Int32[] a, System.Int32 length)
    // Offset: 0x1BBCF74
    static ::Array<int>* Trim(::Array<int>* a, int length);
    // static private Org.BouncyCastle.Math.EC.ECPoint[] ResizeTable(Org.BouncyCastle.Math.EC.ECPoint[] a, System.Int32 length)
    // Offset: 0x1BBD8D8
    static ::Array<Org::BouncyCastle::Math::EC::ECPoint*>* ResizeTable(::Array<Org::BouncyCastle::Math::EC::ECPoint*>* a, int length);
    // static private System.Void .cctor()
    // Offset: 0x1BBD964
    static void _cctor();
  }; // Org.BouncyCastle.Math.EC.Multiplier.WNafUtilities
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Math::EC::Multiplier::WNafUtilities*, "Org.BouncyCastle.Math.EC.Multiplier", "WNafUtilities");
