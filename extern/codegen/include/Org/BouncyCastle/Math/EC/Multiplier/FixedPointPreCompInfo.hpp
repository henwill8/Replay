// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Math.EC.Multiplier.PreCompInfo
#include "Org/BouncyCastle/Math/EC/Multiplier/PreCompInfo.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Math::EC
namespace Org::BouncyCastle::Math::EC {
  // Forward declaring type: ECPoint
  class ECPoint;
  // Forward declaring type: ECLookupTable
  class ECLookupTable;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Math.EC.Multiplier
namespace Org::BouncyCastle::Math::EC::Multiplier {
  // Size: 0x24
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Math.EC.Multiplier.FixedPointPreCompInfo
  // [] Offset: FFFFFFFF
  class FixedPointPreCompInfo : public ::Il2CppObject/*, public Org::BouncyCastle::Math::EC::Multiplier::PreCompInfo*/ {
    public:
    // protected Org.BouncyCastle.Math.EC.ECPoint m_offset
    // Size: 0x8
    // Offset: 0x10
    Org::BouncyCastle::Math::EC::ECPoint* m_offset;
    // Field size check
    static_assert(sizeof(Org::BouncyCastle::Math::EC::ECPoint*) == 0x8);
    // protected Org.BouncyCastle.Math.EC.ECLookupTable m_lookupTable
    // Size: 0x8
    // Offset: 0x18
    Org::BouncyCastle::Math::EC::ECLookupTable* m_lookupTable;
    // Field size check
    static_assert(sizeof(Org::BouncyCastle::Math::EC::ECLookupTable*) == 0x8);
    // protected System.Int32 m_width
    // Size: 0x4
    // Offset: 0x20
    int m_width;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: FixedPointPreCompInfo
    FixedPointPreCompInfo(Org::BouncyCastle::Math::EC::ECPoint* m_offset_ = {}, Org::BouncyCastle::Math::EC::ECLookupTable* m_lookupTable_ = {}, int m_width_ = {}) noexcept : m_offset{m_offset_}, m_lookupTable{m_lookupTable_}, m_width{m_width_} {}
    // Creating interface conversion operator: operator Org::BouncyCastle::Math::EC::Multiplier::PreCompInfo
    operator Org::BouncyCastle::Math::EC::Multiplier::PreCompInfo() noexcept {
      return *reinterpret_cast<Org::BouncyCastle::Math::EC::Multiplier::PreCompInfo*>(this);
    }
    // public Org.BouncyCastle.Math.EC.ECLookupTable get_LookupTable()
    // Offset: 0x1BBB760
    Org::BouncyCastle::Math::EC::ECLookupTable* get_LookupTable();
    // public System.Void set_LookupTable(Org.BouncyCastle.Math.EC.ECLookupTable value)
    // Offset: 0x1BBB768
    void set_LookupTable(Org::BouncyCastle::Math::EC::ECLookupTable* value);
    // public Org.BouncyCastle.Math.EC.ECPoint get_Offset()
    // Offset: 0x1BBB770
    Org::BouncyCastle::Math::EC::ECPoint* get_Offset();
    // public System.Void set_Offset(Org.BouncyCastle.Math.EC.ECPoint value)
    // Offset: 0x1BBB778
    void set_Offset(Org::BouncyCastle::Math::EC::ECPoint* value);
    // public System.Int32 get_Width()
    // Offset: 0x1BBB780
    int get_Width();
    // public System.Void set_Width(System.Int32 value)
    // Offset: 0x1BBB788
    void set_Width(int value);
    // public System.Void .ctor()
    // Offset: 0x1BBB790
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static FixedPointPreCompInfo* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Math::EC::Multiplier::FixedPointPreCompInfo::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<FixedPointPreCompInfo*, creationType>()));
    }
  }; // Org.BouncyCastle.Math.EC.Multiplier.FixedPointPreCompInfo
  #pragma pack(pop)
  static check_size<sizeof(FixedPointPreCompInfo), 32 + sizeof(int)> __Org_BouncyCastle_Math_EC_Multiplier_FixedPointPreCompInfoSizeCheck;
  static_assert(sizeof(FixedPointPreCompInfo) == 0x24);
}
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Math::EC::Multiplier::FixedPointPreCompInfo*, "Org.BouncyCastle.Math.EC.Multiplier", "FixedPointPreCompInfo");
