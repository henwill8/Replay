// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Math::EC
namespace Org::BouncyCastle::Math::EC {
  // Forward declaring type: ECCurve
  class ECCurve;
  // Forward declaring type: ECFieldElement
  class ECFieldElement;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IDictionary
  class IDictionary;
}
// Forward declaring namespace: Org::BouncyCastle::Security
namespace Org::BouncyCastle::Security {
  // Forward declaring type: SecureRandom
  class SecureRandom;
}
// Forward declaring namespace: Org::BouncyCastle::Math
namespace Org::BouncyCastle::Math {
  // Forward declaring type: BigInteger
  class BigInteger;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Math.EC
namespace Org::BouncyCastle::Math::EC {
  // Autogenerated type: Org.BouncyCastle.Math.EC.ECPoint
  class ECPoint : public ::Il2CppObject {
    public:
    // Nested type: Org::BouncyCastle::Math::EC::ECPoint::ValidityCallback
    class ValidityCallback;
    // protected internal readonly Org.BouncyCastle.Math.EC.ECCurve m_curve
    // Offset: 0x10
    Org::BouncyCastle::Math::EC::ECCurve* m_curve;
    // protected internal readonly Org.BouncyCastle.Math.EC.ECFieldElement m_x
    // Offset: 0x18
    Org::BouncyCastle::Math::EC::ECFieldElement* m_x;
    // protected internal readonly Org.BouncyCastle.Math.EC.ECFieldElement m_y
    // Offset: 0x20
    Org::BouncyCastle::Math::EC::ECFieldElement* m_y;
    // protected internal readonly Org.BouncyCastle.Math.EC.ECFieldElement[] m_zs
    // Offset: 0x28
    ::Array<Org::BouncyCastle::Math::EC::ECFieldElement*>* m_zs;
    // protected internal readonly System.Boolean m_withCompression
    // Offset: 0x30
    bool m_withCompression;
    // protected internal System.Collections.IDictionary m_preCompTable
    // Offset: 0x38
    System::Collections::IDictionary* m_preCompTable;
    // Get static field: static private readonly Org.BouncyCastle.Security.SecureRandom Random
    static Org::BouncyCastle::Security::SecureRandom* _get_Random();
    // Set static field: static private readonly Org.BouncyCastle.Security.SecureRandom Random
    static void _set_Random(Org::BouncyCastle::Security::SecureRandom* value);
    // Get static field: static protected Org.BouncyCastle.Math.EC.ECFieldElement[] EMPTY_ZS
    static ::Array<Org::BouncyCastle::Math::EC::ECFieldElement*>* _get_EMPTY_ZS();
    // Set static field: static protected Org.BouncyCastle.Math.EC.ECFieldElement[] EMPTY_ZS
    static void _set_EMPTY_ZS(::Array<Org::BouncyCastle::Math::EC::ECFieldElement*>* value);
    // static protected Org.BouncyCastle.Math.EC.ECFieldElement[] GetInitialZCoords(Org.BouncyCastle.Math.EC.ECCurve curve)
    // Offset: 0x193B9B8
    static ::Array<Org::BouncyCastle::Math::EC::ECFieldElement*>* GetInitialZCoords(Org::BouncyCastle::Math::EC::ECCurve* curve);
    // protected System.Void .ctor(Org.BouncyCastle.Math.EC.ECCurve curve, Org.BouncyCastle.Math.EC.ECFieldElement x, Org.BouncyCastle.Math.EC.ECFieldElement y, System.Boolean withCompression)
    // Offset: 0x193BCA4
    static ECPoint* New_ctor(Org::BouncyCastle::Math::EC::ECCurve* curve, Org::BouncyCastle::Math::EC::ECFieldElement* x, Org::BouncyCastle::Math::EC::ECFieldElement* y, bool withCompression);
    // System.Void .ctor(Org.BouncyCastle.Math.EC.ECCurve curve, Org.BouncyCastle.Math.EC.ECFieldElement x, Org.BouncyCastle.Math.EC.ECFieldElement y, Org.BouncyCastle.Math.EC.ECFieldElement[] zs, System.Boolean withCompression)
    // Offset: 0x193BD44
    static ECPoint* New_ctor(Org::BouncyCastle::Math::EC::ECCurve* curve, Org::BouncyCastle::Math::EC::ECFieldElement* x, Org::BouncyCastle::Math::EC::ECFieldElement* y, ::Array<Org::BouncyCastle::Math::EC::ECFieldElement*>* zs, bool withCompression);
    // protected System.Boolean SatisfiesCurveEquation()
    // Offset: 0xFFFFFFFF
    bool SatisfiesCurveEquation();
    // protected System.Boolean SatisfiesOrder()
    // Offset: 0x193BDE4
    bool SatisfiesOrder();
    // public Org.BouncyCastle.Math.EC.ECCurve get_Curve()
    // Offset: 0x193BEF0
    Org::BouncyCastle::Math::EC::ECCurve* get_Curve();
    // protected System.Int32 get_CurveCoordinateSystem()
    // Offset: 0x193BEF8
    int get_CurveCoordinateSystem();
    // public Org.BouncyCastle.Math.EC.ECFieldElement get_AffineXCoord()
    // Offset: 0x193BF14
    Org::BouncyCastle::Math::EC::ECFieldElement* get_AffineXCoord();
    // public Org.BouncyCastle.Math.EC.ECFieldElement get_AffineYCoord()
    // Offset: 0x193BF4C
    Org::BouncyCastle::Math::EC::ECFieldElement* get_AffineYCoord();
    // public Org.BouncyCastle.Math.EC.ECFieldElement get_XCoord()
    // Offset: 0x193BF84
    Org::BouncyCastle::Math::EC::ECFieldElement* get_XCoord();
    // public Org.BouncyCastle.Math.EC.ECFieldElement get_YCoord()
    // Offset: 0x193BF8C
    Org::BouncyCastle::Math::EC::ECFieldElement* get_YCoord();
    // public Org.BouncyCastle.Math.EC.ECFieldElement GetZCoord(System.Int32 index)
    // Offset: 0x193BF94
    Org::BouncyCastle::Math::EC::ECFieldElement* GetZCoord(int index);
    // protected internal Org.BouncyCastle.Math.EC.ECFieldElement get_RawXCoord()
    // Offset: 0x193BFE0
    Org::BouncyCastle::Math::EC::ECFieldElement* get_RawXCoord();
    // protected internal Org.BouncyCastle.Math.EC.ECFieldElement get_RawYCoord()
    // Offset: 0x193BFE8
    Org::BouncyCastle::Math::EC::ECFieldElement* get_RawYCoord();
    // protected internal Org.BouncyCastle.Math.EC.ECFieldElement[] get_RawZCoords()
    // Offset: 0x193BFF0
    ::Array<Org::BouncyCastle::Math::EC::ECFieldElement*>* get_RawZCoords();
    // protected System.Void CheckNormalized()
    // Offset: 0x193BFF8
    void CheckNormalized();
    // public System.Boolean IsNormalized()
    // Offset: 0x193C08C
    bool IsNormalized();
    // public Org.BouncyCastle.Math.EC.ECPoint Normalize()
    // Offset: 0x193C114
    Org::BouncyCastle::Math::EC::ECPoint* Normalize();
    // Org.BouncyCastle.Math.EC.ECPoint Normalize(Org.BouncyCastle.Math.EC.ECFieldElement zInv)
    // Offset: 0x193C2B8
    Org::BouncyCastle::Math::EC::ECPoint* Normalize(Org::BouncyCastle::Math::EC::ECFieldElement* zInv);
    // protected Org.BouncyCastle.Math.EC.ECPoint CreateScaledPoint(Org.BouncyCastle.Math.EC.ECFieldElement sx, Org.BouncyCastle.Math.EC.ECFieldElement sy)
    // Offset: 0x193C3C8
    Org::BouncyCastle::Math::EC::ECPoint* CreateScaledPoint(Org::BouncyCastle::Math::EC::ECFieldElement* sx, Org::BouncyCastle::Math::EC::ECFieldElement* sy);
    // public System.Boolean get_IsInfinity()
    // Offset: 0x1935154
    bool get_IsInfinity();
    // public System.Boolean get_IsCompressed()
    // Offset: 0x193C464
    bool get_IsCompressed();
    // public System.Boolean IsValid()
    // Offset: 0x1939A54
    bool IsValid();
    // System.Boolean IsValidPartial()
    // Offset: 0x19388D0
    bool IsValidPartial();
    // System.Boolean ImplIsValid(System.Boolean decompressed, System.Boolean checkOrder)
    // Offset: 0x193AF34
    bool ImplIsValid(bool decompressed, bool checkOrder);
    // public Org.BouncyCastle.Math.EC.ECPoint ScaleX(Org.BouncyCastle.Math.EC.ECFieldElement scale)
    // Offset: 0x193C4C4
    Org::BouncyCastle::Math::EC::ECPoint* ScaleX(Org::BouncyCastle::Math::EC::ECFieldElement* scale);
    // public Org.BouncyCastle.Math.EC.ECPoint ScaleY(Org.BouncyCastle.Math.EC.ECFieldElement scale)
    // Offset: 0x193C564
    Org::BouncyCastle::Math::EC::ECPoint* ScaleY(Org::BouncyCastle::Math::EC::ECFieldElement* scale);
    // public System.Boolean Equals(Org.BouncyCastle.Math.EC.ECPoint other)
    // Offset: 0x193C6A8
    bool Equals(Org::BouncyCastle::Math::EC::ECPoint* other);
    // public System.Byte[] GetEncoded(System.Boolean compressed)
    // Offset: 0xFFFFFFFF
    ::Array<uint8_t>* GetEncoded(bool compressed);
    // protected internal System.Boolean get_CompressionYTilde()
    // Offset: 0xFFFFFFFF
    bool get_CompressionYTilde();
    // public Org.BouncyCastle.Math.EC.ECPoint Add(Org.BouncyCastle.Math.EC.ECPoint b)
    // Offset: 0xFFFFFFFF
    Org::BouncyCastle::Math::EC::ECPoint* Add(Org::BouncyCastle::Math::EC::ECPoint* b);
    // public Org.BouncyCastle.Math.EC.ECPoint Subtract(Org.BouncyCastle.Math.EC.ECPoint b)
    // Offset: 0xFFFFFFFF
    Org::BouncyCastle::Math::EC::ECPoint* Subtract(Org::BouncyCastle::Math::EC::ECPoint* b);
    // public Org.BouncyCastle.Math.EC.ECPoint Negate()
    // Offset: 0xFFFFFFFF
    Org::BouncyCastle::Math::EC::ECPoint* Negate();
    // public Org.BouncyCastle.Math.EC.ECPoint TimesPow2(System.Int32 e)
    // Offset: 0x193CBC0
    Org::BouncyCastle::Math::EC::ECPoint* TimesPow2(int e);
    // public Org.BouncyCastle.Math.EC.ECPoint Twice()
    // Offset: 0xFFFFFFFF
    Org::BouncyCastle::Math::EC::ECPoint* Twice();
    // public Org.BouncyCastle.Math.EC.ECPoint Multiply(Org.BouncyCastle.Math.BigInteger b)
    // Offset: 0xFFFFFFFF
    Org::BouncyCastle::Math::EC::ECPoint* Multiply(Org::BouncyCastle::Math::BigInteger* b);
    // public Org.BouncyCastle.Math.EC.ECPoint TwicePlus(Org.BouncyCastle.Math.EC.ECPoint b)
    // Offset: 0x193CC8C
    Org::BouncyCastle::Math::EC::ECPoint* TwicePlus(Org::BouncyCastle::Math::EC::ECPoint* b);
    // public Org.BouncyCastle.Math.EC.ECPoint ThreeTimes()
    // Offset: 0x193CCD4
    Org::BouncyCastle::Math::EC::ECPoint* ThreeTimes();
    // static private System.Void .cctor()
    // Offset: 0x193CCE8
    static void _cctor();
    // public override System.Boolean Equals(System.Object obj)
    // Offset: 0x193C60C
    // Implemented from: System.Object
    // Base method: System.Boolean Object::Equals(System.Object obj)
    bool Equals(::Il2CppObject* obj);
    // public override System.Int32 GetHashCode()
    // Offset: 0x193C998
    // Implemented from: System.Object
    // Base method: System.Int32 Object::GetHashCode()
    int GetHashCode();
    // public override System.String ToString()
    // Offset: 0x193CA68
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
  }; // Org.BouncyCastle.Math.EC.ECPoint
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Math::EC::ECPoint*, "Org.BouncyCastle.Math.EC", "ECPoint");
#pragma pack(pop)
