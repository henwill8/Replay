// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Asn1.Asn1Encodable
#include "Org/BouncyCastle/Asn1/Asn1Encodable.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Asn1::X509
namespace Org::BouncyCastle::Asn1::X509 {
  // Forward declaring type: DistributionPointName
  class DistributionPointName;
  // Forward declaring type: ReasonFlags
  class ReasonFlags;
}
// Forward declaring namespace: Org::BouncyCastle::Asn1
namespace Org::BouncyCastle::Asn1 {
  // Forward declaring type: Asn1Sequence
  class Asn1Sequence;
  // Forward declaring type: Asn1Object
  class Asn1Object;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Asn1.X509
namespace Org::BouncyCastle::Asn1::X509 {
  // Size: 0x38
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Asn1.X509.IssuingDistributionPoint
  // [] Offset: FFFFFFFF
  class IssuingDistributionPoint : public Org::BouncyCastle::Asn1::Asn1Encodable {
    public:
    // private readonly Org.BouncyCastle.Asn1.X509.DistributionPointName _distributionPoint
    // Size: 0x8
    // Offset: 0x10
    Org::BouncyCastle::Asn1::X509::DistributionPointName* distributionPoint;
    // Field size check
    static_assert(sizeof(Org::BouncyCastle::Asn1::X509::DistributionPointName*) == 0x8);
    // private readonly System.Boolean _onlyContainsUserCerts
    // Size: 0x1
    // Offset: 0x18
    bool onlyContainsUserCerts;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly System.Boolean _onlyContainsCACerts
    // Size: 0x1
    // Offset: 0x19
    bool onlyContainsCACerts;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: onlyContainsCACerts and: onlySomeReasons
    char __padding2[0x6] = {};
    // private readonly Org.BouncyCastle.Asn1.X509.ReasonFlags _onlySomeReasons
    // Size: 0x8
    // Offset: 0x20
    Org::BouncyCastle::Asn1::X509::ReasonFlags* onlySomeReasons;
    // Field size check
    static_assert(sizeof(Org::BouncyCastle::Asn1::X509::ReasonFlags*) == 0x8);
    // private readonly System.Boolean _indirectCRL
    // Size: 0x1
    // Offset: 0x28
    bool indirectCRL;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly System.Boolean _onlyContainsAttributeCerts
    // Size: 0x1
    // Offset: 0x29
    bool onlyContainsAttributeCerts;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: onlyContainsAttributeCerts and: seq
    char __padding5[0x6] = {};
    // private readonly Org.BouncyCastle.Asn1.Asn1Sequence seq
    // Size: 0x8
    // Offset: 0x30
    Org::BouncyCastle::Asn1::Asn1Sequence* seq;
    // Field size check
    static_assert(sizeof(Org::BouncyCastle::Asn1::Asn1Sequence*) == 0x8);
    // Creating value type constructor for type: IssuingDistributionPoint
    IssuingDistributionPoint(Org::BouncyCastle::Asn1::X509::DistributionPointName* distributionPoint_ = {}, bool onlyContainsUserCerts_ = {}, bool onlyContainsCACerts_ = {}, Org::BouncyCastle::Asn1::X509::ReasonFlags* onlySomeReasons_ = {}, bool indirectCRL_ = {}, bool onlyContainsAttributeCerts_ = {}, Org::BouncyCastle::Asn1::Asn1Sequence* seq_ = {}) noexcept : distributionPoint{distributionPoint_}, onlyContainsUserCerts{onlyContainsUserCerts_}, onlyContainsCACerts{onlyContainsCACerts_}, onlySomeReasons{onlySomeReasons_}, indirectCRL{indirectCRL_}, onlyContainsAttributeCerts{onlyContainsAttributeCerts_}, seq{seq_} {}
    // static public Org.BouncyCastle.Asn1.X509.IssuingDistributionPoint GetInstance(System.Object obj)
    // Offset: 0x18FD5B0
    static Org::BouncyCastle::Asn1::X509::IssuingDistributionPoint* GetInstance(::Il2CppObject* obj);
    // private System.Void .ctor(Org.BouncyCastle.Asn1.Asn1Sequence seq)
    // Offset: 0x18FD730
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static IssuingDistributionPoint* New_ctor(Org::BouncyCastle::Asn1::Asn1Sequence* seq) {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Asn1::X509::IssuingDistributionPoint::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<IssuingDistributionPoint*, creationType>(seq)));
    }
    // public System.Boolean get_IsIndirectCrl()
    // Offset: 0x18FDA04
    bool get_IsIndirectCrl();
    // private System.Void appendObject(System.Text.StringBuilder buf, System.String sep, System.String name, System.String val)
    // Offset: 0x18FDC4C
    void appendObject(System::Text::StringBuilder* buf, ::Il2CppString* sep, ::Il2CppString* name, ::Il2CppString* val);
    // public override Org.BouncyCastle.Asn1.Asn1Object ToAsn1Object()
    // Offset: 0x18FDA0C
    // Implemented from: Org.BouncyCastle.Asn1.Asn1Encodable
    // Base method: Org.BouncyCastle.Asn1.Asn1Object Asn1Encodable::ToAsn1Object()
    Org::BouncyCastle::Asn1::Asn1Object* ToAsn1Object();
    // public override System.String ToString()
    // Offset: 0x18FDA14
    // Implemented from: System.Object
    // Base method: System.String Object::ToString()
    ::Il2CppString* ToString();
  }; // Org.BouncyCastle.Asn1.X509.IssuingDistributionPoint
  #pragma pack(pop)
  static check_size<sizeof(IssuingDistributionPoint), 48 + sizeof(Org::BouncyCastle::Asn1::Asn1Sequence*)> __Org_BouncyCastle_Asn1_X509_IssuingDistributionPointSizeCheck;
  static_assert(sizeof(IssuingDistributionPoint) == 0x38);
}
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Asn1::X509::IssuingDistributionPoint*, "Org.BouncyCastle.Asn1.X509", "IssuingDistributionPoint");
