// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Asn1.DerOctetString
#include "Org/BouncyCastle/Asn1/DerOctetString.hpp"
// Including type: System.Collections.IEnumerable
#include "System/Collections/IEnumerable.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Asn1
namespace Org::BouncyCastle::Asn1 {
  // Skipping declaration: Asn1OctetString because it is already included!
  // Forward declaring type: Asn1Sequence
  class Asn1Sequence;
  // Forward declaring type: DerOutputStream
  class DerOutputStream;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Asn1
namespace Org::BouncyCastle::Asn1 {
  // Autogenerated type: Org.BouncyCastle.Asn1.BerOctetString
  class BerOctetString : public Org::BouncyCastle::Asn1::DerOctetString/*, public System::Collections::IEnumerable*/ {
    public:
    // Nested type: Org::BouncyCastle::Asn1::BerOctetString::ChunkEnumerator
    class ChunkEnumerator;
    // private readonly System.Int32 chunkSize
    // Offset: 0x18
    int chunkSize;
    // private readonly Org.BouncyCastle.Asn1.Asn1OctetString[] octs
    // Offset: 0x20
    ::Array<Org::BouncyCastle::Asn1::Asn1OctetString*>* octs;
    // Creating interface conversion operator: operator System::Collections::IEnumerable
    operator System::Collections::IEnumerable() noexcept {
      return *reinterpret_cast<System::Collections::IEnumerable*>(this);
    }
    // Deleting conversion operator: operator ::Array<uint8_t>*
    constexpr operator ::Array<uint8_t>*() const noexcept = delete;
    // Get static field: static private readonly System.Int32 DefaultChunkSize
    static int _get_DefaultChunkSize();
    // Set static field: static private readonly System.Int32 DefaultChunkSize
    static void _set_DefaultChunkSize(int value);
    // static public Org.BouncyCastle.Asn1.BerOctetString FromSequence(Org.BouncyCastle.Asn1.Asn1Sequence seq)
    // Offset: 0x1375340
    static Org::BouncyCastle::Asn1::BerOctetString* FromSequence(Org::BouncyCastle::Asn1::Asn1Sequence* seq);
    // static private System.Byte[] ToBytes(Org.BouncyCastle.Asn1.Asn1OctetString[] octs)
    // Offset: 0x1378EC4
    static ::Array<uint8_t>* ToBytes(::Array<Org::BouncyCastle::Asn1::Asn1OctetString*>* octs);
    // public System.Void .ctor(Org.BouncyCastle.Asn1.Asn1OctetString[] octs)
    // Offset: 0x1371B44
    static BerOctetString* New_ctor(::Array<Org::BouncyCastle::Asn1::Asn1OctetString*>* octs);
    // public System.Void .ctor(System.Byte[] str, System.Int32 chunkSize)
    // Offset: 0x1379050
    static BerOctetString* New_ctor(::Array<uint8_t>* str, int chunkSize);
    // public System.Void .ctor(Org.BouncyCastle.Asn1.Asn1OctetString[] octs, System.Int32 chunkSize)
    // Offset: 0x1379088
    static BerOctetString* New_ctor(::Array<Org::BouncyCastle::Asn1::Asn1OctetString*>* octs, int chunkSize);
    // private System.Void .ctor(System.Byte[] str, Org.BouncyCastle.Asn1.Asn1OctetString[] octs, System.Int32 chunkSize)
    // Offset: 0x1379120
    static BerOctetString* New_ctor(::Array<uint8_t>* str, ::Array<Org::BouncyCastle::Asn1::Asn1OctetString*>* octs, int chunkSize);
    // static private System.Void .cctor()
    // Offset: 0x13795B0
    static void _cctor();
    // public System.Void .ctor(System.Byte[] str)
    // Offset: 0x1378FB8
    // Implemented from: Org.BouncyCastle.Asn1.DerOctetString
    // Base method: System.Void DerOctetString::.ctor(System.Byte[] str)
    // Base method: System.Void Asn1OctetString::.ctor(System.Byte[] str)
    static BerOctetString* New_ctor(::Array<uint8_t>* str);
    // public System.Collections.IEnumerator GetEnumerator()
    // Offset: 0x1379164
    // Implemented from: System.Collections.IEnumerable
    // Base method: System.Collections.IEnumerator IEnumerable::GetEnumerator()
    System::Collections::IEnumerator* GetEnumerator();
    // Creating proxy method: System_Collections_IEnumerable_GetEnumerator
    // Maps to method: GetEnumerator
    System::Collections::IEnumerator* System_Collections_IEnumerable_GetEnumerator();
    // override System.Void Encode(Org.BouncyCastle.Asn1.DerOutputStream derOut)
    // Offset: 0x1379250
    // Implemented from: Org.BouncyCastle.Asn1.DerOctetString
    // Base method: System.Void DerOctetString::Encode(Org.BouncyCastle.Asn1.DerOutputStream derOut)
    void Encode(Org::BouncyCastle::Asn1::DerOutputStream* derOut);
  }; // Org.BouncyCastle.Asn1.BerOctetString
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Asn1::BerOctetString*, "Org.BouncyCastle.Asn1", "BerOctetString");
#pragma pack(pop)
