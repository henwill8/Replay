// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Utilities.Collections.UnmodifiableDictionary
#include "Org/BouncyCastle/Utilities/Collections/UnmodifiableDictionary.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Skipping declaration: IDictionary because it is already included!
  // Forward declaring type: IDictionaryEnumerator
  class IDictionaryEnumerator;
  // Skipping declaration: ICollection because it is already included!
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: Array
  class Array;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Utilities.Collections
namespace Org::BouncyCastle::Utilities::Collections {
  // Size: 0x18
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Utilities.Collections.UnmodifiableDictionaryProxy
  // [] Offset: FFFFFFFF
  class UnmodifiableDictionaryProxy : public Org::BouncyCastle::Utilities::Collections::UnmodifiableDictionary {
    public:
    // private readonly System.Collections.IDictionary d
    // Size: 0x8
    // Offset: 0x10
    System::Collections::IDictionary* d;
    // Field size check
    static_assert(sizeof(System::Collections::IDictionary*) == 0x8);
    // Creating value type constructor for type: UnmodifiableDictionaryProxy
    UnmodifiableDictionaryProxy(System::Collections::IDictionary* d_ = {}) noexcept : d{d_} {}
    // Creating conversion operator: operator System::Collections::IDictionary*
    constexpr operator System::Collections::IDictionary*() const noexcept {
      return d;
    }
    // public System.Void .ctor(System.Collections.IDictionary d)
    // Offset: 0x1E5B8E4
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static UnmodifiableDictionaryProxy* New_ctor(System::Collections::IDictionary* d) {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Utilities::Collections::UnmodifiableDictionaryProxy::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<UnmodifiableDictionaryProxy*, creationType>(d)));
    }
    // public override System.Boolean Contains(System.Object k)
    // Offset: 0x1E5B918
    // Implemented from: Org.BouncyCastle.Utilities.Collections.UnmodifiableDictionary
    // Base method: System.Boolean UnmodifiableDictionary::Contains(System.Object k)
    bool Contains(::Il2CppObject* k);
    // Creating proxy method: System_Collections_IDictionary_Contains
    // Maps to method: Contains
    bool System_Collections_IDictionary_Contains(::Il2CppObject* k);
    // public override System.Void CopyTo(System.Array array, System.Int32 index)
    // Offset: 0x1E5B9DC
    // Implemented from: Org.BouncyCastle.Utilities.Collections.UnmodifiableDictionary
    // Base method: System.Void UnmodifiableDictionary::CopyTo(System.Array array, System.Int32 index)
    void CopyTo(System::Array* array, int index);
    // Creating proxy method: System_Collections_ICollection_CopyTo
    // Maps to method: CopyTo
    void System_Collections_ICollection_CopyTo(System::Array* array, int index);
    // public override System.Int32 get_Count()
    // Offset: 0x1E5BAA4
    // Implemented from: Org.BouncyCastle.Utilities.Collections.UnmodifiableDictionary
    // Base method: System.Int32 UnmodifiableDictionary::get_Count()
    int get_Count();
    // Creating proxy method: System_Collections_ICollection_get_Count
    // Maps to method: get_Count
    int System_Collections_ICollection_get_Count();
    // public override System.Collections.IDictionaryEnumerator GetEnumerator()
    // Offset: 0x1E5BB58
    // Implemented from: Org.BouncyCastle.Utilities.Collections.UnmodifiableDictionary
    // Base method: System.Collections.IDictionaryEnumerator UnmodifiableDictionary::GetEnumerator()
    System::Collections::IDictionaryEnumerator* GetEnumerator();
    // Creating proxy method: System_Collections_IDictionary_GetEnumerator
    // Maps to method: GetEnumerator
    System::Collections::IDictionaryEnumerator* System_Collections_IDictionary_GetEnumerator();
    // public override System.Collections.ICollection get_Keys()
    // Offset: 0x1E5BC0C
    // Implemented from: Org.BouncyCastle.Utilities.Collections.UnmodifiableDictionary
    // Base method: System.Collections.ICollection UnmodifiableDictionary::get_Keys()
    System::Collections::ICollection* get_Keys();
    // Creating proxy method: System_Collections_IDictionary_get_Keys
    // Maps to method: get_Keys
    System::Collections::ICollection* System_Collections_IDictionary_get_Keys();
    // protected override System.Object GetValue(System.Object k)
    // Offset: 0x1E5BCC0
    // Implemented from: Org.BouncyCastle.Utilities.Collections.UnmodifiableDictionary
    // Base method: System.Object UnmodifiableDictionary::GetValue(System.Object k)
    ::Il2CppObject* GetValue(::Il2CppObject* k);
  }; // Org.BouncyCastle.Utilities.Collections.UnmodifiableDictionaryProxy
  #pragma pack(pop)
  static check_size<sizeof(UnmodifiableDictionaryProxy), 16 + sizeof(System::Collections::IDictionary*)> __Org_BouncyCastle_Utilities_Collections_UnmodifiableDictionaryProxySizeCheck;
  static_assert(sizeof(UnmodifiableDictionaryProxy) == 0x18);
}
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Utilities::Collections::UnmodifiableDictionaryProxy*, "Org.BouncyCastle.Utilities.Collections", "UnmodifiableDictionaryProxy");
