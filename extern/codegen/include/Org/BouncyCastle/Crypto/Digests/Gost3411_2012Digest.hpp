// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.IDigest
#include "Org/BouncyCastle/Crypto/IDigest.hpp"
// Including type: Org.BouncyCastle.Utilities.IMemoable
#include "Org/BouncyCastle/Utilities/IMemoable.hpp"
// Completed includes
// Type namespace: Org.BouncyCastle.Crypto.Digests
namespace Org::BouncyCastle::Crypto::Digests {
  // Autogenerated type: Org.BouncyCastle.Crypto.Digests.Gost3411_2012Digest
  class Gost3411_2012Digest : public ::Il2CppObject/*, public Org::BouncyCastle::Crypto::IDigest, public Org::BouncyCastle::Utilities::IMemoable*/ {
    public:
    // private readonly System.Byte[] IV
    // Offset: 0x10
    ::Array<uint8_t>* IV;
    // private readonly System.Byte[] N
    // Offset: 0x18
    ::Array<uint8_t>* N;
    // private readonly System.Byte[] Sigma
    // Offset: 0x20
    ::Array<uint8_t>* Sigma;
    // private readonly System.Byte[] Ki
    // Offset: 0x28
    ::Array<uint8_t>* Ki;
    // private readonly System.Byte[] m
    // Offset: 0x30
    ::Array<uint8_t>* m;
    // private readonly System.Byte[] h
    // Offset: 0x38
    ::Array<uint8_t>* h;
    // private readonly System.Byte[] tmp
    // Offset: 0x40
    ::Array<uint8_t>* tmp;
    // private readonly System.Byte[] block
    // Offset: 0x48
    ::Array<uint8_t>* block;
    // private System.Int32 bOff
    // Offset: 0x50
    int bOff;
    // Creating interface conversion operator: operator Org::BouncyCastle::Crypto::IDigest
    operator Org::BouncyCastle::Crypto::IDigest() noexcept {
      return *reinterpret_cast<Org::BouncyCastle::Crypto::IDigest*>(this);
    }
    // Creating interface conversion operator: operator Org::BouncyCastle::Utilities::IMemoable
    operator Org::BouncyCastle::Utilities::IMemoable() noexcept {
      return *reinterpret_cast<Org::BouncyCastle::Utilities::IMemoable*>(this);
    }
    // Get static field: static private readonly System.Byte[][] C
    static ::Array<::Array<uint8_t>*>* _get_C();
    // Set static field: static private readonly System.Byte[][] C
    static void _set_C(::Array<::Array<uint8_t>*>* value);
    // Get static field: static private readonly System.Byte[] Zero
    static ::Array<uint8_t>* _get_Zero();
    // Set static field: static private readonly System.Byte[] Zero
    static void _set_Zero(::Array<uint8_t>* value);
    // Get static field: static private readonly System.UInt64[][] T
    static ::Array<::Array<uint64_t>*>* _get_T();
    // Set static field: static private readonly System.UInt64[][] T
    static void _set_T(::Array<::Array<uint64_t>*>* value);
    // protected System.Void .ctor(System.Byte[] IV)
    // Offset: 0x175D884
    static Gost3411_2012Digest* New_ctor(::Array<uint8_t>* IV);
    // private System.Void F(System.Byte[] V)
    // Offset: 0x175E1A0
    void F(::Array<uint8_t>* V);
    // private System.Void xor512(System.Byte[] A, System.Byte[] B)
    // Offset: 0x175F100
    void xor512(::Array<uint8_t>* A, ::Array<uint8_t>* B);
    // private System.Void E(System.Byte[] K, System.Byte[] m)
    // Offset: 0x175F16C
    void E(::Array<uint8_t>* K, ::Array<uint8_t>* m);
    // private System.Void g_N(System.Byte[] h, System.Byte[] N, System.Byte[] m)
    // Offset: 0x175DB98
    void g_N(::Array<uint8_t>* h, ::Array<uint8_t>* N, ::Array<uint8_t>* m);
    // private System.Void addMod512(System.Byte[] A, System.Int32 num)
    // Offset: 0x175DC1C
    void addMod512(::Array<uint8_t>* A, int num);
    // private System.Void addMod512(System.Byte[] A, System.Byte[] B)
    // Offset: 0x175DCA8
    void addMod512(::Array<uint8_t>* A, ::Array<uint8_t>* B);
    // private System.Void reverse(System.Byte[] src, System.Byte[] dst)
    // Offset: 0x175DD14
    void reverse(::Array<uint8_t>* src, ::Array<uint8_t>* dst);
    // static private System.Void .cctor()
    // Offset: 0x175F2E4
    static void _cctor();
    // public System.String get_AlgorithmName()
    // Offset: 0xFFFFFFFF
    // Implemented from: Org.BouncyCastle.Crypto.IDigest
    // Base method: System.String IDigest::get_AlgorithmName()
    ::Il2CppString* get_AlgorithmName();
    // public Org.BouncyCastle.Utilities.IMemoable Copy()
    // Offset: 0xFFFFFFFF
    // Implemented from: Org.BouncyCastle.Utilities.IMemoable
    // Base method: Org.BouncyCastle.Utilities.IMemoable IMemoable::Copy()
    Org::BouncyCastle::Utilities::IMemoable* Copy();
    // public System.Int32 DoFinal(System.Byte[] output, System.Int32 outOff)
    // Offset: 0x175D9FC
    // Implemented from: Org.BouncyCastle.Crypto.IDigest
    // Base method: System.Int32 IDigest::DoFinal(System.Byte[] output, System.Int32 outOff)
    int DoFinal(::Array<uint8_t>* output, int outOff);
    // public System.Int32 GetByteLength()
    // Offset: 0x175DE44
    // Implemented from: Org.BouncyCastle.Crypto.IDigest
    // Base method: System.Int32 IDigest::GetByteLength()
    int GetByteLength();
    // public System.Int32 GetDigestSize()
    // Offset: 0xFFFFFFFF
    // Implemented from: Org.BouncyCastle.Crypto.IDigest
    // Base method: System.Int32 IDigest::GetDigestSize()
    int GetDigestSize();
    // public System.Void Reset()
    // Offset: 0x175DD90
    // Implemented from: Org.BouncyCastle.Crypto.IDigest
    // Base method: System.Void IDigest::Reset()
    void Reset();
    // public System.Void Reset(Org.BouncyCastle.Utilities.IMemoable other)
    // Offset: 0x175DE4C
    // Implemented from: Org.BouncyCastle.Utilities.IMemoable
    // Base method: System.Void IMemoable::Reset(Org.BouncyCastle.Utilities.IMemoable other)
    void Reset(Org::BouncyCastle::Utilities::IMemoable* other);
    // public System.Void Update(System.Byte input)
    // Offset: 0x175DFA8
    // Implemented from: Org.BouncyCastle.Crypto.IDigest
    // Base method: System.Void IDigest::Update(System.Byte input)
    void Update(uint8_t input);
    // public System.Void BlockUpdate(System.Byte[] input, System.Int32 inOff, System.Int32 len)
    // Offset: 0x175E038
    // Implemented from: Org.BouncyCastle.Crypto.IDigest
    // Base method: System.Void IDigest::BlockUpdate(System.Byte[] input, System.Int32 inOff, System.Int32 len)
    void BlockUpdate(::Array<uint8_t>* input, int inOff, int len);
  }; // Org.BouncyCastle.Crypto.Digests.Gost3411_2012Digest
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Digests::Gost3411_2012Digest*, "Org.BouncyCastle.Crypto.Digests", "Gost3411_2012Digest");
#pragma pack(pop)
