// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.IDigest
#include "Org/BouncyCastle/Crypto/IDigest.hpp"
// Including type: Org.BouncyCastle.Utilities.IMemoable
#include "Org/BouncyCastle/Utilities/IMemoable.hpp"
// Completed includes
// Type namespace: Org.BouncyCastle.Crypto.Digests
namespace Org::BouncyCastle::Crypto::Digests {
  // Autogenerated type: Org.BouncyCastle.Crypto.Digests.LongDigest
  class LongDigest : public ::Il2CppObject/*, public Org::BouncyCastle::Crypto::IDigest, public Org::BouncyCastle::Utilities::IMemoable*/ {
    public:
    // private System.Int32 MyByteLength
    // Offset: 0x10
    int MyByteLength;
    // private System.Byte[] xBuf
    // Offset: 0x18
    ::Array<uint8_t>* xBuf;
    // private System.Int32 xBufOff
    // Offset: 0x20
    int xBufOff;
    // private System.Int64 byteCount1
    // Offset: 0x28
    int64_t byteCount1;
    // private System.Int64 byteCount2
    // Offset: 0x30
    int64_t byteCount2;
    // System.UInt64 H1
    // Offset: 0x38
    uint64_t H1;
    // System.UInt64 H2
    // Offset: 0x40
    uint64_t H2;
    // System.UInt64 H3
    // Offset: 0x48
    uint64_t H3;
    // System.UInt64 H4
    // Offset: 0x50
    uint64_t H4;
    // System.UInt64 H5
    // Offset: 0x58
    uint64_t H5;
    // System.UInt64 H6
    // Offset: 0x60
    uint64_t H6;
    // System.UInt64 H7
    // Offset: 0x68
    uint64_t H7;
    // System.UInt64 H8
    // Offset: 0x70
    uint64_t H8;
    // private System.UInt64[] W
    // Offset: 0x78
    ::Array<uint64_t>* W;
    // private System.Int32 wOff
    // Offset: 0x80
    int wOff;
    // Creating interface conversion operator: operator Org::BouncyCastle::Crypto::IDigest
    operator Org::BouncyCastle::Crypto::IDigest() noexcept {
      return *reinterpret_cast<Org::BouncyCastle::Crypto::IDigest*>(this);
    }
    // Creating interface conversion operator: operator Org::BouncyCastle::Utilities::IMemoable
    operator Org::BouncyCastle::Utilities::IMemoable() noexcept {
      return *reinterpret_cast<Org::BouncyCastle::Utilities::IMemoable*>(this);
    }
    // Get static field: static readonly System.UInt64[] K
    static ::Array<uint64_t>* _get_K();
    // Set static field: static readonly System.UInt64[] K
    static void _set_K(::Array<uint64_t>* value);
    // System.Void .ctor(Org.BouncyCastle.Crypto.Digests.LongDigest t)
    // Offset: 0x17614B0
    static LongDigest* New_ctor(Org::BouncyCastle::Crypto::Digests::LongDigest* t);
    // protected System.Void CopyIn(Org.BouncyCastle.Crypto.Digests.LongDigest t)
    // Offset: 0x1761570
    void CopyIn(Org::BouncyCastle::Crypto::Digests::LongDigest* t);
    // public System.Void Finish()
    // Offset: 0x1761874
    void Finish();
    // System.Void ProcessWord(System.Byte[] input, System.Int32 inOff)
    // Offset: 0x17616C0
    void ProcessWord(::Array<uint8_t>* input, int inOff);
    // private System.Void AdjustByteCounts()
    // Offset: 0x17618EC
    void AdjustByteCounts();
    // System.Void ProcessLength(System.Int64 lowW, System.Int64 hiW)
    // Offset: 0x1761910
    void ProcessLength(int64_t lowW, int64_t hiW);
    // System.Void ProcessBlock()
    // Offset: 0x1761990
    void ProcessBlock();
    // static private System.UInt64 Ch(System.UInt64 x, System.UInt64 y, System.UInt64 z)
    // Offset: 0x1762014
    static uint64_t Ch(uint64_t x, uint64_t y, uint64_t z);
    // static private System.UInt64 Maj(System.UInt64 x, System.UInt64 y, System.UInt64 z)
    // Offset: 0x1762034
    static uint64_t Maj(uint64_t x, uint64_t y, uint64_t z);
    // static private System.UInt64 Sum0(System.UInt64 x)
    // Offset: 0x1762024
    static uint64_t Sum0(uint64_t x);
    // static private System.UInt64 Sum1(System.UInt64 x)
    // Offset: 0x1762004
    static uint64_t Sum1(uint64_t x);
    // static private System.UInt64 Sigma0(System.UInt64 x)
    // Offset: 0x1761FF4
    static uint64_t Sigma0(uint64_t x);
    // static private System.UInt64 Sigma1(System.UInt64 x)
    // Offset: 0x1761FE4
    static uint64_t Sigma1(uint64_t x);
    // static private System.Void .cctor()
    // Offset: 0x1762050
    static void _cctor();
    // System.Void .ctor()
    // Offset: 0x1761404
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static LongDigest* New_ctor();
    // public System.Void Update(System.Byte input)
    // Offset: 0x1761638
    // Implemented from: Org.BouncyCastle.Crypto.IDigest
    // Base method: System.Void IDigest::Update(System.Byte input)
    void Update(uint8_t input);
    // public System.Void BlockUpdate(System.Byte[] input, System.Int32 inOff, System.Int32 length)
    // Offset: 0x176174C
    // Implemented from: Org.BouncyCastle.Crypto.IDigest
    // Base method: System.Void IDigest::BlockUpdate(System.Byte[] input, System.Int32 inOff, System.Int32 length)
    void BlockUpdate(::Array<uint8_t>* input, int inOff, int length);
    // public System.Void Reset()
    // Offset: 0x1761F6C
    // Implemented from: Org.BouncyCastle.Crypto.IDigest
    // Base method: System.Void IDigest::Reset()
    void Reset();
    // public System.Int32 GetByteLength()
    // Offset: 0x1762048
    // Implemented from: Org.BouncyCastle.Crypto.IDigest
    // Base method: System.Int32 IDigest::GetByteLength()
    int GetByteLength();
    // public System.String get_AlgorithmName()
    // Offset: 0xFFFFFFFF
    // Implemented from: Org.BouncyCastle.Crypto.IDigest
    // Base method: System.String IDigest::get_AlgorithmName()
    ::Il2CppString* get_AlgorithmName();
    // public System.Int32 GetDigestSize()
    // Offset: 0xFFFFFFFF
    // Implemented from: Org.BouncyCastle.Crypto.IDigest
    // Base method: System.Int32 IDigest::GetDigestSize()
    int GetDigestSize();
    // public System.Int32 DoFinal(System.Byte[] output, System.Int32 outOff)
    // Offset: 0xFFFFFFFF
    // Implemented from: Org.BouncyCastle.Crypto.IDigest
    // Base method: System.Int32 IDigest::DoFinal(System.Byte[] output, System.Int32 outOff)
    int DoFinal(::Array<uint8_t>* output, int outOff);
    // public Org.BouncyCastle.Utilities.IMemoable Copy()
    // Offset: 0xFFFFFFFF
    // Implemented from: Org.BouncyCastle.Utilities.IMemoable
    // Base method: Org.BouncyCastle.Utilities.IMemoable IMemoable::Copy()
    Org::BouncyCastle::Utilities::IMemoable* Copy();
    // public System.Void Reset(Org.BouncyCastle.Utilities.IMemoable t)
    // Offset: 0xFFFFFFFF
    // Implemented from: Org.BouncyCastle.Utilities.IMemoable
    // Base method: System.Void IMemoable::Reset(Org.BouncyCastle.Utilities.IMemoable t)
    void Reset(Org::BouncyCastle::Utilities::IMemoable* t);
  }; // Org.BouncyCastle.Crypto.Digests.LongDigest
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Digests::LongDigest*, "Org.BouncyCastle.Crypto.Digests", "LongDigest");
#pragma pack(pop)
