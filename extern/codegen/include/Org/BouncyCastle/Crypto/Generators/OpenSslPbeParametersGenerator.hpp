// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.PbeParametersGenerator
#include "Org/BouncyCastle/Crypto/PbeParametersGenerator.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Crypto
namespace Org::BouncyCastle::Crypto {
  // Forward declaring type: IDigest
  class IDigest;
  // Forward declaring type: ICipherParameters
  class ICipherParameters;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Crypto.Generators
namespace Org::BouncyCastle::Crypto::Generators {
  // Autogenerated type: Org.BouncyCastle.Crypto.Generators.OpenSslPbeParametersGenerator
  class OpenSslPbeParametersGenerator : public Org::BouncyCastle::Crypto::PbeParametersGenerator {
    public:
    // private readonly Org.BouncyCastle.Crypto.IDigest digest
    // Offset: 0x28
    Org::BouncyCastle::Crypto::IDigest* digest;
    // Creating conversion operator: operator Org::BouncyCastle::Crypto::IDigest*
    constexpr operator Org::BouncyCastle::Crypto::IDigest*() const noexcept {
      return digest;
    }
    // public System.Void Init(System.Byte[] password, System.Byte[] salt)
    // Offset: 0x1498B00
    void Init(::Array<uint8_t>* password, ::Array<uint8_t>* salt);
    // private System.Byte[] GenerateDerivedKey(System.Int32 bytesNeeded)
    // Offset: 0x1498B0C
    ::Array<uint8_t>* GenerateDerivedKey(int bytesNeeded);
    // public System.Void .ctor()
    // Offset: 0x1498A80
    // Implemented from: Org.BouncyCastle.Crypto.PbeParametersGenerator
    // Base method: System.Void PbeParametersGenerator::.ctor()
    // Base method: System.Void Object::.ctor()
    static OpenSslPbeParametersGenerator* New_ctor();
    // public override System.Void Init(System.Byte[] password, System.Byte[] salt, System.Int32 iterationCount)
    // Offset: 0x1498AF4
    // Implemented from: Org.BouncyCastle.Crypto.PbeParametersGenerator
    // Base method: System.Void PbeParametersGenerator::Init(System.Byte[] password, System.Byte[] salt, System.Int32 iterationCount)
    void Init(::Array<uint8_t>* password, ::Array<uint8_t>* salt, int iterationCount);
    // public override Org.BouncyCastle.Crypto.ICipherParameters GenerateDerivedParameters(System.String algorithm, System.Int32 keySize)
    // Offset: 0x1498EC4
    // Implemented from: Org.BouncyCastle.Crypto.PbeParametersGenerator
    // Base method: Org.BouncyCastle.Crypto.ICipherParameters PbeParametersGenerator::GenerateDerivedParameters(System.String algorithm, System.Int32 keySize)
    Org::BouncyCastle::Crypto::ICipherParameters* GenerateDerivedParameters(::Il2CppString* algorithm, int keySize);
    // public override Org.BouncyCastle.Crypto.ICipherParameters GenerateDerivedParameters(System.String algorithm, System.Int32 keySize, System.Int32 ivSize)
    // Offset: 0x1498F6C
    // Implemented from: Org.BouncyCastle.Crypto.PbeParametersGenerator
    // Base method: Org.BouncyCastle.Crypto.ICipherParameters PbeParametersGenerator::GenerateDerivedParameters(System.String algorithm, System.Int32 keySize, System.Int32 ivSize)
    Org::BouncyCastle::Crypto::ICipherParameters* GenerateDerivedParameters(::Il2CppString* algorithm, int keySize, int ivSize);
    // public override Org.BouncyCastle.Crypto.ICipherParameters GenerateDerivedMacParameters(System.Int32 keySize)
    // Offset: 0x149906C
    // Implemented from: Org.BouncyCastle.Crypto.PbeParametersGenerator
    // Base method: Org.BouncyCastle.Crypto.ICipherParameters PbeParametersGenerator::GenerateDerivedMacParameters(System.Int32 keySize)
    Org::BouncyCastle::Crypto::ICipherParameters* GenerateDerivedMacParameters(int keySize);
  }; // Org.BouncyCastle.Crypto.Generators.OpenSslPbeParametersGenerator
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Generators::OpenSslPbeParametersGenerator*, "Org.BouncyCastle.Crypto.Generators", "OpenSslPbeParametersGenerator");
#pragma pack(pop)
