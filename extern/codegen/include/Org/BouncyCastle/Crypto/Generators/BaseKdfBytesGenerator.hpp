// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.IDerivationFunction
#include "Org/BouncyCastle/Crypto/IDerivationFunction.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Crypto
namespace Org::BouncyCastle::Crypto {
  // Forward declaring type: IDigest
  class IDigest;
  // Forward declaring type: IDerivationParameters
  class IDerivationParameters;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Crypto.Generators
namespace Org::BouncyCastle::Crypto::Generators {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Crypto.Generators.BaseKdfBytesGenerator
  // [] Offset: FFFFFFFF
  class BaseKdfBytesGenerator : public ::Il2CppObject/*, public Org::BouncyCastle::Crypto::IDerivationFunction*/ {
    public:
    // private System.Int32 counterStart
    // Size: 0x4
    // Offset: 0x10
    int counterStart;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: counterStart and: digest
    char __padding0[0x4] = {};
    // private Org.BouncyCastle.Crypto.IDigest digest
    // Size: 0x8
    // Offset: 0x18
    Org::BouncyCastle::Crypto::IDigest* digest;
    // Field size check
    static_assert(sizeof(Org::BouncyCastle::Crypto::IDigest*) == 0x8);
    // private System.Byte[] shared
    // Size: 0x8
    // Offset: 0x20
    ::Array<uint8_t>* shared;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Byte[] iv
    // Size: 0x8
    // Offset: 0x28
    ::Array<uint8_t>* iv;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // Creating value type constructor for type: BaseKdfBytesGenerator
    BaseKdfBytesGenerator(int counterStart_ = {}, Org::BouncyCastle::Crypto::IDigest* digest_ = {}, ::Array<uint8_t>* shared_ = {}, ::Array<uint8_t>* iv_ = {}) noexcept : counterStart{counterStart_}, digest{digest_}, shared{shared_}, iv{iv_} {}
    // Creating interface conversion operator: operator Org::BouncyCastle::Crypto::IDerivationFunction
    operator Org::BouncyCastle::Crypto::IDerivationFunction() noexcept {
      return *reinterpret_cast<Org::BouncyCastle::Crypto::IDerivationFunction*>(this);
    }
    // public System.Void .ctor(System.Int32 counterStart, Org.BouncyCastle.Crypto.IDigest digest)
    // Offset: 0x17C5D8C
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static BaseKdfBytesGenerator* New_ctor(int counterStart, Org::BouncyCastle::Crypto::IDigest* digest) {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Crypto::Generators::BaseKdfBytesGenerator::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<BaseKdfBytesGenerator*, creationType>(counterStart, digest)));
    }
    // public System.Void Init(Org.BouncyCastle.Crypto.IDerivationParameters parameters)
    // Offset: 0x17C5DD0
    // Implemented from: Org.BouncyCastle.Crypto.IDerivationFunction
    // Base method: System.Void IDerivationFunction::Init(Org.BouncyCastle.Crypto.IDerivationParameters parameters)
    void Init(Org::BouncyCastle::Crypto::IDerivationParameters* parameters);
    // public System.Int32 GenerateBytes(System.Byte[] output, System.Int32 outOff, System.Int32 length)
    // Offset: 0x17C5EF8
    // Implemented from: Org.BouncyCastle.Crypto.IDerivationFunction
    // Base method: System.Int32 IDerivationFunction::GenerateBytes(System.Byte[] output, System.Int32 outOff, System.Int32 length)
    int GenerateBytes(::Array<uint8_t>* output, int outOff, int length);
  }; // Org.BouncyCastle.Crypto.Generators.BaseKdfBytesGenerator
  #pragma pack(pop)
  static check_size<sizeof(BaseKdfBytesGenerator), 40 + sizeof(::Array<uint8_t>*)> __Org_BouncyCastle_Crypto_Generators_BaseKdfBytesGeneratorSizeCheck;
  static_assert(sizeof(BaseKdfBytesGenerator) == 0x30);
}
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Generators::BaseKdfBytesGenerator*, "Org.BouncyCastle.Crypto.Generators", "BaseKdfBytesGenerator");
