// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.IAsymmetricBlockCipher
#include "Org/BouncyCastle/Crypto/IAsymmetricBlockCipher.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Math
namespace Org::BouncyCastle::Math {
  // Forward declaring type: BigInteger
  class BigInteger;
}
// Forward declaring namespace: Org::BouncyCastle::Crypto
namespace Org::BouncyCastle::Crypto {
  // Forward declaring type: ICipherParameters
  class ICipherParameters;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Crypto.Encodings
namespace Org::BouncyCastle::Crypto::Encodings {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Crypto.Encodings.ISO9796d1Encoding
  // [] Offset: FFFFFFFF
  class ISO9796d1Encoding : public ::Il2CppObject/*, public Org::BouncyCastle::Crypto::IAsymmetricBlockCipher*/ {
    public:
    // private readonly Org.BouncyCastle.Crypto.IAsymmetricBlockCipher engine
    // Size: 0x8
    // Offset: 0x10
    Org::BouncyCastle::Crypto::IAsymmetricBlockCipher* engine;
    // Field size check
    static_assert(sizeof(Org::BouncyCastle::Crypto::IAsymmetricBlockCipher*) == 0x8);
    // private System.Boolean forEncryption
    // Size: 0x1
    // Offset: 0x18
    bool forEncryption;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: forEncryption and: bitSize
    char __padding1[0x3] = {};
    // private System.Int32 bitSize
    // Size: 0x4
    // Offset: 0x1C
    int bitSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 padBits
    // Size: 0x4
    // Offset: 0x20
    int padBits;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: padBits and: modulus
    char __padding3[0x4] = {};
    // private Org.BouncyCastle.Math.BigInteger modulus
    // Size: 0x8
    // Offset: 0x28
    Org::BouncyCastle::Math::BigInteger* modulus;
    // Field size check
    static_assert(sizeof(Org::BouncyCastle::Math::BigInteger*) == 0x8);
    // Creating value type constructor for type: ISO9796d1Encoding
    ISO9796d1Encoding(Org::BouncyCastle::Crypto::IAsymmetricBlockCipher* engine_ = {}, bool forEncryption_ = {}, int bitSize_ = {}, int padBits_ = {}, Org::BouncyCastle::Math::BigInteger* modulus_ = {}) noexcept : engine{engine_}, forEncryption{forEncryption_}, bitSize{bitSize_}, padBits{padBits_}, modulus{modulus_} {}
    // Creating interface conversion operator: operator Org::BouncyCastle::Crypto::IAsymmetricBlockCipher
    operator Org::BouncyCastle::Crypto::IAsymmetricBlockCipher() noexcept {
      return *reinterpret_cast<Org::BouncyCastle::Crypto::IAsymmetricBlockCipher*>(this);
    }
    // Get static field: static private readonly Org.BouncyCastle.Math.BigInteger Sixteen
    static Org::BouncyCastle::Math::BigInteger* _get_Sixteen();
    // Set static field: static private readonly Org.BouncyCastle.Math.BigInteger Sixteen
    static void _set_Sixteen(Org::BouncyCastle::Math::BigInteger* value);
    // Get static field: static private readonly Org.BouncyCastle.Math.BigInteger Six
    static Org::BouncyCastle::Math::BigInteger* _get_Six();
    // Set static field: static private readonly Org.BouncyCastle.Math.BigInteger Six
    static void _set_Six(Org::BouncyCastle::Math::BigInteger* value);
    // Get static field: static private readonly System.Byte[] shadows
    static ::Array<uint8_t>* _get_shadows();
    // Set static field: static private readonly System.Byte[] shadows
    static void _set_shadows(::Array<uint8_t>* value);
    // Get static field: static private readonly System.Byte[] inverse
    static ::Array<uint8_t>* _get_inverse();
    // Set static field: static private readonly System.Byte[] inverse
    static void _set_inverse(::Array<uint8_t>* value);
    // public System.Void .ctor(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher cipher)
    // Offset: 0x17EE044
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ISO9796d1Encoding* New_ctor(Org::BouncyCastle::Crypto::IAsymmetricBlockCipher* cipher) {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Crypto::Encodings::ISO9796d1Encoding::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ISO9796d1Encoding*, creationType>(cipher)));
    }
    // private System.Byte[] EncodeBlock(System.Byte[] input, System.Int32 inOff, System.Int32 inLen)
    // Offset: 0x17EE3F4
    ::Array<uint8_t>* EncodeBlock(::Array<uint8_t>* input, int inOff, int inLen);
    // private System.Byte[] DecodeBlock(System.Byte[] input, System.Int32 inOff, System.Int32 inLen)
    // Offset: 0x17EE758
    ::Array<uint8_t>* DecodeBlock(::Array<uint8_t>* input, int inOff, int inLen);
    // static private System.Void .cctor()
    // Offset: 0x17EEC2C
    static void _cctor();
    // public System.Void Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    // Offset: 0x17EE07C
    // Implemented from: Org.BouncyCastle.Crypto.IAsymmetricBlockCipher
    // Base method: System.Void IAsymmetricBlockCipher::Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    void Init(bool forEncryption, Org::BouncyCastle::Crypto::ICipherParameters* parameters);
    // public System.Int32 GetInputBlockSize()
    // Offset: 0x17EE23C
    // Implemented from: Org.BouncyCastle.Crypto.IAsymmetricBlockCipher
    // Base method: System.Int32 IAsymmetricBlockCipher::GetInputBlockSize()
    int GetInputBlockSize();
    // public System.Int32 GetOutputBlockSize()
    // Offset: 0x17EE310
    // Implemented from: Org.BouncyCastle.Crypto.IAsymmetricBlockCipher
    // Base method: System.Int32 IAsymmetricBlockCipher::GetOutputBlockSize()
    int GetOutputBlockSize();
    // public System.Byte[] ProcessBlock(System.Byte[] input, System.Int32 inOff, System.Int32 length)
    // Offset: 0x17EE3E4
    // Implemented from: Org.BouncyCastle.Crypto.IAsymmetricBlockCipher
    // Base method: System.Byte[] IAsymmetricBlockCipher::ProcessBlock(System.Byte[] input, System.Int32 inOff, System.Int32 length)
    ::Array<uint8_t>* ProcessBlock(::Array<uint8_t>* input, int inOff, int length);
  }; // Org.BouncyCastle.Crypto.Encodings.ISO9796d1Encoding
  #pragma pack(pop)
  static check_size<sizeof(ISO9796d1Encoding), 40 + sizeof(Org::BouncyCastle::Math::BigInteger*)> __Org_BouncyCastle_Crypto_Encodings_ISO9796d1EncodingSizeCheck;
  static_assert(sizeof(ISO9796d1Encoding) == 0x30);
}
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Encodings::ISO9796d1Encoding*, "Org.BouncyCastle.Crypto.Encodings", "ISO9796d1Encoding");
