// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.IAsymmetricBlockCipher
#include "Org/BouncyCastle/Crypto/IAsymmetricBlockCipher.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Math
namespace Org::BouncyCastle::Math {
  // Forward declaring type: BigInteger
  class BigInteger;
}
// Forward declaring namespace: Org::BouncyCastle::Crypto
namespace Org::BouncyCastle::Crypto {
  // Forward declaring type: ICipherParameters
  class ICipherParameters;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Crypto.Encodings
namespace Org::BouncyCastle::Crypto::Encodings {
  // Autogenerated type: Org.BouncyCastle.Crypto.Encodings.ISO9796d1Encoding
  class ISO9796d1Encoding : public ::Il2CppObject/*, public Org::BouncyCastle::Crypto::IAsymmetricBlockCipher*/ {
    public:
    // private readonly Org.BouncyCastle.Crypto.IAsymmetricBlockCipher engine
    // Offset: 0x10
    Org::BouncyCastle::Crypto::IAsymmetricBlockCipher* engine;
    // private System.Boolean forEncryption
    // Offset: 0x18
    bool forEncryption;
    // private System.Int32 bitSize
    // Offset: 0x1C
    int bitSize;
    // private System.Int32 padBits
    // Offset: 0x20
    int padBits;
    // private Org.BouncyCastle.Math.BigInteger modulus
    // Offset: 0x28
    Org::BouncyCastle::Math::BigInteger* modulus;
    // Creating interface conversion operator: operator Org::BouncyCastle::Crypto::IAsymmetricBlockCipher
    operator Org::BouncyCastle::Crypto::IAsymmetricBlockCipher() noexcept {
      return *reinterpret_cast<Org::BouncyCastle::Crypto::IAsymmetricBlockCipher*>(this);
    }
    // Get static field: static private readonly Org.BouncyCastle.Math.BigInteger Sixteen
    static Org::BouncyCastle::Math::BigInteger* _get_Sixteen();
    // Set static field: static private readonly Org.BouncyCastle.Math.BigInteger Sixteen
    static void _set_Sixteen(Org::BouncyCastle::Math::BigInteger* value);
    // Get static field: static private readonly Org.BouncyCastle.Math.BigInteger Six
    static Org::BouncyCastle::Math::BigInteger* _get_Six();
    // Set static field: static private readonly Org.BouncyCastle.Math.BigInteger Six
    static void _set_Six(Org::BouncyCastle::Math::BigInteger* value);
    // Get static field: static private readonly System.Byte[] shadows
    static ::Array<uint8_t>* _get_shadows();
    // Set static field: static private readonly System.Byte[] shadows
    static void _set_shadows(::Array<uint8_t>* value);
    // Get static field: static private readonly System.Byte[] inverse
    static ::Array<uint8_t>* _get_inverse();
    // Set static field: static private readonly System.Byte[] inverse
    static void _set_inverse(::Array<uint8_t>* value);
    // public System.Void .ctor(Org.BouncyCastle.Crypto.IAsymmetricBlockCipher cipher)
    // Offset: 0x14BF8FC
    static ISO9796d1Encoding* New_ctor(Org::BouncyCastle::Crypto::IAsymmetricBlockCipher* cipher);
    // private System.Byte[] EncodeBlock(System.Byte[] input, System.Int32 inOff, System.Int32 inLen)
    // Offset: 0x14BFCAC
    ::Array<uint8_t>* EncodeBlock(::Array<uint8_t>* input, int inOff, int inLen);
    // private System.Byte[] DecodeBlock(System.Byte[] input, System.Int32 inOff, System.Int32 inLen)
    // Offset: 0x14C0010
    ::Array<uint8_t>* DecodeBlock(::Array<uint8_t>* input, int inOff, int inLen);
    // static private System.Void .cctor()
    // Offset: 0x14C04E4
    static void _cctor();
    // public System.Void Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    // Offset: 0x14BF934
    // Implemented from: Org.BouncyCastle.Crypto.IAsymmetricBlockCipher
    // Base method: System.Void IAsymmetricBlockCipher::Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    void Init(bool forEncryption, Org::BouncyCastle::Crypto::ICipherParameters* parameters);
    // public System.Int32 GetInputBlockSize()
    // Offset: 0x14BFAF4
    // Implemented from: Org.BouncyCastle.Crypto.IAsymmetricBlockCipher
    // Base method: System.Int32 IAsymmetricBlockCipher::GetInputBlockSize()
    int GetInputBlockSize();
    // public System.Int32 GetOutputBlockSize()
    // Offset: 0x14BFBC8
    // Implemented from: Org.BouncyCastle.Crypto.IAsymmetricBlockCipher
    // Base method: System.Int32 IAsymmetricBlockCipher::GetOutputBlockSize()
    int GetOutputBlockSize();
    // public System.Byte[] ProcessBlock(System.Byte[] input, System.Int32 inOff, System.Int32 length)
    // Offset: 0x14BFC9C
    // Implemented from: Org.BouncyCastle.Crypto.IAsymmetricBlockCipher
    // Base method: System.Byte[] IAsymmetricBlockCipher::ProcessBlock(System.Byte[] input, System.Int32 inOff, System.Int32 length)
    ::Array<uint8_t>* ProcessBlock(::Array<uint8_t>* input, int inOff, int length);
  }; // Org.BouncyCastle.Crypto.Encodings.ISO9796d1Encoding
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Encodings::ISO9796d1Encoding*, "Org.BouncyCastle.Crypto.Encodings", "ISO9796d1Encoding");
#pragma pack(pop)
