// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Crypto
namespace Org::BouncyCastle::Crypto {
  // Forward declaring type: AsymmetricKeyParameter
  class AsymmetricKeyParameter;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Crypto
namespace Org::BouncyCastle::Crypto {
  // Autogenerated type: Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair
  class AsymmetricCipherKeyPair : public ::Il2CppObject {
    public:
    // private readonly Org.BouncyCastle.Crypto.AsymmetricKeyParameter publicParameter
    // Offset: 0x10
    Org::BouncyCastle::Crypto::AsymmetricKeyParameter* publicParameter;
    // private readonly Org.BouncyCastle.Crypto.AsymmetricKeyParameter privateParameter
    // Offset: 0x18
    Org::BouncyCastle::Crypto::AsymmetricKeyParameter* privateParameter;
    // public System.Void .ctor(Org.BouncyCastle.Crypto.AsymmetricKeyParameter publicParameter, Org.BouncyCastle.Crypto.AsymmetricKeyParameter privateParameter)
    // Offset: 0x158D8C0
    static AsymmetricCipherKeyPair* New_ctor(Org::BouncyCastle::Crypto::AsymmetricKeyParameter* publicParameter, Org::BouncyCastle::Crypto::AsymmetricKeyParameter* privateParameter);
    // public Org.BouncyCastle.Crypto.AsymmetricKeyParameter get_Public()
    // Offset: 0x158D9C0
    Org::BouncyCastle::Crypto::AsymmetricKeyParameter* get_Public();
    // public Org.BouncyCastle.Crypto.AsymmetricKeyParameter get_Private()
    // Offset: 0x158D9C8
    Org::BouncyCastle::Crypto::AsymmetricKeyParameter* get_Private();
  }; // Org.BouncyCastle.Crypto.AsymmetricCipherKeyPair
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::AsymmetricCipherKeyPair*, "Org.BouncyCastle.Crypto", "AsymmetricCipherKeyPair");
#pragma pack(pop)
