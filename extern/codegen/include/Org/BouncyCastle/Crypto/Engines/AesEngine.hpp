// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.IBlockCipher
#include "Org/BouncyCastle/Crypto/IBlockCipher.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Crypto
namespace Org::BouncyCastle::Crypto {
  // Forward declaring type: ICipherParameters
  class ICipherParameters;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Crypto.Engines
namespace Org::BouncyCastle::Crypto::Engines {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Crypto.Engines.AesEngine
  // [] Offset: FFFFFFFF
  class AesEngine : public ::Il2CppObject/*, public Org::BouncyCastle::Crypto::IBlockCipher*/ {
    public:
    // private System.Int32 ROUNDS
    // Size: 0x4
    // Offset: 0x10
    int ROUNDS;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: ROUNDS and: WorkingKey
    char __padding0[0x4] = {};
    // private System.UInt32[][] WorkingKey
    // Size: 0x8
    // Offset: 0x18
    ::Array<::Array<uint>*>* WorkingKey;
    // Field size check
    static_assert(sizeof(::Array<::Array<uint>*>*) == 0x8);
    // private System.UInt32 C0
    // Size: 0x4
    // Offset: 0x20
    uint C0;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 C1
    // Size: 0x4
    // Offset: 0x24
    uint C1;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 C2
    // Size: 0x4
    // Offset: 0x28
    uint C2;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 C3
    // Size: 0x4
    // Offset: 0x2C
    uint C3;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.Boolean forEncryption
    // Size: 0x1
    // Offset: 0x30
    bool forEncryption;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: forEncryption and: s
    char __padding6[0x7] = {};
    // private System.Byte[] s
    // Size: 0x8
    // Offset: 0x38
    ::Array<uint8_t>* s;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // Creating value type constructor for type: AesEngine
    AesEngine(int ROUNDS_ = {}, ::Array<::Array<uint>*>* WorkingKey_ = {}, uint C0_ = {}, uint C1_ = {}, uint C2_ = {}, uint C3_ = {}, bool forEncryption_ = {}, ::Array<uint8_t>* s_ = {}) noexcept : ROUNDS{ROUNDS_}, WorkingKey{WorkingKey_}, C0{C0_}, C1{C1_}, C2{C2_}, C3{C3_}, forEncryption{forEncryption_}, s{s_} {}
    // Creating interface conversion operator: operator Org::BouncyCastle::Crypto::IBlockCipher
    operator Org::BouncyCastle::Crypto::IBlockCipher() noexcept {
      return *reinterpret_cast<Org::BouncyCastle::Crypto::IBlockCipher*>(this);
    }
    // Get static field: static private readonly System.Byte[] S
    static ::Array<uint8_t>* _get_S();
    // Set static field: static private readonly System.Byte[] S
    static void _set_S(::Array<uint8_t>* value);
    // Get static field: static private readonly System.Byte[] Si
    static ::Array<uint8_t>* _get_Si();
    // Set static field: static private readonly System.Byte[] Si
    static void _set_Si(::Array<uint8_t>* value);
    // Get static field: static private readonly System.Byte[] rcon
    static ::Array<uint8_t>* _get_rcon();
    // Set static field: static private readonly System.Byte[] rcon
    static void _set_rcon(::Array<uint8_t>* value);
    // Get static field: static private readonly System.UInt32[] T0
    static ::Array<uint>* _get_T0();
    // Set static field: static private readonly System.UInt32[] T0
    static void _set_T0(::Array<uint>* value);
    // Get static field: static private readonly System.UInt32[] Tinv0
    static ::Array<uint>* _get_Tinv0();
    // Set static field: static private readonly System.UInt32[] Tinv0
    static void _set_Tinv0(::Array<uint>* value);
    // static private System.UInt32 Shift(System.UInt32 r, System.Int32 shift)
    // Offset: 0x17F1184
    static uint Shift(uint r, int shift);
    // static private System.UInt32 FFmulX(System.UInt32 x)
    // Offset: 0x17F118C
    static uint FFmulX(uint x);
    // static private System.UInt32 FFmulX2(System.UInt32 x)
    // Offset: 0x17F11AC
    static uint FFmulX2(uint x);
    // static private System.UInt32 Inv_Mcol(System.UInt32 x)
    // Offset: 0x17F11C8
    static uint Inv_Mcol(uint x);
    // static private System.UInt32 SubWord(System.UInt32 x)
    // Offset: 0x17F1270
    static uint SubWord(uint x);
    // private System.UInt32[][] GenerateWorkingKey(System.Byte[] key, System.Boolean forEncryption)
    // Offset: 0x17F134C
    ::Array<::Array<uint>*>* GenerateWorkingKey(::Array<uint8_t>* key, bool forEncryption);
    // private System.Void UnPackBlock(System.Byte[] bytes, System.Int32 off)
    // Offset: 0x17F2524
    void UnPackBlock(::Array<uint8_t>* bytes, int off);
    // private System.Void PackBlock(System.Byte[] bytes, System.Int32 off)
    // Offset: 0x17F3808
    void PackBlock(::Array<uint8_t>* bytes, int off);
    // private System.Void EncryptBlock(System.UInt32[][] KW)
    // Offset: 0x17F25A0
    void EncryptBlock(::Array<::Array<uint>*>* KW);
    // private System.Void DecryptBlock(System.UInt32[][] KW)
    // Offset: 0x17F2EC8
    void DecryptBlock(::Array<::Array<uint>*>* KW);
    // static private System.Void .cctor()
    // Offset: 0x17F387C
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x17F21D8
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static AesEngine* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Crypto::Engines::AesEngine::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<AesEngine*, creationType>()));
    }
    // public System.Void Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    // Offset: 0x17F21E0
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Void IBlockCipher::Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    void Init(bool forEncryption, Org::BouncyCastle::Crypto::ICipherParameters* parameters);
    // public System.String get_AlgorithmName()
    // Offset: 0x17F23A8
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.String IBlockCipher::get_AlgorithmName()
    ::Il2CppString* get_AlgorithmName();
    // public System.Boolean get_IsPartialBlockOkay()
    // Offset: 0x17F23F0
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Boolean IBlockCipher::get_IsPartialBlockOkay()
    bool get_IsPartialBlockOkay();
    // public System.Int32 GetBlockSize()
    // Offset: 0x17F23F8
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Int32 IBlockCipher::GetBlockSize()
    int GetBlockSize();
    // public System.Int32 ProcessBlock(System.Byte[] input, System.Int32 inOff, System.Byte[] output, System.Int32 outOff)
    // Offset: 0x17F2400
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Int32 IBlockCipher::ProcessBlock(System.Byte[] input, System.Int32 inOff, System.Byte[] output, System.Int32 outOff)
    int ProcessBlock(::Array<uint8_t>* input, int inOff, ::Array<uint8_t>* output, int outOff);
    // public System.Void Reset()
    // Offset: 0x17F3878
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Void IBlockCipher::Reset()
    void Reset();
  }; // Org.BouncyCastle.Crypto.Engines.AesEngine
  #pragma pack(pop)
  static check_size<sizeof(AesEngine), 56 + sizeof(::Array<uint8_t>*)> __Org_BouncyCastle_Crypto_Engines_AesEngineSizeCheck;
  static_assert(sizeof(AesEngine) == 0x40);
}
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Engines::AesEngine*, "Org.BouncyCastle.Crypto.Engines", "AesEngine");
