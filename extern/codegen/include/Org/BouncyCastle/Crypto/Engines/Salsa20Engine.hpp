// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.IStreamCipher
#include "Org/BouncyCastle/Crypto/IStreamCipher.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Crypto
namespace Org::BouncyCastle::Crypto {
  // Forward declaring type: ICipherParameters
  class ICipherParameters;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Crypto.Engines
namespace Org::BouncyCastle::Crypto::Engines {
  // Size: 0x40
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Crypto.Engines.Salsa20Engine
  // [] Offset: FFFFFFFF
  class Salsa20Engine : public ::Il2CppObject/*, public Org::BouncyCastle::Crypto::IStreamCipher*/ {
    public:
    // protected System.Int32 rounds
    // Size: 0x4
    // Offset: 0x10
    int rounds;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 index
    // Size: 0x4
    // Offset: 0x14
    int index;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // System.UInt32[] engineState
    // Size: 0x8
    // Offset: 0x18
    ::Array<uint>* engineState;
    // Field size check
    static_assert(sizeof(::Array<uint>*) == 0x8);
    // System.UInt32[] x
    // Size: 0x8
    // Offset: 0x20
    ::Array<uint>* x;
    // Field size check
    static_assert(sizeof(::Array<uint>*) == 0x8);
    // private System.Byte[] keyStream
    // Size: 0x8
    // Offset: 0x28
    ::Array<uint8_t>* keyStream;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Boolean initialised
    // Size: 0x1
    // Offset: 0x30
    bool initialised;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: initialised and: cW0
    char __padding5[0x3] = {};
    // private System.UInt32 cW0
    // Size: 0x4
    // Offset: 0x34
    uint cW0;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 cW1
    // Size: 0x4
    // Offset: 0x38
    uint cW1;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // private System.UInt32 cW2
    // Size: 0x4
    // Offset: 0x3C
    uint cW2;
    // Field size check
    static_assert(sizeof(uint) == 0x4);
    // Creating value type constructor for type: Salsa20Engine
    Salsa20Engine(int rounds_ = {}, int index_ = {}, ::Array<uint>* engineState_ = {}, ::Array<uint>* x_ = {}, ::Array<uint8_t>* keyStream_ = {}, bool initialised_ = {}, uint cW0_ = {}, uint cW1_ = {}, uint cW2_ = {}) noexcept : rounds{rounds_}, index{index_}, engineState{engineState_}, x{x_}, keyStream{keyStream_}, initialised{initialised_}, cW0{cW0_}, cW1{cW1_}, cW2{cW2_} {}
    // Creating interface conversion operator: operator Org::BouncyCastle::Crypto::IStreamCipher
    operator Org::BouncyCastle::Crypto::IStreamCipher() noexcept {
      return *reinterpret_cast<Org::BouncyCastle::Crypto::IStreamCipher*>(this);
    }
    // Get static field: static public readonly System.Int32 DEFAULT_ROUNDS
    static int _get_DEFAULT_ROUNDS();
    // Set static field: static public readonly System.Int32 DEFAULT_ROUNDS
    static void _set_DEFAULT_ROUNDS(int value);
    // Get static field: static private readonly System.UInt32[] TAU_SIGMA
    static ::Array<uint>* _get_TAU_SIGMA();
    // Set static field: static private readonly System.UInt32[] TAU_SIGMA
    static void _set_TAU_SIGMA(::Array<uint>* value);
    // [ObsoleteAttribute] Offset: 0xD14F20
    // Get static field: static protected readonly System.Byte[] sigma
    static ::Array<uint8_t>* _get_sigma();
    // Set static field: static protected readonly System.Byte[] sigma
    static void _set_sigma(::Array<uint8_t>* value);
    // [ObsoleteAttribute] Offset: 0xD14F30
    // Get static field: static protected readonly System.Byte[] tau
    static ::Array<uint8_t>* _get_tau();
    // Set static field: static protected readonly System.Byte[] tau
    static void _set_tau(::Array<uint8_t>* value);
    // System.Void PackTauOrSigma(System.Int32 keyLength, System.UInt32[] state, System.Int32 stateOffset)
    // Offset: 0x1CD0DC4
    void PackTauOrSigma(int keyLength, ::Array<uint>* state, int stateOffset);
    // public System.Void .ctor(System.Int32 rounds)
    // Offset: 0x1CD0FC8
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Salsa20Engine* New_ctor(int rounds) {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Crypto::Engines::Salsa20Engine::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Salsa20Engine*, creationType>(rounds)));
    }
    // protected System.Int32 get_NonceSize()
    // Offset: 0x1CD1438
    int get_NonceSize();
    // public System.String get_AlgorithmName()
    // Offset: 0x1CD1440
    ::Il2CppString* get_AlgorithmName();
    // protected System.Void AdvanceCounter()
    // Offset: 0x1CD1514
    void AdvanceCounter();
    // protected System.Void ResetCounter()
    // Offset: 0x1CD1840
    void ResetCounter();
    // protected System.Void SetKey(System.Byte[] keyBytes, System.Byte[] ivBytes)
    // Offset: 0x1CD1878
    void SetKey(::Array<uint8_t>* keyBytes, ::Array<uint8_t>* ivBytes);
    // protected System.Void GenerateKeyStream(System.Byte[] output)
    // Offset: 0x1CD1AE0
    void GenerateKeyStream(::Array<uint8_t>* output);
    // static System.Void SalsaCore(System.Int32 rounds, System.UInt32[] input, System.UInt32[] x)
    // Offset: 0x1CD1B7C
    static void SalsaCore(int rounds, ::Array<uint>* input, ::Array<uint>* x);
    // private System.Void ResetLimitCounter()
    // Offset: 0x1CD1834
    void ResetLimitCounter();
    // private System.Boolean LimitExceeded(System.UInt32 len)
    // Offset: 0x1CD17DC
    bool LimitExceeded(uint len);
    // static private System.Void .cctor()
    // Offset: 0x1CD21F4
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x1CD0F58
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static Salsa20Engine* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Crypto::Engines::Salsa20Engine::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<Salsa20Engine*, creationType>()));
    }
    // public System.Void Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    // Offset: 0x1CD10D8
    // Implemented from: Org.BouncyCastle.Crypto.IStreamCipher
    // Base method: System.Void IStreamCipher::Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    void Init(bool forEncryption, Org::BouncyCastle::Crypto::ICipherParameters* parameters);
    // public System.Void ProcessBytes(System.Byte[] inBytes, System.Int32 inOff, System.Int32 len, System.Byte[] outBytes, System.Int32 outOff)
    // Offset: 0x1CD1578
    // Implemented from: Org.BouncyCastle.Crypto.IStreamCipher
    // Base method: System.Void IStreamCipher::ProcessBytes(System.Byte[] inBytes, System.Int32 inOff, System.Int32 len, System.Byte[] outBytes, System.Int32 outOff)
    void ProcessBytes(::Array<uint8_t>* inBytes, int inOff, int len, ::Array<uint8_t>* outBytes, int outOff);
    // public System.Void Reset()
    // Offset: 0x1CD1818
    // Implemented from: Org.BouncyCastle.Crypto.IStreamCipher
    // Base method: System.Void IStreamCipher::Reset()
    void Reset();
  }; // Org.BouncyCastle.Crypto.Engines.Salsa20Engine
  #pragma pack(pop)
  static check_size<sizeof(Salsa20Engine), 60 + sizeof(uint)> __Org_BouncyCastle_Crypto_Engines_Salsa20EngineSizeCheck;
  static_assert(sizeof(Salsa20Engine) == 0x40);
}
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Engines::Salsa20Engine*, "Org.BouncyCastle.Crypto.Engines", "Salsa20Engine");
