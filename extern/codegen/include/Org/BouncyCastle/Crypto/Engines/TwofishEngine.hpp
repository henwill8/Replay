// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.IBlockCipher
#include "Org/BouncyCastle/Crypto/IBlockCipher.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Crypto
namespace Org::BouncyCastle::Crypto {
  // Forward declaring type: ICipherParameters
  class ICipherParameters;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Crypto.Engines
namespace Org::BouncyCastle::Crypto::Engines {
  // Size: 0x58
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Crypto.Engines.TwofishEngine
  // [] Offset: FFFFFFFF
  class TwofishEngine : public ::Il2CppObject/*, public Org::BouncyCastle::Crypto::IBlockCipher*/ {
    public:
    // private System.Boolean encrypting
    // Size: 0x1
    // Offset: 0x10
    bool encrypting;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: encrypting and: gMDS0
    char __padding0[0x7] = {};
    // private System.Int32[] gMDS0
    // Size: 0x8
    // Offset: 0x18
    ::Array<int>* gMDS0;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // private System.Int32[] gMDS1
    // Size: 0x8
    // Offset: 0x20
    ::Array<int>* gMDS1;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // private System.Int32[] gMDS2
    // Size: 0x8
    // Offset: 0x28
    ::Array<int>* gMDS2;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // private System.Int32[] gMDS3
    // Size: 0x8
    // Offset: 0x30
    ::Array<int>* gMDS3;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // private System.Int32[] gSubKeys
    // Size: 0x8
    // Offset: 0x38
    ::Array<int>* gSubKeys;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // private System.Int32[] gSBox
    // Size: 0x8
    // Offset: 0x40
    ::Array<int>* gSBox;
    // Field size check
    static_assert(sizeof(::Array<int>*) == 0x8);
    // private System.Int32 k64Cnt
    // Size: 0x4
    // Offset: 0x48
    int k64Cnt;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: k64Cnt and: workingKey
    char __padding7[0x4] = {};
    // private System.Byte[] workingKey
    // Size: 0x8
    // Offset: 0x50
    ::Array<uint8_t>* workingKey;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // Creating value type constructor for type: TwofishEngine
    TwofishEngine(bool encrypting_ = {}, ::Array<int>* gMDS0_ = {}, ::Array<int>* gMDS1_ = {}, ::Array<int>* gMDS2_ = {}, ::Array<int>* gMDS3_ = {}, ::Array<int>* gSubKeys_ = {}, ::Array<int>* gSBox_ = {}, int k64Cnt_ = {}, ::Array<uint8_t>* workingKey_ = {}) noexcept : encrypting{encrypting_}, gMDS0{gMDS0_}, gMDS1{gMDS1_}, gMDS2{gMDS2_}, gMDS3{gMDS3_}, gSubKeys{gSubKeys_}, gSBox{gSBox_}, k64Cnt{k64Cnt_}, workingKey{workingKey_} {}
    // Creating interface conversion operator: operator Org::BouncyCastle::Crypto::IBlockCipher
    operator Org::BouncyCastle::Crypto::IBlockCipher() noexcept {
      return *reinterpret_cast<Org::BouncyCastle::Crypto::IBlockCipher*>(this);
    }
    // Get static field: static private readonly System.Byte[,] P
    static ::Array<uint8_t>* _get_P();
    // Set static field: static private readonly System.Byte[,] P
    static void _set_P(::Array<uint8_t>* value);
    // private System.Void SetKey(System.Byte[] key)
    // Offset: 0x17C3444
    void SetKey(::Array<uint8_t>* key);
    // private System.Void EncryptBlock(System.Byte[] src, System.Int32 srcIndex, System.Byte[] dst, System.Int32 dstIndex)
    // Offset: 0x17C3F88
    void EncryptBlock(::Array<uint8_t>* src, int srcIndex, ::Array<uint8_t>* dst, int dstIndex);
    // private System.Void DecryptBlock(System.Byte[] src, System.Int32 srcIndex, System.Byte[] dst, System.Int32 dstIndex)
    // Offset: 0x17C4210
    void DecryptBlock(::Array<uint8_t>* src, int srcIndex, ::Array<uint8_t>* dst, int dstIndex);
    // private System.Int32 F32(System.Int32 x, System.Int32[] k32)
    // Offset: 0x17C45CC
    int F32(int x, ::Array<int>* k32);
    // private System.Int32 RS_MDS_Encode(System.Int32 k0, System.Int32 k1)
    // Offset: 0x17C452C
    int RS_MDS_Encode(int k0, int k1);
    // private System.Int32 RS_rem(System.Int32 x)
    // Offset: 0x17C4C60
    int RS_rem(int x);
    // private System.Int32 LFSR1(System.Int32 x)
    // Offset: 0x17C4CA0
    int LFSR1(int x);
    // private System.Int32 LFSR2(System.Int32 x)
    // Offset: 0x17C4CB4
    int LFSR2(int x);
    // private System.Int32 Mx_X(System.Int32 x)
    // Offset: 0x17C325C
    int Mx_X(int x);
    // private System.Int32 Mx_Y(System.Int32 x)
    // Offset: 0x17C3284
    int Mx_Y(int x);
    // private System.Int32 M_b0(System.Int32 x)
    // Offset: 0x17C4A7C
    int M_b0(int x);
    // private System.Int32 M_b1(System.Int32 x)
    // Offset: 0x17C4A84
    int M_b1(int x);
    // private System.Int32 M_b2(System.Int32 x)
    // Offset: 0x17C4A8C
    int M_b2(int x);
    // private System.Int32 M_b3(System.Int32 x)
    // Offset: 0x17C4A94
    int M_b3(int x);
    // private System.Int32 Fe32_0(System.Int32 x)
    // Offset: 0x17C4A9C
    int Fe32_0(int x);
    // private System.Int32 Fe32_3(System.Int32 x)
    // Offset: 0x17C4B34
    int Fe32_3(int x);
    // private System.Int32 BytesTo32Bits(System.Byte[] b, System.Int32 p)
    // Offset: 0x17C44B0
    int BytesTo32Bits(::Array<uint8_t>* b, int p);
    // private System.Void Bits32ToBytes(System.Int32 inData, System.Byte[] b, System.Int32 offset)
    // Offset: 0x17C4BD4
    void Bits32ToBytes(int inData, ::Array<uint8_t>* b, int offset);
    // static private System.Void .cctor()
    // Offset: 0x17C4CD8
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x17C2E58
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TwofishEngine* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Crypto::Engines::TwofishEngine::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TwofishEngine*, creationType>()));
    }
    // public System.Void Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    // Offset: 0x17C32B8
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Void IBlockCipher::Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    void Init(bool forEncryption, Org::BouncyCastle::Crypto::ICipherParameters* parameters);
    // public System.String get_AlgorithmName()
    // Offset: 0x17C3E14
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.String IBlockCipher::get_AlgorithmName()
    ::Il2CppString* get_AlgorithmName();
    // public System.Boolean get_IsPartialBlockOkay()
    // Offset: 0x17C3E5C
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Boolean IBlockCipher::get_IsPartialBlockOkay()
    bool get_IsPartialBlockOkay();
    // public System.Int32 ProcessBlock(System.Byte[] input, System.Int32 inOff, System.Byte[] output, System.Int32 outOff)
    // Offset: 0x17C3E64
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Int32 IBlockCipher::ProcessBlock(System.Byte[] input, System.Int32 inOff, System.Byte[] output, System.Int32 outOff)
    int ProcessBlock(::Array<uint8_t>* input, int inOff, ::Array<uint8_t>* output, int outOff);
    // public System.Void Reset()
    // Offset: 0x17C4498
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Void IBlockCipher::Reset()
    void Reset();
    // public System.Int32 GetBlockSize()
    // Offset: 0x17C44A8
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Int32 IBlockCipher::GetBlockSize()
    int GetBlockSize();
  }; // Org.BouncyCastle.Crypto.Engines.TwofishEngine
  #pragma pack(pop)
  static check_size<sizeof(TwofishEngine), 80 + sizeof(::Array<uint8_t>*)> __Org_BouncyCastle_Crypto_Engines_TwofishEngineSizeCheck;
  static_assert(sizeof(TwofishEngine) == 0x58);
}
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Engines::TwofishEngine*, "Org.BouncyCastle.Crypto.Engines", "TwofishEngine");
