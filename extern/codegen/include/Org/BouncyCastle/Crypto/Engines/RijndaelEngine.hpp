// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.IBlockCipher
#include "Org/BouncyCastle/Crypto/IBlockCipher.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Crypto
namespace Org::BouncyCastle::Crypto {
  // Forward declaring type: ICipherParameters
  class ICipherParameters;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Crypto.Engines
namespace Org::BouncyCastle::Crypto::Engines {
  // Size: 0x68
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Crypto.Engines.RijndaelEngine
  // [] Offset: FFFFFFFF
  class RijndaelEngine : public ::Il2CppObject/*, public Org::BouncyCastle::Crypto::IBlockCipher*/ {
    public:
    // private System.Int32 BC
    // Size: 0x4
    // Offset: 0x10
    int BC;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: BC and: BC_MASK
    char __padding0[0x4] = {};
    // private System.Int64 BC_MASK
    // Size: 0x8
    // Offset: 0x18
    int64_t BC_MASK;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int32 ROUNDS
    // Size: 0x4
    // Offset: 0x20
    int ROUNDS;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 blockBits
    // Size: 0x4
    // Offset: 0x24
    int blockBits;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int64[][] workingKey
    // Size: 0x8
    // Offset: 0x28
    ::Array<::Array<int64_t>*>* workingKey;
    // Field size check
    static_assert(sizeof(::Array<::Array<int64_t>*>*) == 0x8);
    // private System.Int64 A0
    // Size: 0x8
    // Offset: 0x30
    int64_t A0;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 A1
    // Size: 0x8
    // Offset: 0x38
    int64_t A1;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 A2
    // Size: 0x8
    // Offset: 0x40
    int64_t A2;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 A3
    // Size: 0x8
    // Offset: 0x48
    int64_t A3;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Boolean forEncryption
    // Size: 0x1
    // Offset: 0x50
    bool forEncryption;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: forEncryption and: shifts0SC
    char __padding9[0x7] = {};
    // private System.Byte[] shifts0SC
    // Size: 0x8
    // Offset: 0x58
    ::Array<uint8_t>* shifts0SC;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Byte[] shifts1SC
    // Size: 0x8
    // Offset: 0x60
    ::Array<uint8_t>* shifts1SC;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // Creating value type constructor for type: RijndaelEngine
    RijndaelEngine(int BC_ = {}, int64_t BC_MASK_ = {}, int ROUNDS_ = {}, int blockBits_ = {}, ::Array<::Array<int64_t>*>* workingKey_ = {}, int64_t A0_ = {}, int64_t A1_ = {}, int64_t A2_ = {}, int64_t A3_ = {}, bool forEncryption_ = {}, ::Array<uint8_t>* shifts0SC_ = {}, ::Array<uint8_t>* shifts1SC_ = {}) noexcept : BC{BC_}, BC_MASK{BC_MASK_}, ROUNDS{ROUNDS_}, blockBits{blockBits_}, workingKey{workingKey_}, A0{A0_}, A1{A1_}, A2{A2_}, A3{A3_}, forEncryption{forEncryption_}, shifts0SC{shifts0SC_}, shifts1SC{shifts1SC_} {}
    // Creating interface conversion operator: operator Org::BouncyCastle::Crypto::IBlockCipher
    operator Org::BouncyCastle::Crypto::IBlockCipher() noexcept {
      return *reinterpret_cast<Org::BouncyCastle::Crypto::IBlockCipher*>(this);
    }
    // Get static field: static private readonly System.Int32 MAXROUNDS
    static int _get_MAXROUNDS();
    // Set static field: static private readonly System.Int32 MAXROUNDS
    static void _set_MAXROUNDS(int value);
    // Get static field: static private readonly System.Int32 MAXKC
    static int _get_MAXKC();
    // Set static field: static private readonly System.Int32 MAXKC
    static void _set_MAXKC(int value);
    // Get static field: static private readonly System.Byte[] Logtable
    static ::Array<uint8_t>* _get_Logtable();
    // Set static field: static private readonly System.Byte[] Logtable
    static void _set_Logtable(::Array<uint8_t>* value);
    // Get static field: static private readonly System.Byte[] Alogtable
    static ::Array<uint8_t>* _get_Alogtable();
    // Set static field: static private readonly System.Byte[] Alogtable
    static void _set_Alogtable(::Array<uint8_t>* value);
    // Get static field: static private readonly System.Byte[] S
    static ::Array<uint8_t>* _get_S();
    // Set static field: static private readonly System.Byte[] S
    static void _set_S(::Array<uint8_t>* value);
    // Get static field: static private readonly System.Byte[] Si
    static ::Array<uint8_t>* _get_Si();
    // Set static field: static private readonly System.Byte[] Si
    static void _set_Si(::Array<uint8_t>* value);
    // Get static field: static private readonly System.Byte[] rcon
    static ::Array<uint8_t>* _get_rcon();
    // Set static field: static private readonly System.Byte[] rcon
    static void _set_rcon(::Array<uint8_t>* value);
    // Get static field: static private readonly System.Byte[][] shifts0
    static ::Array<::Array<uint8_t>*>* _get_shifts0();
    // Set static field: static private readonly System.Byte[][] shifts0
    static void _set_shifts0(::Array<::Array<uint8_t>*>* value);
    // Get static field: static private readonly System.Byte[][] shifts1
    static ::Array<::Array<uint8_t>*>* _get_shifts1();
    // Set static field: static private readonly System.Byte[][] shifts1
    static void _set_shifts1(::Array<::Array<uint8_t>*>* value);
    // private System.Byte Mul0x2(System.Int32 b)
    // Offset: 0x1CCCC5C
    uint8_t Mul0x2(int b);
    // private System.Byte Mul0x3(System.Int32 b)
    // Offset: 0x1CCCD1C
    uint8_t Mul0x3(int b);
    // private System.Byte Mul0x9(System.Int32 b)
    // Offset: 0x1CCCDDC
    uint8_t Mul0x9(int b);
    // private System.Byte Mul0xb(System.Int32 b)
    // Offset: 0x1CCCE80
    uint8_t Mul0xb(int b);
    // private System.Byte Mul0xd(System.Int32 b)
    // Offset: 0x1CCCF24
    uint8_t Mul0xd(int b);
    // private System.Byte Mul0xe(System.Int32 b)
    // Offset: 0x1CCCFC8
    uint8_t Mul0xe(int b);
    // private System.Void KeyAddition(System.Int64[] rk)
    // Offset: 0x1CCD06C
    void KeyAddition(::Array<int64_t>* rk);
    // private System.Int64 Shift(System.Int64 r, System.Int32 shift)
    // Offset: 0x1CCD0FC
    int64_t Shift(int64_t r, int shift);
    // private System.Void ShiftRow(System.Byte[] shiftsSC)
    // Offset: 0x1CCD128
    void ShiftRow(::Array<uint8_t>* shiftsSC);
    // private System.Int64 ApplyS(System.Int64 r, System.Byte[] box)
    // Offset: 0x1CCD1FC
    int64_t ApplyS(int64_t r, ::Array<uint8_t>* box);
    // private System.Void Substitution(System.Byte[] box)
    // Offset: 0x1CCD270
    void Substitution(::Array<uint8_t>* box);
    // private System.Void MixColumn()
    // Offset: 0x1CCD2E0
    void MixColumn();
    // private System.Void InvMixColumn()
    // Offset: 0x1CCD484
    void InvMixColumn();
    // private System.Int64[][] GenerateWorkingKey(System.Byte[] key)
    // Offset: 0x1CCD7C8
    ::Array<::Array<int64_t>*>* GenerateWorkingKey(::Array<uint8_t>* key);
    // public System.Void .ctor(System.Int32 blockBits)
    // Offset: 0x1CCE064
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RijndaelEngine* New_ctor(int blockBits) {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Crypto::Engines::RijndaelEngine::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RijndaelEngine*, creationType>(blockBits)));
    }
    // private System.Void UnPackBlock(System.Byte[] bytes, System.Int32 off)
    // Offset: 0x1CCE704
    void UnPackBlock(::Array<uint8_t>* bytes, int off);
    // private System.Void PackBlock(System.Byte[] bytes, System.Int32 off)
    // Offset: 0x1CCEAF4
    void PackBlock(::Array<uint8_t>* bytes, int off);
    // private System.Void EncryptBlock(System.Int64[][] rk)
    // Offset: 0x1CCE848
    void EncryptBlock(::Array<::Array<int64_t>*>* rk);
    // private System.Void DecryptBlock(System.Int64[][] rk)
    // Offset: 0x1CCE9A8
    void DecryptBlock(::Array<::Array<int64_t>*>* rk);
    // static private System.Void .cctor()
    // Offset: 0x1CCEBC4
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x1CCE05C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static RijndaelEngine* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Crypto::Engines::RijndaelEngine::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<RijndaelEngine*, creationType>()));
    }
    // public System.Void Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    // Offset: 0x1CCE3BC
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Void IBlockCipher::Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    void Init(bool forEncryption, Org::BouncyCastle::Crypto::ICipherParameters* parameters);
    // public System.String get_AlgorithmName()
    // Offset: 0x1CCE558
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.String IBlockCipher::get_AlgorithmName()
    ::Il2CppString* get_AlgorithmName();
    // public System.Boolean get_IsPartialBlockOkay()
    // Offset: 0x1CCE5A0
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Boolean IBlockCipher::get_IsPartialBlockOkay()
    bool get_IsPartialBlockOkay();
    // public System.Int32 GetBlockSize()
    // Offset: 0x1CCE5A8
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Int32 IBlockCipher::GetBlockSize()
    int GetBlockSize();
    // public System.Int32 ProcessBlock(System.Byte[] input, System.Int32 inOff, System.Byte[] output, System.Int32 outOff)
    // Offset: 0x1CCE5BC
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Int32 IBlockCipher::ProcessBlock(System.Byte[] input, System.Int32 inOff, System.Byte[] output, System.Int32 outOff)
    int ProcessBlock(::Array<uint8_t>* input, int inOff, ::Array<uint8_t>* output, int outOff);
    // public System.Void Reset()
    // Offset: 0x1CCEBC0
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Void IBlockCipher::Reset()
    void Reset();
  }; // Org.BouncyCastle.Crypto.Engines.RijndaelEngine
  #pragma pack(pop)
  static check_size<sizeof(RijndaelEngine), 96 + sizeof(::Array<uint8_t>*)> __Org_BouncyCastle_Crypto_Engines_RijndaelEngineSizeCheck;
  static_assert(sizeof(RijndaelEngine) == 0x68);
}
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Engines::RijndaelEngine*, "Org.BouncyCastle.Crypto.Engines", "RijndaelEngine");
