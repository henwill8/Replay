// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.IBlockCipher
#include "Org/BouncyCastle/Crypto/IBlockCipher.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Crypto::Engines
namespace Org::BouncyCastle::Crypto::Engines {
}
// Forward declaring namespace: Org::BouncyCastle::Crypto
namespace Org::BouncyCastle::Crypto {
  // Forward declaring type: ICipherParameters
  class ICipherParameters;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Crypto.Engines
namespace Org::BouncyCastle::Crypto::Engines {
  // Size: 0x39
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Crypto.Engines.ThreefishEngine
  // [] Offset: FFFFFFFF
  class ThreefishEngine : public ::Il2CppObject/*, public Org::BouncyCastle::Crypto::IBlockCipher*/ {
    public:
    // Nested type: Org::BouncyCastle::Crypto::Engines::ThreefishEngine::ThreefishCipher
    class ThreefishCipher;
    // Nested type: Org::BouncyCastle::Crypto::Engines::ThreefishEngine::Threefish256Cipher
    class Threefish256Cipher;
    // Nested type: Org::BouncyCastle::Crypto::Engines::ThreefishEngine::Threefish512Cipher
    class Threefish512Cipher;
    // Nested type: Org::BouncyCastle::Crypto::Engines::ThreefishEngine::Threefish1024Cipher
    class Threefish1024Cipher;
    // private readonly System.Int32 blocksizeBytes
    // Size: 0x4
    // Offset: 0x10
    int blocksizeBytes;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.Int32 blocksizeWords
    // Size: 0x4
    // Offset: 0x14
    int blocksizeWords;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private readonly System.UInt64[] currentBlock
    // Size: 0x8
    // Offset: 0x18
    ::Array<uint64_t>* currentBlock;
    // Field size check
    static_assert(sizeof(::Array<uint64_t>*) == 0x8);
    // private readonly System.UInt64[] t
    // Size: 0x8
    // Offset: 0x20
    ::Array<uint64_t>* t;
    // Field size check
    static_assert(sizeof(::Array<uint64_t>*) == 0x8);
    // private readonly System.UInt64[] kw
    // Size: 0x8
    // Offset: 0x28
    ::Array<uint64_t>* kw;
    // Field size check
    static_assert(sizeof(::Array<uint64_t>*) == 0x8);
    // private readonly Org.BouncyCastle.Crypto.Engines.ThreefishEngine/ThreefishCipher cipher
    // Size: 0x8
    // Offset: 0x30
    Org::BouncyCastle::Crypto::Engines::ThreefishEngine::ThreefishCipher* cipher;
    // Field size check
    static_assert(sizeof(Org::BouncyCastle::Crypto::Engines::ThreefishEngine::ThreefishCipher*) == 0x8);
    // private System.Boolean forEncryption
    // Size: 0x1
    // Offset: 0x38
    bool forEncryption;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: ThreefishEngine
    ThreefishEngine(int blocksizeBytes_ = {}, int blocksizeWords_ = {}, ::Array<uint64_t>* currentBlock_ = {}, ::Array<uint64_t>* t_ = {}, ::Array<uint64_t>* kw_ = {}, Org::BouncyCastle::Crypto::Engines::ThreefishEngine::ThreefishCipher* cipher_ = {}, bool forEncryption_ = {}) noexcept : blocksizeBytes{blocksizeBytes_}, blocksizeWords{blocksizeWords_}, currentBlock{currentBlock_}, t{t_}, kw{kw_}, cipher{cipher_}, forEncryption{forEncryption_} {}
    // Creating interface conversion operator: operator Org::BouncyCastle::Crypto::IBlockCipher
    operator Org::BouncyCastle::Crypto::IBlockCipher() noexcept {
      return *reinterpret_cast<Org::BouncyCastle::Crypto::IBlockCipher*>(this);
    }
    // Get static field: static private readonly System.Int32[] MOD9
    static ::Array<int>* _get_MOD9();
    // Set static field: static private readonly System.Int32[] MOD9
    static void _set_MOD9(::Array<int>* value);
    // Get static field: static private readonly System.Int32[] MOD17
    static ::Array<int>* _get_MOD17();
    // Set static field: static private readonly System.Int32[] MOD17
    static void _set_MOD17(::Array<int>* value);
    // Get static field: static private readonly System.Int32[] MOD5
    static ::Array<int>* _get_MOD5();
    // Set static field: static private readonly System.Int32[] MOD5
    static void _set_MOD5(::Array<int>* value);
    // Get static field: static private readonly System.Int32[] MOD3
    static ::Array<int>* _get_MOD3();
    // Set static field: static private readonly System.Int32[] MOD3
    static void _set_MOD3(::Array<int>* value);
    // static private System.Void .cctor()
    // Offset: 0x1CD91BC
    static void _cctor();
    // public System.Void .ctor(System.Int32 blocksizeBits)
    // Offset: 0x1CD9404
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static ThreefishEngine* New_ctor(int blocksizeBits) {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Crypto::Engines::ThreefishEngine::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<ThreefishEngine*, creationType>(blocksizeBits)));
    }
    // System.Void Init(System.Boolean forEncryption, System.UInt64[] key, System.UInt64[] tweak)
    // Offset: 0x1CD9A08
    void Init(bool forEncryption, ::Array<uint64_t>* key, ::Array<uint64_t>* tweak);
    // private System.Void SetKey(System.UInt64[] key)
    // Offset: 0x1CD9A58
    void SetKey(::Array<uint64_t>* key);
    // private System.Void SetTweak(System.UInt64[] tweak)
    // Offset: 0x1CD9C04
    void SetTweak(::Array<uint64_t>* tweak);
    // System.Int32 ProcessBlock(System.UInt64[] inWords, System.UInt64[] outWords)
    // Offset: 0x1CDA020
    int ProcessBlock(::Array<uint64_t>* inWords, ::Array<uint64_t>* outWords);
    // static System.UInt64 BytesToWord(System.Byte[] bytes, System.Int32 off)
    // Offset: 0x1CD98CC
    static uint64_t BytesToWord(::Array<uint8_t>* bytes, int off);
    // static System.Void WordToBytes(System.UInt64 word, System.Byte[] bytes, System.Int32 off)
    // Offset: 0x1CDA178
    static void WordToBytes(uint64_t word, ::Array<uint8_t>* bytes, int off);
    // static private System.UInt64 RotlXor(System.UInt64 x, System.Int32 n, System.UInt64 xor)
    // Offset: 0x1CDA2F0
    static uint64_t RotlXor(uint64_t x, int n, uint64_t _xor);
    // static private System.UInt64 XorRotr(System.UInt64 x, System.Int32 n, System.UInt64 xor)
    // Offset: 0x1CDA300
    static uint64_t XorRotr(uint64_t x, int n, uint64_t _xor);
    // public System.Void Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    // Offset: 0x1CD958C
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Void IBlockCipher::Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    void Init(bool forEncryption, Org::BouncyCastle::Crypto::ICipherParameters* parameters);
    // public System.String get_AlgorithmName()
    // Offset: 0x1CD9DA0
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.String IBlockCipher::get_AlgorithmName()
    ::Il2CppString* get_AlgorithmName();
    // public System.Boolean get_IsPartialBlockOkay()
    // Offset: 0x1CD9E24
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Boolean IBlockCipher::get_IsPartialBlockOkay()
    bool get_IsPartialBlockOkay();
    // public System.Int32 GetBlockSize()
    // Offset: 0x1CD9E2C
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Int32 IBlockCipher::GetBlockSize()
    int GetBlockSize();
    // public System.Void Reset()
    // Offset: 0x1CD9E34
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Void IBlockCipher::Reset()
    void Reset();
    // public System.Int32 ProcessBlock(System.Byte[] inBytes, System.Int32 inOff, System.Byte[] outBytes, System.Int32 outOff)
    // Offset: 0x1CD9E38
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Int32 IBlockCipher::ProcessBlock(System.Byte[] inBytes, System.Int32 inOff, System.Byte[] outBytes, System.Int32 outOff)
    int ProcessBlock(::Array<uint8_t>* inBytes, int inOff, ::Array<uint8_t>* outBytes, int outOff);
  }; // Org.BouncyCastle.Crypto.Engines.ThreefishEngine
  #pragma pack(pop)
  static check_size<sizeof(ThreefishEngine), 56 + sizeof(bool)> __Org_BouncyCastle_Crypto_Engines_ThreefishEngineSizeCheck;
  static_assert(sizeof(ThreefishEngine) == 0x39);
}
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Engines::ThreefishEngine*, "Org.BouncyCastle.Crypto.Engines", "ThreefishEngine");
