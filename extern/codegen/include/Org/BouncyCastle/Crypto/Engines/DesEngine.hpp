// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.IBlockCipher
#include "Org/BouncyCastle/Crypto/IBlockCipher.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Crypto
namespace Org::BouncyCastle::Crypto {
  // Forward declaring type: ICipherParameters
  class ICipherParameters;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Crypto.Engines
namespace Org::BouncyCastle::Crypto::Engines {
  // Autogenerated type: Org.BouncyCastle.Crypto.Engines.DesEngine
  class DesEngine : public ::Il2CppObject/*, public Org::BouncyCastle::Crypto::IBlockCipher*/ {
    public:
    // private System.Int32[] workingKey
    // Offset: 0x10
    ::Array<int>* workingKey;
    // Creating interface conversion operator: operator Org::BouncyCastle::Crypto::IBlockCipher
    operator Org::BouncyCastle::Crypto::IBlockCipher() noexcept {
      return *reinterpret_cast<Org::BouncyCastle::Crypto::IBlockCipher*>(this);
    }
    // Creating conversion operator: operator ::Array<int>*
    constexpr operator ::Array<int>*() const noexcept {
      return workingKey;
    }
    // Get static field: static private readonly System.Int16[] bytebit
    static ::Array<int16_t>* _get_bytebit();
    // Set static field: static private readonly System.Int16[] bytebit
    static void _set_bytebit(::Array<int16_t>* value);
    // Get static field: static private readonly System.Int32[] bigbyte
    static ::Array<int>* _get_bigbyte();
    // Set static field: static private readonly System.Int32[] bigbyte
    static void _set_bigbyte(::Array<int>* value);
    // Get static field: static private readonly System.Byte[] pc1
    static ::Array<uint8_t>* _get_pc1();
    // Set static field: static private readonly System.Byte[] pc1
    static void _set_pc1(::Array<uint8_t>* value);
    // Get static field: static private readonly System.Byte[] totrot
    static ::Array<uint8_t>* _get_totrot();
    // Set static field: static private readonly System.Byte[] totrot
    static void _set_totrot(::Array<uint8_t>* value);
    // Get static field: static private readonly System.Byte[] pc2
    static ::Array<uint8_t>* _get_pc2();
    // Set static field: static private readonly System.Byte[] pc2
    static void _set_pc2(::Array<uint8_t>* value);
    // Get static field: static private readonly System.UInt32[] SP1
    static ::Array<uint>* _get_SP1();
    // Set static field: static private readonly System.UInt32[] SP1
    static void _set_SP1(::Array<uint>* value);
    // Get static field: static private readonly System.UInt32[] SP2
    static ::Array<uint>* _get_SP2();
    // Set static field: static private readonly System.UInt32[] SP2
    static void _set_SP2(::Array<uint>* value);
    // Get static field: static private readonly System.UInt32[] SP3
    static ::Array<uint>* _get_SP3();
    // Set static field: static private readonly System.UInt32[] SP3
    static void _set_SP3(::Array<uint>* value);
    // Get static field: static private readonly System.UInt32[] SP4
    static ::Array<uint>* _get_SP4();
    // Set static field: static private readonly System.UInt32[] SP4
    static void _set_SP4(::Array<uint>* value);
    // Get static field: static private readonly System.UInt32[] SP5
    static ::Array<uint>* _get_SP5();
    // Set static field: static private readonly System.UInt32[] SP5
    static void _set_SP5(::Array<uint>* value);
    // Get static field: static private readonly System.UInt32[] SP6
    static ::Array<uint>* _get_SP6();
    // Set static field: static private readonly System.UInt32[] SP6
    static void _set_SP6(::Array<uint>* value);
    // Get static field: static private readonly System.UInt32[] SP7
    static ::Array<uint>* _get_SP7();
    // Set static field: static private readonly System.UInt32[] SP7
    static void _set_SP7(::Array<uint>* value);
    // Get static field: static private readonly System.UInt32[] SP8
    static ::Array<uint>* _get_SP8();
    // Set static field: static private readonly System.UInt32[] SP8
    static void _set_SP8(::Array<uint>* value);
    // static protected System.Int32[] GenerateWorkingKey(System.Boolean encrypting, System.Byte[] key)
    // Offset: 0x17CDF24
    static ::Array<int>* GenerateWorkingKey(bool encrypting, ::Array<uint8_t>* key);
    // static System.Void DesFunc(System.Int32[] wKey, System.Byte[] input, System.Int32 inOff, System.Byte[] outBytes, System.Int32 outOff)
    // Offset: 0x17CE6C8
    static void DesFunc(::Array<int>* wKey, ::Array<uint8_t>* input, int inOff, ::Array<uint8_t>* outBytes, int outOff);
    // static private System.Void .cctor()
    // Offset: 0x17CEE68
    static void _cctor();
    // public System.Void Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    // Offset: 0x17CEB90
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Void IBlockCipher::Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    void Init(bool forEncryption, Org::BouncyCastle::Crypto::ICipherParameters* parameters);
    // public System.String get_AlgorithmName()
    // Offset: 0x17CECE8
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.String IBlockCipher::get_AlgorithmName()
    ::Il2CppString* get_AlgorithmName();
    // public System.Boolean get_IsPartialBlockOkay()
    // Offset: 0x17CED30
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Boolean IBlockCipher::get_IsPartialBlockOkay()
    bool get_IsPartialBlockOkay();
    // public System.Int32 GetBlockSize()
    // Offset: 0x17CED38
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Int32 IBlockCipher::GetBlockSize()
    int GetBlockSize();
    // public System.Int32 ProcessBlock(System.Byte[] input, System.Int32 inOff, System.Byte[] output, System.Int32 outOff)
    // Offset: 0x17CED40
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Int32 IBlockCipher::ProcessBlock(System.Byte[] input, System.Int32 inOff, System.Byte[] output, System.Int32 outOff)
    int ProcessBlock(::Array<uint8_t>* input, int inOff, ::Array<uint8_t>* output, int outOff);
    // public System.Void Reset()
    // Offset: 0x17CEE64
    // Implemented from: Org.BouncyCastle.Crypto.IBlockCipher
    // Base method: System.Void IBlockCipher::Reset()
    void Reset();
    // public System.Void .ctor()
    // Offset: 0x17CEB88
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    static DesEngine* New_ctor();
  }; // Org.BouncyCastle.Crypto.Engines.DesEngine
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Engines::DesEngine*, "Org.BouncyCastle.Crypto.Engines", "DesEngine");
#pragma pack(pop)
