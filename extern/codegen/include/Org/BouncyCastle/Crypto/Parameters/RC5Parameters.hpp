// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.Parameters.KeyParameter
#include "Org/BouncyCastle/Crypto/Parameters/KeyParameter.hpp"
// Completed includes
// Type namespace: Org.BouncyCastle.Crypto.Parameters
namespace Org::BouncyCastle::Crypto::Parameters {
  // Size: 0x1C
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Crypto.Parameters.RC5Parameters
  // [] Offset: FFFFFFFF
  class RC5Parameters : public Org::BouncyCastle::Crypto::Parameters::KeyParameter {
    public:
    // private readonly System.Int32 rounds
    // Size: 0x4
    // Offset: 0x18
    int rounds;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: RC5Parameters
    RC5Parameters(int rounds_ = {}) noexcept : rounds{rounds_} {}
    // Deleting conversion operator: operator ::Array<uint8_t>*
    constexpr operator ::Array<uint8_t>*() const noexcept = delete;
    // public System.Int32 get_Rounds()
    // Offset: 0x1183B14
    int get_Rounds();
  }; // Org.BouncyCastle.Crypto.Parameters.RC5Parameters
  #pragma pack(pop)
  static check_size<sizeof(RC5Parameters), 24 + sizeof(int)> __Org_BouncyCastle_Crypto_Parameters_RC5ParametersSizeCheck;
  static_assert(sizeof(RC5Parameters) == 0x1C);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Parameters::RC5Parameters*, "Org.BouncyCastle.Crypto.Parameters", "RC5Parameters");
