// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.Parameters.IesParameters
#include "Org/BouncyCastle/Crypto/Parameters/IesParameters.hpp"
// Completed includes
// Type namespace: Org.BouncyCastle.Crypto.Parameters
namespace Org::BouncyCastle::Crypto::Parameters {
  // Size: 0x28
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Crypto.Parameters.IesWithCipherParameters
  // [] Offset: FFFFFFFF
  class IesWithCipherParameters : public Org::BouncyCastle::Crypto::Parameters::IesParameters {
    public:
    // private System.Int32 cipherKeySize
    // Size: 0x4
    // Offset: 0x24
    int cipherKeySize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: IesWithCipherParameters
    IesWithCipherParameters(int cipherKeySize_ = {}) noexcept : cipherKeySize{cipherKeySize_} {}
    // Creating conversion operator: operator int
    constexpr operator int() const noexcept {
      return cipherKeySize;
    }
    // public System.Int32 get_CipherKeySize()
    // Offset: 0x1183818
    int get_CipherKeySize();
  }; // Org.BouncyCastle.Crypto.Parameters.IesWithCipherParameters
  #pragma pack(pop)
  static check_size<sizeof(IesWithCipherParameters), 36 + sizeof(int)> __Org_BouncyCastle_Crypto_Parameters_IesWithCipherParametersSizeCheck;
  static_assert(sizeof(IesWithCipherParameters) == 0x28);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Parameters::IesWithCipherParameters*, "Org.BouncyCastle.Crypto.Parameters", "IesWithCipherParameters");
