// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.Modes.IAeadBlockCipher
#include "Org/BouncyCastle/Crypto/Modes/IAeadBlockCipher.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Crypto
namespace Org::BouncyCastle::Crypto {
  // Forward declaring type: IBlockCipher
  class IBlockCipher;
  // Forward declaring type: ICipherParameters
  class ICipherParameters;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IList
  class IList;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Crypto.Modes
namespace Org::BouncyCastle::Crypto::Modes {
  // Size: 0xB0
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Crypto.Modes.OcbBlockCipher
  // [] Offset: FFFFFFFF
  class OcbBlockCipher : public ::Il2CppObject/*, public Org::BouncyCastle::Crypto::Modes::IAeadBlockCipher*/ {
    public:
    // private readonly Org.BouncyCastle.Crypto.IBlockCipher hashCipher
    // Size: 0x8
    // Offset: 0x10
    Org::BouncyCastle::Crypto::IBlockCipher* hashCipher;
    // Field size check
    static_assert(sizeof(Org::BouncyCastle::Crypto::IBlockCipher*) == 0x8);
    // private readonly Org.BouncyCastle.Crypto.IBlockCipher mainCipher
    // Size: 0x8
    // Offset: 0x18
    Org::BouncyCastle::Crypto::IBlockCipher* mainCipher;
    // Field size check
    static_assert(sizeof(Org::BouncyCastle::Crypto::IBlockCipher*) == 0x8);
    // private System.Boolean forEncryption
    // Size: 0x1
    // Offset: 0x20
    bool forEncryption;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: forEncryption and: macSize
    char __padding2[0x3] = {};
    // private System.Int32 macSize
    // Size: 0x4
    // Offset: 0x24
    int macSize;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Byte[] initialAssociatedText
    // Size: 0x8
    // Offset: 0x28
    ::Array<uint8_t>* initialAssociatedText;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Collections.IList L
    // Size: 0x8
    // Offset: 0x30
    System::Collections::IList* L;
    // Field size check
    static_assert(sizeof(System::Collections::IList*) == 0x8);
    // private System.Byte[] L_Asterisk
    // Size: 0x8
    // Offset: 0x38
    ::Array<uint8_t>* L_Asterisk;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Byte[] L_Dollar
    // Size: 0x8
    // Offset: 0x40
    ::Array<uint8_t>* L_Dollar;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Byte[] KtopInput
    // Size: 0x8
    // Offset: 0x48
    ::Array<uint8_t>* KtopInput;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Byte[] Stretch
    // Size: 0x8
    // Offset: 0x50
    ::Array<uint8_t>* Stretch;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Byte[] OffsetMAIN_0
    // Size: 0x8
    // Offset: 0x58
    ::Array<uint8_t>* OffsetMAIN_0;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Byte[] hashBlock
    // Size: 0x8
    // Offset: 0x60
    ::Array<uint8_t>* hashBlock;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Byte[] mainBlock
    // Size: 0x8
    // Offset: 0x68
    ::Array<uint8_t>* mainBlock;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Int32 hashBlockPos
    // Size: 0x4
    // Offset: 0x70
    int hashBlockPos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 mainBlockPos
    // Size: 0x4
    // Offset: 0x74
    int mainBlockPos;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int64 hashBlockCount
    // Size: 0x8
    // Offset: 0x78
    int64_t hashBlockCount;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Int64 mainBlockCount
    // Size: 0x8
    // Offset: 0x80
    int64_t mainBlockCount;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // private System.Byte[] OffsetHASH
    // Size: 0x8
    // Offset: 0x88
    ::Array<uint8_t>* OffsetHASH;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Byte[] Sum
    // Size: 0x8
    // Offset: 0x90
    ::Array<uint8_t>* Sum;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Byte[] OffsetMAIN
    // Size: 0x8
    // Offset: 0x98
    ::Array<uint8_t>* OffsetMAIN;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Byte[] Checksum
    // Size: 0x8
    // Offset: 0xA0
    ::Array<uint8_t>* Checksum;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // private System.Byte[] macBlock
    // Size: 0x8
    // Offset: 0xA8
    ::Array<uint8_t>* macBlock;
    // Field size check
    static_assert(sizeof(::Array<uint8_t>*) == 0x8);
    // Creating value type constructor for type: OcbBlockCipher
    OcbBlockCipher(Org::BouncyCastle::Crypto::IBlockCipher* hashCipher_ = {}, Org::BouncyCastle::Crypto::IBlockCipher* mainCipher_ = {}, bool forEncryption_ = {}, int macSize_ = {}, ::Array<uint8_t>* initialAssociatedText_ = {}, System::Collections::IList* L_ = {}, ::Array<uint8_t>* L_Asterisk_ = {}, ::Array<uint8_t>* L_Dollar_ = {}, ::Array<uint8_t>* KtopInput_ = {}, ::Array<uint8_t>* Stretch_ = {}, ::Array<uint8_t>* OffsetMAIN_0_ = {}, ::Array<uint8_t>* hashBlock_ = {}, ::Array<uint8_t>* mainBlock_ = {}, int hashBlockPos_ = {}, int mainBlockPos_ = {}, int64_t hashBlockCount_ = {}, int64_t mainBlockCount_ = {}, ::Array<uint8_t>* OffsetHASH_ = {}, ::Array<uint8_t>* Sum_ = {}, ::Array<uint8_t>* OffsetMAIN_ = {}, ::Array<uint8_t>* Checksum_ = {}, ::Array<uint8_t>* macBlock_ = {}) noexcept : hashCipher{hashCipher_}, mainCipher{mainCipher_}, forEncryption{forEncryption_}, macSize{macSize_}, initialAssociatedText{initialAssociatedText_}, L{L_}, L_Asterisk{L_Asterisk_}, L_Dollar{L_Dollar_}, KtopInput{KtopInput_}, Stretch{Stretch_}, OffsetMAIN_0{OffsetMAIN_0_}, hashBlock{hashBlock_}, mainBlock{mainBlock_}, hashBlockPos{hashBlockPos_}, mainBlockPos{mainBlockPos_}, hashBlockCount{hashBlockCount_}, mainBlockCount{mainBlockCount_}, OffsetHASH{OffsetHASH_}, Sum{Sum_}, OffsetMAIN{OffsetMAIN_}, Checksum{Checksum_}, macBlock{macBlock_} {}
    // Creating interface conversion operator: operator Org::BouncyCastle::Crypto::Modes::IAeadBlockCipher
    operator Org::BouncyCastle::Crypto::Modes::IAeadBlockCipher() noexcept {
      return *reinterpret_cast<Org::BouncyCastle::Crypto::Modes::IAeadBlockCipher*>(this);
    }
    // public System.Void .ctor(Org.BouncyCastle.Crypto.IBlockCipher hashCipher, Org.BouncyCastle.Crypto.IBlockCipher mainCipher)
    // Offset: 0x17DBD70
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static OcbBlockCipher* New_ctor(Org::BouncyCastle::Crypto::IBlockCipher* hashCipher, Org::BouncyCastle::Crypto::IBlockCipher* mainCipher) {
      static auto ___internal__logger = ::Logger::get().WithContext("Org::BouncyCastle::Crypto::Modes::OcbBlockCipher::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<OcbBlockCipher*, creationType>(hashCipher, mainCipher)));
    }
    // protected System.Int32 ProcessNonce(System.Byte[] N)
    // Offset: 0x17DC978
    int ProcessNonce(::Array<uint8_t>* N);
    // public System.Void ProcessAadBytes(System.Byte[] input, System.Int32 off, System.Int32 len)
    // Offset: 0x17DCC40
    void ProcessAadBytes(::Array<uint8_t>* input, int off, int len);
    // protected System.Void Clear(System.Byte[] bs)
    // Offset: 0x17DD2FC
    void Clear(::Array<uint8_t>* bs);
    // protected System.Byte[] GetLSub(System.Int32 n)
    // Offset: 0x17DD318
    ::Array<uint8_t>* GetLSub(int n);
    // protected System.Void ProcessHashBlock()
    // Offset: 0x17DD600
    void ProcessHashBlock();
    // protected System.Void ProcessMainBlock(System.Byte[] output, System.Int32 outOff)
    // Offset: 0x17DD6B0
    void ProcessMainBlock(::Array<uint8_t>* output, int outOff);
    // protected System.Void Reset(System.Boolean clearMac)
    // Offset: 0x17DD88C
    void Reset(bool clearMac);
    // protected System.Void UpdateHASH(System.Byte[] LSub)
    // Offset: 0x17DDA9C
    void UpdateHASH(::Array<uint8_t>* LSub);
    // static protected System.Byte[] OCB_double(System.Byte[] block)
    // Offset: 0x17DC8D0
    static ::Array<uint8_t>* OCB_double(::Array<uint8_t>* block);
    // static protected System.Void OCB_extend(System.Byte[] block, System.Int32 pos)
    // Offset: 0x17DD218
    static void OCB_extend(::Array<uint8_t>* block, int pos);
    // static protected System.Int32 OCB_ntz(System.Int64 x)
    // Offset: 0x17DD67C
    static int OCB_ntz(int64_t x);
    // static protected System.Int32 ShiftLeft(System.Byte[] block, System.Byte[] output)
    // Offset: 0x17DDB94
    static int ShiftLeft(::Array<uint8_t>* block, ::Array<uint8_t>* output);
    // static protected System.Void Xor(System.Byte[] block, System.Byte[] val)
    // Offset: 0x17DD284
    static void Xor(::Array<uint8_t>* block, ::Array<uint8_t>* val);
    // public System.Void Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    // Offset: 0x17DC184
    // Implemented from: Org.BouncyCastle.Crypto.Modes.IAeadCipher
    // Base method: System.Void IAeadCipher::Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    void Init(bool forEncryption, Org::BouncyCastle::Crypto::ICipherParameters* parameters);
    // public System.Int32 GetBlockSize()
    // Offset: 0x17DCBD8
    // Implemented from: Org.BouncyCastle.Crypto.Modes.IAeadBlockCipher
    // Base method: System.Int32 IAeadBlockCipher::GetBlockSize()
    int GetBlockSize();
    // public System.Int32 GetOutputSize(System.Int32 len)
    // Offset: 0x17DCBE0
    // Implemented from: Org.BouncyCastle.Crypto.Modes.IAeadCipher
    // Base method: System.Int32 IAeadCipher::GetOutputSize(System.Int32 len)
    int GetOutputSize(int len);
    // public System.Int32 GetUpdateOutputSize(System.Int32 len)
    // Offset: 0x17DCC08
    // Implemented from: Org.BouncyCastle.Crypto.Modes.IAeadCipher
    // Base method: System.Int32 IAeadCipher::GetUpdateOutputSize(System.Int32 len)
    int GetUpdateOutputSize(int len);
    // public System.Int32 ProcessBytes(System.Byte[] input, System.Int32 inOff, System.Int32 len, System.Byte[] output, System.Int32 outOff)
    // Offset: 0x17DCD10
    // Implemented from: Org.BouncyCastle.Crypto.Modes.IAeadCipher
    // Base method: System.Int32 IAeadCipher::ProcessBytes(System.Byte[] input, System.Int32 inOff, System.Int32 len, System.Byte[] output, System.Int32 outOff)
    int ProcessBytes(::Array<uint8_t>* input, int inOff, int len, ::Array<uint8_t>* output, int outOff);
    // public System.Int32 DoFinal(System.Byte[] output, System.Int32 outOff)
    // Offset: 0x17DCE0C
    // Implemented from: Org.BouncyCastle.Crypto.Modes.IAeadCipher
    // Base method: System.Int32 IAeadCipher::DoFinal(System.Byte[] output, System.Int32 outOff)
    int DoFinal(::Array<uint8_t>* output, int outOff);
    // public System.Void Reset()
    // Offset: 0x17DD2E8
    // Implemented from: Org.BouncyCastle.Crypto.Modes.IAeadCipher
    // Base method: System.Void IAeadCipher::Reset()
    void Reset();
  }; // Org.BouncyCastle.Crypto.Modes.OcbBlockCipher
  #pragma pack(pop)
  static check_size<sizeof(OcbBlockCipher), 168 + sizeof(::Array<uint8_t>*)> __Org_BouncyCastle_Crypto_Modes_OcbBlockCipherSizeCheck;
  static_assert(sizeof(OcbBlockCipher) == 0xB0);
}
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Modes::OcbBlockCipher*, "Org.BouncyCastle.Crypto.Modes", "OcbBlockCipher");
