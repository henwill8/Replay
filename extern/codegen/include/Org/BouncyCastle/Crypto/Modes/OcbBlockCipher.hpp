// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.Modes.IAeadBlockCipher
#include "Org/BouncyCastle/Crypto/Modes/IAeadBlockCipher.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Crypto
namespace Org::BouncyCastle::Crypto {
  // Forward declaring type: IBlockCipher
  class IBlockCipher;
  // Forward declaring type: ICipherParameters
  class ICipherParameters;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IList
  class IList;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Crypto.Modes
namespace Org::BouncyCastle::Crypto::Modes {
  // Autogenerated type: Org.BouncyCastle.Crypto.Modes.OcbBlockCipher
  class OcbBlockCipher : public ::Il2CppObject/*, public Org::BouncyCastle::Crypto::Modes::IAeadBlockCipher*/ {
    public:
    // private readonly Org.BouncyCastle.Crypto.IBlockCipher hashCipher
    // Offset: 0x10
    Org::BouncyCastle::Crypto::IBlockCipher* hashCipher;
    // private readonly Org.BouncyCastle.Crypto.IBlockCipher mainCipher
    // Offset: 0x18
    Org::BouncyCastle::Crypto::IBlockCipher* mainCipher;
    // private System.Boolean forEncryption
    // Offset: 0x20
    bool forEncryption;
    // private System.Int32 macSize
    // Offset: 0x24
    int macSize;
    // private System.Byte[] initialAssociatedText
    // Offset: 0x28
    ::Array<uint8_t>* initialAssociatedText;
    // private System.Collections.IList L
    // Offset: 0x30
    System::Collections::IList* L;
    // private System.Byte[] L_Asterisk
    // Offset: 0x38
    ::Array<uint8_t>* L_Asterisk;
    // private System.Byte[] L_Dollar
    // Offset: 0x40
    ::Array<uint8_t>* L_Dollar;
    // private System.Byte[] KtopInput
    // Offset: 0x48
    ::Array<uint8_t>* KtopInput;
    // private System.Byte[] Stretch
    // Offset: 0x50
    ::Array<uint8_t>* Stretch;
    // private System.Byte[] OffsetMAIN_0
    // Offset: 0x58
    ::Array<uint8_t>* OffsetMAIN_0;
    // private System.Byte[] hashBlock
    // Offset: 0x60
    ::Array<uint8_t>* hashBlock;
    // private System.Byte[] mainBlock
    // Offset: 0x68
    ::Array<uint8_t>* mainBlock;
    // private System.Int32 hashBlockPos
    // Offset: 0x70
    int hashBlockPos;
    // private System.Int32 mainBlockPos
    // Offset: 0x74
    int mainBlockPos;
    // private System.Int64 hashBlockCount
    // Offset: 0x78
    int64_t hashBlockCount;
    // private System.Int64 mainBlockCount
    // Offset: 0x80
    int64_t mainBlockCount;
    // private System.Byte[] OffsetHASH
    // Offset: 0x88
    ::Array<uint8_t>* OffsetHASH;
    // private System.Byte[] Sum
    // Offset: 0x90
    ::Array<uint8_t>* Sum;
    // private System.Byte[] OffsetMAIN
    // Offset: 0x98
    ::Array<uint8_t>* OffsetMAIN;
    // private System.Byte[] Checksum
    // Offset: 0xA0
    ::Array<uint8_t>* Checksum;
    // private System.Byte[] macBlock
    // Offset: 0xA8
    ::Array<uint8_t>* macBlock;
    // Creating interface conversion operator: operator Org::BouncyCastle::Crypto::Modes::IAeadBlockCipher
    operator Org::BouncyCastle::Crypto::Modes::IAeadBlockCipher() noexcept {
      return *reinterpret_cast<Org::BouncyCastle::Crypto::Modes::IAeadBlockCipher*>(this);
    }
    // public System.Void .ctor(Org.BouncyCastle.Crypto.IBlockCipher hashCipher, Org.BouncyCastle.Crypto.IBlockCipher mainCipher)
    // Offset: 0x14AD628
    static OcbBlockCipher* New_ctor(Org::BouncyCastle::Crypto::IBlockCipher* hashCipher, Org::BouncyCastle::Crypto::IBlockCipher* mainCipher);
    // protected System.Int32 ProcessNonce(System.Byte[] N)
    // Offset: 0x14AE230
    int ProcessNonce(::Array<uint8_t>* N);
    // public System.Void ProcessAadBytes(System.Byte[] input, System.Int32 off, System.Int32 len)
    // Offset: 0x14AE4F8
    void ProcessAadBytes(::Array<uint8_t>* input, int off, int len);
    // protected System.Void Clear(System.Byte[] bs)
    // Offset: 0x14AEBB4
    void Clear(::Array<uint8_t>* bs);
    // protected System.Byte[] GetLSub(System.Int32 n)
    // Offset: 0x14AEBD0
    ::Array<uint8_t>* GetLSub(int n);
    // protected System.Void ProcessHashBlock()
    // Offset: 0x14AEEB8
    void ProcessHashBlock();
    // protected System.Void ProcessMainBlock(System.Byte[] output, System.Int32 outOff)
    // Offset: 0x14AEF68
    void ProcessMainBlock(::Array<uint8_t>* output, int outOff);
    // protected System.Void Reset(System.Boolean clearMac)
    // Offset: 0x14AF144
    void Reset(bool clearMac);
    // protected System.Void UpdateHASH(System.Byte[] LSub)
    // Offset: 0x14AF354
    void UpdateHASH(::Array<uint8_t>* LSub);
    // static protected System.Byte[] OCB_double(System.Byte[] block)
    // Offset: 0x14AE188
    static ::Array<uint8_t>* OCB_double(::Array<uint8_t>* block);
    // static protected System.Void OCB_extend(System.Byte[] block, System.Int32 pos)
    // Offset: 0x14AEAD0
    static void OCB_extend(::Array<uint8_t>* block, int pos);
    // static protected System.Int32 OCB_ntz(System.Int64 x)
    // Offset: 0x14AEF34
    static int OCB_ntz(int64_t x);
    // static protected System.Int32 ShiftLeft(System.Byte[] block, System.Byte[] output)
    // Offset: 0x14AF44C
    static int ShiftLeft(::Array<uint8_t>* block, ::Array<uint8_t>* output);
    // static protected System.Void Xor(System.Byte[] block, System.Byte[] val)
    // Offset: 0x14AEB3C
    static void Xor(::Array<uint8_t>* block, ::Array<uint8_t>* val);
    // public System.Void Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    // Offset: 0x14ADA3C
    // Implemented from: Org.BouncyCastle.Crypto.Modes.IAeadCipher
    // Base method: System.Void IAeadCipher::Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    void Init(bool forEncryption, Org::BouncyCastle::Crypto::ICipherParameters* parameters);
    // public System.Int32 GetBlockSize()
    // Offset: 0x14AE490
    // Implemented from: Org.BouncyCastle.Crypto.Modes.IAeadBlockCipher
    // Base method: System.Int32 IAeadBlockCipher::GetBlockSize()
    int GetBlockSize();
    // public System.Int32 GetOutputSize(System.Int32 len)
    // Offset: 0x14AE498
    // Implemented from: Org.BouncyCastle.Crypto.Modes.IAeadCipher
    // Base method: System.Int32 IAeadCipher::GetOutputSize(System.Int32 len)
    int GetOutputSize(int len);
    // public System.Int32 GetUpdateOutputSize(System.Int32 len)
    // Offset: 0x14AE4C0
    // Implemented from: Org.BouncyCastle.Crypto.Modes.IAeadCipher
    // Base method: System.Int32 IAeadCipher::GetUpdateOutputSize(System.Int32 len)
    int GetUpdateOutputSize(int len);
    // public System.Int32 ProcessBytes(System.Byte[] input, System.Int32 inOff, System.Int32 len, System.Byte[] output, System.Int32 outOff)
    // Offset: 0x14AE5C8
    // Implemented from: Org.BouncyCastle.Crypto.Modes.IAeadCipher
    // Base method: System.Int32 IAeadCipher::ProcessBytes(System.Byte[] input, System.Int32 inOff, System.Int32 len, System.Byte[] output, System.Int32 outOff)
    int ProcessBytes(::Array<uint8_t>* input, int inOff, int len, ::Array<uint8_t>* output, int outOff);
    // public System.Int32 DoFinal(System.Byte[] output, System.Int32 outOff)
    // Offset: 0x14AE6C4
    // Implemented from: Org.BouncyCastle.Crypto.Modes.IAeadCipher
    // Base method: System.Int32 IAeadCipher::DoFinal(System.Byte[] output, System.Int32 outOff)
    int DoFinal(::Array<uint8_t>* output, int outOff);
    // public System.Void Reset()
    // Offset: 0x14AEBA0
    // Implemented from: Org.BouncyCastle.Crypto.Modes.IAeadCipher
    // Base method: System.Void IAeadCipher::Reset()
    void Reset();
  }; // Org.BouncyCastle.Crypto.Modes.OcbBlockCipher
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Modes::OcbBlockCipher*, "Org.BouncyCastle.Crypto.Modes", "OcbBlockCipher");
#pragma pack(pop)
