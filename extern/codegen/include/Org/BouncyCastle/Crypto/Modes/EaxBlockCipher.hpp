// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: Org.BouncyCastle.Crypto.Modes.IAeadBlockCipher
#include "Org/BouncyCastle/Crypto/Modes/IAeadBlockCipher.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Crypto::Modes
namespace Org::BouncyCastle::Crypto::Modes {
  // Forward declaring type: SicBlockCipher
  class SicBlockCipher;
}
// Forward declaring namespace: Org::BouncyCastle::Crypto
namespace Org::BouncyCastle::Crypto {
  // Forward declaring type: IMac
  class IMac;
  // Forward declaring type: IBlockCipher
  class IBlockCipher;
  // Forward declaring type: ICipherParameters
  class ICipherParameters;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Crypto.Modes
namespace Org::BouncyCastle::Crypto::Modes {
  // Autogenerated type: Org.BouncyCastle.Crypto.Modes.EaxBlockCipher
  class EaxBlockCipher : public ::Il2CppObject/*, public Org::BouncyCastle::Crypto::Modes::IAeadBlockCipher*/ {
    public:
    // private Org.BouncyCastle.Crypto.Modes.SicBlockCipher cipher
    // Offset: 0x10
    Org::BouncyCastle::Crypto::Modes::SicBlockCipher* cipher;
    // private System.Boolean forEncryption
    // Offset: 0x18
    bool forEncryption;
    // private System.Int32 blockSize
    // Offset: 0x1C
    int blockSize;
    // private Org.BouncyCastle.Crypto.IMac mac
    // Offset: 0x20
    Org::BouncyCastle::Crypto::IMac* mac;
    // private System.Byte[] nonceMac
    // Offset: 0x28
    ::Array<uint8_t>* nonceMac;
    // private System.Byte[] associatedTextMac
    // Offset: 0x30
    ::Array<uint8_t>* associatedTextMac;
    // private System.Byte[] macBlock
    // Offset: 0x38
    ::Array<uint8_t>* macBlock;
    // private System.Int32 macSize
    // Offset: 0x40
    int macSize;
    // private System.Byte[] bufBlock
    // Offset: 0x48
    ::Array<uint8_t>* bufBlock;
    // private System.Int32 bufOff
    // Offset: 0x50
    int bufOff;
    // private System.Boolean cipherInitialized
    // Offset: 0x54
    bool cipherInitialized;
    // private System.Byte[] initialAssociatedText
    // Offset: 0x58
    ::Array<uint8_t>* initialAssociatedText;
    // Creating interface conversion operator: operator Org::BouncyCastle::Crypto::Modes::IAeadBlockCipher
    operator Org::BouncyCastle::Crypto::Modes::IAeadBlockCipher() noexcept {
      return *reinterpret_cast<Org::BouncyCastle::Crypto::Modes::IAeadBlockCipher*>(this);
    }
    // public System.Void .ctor(Org.BouncyCastle.Crypto.IBlockCipher cipher)
    // Offset: 0x14A7AD8
    static EaxBlockCipher* New_ctor(Org::BouncyCastle::Crypto::IBlockCipher* cipher);
    // private System.Void InitCipher()
    // Offset: 0x14A8244
    void InitCipher();
    // private System.Void CalculateMac()
    // Offset: 0x14A83F0
    void CalculateMac();
    // private System.Void Reset(System.Boolean clearMac)
    // Offset: 0x14A8564
    void Reset(bool clearMac);
    // public System.Void ProcessAadBytes(System.Byte[] inBytes, System.Int32 inOff, System.Int32 len)
    // Offset: 0x14A877C
    void ProcessAadBytes(::Array<uint8_t>* inBytes, int inOff, int len);
    // private System.Int32 Process(System.Byte b, System.Byte[] outBytes, System.Int32 outOff)
    // Offset: 0x14A8944
    int Process(uint8_t b, ::Array<uint8_t>* outBytes, int outOff);
    // private System.Boolean VerifyMac(System.Byte[] mac, System.Int32 off)
    // Offset: 0x14A8F00
    bool VerifyMac(::Array<uint8_t>* mac, int off);
    // public System.Int32 GetBlockSize()
    // Offset: 0x14A7D50
    // Implemented from: Org.BouncyCastle.Crypto.Modes.IAeadBlockCipher
    // Base method: System.Int32 IAeadBlockCipher::GetBlockSize()
    int GetBlockSize();
    // public System.Void Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    // Offset: 0x14A7D74
    // Implemented from: Org.BouncyCastle.Crypto.Modes.IAeadCipher
    // Base method: System.Void IAeadCipher::Init(System.Boolean forEncryption, Org.BouncyCastle.Crypto.ICipherParameters parameters)
    void Init(bool forEncryption, Org::BouncyCastle::Crypto::ICipherParameters* parameters);
    // public System.Void Reset()
    // Offset: 0x14A855C
    // Implemented from: Org.BouncyCastle.Crypto.Modes.IAeadCipher
    // Base method: System.Void IAeadCipher::Reset()
    void Reset();
    // public System.Int32 ProcessBytes(System.Byte[] inBytes, System.Int32 inOff, System.Int32 len, System.Byte[] outBytes, System.Int32 outOff)
    // Offset: 0x14A889C
    // Implemented from: Org.BouncyCastle.Crypto.Modes.IAeadCipher
    // Base method: System.Int32 IAeadCipher::ProcessBytes(System.Byte[] inBytes, System.Int32 inOff, System.Int32 len, System.Byte[] outBytes, System.Int32 outOff)
    int ProcessBytes(::Array<uint8_t>* inBytes, int inOff, int len, ::Array<uint8_t>* outBytes, int outOff);
    // public System.Int32 DoFinal(System.Byte[] outBytes, System.Int32 outOff)
    // Offset: 0x14A8BBC
    // Implemented from: Org.BouncyCastle.Crypto.Modes.IAeadCipher
    // Base method: System.Int32 IAeadCipher::DoFinal(System.Byte[] outBytes, System.Int32 outOff)
    int DoFinal(::Array<uint8_t>* outBytes, int outOff);
    // public System.Int32 GetUpdateOutputSize(System.Int32 len)
    // Offset: 0x14A8FA0
    // Implemented from: Org.BouncyCastle.Crypto.Modes.IAeadCipher
    // Base method: System.Int32 IAeadCipher::GetUpdateOutputSize(System.Int32 len)
    int GetUpdateOutputSize(int len);
    // public System.Int32 GetOutputSize(System.Int32 len)
    // Offset: 0x14A8FD4
    // Implemented from: Org.BouncyCastle.Crypto.Modes.IAeadCipher
    // Base method: System.Int32 IAeadCipher::GetOutputSize(System.Int32 len)
    int GetOutputSize(int len);
  }; // Org.BouncyCastle.Crypto.Modes.EaxBlockCipher
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Crypto::Modes::EaxBlockCipher*, "Org.BouncyCastle.Crypto.Modes", "EaxBlockCipher");
#pragma pack(pop)
