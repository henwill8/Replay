// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IDictionary
  class IDictionary;
}
// Forward declaring namespace: Org::BouncyCastle::Asn1
namespace Org::BouncyCastle::Asn1 {
  // Forward declaring type: DerObjectIdentifier
  class DerObjectIdentifier;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Security
namespace Org::BouncyCastle::Security {
  // Size: 0x10
  #pragma pack(push, 1)
  // Autogenerated type: Org.BouncyCastle.Security.GeneratorUtilities
  // [] Offset: FFFFFFFF
  class GeneratorUtilities : public ::Il2CppObject {
    public:
    // Creating value type constructor for type: GeneratorUtilities
    GeneratorUtilities() noexcept {}
    // Get static field: static private readonly System.Collections.IDictionary kgAlgorithms
    static System::Collections::IDictionary* _get_kgAlgorithms();
    // Set static field: static private readonly System.Collections.IDictionary kgAlgorithms
    static void _set_kgAlgorithms(System::Collections::IDictionary* value);
    // Get static field: static private readonly System.Collections.IDictionary kpgAlgorithms
    static System::Collections::IDictionary* _get_kpgAlgorithms();
    // Set static field: static private readonly System.Collections.IDictionary kpgAlgorithms
    static void _set_kpgAlgorithms(System::Collections::IDictionary* value);
    // Get static field: static private readonly System.Collections.IDictionary defaultKeySizes
    static System::Collections::IDictionary* _get_defaultKeySizes();
    // Set static field: static private readonly System.Collections.IDictionary defaultKeySizes
    static void _set_defaultKeySizes(System::Collections::IDictionary* value);
    // static private System.Void .cctor()
    // Offset: 0x1211794
    static void _cctor();
    // static private System.Void AddDefaultKeySizeEntries(System.Int32 size, params System.String[] algorithms)
    // Offset: 0x121550C
    static void AddDefaultKeySizeEntries(int size, ::Array<::Il2CppString*>* algorithms);
    // Creating initializer_list -> params proxy for: System.Void AddDefaultKeySizeEntries(System.Int32 size, params System.String[] algorithms)
    static void AddDefaultKeySizeEntries(int size, std::initializer_list<::Il2CppString*> algorithms);
    // Creating TArgs -> initializer_list proxy for: System.Void AddDefaultKeySizeEntries(System.Int32 size, params System.String[] algorithms)
    template<class ...TParams>
    static void AddDefaultKeySizeEntries(int size, TParams&&... algorithms) {
      AddDefaultKeySizeEntries(size, {algorithms...});
    }
    // static private System.Void AddKgAlgorithm(System.String canonicalName, params System.Object[] aliases)
    // Offset: 0x1214CF8
    static void AddKgAlgorithm(::Il2CppString* canonicalName, ::Array<::Il2CppObject*>* aliases);
    // Creating initializer_list -> params proxy for: System.Void AddKgAlgorithm(System.String canonicalName, params System.Object[] aliases)
    static void AddKgAlgorithm(::Il2CppString* canonicalName, std::initializer_list<::Il2CppObject*> aliases);
    // Creating TArgs -> initializer_list proxy for: System.Void AddKgAlgorithm(System.String canonicalName, params System.Object[] aliases)
    template<class ...TParams>
    static void AddKgAlgorithm(::Il2CppString* canonicalName, TParams&&... aliases) {
      AddKgAlgorithm(canonicalName, {aliases...});
    }
    // static private System.Void AddKpgAlgorithm(System.String canonicalName, params System.Object[] aliases)
    // Offset: 0x12152BC
    static void AddKpgAlgorithm(::Il2CppString* canonicalName, ::Array<::Il2CppObject*>* aliases);
    // Creating initializer_list -> params proxy for: System.Void AddKpgAlgorithm(System.String canonicalName, params System.Object[] aliases)
    static void AddKpgAlgorithm(::Il2CppString* canonicalName, std::initializer_list<::Il2CppObject*> aliases);
    // Creating TArgs -> initializer_list proxy for: System.Void AddKpgAlgorithm(System.String canonicalName, params System.Object[] aliases)
    template<class ...TParams>
    static void AddKpgAlgorithm(::Il2CppString* canonicalName, TParams&&... aliases) {
      AddKpgAlgorithm(canonicalName, {aliases...});
    }
    // static private System.Void AddHMacKeyGenerator(System.String algorithm, params System.Object[] aliases)
    // Offset: 0x1214F48
    static void AddHMacKeyGenerator(::Il2CppString* algorithm, ::Array<::Il2CppObject*>* aliases);
    // Creating initializer_list -> params proxy for: System.Void AddHMacKeyGenerator(System.String algorithm, params System.Object[] aliases)
    static void AddHMacKeyGenerator(::Il2CppString* algorithm, std::initializer_list<::Il2CppObject*> aliases);
    // Creating TArgs -> initializer_list proxy for: System.Void AddHMacKeyGenerator(System.String algorithm, params System.Object[] aliases)
    template<class ...TParams>
    static void AddHMacKeyGenerator(::Il2CppString* algorithm, TParams&&... aliases) {
      AddHMacKeyGenerator(algorithm, {aliases...});
    }
    // static System.String GetCanonicalKeyGeneratorAlgorithm(System.String algorithm)
    // Offset: 0x1215678
    static ::Il2CppString* GetCanonicalKeyGeneratorAlgorithm(::Il2CppString* algorithm);
    // static System.Int32 GetDefaultKeySize(Org.BouncyCastle.Asn1.DerObjectIdentifier oid)
    // Offset: 0x12157AC
    static int GetDefaultKeySize(Org::BouncyCastle::Asn1::DerObjectIdentifier* oid);
    // static System.Int32 GetDefaultKeySize(System.String algorithm)
    // Offset: 0x121581C
    static int GetDefaultKeySize(::Il2CppString* algorithm);
    // static private System.Int32 FindDefaultKeySize(System.String canonicalName)
    // Offset: 0x1215A08
    static int FindDefaultKeySize(::Il2CppString* canonicalName);
  }; // Org.BouncyCastle.Security.GeneratorUtilities
  #pragma pack(pop)
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Security::GeneratorUtilities*, "Org.BouncyCastle.Security", "GeneratorUtilities");
