// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: System.Random
#include "System/Random.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: Org::BouncyCastle::Crypto::Prng
namespace Org::BouncyCastle::Crypto::Prng {
  // Forward declaring type: IRandomGenerator
  class IRandomGenerator;
  // Forward declaring type: DigestRandomGenerator
  class DigestRandomGenerator;
}
// Completed forward declares
// Type namespace: Org.BouncyCastle.Security
namespace Org::BouncyCastle::Security {
  // Autogenerated type: Org.BouncyCastle.Security.SecureRandom
  class SecureRandom : public System::Random {
    public:
    // protected readonly Org.BouncyCastle.Crypto.Prng.IRandomGenerator generator
    // Offset: 0x20
    Org::BouncyCastle::Crypto::Prng::IRandomGenerator* generator;
    // Creating conversion operator: operator Org::BouncyCastle::Crypto::Prng::IRandomGenerator*
    constexpr operator Org::BouncyCastle::Crypto::Prng::IRandomGenerator*() const noexcept {
      return generator;
    }
    // Get static field: static private System.Int64 counter
    static int64_t _get_counter();
    // Set static field: static private System.Int64 counter
    static void _set_counter(int64_t value);
    // Get static field: static private readonly Org.BouncyCastle.Security.SecureRandom master
    static Org::BouncyCastle::Security::SecureRandom* _get_master();
    // Set static field: static private readonly Org.BouncyCastle.Security.SecureRandom master
    static void _set_master(Org::BouncyCastle::Security::SecureRandom* value);
    // Get static field: static private readonly System.Double DoubleScale
    static double _get_DoubleScale();
    // Set static field: static private readonly System.Double DoubleScale
    static void _set_DoubleScale(double value);
    // static private System.Int64 NextCounterValue()
    // Offset: 0x10D3728
    static int64_t NextCounterValue();
    // static private Org.BouncyCastle.Security.SecureRandom get_Master()
    // Offset: 0x10D3790
    static Org::BouncyCastle::Security::SecureRandom* get_Master();
    // static private Org.BouncyCastle.Crypto.Prng.DigestRandomGenerator CreatePrng(System.String digestName, System.Boolean autoSeed)
    // Offset: 0x10D37F8
    static Org::BouncyCastle::Crypto::Prng::DigestRandomGenerator* CreatePrng(::Il2CppString* digestName, bool autoSeed);
    // static public System.Byte[] GetNextBytes(Org.BouncyCastle.Security.SecureRandom secureRandom, System.Int32 length)
    // Offset: 0x10D39B0
    static ::Array<uint8_t>* GetNextBytes(Org::BouncyCastle::Security::SecureRandom* secureRandom, int length);
    // public System.Void .ctor(Org.BouncyCastle.Crypto.Prng.IRandomGenerator generator)
    // Offset: 0x10D3AC8
    static SecureRandom* New_ctor(Org::BouncyCastle::Crypto::Prng::IRandomGenerator* generator);
    // public System.Int32 NextInt()
    // Offset: 0x10D3DC8
    int NextInt();
    // static private System.Void .cctor()
    // Offset: 0x10D3E3C
    static void _cctor();
    // public System.Void .ctor()
    // Offset: 0x10D3A34
    // Implemented from: System.Random
    // Base method: System.Void Random::.ctor()
    // Base method: System.Void Object::.ctor()
    static SecureRandom* New_ctor();
    // public override System.Int32 Next()
    // Offset: 0x10D3B00
    // Implemented from: System.Random
    // Base method: System.Int32 Random::Next()
    int Next();
    // public override System.Int32 Next(System.Int32 maxValue)
    // Offset: 0x10D3B20
    // Implemented from: System.Random
    // Base method: System.Int32 Random::Next(System.Int32 maxValue)
    int Next(int maxValue);
    // public override System.Int32 Next(System.Int32 minValue, System.Int32 maxValue)
    // Offset: 0x10D3C24
    // Implemented from: System.Random
    // Base method: System.Int32 Random::Next(System.Int32 minValue, System.Int32 maxValue)
    int Next(int minValue, int maxValue);
    // public override System.Void NextBytes(System.Byte[] buf)
    // Offset: 0x10D3D08
    // Implemented from: System.Random
    // Base method: System.Void Random::NextBytes(System.Byte[] buf)
    void NextBytes(::Array<uint8_t>* buf);
  }; // Org.BouncyCastle.Security.SecureRandom
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(Org::BouncyCastle::Security::SecureRandom*, "Org.BouncyCastle.Security", "SecureRandom");
#pragma pack(pop)
