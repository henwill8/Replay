// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TMP_FontAsset
  class TMP_FontAsset;
  // Forward declaring type: TMP_SpriteAsset
  class TMP_SpriteAsset;
  // Forward declaring type: TMP_ColorGradient
  class TMP_ColorGradient;
}
// Completed forward declares
// Type namespace: TMPro
namespace TMPro {
  // Size: 0x30
  #pragma pack(push, 1)
  // Autogenerated type: TMPro.MaterialReferenceManager
  // [] Offset: FFFFFFFF
  class MaterialReferenceManager : public ::Il2CppObject {
    public:
    // private System.Collections.Generic.Dictionary`2<System.Int32,UnityEngine.Material> m_FontMaterialReferenceLookup
    // Size: 0x8
    // Offset: 0x10
    System::Collections::Generic::Dictionary_2<int, UnityEngine::Material*>* m_FontMaterialReferenceLookup;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<int, UnityEngine::Material*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,TMPro.TMP_FontAsset> m_FontAssetReferenceLookup
    // Size: 0x8
    // Offset: 0x18
    System::Collections::Generic::Dictionary_2<int, TMPro::TMP_FontAsset*>* m_FontAssetReferenceLookup;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<int, TMPro::TMP_FontAsset*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,TMPro.TMP_SpriteAsset> m_SpriteAssetReferenceLookup
    // Size: 0x8
    // Offset: 0x20
    System::Collections::Generic::Dictionary_2<int, TMPro::TMP_SpriteAsset*>* m_SpriteAssetReferenceLookup;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<int, TMPro::TMP_SpriteAsset*>*) == 0x8);
    // private System.Collections.Generic.Dictionary`2<System.Int32,TMPro.TMP_ColorGradient> m_ColorGradientReferenceLookup
    // Size: 0x8
    // Offset: 0x28
    System::Collections::Generic::Dictionary_2<int, TMPro::TMP_ColorGradient*>* m_ColorGradientReferenceLookup;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<int, TMPro::TMP_ColorGradient*>*) == 0x8);
    // Creating value type constructor for type: MaterialReferenceManager
    MaterialReferenceManager(System::Collections::Generic::Dictionary_2<int, UnityEngine::Material*>* m_FontMaterialReferenceLookup_ = {}, System::Collections::Generic::Dictionary_2<int, TMPro::TMP_FontAsset*>* m_FontAssetReferenceLookup_ = {}, System::Collections::Generic::Dictionary_2<int, TMPro::TMP_SpriteAsset*>* m_SpriteAssetReferenceLookup_ = {}, System::Collections::Generic::Dictionary_2<int, TMPro::TMP_ColorGradient*>* m_ColorGradientReferenceLookup_ = {}) noexcept : m_FontMaterialReferenceLookup{m_FontMaterialReferenceLookup_}, m_FontAssetReferenceLookup{m_FontAssetReferenceLookup_}, m_SpriteAssetReferenceLookup{m_SpriteAssetReferenceLookup_}, m_ColorGradientReferenceLookup{m_ColorGradientReferenceLookup_} {}
    // Get static field: static private TMPro.MaterialReferenceManager s_Instance
    static TMPro::MaterialReferenceManager* _get_s_Instance();
    // Set static field: static private TMPro.MaterialReferenceManager s_Instance
    static void _set_s_Instance(TMPro::MaterialReferenceManager* value);
    // static public TMPro.MaterialReferenceManager get_instance()
    // Offset: 0xF97708
    static TMPro::MaterialReferenceManager* get_instance();
    // static public System.Void AddFontAsset(TMPro.TMP_FontAsset fontAsset)
    // Offset: 0xF978A4
    static void AddFontAsset(TMPro::TMP_FontAsset* fontAsset);
    // private System.Void AddFontAssetInternal(TMPro.TMP_FontAsset fontAsset)
    // Offset: 0xF978D0
    void AddFontAssetInternal(TMPro::TMP_FontAsset* fontAsset);
    // static public System.Void AddSpriteAsset(TMPro.TMP_SpriteAsset spriteAsset)
    // Offset: 0xF97990
    static void AddSpriteAsset(TMPro::TMP_SpriteAsset* spriteAsset);
    // private System.Void AddSpriteAssetInternal(TMPro.TMP_SpriteAsset spriteAsset)
    // Offset: 0xF979BC
    void AddSpriteAssetInternal(TMPro::TMP_SpriteAsset* spriteAsset);
    // static public System.Void AddSpriteAsset(System.Int32 hashCode, TMPro.TMP_SpriteAsset spriteAsset)
    // Offset: 0xF97A7C
    static void AddSpriteAsset(int hashCode, TMPro::TMP_SpriteAsset* spriteAsset);
    // private System.Void AddSpriteAssetInternal(System.Int32 hashCode, TMPro.TMP_SpriteAsset spriteAsset)
    // Offset: 0xF97AB0
    void AddSpriteAssetInternal(int hashCode, TMPro::TMP_SpriteAsset* spriteAsset);
    // static public System.Void AddFontMaterial(System.Int32 hashCode, UnityEngine.Material material)
    // Offset: 0xF97B74
    static void AddFontMaterial(int hashCode, UnityEngine::Material* material);
    // private System.Void AddFontMaterialInternal(System.Int32 hashCode, UnityEngine.Material material)
    // Offset: 0xF97BA8
    void AddFontMaterialInternal(int hashCode, UnityEngine::Material* material);
    // static public System.Void AddColorGradientPreset(System.Int32 hashCode, TMPro.TMP_ColorGradient spriteAsset)
    // Offset: 0xF97C18
    static void AddColorGradientPreset(int hashCode, TMPro::TMP_ColorGradient* spriteAsset);
    // private System.Void AddColorGradientPreset_Internal(System.Int32 hashCode, TMPro.TMP_ColorGradient spriteAsset)
    // Offset: 0xF97C4C
    void AddColorGradientPreset_Internal(int hashCode, TMPro::TMP_ColorGradient* spriteAsset);
    // public System.Boolean Contains(TMPro.TMP_FontAsset font)
    // Offset: 0xF97CEC
    bool Contains(TMPro::TMP_FontAsset* font);
    // public System.Boolean Contains(TMPro.TMP_SpriteAsset sprite)
    // Offset: 0xF97D58
    bool Contains(TMPro::TMP_SpriteAsset* sprite);
    // static public System.Boolean TryGetFontAsset(System.Int32 hashCode, out TMPro.TMP_FontAsset fontAsset)
    // Offset: 0xF97DC4
    static bool TryGetFontAsset(int hashCode, TMPro::TMP_FontAsset*& fontAsset);
    // private System.Boolean TryGetFontAssetInternal(System.Int32 hashCode, out TMPro.TMP_FontAsset fontAsset)
    // Offset: 0xF97DF8
    bool TryGetFontAssetInternal(int hashCode, TMPro::TMP_FontAsset*& fontAsset);
    // static public System.Boolean TryGetSpriteAsset(System.Int32 hashCode, out TMPro.TMP_SpriteAsset spriteAsset)
    // Offset: 0xF97E78
    static bool TryGetSpriteAsset(int hashCode, TMPro::TMP_SpriteAsset*& spriteAsset);
    // private System.Boolean TryGetSpriteAssetInternal(System.Int32 hashCode, out TMPro.TMP_SpriteAsset spriteAsset)
    // Offset: 0xF97EAC
    bool TryGetSpriteAssetInternal(int hashCode, TMPro::TMP_SpriteAsset*& spriteAsset);
    // static public System.Boolean TryGetColorGradientPreset(System.Int32 hashCode, out TMPro.TMP_ColorGradient gradientPreset)
    // Offset: 0xF97F2C
    static bool TryGetColorGradientPreset(int hashCode, TMPro::TMP_ColorGradient*& gradientPreset);
    // private System.Boolean TryGetColorGradientPresetInternal(System.Int32 hashCode, out TMPro.TMP_ColorGradient gradientPreset)
    // Offset: 0xF97F60
    bool TryGetColorGradientPresetInternal(int hashCode, TMPro::TMP_ColorGradient*& gradientPreset);
    // static public System.Boolean TryGetMaterial(System.Int32 hashCode, out UnityEngine.Material material)
    // Offset: 0xF97FE0
    static bool TryGetMaterial(int hashCode, UnityEngine::Material*& material);
    // private System.Boolean TryGetMaterialInternal(System.Int32 hashCode, out UnityEngine.Material material)
    // Offset: 0xF98014
    bool TryGetMaterialInternal(int hashCode, UnityEngine::Material*& material);
    // public System.Void .ctor()
    // Offset: 0xF9778C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static MaterialReferenceManager* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("TMPro::MaterialReferenceManager::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<MaterialReferenceManager*, creationType>()));
    }
  }; // TMPro.MaterialReferenceManager
  #pragma pack(pop)
  static check_size<sizeof(MaterialReferenceManager), 40 + sizeof(System::Collections::Generic::Dictionary_2<int, TMPro::TMP_ColorGradient*>*)> __TMPro_MaterialReferenceManagerSizeCheck;
  static_assert(sizeof(MaterialReferenceManager) == 0x30);
}
DEFINE_IL2CPP_ARG_TYPE(TMPro::MaterialReferenceManager*, "TMPro", "MaterialReferenceManager");
