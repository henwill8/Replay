// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.MonoBehaviour
#include "UnityEngine/MonoBehaviour.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TMP_FontAsset
  class TMP_FontAsset;
  // Forward declaring type: TMP_SpriteAsset
  class TMP_SpriteAsset;
  // Forward declaring type: TextMeshPro
  class TextMeshPro;
  // Forward declaring type: MaterialReference
  struct MaterialReference;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: MeshFilter
  class MeshFilter;
  // Forward declaring type: Mesh
  class Mesh;
}
// Completed forward declares
// Type namespace: TMPro
namespace TMPro {
  // Size: 0x71
  #pragma pack(push, 1)
  // Autogenerated type: TMPro.TMP_SubMesh
  // [] Offset: FFFFFFFF
  // [RequireComponent] Offset: CFCE9C
  // [RequireComponent] Offset: CFCE9C
  // [ExecuteAlways] Offset: CFCE9C
  class TMP_SubMesh : public UnityEngine::MonoBehaviour {
    public:
    // private TMPro.TMP_FontAsset m_fontAsset
    // Size: 0x8
    // Offset: 0x18
    TMPro::TMP_FontAsset* m_fontAsset;
    // Field size check
    static_assert(sizeof(TMPro::TMP_FontAsset*) == 0x8);
    // private TMPro.TMP_SpriteAsset m_spriteAsset
    // Size: 0x8
    // Offset: 0x20
    TMPro::TMP_SpriteAsset* m_spriteAsset;
    // Field size check
    static_assert(sizeof(TMPro::TMP_SpriteAsset*) == 0x8);
    // private UnityEngine.Material m_material
    // Size: 0x8
    // Offset: 0x28
    UnityEngine::Material* m_material;
    // Field size check
    static_assert(sizeof(UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material m_sharedMaterial
    // Size: 0x8
    // Offset: 0x30
    UnityEngine::Material* m_sharedMaterial;
    // Field size check
    static_assert(sizeof(UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material m_fallbackMaterial
    // Size: 0x8
    // Offset: 0x38
    UnityEngine::Material* m_fallbackMaterial;
    // Field size check
    static_assert(sizeof(UnityEngine::Material*) == 0x8);
    // private UnityEngine.Material m_fallbackSourceMaterial
    // Size: 0x8
    // Offset: 0x40
    UnityEngine::Material* m_fallbackSourceMaterial;
    // Field size check
    static_assert(sizeof(UnityEngine::Material*) == 0x8);
    // private System.Boolean m_isDefaultMaterial
    // Size: 0x1
    // Offset: 0x48
    bool m_isDefaultMaterial;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_isDefaultMaterial and: m_padding
    char __padding6[0x3] = {};
    // private System.Single m_padding
    // Size: 0x4
    // Offset: 0x4C
    float m_padding;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Renderer m_renderer
    // Size: 0x8
    // Offset: 0x50
    UnityEngine::Renderer* m_renderer;
    // Field size check
    static_assert(sizeof(UnityEngine::Renderer*) == 0x8);
    // private UnityEngine.MeshFilter m_meshFilter
    // Size: 0x8
    // Offset: 0x58
    UnityEngine::MeshFilter* m_meshFilter;
    // Field size check
    static_assert(sizeof(UnityEngine::MeshFilter*) == 0x8);
    // private UnityEngine.Mesh m_mesh
    // Size: 0x8
    // Offset: 0x60
    UnityEngine::Mesh* m_mesh;
    // Field size check
    static_assert(sizeof(UnityEngine::Mesh*) == 0x8);
    // private TMPro.TextMeshPro m_TextComponent
    // Size: 0x8
    // Offset: 0x68
    TMPro::TextMeshPro* m_TextComponent;
    // Field size check
    static_assert(sizeof(TMPro::TextMeshPro*) == 0x8);
    // private System.Boolean m_isRegisteredForEvents
    // Size: 0x1
    // Offset: 0x70
    bool m_isRegisteredForEvents;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: TMP_SubMesh
    TMP_SubMesh(TMPro::TMP_FontAsset* m_fontAsset_ = {}, TMPro::TMP_SpriteAsset* m_spriteAsset_ = {}, UnityEngine::Material* m_material_ = {}, UnityEngine::Material* m_sharedMaterial_ = {}, UnityEngine::Material* m_fallbackMaterial_ = {}, UnityEngine::Material* m_fallbackSourceMaterial_ = {}, bool m_isDefaultMaterial_ = {}, float m_padding_ = {}, UnityEngine::Renderer* m_renderer_ = {}, UnityEngine::MeshFilter* m_meshFilter_ = {}, UnityEngine::Mesh* m_mesh_ = {}, TMPro::TextMeshPro* m_TextComponent_ = {}, bool m_isRegisteredForEvents_ = {}) noexcept : m_fontAsset{m_fontAsset_}, m_spriteAsset{m_spriteAsset_}, m_material{m_material_}, m_sharedMaterial{m_sharedMaterial_}, m_fallbackMaterial{m_fallbackMaterial_}, m_fallbackSourceMaterial{m_fallbackSourceMaterial_}, m_isDefaultMaterial{m_isDefaultMaterial_}, m_padding{m_padding_}, m_renderer{m_renderer_}, m_meshFilter{m_meshFilter_}, m_mesh{m_mesh_}, m_TextComponent{m_TextComponent_}, m_isRegisteredForEvents{m_isRegisteredForEvents_} {}
    // Deleting conversion operator: operator System::IntPtr
    constexpr operator System::IntPtr() const noexcept = delete;
    // public TMPro.TMP_FontAsset get_fontAsset()
    // Offset: 0xFFBA9C
    TMPro::TMP_FontAsset* get_fontAsset();
    // public System.Void set_fontAsset(TMPro.TMP_FontAsset value)
    // Offset: 0xFFBAA4
    void set_fontAsset(TMPro::TMP_FontAsset* value);
    // public TMPro.TMP_SpriteAsset get_spriteAsset()
    // Offset: 0xFFBAAC
    TMPro::TMP_SpriteAsset* get_spriteAsset();
    // public System.Void set_spriteAsset(TMPro.TMP_SpriteAsset value)
    // Offset: 0xFFBAB4
    void set_spriteAsset(TMPro::TMP_SpriteAsset* value);
    // public UnityEngine.Material get_material()
    // Offset: 0xFFBABC
    UnityEngine::Material* get_material();
    // public System.Void set_material(UnityEngine.Material value)
    // Offset: 0xFFBC24
    void set_material(UnityEngine::Material* value);
    // public UnityEngine.Material get_sharedMaterial()
    // Offset: 0xFFBE3C
    UnityEngine::Material* get_sharedMaterial();
    // public System.Void set_sharedMaterial(UnityEngine.Material value)
    // Offset: 0xFFBE44
    void set_sharedMaterial(UnityEngine::Material* value);
    // public UnityEngine.Material get_fallbackMaterial()
    // Offset: 0xFFBE7C
    UnityEngine::Material* get_fallbackMaterial();
    // public System.Void set_fallbackMaterial(UnityEngine.Material value)
    // Offset: 0xFFBE84
    void set_fallbackMaterial(UnityEngine::Material* value);
    // public UnityEngine.Material get_fallbackSourceMaterial()
    // Offset: 0xFFBFF8
    UnityEngine::Material* get_fallbackSourceMaterial();
    // public System.Void set_fallbackSourceMaterial(UnityEngine.Material value)
    // Offset: 0xFFC000
    void set_fallbackSourceMaterial(UnityEngine::Material* value);
    // public System.Boolean get_isDefaultMaterial()
    // Offset: 0xFFC008
    bool get_isDefaultMaterial();
    // public System.Void set_isDefaultMaterial(System.Boolean value)
    // Offset: 0xFFC010
    void set_isDefaultMaterial(bool value);
    // public System.Single get_padding()
    // Offset: 0xFFC01C
    float get_padding();
    // public System.Void set_padding(System.Single value)
    // Offset: 0xFFC024
    void set_padding(float value);
    // public UnityEngine.Renderer get_renderer()
    // Offset: 0xFFC02C
    UnityEngine::Renderer* get_renderer();
    // public UnityEngine.MeshFilter get_meshFilter()
    // Offset: 0xFFC0D8
    UnityEngine::MeshFilter* get_meshFilter();
    // public UnityEngine.Mesh get_mesh()
    // Offset: 0xFFC184
    UnityEngine::Mesh* get_mesh();
    // public System.Void set_mesh(UnityEngine.Mesh value)
    // Offset: 0xFFC268
    void set_mesh(UnityEngine::Mesh* value);
    // private System.Void OnEnable()
    // Offset: 0xFFC270
    void OnEnable();
    // private System.Void OnDisable()
    // Offset: 0xFFC3A0
    void OnDisable();
    // private System.Void OnDestroy()
    // Offset: 0xFFC474
    void OnDestroy();
    // static public TMPro.TMP_SubMesh AddSubTextObject(TMPro.TextMeshPro textComponent, TMPro.MaterialReference materialReference)
    // Offset: 0xFFC590
    static TMPro::TMP_SubMesh* AddSubTextObject(TMPro::TextMeshPro* textComponent, TMPro::MaterialReference materialReference);
    // public System.Void DestroySelf()
    // Offset: 0xFFC914
    void DestroySelf();
    // private UnityEngine.Material GetMaterial(UnityEngine.Material mat)
    // Offset: 0xFFBAC4
    UnityEngine::Material* GetMaterial(UnityEngine::Material* mat);
    // private UnityEngine.Material CreateMaterialInstance(UnityEngine.Material source)
    // Offset: 0xFFC994
    UnityEngine::Material* CreateMaterialInstance(UnityEngine::Material* source);
    // private UnityEngine.Material GetSharedMaterial()
    // Offset: 0xFFCA50
    UnityEngine::Material* GetSharedMaterial();
    // private System.Void SetSharedMaterial(UnityEngine.Material mat)
    // Offset: 0xFFBE48
    void SetSharedMaterial(UnityEngine::Material* mat);
    // public System.Single GetPaddingForMaterial()
    // Offset: 0xFFBCC8
    float GetPaddingForMaterial();
    // public System.Void UpdateMeshPadding(System.Boolean isExtraPadding, System.Boolean isUsingBold)
    // Offset: 0xFFCB08
    void UpdateMeshPadding(bool isExtraPadding, bool isUsingBold);
    // public System.Void SetVerticesDirty()
    // Offset: 0xFFBD60
    void SetVerticesDirty();
    // public System.Void SetMaterialDirty()
    // Offset: 0xFFBE38
    void SetMaterialDirty();
    // protected System.Void UpdateMaterial()
    // Offset: 0xFFCBCC
    void UpdateMaterial();
    // public System.Void .ctor()
    // Offset: 0xFFCC7C
    // Implemented from: UnityEngine.MonoBehaviour
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TMP_SubMesh* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_SubMesh::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TMP_SubMesh*, creationType>()));
    }
  }; // TMPro.TMP_SubMesh
  #pragma pack(pop)
  static check_size<sizeof(TMP_SubMesh), 112 + sizeof(bool)> __TMPro_TMP_SubMeshSizeCheck;
  static_assert(sizeof(TMP_SubMesh) == 0x71);
}
DEFINE_IL2CPP_ARG_TYPE(TMPro::TMP_SubMesh*, "TMPro", "TMP_SubMesh");
