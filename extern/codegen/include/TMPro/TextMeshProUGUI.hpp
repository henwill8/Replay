// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_Text
#include "TMPro/TMP_Text.hpp"
// Including type: UnityEngine.UI.ILayoutElement
#include "UnityEngine/UI/ILayoutElement.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TMP_SubMeshUI
  class TMP_SubMeshUI;
  // Forward declaring type: TMP_TextInfo
  class TMP_TextInfo;
  // Forward declaring type: TMP_VertexDataUpdateFlags
  struct TMP_VertexDataUpdateFlags;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: CanvasRenderer
  class CanvasRenderer;
  // Forward declaring type: Canvas
  class Canvas;
  // Forward declaring type: Material
  class Material;
  // Skipping declaration: Color32 because it is already included!
  // Forward declaring type: Bounds
  struct Bounds;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Rect
  struct Rect;
  // Skipping declaration: Color because it is already included!
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: CanvasUpdate
  struct CanvasUpdate;
}
// Completed forward declares
// Type namespace: TMPro
namespace TMPro {
  // WARNING Size may be invalid!
  // Autogenerated type: TMPro.TextMeshProUGUI
  // [] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: CFD028
  // [RequireComponent] Offset: CFD028
  // [RequireComponent] Offset: CFD028
  // [AddComponentMenu] Offset: CFD028
  // [ExecuteAlways] Offset: CFD028
  class TextMeshProUGUI : public TMPro::TMP_Text/*, public UnityEngine::UI::ILayoutElement*/ {
    public:
    // private System.Boolean m_hasFontAssetChanged
    // Size: 0x1
    // Offset: 0xB30
    bool m_hasFontAssetChanged;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected TMPro.TMP_SubMeshUI[] m_subTextObjects
    // Size: 0x8
    // Offset: 0xB38
    ::Array<TMPro::TMP_SubMeshUI*>* m_subTextObjects;
    // Field size check
    static_assert(sizeof(::Array<TMPro::TMP_SubMeshUI*>*) == 0x8);
    // private System.Single m_previousLossyScaleY
    // Size: 0x4
    // Offset: 0xB40
    float m_previousLossyScaleY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Vector3[] m_RectTransformCorners
    // Size: 0x8
    // Offset: 0xB48
    ::Array<UnityEngine::Vector3>* m_RectTransformCorners;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Vector3>*) == 0x8);
    // private UnityEngine.CanvasRenderer m_canvasRenderer
    // Size: 0x8
    // Offset: 0xB50
    UnityEngine::CanvasRenderer* m_canvasRenderer;
    // Field size check
    static_assert(sizeof(UnityEngine::CanvasRenderer*) == 0x8);
    // private UnityEngine.Canvas m_canvas
    // Size: 0x8
    // Offset: 0xB58
    UnityEngine::Canvas* m_canvas;
    // Field size check
    static_assert(sizeof(UnityEngine::Canvas*) == 0x8);
    // private System.Boolean m_isFirstAllocation
    // Size: 0x1
    // Offset: 0xB60
    bool m_isFirstAllocation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 m_max_characters
    // Size: 0x4
    // Offset: 0xB64
    int m_max_characters;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_isMaskingEnabled
    // Size: 0x1
    // Offset: 0xB68
    bool m_isMaskingEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private UnityEngine.Material m_baseMaterial
    // Size: 0x8
    // Offset: 0xB70
    UnityEngine::Material* m_baseMaterial;
    // Field size check
    static_assert(sizeof(UnityEngine::Material*) == 0x8);
    // private System.Boolean m_isScrollRegionSet
    // Size: 0x1
    // Offset: 0xB78
    bool m_isScrollRegionSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 m_stencilID
    // Size: 0x4
    // Offset: 0xB7C
    int m_stencilID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private UnityEngine.Vector4 m_maskOffset
    // Size: 0x10
    // Offset: 0xB80
    UnityEngine::Vector4 m_maskOffset;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector4) == 0x10);
    // private UnityEngine.Matrix4x4 m_EnvMapMatrix
    // Size: 0x40
    // Offset: 0xB90
    UnityEngine::Matrix4x4 m_EnvMapMatrix;
    // Field size check
    static_assert(sizeof(UnityEngine::Matrix4x4) == 0x40);
    // private System.Boolean m_isRegisteredForEvents
    // Size: 0x1
    // Offset: 0xBD0
    bool m_isRegisteredForEvents;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 m_recursiveCountA
    // Size: 0x4
    // Offset: 0xBD4
    int m_recursiveCountA;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 loopCountA
    // Size: 0x4
    // Offset: 0xBD8
    int loopCountA;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_isRebuildingLayout
    // Size: 0x1
    // Offset: 0xBDC
    bool m_isRebuildingLayout;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: TextMeshProUGUI
    TextMeshProUGUI(bool m_hasFontAssetChanged_ = {}, ::Array<TMPro::TMP_SubMeshUI*>* m_subTextObjects_ = {}, float m_previousLossyScaleY_ = {}, ::Array<UnityEngine::Vector3>* m_RectTransformCorners_ = {}, UnityEngine::CanvasRenderer* m_canvasRenderer_ = {}, UnityEngine::Canvas* m_canvas_ = {}, bool m_isFirstAllocation_ = {}, int m_max_characters_ = {}, bool m_isMaskingEnabled_ = {}, UnityEngine::Material* m_baseMaterial_ = {}, bool m_isScrollRegionSet_ = {}, int m_stencilID_ = {}, UnityEngine::Vector4 m_maskOffset_ = {}, UnityEngine::Matrix4x4 m_EnvMapMatrix_ = {}, bool m_isRegisteredForEvents_ = {}, int m_recursiveCountA_ = {}, int loopCountA_ = {}, bool m_isRebuildingLayout_ = {}) noexcept : m_hasFontAssetChanged{m_hasFontAssetChanged_}, m_subTextObjects{m_subTextObjects_}, m_previousLossyScaleY{m_previousLossyScaleY_}, m_RectTransformCorners{m_RectTransformCorners_}, m_canvasRenderer{m_canvasRenderer_}, m_canvas{m_canvas_}, m_isFirstAllocation{m_isFirstAllocation_}, m_max_characters{m_max_characters_}, m_isMaskingEnabled{m_isMaskingEnabled_}, m_baseMaterial{m_baseMaterial_}, m_isScrollRegionSet{m_isScrollRegionSet_}, m_stencilID{m_stencilID_}, m_maskOffset{m_maskOffset_}, m_EnvMapMatrix{m_EnvMapMatrix_}, m_isRegisteredForEvents{m_isRegisteredForEvents_}, m_recursiveCountA{m_recursiveCountA_}, loopCountA{loopCountA_}, m_isRebuildingLayout{m_isRebuildingLayout_} {}
    // Creating interface conversion operator: operator UnityEngine::UI::ILayoutElement
    operator UnityEngine::UI::ILayoutElement() noexcept {
      return *reinterpret_cast<UnityEngine::UI::ILayoutElement*>(this);
    }
    // private UnityEngine.Canvas GetCanvas()
    // Offset: 0x1AC0B68
    UnityEngine::Canvas* GetCanvas();
    // private System.Void UpdateEnvMapMatrix()
    // Offset: 0x1AC166C
    void UpdateEnvMapMatrix();
    // private System.Void EnableMasking()
    // Offset: 0x1AC1950
    void EnableMasking();
    // private System.Void DisableMasking()
    // Offset: 0x1AC2030
    void DisableMasking();
    // private System.Void UpdateMask()
    // Offset: 0x1AC1B40
    void UpdateMask();
    // private System.Void SetPerspectiveCorrection()
    // Offset: 0x1AC345C
    void SetPerspectiveCorrection();
    // private System.Void SetMeshArrays(System.Int32 size)
    // Offset: 0x1AC36A8
    void SetMeshArrays(int size);
    // private System.Void OnPreRenderCanvas()
    // Offset: 0x1AC5C28
    void OnPreRenderCanvas();
    // private System.Void UpdateSDFScale(System.Single scaleDelta)
    // Offset: 0x1AC59AC
    void UpdateSDFScale(float scaleDelta);
    // private System.Void UpdateSubObjectPivot()
    // Offset: 0x1AC57E0
    void UpdateSubObjectPivot();
    // public UnityEngine.Vector4 get_maskOffset()
    // Offset: 0x1ACF49C
    UnityEngine::Vector4 get_maskOffset();
    // public System.Void set_maskOffset(UnityEngine.Vector4 value)
    // Offset: 0x1ACF4B0
    void set_maskOffset(UnityEngine::Vector4 value);
    // public System.Void UpdateFontAsset()
    // Offset: 0x1ACFE68
    void UpdateFontAsset();
    // protected override System.Void Awake()
    // Offset: 0x1AC05F0
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::Awake()
    void Awake();
    // protected override System.Void OnEnable()
    // Offset: 0x1AC0A40
    // Implemented from: UnityEngine.UI.MaskableGraphic
    // Base method: System.Void MaskableGraphic::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x1AC0CBC
    // Implemented from: UnityEngine.UI.MaskableGraphic
    // Base method: System.Void MaskableGraphic::OnDisable()
    void OnDisable();
    // protected override System.Void OnDestroy()
    // Offset: 0x1AC0EA0
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::OnDestroy()
    void OnDestroy();
    // protected override System.Void LoadFontAsset()
    // Offset: 0x1AC1000
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::LoadFontAsset()
    void LoadFontAsset();
    // protected override UnityEngine.Material GetMaterial(UnityEngine.Material mat)
    // Offset: 0x1AC2168
    // Implemented from: TMPro.TMP_Text
    // Base method: UnityEngine.Material TMP_Text::GetMaterial(UnityEngine.Material mat)
    UnityEngine::Material* GetMaterial(UnityEngine::Material* mat);
    // protected override UnityEngine.Material[] GetMaterials(UnityEngine.Material[] mats)
    // Offset: 0x1AC22CC
    // Implemented from: TMPro.TMP_Text
    // Base method: UnityEngine.Material[] TMP_Text::GetMaterials(UnityEngine.Material[] mats)
    ::Array<UnityEngine::Material*>* GetMaterials(::Array<UnityEngine::Material*>* mats);
    // protected override System.Void SetSharedMaterial(UnityEngine.Material mat)
    // Offset: 0x1AC24B0
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::SetSharedMaterial(UnityEngine.Material mat)
    void SetSharedMaterial(UnityEngine::Material* mat);
    // protected override UnityEngine.Material[] GetSharedMaterials()
    // Offset: 0x1AC24FC
    // Implemented from: TMPro.TMP_Text
    // Base method: UnityEngine.Material[] TMP_Text::GetSharedMaterials()
    ::Array<UnityEngine::Material*>* GetSharedMaterials();
    // protected override System.Void SetSharedMaterials(UnityEngine.Material[] materials)
    // Offset: 0x1AC26B4
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::SetSharedMaterials(UnityEngine.Material[] materials)
    void SetSharedMaterials(::Array<UnityEngine::Material*>* materials);
    // protected override System.Void SetOutlineThickness(System.Single thickness)
    // Offset: 0x1AC2B38
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::SetOutlineThickness(System.Single thickness)
    void SetOutlineThickness(float thickness);
    // protected override System.Void SetFaceColor(UnityEngine.Color32 color)
    // Offset: 0x1AC2D80
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::SetFaceColor(UnityEngine.Color32 color)
    void SetFaceColor(UnityEngine::Color32 color);
    // protected override System.Void SetOutlineColor(UnityEngine.Color32 color)
    // Offset: 0x1AC2EAC
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::SetOutlineColor(UnityEngine.Color32 color)
    void SetOutlineColor(UnityEngine::Color32 color);
    // protected override System.Void SetShaderDepth()
    // Offset: 0x1AC2FD8
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::SetShaderDepth()
    void SetShaderDepth();
    // protected override System.Void SetCulling()
    // Offset: 0x1AC312C
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::SetCulling()
    void SetCulling();
    // protected override System.Single GetPaddingForMaterial(UnityEngine.Material mat)
    // Offset: 0x1AC3508
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Single TMP_Text::GetPaddingForMaterial(UnityEngine.Material mat)
    float GetPaddingForMaterial(UnityEngine::Material* mat);
    // protected override System.Single GetPaddingForMaterial()
    // Offset: 0x1AC35E4
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Single TMP_Text::GetPaddingForMaterial()
    float GetPaddingForMaterial();
    // protected override System.Int32 SetArraySizes(TMPro.TMP_Text/UnicodeChar[] chars)
    // Offset: 0x1AC3720
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Int32 TMP_Text::SetArraySizes(TMPro.TMP_Text/UnicodeChar[] chars)
    int SetArraySizes(::Array<TMPro::TMP_Text::UnicodeChar>* chars);
    // public override System.Void ComputeMarginSize()
    // Offset: 0x1AC5554
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::ComputeMarginSize()
    void ComputeMarginSize();
    // protected override System.Void OnDidApplyAnimationProperties()
    // Offset: 0x1AC5680
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::OnDidApplyAnimationProperties()
    void OnDidApplyAnimationProperties();
    // protected override System.Void OnCanvasHierarchyChanged()
    // Offset: 0x1AC56C4
    // Implemented from: UnityEngine.UI.MaskableGraphic
    // Base method: System.Void MaskableGraphic::OnCanvasHierarchyChanged()
    void OnCanvasHierarchyChanged();
    // protected override System.Void OnTransformParentChanged()
    // Offset: 0x1AC5700
    // Implemented from: UnityEngine.UI.MaskableGraphic
    // Base method: System.Void MaskableGraphic::OnTransformParentChanged()
    void OnTransformParentChanged();
    // protected override System.Void OnRectTransformDimensionsChange()
    // Offset: 0x1AC575C
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::OnRectTransformDimensionsChange()
    void OnRectTransformDimensionsChange();
    // override System.Void InternalUpdate()
    // Offset: 0x1AC58D4
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::InternalUpdate()
    void InternalUpdate();
    // protected override System.Void GenerateTextMesh()
    // Offset: 0x1AC5E2C
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::GenerateTextMesh()
    void GenerateTextMesh();
    // protected override UnityEngine.Vector3[] GetTextContainerLocalCorners()
    // Offset: 0x1ACE1DC
    // Implemented from: TMPro.TMP_Text
    // Base method: UnityEngine.Vector3[] TMP_Text::GetTextContainerLocalCorners()
    ::Array<UnityEngine::Vector3>* GetTextContainerLocalCorners();
    // protected override System.Void SetActiveSubMeshes(System.Boolean state)
    // Offset: 0x1ACE290
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::SetActiveSubMeshes(System.Boolean state)
    void SetActiveSubMeshes(bool state);
    // protected override UnityEngine.Bounds GetCompoundBounds()
    // Offset: 0x1ACE3B0
    // Implemented from: TMPro.TMP_Text
    // Base method: UnityEngine.Bounds TMP_Text::GetCompoundBounds()
    UnityEngine::Bounds GetCompoundBounds();
    // protected override System.Void AdjustLineOffset(System.Int32 startIndex, System.Int32 endIndex, System.Single offset)
    // Offset: 0x1ACE6C8
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::AdjustLineOffset(System.Int32 startIndex, System.Int32 endIndex, System.Single offset)
    void AdjustLineOffset(int startIndex, int endIndex, float offset);
    // public override UnityEngine.Material get_materialForRendering()
    // Offset: 0x1ACEAE0
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: UnityEngine.Material Graphic::get_materialForRendering()
    UnityEngine::Material* get_materialForRendering();
    // public override System.Boolean get_autoSizeTextContainer()
    // Offset: 0x1ACEB50
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Boolean TMP_Text::get_autoSizeTextContainer()
    bool get_autoSizeTextContainer();
    // public override System.Void set_autoSizeTextContainer(System.Boolean value)
    // Offset: 0x1ACEB58
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::set_autoSizeTextContainer(System.Boolean value)
    void set_autoSizeTextContainer(bool value);
    // public override UnityEngine.Mesh get_mesh()
    // Offset: 0x1ACEC10
    // Implemented from: TMPro.TMP_Text
    // Base method: UnityEngine.Mesh TMP_Text::get_mesh()
    UnityEngine::Mesh* get_mesh();
    // public UnityEngine.CanvasRenderer get_canvasRenderer()
    // Offset: 0x1ACEC18
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: UnityEngine.CanvasRenderer Graphic::get_canvasRenderer()
    UnityEngine::CanvasRenderer* get_canvasRenderer();
    // public System.Void CalculateLayoutInputHorizontal()
    // Offset: 0x1ACECC4
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Void ILayoutElement::CalculateLayoutInputHorizontal()
    void CalculateLayoutInputHorizontal();
    // public System.Void CalculateLayoutInputVertical()
    // Offset: 0x1ACED44
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Void ILayoutElement::CalculateLayoutInputVertical()
    void CalculateLayoutInputVertical();
    // public override System.Void SetVerticesDirty()
    // Offset: 0x1ACEDC8
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::SetVerticesDirty()
    void SetVerticesDirty();
    // public override System.Void SetLayoutDirty()
    // Offset: 0x1ACEEC8
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::SetLayoutDirty()
    void SetLayoutDirty();
    // public override System.Void SetMaterialDirty()
    // Offset: 0x1ACEFD4
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::SetMaterialDirty()
    void SetMaterialDirty();
    // public override System.Void SetAllDirty()
    // Offset: 0x1ACF0CC
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::SetAllDirty()
    void SetAllDirty();
    // public override System.Void Rebuild(UnityEngine.UI.CanvasUpdate update)
    // Offset: 0x1ACF124
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::Rebuild(UnityEngine.UI.CanvasUpdate update)
    void Rebuild(UnityEngine::UI::CanvasUpdate update);
    // public override UnityEngine.Material GetModifiedMaterial(UnityEngine.Material baseMaterial)
    // Offset: 0x1ACF220
    // Implemented from: UnityEngine.UI.MaskableGraphic
    // Base method: UnityEngine.Material MaskableGraphic::GetModifiedMaterial(UnityEngine.Material baseMaterial)
    UnityEngine::Material* GetModifiedMaterial(UnityEngine::Material* baseMaterial);
    // protected override System.Void UpdateMaterial()
    // Offset: 0x1ACF37C
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::UpdateMaterial()
    void UpdateMaterial();
    // public override System.Void RecalculateClipping()
    // Offset: 0x1ACF4E8
    // Implemented from: UnityEngine.UI.MaskableGraphic
    // Base method: System.Void MaskableGraphic::RecalculateClipping()
    void RecalculateClipping();
    // public override System.Void RecalculateMasking()
    // Offset: 0x1ACF4F0
    // Implemented from: UnityEngine.UI.MaskableGraphic
    // Base method: System.Void MaskableGraphic::RecalculateMasking()
    void RecalculateMasking();
    // public override System.Void Cull(UnityEngine.Rect clipRect, System.Boolean validRect)
    // Offset: 0x1ACF508
    // Implemented from: UnityEngine.UI.MaskableGraphic
    // Base method: System.Void MaskableGraphic::Cull(UnityEngine.Rect clipRect, System.Boolean validRect)
    void Cull(UnityEngine::Rect clipRect, bool validRect);
    // public override System.Void UpdateMeshPadding()
    // Offset: 0x1ACF520
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::UpdateMeshPadding()
    void UpdateMeshPadding();
    // protected override System.Void InternalCrossFadeColor(UnityEngine.Color targetColor, System.Single duration, System.Boolean ignoreTimeScale, System.Boolean useAlpha)
    // Offset: 0x1ACF638
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::InternalCrossFadeColor(UnityEngine.Color targetColor, System.Single duration, System.Boolean ignoreTimeScale, System.Boolean useAlpha)
    void InternalCrossFadeColor(UnityEngine::Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha);
    // protected override System.Void InternalCrossFadeAlpha(System.Single alpha, System.Single duration, System.Boolean ignoreTimeScale)
    // Offset: 0x1ACF71C
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::InternalCrossFadeAlpha(System.Single alpha, System.Single duration, System.Boolean ignoreTimeScale)
    void InternalCrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale);
    // public override System.Void ForceMeshUpdate()
    // Offset: 0x1ACF7C8
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::ForceMeshUpdate()
    void ForceMeshUpdate();
    // public override System.Void ForceMeshUpdate(System.Boolean ignoreInactive)
    // Offset: 0x1ACF7D4
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::ForceMeshUpdate(System.Boolean ignoreInactive)
    void ForceMeshUpdate(bool ignoreInactive);
    // public override TMPro.TMP_TextInfo GetTextInfo(System.String text)
    // Offset: 0x1ACF7E4
    // Implemented from: TMPro.TMP_Text
    // Base method: TMPro.TMP_TextInfo TMP_Text::GetTextInfo(System.String text)
    TMPro::TMP_TextInfo* GetTextInfo(::Il2CppString* text);
    // public override System.Void ClearMesh()
    // Offset: 0x1ACF8EC
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::ClearMesh()
    void ClearMesh();
    // public override System.Void UpdateGeometry(UnityEngine.Mesh mesh, System.Int32 index)
    // Offset: 0x1ACF9FC
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::UpdateGeometry(UnityEngine.Mesh mesh, System.Int32 index)
    void UpdateGeometry(UnityEngine::Mesh* mesh, int index);
    // public override System.Void UpdateVertexData(TMPro.TMP_VertexDataUpdateFlags flags)
    // Offset: 0x1ACFA88
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::UpdateVertexData(TMPro.TMP_VertexDataUpdateFlags flags)
    void UpdateVertexData(TMPro::TMP_VertexDataUpdateFlags flags);
    // public override System.Void UpdateVertexData()
    // Offset: 0x1ACFC80
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::UpdateVertexData()
    void UpdateVertexData();
    // public System.Void .ctor()
    // Offset: 0x1ACFE78
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::.ctor()
    // Base method: System.Void MaskableGraphic::.ctor()
    // Base method: System.Void Graphic::.ctor()
    // Base method: System.Void UIBehaviour::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextMeshProUGUI* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshProUGUI::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextMeshProUGUI*, creationType>()));
    }
  }; // TMPro.TextMeshProUGUI
  // WARNING Not writing size check since size may be invalid!
}
DEFINE_IL2CPP_ARG_TYPE(TMPro::TextMeshProUGUI*, "TMPro", "TextMeshProUGUI");
