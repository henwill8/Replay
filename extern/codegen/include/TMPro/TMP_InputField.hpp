// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
// Including type: UnityEngine.UI.Selectable
#include "UnityEngine/UI/Selectable.hpp"
// Including type: UnityEngine.EventSystems.IUpdateSelectedHandler
#include "UnityEngine/EventSystems/IUpdateSelectedHandler.hpp"
// Including type: UnityEngine.EventSystems.IBeginDragHandler
#include "UnityEngine/EventSystems/IBeginDragHandler.hpp"
// Including type: UnityEngine.EventSystems.IDragHandler
#include "UnityEngine/EventSystems/IDragHandler.hpp"
// Including type: UnityEngine.EventSystems.IEndDragHandler
#include "UnityEngine/EventSystems/IEndDragHandler.hpp"
// Including type: UnityEngine.EventSystems.IPointerClickHandler
#include "UnityEngine/EventSystems/IPointerClickHandler.hpp"
// Including type: UnityEngine.EventSystems.ISubmitHandler
#include "UnityEngine/EventSystems/ISubmitHandler.hpp"
// Including type: UnityEngine.UI.ICanvasElement
#include "UnityEngine/UI/ICanvasElement.hpp"
// Including type: UnityEngine.UI.ILayoutElement
#include "UnityEngine/UI/ILayoutElement.hpp"
// Including type: UnityEngine.EventSystems.IScrollHandler
#include "UnityEngine/EventSystems/IScrollHandler.hpp"
// Including type: UnityEngine.TouchScreenKeyboardType
#include "UnityEngine/TouchScreenKeyboardType.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Coroutine
  class Coroutine;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: UIVertex
  struct UIVertex;
  // Forward declaring type: CanvasRenderer
  class CanvasRenderer;
  // Forward declaring type: TouchScreenKeyboard
  class TouchScreenKeyboard;
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: WaitForSecondsRealtime
  class WaitForSecondsRealtime;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Event
  class Event;
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TMP_Text
  class TMP_Text;
  // Forward declaring type: TMP_ScrollbarEventHandler
  class TMP_ScrollbarEventHandler;
  // Forward declaring type: TMP_FontAsset
  class TMP_FontAsset;
  // Forward declaring type: TMP_InputValidator
  class TMP_InputValidator;
  // Skipping declaration: ContentType because it is already included!
  // Skipping declaration: LineType because it is already included!
  // Skipping declaration: InputType because it is already included!
  // Skipping declaration: CharacterValidation because it is already included!
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Graphic
  class Graphic;
  // Forward declaring type: Scrollbar
  class Scrollbar;
  // Forward declaring type: VertexHelper
  class VertexHelper;
  // Forward declaring type: CanvasUpdate
  struct CanvasUpdate;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: BaseInput
  class BaseInput;
  // Forward declaring type: PointerEventData
  class PointerEventData;
  // Forward declaring type: BaseEventData
  class BaseEventData;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: TMPro
namespace TMPro {
  // Autogenerated type: TMPro.TMP_InputField
  class TMP_InputField : public UnityEngine::UI::Selectable, public UnityEngine::EventSystems::IUpdateSelectedHandler, public UnityEngine::EventSystems::IBeginDragHandler, public UnityEngine::EventSystems::IDragHandler, public UnityEngine::EventSystems::IEndDragHandler, public UnityEngine::EventSystems::IPointerClickHandler, public UnityEngine::EventSystems::ISubmitHandler, public UnityEngine::UI::ICanvasElement, public UnityEngine::UI::ILayoutElement, public UnityEngine::EventSystems::IScrollHandler {
    public:
    // Nested type: TMPro::TMP_InputField::ContentType
    struct ContentType;
    // Nested type: TMPro::TMP_InputField::InputType
    struct InputType;
    // Nested type: TMPro::TMP_InputField::CharacterValidation
    struct CharacterValidation;
    // Nested type: TMPro::TMP_InputField::LineType
    struct LineType;
    // Nested type: TMPro::TMP_InputField::OnValidateInput
    class OnValidateInput;
    // Nested type: TMPro::TMP_InputField::SubmitEvent
    class SubmitEvent;
    // Nested type: TMPro::TMP_InputField::OnChangeEvent
    class OnChangeEvent;
    // Nested type: TMPro::TMP_InputField::SelectionEvent
    class SelectionEvent;
    // Nested type: TMPro::TMP_InputField::TextSelectionEvent
    class TextSelectionEvent;
    // Nested type: TMPro::TMP_InputField::TouchScreenKeyboardEvent
    class TouchScreenKeyboardEvent;
    // Nested type: TMPro::TMP_InputField::EditState
    struct EditState;
    // Nested type: TMPro::TMP_InputField::$CaretBlink$d__267
    class $CaretBlink$d__267;
    // Nested type: TMPro::TMP_InputField::$MouseDragOutsideRect$d__285
    class $MouseDragOutsideRect$d__285;
    // Autogenerated type: TMPro.TMP_InputField/ContentType
    struct ContentType : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: ContentType
      constexpr ContentType(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public TMPro.TMP_InputField/ContentType Standard
      static constexpr const int Standard = 0;
      // Get static field: static public TMPro.TMP_InputField/ContentType Standard
      static TMPro::TMP_InputField::ContentType _get_Standard();
      // Set static field: static public TMPro.TMP_InputField/ContentType Standard
      static void _set_Standard(TMPro::TMP_InputField::ContentType value);
      // static field const value: static public TMPro.TMP_InputField/ContentType Autocorrected
      static constexpr const int Autocorrected = 1;
      // Get static field: static public TMPro.TMP_InputField/ContentType Autocorrected
      static TMPro::TMP_InputField::ContentType _get_Autocorrected();
      // Set static field: static public TMPro.TMP_InputField/ContentType Autocorrected
      static void _set_Autocorrected(TMPro::TMP_InputField::ContentType value);
      // static field const value: static public TMPro.TMP_InputField/ContentType IntegerNumber
      static constexpr const int IntegerNumber = 2;
      // Get static field: static public TMPro.TMP_InputField/ContentType IntegerNumber
      static TMPro::TMP_InputField::ContentType _get_IntegerNumber();
      // Set static field: static public TMPro.TMP_InputField/ContentType IntegerNumber
      static void _set_IntegerNumber(TMPro::TMP_InputField::ContentType value);
      // static field const value: static public TMPro.TMP_InputField/ContentType DecimalNumber
      static constexpr const int DecimalNumber = 3;
      // Get static field: static public TMPro.TMP_InputField/ContentType DecimalNumber
      static TMPro::TMP_InputField::ContentType _get_DecimalNumber();
      // Set static field: static public TMPro.TMP_InputField/ContentType DecimalNumber
      static void _set_DecimalNumber(TMPro::TMP_InputField::ContentType value);
      // static field const value: static public TMPro.TMP_InputField/ContentType Alphanumeric
      static constexpr const int Alphanumeric = 4;
      // Get static field: static public TMPro.TMP_InputField/ContentType Alphanumeric
      static TMPro::TMP_InputField::ContentType _get_Alphanumeric();
      // Set static field: static public TMPro.TMP_InputField/ContentType Alphanumeric
      static void _set_Alphanumeric(TMPro::TMP_InputField::ContentType value);
      // static field const value: static public TMPro.TMP_InputField/ContentType Name
      static constexpr const int Name = 5;
      // Get static field: static public TMPro.TMP_InputField/ContentType Name
      static TMPro::TMP_InputField::ContentType _get_Name();
      // Set static field: static public TMPro.TMP_InputField/ContentType Name
      static void _set_Name(TMPro::TMP_InputField::ContentType value);
      // static field const value: static public TMPro.TMP_InputField/ContentType EmailAddress
      static constexpr const int EmailAddress = 6;
      // Get static field: static public TMPro.TMP_InputField/ContentType EmailAddress
      static TMPro::TMP_InputField::ContentType _get_EmailAddress();
      // Set static field: static public TMPro.TMP_InputField/ContentType EmailAddress
      static void _set_EmailAddress(TMPro::TMP_InputField::ContentType value);
      // static field const value: static public TMPro.TMP_InputField/ContentType Password
      static constexpr const int Password = 7;
      // Get static field: static public TMPro.TMP_InputField/ContentType Password
      static TMPro::TMP_InputField::ContentType _get_Password();
      // Set static field: static public TMPro.TMP_InputField/ContentType Password
      static void _set_Password(TMPro::TMP_InputField::ContentType value);
      // static field const value: static public TMPro.TMP_InputField/ContentType Pin
      static constexpr const int Pin = 8;
      // Get static field: static public TMPro.TMP_InputField/ContentType Pin
      static TMPro::TMP_InputField::ContentType _get_Pin();
      // Set static field: static public TMPro.TMP_InputField/ContentType Pin
      static void _set_Pin(TMPro::TMP_InputField::ContentType value);
      // static field const value: static public TMPro.TMP_InputField/ContentType Custom
      static constexpr const int Custom = 9;
      // Get static field: static public TMPro.TMP_InputField/ContentType Custom
      static TMPro::TMP_InputField::ContentType _get_Custom();
      // Set static field: static public TMPro.TMP_InputField/ContentType Custom
      static void _set_Custom(TMPro::TMP_InputField::ContentType value);
    }; // TMPro.TMP_InputField/ContentType
    // Autogenerated type: TMPro.TMP_InputField/InputType
    struct InputType : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: InputType
      constexpr InputType(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public TMPro.TMP_InputField/InputType Standard
      static constexpr const int Standard = 0;
      // Get static field: static public TMPro.TMP_InputField/InputType Standard
      static TMPro::TMP_InputField::InputType _get_Standard();
      // Set static field: static public TMPro.TMP_InputField/InputType Standard
      static void _set_Standard(TMPro::TMP_InputField::InputType value);
      // static field const value: static public TMPro.TMP_InputField/InputType AutoCorrect
      static constexpr const int AutoCorrect = 1;
      // Get static field: static public TMPro.TMP_InputField/InputType AutoCorrect
      static TMPro::TMP_InputField::InputType _get_AutoCorrect();
      // Set static field: static public TMPro.TMP_InputField/InputType AutoCorrect
      static void _set_AutoCorrect(TMPro::TMP_InputField::InputType value);
      // static field const value: static public TMPro.TMP_InputField/InputType Password
      static constexpr const int Password = 2;
      // Get static field: static public TMPro.TMP_InputField/InputType Password
      static TMPro::TMP_InputField::InputType _get_Password();
      // Set static field: static public TMPro.TMP_InputField/InputType Password
      static void _set_Password(TMPro::TMP_InputField::InputType value);
    }; // TMPro.TMP_InputField/InputType
    // Autogenerated type: TMPro.TMP_InputField/CharacterValidation
    struct CharacterValidation : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: CharacterValidation
      constexpr CharacterValidation(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public TMPro.TMP_InputField/CharacterValidation None
      static constexpr const int None = 0;
      // Get static field: static public TMPro.TMP_InputField/CharacterValidation None
      static TMPro::TMP_InputField::CharacterValidation _get_None();
      // Set static field: static public TMPro.TMP_InputField/CharacterValidation None
      static void _set_None(TMPro::TMP_InputField::CharacterValidation value);
      // static field const value: static public TMPro.TMP_InputField/CharacterValidation Digit
      static constexpr const int Digit = 1;
      // Get static field: static public TMPro.TMP_InputField/CharacterValidation Digit
      static TMPro::TMP_InputField::CharacterValidation _get_Digit();
      // Set static field: static public TMPro.TMP_InputField/CharacterValidation Digit
      static void _set_Digit(TMPro::TMP_InputField::CharacterValidation value);
      // static field const value: static public TMPro.TMP_InputField/CharacterValidation Integer
      static constexpr const int Integer = 2;
      // Get static field: static public TMPro.TMP_InputField/CharacterValidation Integer
      static TMPro::TMP_InputField::CharacterValidation _get_Integer();
      // Set static field: static public TMPro.TMP_InputField/CharacterValidation Integer
      static void _set_Integer(TMPro::TMP_InputField::CharacterValidation value);
      // static field const value: static public TMPro.TMP_InputField/CharacterValidation Decimal
      static constexpr const int Decimal = 3;
      // Get static field: static public TMPro.TMP_InputField/CharacterValidation Decimal
      static TMPro::TMP_InputField::CharacterValidation _get_Decimal();
      // Set static field: static public TMPro.TMP_InputField/CharacterValidation Decimal
      static void _set_Decimal(TMPro::TMP_InputField::CharacterValidation value);
      // static field const value: static public TMPro.TMP_InputField/CharacterValidation Alphanumeric
      static constexpr const int Alphanumeric = 4;
      // Get static field: static public TMPro.TMP_InputField/CharacterValidation Alphanumeric
      static TMPro::TMP_InputField::CharacterValidation _get_Alphanumeric();
      // Set static field: static public TMPro.TMP_InputField/CharacterValidation Alphanumeric
      static void _set_Alphanumeric(TMPro::TMP_InputField::CharacterValidation value);
      // static field const value: static public TMPro.TMP_InputField/CharacterValidation Name
      static constexpr const int Name = 5;
      // Get static field: static public TMPro.TMP_InputField/CharacterValidation Name
      static TMPro::TMP_InputField::CharacterValidation _get_Name();
      // Set static field: static public TMPro.TMP_InputField/CharacterValidation Name
      static void _set_Name(TMPro::TMP_InputField::CharacterValidation value);
      // static field const value: static public TMPro.TMP_InputField/CharacterValidation Regex
      static constexpr const int Regex = 6;
      // Get static field: static public TMPro.TMP_InputField/CharacterValidation Regex
      static TMPro::TMP_InputField::CharacterValidation _get_Regex();
      // Set static field: static public TMPro.TMP_InputField/CharacterValidation Regex
      static void _set_Regex(TMPro::TMP_InputField::CharacterValidation value);
      // static field const value: static public TMPro.TMP_InputField/CharacterValidation EmailAddress
      static constexpr const int EmailAddress = 7;
      // Get static field: static public TMPro.TMP_InputField/CharacterValidation EmailAddress
      static TMPro::TMP_InputField::CharacterValidation _get_EmailAddress();
      // Set static field: static public TMPro.TMP_InputField/CharacterValidation EmailAddress
      static void _set_EmailAddress(TMPro::TMP_InputField::CharacterValidation value);
      // static field const value: static public TMPro.TMP_InputField/CharacterValidation CustomValidator
      static constexpr const int CustomValidator = 8;
      // Get static field: static public TMPro.TMP_InputField/CharacterValidation CustomValidator
      static TMPro::TMP_InputField::CharacterValidation _get_CustomValidator();
      // Set static field: static public TMPro.TMP_InputField/CharacterValidation CustomValidator
      static void _set_CustomValidator(TMPro::TMP_InputField::CharacterValidation value);
    }; // TMPro.TMP_InputField/CharacterValidation
    // Autogenerated type: TMPro.TMP_InputField/LineType
    struct LineType : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: LineType
      constexpr LineType(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public TMPro.TMP_InputField/LineType SingleLine
      static constexpr const int SingleLine = 0;
      // Get static field: static public TMPro.TMP_InputField/LineType SingleLine
      static TMPro::TMP_InputField::LineType _get_SingleLine();
      // Set static field: static public TMPro.TMP_InputField/LineType SingleLine
      static void _set_SingleLine(TMPro::TMP_InputField::LineType value);
      // static field const value: static public TMPro.TMP_InputField/LineType MultiLineSubmit
      static constexpr const int MultiLineSubmit = 1;
      // Get static field: static public TMPro.TMP_InputField/LineType MultiLineSubmit
      static TMPro::TMP_InputField::LineType _get_MultiLineSubmit();
      // Set static field: static public TMPro.TMP_InputField/LineType MultiLineSubmit
      static void _set_MultiLineSubmit(TMPro::TMP_InputField::LineType value);
      // static field const value: static public TMPro.TMP_InputField/LineType MultiLineNewline
      static constexpr const int MultiLineNewline = 2;
      // Get static field: static public TMPro.TMP_InputField/LineType MultiLineNewline
      static TMPro::TMP_InputField::LineType _get_MultiLineNewline();
      // Set static field: static public TMPro.TMP_InputField/LineType MultiLineNewline
      static void _set_MultiLineNewline(TMPro::TMP_InputField::LineType value);
    }; // TMPro.TMP_InputField/LineType
    // protected UnityEngine.TouchScreenKeyboard m_SoftKeyboard
    // Offset: 0xF0
    UnityEngine::TouchScreenKeyboard* m_SoftKeyboard;
    // protected UnityEngine.RectTransform m_TextViewport
    // Offset: 0xF8
    UnityEngine::RectTransform* m_TextViewport;
    // protected TMPro.TMP_Text m_TextComponent
    // Offset: 0x100
    TMPro::TMP_Text* m_TextComponent;
    // protected UnityEngine.RectTransform m_TextComponentRectTransform
    // Offset: 0x108
    UnityEngine::RectTransform* m_TextComponentRectTransform;
    // protected UnityEngine.UI.Graphic m_Placeholder
    // Offset: 0x110
    UnityEngine::UI::Graphic* m_Placeholder;
    // protected UnityEngine.UI.Scrollbar m_VerticalScrollbar
    // Offset: 0x118
    UnityEngine::UI::Scrollbar* m_VerticalScrollbar;
    // protected TMPro.TMP_ScrollbarEventHandler m_VerticalScrollbarEventHandler
    // Offset: 0x120
    TMPro::TMP_ScrollbarEventHandler* m_VerticalScrollbarEventHandler;
    // private System.Boolean m_IsDrivenByLayoutComponents
    // Offset: 0x128
    bool m_IsDrivenByLayoutComponents;
    // private System.Single m_ScrollPosition
    // Offset: 0x12C
    float m_ScrollPosition;
    // protected System.Single m_ScrollSensitivity
    // Offset: 0x130
    float m_ScrollSensitivity;
    // private TMPro.TMP_InputField/ContentType m_ContentType
    // Offset: 0x134
    TMPro::TMP_InputField::ContentType m_ContentType;
    // private TMPro.TMP_InputField/InputType m_InputType
    // Offset: 0x138
    TMPro::TMP_InputField::InputType m_InputType;
    // private System.Char m_AsteriskChar
    // Offset: 0x13C
    ::Il2CppChar m_AsteriskChar;
    // private UnityEngine.TouchScreenKeyboardType m_KeyboardType
    // Offset: 0x140
    UnityEngine::TouchScreenKeyboardType m_KeyboardType;
    // private TMPro.TMP_InputField/LineType m_LineType
    // Offset: 0x144
    TMPro::TMP_InputField::LineType m_LineType;
    // private System.Boolean m_HideMobileInput
    // Offset: 0x148
    bool m_HideMobileInput;
    // private System.Boolean m_HideSoftKeyboard
    // Offset: 0x149
    bool m_HideSoftKeyboard;
    // private TMPro.TMP_InputField/CharacterValidation m_CharacterValidation
    // Offset: 0x14C
    TMPro::TMP_InputField::CharacterValidation m_CharacterValidation;
    // private System.String m_RegexValue
    // Offset: 0x150
    ::Il2CppString* m_RegexValue;
    // private System.Single m_GlobalPointSize
    // Offset: 0x158
    float m_GlobalPointSize;
    // private System.Int32 m_CharacterLimit
    // Offset: 0x15C
    int m_CharacterLimit;
    // private TMPro.TMP_InputField/SubmitEvent m_OnEndEdit
    // Offset: 0x160
    TMPro::TMP_InputField::SubmitEvent* m_OnEndEdit;
    // private TMPro.TMP_InputField/SubmitEvent m_OnSubmit
    // Offset: 0x168
    TMPro::TMP_InputField::SubmitEvent* m_OnSubmit;
    // private TMPro.TMP_InputField/SelectionEvent m_OnSelect
    // Offset: 0x170
    TMPro::TMP_InputField::SelectionEvent* m_OnSelect;
    // private TMPro.TMP_InputField/SelectionEvent m_OnDeselect
    // Offset: 0x178
    TMPro::TMP_InputField::SelectionEvent* m_OnDeselect;
    // private TMPro.TMP_InputField/TextSelectionEvent m_OnTextSelection
    // Offset: 0x180
    TMPro::TMP_InputField::TextSelectionEvent* m_OnTextSelection;
    // private TMPro.TMP_InputField/TextSelectionEvent m_OnEndTextSelection
    // Offset: 0x188
    TMPro::TMP_InputField::TextSelectionEvent* m_OnEndTextSelection;
    // private TMPro.TMP_InputField/OnChangeEvent m_OnValueChanged
    // Offset: 0x190
    TMPro::TMP_InputField::OnChangeEvent* m_OnValueChanged;
    // private TMPro.TMP_InputField/TouchScreenKeyboardEvent m_OnTouchScreenKeyboardStatusChanged
    // Offset: 0x198
    TMPro::TMP_InputField::TouchScreenKeyboardEvent* m_OnTouchScreenKeyboardStatusChanged;
    // private TMPro.TMP_InputField/OnValidateInput m_OnValidateInput
    // Offset: 0x1A0
    TMPro::TMP_InputField::OnValidateInput* m_OnValidateInput;
    // private UnityEngine.Color m_CaretColor
    // Offset: 0x1A8
    UnityEngine::Color m_CaretColor;
    // private System.Boolean m_CustomCaretColor
    // Offset: 0x1B8
    bool m_CustomCaretColor;
    // private UnityEngine.Color m_SelectionColor
    // Offset: 0x1BC
    UnityEngine::Color m_SelectionColor;
    // protected System.String m_Text
    // Offset: 0x1D0
    ::Il2CppString* m_Text;
    // private System.Single m_CaretBlinkRate
    // Offset: 0x1D8
    float m_CaretBlinkRate;
    // private System.Int32 m_CaretWidth
    // Offset: 0x1DC
    int m_CaretWidth;
    // private System.Boolean m_ReadOnly
    // Offset: 0x1E0
    bool m_ReadOnly;
    // private System.Boolean m_RichText
    // Offset: 0x1E1
    bool m_RichText;
    // protected System.Int32 m_StringPosition
    // Offset: 0x1E4
    int m_StringPosition;
    // protected System.Int32 m_StringSelectPosition
    // Offset: 0x1E8
    int m_StringSelectPosition;
    // protected System.Int32 m_CaretPosition
    // Offset: 0x1EC
    int m_CaretPosition;
    // protected System.Int32 m_CaretSelectPosition
    // Offset: 0x1F0
    int m_CaretSelectPosition;
    // private UnityEngine.RectTransform caretRectTrans
    // Offset: 0x1F8
    UnityEngine::RectTransform* caretRectTrans;
    // protected UnityEngine.UIVertex[] m_CursorVerts
    // Offset: 0x200
    ::Array<UnityEngine::UIVertex>* m_CursorVerts;
    // private UnityEngine.CanvasRenderer m_CachedInputRenderer
    // Offset: 0x208
    UnityEngine::CanvasRenderer* m_CachedInputRenderer;
    // private UnityEngine.Vector2 m_LastPosition
    // Offset: 0x210
    UnityEngine::Vector2 m_LastPosition;
    // protected UnityEngine.Mesh m_Mesh
    // Offset: 0x218
    UnityEngine::Mesh* m_Mesh;
    // private System.Boolean m_AllowInput
    // Offset: 0x220
    bool m_AllowInput;
    // private System.Boolean m_ShouldActivateNextUpdate
    // Offset: 0x221
    bool m_ShouldActivateNextUpdate;
    // private System.Boolean m_UpdateDrag
    // Offset: 0x222
    bool m_UpdateDrag;
    // private System.Boolean m_DragPositionOutOfBounds
    // Offset: 0x223
    bool m_DragPositionOutOfBounds;
    // protected System.Boolean m_CaretVisible
    // Offset: 0x224
    bool m_CaretVisible;
    // private UnityEngine.Coroutine m_BlinkCoroutine
    // Offset: 0x228
    UnityEngine::Coroutine* m_BlinkCoroutine;
    // private System.Single m_BlinkStartTime
    // Offset: 0x230
    float m_BlinkStartTime;
    // private UnityEngine.Coroutine m_DragCoroutine
    // Offset: 0x238
    UnityEngine::Coroutine* m_DragCoroutine;
    // private System.String m_OriginalText
    // Offset: 0x240
    ::Il2CppString* m_OriginalText;
    // private System.Boolean m_WasCanceled
    // Offset: 0x248
    bool m_WasCanceled;
    // private System.Boolean m_HasDoneFocusTransition
    // Offset: 0x249
    bool m_HasDoneFocusTransition;
    // private UnityEngine.WaitForSecondsRealtime m_WaitForSecondsRealtime
    // Offset: 0x250
    UnityEngine::WaitForSecondsRealtime* m_WaitForSecondsRealtime;
    // private System.Boolean m_PreventCallback
    // Offset: 0x258
    bool m_PreventCallback;
    // private System.Boolean m_TouchKeyboardAllowsInPlaceEditing
    // Offset: 0x259
    bool m_TouchKeyboardAllowsInPlaceEditing;
    // private System.Boolean m_IsTextComponentUpdateRequired
    // Offset: 0x25A
    bool m_IsTextComponentUpdateRequired;
    // private System.Boolean m_IsScrollbarUpdateRequired
    // Offset: 0x25B
    bool m_IsScrollbarUpdateRequired;
    // private System.Boolean m_IsUpdatingScrollbarValues
    // Offset: 0x25C
    bool m_IsUpdatingScrollbarValues;
    // private System.Boolean m_isLastKeyBackspace
    // Offset: 0x25D
    bool m_isLastKeyBackspace;
    // private System.Single m_PointerDownClickStartTime
    // Offset: 0x260
    float m_PointerDownClickStartTime;
    // private System.Single m_KeyDownStartTime
    // Offset: 0x264
    float m_KeyDownStartTime;
    // private System.Single m_DoubleClickDelay
    // Offset: 0x268
    float m_DoubleClickDelay;
    // protected TMPro.TMP_FontAsset m_GlobalFontAsset
    // Offset: 0x270
    TMPro::TMP_FontAsset* m_GlobalFontAsset;
    // protected System.Boolean m_OnFocusSelectAll
    // Offset: 0x278
    bool m_OnFocusSelectAll;
    // protected System.Boolean m_isSelectAll
    // Offset: 0x279
    bool m_isSelectAll;
    // protected System.Boolean m_ResetOnDeActivation
    // Offset: 0x27A
    bool m_ResetOnDeActivation;
    // private System.Boolean m_SelectionStillActive
    // Offset: 0x27B
    bool m_SelectionStillActive;
    // private System.Boolean m_ReleaseSelection
    // Offset: 0x27C
    bool m_ReleaseSelection;
    // private UnityEngine.GameObject m_SelectedObject
    // Offset: 0x280
    UnityEngine::GameObject* m_SelectedObject;
    // private System.Boolean m_RestoreOriginalTextOnEscape
    // Offset: 0x288
    bool m_RestoreOriginalTextOnEscape;
    // protected System.Boolean m_isRichTextEditingAllowed
    // Offset: 0x289
    bool m_isRichTextEditingAllowed;
    // protected System.Int32 m_LineLimit
    // Offset: 0x28C
    int m_LineLimit;
    // protected TMPro.TMP_InputValidator m_InputValidator
    // Offset: 0x290
    TMPro::TMP_InputValidator* m_InputValidator;
    // private System.Boolean m_isSelected
    // Offset: 0x298
    bool m_isSelected;
    // private System.Boolean m_IsStringPositionDirty
    // Offset: 0x299
    bool m_IsStringPositionDirty;
    // private System.Boolean m_IsCaretPositionDirty
    // Offset: 0x29A
    bool m_IsCaretPositionDirty;
    // private System.Boolean m_forceRectTransformAdjustment
    // Offset: 0x29B
    bool m_forceRectTransformAdjustment;
    // private UnityEngine.Event m_ProcessingEvent
    // Offset: 0x2A0
    UnityEngine::Event* m_ProcessingEvent;
    // Get static field: static private readonly System.Char[] kSeparators
    static ::Array<::Il2CppChar>* _get_kSeparators();
    // Set static field: static private readonly System.Char[] kSeparators
    static void _set_kSeparators(::Array<::Il2CppChar>* value);
    // static field const value: static private System.Single kHScrollSpeed
    static constexpr const float kHScrollSpeed = 0.05;
    // Get static field: static private System.Single kHScrollSpeed
    static float _get_kHScrollSpeed();
    // Set static field: static private System.Single kHScrollSpeed
    static void _set_kHScrollSpeed(float value);
    // static field const value: static private System.Single kVScrollSpeed
    static constexpr const float kVScrollSpeed = 0.1;
    // Get static field: static private System.Single kVScrollSpeed
    static float _get_kVScrollSpeed();
    // Set static field: static private System.Single kVScrollSpeed
    static void _set_kVScrollSpeed(float value);
    // static field const value: static private System.String kEmailSpecialCharacters
    static constexpr const char* kEmailSpecialCharacters = "!#$%&'*+-/=?^_`{|}~";
    // Get static field: static private System.String kEmailSpecialCharacters
    static ::Il2CppString* _get_kEmailSpecialCharacters();
    // Set static field: static private System.String kEmailSpecialCharacters
    static void _set_kEmailSpecialCharacters(::Il2CppString* value);
    // private UnityEngine.EventSystems.BaseInput get_inputSystem()
    // Offset: 0xB615F4
    UnityEngine::EventSystems::BaseInput* get_inputSystem();
    // private System.String get_compositionString()
    // Offset: 0xB61734
    ::Il2CppString* get_compositionString();
    // protected UnityEngine.Mesh get_mesh()
    // Offset: 0xB61B88
    UnityEngine::Mesh* get_mesh();
    // public System.Boolean get_shouldHideMobileInput()
    // Offset: 0xB61C34
    bool get_shouldHideMobileInput();
    // public System.Void set_shouldHideMobileInput(System.Boolean value)
    // Offset: 0xB61C88
    void set_shouldHideMobileInput(bool value);
    // public System.Boolean get_shouldHideSoftKeyboard()
    // Offset: 0xB61D28
    bool get_shouldHideSoftKeyboard();
    // public System.Void set_shouldHideSoftKeyboard(System.Boolean value)
    // Offset: 0xB61D9C
    void set_shouldHideSoftKeyboard(bool value);
    // private System.Boolean isKeyboardUsingEvents()
    // Offset: 0xB61EB0
    bool isKeyboardUsingEvents();
    // public System.String get_text()
    // Offset: 0xB61EEC
    ::Il2CppString* get_text();
    // public System.Void set_text(System.String value)
    // Offset: 0xB61EF4
    void set_text(::Il2CppString* value);
    // public System.Void SetTextWithoutNotify(System.String input)
    // Offset: 0xB62038
    void SetTextWithoutNotify(::Il2CppString* input);
    // private System.Void SetText(System.String value, System.Boolean sendCallback)
    // Offset: 0xB61EFC
    void SetText(::Il2CppString* value, bool sendCallback);
    // public System.Boolean get_isFocused()
    // Offset: 0xB6252C
    bool get_isFocused();
    // public System.Single get_caretBlinkRate()
    // Offset: 0xB62534
    float get_caretBlinkRate();
    // public System.Void set_caretBlinkRate(System.Single value)
    // Offset: 0xB6253C
    void set_caretBlinkRate(float value);
    // public System.Int32 get_caretWidth()
    // Offset: 0xB62634
    int get_caretWidth();
    // public System.Void set_caretWidth(System.Int32 value)
    // Offset: 0xB6263C
    void set_caretWidth(int value);
    // public UnityEngine.RectTransform get_textViewport()
    // Offset: 0xB62720
    UnityEngine::RectTransform* get_textViewport();
    // public System.Void set_textViewport(UnityEngine.RectTransform value)
    // Offset: 0xB56450
    void set_textViewport(UnityEngine::RectTransform* value);
    // public TMPro.TMP_Text get_textComponent()
    // Offset: 0xB62728
    TMPro::TMP_Text* get_textComponent();
    // public System.Void set_textComponent(TMPro.TMP_Text value)
    // Offset: 0xB564B0
    void set_textComponent(TMPro::TMP_Text* value);
    // public UnityEngine.UI.Graphic get_placeholder()
    // Offset: 0xB62730
    UnityEngine::UI::Graphic* get_placeholder();
    // public System.Void set_placeholder(UnityEngine.UI.Graphic value)
    // Offset: 0xB5652C
    void set_placeholder(UnityEngine::UI::Graphic* value);
    // public UnityEngine.UI.Scrollbar get_verticalScrollbar()
    // Offset: 0xB62738
    UnityEngine::UI::Scrollbar* get_verticalScrollbar();
    // public System.Void set_verticalScrollbar(UnityEngine.UI.Scrollbar value)
    // Offset: 0xB62740
    void set_verticalScrollbar(UnityEngine::UI::Scrollbar* value);
    // public System.Single get_scrollSensitivity()
    // Offset: 0xB628E0
    float get_scrollSensitivity();
    // public System.Void set_scrollSensitivity(System.Single value)
    // Offset: 0xB628E8
    void set_scrollSensitivity(float value);
    // public UnityEngine.Color get_caretColor()
    // Offset: 0xB62964
    UnityEngine::Color get_caretColor();
    // public System.Void set_caretColor(UnityEngine.Color value)
    // Offset: 0xB629AC
    void set_caretColor(UnityEngine::Color value);
    // public System.Boolean get_customCaretColor()
    // Offset: 0xB629E4
    bool get_customCaretColor();
    // public System.Void set_customCaretColor(System.Boolean value)
    // Offset: 0xB629EC
    void set_customCaretColor(bool value);
    // public UnityEngine.Color get_selectionColor()
    // Offset: 0xB62A10
    UnityEngine::Color get_selectionColor();
    // public System.Void set_selectionColor(UnityEngine.Color value)
    // Offset: 0xB62A24
    void set_selectionColor(UnityEngine::Color value);
    // public TMPro.TMP_InputField/SubmitEvent get_onEndEdit()
    // Offset: 0xB62A5C
    TMPro::TMP_InputField::SubmitEvent* get_onEndEdit();
    // public System.Void set_onEndEdit(TMPro.TMP_InputField/SubmitEvent value)
    // Offset: 0xB62A64
    void set_onEndEdit(TMPro::TMP_InputField::SubmitEvent* value);
    // public TMPro.TMP_InputField/SubmitEvent get_onSubmit()
    // Offset: 0xB62AC4
    TMPro::TMP_InputField::SubmitEvent* get_onSubmit();
    // public System.Void set_onSubmit(TMPro.TMP_InputField/SubmitEvent value)
    // Offset: 0xB62ACC
    void set_onSubmit(TMPro::TMP_InputField::SubmitEvent* value);
    // public TMPro.TMP_InputField/SelectionEvent get_onSelect()
    // Offset: 0xB62B2C
    TMPro::TMP_InputField::SelectionEvent* get_onSelect();
    // public System.Void set_onSelect(TMPro.TMP_InputField/SelectionEvent value)
    // Offset: 0xB62B34
    void set_onSelect(TMPro::TMP_InputField::SelectionEvent* value);
    // public TMPro.TMP_InputField/SelectionEvent get_onDeselect()
    // Offset: 0xB62B94
    TMPro::TMP_InputField::SelectionEvent* get_onDeselect();
    // public System.Void set_onDeselect(TMPro.TMP_InputField/SelectionEvent value)
    // Offset: 0xB62B9C
    void set_onDeselect(TMPro::TMP_InputField::SelectionEvent* value);
    // public TMPro.TMP_InputField/TextSelectionEvent get_onTextSelection()
    // Offset: 0xB62BFC
    TMPro::TMP_InputField::TextSelectionEvent* get_onTextSelection();
    // public System.Void set_onTextSelection(TMPro.TMP_InputField/TextSelectionEvent value)
    // Offset: 0xB62C04
    void set_onTextSelection(TMPro::TMP_InputField::TextSelectionEvent* value);
    // public TMPro.TMP_InputField/TextSelectionEvent get_onEndTextSelection()
    // Offset: 0xB62C64
    TMPro::TMP_InputField::TextSelectionEvent* get_onEndTextSelection();
    // public System.Void set_onEndTextSelection(TMPro.TMP_InputField/TextSelectionEvent value)
    // Offset: 0xB62C6C
    void set_onEndTextSelection(TMPro::TMP_InputField::TextSelectionEvent* value);
    // public TMPro.TMP_InputField/OnChangeEvent get_onValueChanged()
    // Offset: 0xB62CCC
    TMPro::TMP_InputField::OnChangeEvent* get_onValueChanged();
    // public System.Void set_onValueChanged(TMPro.TMP_InputField/OnChangeEvent value)
    // Offset: 0xB62CD4
    void set_onValueChanged(TMPro::TMP_InputField::OnChangeEvent* value);
    // public TMPro.TMP_InputField/TouchScreenKeyboardEvent get_onTouchScreenKeyboardStatusChanged()
    // Offset: 0xB62D34
    TMPro::TMP_InputField::TouchScreenKeyboardEvent* get_onTouchScreenKeyboardStatusChanged();
    // public System.Void set_onTouchScreenKeyboardStatusChanged(TMPro.TMP_InputField/TouchScreenKeyboardEvent value)
    // Offset: 0xB62D3C
    void set_onTouchScreenKeyboardStatusChanged(TMPro::TMP_InputField::TouchScreenKeyboardEvent* value);
    // public TMPro.TMP_InputField/OnValidateInput get_onValidateInput()
    // Offset: 0xB62D9C
    TMPro::TMP_InputField::OnValidateInput* get_onValidateInput();
    // public System.Void set_onValidateInput(TMPro.TMP_InputField/OnValidateInput value)
    // Offset: 0xB62DA4
    void set_onValidateInput(TMPro::TMP_InputField::OnValidateInput* value);
    // public System.Int32 get_characterLimit()
    // Offset: 0xB62E04
    int get_characterLimit();
    // public System.Void set_characterLimit(System.Int32 value)
    // Offset: 0xB62E0C
    void set_characterLimit(int value);
    // public System.Single get_pointSize()
    // Offset: 0xB62ED0
    float get_pointSize();
    // public System.Void set_pointSize(System.Single value)
    // Offset: 0xB62ED8
    void set_pointSize(float value);
    // public TMPro.TMP_FontAsset get_fontAsset()
    // Offset: 0xB6307C
    TMPro::TMP_FontAsset* get_fontAsset();
    // public System.Void set_fontAsset(TMPro.TMP_FontAsset value)
    // Offset: 0xB5658C
    void set_fontAsset(TMPro::TMP_FontAsset* value);
    // public System.Boolean get_onFocusSelectAll()
    // Offset: 0xB63170
    bool get_onFocusSelectAll();
    // public System.Void set_onFocusSelectAll(System.Boolean value)
    // Offset: 0xB63178
    void set_onFocusSelectAll(bool value);
    // public System.Boolean get_resetOnDeActivation()
    // Offset: 0xB63184
    bool get_resetOnDeActivation();
    // public System.Void set_resetOnDeActivation(System.Boolean value)
    // Offset: 0xB6318C
    void set_resetOnDeActivation(bool value);
    // public System.Boolean get_restoreOriginalTextOnEscape()
    // Offset: 0xB63198
    bool get_restoreOriginalTextOnEscape();
    // public System.Void set_restoreOriginalTextOnEscape(System.Boolean value)
    // Offset: 0xB631A0
    void set_restoreOriginalTextOnEscape(bool value);
    // public System.Boolean get_isRichTextEditingAllowed()
    // Offset: 0xB631AC
    bool get_isRichTextEditingAllowed();
    // public System.Void set_isRichTextEditingAllowed(System.Boolean value)
    // Offset: 0xB631B4
    void set_isRichTextEditingAllowed(bool value);
    // public TMPro.TMP_InputField/ContentType get_contentType()
    // Offset: 0xB631C0
    TMPro::TMP_InputField::ContentType get_contentType();
    // public System.Void set_contentType(TMPro.TMP_InputField/ContentType value)
    // Offset: 0xB631C8
    void set_contentType(TMPro::TMP_InputField::ContentType value);
    // public TMPro.TMP_InputField/LineType get_lineType()
    // Offset: 0xB632FC
    TMPro::TMP_InputField::LineType get_lineType();
    // public System.Void set_lineType(TMPro.TMP_InputField/LineType value)
    // Offset: 0xB63304
    void set_lineType(TMPro::TMP_InputField::LineType value);
    // public System.Int32 get_lineLimit()
    // Offset: 0xB63438
    int get_lineLimit();
    // public System.Void set_lineLimit(System.Int32 value)
    // Offset: 0xB63440
    void set_lineLimit(int value);
    // public TMPro.TMP_InputField/InputType get_inputType()
    // Offset: 0xB634C0
    TMPro::TMP_InputField::InputType get_inputType();
    // public System.Void set_inputType(TMPro.TMP_InputField/InputType value)
    // Offset: 0xB634C8
    void set_inputType(TMPro::TMP_InputField::InputType value);
    // public UnityEngine.TouchScreenKeyboardType get_keyboardType()
    // Offset: 0xB6356C
    UnityEngine::TouchScreenKeyboardType get_keyboardType();
    // public System.Void set_keyboardType(UnityEngine.TouchScreenKeyboardType value)
    // Offset: 0xB63574
    void set_keyboardType(UnityEngine::TouchScreenKeyboardType value);
    // public TMPro.TMP_InputField/CharacterValidation get_characterValidation()
    // Offset: 0xB63600
    TMPro::TMP_InputField::CharacterValidation get_characterValidation();
    // public System.Void set_characterValidation(TMPro.TMP_InputField/CharacterValidation value)
    // Offset: 0xB63608
    void set_characterValidation(TMPro::TMP_InputField::CharacterValidation value);
    // public TMPro.TMP_InputValidator get_inputValidator()
    // Offset: 0xB63694
    TMPro::TMP_InputValidator* get_inputValidator();
    // public System.Void set_inputValidator(TMPro.TMP_InputValidator value)
    // Offset: 0xB6369C
    void set_inputValidator(TMPro::TMP_InputValidator* value);
    // public System.Boolean get_readOnly()
    // Offset: 0xB63740
    bool get_readOnly();
    // public System.Void set_readOnly(System.Boolean value)
    // Offset: 0xB63748
    void set_readOnly(bool value);
    // public System.Boolean get_richText()
    // Offset: 0xB63754
    bool get_richText();
    // public System.Void set_richText(System.Boolean value)
    // Offset: 0xB6375C
    void set_richText(bool value);
    // public System.Boolean get_multiLine()
    // Offset: 0xB63800
    bool get_multiLine();
    // public System.Char get_asteriskChar()
    // Offset: 0xB63814
    ::Il2CppChar get_asteriskChar();
    // public System.Void set_asteriskChar(System.Char value)
    // Offset: 0xB6381C
    void set_asteriskChar(::Il2CppChar value);
    // public System.Boolean get_wasCanceled()
    // Offset: 0xB63898
    bool get_wasCanceled();
    // protected System.Void ClampStringPos(ref System.Int32 pos)
    // Offset: 0xB638A0
    void ClampStringPos(int& pos);
    // protected System.Void ClampCaretPos(ref System.Int32 pos)
    // Offset: 0xB638D8
    void ClampCaretPos(int& pos);
    // protected System.Int32 get_caretPositionInternal()
    // Offset: 0xB63920
    int get_caretPositionInternal();
    // protected System.Void set_caretPositionInternal(System.Int32 value)
    // Offset: 0xB63950
    void set_caretPositionInternal(int value);
    // protected System.Int32 get_stringPositionInternal()
    // Offset: 0xB63960
    int get_stringPositionInternal();
    // protected System.Void set_stringPositionInternal(System.Int32 value)
    // Offset: 0xB63990
    void set_stringPositionInternal(int value);
    // protected System.Int32 get_caretSelectPositionInternal()
    // Offset: 0xB639C8
    int get_caretSelectPositionInternal();
    // protected System.Void set_caretSelectPositionInternal(System.Int32 value)
    // Offset: 0xB639F8
    void set_caretSelectPositionInternal(int value);
    // protected System.Int32 get_stringSelectPositionInternal()
    // Offset: 0xB63A08
    int get_stringSelectPositionInternal();
    // protected System.Void set_stringSelectPositionInternal(System.Int32 value)
    // Offset: 0xB63A38
    void set_stringSelectPositionInternal(int value);
    // public System.Int32 get_caretPosition()
    // Offset: 0xB63AA4
    int get_caretPosition();
    // public System.Void set_caretPosition(System.Int32 value)
    // Offset: 0xB63AA8
    void set_caretPosition(int value);
    // public System.Int32 get_selectionAnchorPosition()
    // Offset: 0xB63B78
    int get_selectionAnchorPosition();
    // public System.Void set_selectionAnchorPosition(System.Int32 value)
    // Offset: 0xB63AE0
    void set_selectionAnchorPosition(int value);
    // public System.Int32 get_selectionFocusPosition()
    // Offset: 0xB63B7C
    int get_selectionFocusPosition();
    // public System.Void set_selectionFocusPosition(System.Int32 value)
    // Offset: 0xB63B2C
    void set_selectionFocusPosition(int value);
    // public System.Int32 get_stringPosition()
    // Offset: 0xB63B80
    int get_stringPosition();
    // public System.Void set_stringPosition(System.Int32 value)
    // Offset: 0xB63B84
    void set_stringPosition(int value);
    // public System.Int32 get_selectionStringAnchorPosition()
    // Offset: 0xB63C84
    int get_selectionStringAnchorPosition();
    // public System.Void set_selectionStringAnchorPosition(System.Int32 value)
    // Offset: 0xB63BBC
    void set_selectionStringAnchorPosition(int value);
    // public System.Int32 get_selectionStringFocusPosition()
    // Offset: 0xB63C88
    int get_selectionStringFocusPosition();
    // public System.Void set_selectionStringFocusPosition(System.Int32 value)
    // Offset: 0xB63C20
    void set_selectionStringFocusPosition(int value);
    // private System.Void ON_TEXT_CHANGED(UnityEngine.Object obj)
    // Offset: 0xB64DBC
    void ON_TEXT_CHANGED(UnityEngine::Object* obj);
    // private System.Collections.IEnumerator CaretBlink()
    // Offset: 0xB64F30
    System::Collections::IEnumerator* CaretBlink();
    // private System.Void SetCaretVisible()
    // Offset: 0xB64FAC
    void SetCaretVisible();
    // private System.Void SetCaretActive()
    // Offset: 0xB625C0
    void SetCaretActive();
    // protected System.Void OnFocus()
    // Offset: 0xB64FEC
    void OnFocus();
    // protected System.Void SelectAll()
    // Offset: 0xB64FFC
    void SelectAll();
    // public System.Void MoveTextEnd(System.Boolean shift)
    // Offset: 0xB65050
    void MoveTextEnd(bool shift);
    // public System.Void MoveTextStart(System.Boolean shift)
    // Offset: 0xB65204
    void MoveTextStart(bool shift);
    // public System.Void MoveToEndOfLine(System.Boolean shift, System.Boolean ctrl)
    // Offset: 0xB65318
    void MoveToEndOfLine(bool shift, bool ctrl);
    // public System.Void MoveToStartOfLine(System.Boolean shift, System.Boolean ctrl)
    // Offset: 0xB65494
    void MoveToStartOfLine(bool shift, bool ctrl);
    // static private System.String get_clipboard()
    // Offset: 0xB65620
    static ::Il2CppString* get_clipboard();
    // static private System.Void set_clipboard(System.String value)
    // Offset: 0xB65628
    static void set_clipboard(::Il2CppString* value);
    // private System.Boolean InPlaceEditing()
    // Offset: 0xB65630
    bool InPlaceEditing();
    // private System.Void UpdateStringPositionFromKeyboard()
    // Offset: 0xB656F4
    void UpdateStringPositionFromKeyboard();
    // protected System.Void LateUpdate()
    // Offset: 0xB65834
    void LateUpdate();
    // private System.Boolean MayDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0xB66AC8
    bool MayDrag(UnityEngine::EventSystems::PointerEventData* eventData);
    // private System.Collections.IEnumerator MouseDragOutsideRect(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0xB66F00
    System::Collections::IEnumerator* MouseDragOutsideRect(UnityEngine::EventSystems::PointerEventData* eventData);
    // protected TMPro.TMP_InputField/EditState KeyPressed(UnityEngine.Event evt)
    // Offset: 0xB67748
    TMPro::TMP_InputField::EditState KeyPressed(UnityEngine::Event* evt);
    // protected System.Boolean IsValidChar(System.Char c)
    // Offset: 0xB68E98
    bool IsValidChar(::Il2CppChar c);
    // public System.Void ProcessEvent(UnityEngine.Event e)
    // Offset: 0xB68EA8
    void ProcessEvent(UnityEngine::Event* e);
    // private System.String GetSelectedString()
    // Offset: 0xB68128
    ::Il2CppString* GetSelectedString();
    // private System.Int32 FindNextWordBegin()
    // Offset: 0xB691C8
    int FindNextWordBegin();
    // private System.Void MoveRight(System.Boolean shift, System.Boolean ctrl)
    // Offset: 0xB68AB0
    void MoveRight(bool shift, bool ctrl);
    // private System.Int32 FindPrevWordBegin()
    // Offset: 0xB6929C
    int FindPrevWordBegin();
    // private System.Void MoveLeft(System.Boolean shift, System.Boolean ctrl)
    // Offset: 0xB686F4
    void MoveLeft(bool shift, bool ctrl);
    // private System.Int32 LineUpCharacterPosition(System.Int32 originalPos, System.Boolean goToFirstChar)
    // Offset: 0xB69354
    int LineUpCharacterPosition(int originalPos, bool goToFirstChar);
    // private System.Int32 LineDownCharacterPosition(System.Int32 originalPos, System.Boolean goToLastChar)
    // Offset: 0xB69568
    int LineDownCharacterPosition(int originalPos, bool goToLastChar);
    // private System.Int32 PageUpCharacterPosition(System.Int32 originalPos, System.Boolean goToFirstChar)
    // Offset: 0xB69778
    int PageUpCharacterPosition(int originalPos, bool goToFirstChar);
    // private System.Int32 PageDownCharacterPosition(System.Int32 originalPos, System.Boolean goToLastChar)
    // Offset: 0xB69A28
    int PageDownCharacterPosition(int originalPos, bool goToLastChar);
    // private System.Void MoveDown(System.Boolean shift)
    // Offset: 0xB68E74
    void MoveDown(bool shift);
    // private System.Void MoveDown(System.Boolean shift, System.Boolean goToLastChar)
    // Offset: 0xB69CD8
    void MoveDown(bool shift, bool goToLastChar);
    // private System.Void MoveUp(System.Boolean shift)
    // Offset: 0xB68E68
    void MoveUp(bool shift);
    // private System.Void MoveUp(System.Boolean shift, System.Boolean goToFirstChar)
    // Offset: 0xB69ED0
    void MoveUp(bool shift, bool goToFirstChar);
    // private System.Void MovePageUp(System.Boolean shift)
    // Offset: 0xB68E80
    void MovePageUp(bool shift);
    // private System.Void MovePageUp(System.Boolean shift, System.Boolean goToFirstChar)
    // Offset: 0xB6A0B4
    void MovePageUp(bool shift, bool goToFirstChar);
    // private System.Void MovePageDown(System.Boolean shift)
    // Offset: 0xB68E8C
    void MovePageDown(bool shift);
    // private System.Void MovePageDown(System.Boolean shift, System.Boolean goToLastChar)
    // Offset: 0xB6A420
    void MovePageDown(bool shift, bool goToLastChar);
    // private System.Void Delete()
    // Offset: 0xB681D8
    void Delete();
    // private System.Void DeleteKey()
    // Offset: 0xB67F0C
    void DeleteKey();
    // private System.Void Backspace()
    // Offset: 0xB67B90
    void Backspace();
    // protected System.Void Append(System.String input)
    // Offset: 0xB6A7A0
    void Append(::Il2CppString* input);
    // protected System.Void Append(System.Char input)
    // Offset: 0xB6A854
    void Append(::Il2CppChar input);
    // private System.Void Insert(System.Char c)
    // Offset: 0xB6A954
    void Insert(::Il2CppChar c);
    // private System.Void UpdateTouchKeyboardFromEditChanges()
    // Offset: 0xB686A8
    void UpdateTouchKeyboardFromEditChanges();
    // private System.Void SendOnValueChangedAndUpdateLabel()
    // Offset: 0xB66AA4
    void SendOnValueChangedAndUpdateLabel();
    // private System.Void SendOnValueChanged()
    // Offset: 0xB624C8
    void SendOnValueChanged();
    // protected System.Void SendOnEndEdit()
    // Offset: 0xB6AACC
    void SendOnEndEdit();
    // protected System.Void SendOnSubmit()
    // Offset: 0xB68FEC
    void SendOnSubmit();
    // protected System.Void SendOnFocus()
    // Offset: 0xB6AB30
    void SendOnFocus();
    // protected System.Void SendOnFocusLost()
    // Offset: 0xB6AB94
    void SendOnFocusLost();
    // protected System.Void SendOnTextSelection()
    // Offset: 0xB6ABF8
    void SendOnTextSelection();
    // protected System.Void SendOnEndTextSelection()
    // Offset: 0xB6AC94
    void SendOnEndTextSelection();
    // protected System.Void SendTouchScreenKeyboardStatusChanged()
    // Offset: 0xB663AC
    void SendTouchScreenKeyboardStatusChanged();
    // protected System.Void UpdateLabel()
    // Offset: 0xB621B0
    void UpdateLabel();
    // private System.Void UpdateScrollbar()
    // Offset: 0xB66240
    void UpdateScrollbar();
    // private System.Void OnScrollbarValueChange(System.Single value)
    // Offset: 0xB6AD28
    void OnScrollbarValueChange(float value);
    // private System.Void AdjustTextPositionRelativeToViewport(System.Single relativePosition)
    // Offset: 0xB62040
    void AdjustTextPositionRelativeToViewport(float relativePosition);
    // private System.Int32 GetCaretPositionFromStringIndex(System.Int32 stringIndex)
    // Offset: 0xB64EB4
    int GetCaretPositionFromStringIndex(int stringIndex);
    // private System.Int32 GetMinCaretPositionFromStringIndex(System.Int32 stringIndex)
    // Offset: 0xB6AD84
    int GetMinCaretPositionFromStringIndex(int stringIndex);
    // private System.Int32 GetMaxCaretPositionFromStringIndex(System.Int32 stringIndex)
    // Offset: 0xB6AE04
    int GetMaxCaretPositionFromStringIndex(int stringIndex);
    // private System.Int32 GetStringIndexFromCaretPosition(System.Int32 caretPosition)
    // Offset: 0xB65198
    int GetStringIndexFromCaretPosition(int caretPosition);
    // public System.Void ForceLabelUpdate()
    // Offset: 0xB6AE80
    void ForceLabelUpdate();
    // private System.Void MarkGeometryAsDirty()
    // Offset: 0xB626B8
    void MarkGeometryAsDirty();
    // private System.Void UpdateGeometry()
    // Offset: 0xB6AE94
    void UpdateGeometry();
    // private System.Void AssignPositioningIfNeeded()
    // Offset: 0xB642B0
    void AssignPositioningIfNeeded();
    // private System.Void OnFillVBO(UnityEngine.Mesh vbo)
    // Offset: 0xB6AF60
    void OnFillVBO(UnityEngine::Mesh* vbo);
    // private System.Void GenerateCaret(UnityEngine.UI.VertexHelper vbo, UnityEngine.Vector2 roundingOffset)
    // Offset: 0xB6B284
    void GenerateCaret(UnityEngine::UI::VertexHelper* vbo, UnityEngine::Vector2 roundingOffset);
    // private System.Void CreateCursorVerts()
    // Offset: 0xB6C01C
    void CreateCursorVerts();
    // private System.Void GenerateHightlight(UnityEngine.UI.VertexHelper vbo, UnityEngine.Vector2 roundingOffset)
    // Offset: 0xB6B724
    void GenerateHightlight(UnityEngine::UI::VertexHelper* vbo, UnityEngine::Vector2 roundingOffset);
    // private System.Void AdjustRectTransformRelativeToViewport(UnityEngine.Vector2 startPosition, System.Single height, System.Boolean isCharVisible)
    // Offset: 0xB6C17C
    void AdjustRectTransformRelativeToViewport(UnityEngine::Vector2 startPosition, float height, bool isCharVisible);
    // protected System.Char Validate(System.String text, System.Int32 pos, System.Char ch)
    // Offset: 0xB66428
    ::Il2CppChar Validate(::Il2CppString* text, int pos, ::Il2CppChar ch);
    // public System.Void ActivateInputField()
    // Offset: 0xB6C868
    void ActivateInputField();
    // private System.Void ActivateInputFieldInternal()
    // Offset: 0xB65E48
    void ActivateInputFieldInternal();
    // public System.Void OnControlClick()
    // Offset: 0xB6C9EC
    void OnControlClick();
    // public System.Void ReleaseSelection()
    // Offset: 0xB6C9F0
    void ReleaseSelection();
    // public System.Void DeactivateInputField(System.Boolean clearSelection)
    // Offset: 0xB64C08
    void DeactivateInputField(bool clearSelection);
    // private System.Void EnforceContentType()
    // Offset: 0xB63244
    void EnforceContentType();
    // private System.Void SetTextComponentWrapMode()
    // Offset: 0xB61AD8
    void SetTextComponentWrapMode();
    // private System.Void SetTextComponentRichTextMode()
    // Offset: 0xB63768
    void SetTextComponentRichTextMode();
    // private System.Void SetToCustomIfContentTypeIsNot(params TMPro.TMP_InputField/ContentType[] allowedContentTypes)
    // Offset: 0xB633C8
    void SetToCustomIfContentTypeIsNot(::Array<TMPro::TMP_InputField::ContentType>* allowedContentTypes);
    // Creating initializer_list -> params proxy for: System.Void SetToCustomIfContentTypeIsNot(params TMPro.TMP_InputField/ContentType[] allowedContentTypes)
    void SetToCustomIfContentTypeIsNot(std::initializer_list<TMPro::TMP_InputField::ContentType> allowedContentTypes);
    // Creating TArgs -> initializer_list proxy for: System.Void SetToCustomIfContentTypeIsNot(params TMPro.TMP_InputField/ContentType[] allowedContentTypes)
    template<class ...TParams>
    void SetToCustomIfContentTypeIsNot(TParams&&... allowedContentTypes) {
      SetToCustomIfContentTypeIsNot({allowedContentTypes...});
    }
    // private System.Void SetToCustom()
    // Offset: 0xB63554
    void SetToCustom();
    // private System.Void SetToCustom(TMPro.TMP_InputField/CharacterValidation characterValidation)
    // Offset: 0xB63728
    void SetToCustom(TMPro::TMP_InputField::CharacterValidation characterValidation);
    // public System.Void SetGlobalPointSize(System.Single pointSize)
    // Offset: 0xB62F90
    void SetGlobalPointSize(float pointSize);
    // public System.Void SetGlobalFontAsset(TMPro.TMP_FontAsset fontAsset)
    // Offset: 0xB63084
    void SetGlobalFontAsset(TMPro::TMP_FontAsset* fontAsset);
    // protected System.Void .ctor()
    // Offset: 0xB617D8
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::.ctor()
    // Base method: System.Void UIBehaviour::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static TMP_InputField* New_ctor();
    // private System.Boolean get_hasSelection()
    // Offset: 0xB63A70
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Boolean Selectable::get_hasSelection()
    bool get_hasSelection();
    // protected override System.Void OnEnable()
    // Offset: 0xB63C8C
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0xB648F8
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnDisable()
    void OnDisable();
    // public System.Void OnBeginDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0xB66BE4
    // Implemented from: UnityEngine.EventSystems.IBeginDragHandler
    // Base method: System.Void IBeginDragHandler::OnBeginDrag(UnityEngine.EventSystems.PointerEventData eventData)
    void OnBeginDrag(UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0xB66C10
    // Implemented from: UnityEngine.EventSystems.IDragHandler
    // Base method: System.Void IDragHandler::OnDrag(UnityEngine.EventSystems.PointerEventData eventData)
    void OnDrag(UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnEndDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0xB66F98
    // Implemented from: UnityEngine.EventSystems.IEndDragHandler
    // Base method: System.Void IEndDragHandler::OnEndDrag(UnityEngine.EventSystems.PointerEventData eventData)
    void OnEndDrag(UnityEngine::EventSystems::PointerEventData* eventData);
    // public override System.Void OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0xB66FC0
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData)
    void OnPointerDown(UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnUpdateSelected(UnityEngine.EventSystems.BaseEventData eventData)
    // Offset: 0xB68EAC
    // Implemented from: UnityEngine.EventSystems.IUpdateSelectedHandler
    // Base method: System.Void IUpdateSelectedHandler::OnUpdateSelected(UnityEngine.EventSystems.BaseEventData eventData)
    void OnUpdateSelected(UnityEngine::EventSystems::BaseEventData* eventData);
    // public System.Void OnScroll(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0xB69050
    // Implemented from: UnityEngine.EventSystems.IScrollHandler
    // Base method: System.Void IScrollHandler::OnScroll(UnityEngine.EventSystems.PointerEventData eventData)
    void OnScroll(UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void Rebuild(UnityEngine.UI.CanvasUpdate update)
    // Offset: 0xB6AE84
    // Implemented from: UnityEngine.UI.ICanvasElement
    // Base method: System.Void ICanvasElement::Rebuild(UnityEngine.UI.CanvasUpdate update)
    void Rebuild(UnityEngine::UI::CanvasUpdate update);
    // public System.Void LayoutComplete()
    // Offset: 0xB6AF58
    // Implemented from: UnityEngine.UI.ICanvasElement
    // Base method: System.Void ICanvasElement::LayoutComplete()
    void LayoutComplete();
    // public System.Void GraphicUpdateComplete()
    // Offset: 0xB6AF5C
    // Implemented from: UnityEngine.UI.ICanvasElement
    // Base method: System.Void ICanvasElement::GraphicUpdateComplete()
    void GraphicUpdateComplete();
    // public override System.Void OnSelect(UnityEngine.EventSystems.BaseEventData eventData)
    // Offset: 0xB6C99C
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnSelect(UnityEngine.EventSystems.BaseEventData eventData)
    void OnSelect(UnityEngine::EventSystems::BaseEventData* eventData);
    // public System.Void OnPointerClick(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0xB6C9CC
    // Implemented from: UnityEngine.EventSystems.IPointerClickHandler
    // Base method: System.Void IPointerClickHandler::OnPointerClick(UnityEngine.EventSystems.PointerEventData eventData)
    void OnPointerClick(UnityEngine::EventSystems::PointerEventData* eventData);
    // public override System.Void OnDeselect(UnityEngine.EventSystems.BaseEventData eventData)
    // Offset: 0xB6C9F8
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnDeselect(UnityEngine.EventSystems.BaseEventData eventData)
    void OnDeselect(UnityEngine::EventSystems::BaseEventData* eventData);
    // public System.Void OnSubmit(UnityEngine.EventSystems.BaseEventData eventData)
    // Offset: 0xB6CA34
    // Implemented from: UnityEngine.EventSystems.ISubmitHandler
    // Base method: System.Void ISubmitHandler::OnSubmit(UnityEngine.EventSystems.BaseEventData eventData)
    void OnSubmit(UnityEngine::EventSystems::BaseEventData* eventData);
    // protected override System.Void DoStateTransition(UnityEngine.UI.Selectable/SelectionState state, System.Boolean instant)
    // Offset: 0xB6CA98
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::DoStateTransition(UnityEngine.UI.Selectable/SelectionState state, System.Boolean instant)
    void DoStateTransition(UnityEngine::UI::Selectable::SelectionState state, bool instant);
    // public System.Void CalculateLayoutInputHorizontal()
    // Offset: 0xB6CAC4
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Void ILayoutElement::CalculateLayoutInputHorizontal()
    void CalculateLayoutInputHorizontal();
    // public System.Void CalculateLayoutInputVertical()
    // Offset: 0xB6CAC8
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Void ILayoutElement::CalculateLayoutInputVertical()
    void CalculateLayoutInputVertical();
    // public System.Single get_minWidth()
    // Offset: 0xB6CACC
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Single ILayoutElement::get_minWidth()
    float get_minWidth();
    // public System.Single get_preferredWidth()
    // Offset: 0xB6CAD4
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Single ILayoutElement::get_preferredWidth()
    float get_preferredWidth();
    // public System.Single get_flexibleWidth()
    // Offset: 0xB6CB88
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Single ILayoutElement::get_flexibleWidth()
    float get_flexibleWidth();
    // public System.Single get_minHeight()
    // Offset: 0xB6CB90
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Single ILayoutElement::get_minHeight()
    float get_minHeight();
    // public System.Single get_preferredHeight()
    // Offset: 0xB6CB98
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Single ILayoutElement::get_preferredHeight()
    float get_preferredHeight();
    // public System.Single get_flexibleHeight()
    // Offset: 0xB6CC38
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Single ILayoutElement::get_flexibleHeight()
    float get_flexibleHeight();
    // public System.Int32 get_layoutPriority()
    // Offset: 0xB6CC40
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Int32 ILayoutElement::get_layoutPriority()
    int get_layoutPriority();
    // static private System.Void .cctor()
    // Offset: 0xB6CC48
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::.cctor()
    // Base method: System.Void Object::.cctor()
    static void _cctor();
    // private UnityEngine.Transform UnityEngine.UI.ICanvasElement.get_transform()
    // Offset: 0xB6CCC8
    // Implemented from: UnityEngine.UI.ICanvasElement
    // Base method: UnityEngine.Transform ICanvasElement::get_transform()
    UnityEngine::Transform* UnityEngine_UI_ICanvasElement_get_transform();
  }; // TMPro.TMP_InputField
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(TMPro::TMP_InputField*, "TMPro", "TMP_InputField");
DEFINE_IL2CPP_ARG_TYPE(TMPro::TMP_InputField::ContentType, "TMPro", "TMP_InputField/ContentType");
DEFINE_IL2CPP_ARG_TYPE(TMPro::TMP_InputField::InputType, "TMPro", "TMP_InputField/InputType");
DEFINE_IL2CPP_ARG_TYPE(TMPro::TMP_InputField::CharacterValidation, "TMPro", "TMP_InputField/CharacterValidation");
DEFINE_IL2CPP_ARG_TYPE(TMPro::TMP_InputField::LineType, "TMPro", "TMP_InputField/LineType");
#pragma pack(pop)
