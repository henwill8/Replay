// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
#include <initializer_list>
// Including type: UnityEngine.UI.Selectable
#include "UnityEngine/UI/Selectable.hpp"
// Including type: UnityEngine.EventSystems.IUpdateSelectedHandler
#include "UnityEngine/EventSystems/IUpdateSelectedHandler.hpp"
// Including type: UnityEngine.EventSystems.IBeginDragHandler
#include "UnityEngine/EventSystems/IBeginDragHandler.hpp"
// Including type: UnityEngine.EventSystems.IDragHandler
#include "UnityEngine/EventSystems/IDragHandler.hpp"
// Including type: UnityEngine.EventSystems.IEndDragHandler
#include "UnityEngine/EventSystems/IEndDragHandler.hpp"
// Including type: UnityEngine.EventSystems.IPointerClickHandler
#include "UnityEngine/EventSystems/IPointerClickHandler.hpp"
// Including type: UnityEngine.EventSystems.ISubmitHandler
#include "UnityEngine/EventSystems/ISubmitHandler.hpp"
// Including type: UnityEngine.UI.ICanvasElement
#include "UnityEngine/UI/ICanvasElement.hpp"
// Including type: UnityEngine.UI.ILayoutElement
#include "UnityEngine/UI/ILayoutElement.hpp"
// Including type: UnityEngine.EventSystems.IScrollHandler
#include "UnityEngine/EventSystems/IScrollHandler.hpp"
// Including type: UnityEngine.TouchScreenKeyboardType
#include "UnityEngine/TouchScreenKeyboardType.hpp"
// Including type: UnityEngine.UIVertex
#include "UnityEngine/UIVertex.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: WaitForSecondsRealtime
  class WaitForSecondsRealtime;
  // Forward declaring type: Coroutine
  class Coroutine;
  // Forward declaring type: CanvasRenderer
  class CanvasRenderer;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: TouchScreenKeyboard
  class TouchScreenKeyboard;
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: GameObject
  class GameObject;
  // Forward declaring type: Event
  class Event;
  // Skipping declaration: Object because it is already included!
  // Forward declaring type: Transform
  class Transform;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TMP_Text
  class TMP_Text;
  // Forward declaring type: TMP_ScrollbarEventHandler
  class TMP_ScrollbarEventHandler;
  // Forward declaring type: TMP_FontAsset
  class TMP_FontAsset;
  // Forward declaring type: TMP_InputValidator
  class TMP_InputValidator;
  // Skipping declaration: ContentType because it is already included!
  // Skipping declaration: LineType because it is already included!
  // Skipping declaration: InputType because it is already included!
  // Skipping declaration: CharacterValidation because it is already included!
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: Graphic
  class Graphic;
  // Forward declaring type: Scrollbar
  class Scrollbar;
  // Forward declaring type: VertexHelper
  class VertexHelper;
  // Forward declaring type: CanvasUpdate
  struct CanvasUpdate;
}
// Forward declaring namespace: System
namespace System {
  // Forward declaring type: String
  class String;
}
// Forward declaring namespace: UnityEngine::EventSystems
namespace UnityEngine::EventSystems {
  // Forward declaring type: BaseInput
  class BaseInput;
  // Forward declaring type: PointerEventData
  class PointerEventData;
  // Forward declaring type: BaseEventData
  class BaseEventData;
}
// Forward declaring namespace: System::Collections
namespace System::Collections {
  // Forward declaring type: IEnumerator
  class IEnumerator;
}
// Completed forward declares
// Type namespace: TMPro
namespace TMPro {
  // Size: 0x2A8
  #pragma pack(push, 1)
  // Autogenerated type: TMPro.TMP_InputField
  // [] Offset: FFFFFFFF
  // [AddComponentMenu] Offset: CFCE50
  class TMP_InputField : public UnityEngine::UI::Selectable/*, public UnityEngine::EventSystems::IUpdateSelectedHandler, public UnityEngine::EventSystems::IBeginDragHandler, public UnityEngine::EventSystems::IDragHandler, public UnityEngine::EventSystems::IEndDragHandler, public UnityEngine::EventSystems::IPointerClickHandler, public UnityEngine::EventSystems::ISubmitHandler, public UnityEngine::UI::ICanvasElement, public UnityEngine::UI::ILayoutElement, public UnityEngine::EventSystems::IScrollHandler*/ {
    public:
    // Nested type: TMPro::TMP_InputField::ContentType
    struct ContentType;
    // Nested type: TMPro::TMP_InputField::InputType
    struct InputType;
    // Nested type: TMPro::TMP_InputField::CharacterValidation
    struct CharacterValidation;
    // Nested type: TMPro::TMP_InputField::LineType
    struct LineType;
    // Nested type: TMPro::TMP_InputField::OnValidateInput
    class OnValidateInput;
    // Nested type: TMPro::TMP_InputField::SubmitEvent
    class SubmitEvent;
    // Nested type: TMPro::TMP_InputField::OnChangeEvent
    class OnChangeEvent;
    // Nested type: TMPro::TMP_InputField::SelectionEvent
    class SelectionEvent;
    // Nested type: TMPro::TMP_InputField::TextSelectionEvent
    class TextSelectionEvent;
    // Nested type: TMPro::TMP_InputField::TouchScreenKeyboardEvent
    class TouchScreenKeyboardEvent;
    // Nested type: TMPro::TMP_InputField::EditState
    struct EditState;
    // Nested type: TMPro::TMP_InputField::$CaretBlink$d__267
    class $CaretBlink$d__267;
    // Nested type: TMPro::TMP_InputField::$MouseDragOutsideRect$d__285
    class $MouseDragOutsideRect$d__285;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: TMPro.TMP_InputField/ContentType
    // [] Offset: FFFFFFFF
    struct ContentType/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: ContentType
      constexpr ContentType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public TMPro.TMP_InputField/ContentType Standard
      static constexpr const int Standard = 0;
      // Get static field: static public TMPro.TMP_InputField/ContentType Standard
      static TMPro::TMP_InputField::ContentType _get_Standard();
      // Set static field: static public TMPro.TMP_InputField/ContentType Standard
      static void _set_Standard(TMPro::TMP_InputField::ContentType value);
      // static field const value: static public TMPro.TMP_InputField/ContentType Autocorrected
      static constexpr const int Autocorrected = 1;
      // Get static field: static public TMPro.TMP_InputField/ContentType Autocorrected
      static TMPro::TMP_InputField::ContentType _get_Autocorrected();
      // Set static field: static public TMPro.TMP_InputField/ContentType Autocorrected
      static void _set_Autocorrected(TMPro::TMP_InputField::ContentType value);
      // static field const value: static public TMPro.TMP_InputField/ContentType IntegerNumber
      static constexpr const int IntegerNumber = 2;
      // Get static field: static public TMPro.TMP_InputField/ContentType IntegerNumber
      static TMPro::TMP_InputField::ContentType _get_IntegerNumber();
      // Set static field: static public TMPro.TMP_InputField/ContentType IntegerNumber
      static void _set_IntegerNumber(TMPro::TMP_InputField::ContentType value);
      // static field const value: static public TMPro.TMP_InputField/ContentType DecimalNumber
      static constexpr const int DecimalNumber = 3;
      // Get static field: static public TMPro.TMP_InputField/ContentType DecimalNumber
      static TMPro::TMP_InputField::ContentType _get_DecimalNumber();
      // Set static field: static public TMPro.TMP_InputField/ContentType DecimalNumber
      static void _set_DecimalNumber(TMPro::TMP_InputField::ContentType value);
      // static field const value: static public TMPro.TMP_InputField/ContentType Alphanumeric
      static constexpr const int Alphanumeric = 4;
      // Get static field: static public TMPro.TMP_InputField/ContentType Alphanumeric
      static TMPro::TMP_InputField::ContentType _get_Alphanumeric();
      // Set static field: static public TMPro.TMP_InputField/ContentType Alphanumeric
      static void _set_Alphanumeric(TMPro::TMP_InputField::ContentType value);
      // static field const value: static public TMPro.TMP_InputField/ContentType Name
      static constexpr const int Name = 5;
      // Get static field: static public TMPro.TMP_InputField/ContentType Name
      static TMPro::TMP_InputField::ContentType _get_Name();
      // Set static field: static public TMPro.TMP_InputField/ContentType Name
      static void _set_Name(TMPro::TMP_InputField::ContentType value);
      // static field const value: static public TMPro.TMP_InputField/ContentType EmailAddress
      static constexpr const int EmailAddress = 6;
      // Get static field: static public TMPro.TMP_InputField/ContentType EmailAddress
      static TMPro::TMP_InputField::ContentType _get_EmailAddress();
      // Set static field: static public TMPro.TMP_InputField/ContentType EmailAddress
      static void _set_EmailAddress(TMPro::TMP_InputField::ContentType value);
      // static field const value: static public TMPro.TMP_InputField/ContentType Password
      static constexpr const int Password = 7;
      // Get static field: static public TMPro.TMP_InputField/ContentType Password
      static TMPro::TMP_InputField::ContentType _get_Password();
      // Set static field: static public TMPro.TMP_InputField/ContentType Password
      static void _set_Password(TMPro::TMP_InputField::ContentType value);
      // static field const value: static public TMPro.TMP_InputField/ContentType Pin
      static constexpr const int Pin = 8;
      // Get static field: static public TMPro.TMP_InputField/ContentType Pin
      static TMPro::TMP_InputField::ContentType _get_Pin();
      // Set static field: static public TMPro.TMP_InputField/ContentType Pin
      static void _set_Pin(TMPro::TMP_InputField::ContentType value);
      // static field const value: static public TMPro.TMP_InputField/ContentType Custom
      static constexpr const int Custom = 9;
      // Get static field: static public TMPro.TMP_InputField/ContentType Custom
      static TMPro::TMP_InputField::ContentType _get_Custom();
      // Set static field: static public TMPro.TMP_InputField/ContentType Custom
      static void _set_Custom(TMPro::TMP_InputField::ContentType value);
    }; // TMPro.TMP_InputField/ContentType
    #pragma pack(pop)
    static check_size<sizeof(TMP_InputField::ContentType), 0 + sizeof(int)> __TMPro_TMP_InputField_ContentTypeSizeCheck;
    static_assert(sizeof(TMP_InputField::ContentType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: TMPro.TMP_InputField/InputType
    // [] Offset: FFFFFFFF
    struct InputType/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: InputType
      constexpr InputType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public TMPro.TMP_InputField/InputType Standard
      static constexpr const int Standard = 0;
      // Get static field: static public TMPro.TMP_InputField/InputType Standard
      static TMPro::TMP_InputField::InputType _get_Standard();
      // Set static field: static public TMPro.TMP_InputField/InputType Standard
      static void _set_Standard(TMPro::TMP_InputField::InputType value);
      // static field const value: static public TMPro.TMP_InputField/InputType AutoCorrect
      static constexpr const int AutoCorrect = 1;
      // Get static field: static public TMPro.TMP_InputField/InputType AutoCorrect
      static TMPro::TMP_InputField::InputType _get_AutoCorrect();
      // Set static field: static public TMPro.TMP_InputField/InputType AutoCorrect
      static void _set_AutoCorrect(TMPro::TMP_InputField::InputType value);
      // static field const value: static public TMPro.TMP_InputField/InputType Password
      static constexpr const int Password = 2;
      // Get static field: static public TMPro.TMP_InputField/InputType Password
      static TMPro::TMP_InputField::InputType _get_Password();
      // Set static field: static public TMPro.TMP_InputField/InputType Password
      static void _set_Password(TMPro::TMP_InputField::InputType value);
    }; // TMPro.TMP_InputField/InputType
    #pragma pack(pop)
    static check_size<sizeof(TMP_InputField::InputType), 0 + sizeof(int)> __TMPro_TMP_InputField_InputTypeSizeCheck;
    static_assert(sizeof(TMP_InputField::InputType) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: TMPro.TMP_InputField/CharacterValidation
    // [] Offset: FFFFFFFF
    struct CharacterValidation/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: CharacterValidation
      constexpr CharacterValidation(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public TMPro.TMP_InputField/CharacterValidation None
      static constexpr const int None = 0;
      // Get static field: static public TMPro.TMP_InputField/CharacterValidation None
      static TMPro::TMP_InputField::CharacterValidation _get_None();
      // Set static field: static public TMPro.TMP_InputField/CharacterValidation None
      static void _set_None(TMPro::TMP_InputField::CharacterValidation value);
      // static field const value: static public TMPro.TMP_InputField/CharacterValidation Digit
      static constexpr const int Digit = 1;
      // Get static field: static public TMPro.TMP_InputField/CharacterValidation Digit
      static TMPro::TMP_InputField::CharacterValidation _get_Digit();
      // Set static field: static public TMPro.TMP_InputField/CharacterValidation Digit
      static void _set_Digit(TMPro::TMP_InputField::CharacterValidation value);
      // static field const value: static public TMPro.TMP_InputField/CharacterValidation Integer
      static constexpr const int Integer = 2;
      // Get static field: static public TMPro.TMP_InputField/CharacterValidation Integer
      static TMPro::TMP_InputField::CharacterValidation _get_Integer();
      // Set static field: static public TMPro.TMP_InputField/CharacterValidation Integer
      static void _set_Integer(TMPro::TMP_InputField::CharacterValidation value);
      // static field const value: static public TMPro.TMP_InputField/CharacterValidation Decimal
      static constexpr const int Decimal = 3;
      // Get static field: static public TMPro.TMP_InputField/CharacterValidation Decimal
      static TMPro::TMP_InputField::CharacterValidation _get_Decimal();
      // Set static field: static public TMPro.TMP_InputField/CharacterValidation Decimal
      static void _set_Decimal(TMPro::TMP_InputField::CharacterValidation value);
      // static field const value: static public TMPro.TMP_InputField/CharacterValidation Alphanumeric
      static constexpr const int Alphanumeric = 4;
      // Get static field: static public TMPro.TMP_InputField/CharacterValidation Alphanumeric
      static TMPro::TMP_InputField::CharacterValidation _get_Alphanumeric();
      // Set static field: static public TMPro.TMP_InputField/CharacterValidation Alphanumeric
      static void _set_Alphanumeric(TMPro::TMP_InputField::CharacterValidation value);
      // static field const value: static public TMPro.TMP_InputField/CharacterValidation Name
      static constexpr const int Name = 5;
      // Get static field: static public TMPro.TMP_InputField/CharacterValidation Name
      static TMPro::TMP_InputField::CharacterValidation _get_Name();
      // Set static field: static public TMPro.TMP_InputField/CharacterValidation Name
      static void _set_Name(TMPro::TMP_InputField::CharacterValidation value);
      // static field const value: static public TMPro.TMP_InputField/CharacterValidation Regex
      static constexpr const int Regex = 6;
      // Get static field: static public TMPro.TMP_InputField/CharacterValidation Regex
      static TMPro::TMP_InputField::CharacterValidation _get_Regex();
      // Set static field: static public TMPro.TMP_InputField/CharacterValidation Regex
      static void _set_Regex(TMPro::TMP_InputField::CharacterValidation value);
      // static field const value: static public TMPro.TMP_InputField/CharacterValidation EmailAddress
      static constexpr const int EmailAddress = 7;
      // Get static field: static public TMPro.TMP_InputField/CharacterValidation EmailAddress
      static TMPro::TMP_InputField::CharacterValidation _get_EmailAddress();
      // Set static field: static public TMPro.TMP_InputField/CharacterValidation EmailAddress
      static void _set_EmailAddress(TMPro::TMP_InputField::CharacterValidation value);
      // static field const value: static public TMPro.TMP_InputField/CharacterValidation CustomValidator
      static constexpr const int CustomValidator = 8;
      // Get static field: static public TMPro.TMP_InputField/CharacterValidation CustomValidator
      static TMPro::TMP_InputField::CharacterValidation _get_CustomValidator();
      // Set static field: static public TMPro.TMP_InputField/CharacterValidation CustomValidator
      static void _set_CustomValidator(TMPro::TMP_InputField::CharacterValidation value);
    }; // TMPro.TMP_InputField/CharacterValidation
    #pragma pack(pop)
    static check_size<sizeof(TMP_InputField::CharacterValidation), 0 + sizeof(int)> __TMPro_TMP_InputField_CharacterValidationSizeCheck;
    static_assert(sizeof(TMP_InputField::CharacterValidation) == 0x4);
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: TMPro.TMP_InputField/LineType
    // [] Offset: FFFFFFFF
    struct LineType/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: LineType
      constexpr LineType(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public TMPro.TMP_InputField/LineType SingleLine
      static constexpr const int SingleLine = 0;
      // Get static field: static public TMPro.TMP_InputField/LineType SingleLine
      static TMPro::TMP_InputField::LineType _get_SingleLine();
      // Set static field: static public TMPro.TMP_InputField/LineType SingleLine
      static void _set_SingleLine(TMPro::TMP_InputField::LineType value);
      // static field const value: static public TMPro.TMP_InputField/LineType MultiLineSubmit
      static constexpr const int MultiLineSubmit = 1;
      // Get static field: static public TMPro.TMP_InputField/LineType MultiLineSubmit
      static TMPro::TMP_InputField::LineType _get_MultiLineSubmit();
      // Set static field: static public TMPro.TMP_InputField/LineType MultiLineSubmit
      static void _set_MultiLineSubmit(TMPro::TMP_InputField::LineType value);
      // static field const value: static public TMPro.TMP_InputField/LineType MultiLineNewline
      static constexpr const int MultiLineNewline = 2;
      // Get static field: static public TMPro.TMP_InputField/LineType MultiLineNewline
      static TMPro::TMP_InputField::LineType _get_MultiLineNewline();
      // Set static field: static public TMPro.TMP_InputField/LineType MultiLineNewline
      static void _set_MultiLineNewline(TMPro::TMP_InputField::LineType value);
    }; // TMPro.TMP_InputField/LineType
    #pragma pack(pop)
    static check_size<sizeof(TMP_InputField::LineType), 0 + sizeof(int)> __TMPro_TMP_InputField_LineTypeSizeCheck;
    static_assert(sizeof(TMP_InputField::LineType) == 0x4);
    // protected UnityEngine.TouchScreenKeyboard m_SoftKeyboard
    // Size: 0x8
    // Offset: 0xF0
    UnityEngine::TouchScreenKeyboard* m_SoftKeyboard;
    // Field size check
    static_assert(sizeof(UnityEngine::TouchScreenKeyboard*) == 0x8);
    // protected UnityEngine.RectTransform m_TextViewport
    // Size: 0x8
    // Offset: 0xF8
    UnityEngine::RectTransform* m_TextViewport;
    // Field size check
    static_assert(sizeof(UnityEngine::RectTransform*) == 0x8);
    // protected TMPro.TMP_Text m_TextComponent
    // Size: 0x8
    // Offset: 0x100
    TMPro::TMP_Text* m_TextComponent;
    // Field size check
    static_assert(sizeof(TMPro::TMP_Text*) == 0x8);
    // protected UnityEngine.RectTransform m_TextComponentRectTransform
    // Size: 0x8
    // Offset: 0x108
    UnityEngine::RectTransform* m_TextComponentRectTransform;
    // Field size check
    static_assert(sizeof(UnityEngine::RectTransform*) == 0x8);
    // protected UnityEngine.UI.Graphic m_Placeholder
    // Size: 0x8
    // Offset: 0x110
    UnityEngine::UI::Graphic* m_Placeholder;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Graphic*) == 0x8);
    // protected UnityEngine.UI.Scrollbar m_VerticalScrollbar
    // Size: 0x8
    // Offset: 0x118
    UnityEngine::UI::Scrollbar* m_VerticalScrollbar;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::Scrollbar*) == 0x8);
    // protected TMPro.TMP_ScrollbarEventHandler m_VerticalScrollbarEventHandler
    // Size: 0x8
    // Offset: 0x120
    TMPro::TMP_ScrollbarEventHandler* m_VerticalScrollbarEventHandler;
    // Field size check
    static_assert(sizeof(TMPro::TMP_ScrollbarEventHandler*) == 0x8);
    // private System.Boolean m_IsDrivenByLayoutComponents
    // Size: 0x1
    // Offset: 0x128
    bool m_IsDrivenByLayoutComponents;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_IsDrivenByLayoutComponents and: m_ScrollPosition
    char __padding7[0x3] = {};
    // private System.Single m_ScrollPosition
    // Size: 0x4
    // Offset: 0x12C
    float m_ScrollPosition;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_ScrollSensitivity
    // Size: 0x4
    // Offset: 0x130
    float m_ScrollSensitivity;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private TMPro.TMP_InputField/ContentType m_ContentType
    // Size: 0x4
    // Offset: 0x134
    TMPro::TMP_InputField::ContentType m_ContentType;
    // Field size check
    static_assert(sizeof(TMPro::TMP_InputField::ContentType) == 0x4);
    // private TMPro.TMP_InputField/InputType m_InputType
    // Size: 0x4
    // Offset: 0x138
    TMPro::TMP_InputField::InputType m_InputType;
    // Field size check
    static_assert(sizeof(TMPro::TMP_InputField::InputType) == 0x4);
    // private System.Char m_AsteriskChar
    // Size: 0x2
    // Offset: 0x13C
    ::Il2CppChar m_AsteriskChar;
    // Field size check
    static_assert(sizeof(::Il2CppChar) == 0x2);
    // Padding between fields: m_AsteriskChar and: m_KeyboardType
    char __padding12[0x2] = {};
    // private UnityEngine.TouchScreenKeyboardType m_KeyboardType
    // Size: 0x4
    // Offset: 0x140
    UnityEngine::TouchScreenKeyboardType m_KeyboardType;
    // Field size check
    static_assert(sizeof(UnityEngine::TouchScreenKeyboardType) == 0x4);
    // private TMPro.TMP_InputField/LineType m_LineType
    // Size: 0x4
    // Offset: 0x144
    TMPro::TMP_InputField::LineType m_LineType;
    // Field size check
    static_assert(sizeof(TMPro::TMP_InputField::LineType) == 0x4);
    // private System.Boolean m_HideMobileInput
    // Size: 0x1
    // Offset: 0x148
    bool m_HideMobileInput;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_HideSoftKeyboard
    // Size: 0x1
    // Offset: 0x149
    bool m_HideSoftKeyboard;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_HideSoftKeyboard and: m_CharacterValidation
    char __padding16[0x2] = {};
    // private TMPro.TMP_InputField/CharacterValidation m_CharacterValidation
    // Size: 0x4
    // Offset: 0x14C
    TMPro::TMP_InputField::CharacterValidation m_CharacterValidation;
    // Field size check
    static_assert(sizeof(TMPro::TMP_InputField::CharacterValidation) == 0x4);
    // private System.String m_RegexValue
    // Size: 0x8
    // Offset: 0x150
    ::Il2CppString* m_RegexValue;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Single m_GlobalPointSize
    // Size: 0x4
    // Offset: 0x158
    float m_GlobalPointSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Int32 m_CharacterLimit
    // Size: 0x4
    // Offset: 0x15C
    int m_CharacterLimit;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private TMPro.TMP_InputField/SubmitEvent m_OnEndEdit
    // Size: 0x8
    // Offset: 0x160
    TMPro::TMP_InputField::SubmitEvent* m_OnEndEdit;
    // Field size check
    static_assert(sizeof(TMPro::TMP_InputField::SubmitEvent*) == 0x8);
    // private TMPro.TMP_InputField/SubmitEvent m_OnSubmit
    // Size: 0x8
    // Offset: 0x168
    TMPro::TMP_InputField::SubmitEvent* m_OnSubmit;
    // Field size check
    static_assert(sizeof(TMPro::TMP_InputField::SubmitEvent*) == 0x8);
    // private TMPro.TMP_InputField/SelectionEvent m_OnSelect
    // Size: 0x8
    // Offset: 0x170
    TMPro::TMP_InputField::SelectionEvent* m_OnSelect;
    // Field size check
    static_assert(sizeof(TMPro::TMP_InputField::SelectionEvent*) == 0x8);
    // private TMPro.TMP_InputField/SelectionEvent m_OnDeselect
    // Size: 0x8
    // Offset: 0x178
    TMPro::TMP_InputField::SelectionEvent* m_OnDeselect;
    // Field size check
    static_assert(sizeof(TMPro::TMP_InputField::SelectionEvent*) == 0x8);
    // private TMPro.TMP_InputField/TextSelectionEvent m_OnTextSelection
    // Size: 0x8
    // Offset: 0x180
    TMPro::TMP_InputField::TextSelectionEvent* m_OnTextSelection;
    // Field size check
    static_assert(sizeof(TMPro::TMP_InputField::TextSelectionEvent*) == 0x8);
    // private TMPro.TMP_InputField/TextSelectionEvent m_OnEndTextSelection
    // Size: 0x8
    // Offset: 0x188
    TMPro::TMP_InputField::TextSelectionEvent* m_OnEndTextSelection;
    // Field size check
    static_assert(sizeof(TMPro::TMP_InputField::TextSelectionEvent*) == 0x8);
    // private TMPro.TMP_InputField/OnChangeEvent m_OnValueChanged
    // Size: 0x8
    // Offset: 0x190
    TMPro::TMP_InputField::OnChangeEvent* m_OnValueChanged;
    // Field size check
    static_assert(sizeof(TMPro::TMP_InputField::OnChangeEvent*) == 0x8);
    // private TMPro.TMP_InputField/TouchScreenKeyboardEvent m_OnTouchScreenKeyboardStatusChanged
    // Size: 0x8
    // Offset: 0x198
    TMPro::TMP_InputField::TouchScreenKeyboardEvent* m_OnTouchScreenKeyboardStatusChanged;
    // Field size check
    static_assert(sizeof(TMPro::TMP_InputField::TouchScreenKeyboardEvent*) == 0x8);
    // private TMPro.TMP_InputField/OnValidateInput m_OnValidateInput
    // Size: 0x8
    // Offset: 0x1A0
    TMPro::TMP_InputField::OnValidateInput* m_OnValidateInput;
    // Field size check
    static_assert(sizeof(TMPro::TMP_InputField::OnValidateInput*) == 0x8);
    // private UnityEngine.Color m_CaretColor
    // Size: 0x10
    // Offset: 0x1A8
    UnityEngine::Color m_CaretColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // private System.Boolean m_CustomCaretColor
    // Size: 0x1
    // Offset: 0x1B8
    bool m_CustomCaretColor;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_CustomCaretColor and: m_SelectionColor
    char __padding31[0x3] = {};
    // private UnityEngine.Color m_SelectionColor
    // Size: 0x10
    // Offset: 0x1BC
    UnityEngine::Color m_SelectionColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // Padding between fields: m_SelectionColor and: m_Text
    char __padding32[0x4] = {};
    // [TextAreaAttribute] Offset: 0xCFD910
    // protected System.String m_Text
    // Size: 0x8
    // Offset: 0x1D0
    ::Il2CppString* m_Text;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // [RangeAttribute] Offset: 0xCFD950
    // private System.Single m_CaretBlinkRate
    // Size: 0x4
    // Offset: 0x1D8
    float m_CaretBlinkRate;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // [RangeAttribute] Offset: 0xCFD990
    // private System.Int32 m_CaretWidth
    // Size: 0x4
    // Offset: 0x1DC
    int m_CaretWidth;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_ReadOnly
    // Size: 0x1
    // Offset: 0x1E0
    bool m_ReadOnly;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_RichText
    // Size: 0x1
    // Offset: 0x1E1
    bool m_RichText;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_RichText and: m_StringPosition
    char __padding37[0x2] = {};
    // protected System.Int32 m_StringPosition
    // Size: 0x4
    // Offset: 0x1E4
    int m_StringPosition;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_StringSelectPosition
    // Size: 0x4
    // Offset: 0x1E8
    int m_StringSelectPosition;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_CaretPosition
    // Size: 0x4
    // Offset: 0x1EC
    int m_CaretPosition;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_CaretSelectPosition
    // Size: 0x4
    // Offset: 0x1F0
    int m_CaretSelectPosition;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: m_CaretSelectPosition and: caretRectTrans
    char __padding41[0x4] = {};
    // private UnityEngine.RectTransform caretRectTrans
    // Size: 0x8
    // Offset: 0x1F8
    UnityEngine::RectTransform* caretRectTrans;
    // Field size check
    static_assert(sizeof(UnityEngine::RectTransform*) == 0x8);
    // protected UnityEngine.UIVertex[] m_CursorVerts
    // Size: 0x8
    // Offset: 0x200
    ::Array<UnityEngine::UIVertex>* m_CursorVerts;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::UIVertex>*) == 0x8);
    // private UnityEngine.CanvasRenderer m_CachedInputRenderer
    // Size: 0x8
    // Offset: 0x208
    UnityEngine::CanvasRenderer* m_CachedInputRenderer;
    // Field size check
    static_assert(sizeof(UnityEngine::CanvasRenderer*) == 0x8);
    // private UnityEngine.Vector2 m_LastPosition
    // Size: 0x8
    // Offset: 0x210
    UnityEngine::Vector2 m_LastPosition;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector2) == 0x8);
    // protected UnityEngine.Mesh m_Mesh
    // Size: 0x8
    // Offset: 0x218
    UnityEngine::Mesh* m_Mesh;
    // Field size check
    static_assert(sizeof(UnityEngine::Mesh*) == 0x8);
    // private System.Boolean m_AllowInput
    // Size: 0x1
    // Offset: 0x220
    bool m_AllowInput;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_ShouldActivateNextUpdate
    // Size: 0x1
    // Offset: 0x221
    bool m_ShouldActivateNextUpdate;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_UpdateDrag
    // Size: 0x1
    // Offset: 0x222
    bool m_UpdateDrag;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_DragPositionOutOfBounds
    // Size: 0x1
    // Offset: 0x223
    bool m_DragPositionOutOfBounds;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_CaretVisible
    // Size: 0x1
    // Offset: 0x224
    bool m_CaretVisible;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_CaretVisible and: m_BlinkCoroutine
    char __padding51[0x3] = {};
    // private UnityEngine.Coroutine m_BlinkCoroutine
    // Size: 0x8
    // Offset: 0x228
    UnityEngine::Coroutine* m_BlinkCoroutine;
    // Field size check
    static_assert(sizeof(UnityEngine::Coroutine*) == 0x8);
    // private System.Single m_BlinkStartTime
    // Size: 0x4
    // Offset: 0x230
    float m_BlinkStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_BlinkStartTime and: m_DragCoroutine
    char __padding53[0x4] = {};
    // private UnityEngine.Coroutine m_DragCoroutine
    // Size: 0x8
    // Offset: 0x238
    UnityEngine::Coroutine* m_DragCoroutine;
    // Field size check
    static_assert(sizeof(UnityEngine::Coroutine*) == 0x8);
    // private System.String m_OriginalText
    // Size: 0x8
    // Offset: 0x240
    ::Il2CppString* m_OriginalText;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // private System.Boolean m_WasCanceled
    // Size: 0x1
    // Offset: 0x248
    bool m_WasCanceled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_HasDoneFocusTransition
    // Size: 0x1
    // Offset: 0x249
    bool m_HasDoneFocusTransition;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_HasDoneFocusTransition and: m_WaitForSecondsRealtime
    char __padding57[0x6] = {};
    // private UnityEngine.WaitForSecondsRealtime m_WaitForSecondsRealtime
    // Size: 0x8
    // Offset: 0x250
    UnityEngine::WaitForSecondsRealtime* m_WaitForSecondsRealtime;
    // Field size check
    static_assert(sizeof(UnityEngine::WaitForSecondsRealtime*) == 0x8);
    // private System.Boolean m_PreventCallback
    // Size: 0x1
    // Offset: 0x258
    bool m_PreventCallback;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_TouchKeyboardAllowsInPlaceEditing
    // Size: 0x1
    // Offset: 0x259
    bool m_TouchKeyboardAllowsInPlaceEditing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_IsTextComponentUpdateRequired
    // Size: 0x1
    // Offset: 0x25A
    bool m_IsTextComponentUpdateRequired;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_IsScrollbarUpdateRequired
    // Size: 0x1
    // Offset: 0x25B
    bool m_IsScrollbarUpdateRequired;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_IsUpdatingScrollbarValues
    // Size: 0x1
    // Offset: 0x25C
    bool m_IsUpdatingScrollbarValues;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_isLastKeyBackspace
    // Size: 0x1
    // Offset: 0x25D
    bool m_isLastKeyBackspace;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_isLastKeyBackspace and: m_PointerDownClickStartTime
    char __padding64[0x2] = {};
    // private System.Single m_PointerDownClickStartTime
    // Size: 0x4
    // Offset: 0x260
    float m_PointerDownClickStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_KeyDownStartTime
    // Size: 0x4
    // Offset: 0x264
    float m_KeyDownStartTime;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private System.Single m_DoubleClickDelay
    // Size: 0x4
    // Offset: 0x268
    float m_DoubleClickDelay;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // Padding between fields: m_DoubleClickDelay and: m_GlobalFontAsset
    char __padding67[0x4] = {};
    // protected TMPro.TMP_FontAsset m_GlobalFontAsset
    // Size: 0x8
    // Offset: 0x270
    TMPro::TMP_FontAsset* m_GlobalFontAsset;
    // Field size check
    static_assert(sizeof(TMPro::TMP_FontAsset*) == 0x8);
    // protected System.Boolean m_OnFocusSelectAll
    // Size: 0x1
    // Offset: 0x278
    bool m_OnFocusSelectAll;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isSelectAll
    // Size: 0x1
    // Offset: 0x279
    bool m_isSelectAll;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_ResetOnDeActivation
    // Size: 0x1
    // Offset: 0x27A
    bool m_ResetOnDeActivation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_SelectionStillActive
    // Size: 0x1
    // Offset: 0x27B
    bool m_SelectionStillActive;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_ReleaseSelection
    // Size: 0x1
    // Offset: 0x27C
    bool m_ReleaseSelection;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_ReleaseSelection and: m_SelectedObject
    char __padding73[0x3] = {};
    // private UnityEngine.GameObject m_SelectedObject
    // Size: 0x8
    // Offset: 0x280
    UnityEngine::GameObject* m_SelectedObject;
    // Field size check
    static_assert(sizeof(UnityEngine::GameObject*) == 0x8);
    // private System.Boolean m_RestoreOriginalTextOnEscape
    // Size: 0x1
    // Offset: 0x288
    bool m_RestoreOriginalTextOnEscape;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isRichTextEditingAllowed
    // Size: 0x1
    // Offset: 0x289
    bool m_isRichTextEditingAllowed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_isRichTextEditingAllowed and: m_LineLimit
    char __padding76[0x2] = {};
    // protected System.Int32 m_LineLimit
    // Size: 0x4
    // Offset: 0x28C
    int m_LineLimit;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected TMPro.TMP_InputValidator m_InputValidator
    // Size: 0x8
    // Offset: 0x290
    TMPro::TMP_InputValidator* m_InputValidator;
    // Field size check
    static_assert(sizeof(TMPro::TMP_InputValidator*) == 0x8);
    // private System.Boolean m_isSelected
    // Size: 0x1
    // Offset: 0x298
    bool m_isSelected;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_IsStringPositionDirty
    // Size: 0x1
    // Offset: 0x299
    bool m_IsStringPositionDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_IsCaretPositionDirty
    // Size: 0x1
    // Offset: 0x29A
    bool m_IsCaretPositionDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean m_forceRectTransformAdjustment
    // Size: 0x1
    // Offset: 0x29B
    bool m_forceRectTransformAdjustment;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: m_forceRectTransformAdjustment and: m_ProcessingEvent
    char __padding82[0x4] = {};
    // private UnityEngine.Event m_ProcessingEvent
    // Size: 0x8
    // Offset: 0x2A0
    UnityEngine::Event* m_ProcessingEvent;
    // Field size check
    static_assert(sizeof(UnityEngine::Event*) == 0x8);
    // Creating value type constructor for type: TMP_InputField
    TMP_InputField(UnityEngine::TouchScreenKeyboard* m_SoftKeyboard_ = {}, UnityEngine::RectTransform* m_TextViewport_ = {}, TMPro::TMP_Text* m_TextComponent_ = {}, UnityEngine::RectTransform* m_TextComponentRectTransform_ = {}, UnityEngine::UI::Graphic* m_Placeholder_ = {}, UnityEngine::UI::Scrollbar* m_VerticalScrollbar_ = {}, TMPro::TMP_ScrollbarEventHandler* m_VerticalScrollbarEventHandler_ = {}, bool m_IsDrivenByLayoutComponents_ = {}, float m_ScrollPosition_ = {}, float m_ScrollSensitivity_ = {}, TMPro::TMP_InputField::ContentType m_ContentType_ = {}, TMPro::TMP_InputField::InputType m_InputType_ = {}, ::Il2CppChar m_AsteriskChar_ = {}, UnityEngine::TouchScreenKeyboardType m_KeyboardType_ = {}, TMPro::TMP_InputField::LineType m_LineType_ = {}, bool m_HideMobileInput_ = {}, bool m_HideSoftKeyboard_ = {}, TMPro::TMP_InputField::CharacterValidation m_CharacterValidation_ = {}, ::Il2CppString* m_RegexValue_ = {}, float m_GlobalPointSize_ = {}, int m_CharacterLimit_ = {}, TMPro::TMP_InputField::SubmitEvent* m_OnEndEdit_ = {}, TMPro::TMP_InputField::SubmitEvent* m_OnSubmit_ = {}, TMPro::TMP_InputField::SelectionEvent* m_OnSelect_ = {}, TMPro::TMP_InputField::SelectionEvent* m_OnDeselect_ = {}, TMPro::TMP_InputField::TextSelectionEvent* m_OnTextSelection_ = {}, TMPro::TMP_InputField::TextSelectionEvent* m_OnEndTextSelection_ = {}, TMPro::TMP_InputField::OnChangeEvent* m_OnValueChanged_ = {}, TMPro::TMP_InputField::TouchScreenKeyboardEvent* m_OnTouchScreenKeyboardStatusChanged_ = {}, TMPro::TMP_InputField::OnValidateInput* m_OnValidateInput_ = {}, UnityEngine::Color m_CaretColor_ = {}, bool m_CustomCaretColor_ = {}, UnityEngine::Color m_SelectionColor_ = {}, ::Il2CppString* m_Text_ = {}, float m_CaretBlinkRate_ = {}, int m_CaretWidth_ = {}, bool m_ReadOnly_ = {}, bool m_RichText_ = {}, int m_StringPosition_ = {}, int m_StringSelectPosition_ = {}, int m_CaretPosition_ = {}, int m_CaretSelectPosition_ = {}, UnityEngine::RectTransform* caretRectTrans_ = {}, ::Array<UnityEngine::UIVertex>* m_CursorVerts_ = {}, UnityEngine::CanvasRenderer* m_CachedInputRenderer_ = {}, UnityEngine::Vector2 m_LastPosition_ = {}, UnityEngine::Mesh* m_Mesh_ = {}, bool m_AllowInput_ = {}, bool m_ShouldActivateNextUpdate_ = {}, bool m_UpdateDrag_ = {}, bool m_DragPositionOutOfBounds_ = {}, bool m_CaretVisible_ = {}, UnityEngine::Coroutine* m_BlinkCoroutine_ = {}, float m_BlinkStartTime_ = {}, UnityEngine::Coroutine* m_DragCoroutine_ = {}, ::Il2CppString* m_OriginalText_ = {}, bool m_WasCanceled_ = {}, bool m_HasDoneFocusTransition_ = {}, UnityEngine::WaitForSecondsRealtime* m_WaitForSecondsRealtime_ = {}, bool m_PreventCallback_ = {}, bool m_TouchKeyboardAllowsInPlaceEditing_ = {}, bool m_IsTextComponentUpdateRequired_ = {}, bool m_IsScrollbarUpdateRequired_ = {}, bool m_IsUpdatingScrollbarValues_ = {}, bool m_isLastKeyBackspace_ = {}, float m_PointerDownClickStartTime_ = {}, float m_KeyDownStartTime_ = {}, float m_DoubleClickDelay_ = {}, TMPro::TMP_FontAsset* m_GlobalFontAsset_ = {}, bool m_OnFocusSelectAll_ = {}, bool m_isSelectAll_ = {}, bool m_ResetOnDeActivation_ = {}, bool m_SelectionStillActive_ = {}, bool m_ReleaseSelection_ = {}, UnityEngine::GameObject* m_SelectedObject_ = {}, bool m_RestoreOriginalTextOnEscape_ = {}, bool m_isRichTextEditingAllowed_ = {}, int m_LineLimit_ = {}, TMPro::TMP_InputValidator* m_InputValidator_ = {}, bool m_isSelected_ = {}, bool m_IsStringPositionDirty_ = {}, bool m_IsCaretPositionDirty_ = {}, bool m_forceRectTransformAdjustment_ = {}, UnityEngine::Event* m_ProcessingEvent_ = {}) noexcept : m_SoftKeyboard{m_SoftKeyboard_}, m_TextViewport{m_TextViewport_}, m_TextComponent{m_TextComponent_}, m_TextComponentRectTransform{m_TextComponentRectTransform_}, m_Placeholder{m_Placeholder_}, m_VerticalScrollbar{m_VerticalScrollbar_}, m_VerticalScrollbarEventHandler{m_VerticalScrollbarEventHandler_}, m_IsDrivenByLayoutComponents{m_IsDrivenByLayoutComponents_}, m_ScrollPosition{m_ScrollPosition_}, m_ScrollSensitivity{m_ScrollSensitivity_}, m_ContentType{m_ContentType_}, m_InputType{m_InputType_}, m_AsteriskChar{m_AsteriskChar_}, m_KeyboardType{m_KeyboardType_}, m_LineType{m_LineType_}, m_HideMobileInput{m_HideMobileInput_}, m_HideSoftKeyboard{m_HideSoftKeyboard_}, m_CharacterValidation{m_CharacterValidation_}, m_RegexValue{m_RegexValue_}, m_GlobalPointSize{m_GlobalPointSize_}, m_CharacterLimit{m_CharacterLimit_}, m_OnEndEdit{m_OnEndEdit_}, m_OnSubmit{m_OnSubmit_}, m_OnSelect{m_OnSelect_}, m_OnDeselect{m_OnDeselect_}, m_OnTextSelection{m_OnTextSelection_}, m_OnEndTextSelection{m_OnEndTextSelection_}, m_OnValueChanged{m_OnValueChanged_}, m_OnTouchScreenKeyboardStatusChanged{m_OnTouchScreenKeyboardStatusChanged_}, m_OnValidateInput{m_OnValidateInput_}, m_CaretColor{m_CaretColor_}, m_CustomCaretColor{m_CustomCaretColor_}, m_SelectionColor{m_SelectionColor_}, m_Text{m_Text_}, m_CaretBlinkRate{m_CaretBlinkRate_}, m_CaretWidth{m_CaretWidth_}, m_ReadOnly{m_ReadOnly_}, m_RichText{m_RichText_}, m_StringPosition{m_StringPosition_}, m_StringSelectPosition{m_StringSelectPosition_}, m_CaretPosition{m_CaretPosition_}, m_CaretSelectPosition{m_CaretSelectPosition_}, caretRectTrans{caretRectTrans_}, m_CursorVerts{m_CursorVerts_}, m_CachedInputRenderer{m_CachedInputRenderer_}, m_LastPosition{m_LastPosition_}, m_Mesh{m_Mesh_}, m_AllowInput{m_AllowInput_}, m_ShouldActivateNextUpdate{m_ShouldActivateNextUpdate_}, m_UpdateDrag{m_UpdateDrag_}, m_DragPositionOutOfBounds{m_DragPositionOutOfBounds_}, m_CaretVisible{m_CaretVisible_}, m_BlinkCoroutine{m_BlinkCoroutine_}, m_BlinkStartTime{m_BlinkStartTime_}, m_DragCoroutine{m_DragCoroutine_}, m_OriginalText{m_OriginalText_}, m_WasCanceled{m_WasCanceled_}, m_HasDoneFocusTransition{m_HasDoneFocusTransition_}, m_WaitForSecondsRealtime{m_WaitForSecondsRealtime_}, m_PreventCallback{m_PreventCallback_}, m_TouchKeyboardAllowsInPlaceEditing{m_TouchKeyboardAllowsInPlaceEditing_}, m_IsTextComponentUpdateRequired{m_IsTextComponentUpdateRequired_}, m_IsScrollbarUpdateRequired{m_IsScrollbarUpdateRequired_}, m_IsUpdatingScrollbarValues{m_IsUpdatingScrollbarValues_}, m_isLastKeyBackspace{m_isLastKeyBackspace_}, m_PointerDownClickStartTime{m_PointerDownClickStartTime_}, m_KeyDownStartTime{m_KeyDownStartTime_}, m_DoubleClickDelay{m_DoubleClickDelay_}, m_GlobalFontAsset{m_GlobalFontAsset_}, m_OnFocusSelectAll{m_OnFocusSelectAll_}, m_isSelectAll{m_isSelectAll_}, m_ResetOnDeActivation{m_ResetOnDeActivation_}, m_SelectionStillActive{m_SelectionStillActive_}, m_ReleaseSelection{m_ReleaseSelection_}, m_SelectedObject{m_SelectedObject_}, m_RestoreOriginalTextOnEscape{m_RestoreOriginalTextOnEscape_}, m_isRichTextEditingAllowed{m_isRichTextEditingAllowed_}, m_LineLimit{m_LineLimit_}, m_InputValidator{m_InputValidator_}, m_isSelected{m_isSelected_}, m_IsStringPositionDirty{m_IsStringPositionDirty_}, m_IsCaretPositionDirty{m_IsCaretPositionDirty_}, m_forceRectTransformAdjustment{m_forceRectTransformAdjustment_}, m_ProcessingEvent{m_ProcessingEvent_} {}
    // Creating interface conversion operator: operator UnityEngine::EventSystems::IUpdateSelectedHandler
    operator UnityEngine::EventSystems::IUpdateSelectedHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::IUpdateSelectedHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::EventSystems::IBeginDragHandler
    operator UnityEngine::EventSystems::IBeginDragHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::IBeginDragHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::EventSystems::IDragHandler
    operator UnityEngine::EventSystems::IDragHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::IDragHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::EventSystems::IEndDragHandler
    operator UnityEngine::EventSystems::IEndDragHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::IEndDragHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::EventSystems::IPointerClickHandler
    operator UnityEngine::EventSystems::IPointerClickHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::IPointerClickHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::EventSystems::ISubmitHandler
    operator UnityEngine::EventSystems::ISubmitHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::ISubmitHandler*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::UI::ICanvasElement
    operator UnityEngine::UI::ICanvasElement() noexcept {
      return *reinterpret_cast<UnityEngine::UI::ICanvasElement*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::UI::ILayoutElement
    operator UnityEngine::UI::ILayoutElement() noexcept {
      return *reinterpret_cast<UnityEngine::UI::ILayoutElement*>(this);
    }
    // Creating interface conversion operator: operator UnityEngine::EventSystems::IScrollHandler
    operator UnityEngine::EventSystems::IScrollHandler() noexcept {
      return *reinterpret_cast<UnityEngine::EventSystems::IScrollHandler*>(this);
    }
    // Get static field: static private readonly System.Char[] kSeparators
    static ::Array<::Il2CppChar>* _get_kSeparators();
    // Set static field: static private readonly System.Char[] kSeparators
    static void _set_kSeparators(::Array<::Il2CppChar>* value);
    // static field const value: static private System.Single kHScrollSpeed
    static constexpr const float kHScrollSpeed = 0.05;
    // Get static field: static private System.Single kHScrollSpeed
    static float _get_kHScrollSpeed();
    // Set static field: static private System.Single kHScrollSpeed
    static void _set_kHScrollSpeed(float value);
    // static field const value: static private System.Single kVScrollSpeed
    static constexpr const float kVScrollSpeed = 0.1;
    // Get static field: static private System.Single kVScrollSpeed
    static float _get_kVScrollSpeed();
    // Set static field: static private System.Single kVScrollSpeed
    static void _set_kVScrollSpeed(float value);
    // static field const value: static private System.String kEmailSpecialCharacters
    static constexpr const char* kEmailSpecialCharacters = "!#$%&'*+-/=?^_`{|}~";
    // Get static field: static private System.String kEmailSpecialCharacters
    static ::Il2CppString* _get_kEmailSpecialCharacters();
    // Set static field: static private System.String kEmailSpecialCharacters
    static void _set_kEmailSpecialCharacters(::Il2CppString* value);
    // private UnityEngine.EventSystems.BaseInput get_inputSystem()
    // Offset: 0xFA7124
    UnityEngine::EventSystems::BaseInput* get_inputSystem();
    // private System.String get_compositionString()
    // Offset: 0xFA7264
    ::Il2CppString* get_compositionString();
    // protected UnityEngine.Mesh get_mesh()
    // Offset: 0xFA76B8
    UnityEngine::Mesh* get_mesh();
    // public System.Boolean get_shouldHideMobileInput()
    // Offset: 0xFA7764
    bool get_shouldHideMobileInput();
    // public System.Void set_shouldHideMobileInput(System.Boolean value)
    // Offset: 0xFA77B8
    void set_shouldHideMobileInput(bool value);
    // public System.Boolean get_shouldHideSoftKeyboard()
    // Offset: 0xFA7858
    bool get_shouldHideSoftKeyboard();
    // public System.Void set_shouldHideSoftKeyboard(System.Boolean value)
    // Offset: 0xFA78CC
    void set_shouldHideSoftKeyboard(bool value);
    // private System.Boolean isKeyboardUsingEvents()
    // Offset: 0xFA79E0
    bool isKeyboardUsingEvents();
    // public System.String get_text()
    // Offset: 0xFA7A1C
    ::Il2CppString* get_text();
    // public System.Void set_text(System.String value)
    // Offset: 0xFA7A24
    void set_text(::Il2CppString* value);
    // public System.Void SetTextWithoutNotify(System.String input)
    // Offset: 0xFA7B68
    void SetTextWithoutNotify(::Il2CppString* input);
    // private System.Void SetText(System.String value, System.Boolean sendCallback)
    // Offset: 0xFA7A2C
    void SetText(::Il2CppString* value, bool sendCallback);
    // public System.Boolean get_isFocused()
    // Offset: 0xFA805C
    bool get_isFocused();
    // public System.Single get_caretBlinkRate()
    // Offset: 0xFA8064
    float get_caretBlinkRate();
    // public System.Void set_caretBlinkRate(System.Single value)
    // Offset: 0xFA806C
    void set_caretBlinkRate(float value);
    // public System.Int32 get_caretWidth()
    // Offset: 0xFA8164
    int get_caretWidth();
    // public System.Void set_caretWidth(System.Int32 value)
    // Offset: 0xFA816C
    void set_caretWidth(int value);
    // public UnityEngine.RectTransform get_textViewport()
    // Offset: 0xFA8250
    UnityEngine::RectTransform* get_textViewport();
    // public System.Void set_textViewport(UnityEngine.RectTransform value)
    // Offset: 0xF9BF80
    void set_textViewport(UnityEngine::RectTransform* value);
    // public TMPro.TMP_Text get_textComponent()
    // Offset: 0xFA8258
    TMPro::TMP_Text* get_textComponent();
    // public System.Void set_textComponent(TMPro.TMP_Text value)
    // Offset: 0xF9BFE0
    void set_textComponent(TMPro::TMP_Text* value);
    // public UnityEngine.UI.Graphic get_placeholder()
    // Offset: 0xFA8260
    UnityEngine::UI::Graphic* get_placeholder();
    // public System.Void set_placeholder(UnityEngine.UI.Graphic value)
    // Offset: 0xF9C05C
    void set_placeholder(UnityEngine::UI::Graphic* value);
    // public UnityEngine.UI.Scrollbar get_verticalScrollbar()
    // Offset: 0xFA8268
    UnityEngine::UI::Scrollbar* get_verticalScrollbar();
    // public System.Void set_verticalScrollbar(UnityEngine.UI.Scrollbar value)
    // Offset: 0xFA8270
    void set_verticalScrollbar(UnityEngine::UI::Scrollbar* value);
    // public System.Single get_scrollSensitivity()
    // Offset: 0xFA8410
    float get_scrollSensitivity();
    // public System.Void set_scrollSensitivity(System.Single value)
    // Offset: 0xFA8418
    void set_scrollSensitivity(float value);
    // public UnityEngine.Color get_caretColor()
    // Offset: 0xFA8494
    UnityEngine::Color get_caretColor();
    // public System.Void set_caretColor(UnityEngine.Color value)
    // Offset: 0xFA84DC
    void set_caretColor(UnityEngine::Color value);
    // public System.Boolean get_customCaretColor()
    // Offset: 0xFA8514
    bool get_customCaretColor();
    // public System.Void set_customCaretColor(System.Boolean value)
    // Offset: 0xFA851C
    void set_customCaretColor(bool value);
    // public UnityEngine.Color get_selectionColor()
    // Offset: 0xFA8540
    UnityEngine::Color get_selectionColor();
    // public System.Void set_selectionColor(UnityEngine.Color value)
    // Offset: 0xFA8554
    void set_selectionColor(UnityEngine::Color value);
    // public TMPro.TMP_InputField/SubmitEvent get_onEndEdit()
    // Offset: 0xFA858C
    TMPro::TMP_InputField::SubmitEvent* get_onEndEdit();
    // public System.Void set_onEndEdit(TMPro.TMP_InputField/SubmitEvent value)
    // Offset: 0xFA8594
    void set_onEndEdit(TMPro::TMP_InputField::SubmitEvent* value);
    // public TMPro.TMP_InputField/SubmitEvent get_onSubmit()
    // Offset: 0xFA85F4
    TMPro::TMP_InputField::SubmitEvent* get_onSubmit();
    // public System.Void set_onSubmit(TMPro.TMP_InputField/SubmitEvent value)
    // Offset: 0xFA85FC
    void set_onSubmit(TMPro::TMP_InputField::SubmitEvent* value);
    // public TMPro.TMP_InputField/SelectionEvent get_onSelect()
    // Offset: 0xFA865C
    TMPro::TMP_InputField::SelectionEvent* get_onSelect();
    // public System.Void set_onSelect(TMPro.TMP_InputField/SelectionEvent value)
    // Offset: 0xFA8664
    void set_onSelect(TMPro::TMP_InputField::SelectionEvent* value);
    // public TMPro.TMP_InputField/SelectionEvent get_onDeselect()
    // Offset: 0xFA86C4
    TMPro::TMP_InputField::SelectionEvent* get_onDeselect();
    // public System.Void set_onDeselect(TMPro.TMP_InputField/SelectionEvent value)
    // Offset: 0xFA86CC
    void set_onDeselect(TMPro::TMP_InputField::SelectionEvent* value);
    // public TMPro.TMP_InputField/TextSelectionEvent get_onTextSelection()
    // Offset: 0xFA872C
    TMPro::TMP_InputField::TextSelectionEvent* get_onTextSelection();
    // public System.Void set_onTextSelection(TMPro.TMP_InputField/TextSelectionEvent value)
    // Offset: 0xFA8734
    void set_onTextSelection(TMPro::TMP_InputField::TextSelectionEvent* value);
    // public TMPro.TMP_InputField/TextSelectionEvent get_onEndTextSelection()
    // Offset: 0xFA8794
    TMPro::TMP_InputField::TextSelectionEvent* get_onEndTextSelection();
    // public System.Void set_onEndTextSelection(TMPro.TMP_InputField/TextSelectionEvent value)
    // Offset: 0xFA879C
    void set_onEndTextSelection(TMPro::TMP_InputField::TextSelectionEvent* value);
    // public TMPro.TMP_InputField/OnChangeEvent get_onValueChanged()
    // Offset: 0xFA87FC
    TMPro::TMP_InputField::OnChangeEvent* get_onValueChanged();
    // public System.Void set_onValueChanged(TMPro.TMP_InputField/OnChangeEvent value)
    // Offset: 0xFA8804
    void set_onValueChanged(TMPro::TMP_InputField::OnChangeEvent* value);
    // public TMPro.TMP_InputField/TouchScreenKeyboardEvent get_onTouchScreenKeyboardStatusChanged()
    // Offset: 0xFA8864
    TMPro::TMP_InputField::TouchScreenKeyboardEvent* get_onTouchScreenKeyboardStatusChanged();
    // public System.Void set_onTouchScreenKeyboardStatusChanged(TMPro.TMP_InputField/TouchScreenKeyboardEvent value)
    // Offset: 0xFA886C
    void set_onTouchScreenKeyboardStatusChanged(TMPro::TMP_InputField::TouchScreenKeyboardEvent* value);
    // public TMPro.TMP_InputField/OnValidateInput get_onValidateInput()
    // Offset: 0xFA88CC
    TMPro::TMP_InputField::OnValidateInput* get_onValidateInput();
    // public System.Void set_onValidateInput(TMPro.TMP_InputField/OnValidateInput value)
    // Offset: 0xFA88D4
    void set_onValidateInput(TMPro::TMP_InputField::OnValidateInput* value);
    // public System.Int32 get_characterLimit()
    // Offset: 0xFA8934
    int get_characterLimit();
    // public System.Void set_characterLimit(System.Int32 value)
    // Offset: 0xFA893C
    void set_characterLimit(int value);
    // public System.Single get_pointSize()
    // Offset: 0xFA8A00
    float get_pointSize();
    // public System.Void set_pointSize(System.Single value)
    // Offset: 0xFA8A08
    void set_pointSize(float value);
    // public TMPro.TMP_FontAsset get_fontAsset()
    // Offset: 0xFA8BAC
    TMPro::TMP_FontAsset* get_fontAsset();
    // public System.Void set_fontAsset(TMPro.TMP_FontAsset value)
    // Offset: 0xF9C0BC
    void set_fontAsset(TMPro::TMP_FontAsset* value);
    // public System.Boolean get_onFocusSelectAll()
    // Offset: 0xFA8CA0
    bool get_onFocusSelectAll();
    // public System.Void set_onFocusSelectAll(System.Boolean value)
    // Offset: 0xFA8CA8
    void set_onFocusSelectAll(bool value);
    // public System.Boolean get_resetOnDeActivation()
    // Offset: 0xFA8CB4
    bool get_resetOnDeActivation();
    // public System.Void set_resetOnDeActivation(System.Boolean value)
    // Offset: 0xFA8CBC
    void set_resetOnDeActivation(bool value);
    // public System.Boolean get_restoreOriginalTextOnEscape()
    // Offset: 0xFA8CC8
    bool get_restoreOriginalTextOnEscape();
    // public System.Void set_restoreOriginalTextOnEscape(System.Boolean value)
    // Offset: 0xFA8CD0
    void set_restoreOriginalTextOnEscape(bool value);
    // public System.Boolean get_isRichTextEditingAllowed()
    // Offset: 0xFA8CDC
    bool get_isRichTextEditingAllowed();
    // public System.Void set_isRichTextEditingAllowed(System.Boolean value)
    // Offset: 0xFA8CE4
    void set_isRichTextEditingAllowed(bool value);
    // public TMPro.TMP_InputField/ContentType get_contentType()
    // Offset: 0xFA8CF0
    TMPro::TMP_InputField::ContentType get_contentType();
    // public System.Void set_contentType(TMPro.TMP_InputField/ContentType value)
    // Offset: 0xFA8CF8
    void set_contentType(TMPro::TMP_InputField::ContentType value);
    // public TMPro.TMP_InputField/LineType get_lineType()
    // Offset: 0xFA8E2C
    TMPro::TMP_InputField::LineType get_lineType();
    // public System.Void set_lineType(TMPro.TMP_InputField/LineType value)
    // Offset: 0xFA8E34
    void set_lineType(TMPro::TMP_InputField::LineType value);
    // public System.Int32 get_lineLimit()
    // Offset: 0xFA8F68
    int get_lineLimit();
    // public System.Void set_lineLimit(System.Int32 value)
    // Offset: 0xFA8F70
    void set_lineLimit(int value);
    // public TMPro.TMP_InputField/InputType get_inputType()
    // Offset: 0xFA8FF0
    TMPro::TMP_InputField::InputType get_inputType();
    // public System.Void set_inputType(TMPro.TMP_InputField/InputType value)
    // Offset: 0xFA8FF8
    void set_inputType(TMPro::TMP_InputField::InputType value);
    // public UnityEngine.TouchScreenKeyboardType get_keyboardType()
    // Offset: 0xFA909C
    UnityEngine::TouchScreenKeyboardType get_keyboardType();
    // public System.Void set_keyboardType(UnityEngine.TouchScreenKeyboardType value)
    // Offset: 0xFA90A4
    void set_keyboardType(UnityEngine::TouchScreenKeyboardType value);
    // public TMPro.TMP_InputField/CharacterValidation get_characterValidation()
    // Offset: 0xFA9130
    TMPro::TMP_InputField::CharacterValidation get_characterValidation();
    // public System.Void set_characterValidation(TMPro.TMP_InputField/CharacterValidation value)
    // Offset: 0xFA9138
    void set_characterValidation(TMPro::TMP_InputField::CharacterValidation value);
    // public TMPro.TMP_InputValidator get_inputValidator()
    // Offset: 0xFA91C4
    TMPro::TMP_InputValidator* get_inputValidator();
    // public System.Void set_inputValidator(TMPro.TMP_InputValidator value)
    // Offset: 0xFA91CC
    void set_inputValidator(TMPro::TMP_InputValidator* value);
    // public System.Boolean get_readOnly()
    // Offset: 0xFA9270
    bool get_readOnly();
    // public System.Void set_readOnly(System.Boolean value)
    // Offset: 0xFA9278
    void set_readOnly(bool value);
    // public System.Boolean get_richText()
    // Offset: 0xFA9284
    bool get_richText();
    // public System.Void set_richText(System.Boolean value)
    // Offset: 0xFA928C
    void set_richText(bool value);
    // public System.Boolean get_multiLine()
    // Offset: 0xFA9330
    bool get_multiLine();
    // public System.Char get_asteriskChar()
    // Offset: 0xFA9344
    ::Il2CppChar get_asteriskChar();
    // public System.Void set_asteriskChar(System.Char value)
    // Offset: 0xFA934C
    void set_asteriskChar(::Il2CppChar value);
    // public System.Boolean get_wasCanceled()
    // Offset: 0xFA93C8
    bool get_wasCanceled();
    // protected System.Void ClampStringPos(ref System.Int32 pos)
    // Offset: 0xFA93D0
    void ClampStringPos(int& pos);
    // protected System.Void ClampCaretPos(ref System.Int32 pos)
    // Offset: 0xFA9408
    void ClampCaretPos(int& pos);
    // protected System.Int32 get_caretPositionInternal()
    // Offset: 0xFA9450
    int get_caretPositionInternal();
    // protected System.Void set_caretPositionInternal(System.Int32 value)
    // Offset: 0xFA9480
    void set_caretPositionInternal(int value);
    // protected System.Int32 get_stringPositionInternal()
    // Offset: 0xFA9490
    int get_stringPositionInternal();
    // protected System.Void set_stringPositionInternal(System.Int32 value)
    // Offset: 0xFA94C0
    void set_stringPositionInternal(int value);
    // protected System.Int32 get_caretSelectPositionInternal()
    // Offset: 0xFA94F8
    int get_caretSelectPositionInternal();
    // protected System.Void set_caretSelectPositionInternal(System.Int32 value)
    // Offset: 0xFA9528
    void set_caretSelectPositionInternal(int value);
    // protected System.Int32 get_stringSelectPositionInternal()
    // Offset: 0xFA9538
    int get_stringSelectPositionInternal();
    // protected System.Void set_stringSelectPositionInternal(System.Int32 value)
    // Offset: 0xFA9568
    void set_stringSelectPositionInternal(int value);
    // public System.Int32 get_caretPosition()
    // Offset: 0xFA95D4
    int get_caretPosition();
    // public System.Void set_caretPosition(System.Int32 value)
    // Offset: 0xFA95D8
    void set_caretPosition(int value);
    // public System.Int32 get_selectionAnchorPosition()
    // Offset: 0xFA96A8
    int get_selectionAnchorPosition();
    // public System.Void set_selectionAnchorPosition(System.Int32 value)
    // Offset: 0xFA9610
    void set_selectionAnchorPosition(int value);
    // public System.Int32 get_selectionFocusPosition()
    // Offset: 0xFA96AC
    int get_selectionFocusPosition();
    // public System.Void set_selectionFocusPosition(System.Int32 value)
    // Offset: 0xFA965C
    void set_selectionFocusPosition(int value);
    // public System.Int32 get_stringPosition()
    // Offset: 0xFA96B0
    int get_stringPosition();
    // public System.Void set_stringPosition(System.Int32 value)
    // Offset: 0xFA96B4
    void set_stringPosition(int value);
    // public System.Int32 get_selectionStringAnchorPosition()
    // Offset: 0xFA97B4
    int get_selectionStringAnchorPosition();
    // public System.Void set_selectionStringAnchorPosition(System.Int32 value)
    // Offset: 0xFA96EC
    void set_selectionStringAnchorPosition(int value);
    // public System.Int32 get_selectionStringFocusPosition()
    // Offset: 0xFA97B8
    int get_selectionStringFocusPosition();
    // public System.Void set_selectionStringFocusPosition(System.Int32 value)
    // Offset: 0xFA9750
    void set_selectionStringFocusPosition(int value);
    // private System.Void ON_TEXT_CHANGED(UnityEngine.Object obj)
    // Offset: 0xFAA8EC
    void ON_TEXT_CHANGED(UnityEngine::Object* obj);
    // private System.Collections.IEnumerator CaretBlink()
    // Offset: 0xFAAA60
    System::Collections::IEnumerator* CaretBlink();
    // private System.Void SetCaretVisible()
    // Offset: 0xFAAADC
    void SetCaretVisible();
    // private System.Void SetCaretActive()
    // Offset: 0xFA80F0
    void SetCaretActive();
    // protected System.Void OnFocus()
    // Offset: 0xFAAB1C
    void OnFocus();
    // protected System.Void SelectAll()
    // Offset: 0xFAAB2C
    void SelectAll();
    // public System.Void MoveTextEnd(System.Boolean shift)
    // Offset: 0xFAAB80
    void MoveTextEnd(bool shift);
    // public System.Void MoveTextStart(System.Boolean shift)
    // Offset: 0xFAAD34
    void MoveTextStart(bool shift);
    // public System.Void MoveToEndOfLine(System.Boolean shift, System.Boolean ctrl)
    // Offset: 0xFAAE48
    void MoveToEndOfLine(bool shift, bool ctrl);
    // public System.Void MoveToStartOfLine(System.Boolean shift, System.Boolean ctrl)
    // Offset: 0xFAAFC4
    void MoveToStartOfLine(bool shift, bool ctrl);
    // static private System.String get_clipboard()
    // Offset: 0xFAB150
    static ::Il2CppString* get_clipboard();
    // static private System.Void set_clipboard(System.String value)
    // Offset: 0xFAB158
    static void set_clipboard(::Il2CppString* value);
    // private System.Boolean InPlaceEditing()
    // Offset: 0xFAB160
    bool InPlaceEditing();
    // private System.Void UpdateStringPositionFromKeyboard()
    // Offset: 0xFAB224
    void UpdateStringPositionFromKeyboard();
    // protected System.Void LateUpdate()
    // Offset: 0xFAB364
    void LateUpdate();
    // private System.Boolean MayDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0xFAC5F8
    bool MayDrag(UnityEngine::EventSystems::PointerEventData* eventData);
    // private System.Collections.IEnumerator MouseDragOutsideRect(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0xFACA30
    System::Collections::IEnumerator* MouseDragOutsideRect(UnityEngine::EventSystems::PointerEventData* eventData);
    // protected TMPro.TMP_InputField/EditState KeyPressed(UnityEngine.Event evt)
    // Offset: 0xFAD278
    TMPro::TMP_InputField::EditState KeyPressed(UnityEngine::Event* evt);
    // protected System.Boolean IsValidChar(System.Char c)
    // Offset: 0xFAE9C8
    bool IsValidChar(::Il2CppChar c);
    // public System.Void ProcessEvent(UnityEngine.Event e)
    // Offset: 0xFAE9D8
    void ProcessEvent(UnityEngine::Event* e);
    // private System.String GetSelectedString()
    // Offset: 0xFADC58
    ::Il2CppString* GetSelectedString();
    // private System.Int32 FindNextWordBegin()
    // Offset: 0xFAECF8
    int FindNextWordBegin();
    // private System.Void MoveRight(System.Boolean shift, System.Boolean ctrl)
    // Offset: 0xFAE5E0
    void MoveRight(bool shift, bool ctrl);
    // private System.Int32 FindPrevWordBegin()
    // Offset: 0xFAEDCC
    int FindPrevWordBegin();
    // private System.Void MoveLeft(System.Boolean shift, System.Boolean ctrl)
    // Offset: 0xFAE224
    void MoveLeft(bool shift, bool ctrl);
    // private System.Int32 LineUpCharacterPosition(System.Int32 originalPos, System.Boolean goToFirstChar)
    // Offset: 0xFAEE84
    int LineUpCharacterPosition(int originalPos, bool goToFirstChar);
    // private System.Int32 LineDownCharacterPosition(System.Int32 originalPos, System.Boolean goToLastChar)
    // Offset: 0xFAF098
    int LineDownCharacterPosition(int originalPos, bool goToLastChar);
    // private System.Int32 PageUpCharacterPosition(System.Int32 originalPos, System.Boolean goToFirstChar)
    // Offset: 0xFAF2A8
    int PageUpCharacterPosition(int originalPos, bool goToFirstChar);
    // private System.Int32 PageDownCharacterPosition(System.Int32 originalPos, System.Boolean goToLastChar)
    // Offset: 0xFAF558
    int PageDownCharacterPosition(int originalPos, bool goToLastChar);
    // private System.Void MoveDown(System.Boolean shift)
    // Offset: 0xFAE9A4
    void MoveDown(bool shift);
    // private System.Void MoveDown(System.Boolean shift, System.Boolean goToLastChar)
    // Offset: 0xFAF808
    void MoveDown(bool shift, bool goToLastChar);
    // private System.Void MoveUp(System.Boolean shift)
    // Offset: 0xFAE998
    void MoveUp(bool shift);
    // private System.Void MoveUp(System.Boolean shift, System.Boolean goToFirstChar)
    // Offset: 0xFAFA00
    void MoveUp(bool shift, bool goToFirstChar);
    // private System.Void MovePageUp(System.Boolean shift)
    // Offset: 0xFAE9B0
    void MovePageUp(bool shift);
    // private System.Void MovePageUp(System.Boolean shift, System.Boolean goToFirstChar)
    // Offset: 0xFAFBE4
    void MovePageUp(bool shift, bool goToFirstChar);
    // private System.Void MovePageDown(System.Boolean shift)
    // Offset: 0xFAE9BC
    void MovePageDown(bool shift);
    // private System.Void MovePageDown(System.Boolean shift, System.Boolean goToLastChar)
    // Offset: 0xFAFF50
    void MovePageDown(bool shift, bool goToLastChar);
    // private System.Void Delete()
    // Offset: 0xFADD08
    void Delete();
    // private System.Void DeleteKey()
    // Offset: 0xFADA3C
    void DeleteKey();
    // private System.Void Backspace()
    // Offset: 0xFAD6C0
    void Backspace();
    // protected System.Void Append(System.String input)
    // Offset: 0xFB02D0
    void Append(::Il2CppString* input);
    // protected System.Void Append(System.Char input)
    // Offset: 0xFB0384
    void Append(::Il2CppChar input);
    // private System.Void Insert(System.Char c)
    // Offset: 0xFB0484
    void Insert(::Il2CppChar c);
    // private System.Void UpdateTouchKeyboardFromEditChanges()
    // Offset: 0xFAE1D8
    void UpdateTouchKeyboardFromEditChanges();
    // private System.Void SendOnValueChangedAndUpdateLabel()
    // Offset: 0xFAC5D4
    void SendOnValueChangedAndUpdateLabel();
    // private System.Void SendOnValueChanged()
    // Offset: 0xFA7FF8
    void SendOnValueChanged();
    // protected System.Void SendOnEndEdit()
    // Offset: 0xFB05FC
    void SendOnEndEdit();
    // protected System.Void SendOnSubmit()
    // Offset: 0xFAEB1C
    void SendOnSubmit();
    // protected System.Void SendOnFocus()
    // Offset: 0xFB0660
    void SendOnFocus();
    // protected System.Void SendOnFocusLost()
    // Offset: 0xFB06C4
    void SendOnFocusLost();
    // protected System.Void SendOnTextSelection()
    // Offset: 0xFB0728
    void SendOnTextSelection();
    // protected System.Void SendOnEndTextSelection()
    // Offset: 0xFB07C4
    void SendOnEndTextSelection();
    // protected System.Void SendTouchScreenKeyboardStatusChanged()
    // Offset: 0xFABEDC
    void SendTouchScreenKeyboardStatusChanged();
    // protected System.Void UpdateLabel()
    // Offset: 0xFA7CE0
    void UpdateLabel();
    // private System.Void UpdateScrollbar()
    // Offset: 0xFABD70
    void UpdateScrollbar();
    // private System.Void OnScrollbarValueChange(System.Single value)
    // Offset: 0xFB0858
    void OnScrollbarValueChange(float value);
    // private System.Void AdjustTextPositionRelativeToViewport(System.Single relativePosition)
    // Offset: 0xFA7B70
    void AdjustTextPositionRelativeToViewport(float relativePosition);
    // private System.Int32 GetCaretPositionFromStringIndex(System.Int32 stringIndex)
    // Offset: 0xFAA9E4
    int GetCaretPositionFromStringIndex(int stringIndex);
    // private System.Int32 GetMinCaretPositionFromStringIndex(System.Int32 stringIndex)
    // Offset: 0xFB08B4
    int GetMinCaretPositionFromStringIndex(int stringIndex);
    // private System.Int32 GetMaxCaretPositionFromStringIndex(System.Int32 stringIndex)
    // Offset: 0xFB0934
    int GetMaxCaretPositionFromStringIndex(int stringIndex);
    // private System.Int32 GetStringIndexFromCaretPosition(System.Int32 caretPosition)
    // Offset: 0xFAACC8
    int GetStringIndexFromCaretPosition(int caretPosition);
    // public System.Void ForceLabelUpdate()
    // Offset: 0xFB09B0
    void ForceLabelUpdate();
    // private System.Void MarkGeometryAsDirty()
    // Offset: 0xFA81E8
    void MarkGeometryAsDirty();
    // private System.Void UpdateGeometry()
    // Offset: 0xFB09C4
    void UpdateGeometry();
    // private System.Void AssignPositioningIfNeeded()
    // Offset: 0xFA9DE0
    void AssignPositioningIfNeeded();
    // private System.Void OnFillVBO(UnityEngine.Mesh vbo)
    // Offset: 0xFB0A90
    void OnFillVBO(UnityEngine::Mesh* vbo);
    // private System.Void GenerateCaret(UnityEngine.UI.VertexHelper vbo, UnityEngine.Vector2 roundingOffset)
    // Offset: 0xFB0DB4
    void GenerateCaret(UnityEngine::UI::VertexHelper* vbo, UnityEngine::Vector2 roundingOffset);
    // private System.Void CreateCursorVerts()
    // Offset: 0xFB1B4C
    void CreateCursorVerts();
    // private System.Void GenerateHightlight(UnityEngine.UI.VertexHelper vbo, UnityEngine.Vector2 roundingOffset)
    // Offset: 0xFB1254
    void GenerateHightlight(UnityEngine::UI::VertexHelper* vbo, UnityEngine::Vector2 roundingOffset);
    // private System.Void AdjustRectTransformRelativeToViewport(UnityEngine.Vector2 startPosition, System.Single height, System.Boolean isCharVisible)
    // Offset: 0xFB1CAC
    void AdjustRectTransformRelativeToViewport(UnityEngine::Vector2 startPosition, float height, bool isCharVisible);
    // protected System.Char Validate(System.String text, System.Int32 pos, System.Char ch)
    // Offset: 0xFABF58
    ::Il2CppChar Validate(::Il2CppString* text, int pos, ::Il2CppChar ch);
    // public System.Void ActivateInputField()
    // Offset: 0xFB2398
    void ActivateInputField();
    // private System.Void ActivateInputFieldInternal()
    // Offset: 0xFAB978
    void ActivateInputFieldInternal();
    // public System.Void OnControlClick()
    // Offset: 0xFB251C
    void OnControlClick();
    // public System.Void ReleaseSelection()
    // Offset: 0xFB2520
    void ReleaseSelection();
    // public System.Void DeactivateInputField(System.Boolean clearSelection)
    // Offset: 0xFAA738
    void DeactivateInputField(bool clearSelection);
    // private System.Void EnforceContentType()
    // Offset: 0xFA8D74
    void EnforceContentType();
    // private System.Void SetTextComponentWrapMode()
    // Offset: 0xFA7608
    void SetTextComponentWrapMode();
    // private System.Void SetTextComponentRichTextMode()
    // Offset: 0xFA9298
    void SetTextComponentRichTextMode();
    // private System.Void SetToCustomIfContentTypeIsNot(params TMPro.TMP_InputField/ContentType[] allowedContentTypes)
    // Offset: 0xFA8EF8
    void SetToCustomIfContentTypeIsNot(::Array<TMPro::TMP_InputField::ContentType>* allowedContentTypes);
    // Creating initializer_list -> params proxy for: System.Void SetToCustomIfContentTypeIsNot(params TMPro.TMP_InputField/ContentType[] allowedContentTypes)
    void SetToCustomIfContentTypeIsNot(std::initializer_list<TMPro::TMP_InputField::ContentType> allowedContentTypes);
    // Creating TArgs -> initializer_list proxy for: System.Void SetToCustomIfContentTypeIsNot(params TMPro.TMP_InputField/ContentType[] allowedContentTypes)
    template<class ...TParams>
    void SetToCustomIfContentTypeIsNot(TParams&&... allowedContentTypes) {
      SetToCustomIfContentTypeIsNot({allowedContentTypes...});
    }
    // private System.Void SetToCustom()
    // Offset: 0xFA9084
    void SetToCustom();
    // private System.Void SetToCustom(TMPro.TMP_InputField/CharacterValidation characterValidation)
    // Offset: 0xFA9258
    void SetToCustom(TMPro::TMP_InputField::CharacterValidation characterValidation);
    // public System.Void SetGlobalPointSize(System.Single pointSize)
    // Offset: 0xFA8AC0
    void SetGlobalPointSize(float pointSize);
    // public System.Void SetGlobalFontAsset(TMPro.TMP_FontAsset fontAsset)
    // Offset: 0xFA8BB4
    void SetGlobalFontAsset(TMPro::TMP_FontAsset* fontAsset);
    // protected System.Void .ctor()
    // Offset: 0xFA7308
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::.ctor()
    // Base method: System.Void UIBehaviour::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TMP_InputField* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_InputField::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TMP_InputField*, creationType>()));
    }
    // private System.Boolean get_hasSelection()
    // Offset: 0xFA95A0
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Boolean Selectable::get_hasSelection()
    bool get_hasSelection();
    // protected override System.Void OnEnable()
    // Offset: 0xFA97BC
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0xFAA428
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnDisable()
    void OnDisable();
    // public System.Void OnBeginDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0xFAC714
    // Implemented from: UnityEngine.EventSystems.IBeginDragHandler
    // Base method: System.Void IBeginDragHandler::OnBeginDrag(UnityEngine.EventSystems.PointerEventData eventData)
    void OnBeginDrag(UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0xFAC740
    // Implemented from: UnityEngine.EventSystems.IDragHandler
    // Base method: System.Void IDragHandler::OnDrag(UnityEngine.EventSystems.PointerEventData eventData)
    void OnDrag(UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnEndDrag(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0xFACAC8
    // Implemented from: UnityEngine.EventSystems.IEndDragHandler
    // Base method: System.Void IEndDragHandler::OnEndDrag(UnityEngine.EventSystems.PointerEventData eventData)
    void OnEndDrag(UnityEngine::EventSystems::PointerEventData* eventData);
    // public override System.Void OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0xFACAF0
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnPointerDown(UnityEngine.EventSystems.PointerEventData eventData)
    void OnPointerDown(UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void OnUpdateSelected(UnityEngine.EventSystems.BaseEventData eventData)
    // Offset: 0xFAE9DC
    // Implemented from: UnityEngine.EventSystems.IUpdateSelectedHandler
    // Base method: System.Void IUpdateSelectedHandler::OnUpdateSelected(UnityEngine.EventSystems.BaseEventData eventData)
    void OnUpdateSelected(UnityEngine::EventSystems::BaseEventData* eventData);
    // public System.Void OnScroll(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0xFAEB80
    // Implemented from: UnityEngine.EventSystems.IScrollHandler
    // Base method: System.Void IScrollHandler::OnScroll(UnityEngine.EventSystems.PointerEventData eventData)
    void OnScroll(UnityEngine::EventSystems::PointerEventData* eventData);
    // public System.Void Rebuild(UnityEngine.UI.CanvasUpdate update)
    // Offset: 0xFB09B4
    // Implemented from: UnityEngine.UI.ICanvasElement
    // Base method: System.Void ICanvasElement::Rebuild(UnityEngine.UI.CanvasUpdate update)
    void Rebuild(UnityEngine::UI::CanvasUpdate update);
    // public System.Void LayoutComplete()
    // Offset: 0xFB0A88
    // Implemented from: UnityEngine.UI.ICanvasElement
    // Base method: System.Void ICanvasElement::LayoutComplete()
    void LayoutComplete();
    // public System.Void GraphicUpdateComplete()
    // Offset: 0xFB0A8C
    // Implemented from: UnityEngine.UI.ICanvasElement
    // Base method: System.Void ICanvasElement::GraphicUpdateComplete()
    void GraphicUpdateComplete();
    // public override System.Void OnSelect(UnityEngine.EventSystems.BaseEventData eventData)
    // Offset: 0xFB24CC
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnSelect(UnityEngine.EventSystems.BaseEventData eventData)
    void OnSelect(UnityEngine::EventSystems::BaseEventData* eventData);
    // public System.Void OnPointerClick(UnityEngine.EventSystems.PointerEventData eventData)
    // Offset: 0xFB24FC
    // Implemented from: UnityEngine.EventSystems.IPointerClickHandler
    // Base method: System.Void IPointerClickHandler::OnPointerClick(UnityEngine.EventSystems.PointerEventData eventData)
    void OnPointerClick(UnityEngine::EventSystems::PointerEventData* eventData);
    // public override System.Void OnDeselect(UnityEngine.EventSystems.BaseEventData eventData)
    // Offset: 0xFB2528
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::OnDeselect(UnityEngine.EventSystems.BaseEventData eventData)
    void OnDeselect(UnityEngine::EventSystems::BaseEventData* eventData);
    // public System.Void OnSubmit(UnityEngine.EventSystems.BaseEventData eventData)
    // Offset: 0xFB2564
    // Implemented from: UnityEngine.EventSystems.ISubmitHandler
    // Base method: System.Void ISubmitHandler::OnSubmit(UnityEngine.EventSystems.BaseEventData eventData)
    void OnSubmit(UnityEngine::EventSystems::BaseEventData* eventData);
    // protected override System.Void DoStateTransition(UnityEngine.UI.Selectable/SelectionState state, System.Boolean instant)
    // Offset: 0xFB25C8
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::DoStateTransition(UnityEngine.UI.Selectable/SelectionState state, System.Boolean instant)
    void DoStateTransition(UnityEngine::UI::Selectable::SelectionState state, bool instant);
    // public System.Void CalculateLayoutInputHorizontal()
    // Offset: 0xFB25F4
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Void ILayoutElement::CalculateLayoutInputHorizontal()
    void CalculateLayoutInputHorizontal();
    // public System.Void CalculateLayoutInputVertical()
    // Offset: 0xFB25F8
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Void ILayoutElement::CalculateLayoutInputVertical()
    void CalculateLayoutInputVertical();
    // public System.Single get_minWidth()
    // Offset: 0xFB25FC
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Single ILayoutElement::get_minWidth()
    float get_minWidth();
    // public System.Single get_preferredWidth()
    // Offset: 0xFB2604
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Single ILayoutElement::get_preferredWidth()
    float get_preferredWidth();
    // public System.Single get_flexibleWidth()
    // Offset: 0xFB26B8
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Single ILayoutElement::get_flexibleWidth()
    float get_flexibleWidth();
    // public System.Single get_minHeight()
    // Offset: 0xFB26C0
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Single ILayoutElement::get_minHeight()
    float get_minHeight();
    // public System.Single get_preferredHeight()
    // Offset: 0xFB26C8
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Single ILayoutElement::get_preferredHeight()
    float get_preferredHeight();
    // public System.Single get_flexibleHeight()
    // Offset: 0xFB2768
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Single ILayoutElement::get_flexibleHeight()
    float get_flexibleHeight();
    // public System.Int32 get_layoutPriority()
    // Offset: 0xFB2770
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Int32 ILayoutElement::get_layoutPriority()
    int get_layoutPriority();
    // static private System.Void .cctor()
    // Offset: 0xFB2778
    // Implemented from: UnityEngine.UI.Selectable
    // Base method: System.Void Selectable::.cctor()
    // Base method: System.Void Object::.cctor()
    static void _cctor();
    // private UnityEngine.Transform UnityEngine.UI.ICanvasElement.get_transform()
    // Offset: 0xFB27F8
    // Implemented from: UnityEngine.UI.ICanvasElement
    // Base method: UnityEngine.Transform ICanvasElement::get_transform()
    UnityEngine::Transform* UnityEngine_UI_ICanvasElement_get_transform();
  }; // TMPro.TMP_InputField
  #pragma pack(pop)
  static check_size<sizeof(TMP_InputField), 672 + sizeof(UnityEngine::Event*)> __TMPro_TMP_InputFieldSizeCheck;
  static_assert(sizeof(TMP_InputField) == 0x2A8);
}
DEFINE_IL2CPP_ARG_TYPE(TMPro::TMP_InputField*, "TMPro", "TMP_InputField");
DEFINE_IL2CPP_ARG_TYPE(TMPro::TMP_InputField::ContentType, "TMPro", "TMP_InputField/ContentType");
DEFINE_IL2CPP_ARG_TYPE(TMPro::TMP_InputField::InputType, "TMPro", "TMP_InputField/InputType");
DEFINE_IL2CPP_ARG_TYPE(TMPro::TMP_InputField::CharacterValidation, "TMPro", "TMP_InputField/CharacterValidation");
DEFINE_IL2CPP_ARG_TYPE(TMPro::TMP_InputField::LineType, "TMPro", "TMP_InputField/LineType");
