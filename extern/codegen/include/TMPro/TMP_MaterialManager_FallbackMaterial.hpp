// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_MaterialManager
#include "TMPro/TMP_MaterialManager.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
}
// Completed forward declares
// Type namespace: TMPro
namespace TMPro {
  // Size: 0x34
  #pragma pack(push, 1)
  // Autogenerated type: TMPro.TMP_MaterialManager/FallbackMaterial
  // [] Offset: FFFFFFFF
  class TMP_MaterialManager::FallbackMaterial : public ::Il2CppObject {
    public:
    // public System.Int32 baseID
    // Size: 0x4
    // Offset: 0x10
    int baseID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Padding between fields: baseID and: baseMaterial
    char __padding0[0x4] = {};
    // public UnityEngine.Material baseMaterial
    // Size: 0x8
    // Offset: 0x18
    UnityEngine::Material* baseMaterial;
    // Field size check
    static_assert(sizeof(UnityEngine::Material*) == 0x8);
    // public System.Int64 fallbackID
    // Size: 0x8
    // Offset: 0x20
    int64_t fallbackID;
    // Field size check
    static_assert(sizeof(int64_t) == 0x8);
    // public UnityEngine.Material fallbackMaterial
    // Size: 0x8
    // Offset: 0x28
    UnityEngine::Material* fallbackMaterial;
    // Field size check
    static_assert(sizeof(UnityEngine::Material*) == 0x8);
    // public System.Int32 count
    // Size: 0x4
    // Offset: 0x30
    int count;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // Creating value type constructor for type: FallbackMaterial
    FallbackMaterial(int baseID_ = {}, UnityEngine::Material* baseMaterial_ = {}, int64_t fallbackID_ = {}, UnityEngine::Material* fallbackMaterial_ = {}, int count_ = {}) noexcept : baseID{baseID_}, baseMaterial{baseMaterial_}, fallbackID{fallbackID_}, fallbackMaterial{fallbackMaterial_}, count{count_} {}
    // public System.Void .ctor()
    // Offset: 0xFF492C
    // Implemented from: System.Object
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TMP_MaterialManager::FallbackMaterial* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_MaterialManager::FallbackMaterial::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TMP_MaterialManager::FallbackMaterial*, creationType>()));
    }
  }; // TMPro.TMP_MaterialManager/FallbackMaterial
  #pragma pack(pop)
  static check_size<sizeof(TMP_MaterialManager::FallbackMaterial), 48 + sizeof(int)> __TMPro_TMP_MaterialManager_FallbackMaterialSizeCheck;
  static_assert(sizeof(TMP_MaterialManager::FallbackMaterial) == 0x34);
}
DEFINE_IL2CPP_ARG_TYPE(TMPro::TMP_MaterialManager::FallbackMaterial*, "TMPro", "TMP_MaterialManager/FallbackMaterial");
