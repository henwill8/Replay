// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.SpriteAssetUtilities.TexturePacker
#include "TMPro/SpriteAssetUtilities/TexturePacker.hpp"
// Including type: System.ValueType
#include "System/ValueType.hpp"
// Including type: TMPro.SpriteAssetUtilities.TexturePacker/SpriteFrame
#include "TMPro/SpriteAssetUtilities/TexturePacker_SpriteFrame.hpp"
// Including type: TMPro.SpriteAssetUtilities.TexturePacker/SpriteSize
#include "TMPro/SpriteAssetUtilities/TexturePacker_SpriteSize.hpp"
// Including type: UnityEngine.Vector2
#include "UnityEngine/Vector2.hpp"
// Completed includes
// Type namespace: TMPro.SpriteAssetUtilities
namespace TMPro::SpriteAssetUtilities {
  // Size: 0x3C
  #pragma pack(push, 1)
  // WARNING Layout: Sequential may not be correctly taken into account!
  // Autogenerated type: TMPro.SpriteAssetUtilities.TexturePacker/SpriteData
  // [] Offset: FFFFFFFF
  struct TexturePacker::SpriteData/*, public System::ValueType*/ {
    public:
    // public System.String filename
    // Size: 0x8
    // Offset: 0x0
    ::Il2CppString* filename;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // public TMPro.SpriteAssetUtilities.TexturePacker/SpriteFrame frame
    // Size: 0x10
    // Offset: 0x8
    TMPro::SpriteAssetUtilities::TexturePacker::SpriteFrame frame;
    // Field size check
    static_assert(sizeof(TMPro::SpriteAssetUtilities::TexturePacker::SpriteFrame) == 0x10);
    // public System.Boolean rotated
    // Size: 0x1
    // Offset: 0x18
    bool rotated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // public System.Boolean trimmed
    // Size: 0x1
    // Offset: 0x19
    bool trimmed;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Padding between fields: trimmed and: spriteSourceSize
    char __padding3[0x2] = {};
    // public TMPro.SpriteAssetUtilities.TexturePacker/SpriteFrame spriteSourceSize
    // Size: 0x10
    // Offset: 0x1C
    TMPro::SpriteAssetUtilities::TexturePacker::SpriteFrame spriteSourceSize;
    // Field size check
    static_assert(sizeof(TMPro::SpriteAssetUtilities::TexturePacker::SpriteFrame) == 0x10);
    // public TMPro.SpriteAssetUtilities.TexturePacker/SpriteSize sourceSize
    // Size: 0x8
    // Offset: 0x2C
    TMPro::SpriteAssetUtilities::TexturePacker::SpriteSize sourceSize;
    // Field size check
    static_assert(sizeof(TMPro::SpriteAssetUtilities::TexturePacker::SpriteSize) == 0x8);
    // public UnityEngine.Vector2 pivot
    // Size: 0x8
    // Offset: 0x34
    UnityEngine::Vector2 pivot;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector2) == 0x8);
    // Creating value type constructor for type: SpriteData
    constexpr SpriteData(::Il2CppString* filename_ = {}, TMPro::SpriteAssetUtilities::TexturePacker::SpriteFrame frame_ = {}, bool rotated_ = {}, bool trimmed_ = {}, TMPro::SpriteAssetUtilities::TexturePacker::SpriteFrame spriteSourceSize_ = {}, TMPro::SpriteAssetUtilities::TexturePacker::SpriteSize sourceSize_ = {}, UnityEngine::Vector2 pivot_ = {}) noexcept : filename{filename_}, frame{frame_}, rotated{rotated_}, trimmed{trimmed_}, spriteSourceSize{spriteSourceSize_}, sourceSize{sourceSize_}, pivot{pivot_} {}
    // Creating interface conversion operator: operator System::ValueType
    operator System::ValueType() noexcept {
      return *reinterpret_cast<System::ValueType*>(this);
    }
  }; // TMPro.SpriteAssetUtilities.TexturePacker/SpriteData
  #pragma pack(pop)
  static check_size<sizeof(TexturePacker::SpriteData), 52 + sizeof(UnityEngine::Vector2)> __TMPro_SpriteAssetUtilities_TexturePacker_SpriteDataSizeCheck;
  static_assert(sizeof(TexturePacker::SpriteData) == 0x3C);
}
#include "extern/beatsaber-hook/shared/utils/il2cpp-type-check.hpp"
DEFINE_IL2CPP_ARG_TYPE(TMPro::SpriteAssetUtilities::TexturePacker::SpriteData, "TMPro.SpriteAssetUtilities", "TexturePacker/SpriteData");
