// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.UI.MaskableGraphic
#include "UnityEngine/UI/MaskableGraphic.hpp"
// Including type: TMPro.MaterialReference
#include "TMPro/MaterialReference.hpp"
// Including type: TMPro.TMP_RichTextTagStack`1
#include "TMPro/TMP_RichTextTagStack_1.hpp"
// Including type: TMPro.ColorMode
#include "TMPro/ColorMode.hpp"
// Including type: TMPro.VertexGradient
#include "TMPro/VertexGradient.hpp"
// Including type: TMPro.FontWeight
#include "TMPro/FontWeight.hpp"
// Including type: TMPro.FontStyles
#include "TMPro/FontStyles.hpp"
// Including type: TMPro.TMP_FontStyleStack
#include "TMPro/TMP_FontStyleStack.hpp"
// Including type: TMPro.TextAlignmentOptions
#include "TMPro/TextAlignmentOptions.hpp"
// Including type: TMPro.TextOverflowModes
#include "TMPro/TextOverflowModes.hpp"
// Including type: TMPro.TextureMappingOptions
#include "TMPro/TextureMappingOptions.hpp"
// Including type: TMPro.TextRenderFlags
#include "TMPro/TextRenderFlags.hpp"
// Including type: TMPro.VertexSortingOrder
#include "TMPro/VertexSortingOrder.hpp"
// Including type: TMPro.RichTextTagAttribute
#include "TMPro/RichTextTagAttribute.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: TMPro.TMP_CharacterInfo
#include "TMPro/TMP_CharacterInfo.hpp"
// Including type: TMPro.WordWrapState
#include "TMPro/WordWrapState.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TMP_Character
  class TMP_Character;
  // Forward declaring type: TMP_TextElement
  class TMP_TextElement;
  // Forward declaring type: TMP_FontAsset
  class TMP_FontAsset;
  // Forward declaring type: TMP_ColorGradient
  class TMP_ColorGradient;
  // Forward declaring type: TMP_SpriteAsset
  class TMP_SpriteAsset;
  // Forward declaring type: TMP_TextInfo
  class TMP_TextInfo;
  // Forward declaring type: TMP_SpriteAnimator
  class TMP_SpriteAnimator;
  // Forward declaring type: TMP_VertexDataUpdateFlags
  struct TMP_VertexDataUpdateFlags;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Bounds
  struct Bounds;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: LayoutElement
  class LayoutElement;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: TMPro
namespace TMPro {
  // WARNING Size may be invalid!
  // Autogenerated type: TMPro.TMP_Text
  // [] Offset: FFFFFFFF
  class TMP_Text : public UnityEngine::UI::MaskableGraphic {
    public:
    // Nested type: TMPro::TMP_Text::TextInputSources
    struct TextInputSources;
    // Nested type: TMPro::TMP_Text::UnicodeChar
    struct UnicodeChar;
    // Size: 0x4
    #pragma pack(push, 1)
    // Autogenerated type: TMPro.TMP_Text/TextInputSources
    // [] Offset: FFFFFFFF
    struct TextInputSources/*, public System::Enum*/ {
      public:
      // public System.Int32 value__
      // Size: 0x4
      // Offset: 0x0
      int value;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: TextInputSources
      constexpr TextInputSources(int value_ = {}) noexcept : value{value_} {}
      // Creating interface conversion operator: operator System::Enum
      operator System::Enum() noexcept {
        return *reinterpret_cast<System::Enum*>(this);
      }
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public TMPro.TMP_Text/TextInputSources Text
      static constexpr const int Text = 0;
      // Get static field: static public TMPro.TMP_Text/TextInputSources Text
      static TMPro::TMP_Text::TextInputSources _get_Text();
      // Set static field: static public TMPro.TMP_Text/TextInputSources Text
      static void _set_Text(TMPro::TMP_Text::TextInputSources value);
      // static field const value: static public TMPro.TMP_Text/TextInputSources SetText
      static constexpr const int SetText = 1;
      // Get static field: static public TMPro.TMP_Text/TextInputSources SetText
      static TMPro::TMP_Text::TextInputSources _get_SetText();
      // Set static field: static public TMPro.TMP_Text/TextInputSources SetText
      static void _set_SetText(TMPro::TMP_Text::TextInputSources value);
      // static field const value: static public TMPro.TMP_Text/TextInputSources SetCharArray
      static constexpr const int SetCharArray = 2;
      // Get static field: static public TMPro.TMP_Text/TextInputSources SetCharArray
      static TMPro::TMP_Text::TextInputSources _get_SetCharArray();
      // Set static field: static public TMPro.TMP_Text/TextInputSources SetCharArray
      static void _set_SetCharArray(TMPro::TMP_Text::TextInputSources value);
      // static field const value: static public TMPro.TMP_Text/TextInputSources String
      static constexpr const int String = 3;
      // Get static field: static public TMPro.TMP_Text/TextInputSources String
      static TMPro::TMP_Text::TextInputSources _get_String();
      // Set static field: static public TMPro.TMP_Text/TextInputSources String
      static void _set_String(TMPro::TMP_Text::TextInputSources value);
    }; // TMPro.TMP_Text/TextInputSources
    #pragma pack(pop)
    static check_size<sizeof(TMP_Text::TextInputSources), 0 + sizeof(int)> __TMPro_TMP_Text_TextInputSourcesSizeCheck;
    static_assert(sizeof(TMP_Text::TextInputSources) == 0x4);
    // Size: 0xC
    #pragma pack(push, 1)
    // WARNING Layout: Sequential may not be correctly taken into account!
    // Autogenerated type: TMPro.TMP_Text/UnicodeChar
    // [] Offset: FFFFFFFF
    struct UnicodeChar/*, public System::ValueType*/ {
      public:
      // public System.Int32 unicode
      // Size: 0x4
      // Offset: 0x0
      int unicode;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 stringIndex
      // Size: 0x4
      // Offset: 0x4
      int stringIndex;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // public System.Int32 length
      // Size: 0x4
      // Offset: 0x8
      int length;
      // Field size check
      static_assert(sizeof(int) == 0x4);
      // Creating value type constructor for type: UnicodeChar
      constexpr UnicodeChar(int unicode_ = {}, int stringIndex_ = {}, int length_ = {}) noexcept : unicode{unicode_}, stringIndex{stringIndex_}, length{length_} {}
      // Creating interface conversion operator: operator System::ValueType
      operator System::ValueType() noexcept {
        return *reinterpret_cast<System::ValueType*>(this);
      }
    }; // TMPro.TMP_Text/UnicodeChar
    #pragma pack(pop)
    static check_size<sizeof(TMP_Text::UnicodeChar), 8 + sizeof(int)> __TMPro_TMP_Text_UnicodeCharSizeCheck;
    static_assert(sizeof(TMP_Text::UnicodeChar) == 0xC);
    // [TextAreaAttribute] Offset: 0xCFDE10
    // protected System.String m_text
    // Size: 0x8
    // Offset: 0xC0
    ::Il2CppString* m_text;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // protected System.Boolean m_isRightToLeft
    // Size: 0x1
    // Offset: 0xC8
    bool m_isRightToLeft;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected TMPro.TMP_FontAsset m_fontAsset
    // Size: 0x8
    // Offset: 0xD0
    TMPro::TMP_FontAsset* m_fontAsset;
    // Field size check
    static_assert(sizeof(TMPro::TMP_FontAsset*) == 0x8);
    // protected TMPro.TMP_FontAsset m_currentFontAsset
    // Size: 0x8
    // Offset: 0xD8
    TMPro::TMP_FontAsset* m_currentFontAsset;
    // Field size check
    static_assert(sizeof(TMPro::TMP_FontAsset*) == 0x8);
    // protected System.Boolean m_isSDFShader
    // Size: 0x1
    // Offset: 0xE0
    bool m_isSDFShader;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected UnityEngine.Material m_sharedMaterial
    // Size: 0x8
    // Offset: 0xE8
    UnityEngine::Material* m_sharedMaterial;
    // Field size check
    static_assert(sizeof(UnityEngine::Material*) == 0x8);
    // protected UnityEngine.Material m_currentMaterial
    // Size: 0x8
    // Offset: 0xF0
    UnityEngine::Material* m_currentMaterial;
    // Field size check
    static_assert(sizeof(UnityEngine::Material*) == 0x8);
    // protected TMPro.MaterialReference[] m_materialReferences
    // Size: 0x8
    // Offset: 0xF8
    ::Array<TMPro::MaterialReference>* m_materialReferences;
    // Field size check
    static_assert(sizeof(::Array<TMPro::MaterialReference>*) == 0x8);
    // protected System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> m_materialReferenceIndexLookup
    // Size: 0x8
    // Offset: 0x100
    System::Collections::Generic::Dictionary_2<int, int>* m_materialReferenceIndexLookup;
    // Field size check
    static_assert(sizeof(System::Collections::Generic::Dictionary_2<int, int>*) == 0x8);
    // protected TMPro.TMP_RichTextTagStack`1<TMPro.MaterialReference> m_materialReferenceStack
    // Size: 0xFFFFFFFF
    // Offset: 0x108
    TMPro::TMP_RichTextTagStack_1<TMPro::MaterialReference> m_materialReferenceStack;
    // protected System.Int32 m_currentMaterialIndex
    // Size: 0x4
    // Offset: 0x150
    int m_currentMaterialIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected UnityEngine.Material[] m_fontSharedMaterials
    // Size: 0x8
    // Offset: 0x158
    ::Array<UnityEngine::Material*>* m_fontSharedMaterials;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Material*>*) == 0x8);
    // protected UnityEngine.Material m_fontMaterial
    // Size: 0x8
    // Offset: 0x160
    UnityEngine::Material* m_fontMaterial;
    // Field size check
    static_assert(sizeof(UnityEngine::Material*) == 0x8);
    // protected UnityEngine.Material[] m_fontMaterials
    // Size: 0x8
    // Offset: 0x168
    ::Array<UnityEngine::Material*>* m_fontMaterials;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Material*>*) == 0x8);
    // protected System.Boolean m_isMaterialDirty
    // Size: 0x1
    // Offset: 0x170
    bool m_isMaterialDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected UnityEngine.Color32 m_fontColor32
    // Size: 0x4
    // Offset: 0x174
    UnityEngine::Color32 m_fontColor32;
    // Field size check
    static_assert(sizeof(UnityEngine::Color32) == 0x4);
    // protected UnityEngine.Color m_fontColor
    // Size: 0x10
    // Offset: 0x178
    UnityEngine::Color m_fontColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color) == 0x10);
    // protected UnityEngine.Color32 m_underlineColor
    // Size: 0x4
    // Offset: 0x188
    UnityEngine::Color32 m_underlineColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color32) == 0x4);
    // protected UnityEngine.Color32 m_strikethroughColor
    // Size: 0x4
    // Offset: 0x18C
    UnityEngine::Color32 m_strikethroughColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color32) == 0x4);
    // protected UnityEngine.Color32 m_highlightColor
    // Size: 0x4
    // Offset: 0x190
    UnityEngine::Color32 m_highlightColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color32) == 0x4);
    // protected UnityEngine.Vector4 m_highlightPadding
    // Size: 0x10
    // Offset: 0x194
    UnityEngine::Vector4 m_highlightPadding;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector4) == 0x10);
    // protected System.Boolean m_enableVertexGradient
    // Size: 0x1
    // Offset: 0x1A4
    bool m_enableVertexGradient;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected TMPro.ColorMode m_colorMode
    // Size: 0x4
    // Offset: 0x1A8
    TMPro::ColorMode m_colorMode;
    // Field size check
    static_assert(sizeof(TMPro::ColorMode) == 0x4);
    // protected TMPro.VertexGradient m_fontColorGradient
    // Size: 0x40
    // Offset: 0x1AC
    TMPro::VertexGradient m_fontColorGradient;
    // Field size check
    static_assert(sizeof(TMPro::VertexGradient) == 0x40);
    // protected TMPro.TMP_ColorGradient m_fontColorGradientPreset
    // Size: 0x8
    // Offset: 0x1F0
    TMPro::TMP_ColorGradient* m_fontColorGradientPreset;
    // Field size check
    static_assert(sizeof(TMPro::TMP_ColorGradient*) == 0x8);
    // protected TMPro.TMP_SpriteAsset m_spriteAsset
    // Size: 0x8
    // Offset: 0x1F8
    TMPro::TMP_SpriteAsset* m_spriteAsset;
    // Field size check
    static_assert(sizeof(TMPro::TMP_SpriteAsset*) == 0x8);
    // protected System.Boolean m_tintAllSprites
    // Size: 0x1
    // Offset: 0x200
    bool m_tintAllSprites;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_tintSprite
    // Size: 0x1
    // Offset: 0x201
    bool m_tintSprite;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected UnityEngine.Color32 m_spriteColor
    // Size: 0x4
    // Offset: 0x204
    UnityEngine::Color32 m_spriteColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color32) == 0x4);
    // protected System.Boolean m_overrideHtmlColors
    // Size: 0x1
    // Offset: 0x208
    bool m_overrideHtmlColors;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected UnityEngine.Color32 m_faceColor
    // Size: 0x4
    // Offset: 0x20C
    UnityEngine::Color32 m_faceColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color32) == 0x4);
    // protected UnityEngine.Color32 m_outlineColor
    // Size: 0x4
    // Offset: 0x210
    UnityEngine::Color32 m_outlineColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color32) == 0x4);
    // protected System.Single m_outlineWidth
    // Size: 0x4
    // Offset: 0x214
    float m_outlineWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_fontSize
    // Size: 0x4
    // Offset: 0x218
    float m_fontSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_currentFontSize
    // Size: 0x4
    // Offset: 0x21C
    float m_currentFontSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_fontSizeBase
    // Size: 0x4
    // Offset: 0x220
    float m_fontSizeBase;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected TMPro.TMP_RichTextTagStack`1<System.Single> m_sizeStack
    // Size: 0xFFFFFFFF
    // Offset: 0x228
    TMPro::TMP_RichTextTagStack_1<float> m_sizeStack;
    // protected TMPro.FontWeight m_fontWeight
    // Size: 0x4
    // Offset: 0x240
    TMPro::FontWeight m_fontWeight;
    // Field size check
    static_assert(sizeof(TMPro::FontWeight) == 0x4);
    // protected TMPro.FontWeight m_FontWeightInternal
    // Size: 0x4
    // Offset: 0x244
    TMPro::FontWeight m_FontWeightInternal;
    // Field size check
    static_assert(sizeof(TMPro::FontWeight) == 0x4);
    // protected TMPro.TMP_RichTextTagStack`1<TMPro.FontWeight> m_FontWeightStack
    // Size: 0xFFFFFFFF
    // Offset: 0x248
    TMPro::TMP_RichTextTagStack_1<TMPro::FontWeight> m_FontWeightStack;
    // protected System.Boolean m_enableAutoSizing
    // Size: 0x1
    // Offset: 0x260
    bool m_enableAutoSizing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Single m_maxFontSize
    // Size: 0x4
    // Offset: 0x264
    float m_maxFontSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_minFontSize
    // Size: 0x4
    // Offset: 0x268
    float m_minFontSize;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_fontSizeMin
    // Size: 0x4
    // Offset: 0x26C
    float m_fontSizeMin;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_fontSizeMax
    // Size: 0x4
    // Offset: 0x270
    float m_fontSizeMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected TMPro.FontStyles m_fontStyle
    // Size: 0x4
    // Offset: 0x274
    TMPro::FontStyles m_fontStyle;
    // Field size check
    static_assert(sizeof(TMPro::FontStyles) == 0x4);
    // protected TMPro.FontStyles m_FontStyleInternal
    // Size: 0x4
    // Offset: 0x278
    TMPro::FontStyles m_FontStyleInternal;
    // Field size check
    static_assert(sizeof(TMPro::FontStyles) == 0x4);
    // protected TMPro.TMP_FontStyleStack m_fontStyleStack
    // Size: 0xA
    // Offset: 0x27C
    TMPro::TMP_FontStyleStack m_fontStyleStack;
    // Field size check
    static_assert(sizeof(TMPro::TMP_FontStyleStack) == 0xA);
    // protected System.Boolean m_isUsingBold
    // Size: 0x1
    // Offset: 0x286
    bool m_isUsingBold;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // [FormerlySerializedAsAttribute] Offset: 0xCFDFD0
    // protected TMPro.TextAlignmentOptions m_textAlignment
    // Size: 0x4
    // Offset: 0x288
    TMPro::TextAlignmentOptions m_textAlignment;
    // Field size check
    static_assert(sizeof(TMPro::TextAlignmentOptions) == 0x4);
    // protected TMPro.TextAlignmentOptions m_lineJustification
    // Size: 0x4
    // Offset: 0x28C
    TMPro::TextAlignmentOptions m_lineJustification;
    // Field size check
    static_assert(sizeof(TMPro::TextAlignmentOptions) == 0x4);
    // protected TMPro.TMP_RichTextTagStack`1<TMPro.TextAlignmentOptions> m_lineJustificationStack
    // Size: 0xFFFFFFFF
    // Offset: 0x290
    TMPro::TMP_RichTextTagStack_1<TMPro::TextAlignmentOptions> m_lineJustificationStack;
    // protected UnityEngine.Vector3[] m_textContainerLocalCorners
    // Size: 0x8
    // Offset: 0x2A8
    ::Array<UnityEngine::Vector3>* m_textContainerLocalCorners;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Vector3>*) == 0x8);
    // protected System.Single m_characterSpacing
    // Size: 0x4
    // Offset: 0x2B0
    float m_characterSpacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_cSpacing
    // Size: 0x4
    // Offset: 0x2B4
    float m_cSpacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_monoSpacing
    // Size: 0x4
    // Offset: 0x2B8
    float m_monoSpacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_wordSpacing
    // Size: 0x4
    // Offset: 0x2BC
    float m_wordSpacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_lineSpacing
    // Size: 0x4
    // Offset: 0x2C0
    float m_lineSpacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_lineSpacingDelta
    // Size: 0x4
    // Offset: 0x2C4
    float m_lineSpacingDelta;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_lineHeight
    // Size: 0x4
    // Offset: 0x2C8
    float m_lineHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_lineSpacingMax
    // Size: 0x4
    // Offset: 0x2CC
    float m_lineSpacingMax;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_paragraphSpacing
    // Size: 0x4
    // Offset: 0x2D0
    float m_paragraphSpacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_charWidthMaxAdj
    // Size: 0x4
    // Offset: 0x2D4
    float m_charWidthMaxAdj;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_charWidthAdjDelta
    // Size: 0x4
    // Offset: 0x2D8
    float m_charWidthAdjDelta;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Boolean m_enableWordWrapping
    // Size: 0x1
    // Offset: 0x2DC
    bool m_enableWordWrapping;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isCharacterWrappingEnabled
    // Size: 0x1
    // Offset: 0x2DD
    bool m_isCharacterWrappingEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isNonBreakingSpace
    // Size: 0x1
    // Offset: 0x2DE
    bool m_isNonBreakingSpace;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isIgnoringAlignment
    // Size: 0x1
    // Offset: 0x2DF
    bool m_isIgnoringAlignment;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Single m_wordWrappingRatios
    // Size: 0x4
    // Offset: 0x2E0
    float m_wordWrappingRatios;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected TMPro.TextOverflowModes m_overflowMode
    // Size: 0x4
    // Offset: 0x2E4
    TMPro::TextOverflowModes m_overflowMode;
    // Field size check
    static_assert(sizeof(TMPro::TextOverflowModes) == 0x4);
    // protected System.Int32 m_firstOverflowCharacterIndex
    // Size: 0x4
    // Offset: 0x2E8
    int m_firstOverflowCharacterIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected TMPro.TMP_Text m_linkedTextComponent
    // Size: 0x8
    // Offset: 0x2F0
    TMPro::TMP_Text* m_linkedTextComponent;
    // Field size check
    static_assert(sizeof(TMPro::TMP_Text*) == 0x8);
    // protected System.Boolean m_isLinkedTextComponent
    // Size: 0x1
    // Offset: 0x2F8
    bool m_isLinkedTextComponent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isTextTruncated
    // Size: 0x1
    // Offset: 0x2F9
    bool m_isTextTruncated;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_enableKerning
    // Size: 0x1
    // Offset: 0x2FA
    bool m_enableKerning;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_enableExtraPadding
    // Size: 0x1
    // Offset: 0x2FB
    bool m_enableExtraPadding;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean checkPaddingRequired
    // Size: 0x1
    // Offset: 0x2FC
    bool checkPaddingRequired;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isRichText
    // Size: 0x1
    // Offset: 0x2FD
    bool m_isRichText;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_parseCtrlCharacters
    // Size: 0x1
    // Offset: 0x2FE
    bool m_parseCtrlCharacters;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isOverlay
    // Size: 0x1
    // Offset: 0x2FF
    bool m_isOverlay;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isOrthographic
    // Size: 0x1
    // Offset: 0x300
    bool m_isOrthographic;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isCullingEnabled
    // Size: 0x1
    // Offset: 0x301
    bool m_isCullingEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_ignoreRectMaskCulling
    // Size: 0x1
    // Offset: 0x302
    bool m_ignoreRectMaskCulling;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_ignoreCulling
    // Size: 0x1
    // Offset: 0x303
    bool m_ignoreCulling;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected TMPro.TextureMappingOptions m_horizontalMapping
    // Size: 0x4
    // Offset: 0x304
    TMPro::TextureMappingOptions m_horizontalMapping;
    // Field size check
    static_assert(sizeof(TMPro::TextureMappingOptions) == 0x4);
    // protected TMPro.TextureMappingOptions m_verticalMapping
    // Size: 0x4
    // Offset: 0x308
    TMPro::TextureMappingOptions m_verticalMapping;
    // Field size check
    static_assert(sizeof(TMPro::TextureMappingOptions) == 0x4);
    // protected System.Single m_uvLineOffset
    // Size: 0x4
    // Offset: 0x30C
    float m_uvLineOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected TMPro.TextRenderFlags m_renderMode
    // Size: 0x4
    // Offset: 0x310
    TMPro::TextRenderFlags m_renderMode;
    // Field size check
    static_assert(sizeof(TMPro::TextRenderFlags) == 0x4);
    // protected TMPro.VertexSortingOrder m_geometrySortingOrder
    // Size: 0x4
    // Offset: 0x314
    TMPro::VertexSortingOrder m_geometrySortingOrder;
    // Field size check
    static_assert(sizeof(TMPro::VertexSortingOrder) == 0x4);
    // protected System.Boolean m_VertexBufferAutoSizeReduction
    // Size: 0x1
    // Offset: 0x318
    bool m_VertexBufferAutoSizeReduction;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Int32 m_firstVisibleCharacter
    // Size: 0x4
    // Offset: 0x31C
    int m_firstVisibleCharacter;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_maxVisibleCharacters
    // Size: 0x4
    // Offset: 0x320
    int m_maxVisibleCharacters;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_maxVisibleWords
    // Size: 0x4
    // Offset: 0x324
    int m_maxVisibleWords;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_maxVisibleLines
    // Size: 0x4
    // Offset: 0x328
    int m_maxVisibleLines;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Boolean m_useMaxVisibleDescender
    // Size: 0x1
    // Offset: 0x32C
    bool m_useMaxVisibleDescender;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Int32 m_pageToDisplay
    // Size: 0x4
    // Offset: 0x330
    int m_pageToDisplay;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Boolean m_isNewPage
    // Size: 0x1
    // Offset: 0x334
    bool m_isNewPage;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected UnityEngine.Vector4 m_margin
    // Size: 0x10
    // Offset: 0x338
    UnityEngine::Vector4 m_margin;
    // Field size check
    static_assert(sizeof(UnityEngine::Vector4) == 0x10);
    // protected System.Single m_marginLeft
    // Size: 0x4
    // Offset: 0x348
    float m_marginLeft;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_marginRight
    // Size: 0x4
    // Offset: 0x34C
    float m_marginRight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_marginWidth
    // Size: 0x4
    // Offset: 0x350
    float m_marginWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_marginHeight
    // Size: 0x4
    // Offset: 0x354
    float m_marginHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_width
    // Size: 0x4
    // Offset: 0x358
    float m_width;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected TMPro.TMP_TextInfo m_textInfo
    // Size: 0x8
    // Offset: 0x360
    TMPro::TMP_TextInfo* m_textInfo;
    // Field size check
    static_assert(sizeof(TMPro::TMP_TextInfo*) == 0x8);
    // protected System.Boolean m_havePropertiesChanged
    // Size: 0x1
    // Offset: 0x368
    bool m_havePropertiesChanged;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isUsingLegacyAnimationComponent
    // Size: 0x1
    // Offset: 0x369
    bool m_isUsingLegacyAnimationComponent;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected UnityEngine.Transform m_transform
    // Size: 0x8
    // Offset: 0x370
    UnityEngine::Transform* m_transform;
    // Field size check
    static_assert(sizeof(UnityEngine::Transform*) == 0x8);
    // protected UnityEngine.RectTransform m_rectTransform
    // Size: 0x8
    // Offset: 0x378
    UnityEngine::RectTransform* m_rectTransform;
    // Field size check
    static_assert(sizeof(UnityEngine::RectTransform*) == 0x8);
    // [CompilerGeneratedAttribute] Offset: 0xCFE22C
    // private System.Boolean <autoSizeTextContainer>k__BackingField
    // Size: 0x1
    // Offset: 0x380
    bool autoSizeTextContainer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_autoSizeTextContainer
    // Size: 0x1
    // Offset: 0x381
    bool m_autoSizeTextContainer;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected UnityEngine.Mesh m_mesh
    // Size: 0x8
    // Offset: 0x388
    UnityEngine::Mesh* m_mesh;
    // Field size check
    static_assert(sizeof(UnityEngine::Mesh*) == 0x8);
    // protected System.Boolean m_isVolumetricText
    // Size: 0x1
    // Offset: 0x390
    bool m_isVolumetricText;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected TMPro.TMP_SpriteAnimator m_spriteAnimator
    // Size: 0x8
    // Offset: 0x398
    TMPro::TMP_SpriteAnimator* m_spriteAnimator;
    // Field size check
    static_assert(sizeof(TMPro::TMP_SpriteAnimator*) == 0x8);
    // protected System.Single m_flexibleHeight
    // Size: 0x4
    // Offset: 0x3A0
    float m_flexibleHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_flexibleWidth
    // Size: 0x4
    // Offset: 0x3A4
    float m_flexibleWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_minWidth
    // Size: 0x4
    // Offset: 0x3A8
    float m_minWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_minHeight
    // Size: 0x4
    // Offset: 0x3AC
    float m_minHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_maxWidth
    // Size: 0x4
    // Offset: 0x3B0
    float m_maxWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_maxHeight
    // Size: 0x4
    // Offset: 0x3B4
    float m_maxHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected UnityEngine.UI.LayoutElement m_LayoutElement
    // Size: 0x8
    // Offset: 0x3B8
    UnityEngine::UI::LayoutElement* m_LayoutElement;
    // Field size check
    static_assert(sizeof(UnityEngine::UI::LayoutElement*) == 0x8);
    // protected System.Single m_preferredWidth
    // Size: 0x4
    // Offset: 0x3C0
    float m_preferredWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_renderedWidth
    // Size: 0x4
    // Offset: 0x3C4
    float m_renderedWidth;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Boolean m_isPreferredWidthDirty
    // Size: 0x1
    // Offset: 0x3C8
    bool m_isPreferredWidthDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Single m_preferredHeight
    // Size: 0x4
    // Offset: 0x3CC
    float m_preferredHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_renderedHeight
    // Size: 0x4
    // Offset: 0x3D0
    float m_renderedHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Boolean m_isPreferredHeightDirty
    // Size: 0x1
    // Offset: 0x3D4
    bool m_isPreferredHeightDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isCalculatingPreferredValues
    // Size: 0x1
    // Offset: 0x3D5
    bool m_isCalculatingPreferredValues;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 m_recursiveCount
    // Size: 0x4
    // Offset: 0x3D8
    int m_recursiveCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_layoutPriority
    // Size: 0x4
    // Offset: 0x3DC
    int m_layoutPriority;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Boolean m_isCalculateSizeRequired
    // Size: 0x1
    // Offset: 0x3E0
    bool m_isCalculateSizeRequired;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isLayoutDirty
    // Size: 0x1
    // Offset: 0x3E1
    bool m_isLayoutDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_verticesAlreadyDirty
    // Size: 0x1
    // Offset: 0x3E2
    bool m_verticesAlreadyDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_layoutAlreadyDirty
    // Size: 0x1
    // Offset: 0x3E3
    bool m_layoutAlreadyDirty;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isAwake
    // Size: 0x1
    // Offset: 0x3E4
    bool m_isAwake;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean m_isWaitingOnResourceLoad
    // Size: 0x1
    // Offset: 0x3E5
    bool m_isWaitingOnResourceLoad;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // System.Boolean m_isInputParsingRequired
    // Size: 0x1
    // Offset: 0x3E6
    bool m_isInputParsingRequired;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // TMPro.TMP_Text/TextInputSources m_inputSource
    // Size: 0x4
    // Offset: 0x3E8
    TMPro::TMP_Text::TextInputSources m_inputSource;
    // Field size check
    static_assert(sizeof(TMPro::TMP_Text::TextInputSources) == 0x4);
    // protected System.String old_text
    // Size: 0x8
    // Offset: 0x3F0
    ::Il2CppString* old_text;
    // Field size check
    static_assert(sizeof(::Il2CppString*) == 0x8);
    // protected System.Single m_fontScale
    // Size: 0x4
    // Offset: 0x3F8
    float m_fontScale;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_fontScaleMultiplier
    // Size: 0x4
    // Offset: 0x3FC
    float m_fontScaleMultiplier;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Char[] m_htmlTag
    // Size: 0x8
    // Offset: 0x400
    ::Array<::Il2CppChar>* m_htmlTag;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppChar>*) == 0x8);
    // protected TMPro.RichTextTagAttribute[] m_xmlAttribute
    // Size: 0x8
    // Offset: 0x408
    ::Array<TMPro::RichTextTagAttribute>* m_xmlAttribute;
    // Field size check
    static_assert(sizeof(::Array<TMPro::RichTextTagAttribute>*) == 0x8);
    // protected System.Single[] m_attributeParameterValues
    // Size: 0x8
    // Offset: 0x410
    ::Array<float>* m_attributeParameterValues;
    // Field size check
    static_assert(sizeof(::Array<float>*) == 0x8);
    // protected System.Single tag_LineIndent
    // Size: 0x4
    // Offset: 0x418
    float tag_LineIndent;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single tag_Indent
    // Size: 0x4
    // Offset: 0x41C
    float tag_Indent;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected TMPro.TMP_RichTextTagStack`1<System.Single> m_indentStack
    // Size: 0xFFFFFFFF
    // Offset: 0x420
    TMPro::TMP_RichTextTagStack_1<float> m_indentStack;
    // protected System.Boolean tag_NoParsing
    // Size: 0x1
    // Offset: 0x438
    bool tag_NoParsing;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected System.Boolean m_isParsingText
    // Size: 0x1
    // Offset: 0x439
    bool m_isParsingText;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected UnityEngine.Matrix4x4 m_FXMatrix
    // Size: 0x40
    // Offset: 0x43C
    UnityEngine::Matrix4x4 m_FXMatrix;
    // Field size check
    static_assert(sizeof(UnityEngine::Matrix4x4) == 0x40);
    // protected System.Boolean m_isFXMatrixSet
    // Size: 0x1
    // Offset: 0x47C
    bool m_isFXMatrixSet;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // protected TMPro.TMP_Text/UnicodeChar[] m_TextParsingBuffer
    // Size: 0x8
    // Offset: 0x480
    ::Array<TMPro::TMP_Text::UnicodeChar>* m_TextParsingBuffer;
    // Field size check
    static_assert(sizeof(::Array<TMPro::TMP_Text::UnicodeChar>*) == 0x8);
    // private TMPro.TMP_CharacterInfo[] m_internalCharacterInfo
    // Size: 0x8
    // Offset: 0x488
    ::Array<TMPro::TMP_CharacterInfo>* m_internalCharacterInfo;
    // Field size check
    static_assert(sizeof(::Array<TMPro::TMP_CharacterInfo>*) == 0x8);
    // protected System.Char[] m_input_CharArray
    // Size: 0x8
    // Offset: 0x490
    ::Array<::Il2CppChar>* m_input_CharArray;
    // Field size check
    static_assert(sizeof(::Array<::Il2CppChar>*) == 0x8);
    // private System.Int32 m_charArray_Length
    // Size: 0x4
    // Offset: 0x498
    int m_charArray_Length;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_totalCharacterCount
    // Size: 0x4
    // Offset: 0x49C
    int m_totalCharacterCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected TMPro.WordWrapState m_SavedWordWrapState
    // Size: 0xFFFFFFFF
    // Offset: 0x4A0
    TMPro::WordWrapState m_SavedWordWrapState;
    // protected TMPro.WordWrapState m_SavedLineState
    // Size: 0xFFFFFFFF
    // Offset: 0x730
    TMPro::WordWrapState m_SavedLineState;
    // protected System.Int32 m_characterCount
    // Size: 0x4
    // Offset: 0x9C0
    int m_characterCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_firstCharacterOfLine
    // Size: 0x4
    // Offset: 0x9C4
    int m_firstCharacterOfLine;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_firstVisibleCharacterOfLine
    // Size: 0x4
    // Offset: 0x9C8
    int m_firstVisibleCharacterOfLine;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_lastCharacterOfLine
    // Size: 0x4
    // Offset: 0x9CC
    int m_lastCharacterOfLine;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_lastVisibleCharacterOfLine
    // Size: 0x4
    // Offset: 0x9D0
    int m_lastVisibleCharacterOfLine;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_lineNumber
    // Size: 0x4
    // Offset: 0x9D4
    int m_lineNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_lineVisibleCharacterCount
    // Size: 0x4
    // Offset: 0x9D8
    int m_lineVisibleCharacterCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_pageNumber
    // Size: 0x4
    // Offset: 0x9DC
    int m_pageNumber;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Single m_maxAscender
    // Size: 0x4
    // Offset: 0x9E0
    float m_maxAscender;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_maxCapHeight
    // Size: 0x4
    // Offset: 0x9E4
    float m_maxCapHeight;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_maxDescender
    // Size: 0x4
    // Offset: 0x9E8
    float m_maxDescender;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_maxLineAscender
    // Size: 0x4
    // Offset: 0x9EC
    float m_maxLineAscender;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_maxLineDescender
    // Size: 0x4
    // Offset: 0x9F0
    float m_maxLineDescender;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_startOfLineAscender
    // Size: 0x4
    // Offset: 0x9F4
    float m_startOfLineAscender;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_lineOffset
    // Size: 0x4
    // Offset: 0x9F8
    float m_lineOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected TMPro.Extents m_meshExtents
    // Size: 0x10
    // Offset: 0x9FC
    TMPro::Extents m_meshExtents;
    // Field size check
    static_assert(sizeof(TMPro::Extents) == 0x10);
    // protected UnityEngine.Color32 m_htmlColor
    // Size: 0x4
    // Offset: 0xA0C
    UnityEngine::Color32 m_htmlColor;
    // Field size check
    static_assert(sizeof(UnityEngine::Color32) == 0x4);
    // protected TMPro.TMP_RichTextTagStack`1<UnityEngine.Color32> m_colorStack
    // Size: 0xFFFFFFFF
    // Offset: 0xA10
    TMPro::TMP_RichTextTagStack_1<UnityEngine::Color32> m_colorStack;
    // protected TMPro.TMP_RichTextTagStack`1<UnityEngine.Color32> m_underlineColorStack
    // Size: 0xFFFFFFFF
    // Offset: 0xA28
    TMPro::TMP_RichTextTagStack_1<UnityEngine::Color32> m_underlineColorStack;
    // protected TMPro.TMP_RichTextTagStack`1<UnityEngine.Color32> m_strikethroughColorStack
    // Size: 0xFFFFFFFF
    // Offset: 0xA40
    TMPro::TMP_RichTextTagStack_1<UnityEngine::Color32> m_strikethroughColorStack;
    // protected TMPro.TMP_RichTextTagStack`1<UnityEngine.Color32> m_highlightColorStack
    // Size: 0xFFFFFFFF
    // Offset: 0xA58
    TMPro::TMP_RichTextTagStack_1<UnityEngine::Color32> m_highlightColorStack;
    // protected TMPro.TMP_ColorGradient m_colorGradientPreset
    // Size: 0x8
    // Offset: 0xA70
    TMPro::TMP_ColorGradient* m_colorGradientPreset;
    // Field size check
    static_assert(sizeof(TMPro::TMP_ColorGradient*) == 0x8);
    // protected TMPro.TMP_RichTextTagStack`1<TMPro.TMP_ColorGradient> m_colorGradientStack
    // Size: 0xFFFFFFFF
    // Offset: 0xA78
    TMPro::TMP_RichTextTagStack_1<TMPro::TMP_ColorGradient*> m_colorGradientStack;
    // protected System.Single m_tabSpacing
    // Size: 0x4
    // Offset: 0xA90
    float m_tabSpacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_spacing
    // Size: 0x4
    // Offset: 0xA94
    float m_spacing;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected TMPro.TMP_RichTextTagStack`1<System.Int32> m_styleStack
    // Size: 0xFFFFFFFF
    // Offset: 0xA98
    TMPro::TMP_RichTextTagStack_1<int> m_styleStack;
    // protected TMPro.TMP_RichTextTagStack`1<System.Int32> m_actionStack
    // Size: 0xFFFFFFFF
    // Offset: 0xAB0
    TMPro::TMP_RichTextTagStack_1<int> m_actionStack;
    // protected System.Single m_padding
    // Size: 0x4
    // Offset: 0xAC8
    float m_padding;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected System.Single m_baselineOffset
    // Size: 0x4
    // Offset: 0xACC
    float m_baselineOffset;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected TMPro.TMP_RichTextTagStack`1<System.Single> m_baselineOffsetStack
    // Size: 0xFFFFFFFF
    // Offset: 0xAD0
    TMPro::TMP_RichTextTagStack_1<float> m_baselineOffsetStack;
    // protected System.Single m_xAdvance
    // Size: 0x4
    // Offset: 0xAE8
    float m_xAdvance;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // protected TMPro.TMP_TextElementType m_textElementType
    // Size: 0x4
    // Offset: 0xAEC
    TMPro::TMP_TextElementType m_textElementType;
    // Field size check
    static_assert(sizeof(TMPro::TMP_TextElementType) == 0x4);
    // protected TMPro.TMP_TextElement m_cached_TextElement
    // Size: 0x8
    // Offset: 0xAF0
    TMPro::TMP_TextElement* m_cached_TextElement;
    // Field size check
    static_assert(sizeof(TMPro::TMP_TextElement*) == 0x8);
    // protected TMPro.TMP_Character m_cached_Underline_Character
    // Size: 0x8
    // Offset: 0xAF8
    TMPro::TMP_Character* m_cached_Underline_Character;
    // Field size check
    static_assert(sizeof(TMPro::TMP_Character*) == 0x8);
    // protected TMPro.TMP_Character m_cached_Ellipsis_Character
    // Size: 0x8
    // Offset: 0xB00
    TMPro::TMP_Character* m_cached_Ellipsis_Character;
    // Field size check
    static_assert(sizeof(TMPro::TMP_Character*) == 0x8);
    // protected TMPro.TMP_SpriteAsset m_defaultSpriteAsset
    // Size: 0x8
    // Offset: 0xB08
    TMPro::TMP_SpriteAsset* m_defaultSpriteAsset;
    // Field size check
    static_assert(sizeof(TMPro::TMP_SpriteAsset*) == 0x8);
    // protected TMPro.TMP_SpriteAsset m_currentSpriteAsset
    // Size: 0x8
    // Offset: 0xB10
    TMPro::TMP_SpriteAsset* m_currentSpriteAsset;
    // Field size check
    static_assert(sizeof(TMPro::TMP_SpriteAsset*) == 0x8);
    // protected System.Int32 m_spriteCount
    // Size: 0x4
    // Offset: 0xB18
    int m_spriteCount;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_spriteIndex
    // Size: 0x4
    // Offset: 0xB1C
    int m_spriteIndex;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Int32 m_spriteAnimationID
    // Size: 0x4
    // Offset: 0xB20
    int m_spriteAnimationID;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected System.Boolean m_ignoreActiveState
    // Size: 0x1
    // Offset: 0xB24
    bool m_ignoreActiveState;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private readonly System.Single[] k_Power
    // Size: 0x8
    // Offset: 0xB28
    ::Array<float>* k_Power;
    // Field size check
    static_assert(sizeof(::Array<float>*) == 0x8);
    // Creating value type constructor for type: TMP_Text
    TMP_Text(::Il2CppString* m_text_ = {}, bool m_isRightToLeft_ = {}, TMPro::TMP_FontAsset* m_fontAsset_ = {}, TMPro::TMP_FontAsset* m_currentFontAsset_ = {}, bool m_isSDFShader_ = {}, UnityEngine::Material* m_sharedMaterial_ = {}, UnityEngine::Material* m_currentMaterial_ = {}, ::Array<TMPro::MaterialReference>* m_materialReferences_ = {}, System::Collections::Generic::Dictionary_2<int, int>* m_materialReferenceIndexLookup_ = {}, TMPro::TMP_RichTextTagStack_1<TMPro::MaterialReference> m_materialReferenceStack_ = {}, int m_currentMaterialIndex_ = {}, ::Array<UnityEngine::Material*>* m_fontSharedMaterials_ = {}, UnityEngine::Material* m_fontMaterial_ = {}, ::Array<UnityEngine::Material*>* m_fontMaterials_ = {}, bool m_isMaterialDirty_ = {}, UnityEngine::Color32 m_fontColor32_ = {}, UnityEngine::Color m_fontColor_ = {}, UnityEngine::Color32 m_underlineColor_ = {}, UnityEngine::Color32 m_strikethroughColor_ = {}, UnityEngine::Color32 m_highlightColor_ = {}, UnityEngine::Vector4 m_highlightPadding_ = {}, bool m_enableVertexGradient_ = {}, TMPro::ColorMode m_colorMode_ = {}, TMPro::VertexGradient m_fontColorGradient_ = {}, TMPro::TMP_ColorGradient* m_fontColorGradientPreset_ = {}, TMPro::TMP_SpriteAsset* m_spriteAsset_ = {}, bool m_tintAllSprites_ = {}, bool m_tintSprite_ = {}, UnityEngine::Color32 m_spriteColor_ = {}, bool m_overrideHtmlColors_ = {}, UnityEngine::Color32 m_faceColor_ = {}, UnityEngine::Color32 m_outlineColor_ = {}, float m_outlineWidth_ = {}, float m_fontSize_ = {}, float m_currentFontSize_ = {}, float m_fontSizeBase_ = {}, TMPro::TMP_RichTextTagStack_1<float> m_sizeStack_ = {}, TMPro::FontWeight m_fontWeight_ = {}, TMPro::FontWeight m_FontWeightInternal_ = {}, TMPro::TMP_RichTextTagStack_1<TMPro::FontWeight> m_FontWeightStack_ = {}, bool m_enableAutoSizing_ = {}, float m_maxFontSize_ = {}, float m_minFontSize_ = {}, float m_fontSizeMin_ = {}, float m_fontSizeMax_ = {}, TMPro::FontStyles m_fontStyle_ = {}, TMPro::FontStyles m_FontStyleInternal_ = {}, TMPro::TMP_FontStyleStack m_fontStyleStack_ = {}, bool m_isUsingBold_ = {}, TMPro::TextAlignmentOptions m_textAlignment_ = {}, TMPro::TextAlignmentOptions m_lineJustification_ = {}, TMPro::TMP_RichTextTagStack_1<TMPro::TextAlignmentOptions> m_lineJustificationStack_ = {}, ::Array<UnityEngine::Vector3>* m_textContainerLocalCorners_ = {}, float m_characterSpacing_ = {}, float m_cSpacing_ = {}, float m_monoSpacing_ = {}, float m_wordSpacing_ = {}, float m_lineSpacing_ = {}, float m_lineSpacingDelta_ = {}, float m_lineHeight_ = {}, float m_lineSpacingMax_ = {}, float m_paragraphSpacing_ = {}, float m_charWidthMaxAdj_ = {}, float m_charWidthAdjDelta_ = {}, bool m_enableWordWrapping_ = {}, bool m_isCharacterWrappingEnabled_ = {}, bool m_isNonBreakingSpace_ = {}, bool m_isIgnoringAlignment_ = {}, float m_wordWrappingRatios_ = {}, TMPro::TextOverflowModes m_overflowMode_ = {}, int m_firstOverflowCharacterIndex_ = {}, TMPro::TMP_Text* m_linkedTextComponent_ = {}, bool m_isLinkedTextComponent_ = {}, bool m_isTextTruncated_ = {}, bool m_enableKerning_ = {}, bool m_enableExtraPadding_ = {}, bool checkPaddingRequired_ = {}, bool m_isRichText_ = {}, bool m_parseCtrlCharacters_ = {}, bool m_isOverlay_ = {}, bool m_isOrthographic_ = {}, bool m_isCullingEnabled_ = {}, bool m_ignoreRectMaskCulling_ = {}, bool m_ignoreCulling_ = {}, TMPro::TextureMappingOptions m_horizontalMapping_ = {}, TMPro::TextureMappingOptions m_verticalMapping_ = {}, float m_uvLineOffset_ = {}, TMPro::TextRenderFlags m_renderMode_ = {}, TMPro::VertexSortingOrder m_geometrySortingOrder_ = {}, bool m_VertexBufferAutoSizeReduction_ = {}, int m_firstVisibleCharacter_ = {}, int m_maxVisibleCharacters_ = {}, int m_maxVisibleWords_ = {}, int m_maxVisibleLines_ = {}, bool m_useMaxVisibleDescender_ = {}, int m_pageToDisplay_ = {}, bool m_isNewPage_ = {}, UnityEngine::Vector4 m_margin_ = {}, float m_marginLeft_ = {}, float m_marginRight_ = {}, float m_marginWidth_ = {}, float m_marginHeight_ = {}, float m_width_ = {}, TMPro::TMP_TextInfo* m_textInfo_ = {}, bool m_havePropertiesChanged_ = {}, bool m_isUsingLegacyAnimationComponent_ = {}, UnityEngine::Transform* m_transform_ = {}, UnityEngine::RectTransform* m_rectTransform_ = {}, bool autoSizeTextContainer_ = {}, bool m_autoSizeTextContainer_ = {}, UnityEngine::Mesh* m_mesh_ = {}, bool m_isVolumetricText_ = {}, TMPro::TMP_SpriteAnimator* m_spriteAnimator_ = {}, float m_flexibleHeight_ = {}, float m_flexibleWidth_ = {}, float m_minWidth_ = {}, float m_minHeight_ = {}, float m_maxWidth_ = {}, float m_maxHeight_ = {}, UnityEngine::UI::LayoutElement* m_LayoutElement_ = {}, float m_preferredWidth_ = {}, float m_renderedWidth_ = {}, bool m_isPreferredWidthDirty_ = {}, float m_preferredHeight_ = {}, float m_renderedHeight_ = {}, bool m_isPreferredHeightDirty_ = {}, bool m_isCalculatingPreferredValues_ = {}, int m_recursiveCount_ = {}, int m_layoutPriority_ = {}, bool m_isCalculateSizeRequired_ = {}, bool m_isLayoutDirty_ = {}, bool m_verticesAlreadyDirty_ = {}, bool m_layoutAlreadyDirty_ = {}, bool m_isAwake_ = {}, bool m_isWaitingOnResourceLoad_ = {}, bool m_isInputParsingRequired_ = {}, TMPro::TMP_Text::TextInputSources m_inputSource_ = {}, ::Il2CppString* old_text_ = {}, float m_fontScale_ = {}, float m_fontScaleMultiplier_ = {}, ::Array<::Il2CppChar>* m_htmlTag_ = {}, ::Array<TMPro::RichTextTagAttribute>* m_xmlAttribute_ = {}, ::Array<float>* m_attributeParameterValues_ = {}, float tag_LineIndent_ = {}, float tag_Indent_ = {}, TMPro::TMP_RichTextTagStack_1<float> m_indentStack_ = {}, bool tag_NoParsing_ = {}, bool m_isParsingText_ = {}, UnityEngine::Matrix4x4 m_FXMatrix_ = {}, bool m_isFXMatrixSet_ = {}, ::Array<TMPro::TMP_Text::UnicodeChar>* m_TextParsingBuffer_ = {}, ::Array<TMPro::TMP_CharacterInfo>* m_internalCharacterInfo_ = {}, ::Array<::Il2CppChar>* m_input_CharArray_ = {}, int m_charArray_Length_ = {}, int m_totalCharacterCount_ = {}, TMPro::WordWrapState m_SavedWordWrapState_ = {}, TMPro::WordWrapState m_SavedLineState_ = {}, int m_characterCount_ = {}, int m_firstCharacterOfLine_ = {}, int m_firstVisibleCharacterOfLine_ = {}, int m_lastCharacterOfLine_ = {}, int m_lastVisibleCharacterOfLine_ = {}, int m_lineNumber_ = {}, int m_lineVisibleCharacterCount_ = {}, int m_pageNumber_ = {}, float m_maxAscender_ = {}, float m_maxCapHeight_ = {}, float m_maxDescender_ = {}, float m_maxLineAscender_ = {}, float m_maxLineDescender_ = {}, float m_startOfLineAscender_ = {}, float m_lineOffset_ = {}, TMPro::Extents m_meshExtents_ = {}, UnityEngine::Color32 m_htmlColor_ = {}, TMPro::TMP_RichTextTagStack_1<UnityEngine::Color32> m_colorStack_ = {}, TMPro::TMP_RichTextTagStack_1<UnityEngine::Color32> m_underlineColorStack_ = {}, TMPro::TMP_RichTextTagStack_1<UnityEngine::Color32> m_strikethroughColorStack_ = {}, TMPro::TMP_RichTextTagStack_1<UnityEngine::Color32> m_highlightColorStack_ = {}, TMPro::TMP_ColorGradient* m_colorGradientPreset_ = {}, TMPro::TMP_RichTextTagStack_1<TMPro::TMP_ColorGradient*> m_colorGradientStack_ = {}, float m_tabSpacing_ = {}, float m_spacing_ = {}, TMPro::TMP_RichTextTagStack_1<int> m_styleStack_ = {}, TMPro::TMP_RichTextTagStack_1<int> m_actionStack_ = {}, float m_padding_ = {}, float m_baselineOffset_ = {}, TMPro::TMP_RichTextTagStack_1<float> m_baselineOffsetStack_ = {}, float m_xAdvance_ = {}, TMPro::TMP_TextElementType m_textElementType_ = {}, TMPro::TMP_TextElement* m_cached_TextElement_ = {}, TMPro::TMP_Character* m_cached_Underline_Character_ = {}, TMPro::TMP_Character* m_cached_Ellipsis_Character_ = {}, TMPro::TMP_SpriteAsset* m_defaultSpriteAsset_ = {}, TMPro::TMP_SpriteAsset* m_currentSpriteAsset_ = {}, int m_spriteCount_ = {}, int m_spriteIndex_ = {}, int m_spriteAnimationID_ = {}, bool m_ignoreActiveState_ = {}, ::Array<float>* k_Power_ = {}) noexcept : m_text{m_text_}, m_isRightToLeft{m_isRightToLeft_}, m_fontAsset{m_fontAsset_}, m_currentFontAsset{m_currentFontAsset_}, m_isSDFShader{m_isSDFShader_}, m_sharedMaterial{m_sharedMaterial_}, m_currentMaterial{m_currentMaterial_}, m_materialReferences{m_materialReferences_}, m_materialReferenceIndexLookup{m_materialReferenceIndexLookup_}, m_materialReferenceStack{m_materialReferenceStack_}, m_currentMaterialIndex{m_currentMaterialIndex_}, m_fontSharedMaterials{m_fontSharedMaterials_}, m_fontMaterial{m_fontMaterial_}, m_fontMaterials{m_fontMaterials_}, m_isMaterialDirty{m_isMaterialDirty_}, m_fontColor32{m_fontColor32_}, m_fontColor{m_fontColor_}, m_underlineColor{m_underlineColor_}, m_strikethroughColor{m_strikethroughColor_}, m_highlightColor{m_highlightColor_}, m_highlightPadding{m_highlightPadding_}, m_enableVertexGradient{m_enableVertexGradient_}, m_colorMode{m_colorMode_}, m_fontColorGradient{m_fontColorGradient_}, m_fontColorGradientPreset{m_fontColorGradientPreset_}, m_spriteAsset{m_spriteAsset_}, m_tintAllSprites{m_tintAllSprites_}, m_tintSprite{m_tintSprite_}, m_spriteColor{m_spriteColor_}, m_overrideHtmlColors{m_overrideHtmlColors_}, m_faceColor{m_faceColor_}, m_outlineColor{m_outlineColor_}, m_outlineWidth{m_outlineWidth_}, m_fontSize{m_fontSize_}, m_currentFontSize{m_currentFontSize_}, m_fontSizeBase{m_fontSizeBase_}, m_sizeStack{m_sizeStack_}, m_fontWeight{m_fontWeight_}, m_FontWeightInternal{m_FontWeightInternal_}, m_FontWeightStack{m_FontWeightStack_}, m_enableAutoSizing{m_enableAutoSizing_}, m_maxFontSize{m_maxFontSize_}, m_minFontSize{m_minFontSize_}, m_fontSizeMin{m_fontSizeMin_}, m_fontSizeMax{m_fontSizeMax_}, m_fontStyle{m_fontStyle_}, m_FontStyleInternal{m_FontStyleInternal_}, m_fontStyleStack{m_fontStyleStack_}, m_isUsingBold{m_isUsingBold_}, m_textAlignment{m_textAlignment_}, m_lineJustification{m_lineJustification_}, m_lineJustificationStack{m_lineJustificationStack_}, m_textContainerLocalCorners{m_textContainerLocalCorners_}, m_characterSpacing{m_characterSpacing_}, m_cSpacing{m_cSpacing_}, m_monoSpacing{m_monoSpacing_}, m_wordSpacing{m_wordSpacing_}, m_lineSpacing{m_lineSpacing_}, m_lineSpacingDelta{m_lineSpacingDelta_}, m_lineHeight{m_lineHeight_}, m_lineSpacingMax{m_lineSpacingMax_}, m_paragraphSpacing{m_paragraphSpacing_}, m_charWidthMaxAdj{m_charWidthMaxAdj_}, m_charWidthAdjDelta{m_charWidthAdjDelta_}, m_enableWordWrapping{m_enableWordWrapping_}, m_isCharacterWrappingEnabled{m_isCharacterWrappingEnabled_}, m_isNonBreakingSpace{m_isNonBreakingSpace_}, m_isIgnoringAlignment{m_isIgnoringAlignment_}, m_wordWrappingRatios{m_wordWrappingRatios_}, m_overflowMode{m_overflowMode_}, m_firstOverflowCharacterIndex{m_firstOverflowCharacterIndex_}, m_linkedTextComponent{m_linkedTextComponent_}, m_isLinkedTextComponent{m_isLinkedTextComponent_}, m_isTextTruncated{m_isTextTruncated_}, m_enableKerning{m_enableKerning_}, m_enableExtraPadding{m_enableExtraPadding_}, checkPaddingRequired{checkPaddingRequired_}, m_isRichText{m_isRichText_}, m_parseCtrlCharacters{m_parseCtrlCharacters_}, m_isOverlay{m_isOverlay_}, m_isOrthographic{m_isOrthographic_}, m_isCullingEnabled{m_isCullingEnabled_}, m_ignoreRectMaskCulling{m_ignoreRectMaskCulling_}, m_ignoreCulling{m_ignoreCulling_}, m_horizontalMapping{m_horizontalMapping_}, m_verticalMapping{m_verticalMapping_}, m_uvLineOffset{m_uvLineOffset_}, m_renderMode{m_renderMode_}, m_geometrySortingOrder{m_geometrySortingOrder_}, m_VertexBufferAutoSizeReduction{m_VertexBufferAutoSizeReduction_}, m_firstVisibleCharacter{m_firstVisibleCharacter_}, m_maxVisibleCharacters{m_maxVisibleCharacters_}, m_maxVisibleWords{m_maxVisibleWords_}, m_maxVisibleLines{m_maxVisibleLines_}, m_useMaxVisibleDescender{m_useMaxVisibleDescender_}, m_pageToDisplay{m_pageToDisplay_}, m_isNewPage{m_isNewPage_}, m_margin{m_margin_}, m_marginLeft{m_marginLeft_}, m_marginRight{m_marginRight_}, m_marginWidth{m_marginWidth_}, m_marginHeight{m_marginHeight_}, m_width{m_width_}, m_textInfo{m_textInfo_}, m_havePropertiesChanged{m_havePropertiesChanged_}, m_isUsingLegacyAnimationComponent{m_isUsingLegacyAnimationComponent_}, m_transform{m_transform_}, m_rectTransform{m_rectTransform_}, autoSizeTextContainer{autoSizeTextContainer_}, m_autoSizeTextContainer{m_autoSizeTextContainer_}, m_mesh{m_mesh_}, m_isVolumetricText{m_isVolumetricText_}, m_spriteAnimator{m_spriteAnimator_}, m_flexibleHeight{m_flexibleHeight_}, m_flexibleWidth{m_flexibleWidth_}, m_minWidth{m_minWidth_}, m_minHeight{m_minHeight_}, m_maxWidth{m_maxWidth_}, m_maxHeight{m_maxHeight_}, m_LayoutElement{m_LayoutElement_}, m_preferredWidth{m_preferredWidth_}, m_renderedWidth{m_renderedWidth_}, m_isPreferredWidthDirty{m_isPreferredWidthDirty_}, m_preferredHeight{m_preferredHeight_}, m_renderedHeight{m_renderedHeight_}, m_isPreferredHeightDirty{m_isPreferredHeightDirty_}, m_isCalculatingPreferredValues{m_isCalculatingPreferredValues_}, m_recursiveCount{m_recursiveCount_}, m_layoutPriority{m_layoutPriority_}, m_isCalculateSizeRequired{m_isCalculateSizeRequired_}, m_isLayoutDirty{m_isLayoutDirty_}, m_verticesAlreadyDirty{m_verticesAlreadyDirty_}, m_layoutAlreadyDirty{m_layoutAlreadyDirty_}, m_isAwake{m_isAwake_}, m_isWaitingOnResourceLoad{m_isWaitingOnResourceLoad_}, m_isInputParsingRequired{m_isInputParsingRequired_}, m_inputSource{m_inputSource_}, old_text{old_text_}, m_fontScale{m_fontScale_}, m_fontScaleMultiplier{m_fontScaleMultiplier_}, m_htmlTag{m_htmlTag_}, m_xmlAttribute{m_xmlAttribute_}, m_attributeParameterValues{m_attributeParameterValues_}, tag_LineIndent{tag_LineIndent_}, tag_Indent{tag_Indent_}, m_indentStack{m_indentStack_}, tag_NoParsing{tag_NoParsing_}, m_isParsingText{m_isParsingText_}, m_FXMatrix{m_FXMatrix_}, m_isFXMatrixSet{m_isFXMatrixSet_}, m_TextParsingBuffer{m_TextParsingBuffer_}, m_internalCharacterInfo{m_internalCharacterInfo_}, m_input_CharArray{m_input_CharArray_}, m_charArray_Length{m_charArray_Length_}, m_totalCharacterCount{m_totalCharacterCount_}, m_SavedWordWrapState{m_SavedWordWrapState_}, m_SavedLineState{m_SavedLineState_}, m_characterCount{m_characterCount_}, m_firstCharacterOfLine{m_firstCharacterOfLine_}, m_firstVisibleCharacterOfLine{m_firstVisibleCharacterOfLine_}, m_lastCharacterOfLine{m_lastCharacterOfLine_}, m_lastVisibleCharacterOfLine{m_lastVisibleCharacterOfLine_}, m_lineNumber{m_lineNumber_}, m_lineVisibleCharacterCount{m_lineVisibleCharacterCount_}, m_pageNumber{m_pageNumber_}, m_maxAscender{m_maxAscender_}, m_maxCapHeight{m_maxCapHeight_}, m_maxDescender{m_maxDescender_}, m_maxLineAscender{m_maxLineAscender_}, m_maxLineDescender{m_maxLineDescender_}, m_startOfLineAscender{m_startOfLineAscender_}, m_lineOffset{m_lineOffset_}, m_meshExtents{m_meshExtents_}, m_htmlColor{m_htmlColor_}, m_colorStack{m_colorStack_}, m_underlineColorStack{m_underlineColorStack_}, m_strikethroughColorStack{m_strikethroughColorStack_}, m_highlightColorStack{m_highlightColorStack_}, m_colorGradientPreset{m_colorGradientPreset_}, m_colorGradientStack{m_colorGradientStack_}, m_tabSpacing{m_tabSpacing_}, m_spacing{m_spacing_}, m_styleStack{m_styleStack_}, m_actionStack{m_actionStack_}, m_padding{m_padding_}, m_baselineOffset{m_baselineOffset_}, m_baselineOffsetStack{m_baselineOffsetStack_}, m_xAdvance{m_xAdvance_}, m_textElementType{m_textElementType_}, m_cached_TextElement{m_cached_TextElement_}, m_cached_Underline_Character{m_cached_Underline_Character_}, m_cached_Ellipsis_Character{m_cached_Ellipsis_Character_}, m_defaultSpriteAsset{m_defaultSpriteAsset_}, m_currentSpriteAsset{m_currentSpriteAsset_}, m_spriteCount{m_spriteCount_}, m_spriteIndex{m_spriteIndex_}, m_spriteAnimationID{m_spriteAnimationID_}, m_ignoreActiveState{m_ignoreActiveState_}, k_Power{k_Power_} {}
    // Get static field: static protected UnityEngine.Color32 s_colorWhite
    static UnityEngine::Color32 _get_s_colorWhite();
    // Set static field: static protected UnityEngine.Color32 s_colorWhite
    static void _set_s_colorWhite(UnityEngine::Color32 value);
    // Get static field: static protected UnityEngine.Vector2 k_LargePositiveVector2
    static UnityEngine::Vector2 _get_k_LargePositiveVector2();
    // Set static field: static protected UnityEngine.Vector2 k_LargePositiveVector2
    static void _set_k_LargePositiveVector2(UnityEngine::Vector2 value);
    // Get static field: static protected UnityEngine.Vector2 k_LargeNegativeVector2
    static UnityEngine::Vector2 _get_k_LargeNegativeVector2();
    // Set static field: static protected UnityEngine.Vector2 k_LargeNegativeVector2
    static void _set_k_LargeNegativeVector2(UnityEngine::Vector2 value);
    // Get static field: static protected System.Single k_LargePositiveFloat
    static float _get_k_LargePositiveFloat();
    // Set static field: static protected System.Single k_LargePositiveFloat
    static void _set_k_LargePositiveFloat(float value);
    // Get static field: static protected System.Single k_LargeNegativeFloat
    static float _get_k_LargeNegativeFloat();
    // Set static field: static protected System.Single k_LargeNegativeFloat
    static void _set_k_LargeNegativeFloat(float value);
    // Get static field: static protected System.Int32 k_LargePositiveInt
    static int _get_k_LargePositiveInt();
    // Set static field: static protected System.Int32 k_LargePositiveInt
    static void _set_k_LargePositiveInt(int value);
    // Get static field: static protected System.Int32 k_LargeNegativeInt
    static int _get_k_LargeNegativeInt();
    // Set static field: static protected System.Int32 k_LargeNegativeInt
    static void _set_k_LargeNegativeInt(int value);
    // public System.String get_text()
    // Offset: 0xFFE3B4
    ::Il2CppString* get_text();
    // public System.Void set_text(System.String value)
    // Offset: 0xFFE3BC
    void set_text(::Il2CppString* value);
    // public System.Boolean get_isRightToLeftText()
    // Offset: 0xFFE464
    bool get_isRightToLeftText();
    // public System.Void set_isRightToLeftText(System.Boolean value)
    // Offset: 0xFFE46C
    void set_isRightToLeftText(bool value);
    // public TMPro.TMP_FontAsset get_font()
    // Offset: 0xFFE4D8
    TMPro::TMP_FontAsset* get_font();
    // public System.Void set_font(TMPro.TMP_FontAsset value)
    // Offset: 0xFFE4E0
    void set_font(TMPro::TMP_FontAsset* value);
    // public UnityEngine.Material get_fontSharedMaterial()
    // Offset: 0xFFE5D0
    UnityEngine::Material* get_fontSharedMaterial();
    // public System.Void set_fontSharedMaterial(UnityEngine.Material value)
    // Offset: 0xFFE5D8
    void set_fontSharedMaterial(UnityEngine::Material* value);
    // public UnityEngine.Material[] get_fontSharedMaterials()
    // Offset: 0xFFE6B4
    ::Array<UnityEngine::Material*>* get_fontSharedMaterials();
    // public System.Void set_fontSharedMaterials(UnityEngine.Material[] value)
    // Offset: 0xFFE6C4
    void set_fontSharedMaterials(::Array<UnityEngine::Material*>* value);
    // public UnityEngine.Material get_fontMaterial()
    // Offset: 0xFFE720
    UnityEngine::Material* get_fontMaterial();
    // public System.Void set_fontMaterial(UnityEngine.Material value)
    // Offset: 0xFFE734
    void set_fontMaterial(UnityEngine::Material* value);
    // public UnityEngine.Material[] get_fontMaterials()
    // Offset: 0xFFE854
    ::Array<UnityEngine::Material*>* get_fontMaterials();
    // public System.Void set_fontMaterials(UnityEngine.Material[] value)
    // Offset: 0xFFE868
    void set_fontMaterials(::Array<UnityEngine::Material*>* value);
    // public System.Single get_alpha()
    // Offset: 0xFFE980
    float get_alpha();
    // public System.Void set_alpha(System.Single value)
    // Offset: 0xFFE988
    void set_alpha(float value);
    // public System.Boolean get_enableVertexGradient()
    // Offset: 0xFFE9B4
    bool get_enableVertexGradient();
    // public System.Void set_enableVertexGradient(System.Boolean value)
    // Offset: 0xFFE9BC
    void set_enableVertexGradient(bool value);
    // public TMPro.VertexGradient get_colorGradient()
    // Offset: 0xFFE9F4
    TMPro::VertexGradient get_colorGradient();
    // public System.Void set_colorGradient(TMPro.VertexGradient value)
    // Offset: 0xFFEA20
    void set_colorGradient(TMPro::VertexGradient value);
    // public TMPro.TMP_ColorGradient get_colorGradientPreset()
    // Offset: 0xFFEA60
    TMPro::TMP_ColorGradient* get_colorGradientPreset();
    // public System.Void set_colorGradientPreset(TMPro.TMP_ColorGradient value)
    // Offset: 0xFFEA68
    void set_colorGradientPreset(TMPro::TMP_ColorGradient* value);
    // public TMPro.TMP_SpriteAsset get_spriteAsset()
    // Offset: 0xFFEAA8
    TMPro::TMP_SpriteAsset* get_spriteAsset();
    // public System.Void set_spriteAsset(TMPro.TMP_SpriteAsset value)
    // Offset: 0xFFEAB0
    void set_spriteAsset(TMPro::TMP_SpriteAsset* value);
    // public System.Boolean get_tintAllSprites()
    // Offset: 0xFFEB0C
    bool get_tintAllSprites();
    // public System.Void set_tintAllSprites(System.Boolean value)
    // Offset: 0xFFEB14
    void set_tintAllSprites(bool value);
    // public System.Boolean get_overrideColorTags()
    // Offset: 0xFFEB4C
    bool get_overrideColorTags();
    // public System.Void set_overrideColorTags(System.Boolean value)
    // Offset: 0xFFEB54
    void set_overrideColorTags(bool value);
    // public UnityEngine.Color32 get_faceColor()
    // Offset: 0xFFEB8C
    UnityEngine::Color32 get_faceColor();
    // public System.Void set_faceColor(UnityEngine.Color32 value)
    // Offset: 0xFFEC68
    void set_faceColor(UnityEngine::Color32 value);
    // public UnityEngine.Color32 get_outlineColor()
    // Offset: 0xFFED00
    UnityEngine::Color32 get_outlineColor();
    // public System.Void set_outlineColor(UnityEngine.Color32 value)
    // Offset: 0xFFEDDC
    void set_outlineColor(UnityEngine::Color32 value);
    // public System.Single get_outlineWidth()
    // Offset: 0xFFEE60
    float get_outlineWidth();
    // public System.Void set_outlineWidth(System.Single value)
    // Offset: 0xFFEF30
    void set_outlineWidth(float value);
    // public System.Single get_fontSize()
    // Offset: 0xFFEF94
    float get_fontSize();
    // public System.Void set_fontSize(System.Single value)
    // Offset: 0xFFEF9C
    void set_fontSize(float value);
    // public System.Single get_fontScale()
    // Offset: 0xFFF008
    float get_fontScale();
    // public TMPro.FontWeight get_fontWeight()
    // Offset: 0xFFF010
    TMPro::FontWeight get_fontWeight();
    // public System.Void set_fontWeight(TMPro.FontWeight value)
    // Offset: 0xFFF018
    void set_fontWeight(TMPro::FontWeight value);
    // public System.Single get_pixelsPerUnit()
    // Offset: 0xFFF078
    float get_pixelsPerUnit();
    // public System.Boolean get_enableAutoSizing()
    // Offset: 0xFFF208
    bool get_enableAutoSizing();
    // public System.Void set_enableAutoSizing(System.Boolean value)
    // Offset: 0xFFF210
    void set_enableAutoSizing(bool value);
    // public System.Single get_fontSizeMin()
    // Offset: 0xFFF26C
    float get_fontSizeMin();
    // public System.Void set_fontSizeMin(System.Single value)
    // Offset: 0xFFF274
    void set_fontSizeMin(float value);
    // public System.Single get_fontSizeMax()
    // Offset: 0xFFF2C4
    float get_fontSizeMax();
    // public System.Void set_fontSizeMax(System.Single value)
    // Offset: 0xFFF2CC
    void set_fontSizeMax(float value);
    // public TMPro.FontStyles get_fontStyle()
    // Offset: 0xFFF31C
    TMPro::FontStyles get_fontStyle();
    // public System.Void set_fontStyle(TMPro.FontStyles value)
    // Offset: 0xFFF324
    void set_fontStyle(TMPro::FontStyles value);
    // public System.Boolean get_isUsingBold()
    // Offset: 0xFFF384
    bool get_isUsingBold();
    // public TMPro.TextAlignmentOptions get_alignment()
    // Offset: 0xFFF38C
    TMPro::TextAlignmentOptions get_alignment();
    // public System.Void set_alignment(TMPro.TextAlignmentOptions value)
    // Offset: 0xFFF394
    void set_alignment(TMPro::TextAlignmentOptions value);
    // public System.Single get_characterSpacing()
    // Offset: 0xFFF3C0
    float get_characterSpacing();
    // public System.Void set_characterSpacing(System.Single value)
    // Offset: 0xFFF3C8
    void set_characterSpacing(float value);
    // public System.Single get_wordSpacing()
    // Offset: 0xFFF424
    float get_wordSpacing();
    // public System.Void set_wordSpacing(System.Single value)
    // Offset: 0xFFF42C
    void set_wordSpacing(float value);
    // public System.Single get_lineSpacing()
    // Offset: 0xFFF488
    float get_lineSpacing();
    // public System.Void set_lineSpacing(System.Single value)
    // Offset: 0xFFF490
    void set_lineSpacing(float value);
    // public System.Single get_lineSpacingAdjustment()
    // Offset: 0xFFF4EC
    float get_lineSpacingAdjustment();
    // public System.Void set_lineSpacingAdjustment(System.Single value)
    // Offset: 0xFFF4F4
    void set_lineSpacingAdjustment(float value);
    // public System.Single get_paragraphSpacing()
    // Offset: 0xFFF550
    float get_paragraphSpacing();
    // public System.Void set_paragraphSpacing(System.Single value)
    // Offset: 0xFFF558
    void set_paragraphSpacing(float value);
    // public System.Single get_characterWidthAdjustment()
    // Offset: 0xFFF5B4
    float get_characterWidthAdjustment();
    // public System.Void set_characterWidthAdjustment(System.Single value)
    // Offset: 0xFFF5BC
    void set_characterWidthAdjustment(float value);
    // public System.Boolean get_enableWordWrapping()
    // Offset: 0xFFF618
    bool get_enableWordWrapping();
    // public System.Void set_enableWordWrapping(System.Boolean value)
    // Offset: 0xFFF620
    void set_enableWordWrapping(bool value);
    // public System.Single get_wordWrappingRatios()
    // Offset: 0xFFF68C
    float get_wordWrappingRatios();
    // public System.Void set_wordWrappingRatios(System.Single value)
    // Offset: 0xFFF694
    void set_wordWrappingRatios(float value);
    // public TMPro.TextOverflowModes get_overflowMode()
    // Offset: 0xFFF6F0
    TMPro::TextOverflowModes get_overflowMode();
    // public System.Void set_overflowMode(TMPro.TextOverflowModes value)
    // Offset: 0xFFF6F8
    void set_overflowMode(TMPro::TextOverflowModes value);
    // public System.Boolean get_isTextOverflowing()
    // Offset: 0xFFF754
    bool get_isTextOverflowing();
    // public System.Int32 get_firstOverflowCharacterIndex()
    // Offset: 0xFFF764
    int get_firstOverflowCharacterIndex();
    // public TMPro.TMP_Text get_linkedTextComponent()
    // Offset: 0xFFF76C
    TMPro::TMP_Text* get_linkedTextComponent();
    // public System.Void set_linkedTextComponent(TMPro.TMP_Text value)
    // Offset: 0xFFF774
    void set_linkedTextComponent(TMPro::TMP_Text* value);
    // public System.Boolean get_isLinkedTextComponent()
    // Offset: 0xFFF9E4
    bool get_isLinkedTextComponent();
    // public System.Void set_isLinkedTextComponent(System.Boolean value)
    // Offset: 0xFFF988
    void set_isLinkedTextComponent(bool value);
    // public System.Boolean get_isTextTruncated()
    // Offset: 0xFFF9EC
    bool get_isTextTruncated();
    // public System.Boolean get_enableKerning()
    // Offset: 0xFFF9F4
    bool get_enableKerning();
    // public System.Void set_enableKerning(System.Boolean value)
    // Offset: 0xFFF9FC
    void set_enableKerning(bool value);
    // public System.Boolean get_extraPadding()
    // Offset: 0xFFFA64
    bool get_extraPadding();
    // public System.Void set_extraPadding(System.Boolean value)
    // Offset: 0xFFFA6C
    void set_extraPadding(bool value);
    // public System.Boolean get_richText()
    // Offset: 0xFFFAD0
    bool get_richText();
    // public System.Void set_richText(System.Boolean value)
    // Offset: 0xFFFAD8
    void set_richText(bool value);
    // public System.Boolean get_parseCtrlCharacters()
    // Offset: 0xFFFB44
    bool get_parseCtrlCharacters();
    // public System.Void set_parseCtrlCharacters(System.Boolean value)
    // Offset: 0xFFFB4C
    void set_parseCtrlCharacters(bool value);
    // public System.Boolean get_isOverlay()
    // Offset: 0xFFFBB8
    bool get_isOverlay();
    // public System.Void set_isOverlay(System.Boolean value)
    // Offset: 0xFFFBC0
    void set_isOverlay(bool value);
    // public System.Boolean get_isOrthographic()
    // Offset: 0xFFFC24
    bool get_isOrthographic();
    // public System.Void set_isOrthographic(System.Boolean value)
    // Offset: 0xFFFC2C
    void set_isOrthographic(bool value);
    // public System.Boolean get_enableCulling()
    // Offset: 0xFFFC64
    bool get_enableCulling();
    // public System.Void set_enableCulling(System.Boolean value)
    // Offset: 0xFFFC6C
    void set_enableCulling(bool value);
    // public System.Boolean get_ignoreRectMaskCulling()
    // Offset: 0xFFFCBC
    bool get_ignoreRectMaskCulling();
    // public System.Void set_ignoreRectMaskCulling(System.Boolean value)
    // Offset: 0xFFFCC4
    void set_ignoreRectMaskCulling(bool value);
    // public System.Boolean get_ignoreVisibility()
    // Offset: 0xFFFCEC
    bool get_ignoreVisibility();
    // public System.Void set_ignoreVisibility(System.Boolean value)
    // Offset: 0xFFFCF4
    void set_ignoreVisibility(bool value);
    // public TMPro.TextureMappingOptions get_horizontalMapping()
    // Offset: 0xFFFD1C
    TMPro::TextureMappingOptions get_horizontalMapping();
    // public System.Void set_horizontalMapping(TMPro.TextureMappingOptions value)
    // Offset: 0xFFFD24
    void set_horizontalMapping(TMPro::TextureMappingOptions value);
    // public TMPro.TextureMappingOptions get_verticalMapping()
    // Offset: 0xFFFD50
    TMPro::TextureMappingOptions get_verticalMapping();
    // public System.Void set_verticalMapping(TMPro.TextureMappingOptions value)
    // Offset: 0xFFFD58
    void set_verticalMapping(TMPro::TextureMappingOptions value);
    // public System.Single get_mappingUvLineOffset()
    // Offset: 0xFFFD84
    float get_mappingUvLineOffset();
    // public System.Void set_mappingUvLineOffset(System.Single value)
    // Offset: 0xFFFD8C
    void set_mappingUvLineOffset(float value);
    // public TMPro.TextRenderFlags get_renderMode()
    // Offset: 0xFFFDB8
    TMPro::TextRenderFlags get_renderMode();
    // public System.Void set_renderMode(TMPro.TextRenderFlags value)
    // Offset: 0xFFFDC0
    void set_renderMode(TMPro::TextRenderFlags value);
    // public TMPro.VertexSortingOrder get_geometrySortingOrder()
    // Offset: 0xFFFDDC
    TMPro::VertexSortingOrder get_geometrySortingOrder();
    // public System.Void set_geometrySortingOrder(TMPro.VertexSortingOrder value)
    // Offset: 0xFFFDE4
    void set_geometrySortingOrder(TMPro::VertexSortingOrder value);
    // public System.Boolean get_vertexBufferAutoSizeReduction()
    // Offset: 0xFFFE00
    bool get_vertexBufferAutoSizeReduction();
    // public System.Void set_vertexBufferAutoSizeReduction(System.Boolean value)
    // Offset: 0xFFFE08
    void set_vertexBufferAutoSizeReduction(bool value);
    // public System.Int32 get_firstVisibleCharacter()
    // Offset: 0xFFFE28
    int get_firstVisibleCharacter();
    // public System.Void set_firstVisibleCharacter(System.Int32 value)
    // Offset: 0xFFFE30
    void set_firstVisibleCharacter(int value);
    // public System.Int32 get_maxVisibleCharacters()
    // Offset: 0xFFFE5C
    int get_maxVisibleCharacters();
    // public System.Void set_maxVisibleCharacters(System.Int32 value)
    // Offset: 0xFFFE64
    void set_maxVisibleCharacters(int value);
    // public System.Int32 get_maxVisibleWords()
    // Offset: 0xFFFE90
    int get_maxVisibleWords();
    // public System.Void set_maxVisibleWords(System.Int32 value)
    // Offset: 0xFFFE98
    void set_maxVisibleWords(int value);
    // public System.Int32 get_maxVisibleLines()
    // Offset: 0xFFFEC4
    int get_maxVisibleLines();
    // public System.Void set_maxVisibleLines(System.Int32 value)
    // Offset: 0xFFFECC
    void set_maxVisibleLines(int value);
    // public System.Boolean get_useMaxVisibleDescender()
    // Offset: 0xFFFEFC
    bool get_useMaxVisibleDescender();
    // public System.Void set_useMaxVisibleDescender(System.Boolean value)
    // Offset: 0xFFFF04
    void set_useMaxVisibleDescender(bool value);
    // public System.Int32 get_pageToDisplay()
    // Offset: 0xFFFF38
    int get_pageToDisplay();
    // public System.Void set_pageToDisplay(System.Int32 value)
    // Offset: 0xFFFF40
    void set_pageToDisplay(int value);
    // public UnityEngine.Vector4 get_margin()
    // Offset: 0xFFFF6C
    UnityEngine::Vector4 get_margin();
    // public System.Void set_margin(UnityEngine.Vector4 value)
    // Offset: 0xFFFF80
    void set_margin(UnityEngine::Vector4 value);
    // public TMPro.TMP_TextInfo get_textInfo()
    // Offset: 0x10000A4
    TMPro::TMP_TextInfo* get_textInfo();
    // public System.Boolean get_havePropertiesChanged()
    // Offset: 0x10000AC
    bool get_havePropertiesChanged();
    // public System.Void set_havePropertiesChanged(System.Boolean value)
    // Offset: 0xFFCB94
    void set_havePropertiesChanged(bool value);
    // public System.Boolean get_isUsingLegacyAnimationComponent()
    // Offset: 0x10000B4
    bool get_isUsingLegacyAnimationComponent();
    // public System.Void set_isUsingLegacyAnimationComponent(System.Boolean value)
    // Offset: 0x10000BC
    void set_isUsingLegacyAnimationComponent(bool value);
    // public System.Boolean get_autoSizeTextContainer()
    // Offset: 0x10000C8
    bool get_autoSizeTextContainer();
    // public System.Void set_autoSizeTextContainer(System.Boolean value)
    // Offset: 0x10000D0
    void set_autoSizeTextContainer(bool value);
    // public UnityEngine.Mesh get_mesh()
    // Offset: 0x10000DC
    UnityEngine::Mesh* get_mesh();
    // public System.Boolean get_isVolumetricText()
    // Offset: 0x10000E4
    bool get_isVolumetricText();
    // public System.Void set_isVolumetricText(System.Boolean value)
    // Offset: 0x10000EC
    void set_isVolumetricText(bool value);
    // public UnityEngine.Bounds get_bounds()
    // Offset: 0x1000170
    UnityEngine::Bounds get_bounds();
    // public UnityEngine.Bounds get_textBounds()
    // Offset: 0x1000220
    UnityEngine::Bounds get_textBounds();
    // protected TMPro.TMP_SpriteAnimator get_spriteAnimator()
    // Offset: 0x10004F8
    TMPro::TMP_SpriteAnimator* get_spriteAnimator();
    // public System.Single get_flexibleHeight()
    // Offset: 0x1000608
    float get_flexibleHeight();
    // public System.Single get_flexibleWidth()
    // Offset: 0x1000610
    float get_flexibleWidth();
    // public System.Single get_minWidth()
    // Offset: 0x1000618
    float get_minWidth();
    // public System.Single get_minHeight()
    // Offset: 0x1000620
    float get_minHeight();
    // public System.Single get_maxWidth()
    // Offset: 0x1000628
    float get_maxWidth();
    // public System.Single get_maxHeight()
    // Offset: 0x1000630
    float get_maxHeight();
    // protected UnityEngine.UI.LayoutElement get_layoutElement()
    // Offset: 0x1000638
    UnityEngine::UI::LayoutElement* get_layoutElement();
    // public System.Single get_preferredWidth()
    // Offset: 0x10006E4
    float get_preferredWidth();
    // public System.Single get_preferredHeight()
    // Offset: 0x1000858
    float get_preferredHeight();
    // public System.Single get_renderedWidth()
    // Offset: 0x1000A14
    float get_renderedWidth();
    // public System.Single get_renderedHeight()
    // Offset: 0x1000A1C
    float get_renderedHeight();
    // public System.Int32 get_layoutPriority()
    // Offset: 0x1000A4C
    int get_layoutPriority();
    // protected System.Void LoadFontAsset()
    // Offset: 0x1000A54
    void LoadFontAsset();
    // protected System.Void SetSharedMaterial(UnityEngine.Material mat)
    // Offset: 0x1000A58
    void SetSharedMaterial(UnityEngine::Material* mat);
    // protected UnityEngine.Material GetMaterial(UnityEngine.Material mat)
    // Offset: 0x1000A5C
    UnityEngine::Material* GetMaterial(UnityEngine::Material* mat);
    // protected System.Void SetFontBaseMaterial(UnityEngine.Material mat)
    // Offset: 0x1000A64
    void SetFontBaseMaterial(UnityEngine::Material* mat);
    // protected UnityEngine.Material[] GetSharedMaterials()
    // Offset: 0x1000A68
    ::Array<UnityEngine::Material*>* GetSharedMaterials();
    // protected System.Void SetSharedMaterials(UnityEngine.Material[] materials)
    // Offset: 0x1000A70
    void SetSharedMaterials(::Array<UnityEngine::Material*>* materials);
    // protected UnityEngine.Material[] GetMaterials(UnityEngine.Material[] mats)
    // Offset: 0x1000A74
    ::Array<UnityEngine::Material*>* GetMaterials(::Array<UnityEngine::Material*>* mats);
    // protected UnityEngine.Material CreateMaterialInstance(UnityEngine.Material source)
    // Offset: 0x1000A7C
    UnityEngine::Material* CreateMaterialInstance(UnityEngine::Material* source);
    // protected System.Void SetVertexColorGradient(TMPro.TMP_ColorGradient gradient)
    // Offset: 0x1000B38
    void SetVertexColorGradient(TMPro::TMP_ColorGradient* gradient);
    // protected System.Void SetTextSortingOrder(TMPro.VertexSortingOrder order)
    // Offset: 0x1000C10
    void SetTextSortingOrder(TMPro::VertexSortingOrder order);
    // protected System.Void SetTextSortingOrder(System.Int32[] order)
    // Offset: 0x1000C14
    void SetTextSortingOrder(::Array<int>* order);
    // protected System.Void SetFaceColor(UnityEngine.Color32 color)
    // Offset: 0x1000C18
    void SetFaceColor(UnityEngine::Color32 color);
    // protected System.Void SetOutlineColor(UnityEngine.Color32 color)
    // Offset: 0x1000C1C
    void SetOutlineColor(UnityEngine::Color32 color);
    // protected System.Void SetOutlineThickness(System.Single thickness)
    // Offset: 0x1000C20
    void SetOutlineThickness(float thickness);
    // protected System.Void SetShaderDepth()
    // Offset: 0x1000C24
    void SetShaderDepth();
    // protected System.Void SetCulling()
    // Offset: 0x1000C28
    void SetCulling();
    // protected System.Single GetPaddingForMaterial()
    // Offset: 0x1000C2C
    float GetPaddingForMaterial();
    // protected System.Single GetPaddingForMaterial(UnityEngine.Material mat)
    // Offset: 0x1000C34
    float GetPaddingForMaterial(UnityEngine::Material* mat);
    // protected UnityEngine.Vector3[] GetTextContainerLocalCorners()
    // Offset: 0x1000C3C
    ::Array<UnityEngine::Vector3>* GetTextContainerLocalCorners();
    // public System.Void ForceMeshUpdate()
    // Offset: 0x1000C44
    void ForceMeshUpdate();
    // public System.Void ForceMeshUpdate(System.Boolean ignoreActiveState)
    // Offset: 0x1000C48
    void ForceMeshUpdate(bool ignoreActiveState);
    // System.Void SetTextInternal(System.String text)
    // Offset: 0x1000C4C
    void SetTextInternal(::Il2CppString* text);
    // public System.Void UpdateGeometry(UnityEngine.Mesh mesh, System.Int32 index)
    // Offset: 0x1000C98
    void UpdateGeometry(UnityEngine::Mesh* mesh, int index);
    // public System.Void UpdateVertexData(TMPro.TMP_VertexDataUpdateFlags flags)
    // Offset: 0x1000C9C
    void UpdateVertexData(TMPro::TMP_VertexDataUpdateFlags flags);
    // public System.Void UpdateVertexData()
    // Offset: 0x1000CA0
    void UpdateVertexData();
    // public System.Void SetVertices(UnityEngine.Vector3[] vertices)
    // Offset: 0x1000CA4
    void SetVertices(::Array<UnityEngine::Vector3>* vertices);
    // public System.Void UpdateMeshPadding()
    // Offset: 0x1000CA8
    void UpdateMeshPadding();
    // protected System.Void InternalCrossFadeColor(UnityEngine.Color targetColor, System.Single duration, System.Boolean ignoreTimeScale, System.Boolean useAlpha)
    // Offset: 0x1000D98
    void InternalCrossFadeColor(UnityEngine::Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha);
    // protected System.Void InternalCrossFadeAlpha(System.Single alpha, System.Single duration, System.Boolean ignoreTimeScale)
    // Offset: 0x1000D9C
    void InternalCrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale);
    // protected System.Void ParseInputText()
    // Offset: 0x1000DA0
    void ParseInputText();
    // public System.Void SetText(System.String text)
    // Offset: 0x1001B24
    void SetText(::Il2CppString* text);
    // public System.Void SetText(System.String text, System.Boolean syncTextInputBox)
    // Offset: 0x1001B2C
    void SetText(::Il2CppString* text, bool syncTextInputBox);
    // public System.Void SetText(System.String text, System.Single arg0)
    // Offset: 0x1001B8C
    void SetText(::Il2CppString* text, float arg0);
    // public System.Void SetText(System.String text, System.Single arg0, System.Single arg1)
    // Offset: 0x1001D90
    void SetText(::Il2CppString* text, float arg0, float arg1);
    // public System.Void SetText(System.String text, System.Single arg0, System.Single arg1, System.Single arg2)
    // Offset: 0x1001B9C
    void SetText(::Il2CppString* text, float arg0, float arg1, float arg2);
    // public System.Void SetText(System.Text.StringBuilder text)
    // Offset: 0x1001F5C
    void SetText(System::Text::StringBuilder* text);
    // public System.Void SetCharArray(System.Char[] sourceText)
    // Offset: 0x10026EC
    void SetCharArray(::Array<::Il2CppChar>* sourceText);
    // public System.Void SetCharArray(System.Char[] sourceText, System.Int32 start, System.Int32 length)
    // Offset: 0x10030FC
    void SetCharArray(::Array<::Il2CppChar>* sourceText, int start, int length);
    // public System.Void SetCharArray(System.Int32[] sourceText, System.Int32 start, System.Int32 length)
    // Offset: 0x1003510
    void SetCharArray(::Array<int>* sourceText, int start, int length);
    // protected System.Void SetTextArrayToCharArray(System.Char[] sourceText, ref TMPro.TMP_Text/UnicodeChar[] charBuffer)
    // Offset: 0x1001720
    void SetTextArrayToCharArray(::Array<::Il2CppChar>* sourceText, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer);
    // protected System.Void StringToCharArray(System.String sourceText, ref TMPro.TMP_Text/UnicodeChar[] charBuffer)
    // Offset: 0x1000E10
    void StringToCharArray(::Il2CppString* sourceText, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer);
    // protected System.Void StringBuilderToIntArray(System.Text.StringBuilder sourceText, ref TMPro.TMP_Text/UnicodeChar[] charBuffer)
    // Offset: 0x1001FBC
    void StringBuilderToIntArray(System::Text::StringBuilder* sourceText, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer);
    // private System.Boolean ReplaceOpeningStyleTag(ref System.String sourceText, System.Int32 srcIndex, out System.Int32 srcOffset, ref TMPro.TMP_Text/UnicodeChar[] charBuffer, ref System.Int32 writeIndex)
    // Offset: 0x1004228
    bool ReplaceOpeningStyleTag(::Il2CppString*& sourceText, int srcIndex, int& srcOffset, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex);
    // private System.Boolean ReplaceOpeningStyleTag(ref System.Int32[] sourceText, System.Int32 srcIndex, out System.Int32 srcOffset, ref TMPro.TMP_Text/UnicodeChar[] charBuffer, ref System.Int32 writeIndex)
    // Offset: 0x1003A58
    bool ReplaceOpeningStyleTag(::Array<int>*& sourceText, int srcIndex, int& srcOffset, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex);
    // private System.Boolean ReplaceOpeningStyleTag(ref System.Char[] sourceText, System.Int32 srcIndex, out System.Int32 srcOffset, ref TMPro.TMP_Text/UnicodeChar[] charBuffer, ref System.Int32 writeIndex)
    // Offset: 0x1002C2C
    bool ReplaceOpeningStyleTag(::Array<::Il2CppChar>*& sourceText, int srcIndex, int& srcOffset, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex);
    // private System.Boolean ReplaceOpeningStyleTag(ref System.Text.StringBuilder sourceText, System.Int32 srcIndex, out System.Int32 srcOffset, ref TMPro.TMP_Text/UnicodeChar[] charBuffer, ref System.Int32 writeIndex)
    // Offset: 0x10049FC
    bool ReplaceOpeningStyleTag(System::Text::StringBuilder*& sourceText, int srcIndex, int& srcOffset, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex);
    // private System.Boolean ReplaceClosingStyleTag(ref System.String sourceText, System.Int32 srcIndex, ref TMPro.TMP_Text/UnicodeChar[] charBuffer, ref System.Int32 writeIndex)
    // Offset: 0x1004498
    bool ReplaceClosingStyleTag(::Il2CppString*& sourceText, int srcIndex, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex);
    // private System.Boolean ReplaceClosingStyleTag(ref System.Int32[] sourceText, System.Int32 srcIndex, ref TMPro.TMP_Text/UnicodeChar[] charBuffer, ref System.Int32 writeIndex)
    // Offset: 0x1003CC8
    bool ReplaceClosingStyleTag(::Array<int>*& sourceText, int srcIndex, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex);
    // private System.Boolean ReplaceClosingStyleTag(ref System.Char[] sourceText, System.Int32 srcIndex, ref TMPro.TMP_Text/UnicodeChar[] charBuffer, ref System.Int32 writeIndex)
    // Offset: 0x1002E9C
    bool ReplaceClosingStyleTag(::Array<::Il2CppChar>*& sourceText, int srcIndex, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex);
    // private System.Boolean ReplaceClosingStyleTag(ref System.Text.StringBuilder sourceText, System.Int32 srcIndex, ref TMPro.TMP_Text/UnicodeChar[] charBuffer, ref System.Int32 writeIndex)
    // Offset: 0x1004C6C
    bool ReplaceClosingStyleTag(System::Text::StringBuilder*& sourceText, int srcIndex, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex);
    // private System.Boolean IsTagName(ref System.String text, System.String tag, System.Int32 index)
    // Offset: 0x1004120
    bool IsTagName(::Il2CppString*& text, ::Il2CppString* tag, int index);
    // private System.Boolean IsTagName(ref System.Char[] text, System.String tag, System.Int32 index)
    // Offset: 0x1002AFC
    bool IsTagName(::Array<::Il2CppChar>*& text, ::Il2CppString* tag, int index);
    // private System.Boolean IsTagName(ref System.Int32[] text, System.String tag, System.Int32 index)
    // Offset: 0x1003928
    bool IsTagName(::Array<int>*& text, ::Il2CppString* tag, int index);
    // private System.Boolean IsTagName(ref System.Text.StringBuilder text, System.String tag, System.Int32 index)
    // Offset: 0x10048F0
    bool IsTagName(System::Text::StringBuilder*& text, ::Il2CppString* tag, int index);
    // private System.Int32 GetTagHashCode(ref System.String text, System.Int32 index, out System.Int32 closeIndex)
    // Offset: 0x1004ECC
    int GetTagHashCode(::Il2CppString*& text, int index, int& closeIndex);
    // private System.Int32 GetTagHashCode(ref System.Char[] text, System.Int32 index, out System.Int32 closeIndex)
    // Offset: 0x1005004
    int GetTagHashCode(::Array<::Il2CppChar>*& text, int index, int& closeIndex);
    // private System.Int32 GetTagHashCode(ref System.Int32[] text, System.Int32 index, out System.Int32 closeIndex)
    // Offset: 0x1004F84
    int GetTagHashCode(::Array<int>*& text, int index, int& closeIndex);
    // private System.Int32 GetTagHashCode(ref System.Text.StringBuilder text, System.Int32 index, out System.Int32 closeIndex)
    // Offset: 0x1005084
    int GetTagHashCode(System::Text::StringBuilder*& text, int index, int& closeIndex);
    // private System.Void ResizeInternalArray(ref T[] array)
    // Offset: 0xFFFFFFFF
    template<class T>
    void ResizeInternalArray(::Array<T>*& array) {
      static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::ResizeInternalArray");
      static auto* ___internal__method = THROW_UNLESS(::il2cpp_utils::FindMethod(this, "ResizeInternalArray", std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, ::il2cpp_utils::ExtractTypes(array)));
      static auto* ___generic__method = THROW_UNLESS(::il2cpp_utils::MakeGenericMethod(___internal__method, std::vector<Il2CppClass*>{il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}));
      ::il2cpp_utils::RunMethodThrow<void, false>(this, ___generic__method, array);
    }
    // protected System.Void AddFloatToCharArray(System.Double number, ref System.Int32 index, System.Int32 precision)
    // Offset: 0x1001D9C
    void AddFloatToCharArray(double number, int& index, int precision);
    // protected System.Void AddIntToCharArray(System.Double number, ref System.Int32 index, System.Int32 precision)
    // Offset: 0x1005148
    void AddIntToCharArray(double number, int& index, int precision);
    // protected System.Int32 SetArraySizes(TMPro.TMP_Text/UnicodeChar[] chars)
    // Offset: 0x10052B4
    int SetArraySizes(::Array<TMPro::TMP_Text::UnicodeChar>* chars);
    // protected System.Void GenerateTextMesh()
    // Offset: 0x10052BC
    void GenerateTextMesh();
    // public UnityEngine.Vector2 GetPreferredValues()
    // Offset: 0x10052C0
    UnityEngine::Vector2 GetPreferredValues();
    // public UnityEngine.Vector2 GetPreferredValues(System.Single width, System.Single height)
    // Offset: 0x100533C
    UnityEngine::Vector2 GetPreferredValues(float width, float height);
    // public UnityEngine.Vector2 GetPreferredValues(System.String text)
    // Offset: 0x100552C
    UnityEngine::Vector2 GetPreferredValues(::Il2CppString* text);
    // public UnityEngine.Vector2 GetPreferredValues(System.String text, System.Single width, System.Single height)
    // Offset: 0x10056AC
    UnityEngine::Vector2 GetPreferredValues(::Il2CppString* text, float width, float height);
    // protected System.Single GetPreferredWidth()
    // Offset: 0x100071C
    float GetPreferredWidth();
    // protected System.Single GetPreferredWidth(UnityEngine.Vector2 margin)
    // Offset: 0x1005468
    float GetPreferredWidth(UnityEngine::Vector2 margin);
    // protected System.Single GetPreferredHeight()
    // Offset: 0x1000890
    float GetPreferredHeight();
    // protected System.Single GetPreferredHeight(UnityEngine.Vector2 margin)
    // Offset: 0x10054C0
    float GetPreferredHeight(UnityEngine::Vector2 margin);
    // public UnityEngine.Vector2 GetRenderedValues()
    // Offset: 0x10057E0
    UnityEngine::Vector2 GetRenderedValues();
    // public UnityEngine.Vector2 GetRenderedValues(System.Boolean onlyVisibleCharacters)
    // Offset: 0x10058A8
    UnityEngine::Vector2 GetRenderedValues(bool onlyVisibleCharacters);
    // protected System.Single GetRenderedWidth()
    // Offset: 0x1000A18
    float GetRenderedWidth();
    // protected System.Single GetRenderedWidth(System.Boolean onlyVisibleCharacters)
    // Offset: 0x1005C8C
    float GetRenderedWidth(bool onlyVisibleCharacters);
    // protected System.Single GetRenderedHeight()
    // Offset: 0x1000A34
    float GetRenderedHeight();
    // protected System.Single GetRenderedHeight(System.Boolean onlyVisibleCharacters)
    // Offset: 0x1005C94
    float GetRenderedHeight(bool onlyVisibleCharacters);
    // protected UnityEngine.Vector2 CalculatePreferredValues(System.Single defaultFontSize, UnityEngine.Vector2 marginSize, System.Boolean ignoreTextAutoSizing)
    // Offset: 0x1005CB0
    UnityEngine::Vector2 CalculatePreferredValues(float defaultFontSize, UnityEngine::Vector2 marginSize, bool ignoreTextAutoSizing);
    // protected UnityEngine.Bounds GetCompoundBounds()
    // Offset: 0x100CBA0
    UnityEngine::Bounds GetCompoundBounds();
    // protected UnityEngine.Bounds GetTextBounds()
    // Offset: 0x1000238
    UnityEngine::Bounds GetTextBounds();
    // protected UnityEngine.Bounds GetTextBounds(System.Boolean onlyVisibleCharacters)
    // Offset: 0x1005980
    UnityEngine::Bounds GetTextBounds(bool onlyVisibleCharacters);
    // protected System.Void AdjustLineOffset(System.Int32 startIndex, System.Int32 endIndex, System.Single offset)
    // Offset: 0x100CBAC
    void AdjustLineOffset(int startIndex, int endIndex, float offset);
    // protected System.Void ResizeLineExtents(System.Int32 size)
    // Offset: 0x100CBB0
    void ResizeLineExtents(int size);
    // public TMPro.TMP_TextInfo GetTextInfo(System.String text)
    // Offset: 0x100CD9C
    TMPro::TMP_TextInfo* GetTextInfo(::Il2CppString* text);
    // public System.Void ComputeMarginSize()
    // Offset: 0x100CDA4
    void ComputeMarginSize();
    // protected System.Void SaveWordWrappingState(ref TMPro.WordWrapState state, System.Int32 index, System.Int32 count)
    // Offset: 0x1007BDC
    void SaveWordWrappingState(TMPro::WordWrapState& state, int index, int count);
    // protected System.Int32 RestoreWordWrappingState(ref TMPro.WordWrapState state)
    // Offset: 0x100C828
    int RestoreWordWrappingState(TMPro::WordWrapState& state);
    // protected System.Void SaveGlyphVertexInfo(System.Single padding, System.Single style_padding, UnityEngine.Color32 vertexColor)
    // Offset: 0x100CDA8
    void SaveGlyphVertexInfo(float padding, float style_padding, UnityEngine::Color32 vertexColor);
    // protected System.Void SaveSpriteVertexInfo(UnityEngine.Color32 vertexColor)
    // Offset: 0x100D7A8
    void SaveSpriteVertexInfo(UnityEngine::Color32 vertexColor);
    // protected System.Void FillCharacterVertexBuffers(System.Int32 i, System.Int32 index_X4)
    // Offset: 0x100DFD8
    void FillCharacterVertexBuffers(int i, int index_X4);
    // protected System.Void FillCharacterVertexBuffers(System.Int32 i, System.Int32 index_X4, System.Boolean isVolumetric)
    // Offset: 0x100E644
    void FillCharacterVertexBuffers(int i, int index_X4, bool isVolumetric);
    // protected System.Void FillSpriteVertexBuffers(System.Int32 i, System.Int32 index_X4)
    // Offset: 0x100F420
    void FillSpriteVertexBuffers(int i, int index_X4);
    // protected System.Void DrawUnderlineMesh(UnityEngine.Vector3 start, UnityEngine.Vector3 end, ref System.Int32 index, System.Single startScale, System.Single endScale, System.Single maxScale, System.Single sdfScale, UnityEngine.Color32 underlineColor)
    // Offset: 0x100FA8C
    void DrawUnderlineMesh(UnityEngine::Vector3 start, UnityEngine::Vector3 end, int& index, float startScale, float endScale, float maxScale, float sdfScale, UnityEngine::Color32 underlineColor);
    // protected System.Void DrawTextHighlight(UnityEngine.Vector3 start, UnityEngine.Vector3 end, ref System.Int32 index, UnityEngine.Color32 highlightColor)
    // Offset: 0x1010C30
    void DrawTextHighlight(UnityEngine::Vector3 start, UnityEngine::Vector3 end, int& index, UnityEngine::Color32 highlightColor);
    // protected System.Void LoadDefaultSettings()
    // Offset: 0x101118C
    void LoadDefaultSettings();
    // protected System.Void GetSpecialCharacters(TMPro.TMP_FontAsset fontAsset)
    // Offset: 0x1011360
    void GetSpecialCharacters(TMPro::TMP_FontAsset* fontAsset);
    // protected System.Void ReplaceTagWithCharacter(System.Int32[] chars, System.Int32 insertionIndex, System.Int32 tagLength, System.Char c)
    // Offset: 0x10115DC
    void ReplaceTagWithCharacter(::Array<int>* chars, int insertionIndex, int tagLength, ::Il2CppChar c);
    // protected TMPro.TMP_FontAsset GetFontAssetForWeight(System.Int32 fontWeight)
    // Offset: 0x1011660
    TMPro::TMP_FontAsset* GetFontAssetForWeight(int fontWeight);
    // protected System.Void SetActiveSubMeshes(System.Boolean state)
    // Offset: 0x10116E4
    void SetActiveSubMeshes(bool state);
    // protected System.Void ClearSubMeshObjects()
    // Offset: 0x10116E8
    void ClearSubMeshObjects();
    // public System.Void ClearMesh()
    // Offset: 0x10116EC
    void ClearMesh();
    // public System.Void ClearMesh(System.Boolean uploadGeometry)
    // Offset: 0x10116F0
    void ClearMesh(bool uploadGeometry);
    // public System.String GetParsedText()
    // Offset: 0x10116F4
    ::Il2CppString* GetParsedText();
    // protected UnityEngine.Vector2 PackUV(System.Single x, System.Single y, System.Single scale)
    // Offset: 0x1010BF8
    UnityEngine::Vector2 PackUV(float x, float y, float scale);
    // protected System.Single PackUV(System.Single x, System.Single y)
    // Offset: 0x10117F4
    float PackUV(float x, float y);
    // System.Void InternalUpdate()
    // Offset: 0x101182C
    void InternalUpdate();
    // protected System.Int32 HexToInt(System.Char hex)
    // Offset: 0x1011830
    int HexToInt(::Il2CppChar hex);
    // protected System.Int32 GetUTF16(System.String text, System.Int32 i)
    // Offset: 0x100406C
    int GetUTF16(::Il2CppString* text, int i);
    // protected System.Int32 GetUTF16(System.Text.StringBuilder text, System.Int32 i)
    // Offset: 0x100483C
    int GetUTF16(System::Text::StringBuilder* text, int i);
    // protected System.Int32 GetUTF32(System.String text, System.Int32 i)
    // Offset: 0x1003F28
    int GetUTF32(::Il2CppString* text, int i);
    // protected System.Int32 GetUTF32(System.Text.StringBuilder text, System.Int32 i)
    // Offset: 0x10046F8
    int GetUTF32(System::Text::StringBuilder* text, int i);
    // protected UnityEngine.Color32 HexCharsToColor(System.Char[] hexChars, System.Int32 tagCount)
    // Offset: 0x101185C
    UnityEngine::Color32 HexCharsToColor(::Array<::Il2CppChar>* hexChars, int tagCount);
    // protected UnityEngine.Color32 HexCharsToColor(System.Char[] hexChars, System.Int32 startIndex, System.Int32 length)
    // Offset: 0x1011CB4
    UnityEngine::Color32 HexCharsToColor(::Array<::Il2CppChar>* hexChars, int startIndex, int length);
    // private System.Int32 GetAttributeParameters(System.Char[] chars, System.Int32 startIndex, System.Int32 length, ref System.Single[] parameters)
    // Offset: 0x1011F30
    int GetAttributeParameters(::Array<::Il2CppChar>* chars, int startIndex, int length, ::Array<float>*& parameters);
    // protected System.Single ConvertToFloat(System.Char[] chars, System.Int32 startIndex, System.Int32 length)
    // Offset: 0x101215C
    float ConvertToFloat(::Array<::Il2CppChar>* chars, int startIndex, int length);
    // protected System.Single ConvertToFloat(System.Char[] chars, System.Int32 startIndex, System.Int32 length, out System.Int32 lastIndex)
    // Offset: 0x1011FF0
    float ConvertToFloat(::Array<::Il2CppChar>* chars, int startIndex, int length, int& lastIndex);
    // protected System.Boolean ValidateHtmlTag(TMPro.TMP_Text/UnicodeChar[] chars, System.Int32 startIndex, out System.Int32 endIndex)
    // Offset: 0x1007F2C
    bool ValidateHtmlTag(::Array<TMPro::TMP_Text::UnicodeChar>* chars, int startIndex, int& endIndex);
    // public override UnityEngine.Color get_color()
    // Offset: 0xFFE8C4
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: UnityEngine.Color Graphic::get_color()
    UnityEngine::Color get_color();
    // public override System.Void set_color(UnityEngine.Color value)
    // Offset: 0xFFE8D8
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::set_color(UnityEngine.Color value)
    void set_color(UnityEngine::Color value);
    // public UnityEngine.Transform get_transform()
    // Offset: 0xFFD720
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: UnityEngine.Transform Graphic::UnityEngine.UI.ICanvasElement.get_transform()
    // Base method: UnityEngine.Transform Component::get_transform()
    // Base method: UnityEngine.Transform ICanvasElement::get_transform()
    UnityEngine::Transform* get_transform();
    // Creating proxy method: UnityEngine_UI_ICanvasElement_get_transform
    // Maps to method: get_transform
    UnityEngine::Transform* UnityEngine_UI_ICanvasElement_get_transform();
    // Creating proxy method: UnityEngine_UI_ICanvasElement_get_transform
    // Maps to method: get_transform
    // Skipping redundant proxy method: UnityEngine_UI_ICanvasElement_get_transform
    // public UnityEngine.RectTransform get_rectTransform()
    // Offset: 0xFFD7CC
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: UnityEngine.RectTransform Graphic::get_rectTransform()
    // Base method: UnityEngine.RectTransform IClippable::get_rectTransform()
    UnityEngine::RectTransform* get_rectTransform();
    // public override System.Void CrossFadeColor(UnityEngine.Color targetColor, System.Single duration, System.Boolean ignoreTimeScale, System.Boolean useAlpha)
    // Offset: 0x1000CAC
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::CrossFadeColor(UnityEngine.Color targetColor, System.Single duration, System.Boolean ignoreTimeScale, System.Boolean useAlpha)
    void CrossFadeColor(UnityEngine::Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha);
    // public override System.Void CrossFadeAlpha(System.Single alpha, System.Single duration, System.Boolean ignoreTimeScale)
    // Offset: 0x1000D40
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::CrossFadeAlpha(System.Single alpha, System.Single duration, System.Boolean ignoreTimeScale)
    void CrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale);
    // protected System.Void .ctor()
    // Offset: 0x1012180
    // Implemented from: UnityEngine.UI.MaskableGraphic
    // Base method: System.Void MaskableGraphic::.ctor()
    // Base method: System.Void Graphic::.ctor()
    // Base method: System.Void UIBehaviour::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TMP_Text* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TMP_Text::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TMP_Text*, creationType>()));
    }
    // static private System.Void .cctor()
    // Offset: 0x10128E4
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::.cctor()
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // TMPro.TMP_Text
  // WARNING Not writing size check since size may be invalid!
}
DEFINE_IL2CPP_ARG_TYPE(TMPro::TMP_Text*, "TMPro", "TMP_Text");
DEFINE_IL2CPP_ARG_TYPE(TMPro::TMP_Text::TextInputSources, "TMPro", "TMP_Text/TextInputSources");
DEFINE_IL2CPP_ARG_TYPE(TMPro::TMP_Text::UnicodeChar, "TMPro", "TMP_Text/UnicodeChar");
