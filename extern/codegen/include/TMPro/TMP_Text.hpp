// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
#pragma pack(push, 8)
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: UnityEngine.UI.MaskableGraphic
#include "UnityEngine/UI/MaskableGraphic.hpp"
// Including type: TMPro.TMP_RichTextTagStack`1
#include "TMPro/TMP_RichTextTagStack_1.hpp"
// Including type: TMPro.MaterialReference
#include "TMPro/MaterialReference.hpp"
// Including type: TMPro.ColorMode
#include "TMPro/ColorMode.hpp"
// Including type: TMPro.VertexGradient
#include "TMPro/VertexGradient.hpp"
// Including type: TMPro.FontWeight
#include "TMPro/FontWeight.hpp"
// Including type: TMPro.FontStyles
#include "TMPro/FontStyles.hpp"
// Including type: TMPro.TMP_FontStyleStack
#include "TMPro/TMP_FontStyleStack.hpp"
// Including type: TMPro.TextAlignmentOptions
#include "TMPro/TextAlignmentOptions.hpp"
// Including type: TMPro.TextOverflowModes
#include "TMPro/TextOverflowModes.hpp"
// Including type: TMPro.TextureMappingOptions
#include "TMPro/TextureMappingOptions.hpp"
// Including type: TMPro.TextRenderFlags
#include "TMPro/TextRenderFlags.hpp"
// Including type: TMPro.VertexSortingOrder
#include "TMPro/VertexSortingOrder.hpp"
// Including type: UnityEngine.Matrix4x4
#include "UnityEngine/Matrix4x4.hpp"
// Including type: TMPro.WordWrapState
#include "TMPro/WordWrapState.hpp"
// Including type: TMPro.TMP_TextElementType
#include "TMPro/TMP_TextElementType.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: RichTextTagAttribute
  struct RichTextTagAttribute;
  // Forward declaring type: TMP_FontAsset
  class TMP_FontAsset;
  // Forward declaring type: TMP_ColorGradient
  class TMP_ColorGradient;
  // Forward declaring type: TMP_SpriteAsset
  class TMP_SpriteAsset;
  // Forward declaring type: TMP_TextInfo
  class TMP_TextInfo;
  // Forward declaring type: TMP_SpriteAnimator
  class TMP_SpriteAnimator;
  // Forward declaring type: TMP_CharacterInfo
  struct TMP_CharacterInfo;
  // Forward declaring type: TMP_TextElement
  class TMP_TextElement;
  // Forward declaring type: TMP_Character
  class TMP_Character;
  // Forward declaring type: TMP_VertexDataUpdateFlags
  struct TMP_VertexDataUpdateFlags;
}
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Material
  class Material;
  // Skipping declaration: Vector3 because it is already included!
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: RectTransform
  class RectTransform;
  // Forward declaring type: Mesh
  class Mesh;
  // Forward declaring type: Bounds
  struct Bounds;
}
// Forward declaring namespace: System::Collections::Generic
namespace System::Collections::Generic {
  // Forward declaring type: Dictionary`2<TKey, TValue>
  template<typename TKey, typename TValue>
  class Dictionary_2;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: LayoutElement
  class LayoutElement;
}
// Forward declaring namespace: System::Text
namespace System::Text {
  // Forward declaring type: StringBuilder
  class StringBuilder;
}
// Completed forward declares
// Type namespace: TMPro
namespace TMPro {
  // Autogenerated type: TMPro.TMP_Text
  class TMP_Text : public UnityEngine::UI::MaskableGraphic {
    public:
    // Nested type: TMPro::TMP_Text::TextInputSources
    struct TextInputSources;
    // Nested type: TMPro::TMP_Text::UnicodeChar
    struct UnicodeChar;
    // Autogenerated type: TMPro.TMP_Text/TextInputSources
    struct TextInputSources : public System::Enum {
      public:
      // public System.Int32 value__
      // Offset: 0x0
      int value;
      // Creating value type constructor for type: TextInputSources
      constexpr TextInputSources(int value_ = {}) noexcept : value{value_} {}
      // Creating conversion operator: operator int
      constexpr operator int() const noexcept {
        return value;
      }
      // static field const value: static public TMPro.TMP_Text/TextInputSources Text
      static constexpr const int Text = 0;
      // Get static field: static public TMPro.TMP_Text/TextInputSources Text
      static TMPro::TMP_Text::TextInputSources _get_Text();
      // Set static field: static public TMPro.TMP_Text/TextInputSources Text
      static void _set_Text(TMPro::TMP_Text::TextInputSources value);
      // static field const value: static public TMPro.TMP_Text/TextInputSources SetText
      static constexpr const int SetText = 1;
      // Get static field: static public TMPro.TMP_Text/TextInputSources SetText
      static TMPro::TMP_Text::TextInputSources _get_SetText();
      // Set static field: static public TMPro.TMP_Text/TextInputSources SetText
      static void _set_SetText(TMPro::TMP_Text::TextInputSources value);
      // static field const value: static public TMPro.TMP_Text/TextInputSources SetCharArray
      static constexpr const int SetCharArray = 2;
      // Get static field: static public TMPro.TMP_Text/TextInputSources SetCharArray
      static TMPro::TMP_Text::TextInputSources _get_SetCharArray();
      // Set static field: static public TMPro.TMP_Text/TextInputSources SetCharArray
      static void _set_SetCharArray(TMPro::TMP_Text::TextInputSources value);
      // static field const value: static public TMPro.TMP_Text/TextInputSources String
      static constexpr const int String = 3;
      // Get static field: static public TMPro.TMP_Text/TextInputSources String
      static TMPro::TMP_Text::TextInputSources _get_String();
      // Set static field: static public TMPro.TMP_Text/TextInputSources String
      static void _set_String(TMPro::TMP_Text::TextInputSources value);
    }; // TMPro.TMP_Text/TextInputSources
    // protected System.String m_text
    // Offset: 0xC0
    ::Il2CppString* m_text;
    // protected System.Boolean m_isRightToLeft
    // Offset: 0xC8
    bool m_isRightToLeft;
    // protected TMPro.TMP_FontAsset m_fontAsset
    // Offset: 0xD0
    TMPro::TMP_FontAsset* m_fontAsset;
    // protected TMPro.TMP_FontAsset m_currentFontAsset
    // Offset: 0xD8
    TMPro::TMP_FontAsset* m_currentFontAsset;
    // protected System.Boolean m_isSDFShader
    // Offset: 0xE0
    bool m_isSDFShader;
    // protected UnityEngine.Material m_sharedMaterial
    // Offset: 0xE8
    UnityEngine::Material* m_sharedMaterial;
    // protected UnityEngine.Material m_currentMaterial
    // Offset: 0xF0
    UnityEngine::Material* m_currentMaterial;
    // protected TMPro.MaterialReference[] m_materialReferences
    // Offset: 0xF8
    ::Array<TMPro::MaterialReference>* m_materialReferences;
    // protected System.Collections.Generic.Dictionary`2<System.Int32,System.Int32> m_materialReferenceIndexLookup
    // Offset: 0x100
    System::Collections::Generic::Dictionary_2<int, int>* m_materialReferenceIndexLookup;
    // protected TMPro.TMP_RichTextTagStack`1<TMPro.MaterialReference> m_materialReferenceStack
    // Offset: 0x108
    TMPro::TMP_RichTextTagStack_1<TMPro::MaterialReference> m_materialReferenceStack;
    // protected System.Int32 m_currentMaterialIndex
    // Offset: 0x150
    int m_currentMaterialIndex;
    // protected UnityEngine.Material[] m_fontSharedMaterials
    // Offset: 0x158
    ::Array<UnityEngine::Material*>* m_fontSharedMaterials;
    // protected UnityEngine.Material m_fontMaterial
    // Offset: 0x160
    UnityEngine::Material* m_fontMaterial;
    // protected UnityEngine.Material[] m_fontMaterials
    // Offset: 0x168
    ::Array<UnityEngine::Material*>* m_fontMaterials;
    // protected System.Boolean m_isMaterialDirty
    // Offset: 0x170
    bool m_isMaterialDirty;
    // protected UnityEngine.Color32 m_fontColor32
    // Offset: 0x174
    UnityEngine::Color32 m_fontColor32;
    // protected UnityEngine.Color m_fontColor
    // Offset: 0x178
    UnityEngine::Color m_fontColor;
    // protected UnityEngine.Color32 m_underlineColor
    // Offset: 0x188
    UnityEngine::Color32 m_underlineColor;
    // protected UnityEngine.Color32 m_strikethroughColor
    // Offset: 0x18C
    UnityEngine::Color32 m_strikethroughColor;
    // protected UnityEngine.Color32 m_highlightColor
    // Offset: 0x190
    UnityEngine::Color32 m_highlightColor;
    // protected UnityEngine.Vector4 m_highlightPadding
    // Offset: 0x194
    UnityEngine::Vector4 m_highlightPadding;
    // protected System.Boolean m_enableVertexGradient
    // Offset: 0x1A4
    bool m_enableVertexGradient;
    // protected TMPro.ColorMode m_colorMode
    // Offset: 0x1A8
    TMPro::ColorMode m_colorMode;
    // protected TMPro.VertexGradient m_fontColorGradient
    // Offset: 0x1AC
    TMPro::VertexGradient m_fontColorGradient;
    // protected TMPro.TMP_ColorGradient m_fontColorGradientPreset
    // Offset: 0x1F0
    TMPro::TMP_ColorGradient* m_fontColorGradientPreset;
    // protected TMPro.TMP_SpriteAsset m_spriteAsset
    // Offset: 0x1F8
    TMPro::TMP_SpriteAsset* m_spriteAsset;
    // protected System.Boolean m_tintAllSprites
    // Offset: 0x200
    bool m_tintAllSprites;
    // protected System.Boolean m_tintSprite
    // Offset: 0x201
    bool m_tintSprite;
    // protected UnityEngine.Color32 m_spriteColor
    // Offset: 0x204
    UnityEngine::Color32 m_spriteColor;
    // protected System.Boolean m_overrideHtmlColors
    // Offset: 0x208
    bool m_overrideHtmlColors;
    // protected UnityEngine.Color32 m_faceColor
    // Offset: 0x20C
    UnityEngine::Color32 m_faceColor;
    // protected UnityEngine.Color32 m_outlineColor
    // Offset: 0x210
    UnityEngine::Color32 m_outlineColor;
    // protected System.Single m_outlineWidth
    // Offset: 0x214
    float m_outlineWidth;
    // protected System.Single m_fontSize
    // Offset: 0x218
    float m_fontSize;
    // protected System.Single m_currentFontSize
    // Offset: 0x21C
    float m_currentFontSize;
    // protected System.Single m_fontSizeBase
    // Offset: 0x220
    float m_fontSizeBase;
    // protected TMPro.TMP_RichTextTagStack`1<System.Single> m_sizeStack
    // Offset: 0x228
    TMPro::TMP_RichTextTagStack_1<float> m_sizeStack;
    // protected TMPro.FontWeight m_fontWeight
    // Offset: 0x240
    TMPro::FontWeight m_fontWeight;
    // protected TMPro.FontWeight m_FontWeightInternal
    // Offset: 0x244
    TMPro::FontWeight m_FontWeightInternal;
    // protected TMPro.TMP_RichTextTagStack`1<TMPro.FontWeight> m_FontWeightStack
    // Offset: 0x248
    TMPro::TMP_RichTextTagStack_1<TMPro::FontWeight> m_FontWeightStack;
    // protected System.Boolean m_enableAutoSizing
    // Offset: 0x260
    bool m_enableAutoSizing;
    // protected System.Single m_maxFontSize
    // Offset: 0x264
    float m_maxFontSize;
    // protected System.Single m_minFontSize
    // Offset: 0x268
    float m_minFontSize;
    // protected System.Single m_fontSizeMin
    // Offset: 0x26C
    float m_fontSizeMin;
    // protected System.Single m_fontSizeMax
    // Offset: 0x270
    float m_fontSizeMax;
    // protected TMPro.FontStyles m_fontStyle
    // Offset: 0x274
    TMPro::FontStyles m_fontStyle;
    // protected TMPro.FontStyles m_FontStyleInternal
    // Offset: 0x278
    TMPro::FontStyles m_FontStyleInternal;
    // protected TMPro.TMP_FontStyleStack m_fontStyleStack
    // Offset: 0x27C
    TMPro::TMP_FontStyleStack m_fontStyleStack;
    // protected System.Boolean m_isUsingBold
    // Offset: 0x286
    bool m_isUsingBold;
    // protected TMPro.TextAlignmentOptions m_textAlignment
    // Offset: 0x288
    TMPro::TextAlignmentOptions m_textAlignment;
    // protected TMPro.TextAlignmentOptions m_lineJustification
    // Offset: 0x28C
    TMPro::TextAlignmentOptions m_lineJustification;
    // protected TMPro.TMP_RichTextTagStack`1<TMPro.TextAlignmentOptions> m_lineJustificationStack
    // Offset: 0x290
    TMPro::TMP_RichTextTagStack_1<TMPro::TextAlignmentOptions> m_lineJustificationStack;
    // protected UnityEngine.Vector3[] m_textContainerLocalCorners
    // Offset: 0x2A8
    ::Array<UnityEngine::Vector3>* m_textContainerLocalCorners;
    // protected System.Single m_characterSpacing
    // Offset: 0x2B0
    float m_characterSpacing;
    // protected System.Single m_cSpacing
    // Offset: 0x2B4
    float m_cSpacing;
    // protected System.Single m_monoSpacing
    // Offset: 0x2B8
    float m_monoSpacing;
    // protected System.Single m_wordSpacing
    // Offset: 0x2BC
    float m_wordSpacing;
    // protected System.Single m_lineSpacing
    // Offset: 0x2C0
    float m_lineSpacing;
    // protected System.Single m_lineSpacingDelta
    // Offset: 0x2C4
    float m_lineSpacingDelta;
    // protected System.Single m_lineHeight
    // Offset: 0x2C8
    float m_lineHeight;
    // protected System.Single m_lineSpacingMax
    // Offset: 0x2CC
    float m_lineSpacingMax;
    // protected System.Single m_paragraphSpacing
    // Offset: 0x2D0
    float m_paragraphSpacing;
    // protected System.Single m_charWidthMaxAdj
    // Offset: 0x2D4
    float m_charWidthMaxAdj;
    // protected System.Single m_charWidthAdjDelta
    // Offset: 0x2D8
    float m_charWidthAdjDelta;
    // protected System.Boolean m_enableWordWrapping
    // Offset: 0x2DC
    bool m_enableWordWrapping;
    // protected System.Boolean m_isCharacterWrappingEnabled
    // Offset: 0x2DD
    bool m_isCharacterWrappingEnabled;
    // protected System.Boolean m_isNonBreakingSpace
    // Offset: 0x2DE
    bool m_isNonBreakingSpace;
    // protected System.Boolean m_isIgnoringAlignment
    // Offset: 0x2DF
    bool m_isIgnoringAlignment;
    // protected System.Single m_wordWrappingRatios
    // Offset: 0x2E0
    float m_wordWrappingRatios;
    // protected TMPro.TextOverflowModes m_overflowMode
    // Offset: 0x2E4
    TMPro::TextOverflowModes m_overflowMode;
    // protected System.Int32 m_firstOverflowCharacterIndex
    // Offset: 0x2E8
    int m_firstOverflowCharacterIndex;
    // protected TMPro.TMP_Text m_linkedTextComponent
    // Offset: 0x2F0
    TMPro::TMP_Text* m_linkedTextComponent;
    // protected System.Boolean m_isLinkedTextComponent
    // Offset: 0x2F8
    bool m_isLinkedTextComponent;
    // protected System.Boolean m_isTextTruncated
    // Offset: 0x2F9
    bool m_isTextTruncated;
    // protected System.Boolean m_enableKerning
    // Offset: 0x2FA
    bool m_enableKerning;
    // protected System.Boolean m_enableExtraPadding
    // Offset: 0x2FB
    bool m_enableExtraPadding;
    // protected System.Boolean checkPaddingRequired
    // Offset: 0x2FC
    bool checkPaddingRequired;
    // protected System.Boolean m_isRichText
    // Offset: 0x2FD
    bool m_isRichText;
    // protected System.Boolean m_parseCtrlCharacters
    // Offset: 0x2FE
    bool m_parseCtrlCharacters;
    // protected System.Boolean m_isOverlay
    // Offset: 0x2FF
    bool m_isOverlay;
    // protected System.Boolean m_isOrthographic
    // Offset: 0x300
    bool m_isOrthographic;
    // protected System.Boolean m_isCullingEnabled
    // Offset: 0x301
    bool m_isCullingEnabled;
    // protected System.Boolean m_ignoreRectMaskCulling
    // Offset: 0x302
    bool m_ignoreRectMaskCulling;
    // protected System.Boolean m_ignoreCulling
    // Offset: 0x303
    bool m_ignoreCulling;
    // protected TMPro.TextureMappingOptions m_horizontalMapping
    // Offset: 0x304
    TMPro::TextureMappingOptions m_horizontalMapping;
    // protected TMPro.TextureMappingOptions m_verticalMapping
    // Offset: 0x308
    TMPro::TextureMappingOptions m_verticalMapping;
    // protected System.Single m_uvLineOffset
    // Offset: 0x30C
    float m_uvLineOffset;
    // protected TMPro.TextRenderFlags m_renderMode
    // Offset: 0x310
    TMPro::TextRenderFlags m_renderMode;
    // protected TMPro.VertexSortingOrder m_geometrySortingOrder
    // Offset: 0x314
    TMPro::VertexSortingOrder m_geometrySortingOrder;
    // protected System.Boolean m_VertexBufferAutoSizeReduction
    // Offset: 0x318
    bool m_VertexBufferAutoSizeReduction;
    // protected System.Int32 m_firstVisibleCharacter
    // Offset: 0x31C
    int m_firstVisibleCharacter;
    // protected System.Int32 m_maxVisibleCharacters
    // Offset: 0x320
    int m_maxVisibleCharacters;
    // protected System.Int32 m_maxVisibleWords
    // Offset: 0x324
    int m_maxVisibleWords;
    // protected System.Int32 m_maxVisibleLines
    // Offset: 0x328
    int m_maxVisibleLines;
    // protected System.Boolean m_useMaxVisibleDescender
    // Offset: 0x32C
    bool m_useMaxVisibleDescender;
    // protected System.Int32 m_pageToDisplay
    // Offset: 0x330
    int m_pageToDisplay;
    // protected System.Boolean m_isNewPage
    // Offset: 0x334
    bool m_isNewPage;
    // protected UnityEngine.Vector4 m_margin
    // Offset: 0x338
    UnityEngine::Vector4 m_margin;
    // protected System.Single m_marginLeft
    // Offset: 0x348
    float m_marginLeft;
    // protected System.Single m_marginRight
    // Offset: 0x34C
    float m_marginRight;
    // protected System.Single m_marginWidth
    // Offset: 0x350
    float m_marginWidth;
    // protected System.Single m_marginHeight
    // Offset: 0x354
    float m_marginHeight;
    // protected System.Single m_width
    // Offset: 0x358
    float m_width;
    // protected TMPro.TMP_TextInfo m_textInfo
    // Offset: 0x360
    TMPro::TMP_TextInfo* m_textInfo;
    // protected System.Boolean m_havePropertiesChanged
    // Offset: 0x368
    bool m_havePropertiesChanged;
    // protected System.Boolean m_isUsingLegacyAnimationComponent
    // Offset: 0x369
    bool m_isUsingLegacyAnimationComponent;
    // protected UnityEngine.Transform m_transform
    // Offset: 0x370
    UnityEngine::Transform* m_transform;
    // protected UnityEngine.RectTransform m_rectTransform
    // Offset: 0x378
    UnityEngine::RectTransform* m_rectTransform;
    // private System.Boolean <autoSizeTextContainer>k__BackingField
    // Offset: 0x380
    bool autoSizeTextContainer;
    // protected System.Boolean m_autoSizeTextContainer
    // Offset: 0x381
    bool m_autoSizeTextContainer;
    // protected UnityEngine.Mesh m_mesh
    // Offset: 0x388
    UnityEngine::Mesh* m_mesh;
    // protected System.Boolean m_isVolumetricText
    // Offset: 0x390
    bool m_isVolumetricText;
    // protected TMPro.TMP_SpriteAnimator m_spriteAnimator
    // Offset: 0x398
    TMPro::TMP_SpriteAnimator* m_spriteAnimator;
    // protected System.Single m_flexibleHeight
    // Offset: 0x3A0
    float m_flexibleHeight;
    // protected System.Single m_flexibleWidth
    // Offset: 0x3A4
    float m_flexibleWidth;
    // protected System.Single m_minWidth
    // Offset: 0x3A8
    float m_minWidth;
    // protected System.Single m_minHeight
    // Offset: 0x3AC
    float m_minHeight;
    // protected System.Single m_maxWidth
    // Offset: 0x3B0
    float m_maxWidth;
    // protected System.Single m_maxHeight
    // Offset: 0x3B4
    float m_maxHeight;
    // protected UnityEngine.UI.LayoutElement m_LayoutElement
    // Offset: 0x3B8
    UnityEngine::UI::LayoutElement* m_LayoutElement;
    // protected System.Single m_preferredWidth
    // Offset: 0x3C0
    float m_preferredWidth;
    // protected System.Single m_renderedWidth
    // Offset: 0x3C4
    float m_renderedWidth;
    // protected System.Boolean m_isPreferredWidthDirty
    // Offset: 0x3C8
    bool m_isPreferredWidthDirty;
    // protected System.Single m_preferredHeight
    // Offset: 0x3CC
    float m_preferredHeight;
    // protected System.Single m_renderedHeight
    // Offset: 0x3D0
    float m_renderedHeight;
    // protected System.Boolean m_isPreferredHeightDirty
    // Offset: 0x3D4
    bool m_isPreferredHeightDirty;
    // protected System.Boolean m_isCalculatingPreferredValues
    // Offset: 0x3D5
    bool m_isCalculatingPreferredValues;
    // private System.Int32 m_recursiveCount
    // Offset: 0x3D8
    int m_recursiveCount;
    // protected System.Int32 m_layoutPriority
    // Offset: 0x3DC
    int m_layoutPriority;
    // protected System.Boolean m_isCalculateSizeRequired
    // Offset: 0x3E0
    bool m_isCalculateSizeRequired;
    // protected System.Boolean m_isLayoutDirty
    // Offset: 0x3E1
    bool m_isLayoutDirty;
    // protected System.Boolean m_verticesAlreadyDirty
    // Offset: 0x3E2
    bool m_verticesAlreadyDirty;
    // protected System.Boolean m_layoutAlreadyDirty
    // Offset: 0x3E3
    bool m_layoutAlreadyDirty;
    // protected System.Boolean m_isAwake
    // Offset: 0x3E4
    bool m_isAwake;
    // System.Boolean m_isWaitingOnResourceLoad
    // Offset: 0x3E5
    bool m_isWaitingOnResourceLoad;
    // System.Boolean m_isInputParsingRequired
    // Offset: 0x3E6
    bool m_isInputParsingRequired;
    // TMPro.TMP_Text/TextInputSources m_inputSource
    // Offset: 0x3E8
    TMPro::TMP_Text::TextInputSources m_inputSource;
    // protected System.String old_text
    // Offset: 0x3F0
    ::Il2CppString* old_text;
    // protected System.Single m_fontScale
    // Offset: 0x3F8
    float m_fontScale;
    // protected System.Single m_fontScaleMultiplier
    // Offset: 0x3FC
    float m_fontScaleMultiplier;
    // protected System.Char[] m_htmlTag
    // Offset: 0x400
    ::Array<::Il2CppChar>* m_htmlTag;
    // protected TMPro.RichTextTagAttribute[] m_xmlAttribute
    // Offset: 0x408
    ::Array<TMPro::RichTextTagAttribute>* m_xmlAttribute;
    // protected System.Single[] m_attributeParameterValues
    // Offset: 0x410
    ::Array<float>* m_attributeParameterValues;
    // protected System.Single tag_LineIndent
    // Offset: 0x418
    float tag_LineIndent;
    // protected System.Single tag_Indent
    // Offset: 0x41C
    float tag_Indent;
    // protected TMPro.TMP_RichTextTagStack`1<System.Single> m_indentStack
    // Offset: 0x420
    TMPro::TMP_RichTextTagStack_1<float> m_indentStack;
    // protected System.Boolean tag_NoParsing
    // Offset: 0x438
    bool tag_NoParsing;
    // protected System.Boolean m_isParsingText
    // Offset: 0x439
    bool m_isParsingText;
    // protected UnityEngine.Matrix4x4 m_FXMatrix
    // Offset: 0x43C
    UnityEngine::Matrix4x4 m_FXMatrix;
    // protected System.Boolean m_isFXMatrixSet
    // Offset: 0x47C
    bool m_isFXMatrixSet;
    // protected TMPro.TMP_Text/UnicodeChar[] m_TextParsingBuffer
    // Offset: 0x480
    ::Array<TMPro::TMP_Text::UnicodeChar>* m_TextParsingBuffer;
    // private TMPro.TMP_CharacterInfo[] m_internalCharacterInfo
    // Offset: 0x488
    ::Array<TMPro::TMP_CharacterInfo>* m_internalCharacterInfo;
    // protected System.Char[] m_input_CharArray
    // Offset: 0x490
    ::Array<::Il2CppChar>* m_input_CharArray;
    // private System.Int32 m_charArray_Length
    // Offset: 0x498
    int m_charArray_Length;
    // protected System.Int32 m_totalCharacterCount
    // Offset: 0x49C
    int m_totalCharacterCount;
    // protected TMPro.WordWrapState m_SavedWordWrapState
    // Offset: 0x4A0
    TMPro::WordWrapState m_SavedWordWrapState;
    // protected TMPro.WordWrapState m_SavedLineState
    // Offset: 0x730
    TMPro::WordWrapState m_SavedLineState;
    // protected System.Int32 m_characterCount
    // Offset: 0x9C0
    int m_characterCount;
    // protected System.Int32 m_firstCharacterOfLine
    // Offset: 0x9C4
    int m_firstCharacterOfLine;
    // protected System.Int32 m_firstVisibleCharacterOfLine
    // Offset: 0x9C8
    int m_firstVisibleCharacterOfLine;
    // protected System.Int32 m_lastCharacterOfLine
    // Offset: 0x9CC
    int m_lastCharacterOfLine;
    // protected System.Int32 m_lastVisibleCharacterOfLine
    // Offset: 0x9D0
    int m_lastVisibleCharacterOfLine;
    // protected System.Int32 m_lineNumber
    // Offset: 0x9D4
    int m_lineNumber;
    // protected System.Int32 m_lineVisibleCharacterCount
    // Offset: 0x9D8
    int m_lineVisibleCharacterCount;
    // protected System.Int32 m_pageNumber
    // Offset: 0x9DC
    int m_pageNumber;
    // protected System.Single m_maxAscender
    // Offset: 0x9E0
    float m_maxAscender;
    // protected System.Single m_maxCapHeight
    // Offset: 0x9E4
    float m_maxCapHeight;
    // protected System.Single m_maxDescender
    // Offset: 0x9E8
    float m_maxDescender;
    // protected System.Single m_maxLineAscender
    // Offset: 0x9EC
    float m_maxLineAscender;
    // protected System.Single m_maxLineDescender
    // Offset: 0x9F0
    float m_maxLineDescender;
    // protected System.Single m_startOfLineAscender
    // Offset: 0x9F4
    float m_startOfLineAscender;
    // protected System.Single m_lineOffset
    // Offset: 0x9F8
    float m_lineOffset;
    // protected TMPro.Extents m_meshExtents
    // Offset: 0x9FC
    TMPro::Extents m_meshExtents;
    // protected UnityEngine.Color32 m_htmlColor
    // Offset: 0xA0C
    UnityEngine::Color32 m_htmlColor;
    // protected TMPro.TMP_RichTextTagStack`1<UnityEngine.Color32> m_colorStack
    // Offset: 0xA10
    TMPro::TMP_RichTextTagStack_1<UnityEngine::Color32> m_colorStack;
    // protected TMPro.TMP_RichTextTagStack`1<UnityEngine.Color32> m_underlineColorStack
    // Offset: 0xA28
    TMPro::TMP_RichTextTagStack_1<UnityEngine::Color32> m_underlineColorStack;
    // protected TMPro.TMP_RichTextTagStack`1<UnityEngine.Color32> m_strikethroughColorStack
    // Offset: 0xA40
    TMPro::TMP_RichTextTagStack_1<UnityEngine::Color32> m_strikethroughColorStack;
    // protected TMPro.TMP_RichTextTagStack`1<UnityEngine.Color32> m_highlightColorStack
    // Offset: 0xA58
    TMPro::TMP_RichTextTagStack_1<UnityEngine::Color32> m_highlightColorStack;
    // protected TMPro.TMP_ColorGradient m_colorGradientPreset
    // Offset: 0xA70
    TMPro::TMP_ColorGradient* m_colorGradientPreset;
    // protected TMPro.TMP_RichTextTagStack`1<TMPro.TMP_ColorGradient> m_colorGradientStack
    // Offset: 0xA78
    TMPro::TMP_RichTextTagStack_1<TMPro::TMP_ColorGradient*> m_colorGradientStack;
    // protected System.Single m_tabSpacing
    // Offset: 0xA90
    float m_tabSpacing;
    // protected System.Single m_spacing
    // Offset: 0xA94
    float m_spacing;
    // protected TMPro.TMP_RichTextTagStack`1<System.Int32> m_styleStack
    // Offset: 0xA98
    TMPro::TMP_RichTextTagStack_1<int> m_styleStack;
    // protected TMPro.TMP_RichTextTagStack`1<System.Int32> m_actionStack
    // Offset: 0xAB0
    TMPro::TMP_RichTextTagStack_1<int> m_actionStack;
    // protected System.Single m_padding
    // Offset: 0xAC8
    float m_padding;
    // protected System.Single m_baselineOffset
    // Offset: 0xACC
    float m_baselineOffset;
    // protected TMPro.TMP_RichTextTagStack`1<System.Single> m_baselineOffsetStack
    // Offset: 0xAD0
    TMPro::TMP_RichTextTagStack_1<float> m_baselineOffsetStack;
    // protected System.Single m_xAdvance
    // Offset: 0xAE8
    float m_xAdvance;
    // protected TMPro.TMP_TextElementType m_textElementType
    // Offset: 0xAEC
    TMPro::TMP_TextElementType m_textElementType;
    // protected TMPro.TMP_TextElement m_cached_TextElement
    // Offset: 0xAF0
    TMPro::TMP_TextElement* m_cached_TextElement;
    // protected TMPro.TMP_Character m_cached_Underline_Character
    // Offset: 0xAF8
    TMPro::TMP_Character* m_cached_Underline_Character;
    // protected TMPro.TMP_Character m_cached_Ellipsis_Character
    // Offset: 0xB00
    TMPro::TMP_Character* m_cached_Ellipsis_Character;
    // protected TMPro.TMP_SpriteAsset m_defaultSpriteAsset
    // Offset: 0xB08
    TMPro::TMP_SpriteAsset* m_defaultSpriteAsset;
    // protected TMPro.TMP_SpriteAsset m_currentSpriteAsset
    // Offset: 0xB10
    TMPro::TMP_SpriteAsset* m_currentSpriteAsset;
    // protected System.Int32 m_spriteCount
    // Offset: 0xB18
    int m_spriteCount;
    // protected System.Int32 m_spriteIndex
    // Offset: 0xB1C
    int m_spriteIndex;
    // protected System.Int32 m_spriteAnimationID
    // Offset: 0xB20
    int m_spriteAnimationID;
    // protected System.Boolean m_ignoreActiveState
    // Offset: 0xB24
    bool m_ignoreActiveState;
    // private readonly System.Single[] k_Power
    // Offset: 0xB28
    ::Array<float>* k_Power;
    // Get static field: static protected UnityEngine.Color32 s_colorWhite
    static UnityEngine::Color32 _get_s_colorWhite();
    // Set static field: static protected UnityEngine.Color32 s_colorWhite
    static void _set_s_colorWhite(UnityEngine::Color32 value);
    // Get static field: static protected UnityEngine.Vector2 k_LargePositiveVector2
    static UnityEngine::Vector2 _get_k_LargePositiveVector2();
    // Set static field: static protected UnityEngine.Vector2 k_LargePositiveVector2
    static void _set_k_LargePositiveVector2(UnityEngine::Vector2 value);
    // Get static field: static protected UnityEngine.Vector2 k_LargeNegativeVector2
    static UnityEngine::Vector2 _get_k_LargeNegativeVector2();
    // Set static field: static protected UnityEngine.Vector2 k_LargeNegativeVector2
    static void _set_k_LargeNegativeVector2(UnityEngine::Vector2 value);
    // Get static field: static protected System.Single k_LargePositiveFloat
    static float _get_k_LargePositiveFloat();
    // Set static field: static protected System.Single k_LargePositiveFloat
    static void _set_k_LargePositiveFloat(float value);
    // Get static field: static protected System.Single k_LargeNegativeFloat
    static float _get_k_LargeNegativeFloat();
    // Set static field: static protected System.Single k_LargeNegativeFloat
    static void _set_k_LargeNegativeFloat(float value);
    // Get static field: static protected System.Int32 k_LargePositiveInt
    static int _get_k_LargePositiveInt();
    // Set static field: static protected System.Int32 k_LargePositiveInt
    static void _set_k_LargePositiveInt(int value);
    // Get static field: static protected System.Int32 k_LargeNegativeInt
    static int _get_k_LargeNegativeInt();
    // Set static field: static protected System.Int32 k_LargeNegativeInt
    static void _set_k_LargeNegativeInt(int value);
    // public System.String get_text()
    // Offset: 0xF8F57C
    ::Il2CppString* get_text();
    // public System.Void set_text(System.String value)
    // Offset: 0xF8F584
    void set_text(::Il2CppString* value);
    // public System.Boolean get_isRightToLeftText()
    // Offset: 0xF8F62C
    bool get_isRightToLeftText();
    // public System.Void set_isRightToLeftText(System.Boolean value)
    // Offset: 0xF8F634
    void set_isRightToLeftText(bool value);
    // public TMPro.TMP_FontAsset get_font()
    // Offset: 0xF8F6A0
    TMPro::TMP_FontAsset* get_font();
    // public System.Void set_font(TMPro.TMP_FontAsset value)
    // Offset: 0xF8F6A8
    void set_font(TMPro::TMP_FontAsset* value);
    // public UnityEngine.Material get_fontSharedMaterial()
    // Offset: 0xF8F798
    UnityEngine::Material* get_fontSharedMaterial();
    // public System.Void set_fontSharedMaterial(UnityEngine.Material value)
    // Offset: 0xF8F7A0
    void set_fontSharedMaterial(UnityEngine::Material* value);
    // public UnityEngine.Material[] get_fontSharedMaterials()
    // Offset: 0xF8F87C
    ::Array<UnityEngine::Material*>* get_fontSharedMaterials();
    // public System.Void set_fontSharedMaterials(UnityEngine.Material[] value)
    // Offset: 0xF8F88C
    void set_fontSharedMaterials(::Array<UnityEngine::Material*>* value);
    // public UnityEngine.Material get_fontMaterial()
    // Offset: 0xF8F8E8
    UnityEngine::Material* get_fontMaterial();
    // public System.Void set_fontMaterial(UnityEngine.Material value)
    // Offset: 0xF8F8FC
    void set_fontMaterial(UnityEngine::Material* value);
    // public UnityEngine.Material[] get_fontMaterials()
    // Offset: 0xF8FA1C
    ::Array<UnityEngine::Material*>* get_fontMaterials();
    // public System.Void set_fontMaterials(UnityEngine.Material[] value)
    // Offset: 0xF8FA30
    void set_fontMaterials(::Array<UnityEngine::Material*>* value);
    // public System.Single get_alpha()
    // Offset: 0xF8FB48
    float get_alpha();
    // public System.Void set_alpha(System.Single value)
    // Offset: 0xF8FB50
    void set_alpha(float value);
    // public System.Boolean get_enableVertexGradient()
    // Offset: 0xF8FB7C
    bool get_enableVertexGradient();
    // public System.Void set_enableVertexGradient(System.Boolean value)
    // Offset: 0xF8FB84
    void set_enableVertexGradient(bool value);
    // public TMPro.VertexGradient get_colorGradient()
    // Offset: 0xF8FBBC
    TMPro::VertexGradient get_colorGradient();
    // public System.Void set_colorGradient(TMPro.VertexGradient value)
    // Offset: 0xF8FBE8
    void set_colorGradient(TMPro::VertexGradient value);
    // public TMPro.TMP_ColorGradient get_colorGradientPreset()
    // Offset: 0xF8FC28
    TMPro::TMP_ColorGradient* get_colorGradientPreset();
    // public System.Void set_colorGradientPreset(TMPro.TMP_ColorGradient value)
    // Offset: 0xF8FC30
    void set_colorGradientPreset(TMPro::TMP_ColorGradient* value);
    // public TMPro.TMP_SpriteAsset get_spriteAsset()
    // Offset: 0xF8FC70
    TMPro::TMP_SpriteAsset* get_spriteAsset();
    // public System.Void set_spriteAsset(TMPro.TMP_SpriteAsset value)
    // Offset: 0xF8FC78
    void set_spriteAsset(TMPro::TMP_SpriteAsset* value);
    // public System.Boolean get_tintAllSprites()
    // Offset: 0xF8FCD4
    bool get_tintAllSprites();
    // public System.Void set_tintAllSprites(System.Boolean value)
    // Offset: 0xF8FCDC
    void set_tintAllSprites(bool value);
    // public System.Boolean get_overrideColorTags()
    // Offset: 0xF8FD14
    bool get_overrideColorTags();
    // public System.Void set_overrideColorTags(System.Boolean value)
    // Offset: 0xF8FD1C
    void set_overrideColorTags(bool value);
    // public UnityEngine.Color32 get_faceColor()
    // Offset: 0xF8FD54
    UnityEngine::Color32 get_faceColor();
    // public System.Void set_faceColor(UnityEngine.Color32 value)
    // Offset: 0xF8FE30
    void set_faceColor(UnityEngine::Color32 value);
    // public UnityEngine.Color32 get_outlineColor()
    // Offset: 0xF8FEC8
    UnityEngine::Color32 get_outlineColor();
    // public System.Void set_outlineColor(UnityEngine.Color32 value)
    // Offset: 0xF8FFA4
    void set_outlineColor(UnityEngine::Color32 value);
    // public System.Single get_outlineWidth()
    // Offset: 0xF90028
    float get_outlineWidth();
    // public System.Void set_outlineWidth(System.Single value)
    // Offset: 0xF900F8
    void set_outlineWidth(float value);
    // public System.Single get_fontSize()
    // Offset: 0xF9015C
    float get_fontSize();
    // public System.Void set_fontSize(System.Single value)
    // Offset: 0xF90164
    void set_fontSize(float value);
    // public System.Single get_fontScale()
    // Offset: 0xF901D0
    float get_fontScale();
    // public TMPro.FontWeight get_fontWeight()
    // Offset: 0xF901D8
    TMPro::FontWeight get_fontWeight();
    // public System.Void set_fontWeight(TMPro.FontWeight value)
    // Offset: 0xF901E0
    void set_fontWeight(TMPro::FontWeight value);
    // public System.Single get_pixelsPerUnit()
    // Offset: 0xF90240
    float get_pixelsPerUnit();
    // public System.Boolean get_enableAutoSizing()
    // Offset: 0xF903D0
    bool get_enableAutoSizing();
    // public System.Void set_enableAutoSizing(System.Boolean value)
    // Offset: 0xF903D8
    void set_enableAutoSizing(bool value);
    // public System.Single get_fontSizeMin()
    // Offset: 0xF90434
    float get_fontSizeMin();
    // public System.Void set_fontSizeMin(System.Single value)
    // Offset: 0xF9043C
    void set_fontSizeMin(float value);
    // public System.Single get_fontSizeMax()
    // Offset: 0xF9048C
    float get_fontSizeMax();
    // public System.Void set_fontSizeMax(System.Single value)
    // Offset: 0xF90494
    void set_fontSizeMax(float value);
    // public TMPro.FontStyles get_fontStyle()
    // Offset: 0xF904E4
    TMPro::FontStyles get_fontStyle();
    // public System.Void set_fontStyle(TMPro.FontStyles value)
    // Offset: 0xF904EC
    void set_fontStyle(TMPro::FontStyles value);
    // public System.Boolean get_isUsingBold()
    // Offset: 0xF9054C
    bool get_isUsingBold();
    // public TMPro.TextAlignmentOptions get_alignment()
    // Offset: 0xF90554
    TMPro::TextAlignmentOptions get_alignment();
    // public System.Void set_alignment(TMPro.TextAlignmentOptions value)
    // Offset: 0xF9055C
    void set_alignment(TMPro::TextAlignmentOptions value);
    // public System.Single get_characterSpacing()
    // Offset: 0xF90588
    float get_characterSpacing();
    // public System.Void set_characterSpacing(System.Single value)
    // Offset: 0xF90590
    void set_characterSpacing(float value);
    // public System.Single get_wordSpacing()
    // Offset: 0xF905EC
    float get_wordSpacing();
    // public System.Void set_wordSpacing(System.Single value)
    // Offset: 0xF905F4
    void set_wordSpacing(float value);
    // public System.Single get_lineSpacing()
    // Offset: 0xF90650
    float get_lineSpacing();
    // public System.Void set_lineSpacing(System.Single value)
    // Offset: 0xF90658
    void set_lineSpacing(float value);
    // public System.Single get_lineSpacingAdjustment()
    // Offset: 0xF906B4
    float get_lineSpacingAdjustment();
    // public System.Void set_lineSpacingAdjustment(System.Single value)
    // Offset: 0xF906BC
    void set_lineSpacingAdjustment(float value);
    // public System.Single get_paragraphSpacing()
    // Offset: 0xF90718
    float get_paragraphSpacing();
    // public System.Void set_paragraphSpacing(System.Single value)
    // Offset: 0xF90720
    void set_paragraphSpacing(float value);
    // public System.Single get_characterWidthAdjustment()
    // Offset: 0xF9077C
    float get_characterWidthAdjustment();
    // public System.Void set_characterWidthAdjustment(System.Single value)
    // Offset: 0xF90784
    void set_characterWidthAdjustment(float value);
    // public System.Boolean get_enableWordWrapping()
    // Offset: 0xF907E0
    bool get_enableWordWrapping();
    // public System.Void set_enableWordWrapping(System.Boolean value)
    // Offset: 0xF907E8
    void set_enableWordWrapping(bool value);
    // public System.Single get_wordWrappingRatios()
    // Offset: 0xF90854
    float get_wordWrappingRatios();
    // public System.Void set_wordWrappingRatios(System.Single value)
    // Offset: 0xF9085C
    void set_wordWrappingRatios(float value);
    // public TMPro.TextOverflowModes get_overflowMode()
    // Offset: 0xF908B8
    TMPro::TextOverflowModes get_overflowMode();
    // public System.Void set_overflowMode(TMPro.TextOverflowModes value)
    // Offset: 0xF908C0
    void set_overflowMode(TMPro::TextOverflowModes value);
    // public System.Boolean get_isTextOverflowing()
    // Offset: 0xF9091C
    bool get_isTextOverflowing();
    // public System.Int32 get_firstOverflowCharacterIndex()
    // Offset: 0xF9092C
    int get_firstOverflowCharacterIndex();
    // public TMPro.TMP_Text get_linkedTextComponent()
    // Offset: 0xF90934
    TMPro::TMP_Text* get_linkedTextComponent();
    // public System.Void set_linkedTextComponent(TMPro.TMP_Text value)
    // Offset: 0xF9093C
    void set_linkedTextComponent(TMPro::TMP_Text* value);
    // public System.Boolean get_isLinkedTextComponent()
    // Offset: 0xF90BAC
    bool get_isLinkedTextComponent();
    // public System.Void set_isLinkedTextComponent(System.Boolean value)
    // Offset: 0xF90B50
    void set_isLinkedTextComponent(bool value);
    // public System.Boolean get_isTextTruncated()
    // Offset: 0xF90BB4
    bool get_isTextTruncated();
    // public System.Boolean get_enableKerning()
    // Offset: 0xF90BBC
    bool get_enableKerning();
    // public System.Void set_enableKerning(System.Boolean value)
    // Offset: 0xF90BC4
    void set_enableKerning(bool value);
    // public System.Boolean get_extraPadding()
    // Offset: 0xF90C2C
    bool get_extraPadding();
    // public System.Void set_extraPadding(System.Boolean value)
    // Offset: 0xF90C34
    void set_extraPadding(bool value);
    // public System.Boolean get_richText()
    // Offset: 0xF90C98
    bool get_richText();
    // public System.Void set_richText(System.Boolean value)
    // Offset: 0xF90CA0
    void set_richText(bool value);
    // public System.Boolean get_parseCtrlCharacters()
    // Offset: 0xF90D0C
    bool get_parseCtrlCharacters();
    // public System.Void set_parseCtrlCharacters(System.Boolean value)
    // Offset: 0xF90D14
    void set_parseCtrlCharacters(bool value);
    // public System.Boolean get_isOverlay()
    // Offset: 0xF90D80
    bool get_isOverlay();
    // public System.Void set_isOverlay(System.Boolean value)
    // Offset: 0xF90D88
    void set_isOverlay(bool value);
    // public System.Boolean get_isOrthographic()
    // Offset: 0xF90DEC
    bool get_isOrthographic();
    // public System.Void set_isOrthographic(System.Boolean value)
    // Offset: 0xF90DF4
    void set_isOrthographic(bool value);
    // public System.Boolean get_enableCulling()
    // Offset: 0xF90E2C
    bool get_enableCulling();
    // public System.Void set_enableCulling(System.Boolean value)
    // Offset: 0xF90E34
    void set_enableCulling(bool value);
    // public System.Boolean get_ignoreRectMaskCulling()
    // Offset: 0xF90E84
    bool get_ignoreRectMaskCulling();
    // public System.Void set_ignoreRectMaskCulling(System.Boolean value)
    // Offset: 0xF90E8C
    void set_ignoreRectMaskCulling(bool value);
    // public System.Boolean get_ignoreVisibility()
    // Offset: 0xF90EB4
    bool get_ignoreVisibility();
    // public System.Void set_ignoreVisibility(System.Boolean value)
    // Offset: 0xF90EBC
    void set_ignoreVisibility(bool value);
    // public TMPro.TextureMappingOptions get_horizontalMapping()
    // Offset: 0xF90EE4
    TMPro::TextureMappingOptions get_horizontalMapping();
    // public System.Void set_horizontalMapping(TMPro.TextureMappingOptions value)
    // Offset: 0xF90EEC
    void set_horizontalMapping(TMPro::TextureMappingOptions value);
    // public TMPro.TextureMappingOptions get_verticalMapping()
    // Offset: 0xF90F18
    TMPro::TextureMappingOptions get_verticalMapping();
    // public System.Void set_verticalMapping(TMPro.TextureMappingOptions value)
    // Offset: 0xF90F20
    void set_verticalMapping(TMPro::TextureMappingOptions value);
    // public System.Single get_mappingUvLineOffset()
    // Offset: 0xF90F4C
    float get_mappingUvLineOffset();
    // public System.Void set_mappingUvLineOffset(System.Single value)
    // Offset: 0xF90F54
    void set_mappingUvLineOffset(float value);
    // public TMPro.TextRenderFlags get_renderMode()
    // Offset: 0xF90F80
    TMPro::TextRenderFlags get_renderMode();
    // public System.Void set_renderMode(TMPro.TextRenderFlags value)
    // Offset: 0xF90F88
    void set_renderMode(TMPro::TextRenderFlags value);
    // public TMPro.VertexSortingOrder get_geometrySortingOrder()
    // Offset: 0xF90FA4
    TMPro::VertexSortingOrder get_geometrySortingOrder();
    // public System.Void set_geometrySortingOrder(TMPro.VertexSortingOrder value)
    // Offset: 0xF90FAC
    void set_geometrySortingOrder(TMPro::VertexSortingOrder value);
    // public System.Boolean get_vertexBufferAutoSizeReduction()
    // Offset: 0xF90FC8
    bool get_vertexBufferAutoSizeReduction();
    // public System.Void set_vertexBufferAutoSizeReduction(System.Boolean value)
    // Offset: 0xF90FD0
    void set_vertexBufferAutoSizeReduction(bool value);
    // public System.Int32 get_firstVisibleCharacter()
    // Offset: 0xF90FF0
    int get_firstVisibleCharacter();
    // public System.Void set_firstVisibleCharacter(System.Int32 value)
    // Offset: 0xF90FF8
    void set_firstVisibleCharacter(int value);
    // public System.Int32 get_maxVisibleCharacters()
    // Offset: 0xF91024
    int get_maxVisibleCharacters();
    // public System.Void set_maxVisibleCharacters(System.Int32 value)
    // Offset: 0xF9102C
    void set_maxVisibleCharacters(int value);
    // public System.Int32 get_maxVisibleWords()
    // Offset: 0xF91058
    int get_maxVisibleWords();
    // public System.Void set_maxVisibleWords(System.Int32 value)
    // Offset: 0xF91060
    void set_maxVisibleWords(int value);
    // public System.Int32 get_maxVisibleLines()
    // Offset: 0xF9108C
    int get_maxVisibleLines();
    // public System.Void set_maxVisibleLines(System.Int32 value)
    // Offset: 0xF91094
    void set_maxVisibleLines(int value);
    // public System.Boolean get_useMaxVisibleDescender()
    // Offset: 0xF910C4
    bool get_useMaxVisibleDescender();
    // public System.Void set_useMaxVisibleDescender(System.Boolean value)
    // Offset: 0xF910CC
    void set_useMaxVisibleDescender(bool value);
    // public System.Int32 get_pageToDisplay()
    // Offset: 0xF91100
    int get_pageToDisplay();
    // public System.Void set_pageToDisplay(System.Int32 value)
    // Offset: 0xF91108
    void set_pageToDisplay(int value);
    // public UnityEngine.Vector4 get_margin()
    // Offset: 0xF91134
    UnityEngine::Vector4 get_margin();
    // public System.Void set_margin(UnityEngine.Vector4 value)
    // Offset: 0xF91148
    void set_margin(UnityEngine::Vector4 value);
    // public TMPro.TMP_TextInfo get_textInfo()
    // Offset: 0xF9126C
    TMPro::TMP_TextInfo* get_textInfo();
    // public System.Boolean get_havePropertiesChanged()
    // Offset: 0xF91274
    bool get_havePropertiesChanged();
    // public System.Void set_havePropertiesChanged(System.Boolean value)
    // Offset: 0xF8DD5C
    void set_havePropertiesChanged(bool value);
    // public System.Boolean get_isUsingLegacyAnimationComponent()
    // Offset: 0xF9127C
    bool get_isUsingLegacyAnimationComponent();
    // public System.Void set_isUsingLegacyAnimationComponent(System.Boolean value)
    // Offset: 0xF91284
    void set_isUsingLegacyAnimationComponent(bool value);
    // public System.Boolean get_autoSizeTextContainer()
    // Offset: 0xF91290
    bool get_autoSizeTextContainer();
    // public System.Void set_autoSizeTextContainer(System.Boolean value)
    // Offset: 0xF91298
    void set_autoSizeTextContainer(bool value);
    // public UnityEngine.Mesh get_mesh()
    // Offset: 0xF912A4
    UnityEngine::Mesh* get_mesh();
    // public System.Boolean get_isVolumetricText()
    // Offset: 0xF912AC
    bool get_isVolumetricText();
    // public System.Void set_isVolumetricText(System.Boolean value)
    // Offset: 0xF912B4
    void set_isVolumetricText(bool value);
    // public UnityEngine.Bounds get_bounds()
    // Offset: 0xF91338
    UnityEngine::Bounds get_bounds();
    // public UnityEngine.Bounds get_textBounds()
    // Offset: 0xF913E8
    UnityEngine::Bounds get_textBounds();
    // protected TMPro.TMP_SpriteAnimator get_spriteAnimator()
    // Offset: 0xF916C0
    TMPro::TMP_SpriteAnimator* get_spriteAnimator();
    // public System.Single get_flexibleHeight()
    // Offset: 0xF917D0
    float get_flexibleHeight();
    // public System.Single get_flexibleWidth()
    // Offset: 0xF917D8
    float get_flexibleWidth();
    // public System.Single get_minWidth()
    // Offset: 0xF917E0
    float get_minWidth();
    // public System.Single get_minHeight()
    // Offset: 0xF917E8
    float get_minHeight();
    // public System.Single get_maxWidth()
    // Offset: 0xF917F0
    float get_maxWidth();
    // public System.Single get_maxHeight()
    // Offset: 0xF917F8
    float get_maxHeight();
    // protected UnityEngine.UI.LayoutElement get_layoutElement()
    // Offset: 0xF91800
    UnityEngine::UI::LayoutElement* get_layoutElement();
    // public System.Single get_preferredWidth()
    // Offset: 0xF918AC
    float get_preferredWidth();
    // public System.Single get_preferredHeight()
    // Offset: 0xF91A20
    float get_preferredHeight();
    // public System.Single get_renderedWidth()
    // Offset: 0xF91BDC
    float get_renderedWidth();
    // public System.Single get_renderedHeight()
    // Offset: 0xF91BE4
    float get_renderedHeight();
    // public System.Int32 get_layoutPriority()
    // Offset: 0xF91C14
    int get_layoutPriority();
    // protected System.Void LoadFontAsset()
    // Offset: 0xF91C1C
    void LoadFontAsset();
    // protected System.Void SetSharedMaterial(UnityEngine.Material mat)
    // Offset: 0xF91C20
    void SetSharedMaterial(UnityEngine::Material* mat);
    // protected UnityEngine.Material GetMaterial(UnityEngine.Material mat)
    // Offset: 0xF91C24
    UnityEngine::Material* GetMaterial(UnityEngine::Material* mat);
    // protected System.Void SetFontBaseMaterial(UnityEngine.Material mat)
    // Offset: 0xF91C2C
    void SetFontBaseMaterial(UnityEngine::Material* mat);
    // protected UnityEngine.Material[] GetSharedMaterials()
    // Offset: 0xF91C30
    ::Array<UnityEngine::Material*>* GetSharedMaterials();
    // protected System.Void SetSharedMaterials(UnityEngine.Material[] materials)
    // Offset: 0xF91C38
    void SetSharedMaterials(::Array<UnityEngine::Material*>* materials);
    // protected UnityEngine.Material[] GetMaterials(UnityEngine.Material[] mats)
    // Offset: 0xF91C3C
    ::Array<UnityEngine::Material*>* GetMaterials(::Array<UnityEngine::Material*>* mats);
    // protected UnityEngine.Material CreateMaterialInstance(UnityEngine.Material source)
    // Offset: 0xF91C44
    UnityEngine::Material* CreateMaterialInstance(UnityEngine::Material* source);
    // protected System.Void SetVertexColorGradient(TMPro.TMP_ColorGradient gradient)
    // Offset: 0xF91D00
    void SetVertexColorGradient(TMPro::TMP_ColorGradient* gradient);
    // protected System.Void SetTextSortingOrder(TMPro.VertexSortingOrder order)
    // Offset: 0xF91DD8
    void SetTextSortingOrder(TMPro::VertexSortingOrder order);
    // protected System.Void SetTextSortingOrder(System.Int32[] order)
    // Offset: 0xF91DDC
    void SetTextSortingOrder(::Array<int>* order);
    // protected System.Void SetFaceColor(UnityEngine.Color32 color)
    // Offset: 0xF91DE0
    void SetFaceColor(UnityEngine::Color32 color);
    // protected System.Void SetOutlineColor(UnityEngine.Color32 color)
    // Offset: 0xF91DE4
    void SetOutlineColor(UnityEngine::Color32 color);
    // protected System.Void SetOutlineThickness(System.Single thickness)
    // Offset: 0xF91DE8
    void SetOutlineThickness(float thickness);
    // protected System.Void SetShaderDepth()
    // Offset: 0xF91DEC
    void SetShaderDepth();
    // protected System.Void SetCulling()
    // Offset: 0xF91DF0
    void SetCulling();
    // protected System.Single GetPaddingForMaterial()
    // Offset: 0xF91DF4
    float GetPaddingForMaterial();
    // protected System.Single GetPaddingForMaterial(UnityEngine.Material mat)
    // Offset: 0xF91DFC
    float GetPaddingForMaterial(UnityEngine::Material* mat);
    // protected UnityEngine.Vector3[] GetTextContainerLocalCorners()
    // Offset: 0xF91E04
    ::Array<UnityEngine::Vector3>* GetTextContainerLocalCorners();
    // public System.Void ForceMeshUpdate()
    // Offset: 0xF91E0C
    void ForceMeshUpdate();
    // public System.Void ForceMeshUpdate(System.Boolean ignoreActiveState)
    // Offset: 0xF91E10
    void ForceMeshUpdate(bool ignoreActiveState);
    // System.Void SetTextInternal(System.String text)
    // Offset: 0xF91E14
    void SetTextInternal(::Il2CppString* text);
    // public System.Void UpdateGeometry(UnityEngine.Mesh mesh, System.Int32 index)
    // Offset: 0xF91E60
    void UpdateGeometry(UnityEngine::Mesh* mesh, int index);
    // public System.Void UpdateVertexData(TMPro.TMP_VertexDataUpdateFlags flags)
    // Offset: 0xF91E64
    void UpdateVertexData(TMPro::TMP_VertexDataUpdateFlags flags);
    // public System.Void UpdateVertexData()
    // Offset: 0xF91E68
    void UpdateVertexData();
    // public System.Void SetVertices(UnityEngine.Vector3[] vertices)
    // Offset: 0xF91E6C
    void SetVertices(::Array<UnityEngine::Vector3>* vertices);
    // public System.Void UpdateMeshPadding()
    // Offset: 0xF91E70
    void UpdateMeshPadding();
    // protected System.Void InternalCrossFadeColor(UnityEngine.Color targetColor, System.Single duration, System.Boolean ignoreTimeScale, System.Boolean useAlpha)
    // Offset: 0xF91F60
    void InternalCrossFadeColor(UnityEngine::Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha);
    // protected System.Void InternalCrossFadeAlpha(System.Single alpha, System.Single duration, System.Boolean ignoreTimeScale)
    // Offset: 0xF91F64
    void InternalCrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale);
    // protected System.Void ParseInputText()
    // Offset: 0xF91F68
    void ParseInputText();
    // public System.Void SetText(System.String text)
    // Offset: 0xF92CEC
    void SetText(::Il2CppString* text);
    // public System.Void SetText(System.String text, System.Boolean syncTextInputBox)
    // Offset: 0xF92CF4
    void SetText(::Il2CppString* text, bool syncTextInputBox);
    // public System.Void SetText(System.String text, System.Single arg0)
    // Offset: 0xF92D54
    void SetText(::Il2CppString* text, float arg0);
    // public System.Void SetText(System.String text, System.Single arg0, System.Single arg1)
    // Offset: 0xF92F58
    void SetText(::Il2CppString* text, float arg0, float arg1);
    // public System.Void SetText(System.String text, System.Single arg0, System.Single arg1, System.Single arg2)
    // Offset: 0xF92D64
    void SetText(::Il2CppString* text, float arg0, float arg1, float arg2);
    // public System.Void SetText(System.Text.StringBuilder text)
    // Offset: 0xF93124
    void SetText(System::Text::StringBuilder* text);
    // public System.Void SetCharArray(System.Char[] sourceText)
    // Offset: 0xF938B4
    void SetCharArray(::Array<::Il2CppChar>* sourceText);
    // public System.Void SetCharArray(System.Char[] sourceText, System.Int32 start, System.Int32 length)
    // Offset: 0xF942C4
    void SetCharArray(::Array<::Il2CppChar>* sourceText, int start, int length);
    // public System.Void SetCharArray(System.Int32[] sourceText, System.Int32 start, System.Int32 length)
    // Offset: 0xF946D8
    void SetCharArray(::Array<int>* sourceText, int start, int length);
    // protected System.Void SetTextArrayToCharArray(System.Char[] sourceText, ref TMPro.TMP_Text/UnicodeChar[] charBuffer)
    // Offset: 0xF928E8
    void SetTextArrayToCharArray(::Array<::Il2CppChar>* sourceText, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer);
    // protected System.Void StringToCharArray(System.String sourceText, ref TMPro.TMP_Text/UnicodeChar[] charBuffer)
    // Offset: 0xF91FD8
    void StringToCharArray(::Il2CppString* sourceText, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer);
    // protected System.Void StringBuilderToIntArray(System.Text.StringBuilder sourceText, ref TMPro.TMP_Text/UnicodeChar[] charBuffer)
    // Offset: 0xF93184
    void StringBuilderToIntArray(System::Text::StringBuilder* sourceText, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer);
    // private System.Boolean ReplaceOpeningStyleTag(ref System.String sourceText, System.Int32 srcIndex, out System.Int32 srcOffset, ref TMPro.TMP_Text/UnicodeChar[] charBuffer, ref System.Int32 writeIndex)
    // Offset: 0xF953F0
    bool ReplaceOpeningStyleTag(::Il2CppString*& sourceText, int srcIndex, int& srcOffset, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex);
    // private System.Boolean ReplaceOpeningStyleTag(ref System.Int32[] sourceText, System.Int32 srcIndex, out System.Int32 srcOffset, ref TMPro.TMP_Text/UnicodeChar[] charBuffer, ref System.Int32 writeIndex)
    // Offset: 0xF94C20
    bool ReplaceOpeningStyleTag(::Array<int>*& sourceText, int srcIndex, int& srcOffset, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex);
    // private System.Boolean ReplaceOpeningStyleTag(ref System.Char[] sourceText, System.Int32 srcIndex, out System.Int32 srcOffset, ref TMPro.TMP_Text/UnicodeChar[] charBuffer, ref System.Int32 writeIndex)
    // Offset: 0xF93DF4
    bool ReplaceOpeningStyleTag(::Array<::Il2CppChar>*& sourceText, int srcIndex, int& srcOffset, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex);
    // private System.Boolean ReplaceOpeningStyleTag(ref System.Text.StringBuilder sourceText, System.Int32 srcIndex, out System.Int32 srcOffset, ref TMPro.TMP_Text/UnicodeChar[] charBuffer, ref System.Int32 writeIndex)
    // Offset: 0xF95BC4
    bool ReplaceOpeningStyleTag(System::Text::StringBuilder*& sourceText, int srcIndex, int& srcOffset, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex);
    // private System.Boolean ReplaceClosingStyleTag(ref System.String sourceText, System.Int32 srcIndex, ref TMPro.TMP_Text/UnicodeChar[] charBuffer, ref System.Int32 writeIndex)
    // Offset: 0xF95660
    bool ReplaceClosingStyleTag(::Il2CppString*& sourceText, int srcIndex, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex);
    // private System.Boolean ReplaceClosingStyleTag(ref System.Int32[] sourceText, System.Int32 srcIndex, ref TMPro.TMP_Text/UnicodeChar[] charBuffer, ref System.Int32 writeIndex)
    // Offset: 0xF94E90
    bool ReplaceClosingStyleTag(::Array<int>*& sourceText, int srcIndex, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex);
    // private System.Boolean ReplaceClosingStyleTag(ref System.Char[] sourceText, System.Int32 srcIndex, ref TMPro.TMP_Text/UnicodeChar[] charBuffer, ref System.Int32 writeIndex)
    // Offset: 0xF94064
    bool ReplaceClosingStyleTag(::Array<::Il2CppChar>*& sourceText, int srcIndex, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex);
    // private System.Boolean ReplaceClosingStyleTag(ref System.Text.StringBuilder sourceText, System.Int32 srcIndex, ref TMPro.TMP_Text/UnicodeChar[] charBuffer, ref System.Int32 writeIndex)
    // Offset: 0xF95E34
    bool ReplaceClosingStyleTag(System::Text::StringBuilder*& sourceText, int srcIndex, ::Array<TMPro::TMP_Text::UnicodeChar>*& charBuffer, int& writeIndex);
    // private System.Boolean IsTagName(ref System.String text, System.String tag, System.Int32 index)
    // Offset: 0xF952E8
    bool IsTagName(::Il2CppString*& text, ::Il2CppString* tag, int index);
    // private System.Boolean IsTagName(ref System.Char[] text, System.String tag, System.Int32 index)
    // Offset: 0xF93CC4
    bool IsTagName(::Array<::Il2CppChar>*& text, ::Il2CppString* tag, int index);
    // private System.Boolean IsTagName(ref System.Int32[] text, System.String tag, System.Int32 index)
    // Offset: 0xF94AF0
    bool IsTagName(::Array<int>*& text, ::Il2CppString* tag, int index);
    // private System.Boolean IsTagName(ref System.Text.StringBuilder text, System.String tag, System.Int32 index)
    // Offset: 0xF95AB8
    bool IsTagName(System::Text::StringBuilder*& text, ::Il2CppString* tag, int index);
    // private System.Int32 GetTagHashCode(ref System.String text, System.Int32 index, out System.Int32 closeIndex)
    // Offset: 0xF96094
    int GetTagHashCode(::Il2CppString*& text, int index, int& closeIndex);
    // private System.Int32 GetTagHashCode(ref System.Char[] text, System.Int32 index, out System.Int32 closeIndex)
    // Offset: 0xF961CC
    int GetTagHashCode(::Array<::Il2CppChar>*& text, int index, int& closeIndex);
    // private System.Int32 GetTagHashCode(ref System.Int32[] text, System.Int32 index, out System.Int32 closeIndex)
    // Offset: 0xF9614C
    int GetTagHashCode(::Array<int>*& text, int index, int& closeIndex);
    // private System.Int32 GetTagHashCode(ref System.Text.StringBuilder text, System.Int32 index, out System.Int32 closeIndex)
    // Offset: 0xF9624C
    int GetTagHashCode(System::Text::StringBuilder*& text, int index, int& closeIndex);
    // private System.Void ResizeInternalArray(ref T[] array)
    // Offset: 0xFFFFFFFF
    template<class T>
    void ResizeInternalArray(::Array<T>*& array) {
      THROW_UNLESS(il2cpp_utils::RunGenericMethod(this, "ResizeInternalArray", {il2cpp_utils::il2cpp_type_check::il2cpp_no_arg_class<T>::get()}, array));
    }
    // protected System.Void AddFloatToCharArray(System.Double number, ref System.Int32 index, System.Int32 precision)
    // Offset: 0xF92F64
    void AddFloatToCharArray(double number, int& index, int precision);
    // protected System.Void AddIntToCharArray(System.Double number, ref System.Int32 index, System.Int32 precision)
    // Offset: 0xF96310
    void AddIntToCharArray(double number, int& index, int precision);
    // protected System.Int32 SetArraySizes(TMPro.TMP_Text/UnicodeChar[] chars)
    // Offset: 0xF9647C
    int SetArraySizes(::Array<TMPro::TMP_Text::UnicodeChar>* chars);
    // protected System.Void GenerateTextMesh()
    // Offset: 0xF96484
    void GenerateTextMesh();
    // public UnityEngine.Vector2 GetPreferredValues()
    // Offset: 0xF96488
    UnityEngine::Vector2 GetPreferredValues();
    // public UnityEngine.Vector2 GetPreferredValues(System.Single width, System.Single height)
    // Offset: 0xF96504
    UnityEngine::Vector2 GetPreferredValues(float width, float height);
    // public UnityEngine.Vector2 GetPreferredValues(System.String text)
    // Offset: 0xF966F4
    UnityEngine::Vector2 GetPreferredValues(::Il2CppString* text);
    // public UnityEngine.Vector2 GetPreferredValues(System.String text, System.Single width, System.Single height)
    // Offset: 0xF96874
    UnityEngine::Vector2 GetPreferredValues(::Il2CppString* text, float width, float height);
    // protected System.Single GetPreferredWidth()
    // Offset: 0xF918E4
    float GetPreferredWidth();
    // protected System.Single GetPreferredWidth(UnityEngine.Vector2 margin)
    // Offset: 0xF96630
    float GetPreferredWidth(UnityEngine::Vector2 margin);
    // protected System.Single GetPreferredHeight()
    // Offset: 0xF91A58
    float GetPreferredHeight();
    // protected System.Single GetPreferredHeight(UnityEngine.Vector2 margin)
    // Offset: 0xF96688
    float GetPreferredHeight(UnityEngine::Vector2 margin);
    // public UnityEngine.Vector2 GetRenderedValues()
    // Offset: 0xF969A8
    UnityEngine::Vector2 GetRenderedValues();
    // public UnityEngine.Vector2 GetRenderedValues(System.Boolean onlyVisibleCharacters)
    // Offset: 0xF96A70
    UnityEngine::Vector2 GetRenderedValues(bool onlyVisibleCharacters);
    // protected System.Single GetRenderedWidth()
    // Offset: 0xF91BE0
    float GetRenderedWidth();
    // protected System.Single GetRenderedWidth(System.Boolean onlyVisibleCharacters)
    // Offset: 0xF96E54
    float GetRenderedWidth(bool onlyVisibleCharacters);
    // protected System.Single GetRenderedHeight()
    // Offset: 0xF91BFC
    float GetRenderedHeight();
    // protected System.Single GetRenderedHeight(System.Boolean onlyVisibleCharacters)
    // Offset: 0xF96E5C
    float GetRenderedHeight(bool onlyVisibleCharacters);
    // protected UnityEngine.Vector2 CalculatePreferredValues(System.Single defaultFontSize, UnityEngine.Vector2 marginSize, System.Boolean ignoreTextAutoSizing)
    // Offset: 0xF96E78
    UnityEngine::Vector2 CalculatePreferredValues(float defaultFontSize, UnityEngine::Vector2 marginSize, bool ignoreTextAutoSizing);
    // protected UnityEngine.Bounds GetCompoundBounds()
    // Offset: 0xF9DD68
    UnityEngine::Bounds GetCompoundBounds();
    // protected UnityEngine.Bounds GetTextBounds()
    // Offset: 0xF91400
    UnityEngine::Bounds GetTextBounds();
    // protected UnityEngine.Bounds GetTextBounds(System.Boolean onlyVisibleCharacters)
    // Offset: 0xF96B48
    UnityEngine::Bounds GetTextBounds(bool onlyVisibleCharacters);
    // protected System.Void AdjustLineOffset(System.Int32 startIndex, System.Int32 endIndex, System.Single offset)
    // Offset: 0xF9DD74
    void AdjustLineOffset(int startIndex, int endIndex, float offset);
    // protected System.Void ResizeLineExtents(System.Int32 size)
    // Offset: 0xF9DD78
    void ResizeLineExtents(int size);
    // public TMPro.TMP_TextInfo GetTextInfo(System.String text)
    // Offset: 0xF9DF64
    TMPro::TMP_TextInfo* GetTextInfo(::Il2CppString* text);
    // public System.Void ComputeMarginSize()
    // Offset: 0xF9DF6C
    void ComputeMarginSize();
    // protected System.Void SaveWordWrappingState(ref TMPro.WordWrapState state, System.Int32 index, System.Int32 count)
    // Offset: 0xF98DA4
    void SaveWordWrappingState(TMPro::WordWrapState& state, int index, int count);
    // protected System.Int32 RestoreWordWrappingState(ref TMPro.WordWrapState state)
    // Offset: 0xF9D9F0
    int RestoreWordWrappingState(TMPro::WordWrapState& state);
    // protected System.Void SaveGlyphVertexInfo(System.Single padding, System.Single style_padding, UnityEngine.Color32 vertexColor)
    // Offset: 0xF9DF70
    void SaveGlyphVertexInfo(float padding, float style_padding, UnityEngine::Color32 vertexColor);
    // protected System.Void SaveSpriteVertexInfo(UnityEngine.Color32 vertexColor)
    // Offset: 0xF9E970
    void SaveSpriteVertexInfo(UnityEngine::Color32 vertexColor);
    // protected System.Void FillCharacterVertexBuffers(System.Int32 i, System.Int32 index_X4)
    // Offset: 0xF9F1A0
    void FillCharacterVertexBuffers(int i, int index_X4);
    // protected System.Void FillCharacterVertexBuffers(System.Int32 i, System.Int32 index_X4, System.Boolean isVolumetric)
    // Offset: 0xF9F80C
    void FillCharacterVertexBuffers(int i, int index_X4, bool isVolumetric);
    // protected System.Void FillSpriteVertexBuffers(System.Int32 i, System.Int32 index_X4)
    // Offset: 0xFA05E8
    void FillSpriteVertexBuffers(int i, int index_X4);
    // protected System.Void DrawUnderlineMesh(UnityEngine.Vector3 start, UnityEngine.Vector3 end, ref System.Int32 index, System.Single startScale, System.Single endScale, System.Single maxScale, System.Single sdfScale, UnityEngine.Color32 underlineColor)
    // Offset: 0xFA0C54
    void DrawUnderlineMesh(UnityEngine::Vector3 start, UnityEngine::Vector3 end, int& index, float startScale, float endScale, float maxScale, float sdfScale, UnityEngine::Color32 underlineColor);
    // protected System.Void DrawTextHighlight(UnityEngine.Vector3 start, UnityEngine.Vector3 end, ref System.Int32 index, UnityEngine.Color32 highlightColor)
    // Offset: 0xFA1DF8
    void DrawTextHighlight(UnityEngine::Vector3 start, UnityEngine::Vector3 end, int& index, UnityEngine::Color32 highlightColor);
    // protected System.Void LoadDefaultSettings()
    // Offset: 0xFA2354
    void LoadDefaultSettings();
    // protected System.Void GetSpecialCharacters(TMPro.TMP_FontAsset fontAsset)
    // Offset: 0xFA2528
    void GetSpecialCharacters(TMPro::TMP_FontAsset* fontAsset);
    // protected System.Void ReplaceTagWithCharacter(System.Int32[] chars, System.Int32 insertionIndex, System.Int32 tagLength, System.Char c)
    // Offset: 0xFA27A4
    void ReplaceTagWithCharacter(::Array<int>* chars, int insertionIndex, int tagLength, ::Il2CppChar c);
    // protected TMPro.TMP_FontAsset GetFontAssetForWeight(System.Int32 fontWeight)
    // Offset: 0xFA2828
    TMPro::TMP_FontAsset* GetFontAssetForWeight(int fontWeight);
    // protected System.Void SetActiveSubMeshes(System.Boolean state)
    // Offset: 0xFA28AC
    void SetActiveSubMeshes(bool state);
    // protected System.Void ClearSubMeshObjects()
    // Offset: 0xFA28B0
    void ClearSubMeshObjects();
    // public System.Void ClearMesh()
    // Offset: 0xFA28B4
    void ClearMesh();
    // public System.Void ClearMesh(System.Boolean uploadGeometry)
    // Offset: 0xFA28B8
    void ClearMesh(bool uploadGeometry);
    // public System.String GetParsedText()
    // Offset: 0xFA28BC
    ::Il2CppString* GetParsedText();
    // protected UnityEngine.Vector2 PackUV(System.Single x, System.Single y, System.Single scale)
    // Offset: 0xFA1DC0
    UnityEngine::Vector2 PackUV(float x, float y, float scale);
    // protected System.Single PackUV(System.Single x, System.Single y)
    // Offset: 0xFA29BC
    float PackUV(float x, float y);
    // System.Void InternalUpdate()
    // Offset: 0xFA29F4
    void InternalUpdate();
    // protected System.Int32 HexToInt(System.Char hex)
    // Offset: 0xFA29F8
    int HexToInt(::Il2CppChar hex);
    // protected System.Int32 GetUTF16(System.String text, System.Int32 i)
    // Offset: 0xF95234
    int GetUTF16(::Il2CppString* text, int i);
    // protected System.Int32 GetUTF16(System.Text.StringBuilder text, System.Int32 i)
    // Offset: 0xF95A04
    int GetUTF16(System::Text::StringBuilder* text, int i);
    // protected System.Int32 GetUTF32(System.String text, System.Int32 i)
    // Offset: 0xF950F0
    int GetUTF32(::Il2CppString* text, int i);
    // protected System.Int32 GetUTF32(System.Text.StringBuilder text, System.Int32 i)
    // Offset: 0xF958C0
    int GetUTF32(System::Text::StringBuilder* text, int i);
    // protected UnityEngine.Color32 HexCharsToColor(System.Char[] hexChars, System.Int32 tagCount)
    // Offset: 0xFA2A24
    UnityEngine::Color32 HexCharsToColor(::Array<::Il2CppChar>* hexChars, int tagCount);
    // protected UnityEngine.Color32 HexCharsToColor(System.Char[] hexChars, System.Int32 startIndex, System.Int32 length)
    // Offset: 0xFA2E7C
    UnityEngine::Color32 HexCharsToColor(::Array<::Il2CppChar>* hexChars, int startIndex, int length);
    // private System.Int32 GetAttributeParameters(System.Char[] chars, System.Int32 startIndex, System.Int32 length, ref System.Single[] parameters)
    // Offset: 0xFA30F8
    int GetAttributeParameters(::Array<::Il2CppChar>* chars, int startIndex, int length, ::Array<float>*& parameters);
    // protected System.Single ConvertToFloat(System.Char[] chars, System.Int32 startIndex, System.Int32 length)
    // Offset: 0xFA3324
    float ConvertToFloat(::Array<::Il2CppChar>* chars, int startIndex, int length);
    // protected System.Single ConvertToFloat(System.Char[] chars, System.Int32 startIndex, System.Int32 length, out System.Int32 lastIndex)
    // Offset: 0xFA31B8
    float ConvertToFloat(::Array<::Il2CppChar>* chars, int startIndex, int length, int& lastIndex);
    // protected System.Boolean ValidateHtmlTag(TMPro.TMP_Text/UnicodeChar[] chars, System.Int32 startIndex, out System.Int32 endIndex)
    // Offset: 0xF990F4
    bool ValidateHtmlTag(::Array<TMPro::TMP_Text::UnicodeChar>* chars, int startIndex, int& endIndex);
    // public override UnityEngine.Color get_color()
    // Offset: 0xF8FA8C
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: UnityEngine.Color Graphic::get_color()
    UnityEngine::Color get_color();
    // public override System.Void set_color(UnityEngine.Color value)
    // Offset: 0xF8FAA0
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::set_color(UnityEngine.Color value)
    void set_color(UnityEngine::Color value);
    // public UnityEngine.Transform get_transform()
    // Offset: 0xF8E8E8
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: UnityEngine.Transform Graphic::UnityEngine.UI.ICanvasElement.get_transform()
    // Base method: UnityEngine.Transform Component::get_transform()
    // Base method: UnityEngine.Transform ICanvasElement::get_transform()
    UnityEngine::Transform* get_transform();
    // Creating proxy method: UnityEngine_UI_ICanvasElement_get_transform
    // Maps to method: get_transform
    UnityEngine::Transform* UnityEngine_UI_ICanvasElement_get_transform();
    // Creating proxy method: UnityEngine_UI_ICanvasElement_get_transform
    // Maps to method: get_transform
    // Skipping redundant proxy method: UnityEngine_UI_ICanvasElement_get_transform
    // public UnityEngine.RectTransform get_rectTransform()
    // Offset: 0xF8E994
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: UnityEngine.RectTransform Graphic::get_rectTransform()
    // Base method: UnityEngine.RectTransform IClippable::get_rectTransform()
    UnityEngine::RectTransform* get_rectTransform();
    // public override System.Void CrossFadeColor(UnityEngine.Color targetColor, System.Single duration, System.Boolean ignoreTimeScale, System.Boolean useAlpha)
    // Offset: 0xF91E74
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::CrossFadeColor(UnityEngine.Color targetColor, System.Single duration, System.Boolean ignoreTimeScale, System.Boolean useAlpha)
    void CrossFadeColor(UnityEngine::Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha);
    // public override System.Void CrossFadeAlpha(System.Single alpha, System.Single duration, System.Boolean ignoreTimeScale)
    // Offset: 0xF91F08
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::CrossFadeAlpha(System.Single alpha, System.Single duration, System.Boolean ignoreTimeScale)
    void CrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale);
    // protected System.Void .ctor()
    // Offset: 0xFA3348
    // Implemented from: UnityEngine.UI.MaskableGraphic
    // Base method: System.Void MaskableGraphic::.ctor()
    // Base method: System.Void Graphic::.ctor()
    // Base method: System.Void UIBehaviour::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    static TMP_Text* New_ctor();
    // static private System.Void .cctor()
    // Offset: 0xFA3AAC
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::.cctor()
    // Base method: System.Void Object::.cctor()
    static void _cctor();
  }; // TMPro.TMP_Text
}
DEFINE_IL2CPP_ARG_TYPE(TMPro::TMP_Text*, "TMPro", "TMP_Text");
DEFINE_IL2CPP_ARG_TYPE(TMPro::TMP_Text::TextInputSources, "TMPro", "TMP_Text/TextInputSources");
#pragma pack(pop)
