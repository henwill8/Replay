// Autogenerated from CppHeaderCreator
// Created by Sc2ad
// =========================================================================
#pragma once
// Begin includes
#include "extern/beatsaber-hook/shared/utils/typedefs.h"
// Including type: TMPro.TMP_Text
#include "TMPro/TMP_Text.hpp"
// Including type: UnityEngine.UI.ILayoutElement
#include "UnityEngine/UI/ILayoutElement.hpp"
// Including type: TMPro.MaskingTypes
#include "TMPro/MaskingTypes.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-methods.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-properties.hpp"
#include "extern/beatsaber-hook/shared/utils/il2cpp-utils-fields.hpp"
#include "extern/beatsaber-hook/shared/utils/utils.h"
// Completed includes
// Begin forward declares
// Forward declaring namespace: UnityEngine
namespace UnityEngine {
  // Forward declaring type: Renderer
  class Renderer;
  // Forward declaring type: MeshFilter
  class MeshFilter;
  // Skipping declaration: Vector4 because it is already included!
  // Forward declaring type: Material
  class Material;
  // Skipping declaration: Color32 because it is already included!
  // Forward declaring type: Bounds
  struct Bounds;
  // Forward declaring type: Transform
  class Transform;
  // Forward declaring type: Mesh
  class Mesh;
}
// Forward declaring namespace: TMPro
namespace TMPro {
  // Forward declaring type: TMP_SubMesh
  class TMP_SubMesh;
  // Forward declaring type: TextContainer
  class TextContainer;
  // Forward declaring type: TMP_TextInfo
  class TMP_TextInfo;
  // Forward declaring type: TMP_VertexDataUpdateFlags
  struct TMP_VertexDataUpdateFlags;
}
// Forward declaring namespace: UnityEngine::UI
namespace UnityEngine::UI {
  // Forward declaring type: CanvasUpdate
  struct CanvasUpdate;
}
// Completed forward declares
// Type namespace: TMPro
namespace TMPro {
  // WARNING Size may be invalid!
  // Autogenerated type: TMPro.TextMeshPro
  // [] Offset: FFFFFFFF
  // [DisallowMultipleComponent] Offset: CFCF58
  // [RequireComponent] Offset: CFCF58
  // [RequireComponent] Offset: CFCF58
  // [AddComponentMenu] Offset: CFCF58
  // [ExecuteAlways] Offset: CFCF58
  class TextMeshPro : public TMPro::TMP_Text/*, public UnityEngine::UI::ILayoutElement*/ {
    public:
    // private System.Boolean m_hasFontAssetChanged
    // Size: 0x1
    // Offset: 0xB30
    bool m_hasFontAssetChanged;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Single m_previousLossyScaleY
    // Size: 0x4
    // Offset: 0xB34
    float m_previousLossyScaleY;
    // Field size check
    static_assert(sizeof(float) == 0x4);
    // private UnityEngine.Renderer m_renderer
    // Size: 0x8
    // Offset: 0xB38
    UnityEngine::Renderer* m_renderer;
    // Field size check
    static_assert(sizeof(UnityEngine::Renderer*) == 0x8);
    // private UnityEngine.MeshFilter m_meshFilter
    // Size: 0x8
    // Offset: 0xB40
    UnityEngine::MeshFilter* m_meshFilter;
    // Field size check
    static_assert(sizeof(UnityEngine::MeshFilter*) == 0x8);
    // private System.Boolean m_isFirstAllocation
    // Size: 0x1
    // Offset: 0xB48
    bool m_isFirstAllocation;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 m_max_characters
    // Size: 0x4
    // Offset: 0xB4C
    int m_max_characters;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Int32 m_max_numberOfLines
    // Size: 0x4
    // Offset: 0xB50
    int m_max_numberOfLines;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // protected TMPro.TMP_SubMesh[] m_subTextObjects
    // Size: 0x8
    // Offset: 0xB58
    ::Array<TMPro::TMP_SubMesh*>* m_subTextObjects;
    // Field size check
    static_assert(sizeof(::Array<TMPro::TMP_SubMesh*>*) == 0x8);
    // private System.Boolean m_isMaskingEnabled
    // Size: 0x1
    // Offset: 0xB60
    bool m_isMaskingEnabled;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Boolean isMaskUpdateRequired
    // Size: 0x1
    // Offset: 0xB61
    bool isMaskUpdateRequired;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private TMPro.MaskingTypes m_maskType
    // Size: 0x4
    // Offset: 0xB64
    TMPro::MaskingTypes m_maskType;
    // Field size check
    static_assert(sizeof(TMPro::MaskingTypes) == 0x4);
    // private UnityEngine.Matrix4x4 m_EnvMapMatrix
    // Size: 0x40
    // Offset: 0xB68
    UnityEngine::Matrix4x4 m_EnvMapMatrix;
    // Field size check
    static_assert(sizeof(UnityEngine::Matrix4x4) == 0x40);
    // private UnityEngine.Vector3[] m_RectTransformCorners
    // Size: 0x8
    // Offset: 0xBA8
    ::Array<UnityEngine::Vector3>* m_RectTransformCorners;
    // Field size check
    static_assert(sizeof(::Array<UnityEngine::Vector3>*) == 0x8);
    // private System.Boolean m_isRegisteredForEvents
    // Size: 0x1
    // Offset: 0xBB0
    bool m_isRegisteredForEvents;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // private System.Int32 loopCountA
    // Size: 0x4
    // Offset: 0xBB4
    int loopCountA;
    // Field size check
    static_assert(sizeof(int) == 0x4);
    // private System.Boolean m_currentAutoSizeMode
    // Size: 0x1
    // Offset: 0xBB8
    bool m_currentAutoSizeMode;
    // Field size check
    static_assert(sizeof(bool) == 0x1);
    // Creating value type constructor for type: TextMeshPro
    TextMeshPro(bool m_hasFontAssetChanged_ = {}, float m_previousLossyScaleY_ = {}, UnityEngine::Renderer* m_renderer_ = {}, UnityEngine::MeshFilter* m_meshFilter_ = {}, bool m_isFirstAllocation_ = {}, int m_max_characters_ = {}, int m_max_numberOfLines_ = {}, ::Array<TMPro::TMP_SubMesh*>* m_subTextObjects_ = {}, bool m_isMaskingEnabled_ = {}, bool isMaskUpdateRequired_ = {}, TMPro::MaskingTypes m_maskType_ = {}, UnityEngine::Matrix4x4 m_EnvMapMatrix_ = {}, ::Array<UnityEngine::Vector3>* m_RectTransformCorners_ = {}, bool m_isRegisteredForEvents_ = {}, int loopCountA_ = {}, bool m_currentAutoSizeMode_ = {}) noexcept : m_hasFontAssetChanged{m_hasFontAssetChanged_}, m_previousLossyScaleY{m_previousLossyScaleY_}, m_renderer{m_renderer_}, m_meshFilter{m_meshFilter_}, m_isFirstAllocation{m_isFirstAllocation_}, m_max_characters{m_max_characters_}, m_max_numberOfLines{m_max_numberOfLines_}, m_subTextObjects{m_subTextObjects_}, m_isMaskingEnabled{m_isMaskingEnabled_}, isMaskUpdateRequired{isMaskUpdateRequired_}, m_maskType{m_maskType_}, m_EnvMapMatrix{m_EnvMapMatrix_}, m_RectTransformCorners{m_RectTransformCorners_}, m_isRegisteredForEvents{m_isRegisteredForEvents_}, loopCountA{loopCountA_}, m_currentAutoSizeMode{m_currentAutoSizeMode_} {}
    // Creating interface conversion operator: operator UnityEngine::UI::ILayoutElement
    operator UnityEngine::UI::ILayoutElement() noexcept {
      return *reinterpret_cast<UnityEngine::UI::ILayoutElement*>(this);
    }
    // private System.Void UpdateEnvMapMatrix()
    // Offset: 0x12C3310
    void UpdateEnvMapMatrix();
    // private System.Void SetMask(TMPro.MaskingTypes maskType)
    // Offset: 0x12C3604
    void SetMask(TMPro::MaskingTypes maskType);
    // private System.Void SetMaskCoordinates(UnityEngine.Vector4 coords)
    // Offset: 0x12C3788
    void SetMaskCoordinates(UnityEngine::Vector4 coords);
    // private System.Void SetMaskCoordinates(UnityEngine.Vector4 coords, System.Single softX, System.Single softY)
    // Offset: 0x12C3838
    void SetMaskCoordinates(UnityEngine::Vector4 coords, float softX, float softY);
    // private System.Void EnableMasking()
    // Offset: 0x12C3940
    void EnableMasking();
    // private System.Void DisableMasking()
    // Offset: 0x12C3AEC
    void DisableMasking();
    // private System.Void UpdateMask()
    // Offset: 0x12C3A5C
    void UpdateMask();
    // private System.Void CreateMaterialInstance()
    // Offset: 0x12C3C04
    void CreateMaterialInstance();
    // private System.Void SetPerspectiveCorrection()
    // Offset: 0x12C4D78
    void SetPerspectiveCorrection();
    // private System.Void OnPreRenderObject()
    // Offset: 0x12C7248
    void OnPreRenderObject();
    // private System.Void SetMeshFilters(System.Boolean state)
    // Offset: 0x12CF5C4
    void SetMeshFilters(bool state);
    // private System.Void UpdateSDFScale(System.Single scaleDelta)
    // Offset: 0x12C7050
    void UpdateSDFScale(float scaleDelta);
    // public System.Int32 get_sortingLayerID()
    // Offset: 0x12D018C
    int get_sortingLayerID();
    // public System.Void set_sortingLayerID(System.Int32 value)
    // Offset: 0x12D01A8
    void set_sortingLayerID(int value);
    // public System.Int32 get_sortingOrder()
    // Offset: 0x12D01C4
    int get_sortingOrder();
    // public System.Void set_sortingOrder(System.Int32 value)
    // Offset: 0x12D01E0
    void set_sortingOrder(int value);
    // public TMPro.TextContainer get_textContainer()
    // Offset: 0x12D0264
    TMPro::TextContainer* get_textContainer();
    // public UnityEngine.Renderer get_renderer()
    // Offset: 0x12D026C
    UnityEngine::Renderer* get_renderer();
    // public UnityEngine.MeshFilter get_meshFilter()
    // Offset: 0x12C2BEC
    UnityEngine::MeshFilter* get_meshFilter();
    // public TMPro.MaskingTypes get_maskType()
    // Offset: 0x12D03FC
    TMPro::MaskingTypes get_maskType();
    // public System.Void set_maskType(TMPro.MaskingTypes value)
    // Offset: 0x12D0404
    void set_maskType(TMPro::MaskingTypes value);
    // public System.Void SetMask(TMPro.MaskingTypes type, UnityEngine.Vector4 maskCoords)
    // Offset: 0x12D040C
    void SetMask(TMPro::MaskingTypes type, UnityEngine::Vector4 maskCoords);
    // public System.Void SetMask(TMPro.MaskingTypes type, UnityEngine.Vector4 maskCoords, System.Single softnessX, System.Single softnessY)
    // Offset: 0x12D0460
    void SetMask(TMPro::MaskingTypes type, UnityEngine::Vector4 maskCoords, float softnessX, float softnessY);
    // public System.Void UpdateFontAsset()
    // Offset: 0x12D0E8C
    void UpdateFontAsset();
    // protected override System.Void Awake()
    // Offset: 0x12C257C
    // Implemented from: UnityEngine.EventSystems.UIBehaviour
    // Base method: System.Void UIBehaviour::Awake()
    void Awake();
    // protected override System.Void OnEnable()
    // Offset: 0x12C2B20
    // Implemented from: UnityEngine.UI.MaskableGraphic
    // Base method: System.Void MaskableGraphic::OnEnable()
    void OnEnable();
    // protected override System.Void OnDisable()
    // Offset: 0x12C2C98
    // Implemented from: UnityEngine.UI.MaskableGraphic
    // Base method: System.Void MaskableGraphic::OnDisable()
    void OnDisable();
    // protected override System.Void OnDestroy()
    // Offset: 0x12C2D00
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::OnDestroy()
    void OnDestroy();
    // protected override System.Void LoadFontAsset()
    // Offset: 0x12C2DB8
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::LoadFontAsset()
    void LoadFontAsset();
    // protected override UnityEngine.Material GetMaterial(UnityEngine.Material mat)
    // Offset: 0x12C3CD4
    // Implemented from: TMPro.TMP_Text
    // Base method: UnityEngine.Material TMP_Text::GetMaterial(UnityEngine.Material mat)
    UnityEngine::Material* GetMaterial(UnityEngine::Material* mat);
    // protected override UnityEngine.Material[] GetMaterials(UnityEngine.Material[] mats)
    // Offset: 0x12C3E08
    // Implemented from: TMPro.TMP_Text
    // Base method: UnityEngine.Material[] TMP_Text::GetMaterials(UnityEngine.Material[] mats)
    ::Array<UnityEngine::Material*>* GetMaterials(::Array<UnityEngine::Material*>* mats);
    // protected override System.Void SetSharedMaterial(UnityEngine.Material mat)
    // Offset: 0x12C3FE4
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::SetSharedMaterial(UnityEngine.Material mat)
    void SetSharedMaterial(UnityEngine::Material* mat);
    // protected override UnityEngine.Material[] GetSharedMaterials()
    // Offset: 0x12C4030
    // Implemented from: TMPro.TMP_Text
    // Base method: UnityEngine.Material[] TMP_Text::GetSharedMaterials()
    ::Array<UnityEngine::Material*>* GetSharedMaterials();
    // protected override System.Void SetSharedMaterials(UnityEngine.Material[] materials)
    // Offset: 0x12C41E8
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::SetSharedMaterials(UnityEngine.Material[] materials)
    void SetSharedMaterials(::Array<UnityEngine::Material*>* materials);
    // protected override System.Void SetOutlineThickness(System.Single thickness)
    // Offset: 0x12C45B8
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::SetOutlineThickness(System.Single thickness)
    void SetOutlineThickness(float thickness);
    // protected override System.Void SetFaceColor(UnityEngine.Color32 color)
    // Offset: 0x12C473C
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::SetFaceColor(UnityEngine.Color32 color)
    void SetFaceColor(UnityEngine::Color32 color);
    // protected override System.Void SetOutlineColor(UnityEngine.Color32 color)
    // Offset: 0x12C4858
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::SetOutlineColor(UnityEngine.Color32 color)
    void SetOutlineColor(UnityEngine::Color32 color);
    // protected override System.Void SetShaderDepth()
    // Offset: 0x12C4974
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::SetShaderDepth()
    void SetShaderDepth();
    // protected override System.Void SetCulling()
    // Offset: 0x12C4A98
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::SetCulling()
    void SetCulling();
    // protected override System.Single GetPaddingForMaterial(UnityEngine.Material mat)
    // Offset: 0x12C4E24
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Single TMP_Text::GetPaddingForMaterial(UnityEngine.Material mat)
    float GetPaddingForMaterial(UnityEngine::Material* mat);
    // protected override System.Single GetPaddingForMaterial()
    // Offset: 0x12C4F00
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Single TMP_Text::GetPaddingForMaterial()
    float GetPaddingForMaterial();
    // protected override System.Int32 SetArraySizes(TMPro.TMP_Text/UnicodeChar[] chars)
    // Offset: 0x12C503C
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Int32 TMP_Text::SetArraySizes(TMPro.TMP_Text/UnicodeChar[] chars)
    int SetArraySizes(::Array<TMPro::TMP_Text::UnicodeChar>* chars);
    // public override System.Void ComputeMarginSize()
    // Offset: 0x12C6DA4
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::ComputeMarginSize()
    void ComputeMarginSize();
    // protected override System.Void OnDidApplyAnimationProperties()
    // Offset: 0x12C6ED0
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::OnDidApplyAnimationProperties()
    void OnDidApplyAnimationProperties();
    // protected override System.Void OnTransformParentChanged()
    // Offset: 0x12C6EEC
    // Implemented from: UnityEngine.UI.MaskableGraphic
    // Base method: System.Void MaskableGraphic::OnTransformParentChanged()
    void OnTransformParentChanged();
    // protected override System.Void OnRectTransformDimensionsChange()
    // Offset: 0x12C6F28
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::OnRectTransformDimensionsChange()
    void OnRectTransformDimensionsChange();
    // override System.Void InternalUpdate()
    // Offset: 0x12C6F78
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::InternalUpdate()
    void InternalUpdate();
    // protected override System.Void GenerateTextMesh()
    // Offset: 0x12C73D8
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::GenerateTextMesh()
    void GenerateTextMesh();
    // protected override UnityEngine.Vector3[] GetTextContainerLocalCorners()
    // Offset: 0x12CF510
    // Implemented from: TMPro.TMP_Text
    // Base method: UnityEngine.Vector3[] TMP_Text::GetTextContainerLocalCorners()
    ::Array<UnityEngine::Vector3>* GetTextContainerLocalCorners();
    // protected override System.Void SetActiveSubMeshes(System.Boolean state)
    // Offset: 0x12CF7B0
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::SetActiveSubMeshes(System.Boolean state)
    void SetActiveSubMeshes(bool state);
    // protected override System.Void ClearSubMeshObjects()
    // Offset: 0x12CF8D0
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::ClearSubMeshObjects()
    void ClearSubMeshObjects();
    // protected override UnityEngine.Bounds GetCompoundBounds()
    // Offset: 0x12CFA5C
    // Implemented from: TMPro.TMP_Text
    // Base method: UnityEngine.Bounds TMP_Text::GetCompoundBounds()
    UnityEngine::Bounds GetCompoundBounds();
    // protected override System.Void AdjustLineOffset(System.Int32 startIndex, System.Int32 endIndex, System.Single offset)
    // Offset: 0x12CFD74
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::AdjustLineOffset(System.Int32 startIndex, System.Int32 endIndex, System.Single offset)
    void AdjustLineOffset(int startIndex, int endIndex, float offset);
    // public override System.Boolean get_autoSizeTextContainer()
    // Offset: 0x12D01FC
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Boolean TMP_Text::get_autoSizeTextContainer()
    bool get_autoSizeTextContainer();
    // public override System.Void set_autoSizeTextContainer(System.Boolean value)
    // Offset: 0x12D0204
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::set_autoSizeTextContainer(System.Boolean value)
    void set_autoSizeTextContainer(bool value);
    // public UnityEngine.Transform get_transform()
    // Offset: 0x12C2A74
    // Implemented from: TMPro.TMP_Text
    // Base method: UnityEngine.Transform TMP_Text::get_transform()
    // Base method: UnityEngine.Transform Graphic::UnityEngine.UI.ICanvasElement.get_transform()
    // Base method: UnityEngine.Transform Component::get_transform()
    // Base method: UnityEngine.Transform ICanvasElement::get_transform()
    UnityEngine::Transform* get_transform();
    // Creating proxy method: UnityEngine_UI_ICanvasElement_get_transform
    // Maps to method: get_transform
    UnityEngine::Transform* UnityEngine_UI_ICanvasElement_get_transform();
    // Creating proxy method: UnityEngine_UI_ICanvasElement_get_transform
    // Maps to method: get_transform
    // Skipping redundant proxy method: UnityEngine_UI_ICanvasElement_get_transform
    // Creating proxy method: UnityEngine_UI_ICanvasElement_get_transform
    // Maps to method: get_transform
    // Skipping redundant proxy method: UnityEngine_UI_ICanvasElement_get_transform
    // public override UnityEngine.Mesh get_mesh()
    // Offset: 0x12D0318
    // Implemented from: TMPro.TMP_Text
    // Base method: UnityEngine.Mesh TMP_Text::get_mesh()
    UnityEngine::Mesh* get_mesh();
    // public override System.Void SetVerticesDirty()
    // Offset: 0x12D04CC
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::SetVerticesDirty()
    void SetVerticesDirty();
    // public override System.Void SetLayoutDirty()
    // Offset: 0x12D056C
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::SetLayoutDirty()
    void SetLayoutDirty();
    // public override System.Void SetMaterialDirty()
    // Offset: 0x12D0614
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::SetMaterialDirty()
    void SetMaterialDirty();
    // public override System.Void SetAllDirty()
    // Offset: 0x12D0624
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::SetAllDirty()
    void SetAllDirty();
    // public override System.Void Rebuild(UnityEngine.UI.CanvasUpdate update)
    // Offset: 0x12D067C
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::Rebuild(UnityEngine.UI.CanvasUpdate update)
    void Rebuild(UnityEngine::UI::CanvasUpdate update);
    // protected override System.Void UpdateMaterial()
    // Offset: 0x12D0778
    // Implemented from: UnityEngine.UI.Graphic
    // Base method: System.Void Graphic::UpdateMaterial()
    void UpdateMaterial();
    // public override System.Void UpdateMeshPadding()
    // Offset: 0x12D08A4
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::UpdateMeshPadding()
    void UpdateMeshPadding();
    // public override System.Void ForceMeshUpdate()
    // Offset: 0x12D09BC
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::ForceMeshUpdate()
    void ForceMeshUpdate();
    // public override System.Void ForceMeshUpdate(System.Boolean ignoreInactive)
    // Offset: 0x12D09C8
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::ForceMeshUpdate(System.Boolean ignoreInactive)
    void ForceMeshUpdate(bool ignoreInactive);
    // public override TMPro.TMP_TextInfo GetTextInfo(System.String text)
    // Offset: 0x12D09D8
    // Implemented from: TMPro.TMP_Text
    // Base method: TMPro.TMP_TextInfo TMP_Text::GetTextInfo(System.String text)
    TMPro::TMP_TextInfo* GetTextInfo(::Il2CppString* text);
    // public override System.Void ClearMesh(System.Boolean updateMesh)
    // Offset: 0x12D0A50
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::ClearMesh(System.Boolean updateMesh)
    void ClearMesh(bool updateMesh);
    // public override System.Void UpdateGeometry(UnityEngine.Mesh mesh, System.Int32 index)
    // Offset: 0x12D0B2C
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::UpdateGeometry(UnityEngine.Mesh mesh, System.Int32 index)
    void UpdateGeometry(UnityEngine::Mesh* mesh, int index);
    // public override System.Void UpdateVertexData(TMPro.TMP_VertexDataUpdateFlags flags)
    // Offset: 0x12D0B48
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::UpdateVertexData(TMPro.TMP_VertexDataUpdateFlags flags)
    void UpdateVertexData(TMPro::TMP_VertexDataUpdateFlags flags);
    // public override System.Void UpdateVertexData()
    // Offset: 0x12D0CEC
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::UpdateVertexData()
    void UpdateVertexData();
    // public System.Void CalculateLayoutInputHorizontal()
    // Offset: 0x12D0E9C
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Void ILayoutElement::CalculateLayoutInputHorizontal()
    void CalculateLayoutInputHorizontal();
    // public System.Void CalculateLayoutInputVertical()
    // Offset: 0x12D0FCC
    // Implemented from: UnityEngine.UI.ILayoutElement
    // Base method: System.Void ILayoutElement::CalculateLayoutInputVertical()
    void CalculateLayoutInputVertical();
    // public System.Void .ctor()
    // Offset: 0x12D10D8
    // Implemented from: TMPro.TMP_Text
    // Base method: System.Void TMP_Text::.ctor()
    // Base method: System.Void MaskableGraphic::.ctor()
    // Base method: System.Void Graphic::.ctor()
    // Base method: System.Void UIBehaviour::.ctor()
    // Base method: System.Void MonoBehaviour::.ctor()
    // Base method: System.Void Behaviour::.ctor()
    // Base method: System.Void Component::.ctor()
    // Base method: System.Void Object::.ctor()
    // Base method: System.Void Object::.ctor()
    template<::il2cpp_utils::CreationType creationType = ::il2cpp_utils::CreationType::Temporary>
    static TextMeshPro* New_ctor() {
      static auto ___internal__logger = ::Logger::get().WithContext("TMPro::TextMeshPro::.ctor");
      return THROW_UNLESS((::il2cpp_utils::New<TextMeshPro*, creationType>()));
    }
  }; // TMPro.TextMeshPro
  // WARNING Not writing size check since size may be invalid!
}
DEFINE_IL2CPP_ARG_TYPE(TMPro::TextMeshPro*, "TMPro", "TextMeshPro");
